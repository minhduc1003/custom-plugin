import {
  PL,
  ao
} from "./chunk-C4ZQG65I.js";
import {
  require_react_dom
} from "./chunk-VGGCA2L5.js";
import {
  require_react
} from "./chunk-73THXJN7.js";
import {
  __toESM
} from "./chunk-2TUXWMP5.js";

// node_modules/lowcoder-sdk/dist/8b59b884.js
var import_react = __toESM(require_react(), 1);
var import_react_dom = __toESM(require_react_dom(), 1);
function t(e, s, c) {
  const n = PL(e.reduce(e.changeValueAction(s)));
  return expect(n.getView()).toEqual(c), n;
}
function o(e) {
  return PL(e.reduce(e.changeModeAction()));
}
test("test bool control value", () => {
  let e = new ao({});
  expect(e.getView()).toEqual(false), e = t(e, "true", true), e = t(e, "false", false), e = t(e, '{{"true"}}', true), e = t(e, "{{1-1}}", false), e = t(e, "{{1+3-4}}", false), e = t(e, "{{undefined}}", false), e = t(e, "{{null}}", false);
});
test("test bool control change mode", () => {
  let e = new ao({});
  expect(e.getView()).toEqual(false), expect(e.toJsonValue()).toEqual(false), e = o(e), expect(e.toJsonValue()).toEqual("false"), e = t(e, "true", true), e = o(e), expect(e.toJsonValue()).toEqual(true), e = o(e), expect(e.toJsonValue()).toEqual("true"), e = t(e, "{{1+3-4}}", false), e = o(e), expect(e.toJsonValue()).toEqual(false), e = o(e), expect(e.toJsonValue()).toEqual("{{1+3-4}}");
});
function l(e) {
  return PL(new ao({
    dispatch: e.dispatch,
    value: o(e).toJsonValue()
  }));
}
test("test bool control change mode and reload", () => {
  let e = new ao({});
  expect(e.getView()).toEqual(false), expect(e.toJsonValue()).toEqual(false), e = l(e), expect(e.toJsonValue()).toEqual("false"), e = t(e, "true", true), e = l(e), expect(e.toJsonValue()).toEqual(true), e = l(e), expect(e.toJsonValue()).toEqual("true"), e = t(e, "{{1+3-4}}", false), e = l(e), expect(e.toJsonValue()).toEqual(false), e = l(e), expect(e.toJsonValue()).toEqual("false");
});
//# sourceMappingURL=8b59b884-YGIG45TP.js.map
