import {
  L,
  wt
} from "./chunk-WBVHF7PY.js";
import "./chunk-LCCS23J3.js";
import "./chunk-6DTACY26.js";
import {
  sn
} from "./chunk-C4ZQG65I.js";
import "./chunk-VGGCA2L5.js";
import {
  require_react
} from "./chunk-73THXJN7.js";
import {
  __toESM
} from "./chunk-2TUXWMP5.js";

// node_modules/lowcoder-sdk/dist/189a77ad.js
var import_react = __toESM(require_react(), 1);
function k(a, e) {
  for (var t = 0; t < e.length; t++) {
    const o = e[t];
    if (typeof o != "string" && !Array.isArray(o)) {
      for (const r in o)
        if (r !== "default" && !(r in a)) {
          const n = Object.getOwnPropertyDescriptor(o, r);
          n && Object.defineProperty(a, r, n.get ? n : {
            enumerable: true,
            get: () => o[r]
          });
        }
    }
  }
  return Object.freeze(Object.defineProperty(a, Symbol.toStringTag, { value: "Module" }));
}
var M = Object.create;
var u = Object.defineProperty;
var j = Object.getOwnPropertyDescriptor;
var N = Object.getOwnPropertyNames;
var V = Object.getPrototypeOf;
var B = Object.prototype.hasOwnProperty;
var K = (a, e, t) => e in a ? u(a, e, { enumerable: true, configurable: true, writable: true, value: t }) : a[e] = t;
var x = (a, e) => {
  for (var t in e)
    u(a, t, { get: e[t], enumerable: true });
};
var v = (a, e, t, o) => {
  if (e && typeof e == "object" || typeof e == "function")
    for (let r of N(e))
      !B.call(a, r) && r !== t && u(a, r, { get: () => e[r], enumerable: !(o = j(e, r)) || o.enumerable });
  return a;
};
var F = (a, e, t) => (t = a != null ? M(V(a)) : {}, v(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  e || !a || !a.__esModule ? u(t, "default", { value: a, enumerable: true }) : t,
  a
));
var H = (a) => v(u({}, "__esModule", { value: true }), a);
var s = (a, e, t) => (K(a, typeof e != "symbol" ? e + "" : e, t), t);
var w = {};
x(w, {
  default: () => O
});
var S = H(w);
var m = F(import_react.default);
var p = L;
var D = wt;
var G = "https://www.youtube.com/iframe_api";
var T = "YT";
var z = "onYouTubeIframeAPIReady";
var f = /[?&](?:list|channel)=([a-zA-Z0-9_-]+)/;
var b = /user\/([a-zA-Z0-9_-]+)\/?/;
var Q = /youtube-nocookie\.com/;
var Z = "https://www.youtube-nocookie.com";
var O = class extends m.Component {
  constructor() {
    super(...arguments), s(this, "callPlayer", p.callPlayer), s(this, "parsePlaylist", (e) => {
      if (e instanceof Array)
        return {
          listType: "playlist",
          playlist: e.map(this.getID).join(",")
        };
      if (f.test(e)) {
        const [, t] = e.match(f);
        return {
          listType: "playlist",
          list: t.replace(/^UC/, "UU")
        };
      }
      if (b.test(e)) {
        const [, t] = e.match(b);
        return {
          listType: "user_uploads",
          list: t
        };
      }
      return {};
    }), s(this, "onStateChange", (e) => {
      const { data: t } = e, { onPlay: o, onPause: r, onBuffer: n, onBufferEnd: P, onEnded: _, onReady: g, loop: y, config: { playerVars: l, onUnstarted: h } } = this.props, { UNSTARTED: d, PLAYING: c, PAUSED: i, BUFFERING: E, ENDED: A, CUED: C } = window[T].PlayerState;
      if (t === d && h(), t === c && (o(), P()), t === i && r(), t === E && n(), t === A) {
        const R = !!this.callPlayer("getPlaylist");
        y && !R && (l.start ? this.seekTo(l.start) : this.play()), _();
      }
      t === C && g();
    }), s(this, "mute", () => {
      this.callPlayer("mute");
    }), s(this, "unmute", () => {
      this.callPlayer("unMute");
    }), s(this, "ref", (e) => {
      this.container = e;
    });
  }
  componentDidMount() {
    this.props.onMount && this.props.onMount(this);
  }
  getID(e) {
    return !e || e instanceof Array || f.test(e) ? null : e.match(D.MATCH_URL_YOUTUBE)[1];
  }
  load(e, t) {
    const { playing: o, muted: r, playsinline: n, controls: P, loop: _, config: g, onError: y } = this.props, { playerVars: l, embedOptions: h } = g, d = this.getID(e);
    if (t) {
      if (f.test(e) || b.test(e) || e instanceof Array) {
        this.player.loadPlaylist(this.parsePlaylist(e));
        return;
      }
      this.player.cueVideoById({
        videoId: d,
        startSeconds: (0, p.parseStartTime)(e) || l.start,
        endSeconds: (0, p.parseEndTime)(e) || l.end
      });
      return;
    }
    (0, p.getSDK)(G, T, z, (c) => c.loaded).then((c) => {
      this.container && (this.player = new c.Player(this.container, {
        width: "100%",
        height: "100%",
        videoId: d,
        playerVars: {
          autoplay: o ? 1 : 0,
          mute: r ? 1 : 0,
          controls: P ? 1 : 0,
          start: (0, p.parseStartTime)(e),
          end: (0, p.parseEndTime)(e),
          origin: window.location.origin,
          playsinline: n ? 1 : 0,
          ...this.parsePlaylist(e),
          ...l
        },
        events: {
          onReady: () => {
            _ && this.player.setLoop(true), this.props.onReady();
          },
          onPlaybackRateChange: (i) => this.props.onPlaybackRateChange(i.data),
          onPlaybackQualityChange: (i) => this.props.onPlaybackQualityChange(i),
          onStateChange: this.onStateChange,
          onError: (i) => y(i.data)
        },
        host: Q.test(e) ? Z : void 0,
        ...h
      }));
    }, y), h.events && console.warn("Using `embedOptions.events` will likely break things. Use ReactPlayerâ€™s callback props instead, eg onReady, onPlay, onPause");
  }
  play() {
    this.callPlayer("playVideo");
  }
  pause() {
    this.callPlayer("pauseVideo");
  }
  stop() {
    document.body.contains(this.callPlayer("getIframe")) && this.callPlayer("stopVideo");
  }
  seekTo(e, t = false) {
    this.callPlayer("seekTo", e), !t && !this.props.playing && this.pause();
  }
  setVolume(e) {
    this.callPlayer("setVolume", e * 100);
  }
  setPlaybackRate(e) {
    this.callPlayer("setPlaybackRate", e);
  }
  setLoop(e) {
    this.callPlayer("setLoop", e);
  }
  getDuration() {
    return this.callPlayer("getDuration");
  }
  getCurrentTime() {
    return this.callPlayer("getCurrentTime");
  }
  getSecondsLoaded() {
    return this.callPlayer("getVideoLoadedFraction") * this.getDuration();
  }
  render() {
    const { display: e } = this.props, t = {
      width: "100%",
      height: "100%",
      display: e
    };
    return m.default.createElement("div", { style: t }, m.default.createElement("div", { ref: this.ref }));
  }
};
s(O, "displayName", "YouTube");
s(O, "canPlay", D.canPlay.youtube);
var $ = sn(S);
var X = k({
  __proto__: null,
  default: $
}, [S]);
export {
  X as Y
};
//# sourceMappingURL=189a77ad-OBHL3UPI.js.map
