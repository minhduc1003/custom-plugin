import {
  Hw,
  Ih,
  Ln,
  W8,
  Z9,
  d,
  g2,
  h2,
  pg
} from "./chunk-C4ZQG65I.js";
import {
  require_react_dom
} from "./chunk-VGGCA2L5.js";
import {
  require_react
} from "./chunk-73THXJN7.js";
import {
  __toESM
} from "./chunk-2TUXWMP5.js";

// node_modules/lowcoder-sdk/dist/e24f8869.js
var import_react = __toESM(require_react(), 1);
var import_react_dom = __toESM(require_react_dom(), 1);
var d2 = Object.defineProperty;
var f = (i, u, e) => u in i ? d2(i, u, { enumerable: true, configurable: true, writable: true, value: e }) : i[u] = e;
var l = (i, u, e) => (f(i, typeof u != "symbol" ? u + "" : u, e), e);
var x = new g2({}, (i) => i).build();
var I = class extends x {
  constructor(e) {
    super(e);
    l(this, "params", {});
    l(this, "inputs", []);
    this.params = e;
  }
  getView() {
    return this.children;
  }
  getPropertyView() {
    return this.inputs.length === 0 ? null : this.inputs.map(({
      name: e,
      description: t
    }) => {
      const s = this.children[e];
      return s ? d(import_react.Fragment, {
        children: s.propertyView({
          label: e,
          tooltip: t,
          layout: "vertical"
        })
      }, e) : null;
    });
  }
  setInputs(e) {
    const t = {};
    e.forEach(({
      name: n,
      type: r
    }) => {
      Hw[r] && (t[n] = Hw[r]);
    });
    const s = Z9(this.params, t);
    return Ln(this, {
      children: s,
      inputs: e
    });
  }
  getInputNodes() {
    const e = {};
    return this.inputs.forEach(({
      name: t,
      type: s
    }) => {
      const n = this.children[t];
      if (n) {
        if (s === pg.Query) {
          const r = n.children.value.getView();
          if (!r)
            return;
          e[t] = r;
          return;
        }
        if (n.unevaledValue) {
          const r = n.node();
          r && (e[t] = r);
        }
      }
    }), e;
  }
  getInputQueryExecAction(e) {
    var r;
    if (e.type !== h2.ROUTE_BY_NAME || e.action.type !== h2.EXECUTE_QUERY)
      return null;
    const t = e.name;
    if (!this.inputs.some(({
      name: o,
      type: h
    }) => t === o && h === pg.Query))
      return null;
    const n = (r = Object.entries(this.children).find(([o]) => o === t)) == null ? void 0 : r[1];
    return n ? Ih(n.getView().value, W8(e.action)) : null;
  }
};
export {
  I as default
};
//# sourceMappingURL=e24f8869-WZDCYCKG.js.map
