import {
  JA,
  JU1,
  N0,
  PL,
  QU1,
  _n,
  d,
  g2,
  p1,
  t2,
  vc
} from "./chunk-C4ZQG65I.js";
import {
  require_react_dom
} from "./chunk-VGGCA2L5.js";
import {
  require_react
} from "./chunk-73THXJN7.js";
import {
  __toESM
} from "./chunk-2TUXWMP5.js";

// node_modules/lowcoder-sdk/dist/6936486d.js
var import_react = __toESM(require_react(), 1);
var import_react_dom = __toESM(require_react_dom(), 1);
var p = function() {
  const e = {
    numChild: JU1("num"),
    textChild: QU1("text"),
    booleanChild: JA("status"),
    value: t2(vc, "0")
  };
  return new g2(e, (t) => t).setPropertyViewFn(() => d(p1, {})).build();
}();
var h = N0(p, [{
  method: {
    name: "doAdd",
    params: [{
      name: "addend",
      type: "number"
    }]
  },
  execute: (e, t) => {
    e.children.value.dispatchChangeValueAction(e.children.value.getView() + t[0] + "");
  }
}]);
test("test exec method", async () => {
  let e = new h({
    dispatch: (t) => {
      e = PL(e.reduce(t));
    }
  });
  e = PL(e), e.reduce(_n({
    type: "execute",
    methodName: "setText",
    // @ts-ignore
    params: ["testText"]
  }, false)), e.reduce(_n({
    type: "execute",
    methodName: "setStatus",
    // @ts-ignore
    params: [true]
  }, false)), e.reduce(_n({
    type: "execute",
    methodName: "doAdd",
    // @ts-ignore
    params: [10]
  }, false)), await new Promise((t) => setTimeout(t, 20)), expect(e.getView().textChild.value).toEqual("testText"), expect(e.getView().booleanChild.value).toEqual(true), expect(e.getView().value).toEqual(10);
});
//# sourceMappingURL=6936486d-VWSJ2XYH.js.map
