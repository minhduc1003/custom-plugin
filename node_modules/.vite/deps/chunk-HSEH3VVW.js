import {
  c,
  h
} from "./chunk-5NYYS2XH.js";
import {
  D9,
  E22,
  E7,
  Fj1,
  GK1,
  H0,
  H3,
  JA,
  N,
  RQe,
  T2,
  TQe,
  VC,
  VS,
  Vr,
  ZK1,
  _,
  b0,
  d,
  de,
  et1,
  fW1,
  ka,
  nc,
  nt1,
  p1,
  pW1,
  qC,
  tt1,
  uW1,
  vo,
  ya,
  zte
} from "./chunk-C4ZQG65I.js";
import {
  require_react_dom
} from "./chunk-VGGCA2L5.js";
import {
  require_react
} from "./chunk-73THXJN7.js";
import {
  __toESM
} from "./chunk-2TUXWMP5.js";

// node_modules/lowcoder-sdk/dist/f588d8b4.js
var import_react = __toESM(require_react(), 1);
var import_react_dom = __toESM(require_react_dom(), 1);
var T = [VC, {
  label: _("switchComp.open"),
  value: "true",
  description: _("switchComp.openDesc")
}, {
  label: _("switchComp.close"),
  value: "false",
  description: _("switchComp.closeDesc")
}];
var W = (t) => T2`
    .ant-switch-handle::before {
      background: ${t.handle};
    }
    button {
      background-image: none;
      background: ${t.unchecked};
      &.ant-switch-checked {
        background: ${t.checked};
        &:hover:not(.ant-switch-disabled) {
          background: ${D9(t.checked, 0.2)}
        }
      }
    }
  `;
var X = de.div`
  min-height: 32px;
  display: flex;
  align-items: center;
  // Can respond to drag & select events when disabled
  ${(t) => t.disabled && `
    cursor: not-allowed;
    >button:disabled {
      pointer-events: none;
    }
  `};
  ${(t) => t.$style && W(t.$style)}
`;
function z(t) {
  return t && t.hasOwnProperty("unChecked") ? {
    label: t.label,
    handle: t.handle,
    unchecked: t.unChecked,
    checked: t.checked
  } : t;
}
var A = function() {
  const t = {
    value: JA("value"),
    label: GK1,
    onEvent: ya(T),
    disabled: H3,
    style: nc(fW1, "style"),
    animationStyle: nc(Fj1, "animationStyle"),
    labelStyle: nc(uW1.filter((e) => ["accent", "validate"].includes(e.name) === false), "labelStyle"),
    viewRef: ZK1,
    inputFieldStyle: zte(nc(pW1, "inputFieldStyle"), z),
    ...c
  };
  return new VS(t, (e) => e.label({
    style: e.style,
    labelStyle: e.labelStyle,
    inputFieldStyle: e.inputFieldStyle,
    animationStyle: e.animationStyle,
    children: d(X, {
      disabled: e.disabled,
      $style: e.inputFieldStyle,
      children: d(E22, {
        checked: e.value.value,
        disabled: e.disabled,
        ref: e.viewRef,
        onChange: (r) => {
          e.value.onChange(r), e.onEvent("change"), e.onEvent(r ? "true" : "false");
        }
      })
    })
  })).setPropertyViewFn((e) => N(p1, {
    children: [d(ka, {
      name: b0.basic,
      children: e.value.propertyView({
        label: _("switchComp.defaultValue")
      })
    }), d(h, {
      ...e
    }), ["logic", "both"].includes((0, import_react.useContext)(Vr).editorModeStatus) && N(ka, {
      name: b0.interaction,
      children: [e.onEvent.getPropertyView(), qC(e), E7(e)]
    }), ["layout", "both"].includes((0, import_react.useContext)(Vr).editorModeStatus) && e.label.getPropertyView(), ["layout", "both"].includes((0, import_react.useContext)(Vr).editorModeStatus) && N(p1, {
      children: [d(ka, {
        name: b0.style,
        children: e.style.getPropertyView()
      }), d(ka, {
        name: b0.labelStyle,
        children: e.labelStyle.getPropertyView()
      }), d(ka, {
        name: b0.inputFieldStyle,
        children: e.inputFieldStyle.getPropertyView()
      }), d(ka, {
        name: b0.animationStyle,
        hasTooltip: true,
        children: e.animationStyle.getPropertyView()
      })]
    })]
  })).setExposeMethodConfigs(TQe([et1, tt1, nt1])).build();
}();
var Y = H0(A, [new vo("value", _("switchComp.valueDesc")), ...RQe]);

export {
  Y
};
//# sourceMappingURL=chunk-HSEH3VVW.js.map
