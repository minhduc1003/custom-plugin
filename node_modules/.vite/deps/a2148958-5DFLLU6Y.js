import {
  Ct,
  PL,
  _,
  bG1
} from "./chunk-C4ZQG65I.js";
import {
  require_react_dom
} from "./chunk-VGGCA2L5.js";
import {
  require_react
} from "./chunk-73THXJN7.js";
import {
  __toESM
} from "./chunk-2TUXWMP5.js";

// node_modules/lowcoder-sdk/dist/a2148958.js
var import_react = __toESM(require_react(), 1);
var import_react_dom = __toESM(require_react_dom(), 1);
jest.mock("lowcoder-design/src/components/GlobalInstances", () => ({
  __esModule: true,
  // this property makes it work
  default: "mockedDefaultExport",
  messageInstance: {
    error: jest.fn(),
    success: jest.fn()
  }
}));
var c = {
  value: {
    showSuccess: true,
    success: {
      text: "success"
    },
    showFail: true,
    fail: [{
      text: "{{ data + 1 }}",
      condition: "{{ data + 1 === 2 }}"
    }, {
      text: "{{ data }}",
      condition: "{{ data === 3 }}"
    }],
    duration: ""
  }
};
beforeAll(() => {
  jest.spyOn(Ct, "error"), jest.spyOn(Ct, "success");
});
test("test custom fail", () => {
  let e = new bG1(c);
  e = PL(e), e.getView()("", "automatic", {
    data: 1,
    success: false
  }), expect(Ct.error).toHaveBeenCalledWith("2", 3);
});
test("test system fail", () => {
  let e = new bG1(c);
  e = PL(e), e.getView()("", "automatic", {
    data: 4,
    success: false
  }), expect(Ct.error).toHaveBeenCalledWith(_("query.failMessageWithName", {
    name: "",
    result: "{}"
  }), 3);
});
test("test custom success", () => {
  let e = new bG1(c);
  e = PL(e), e.getView()("", "automatic", {
    data: 4,
    success: true
  }), expect(Ct.success).toHaveBeenCalledTimes(0), e.getView()("", "manual", {
    data: 4,
    success: false
  }), expect(Ct.success).toHaveBeenCalledTimes(0), e.getView()("", "manual", {
    data: 1,
    success: true
  }), expect(Ct.success).toHaveBeenCalledTimes(0), expect(Ct.error).toHaveBeenCalled(), e.getView()("", "manual", {
    data: 4,
    success: true
  }), expect(Ct.success).toHaveBeenCalledWith("success", 3);
});
test("test system success", () => {
  let e = new bG1({
    value: {
      showSuccess: true,
      success: {
        text: ""
      },
      showFail: true,
      fail: [{
        text: "{{ data }}",
        condition: "{{ data === 2 }}"
      }, {
        text: "{{ data }}",
        condition: "{{ data === 3 }}"
      }],
      duration: ""
    }
  });
  e = PL(e), e.getView()("", "manual", {
    data: 4,
    success: true
  }), expect(Ct.success).toHaveBeenCalledWith(_("query.successMessageWithName", {
    name: ""
  }), 3);
});
test("test duration", () => {
  let e = new bG1({
    value: {
      ...c.value,
      duration: "3s"
    }
  });
  e = PL(e), e.getView()("", "automatic", {
    data: 1,
    success: false
  }), expect(Ct.error).toHaveBeenNthCalledWith(1, "2", 3), e = new bG1({
    value: {
      ...c.value,
      duration: "1000ms"
    }
  }), e = PL(e), e.getView()("", "automatic", {
    data: 1,
    success: false
  }), expect(Ct.error).toHaveBeenNthCalledWith(2, "2", 1), e = new bG1({
    value: {
      ...c.value,
      duration: "{{2*2}}"
    }
  }), e = PL(e), e.getView()("", "automatic", {
    data: 1,
    success: false
  }), expect(Ct.error).toHaveBeenNthCalledWith(3, "2", 4);
});
//# sourceMappingURL=a2148958-5DFLLU6Y.js.map
