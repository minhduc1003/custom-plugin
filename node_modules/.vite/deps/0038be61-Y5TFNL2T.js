import {
  Bn,
  H0,
  HQe,
  JU1,
  LC,
  M2,
  PL,
  _n,
  ao,
  d,
  g2,
  p1,
  vo
} from "./chunk-C4ZQG65I.js";
import {
  require_react_dom
} from "./chunk-VGGCA2L5.js";
import {
  require_react
} from "./chunk-73THXJN7.js";
import {
  __toESM
} from "./chunk-2TUXWMP5.js";

// node_modules/lowcoder-sdk/dist/0038be61.js
var import_react = __toESM(require_react(), 1);
var import_react_dom = __toESM(require_react_dom(), 1);
var l = function() {
  const e = {
    v1: Bn("abc"),
    v2: Bn("v2"),
    visible: ao,
    value: M2,
    num: JU1("num")
  };
  return new g2(e, (o) => o).setPropertyViewFn(() => d(p1, {})).build();
}();
var r = H0(l, [new vo("v1"), new vo("visible"), new vo("value"), new vo("num")]);
test("exposing data and methods", () => {
  let e = new r({});
  e = PL(e);
  const o = e.extraNode().node;
  e = PL(e.reduce(e.changeChildAction("v2", "ppp"))), expect(e.children.v2.getView()).toBe("ppp");
  const p = e.extraNode().node;
  expect(LC(o, p)).toBe(true), e = PL(e.reduce(e.changeChildAction("v1", "v1_value"))), expect(PL(e)).toBe(e), expect(e.exposingValues.v1).toBe("v1_value"), expect(e.exposingValues.visible).toBe(false), expect(Object.keys(e.exposingInfo().methods)).toContain("setNum");
});
test("run exposing method", () => {
  let e = new r({
    dispatch: (o) => {
      e = PL(e.reduce(o));
    }
  });
  e = PL(e), e.reduce(_n({
    type: "execute",
    methodName: "setNum",
    params: [100]
  }, false)), expect(e.getView().num.value).toEqual(100);
});
test("exposing deps", () => {
  const e = H0(l, [new vo("v1"), HQe({
    name: "X",
    desc: "",
    depKeys: ["v1", "visible"],
    func: (s) => s.v1 + " " + s.visible
  })]);
  let o = new e({});
  o = PL(o);
  const p = o.exposingInfo().property;
  expect(o.exposingValues.X).toBe("abc false"), o = PL(o.reduce(o.changeChildAction("v2", "ppp")));
  const u = o.exposingInfo().property;
  function a(s) {
    return s.children.X;
  }
  expect(a(p)).toBe(a(u));
});
//# sourceMappingURL=0038be61-Y5TFNL2T.js.map
