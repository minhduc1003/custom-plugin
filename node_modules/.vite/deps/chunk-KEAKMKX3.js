import {
  B,
  u,
  w
} from "./chunk-WECP47J3.js";
import {
  E7,
  Fs,
  H0,
  H3,
  M2,
  N,
  O9,
  RQe,
  U4,
  VS,
  Vr,
  Wj1,
  ZK1,
  _,
  ao,
  b0,
  d,
  de,
  eq1,
  ka,
  nc,
  p1,
  q11,
  qC,
  r7,
  sa,
  t2,
  vo
} from "./chunk-C4ZQG65I.js";
import {
  require_react_dom
} from "./chunk-VGGCA2L5.js";
import {
  require_react
} from "./chunk-73THXJN7.js";
import {
  __toESM
} from "./chunk-2TUXWMP5.js";

// node_modules/lowcoder-sdk/dist/8a01f194.js
var import_react = __toESM(require_react(), 1);
var import_react_dom = __toESM(require_react_dom(), 1);
var ie = de.div`
  color: #f5222d;
  height: 100px;
  width: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
`;
var re = de.div`
  video,
  .ant-skeleton {
    height: 400px;
    max-height: 70vh;
    position: relative;
    object-fit: cover;
    background-color: #000;
  }
  .ant-skeleton {
    h3,
    li {
      background-color: transparent;
    }
  }
`;
var le = de(U4)`
  top: 10vh;
  .react-draggable {
    max-width: 100%;
    width: 500px;
  }
`;
var ce = import_react.default.lazy(() => import("./06c7e1f4-2DY7OK6Q.js").then((f) => f.i));
var de2 = function() {
  const f = {
    data: eq1("data"),
    text: t2(M2, _("scanner.text")),
    continuous: ao,
    uniqueData: t2(ao, true),
    maskClosable: t2(ao, true),
    onEvent: q11,
    disabled: H3,
    style: nc(Wj1, "style"),
    viewRef: ZK1
  };
  return new VS(f, (e) => {
    const [r, g] = (0, import_react.useState)(false), [k, C] = (0, import_react.useState)(""), [b, V] = (0, import_react.useState)({
      facingMode: "environment"
    }), [B2, R] = (0, import_react.useState)([]), [P, M] = (0, import_react.useState)(false), [E, p] = (0, import_react.useState)(false);
    (0, import_react.useEffect)(() => {
      !r && E && e.onEvent("success");
    }, [E, r]);
    const i = (0, import_react.useRef)([]), j = (n, l) => {
      if (l)
        if (e.continuous) {
          i.current = [...i.current, l.text];
          const w2 = e.uniqueData ? [...new Set(i.current)] : i.current;
          e.data.onChange(w2), e.onEvent("success");
        } else
          e.data.onChange([l.text]), g(false), p(true);
      else
        p(false);
    }, L = (n) => {
      typeof n == "string" ? C(n) : n.message === "getUserMedia is not implemented in this browser" ? C(_("scanner.errTip")) : C(n.message), p(false);
    }, N2 = () => {
      navigator.mediaDevices.enumerateDevices().then((n) => {
        const w2 = n.filter((c) => c.kind === "videoinput").map((c, O) => ({
          label: c.label || _("scanner.camera", {
            index: O + 1
          }),
          key: c.deviceId
        }));
        R(w2);
      });
    };
    return N(w, {
      disabled: e.disabled,
      children: [d(u, {
        ref: e.viewRef,
        $buttonStyle: e.style,
        disabled: e.disabled,
        onClick: () => {
          e.onEvent("click"), g(true), i.current = [];
        },
        children: d("span", {
          children: e.text
        })
      }), d(le, {
        showOkButton: false,
        showCancelButton: false,
        open: r,
        maskClosable: e.maskClosable,
        destroyOnClose: true,
        onCancel: () => {
          g(false), e.onEvent("close");
        },
        children: k ? d(ie, {
          children: k
        }) : r && N(re, {
          children: [d(import_react.Suspense, {
            fallback: d(Fs, {}),
            children: d(ce, {
              delay: 1e3,
              onUpdate: j,
              onError: L,
              videoConstraints: b
            }, JSON.stringify(b))
          }), d("div", {
            style: {
              height: "42px"
            },
            onClick: () => {
              M(false);
            },
            children: d(O9, {
              placement: "bottomRight",
              trigger: ["click"],
              open: P,
              onOpenChange: (n) => M(n),
              dropdownRender: () => d(r7, {
                items: B2,
                onClick: (n) => V({
                  ...b,
                  deviceId: n.key
                })
              }),
              children: d(sa, {
                style: {
                  float: "right",
                  marginTop: "10px"
                },
                onClick: (n) => {
                  n.stopPropagation(), N2();
                },
                children: _("scanner.changeCamera")
              })
            })
          })]
        })
      })]
    });
  }).setPropertyViewFn((e) => N(p1, {
    children: [d(ka, {
      name: b0.basic,
      children: e.text.propertyView({
        label: _("text")
      })
    }), ((0, import_react.useContext)(Vr).editorModeStatus === "logic" || (0, import_react.useContext)(Vr).editorModeStatus === "both") && N(p1, {
      children: [N(ka, {
        name: b0.interaction,
        children: [e.onEvent.getPropertyView(), qC(e), E7(e)]
      }), N(ka, {
        name: b0.advanced,
        children: [e.continuous.propertyView({
          label: _("scanner.continuous")
        }), e.continuous.getView() && e.uniqueData.propertyView({
          label: _("scanner.uniqueData")
        }), e.maskClosable.propertyView({
          label: _("scanner.maskClosable")
        })]
      })]
    }), ((0, import_react.useContext)(Vr).editorModeStatus === "layout" || (0, import_react.useContext)(Vr).editorModeStatus === "both") && d(p1, {
      children: d(ka, {
        name: b0.style,
        children: e.style.getPropertyView()
      })
    })]
  })).setExposeMethodConfigs(B).build();
}();
var ge = H0(de2, [new vo("data", _("data")), new vo("text", _("button.textDesc")), ...RQe]);

export {
  ge
};
//# sourceMappingURL=chunk-KEAKMKX3.js.map
