import {
  B,
  G,
  H,
  O,
  U,
  Y
} from "./chunk-HFCYJ36P.js";
import {
  h,
  k
} from "./chunk-UCKZF5HB.js";
import {
  GK1,
  H0,
  HIe,
  JW1,
  N,
  U11,
  VS,
  Vr,
  _,
  ao,
  b0,
  ca,
  d,
  de,
  fW1,
  hWe,
  ka,
  nc,
  p1,
  t2,
  uW1
} from "./chunk-C4ZQG65I.js";
import {
  require_react_dom
} from "./chunk-VGGCA2L5.js";
import {
  require_react
} from "./chunk-73THXJN7.js";
import {
  __toESM
} from "./chunk-2TUXWMP5.js";

// node_modules/lowcoder-sdk/dist/22ff0462.js
var import_react = __toESM(require_react(), 1);
var import_react_dom = __toESM(require_react_dom(), 1);
var X = de.div`
  height: 100%;
  padding: 4px;
  background: ${(e) => e.background};
  border: 1px solid ${(e) => e.border};
  border-radius: ${(e) => e.radius};
  .ant-tree-show-line .ant-tree-switcher {
    background: ${(e) => e.background};
  }
  .ant-tree:hover .ant-tree-list-scrollbar-show {
    display: block !important;
  }
  .ant-tree-list-scrollbar {
    width: 6px !important;
  }
  .ant-tree-list-scrollbar-thumb {
    border-radius: 9999px !important;
    background: rgba(139, 143, 163, 0.2) !important;
  }
  .ant-tree-list-scrollbar-thumb:hover {
    background: rgba(139, 143, 163, 0.5) !important;
  }
`;
var Y2 = [{
  label: _("tree.noSelect"),
  value: "none"
}, {
  label: _("tree.singleSelect"),
  value: "single"
}, {
  label: _("tree.multiSelect"),
  value: "multi"
}, {
  label: _("tree.checkbox"),
  value: "check"
}];
var Z = {
  ...B,
  selectType: ca(Y2, "single"),
  checkStrictly: ao,
  autoExpandParent: ao,
  label: t2(GK1, {
    position: "column"
  }),
  // TODO: more event
  onEvent: U11,
  style: nc(fW1, "style"),
  labelStyle: nc(uW1.filter((e) => ["accent", "validate"].includes(e.name) === false), "labelStyle"),
  inputFieldStyle: nc(JW1, "inputFieldStyle")
};
var J = (e) => {
  const {
    treeData: S,
    selectType: o,
    value: l,
    expanded: b,
    checkStrictly: h2,
    style: f,
    labelStyle: v
  } = e, [k2, x] = (0, import_react.useState)(), m = o === "single" || o === "multi", g = o === "check";
  return (0, import_react.useEffect)(() => {
    o === "none" && l.value.length > 0 ? l.onChange([]) : o === "single" && l.value.length > 1 && l.onChange(l.value.slice(0, 1));
  }, [o]), G(e), e.label({
    required: e.required,
    ...h(e),
    style: f,
    labelStyle: v,
    inputFieldStyle: e.inputFieldStyle,
    children: d(hWe, {
      onResize: (n, C) => x(C),
      render: () => d(X, {
        ...e.inputFieldStyle,
        children: d(HIe, {
          disabled: e.disabled,
          height: k2,
          rootStyle: {
            background: "transparent",
            color: e.inputFieldStyle.text
          },
          fieldNames: {
            title: "label",
            key: "value"
          },
          treeData: S,
          selectable: m,
          multiple: o === "multi",
          selectedKeys: m ? l.value : [],
          checkable: g,
          checkedKeys: g ? h2 ? {
            checked: l.value,
            halfChecked: []
          } : l.value : void 0,
          checkStrictly: h2,
          showLine: e.showLine ? {
            showLeafIcon: e.showLeafIcon
          } : false,
          expandedKeys: b.value,
          autoExpandParent: e.autoExpandParent,
          onSelect: (n) => {
            l.onChange(n), e.onEvent("change");
          },
          onCheck: (n) => {
            l.onChange(Array.isArray(n) ? n : n.checked), e.onEvent("change");
          },
          onExpand: (n) => {
            b.onChange(n);
          },
          onFocus: () => e.onEvent("focus"),
          onBlur: () => e.onEvent("blur")
        }, o)
      })
    })
  });
};
var p = function() {
  return new VS(Z, (e) => d(J, {
    ...e
  })).setPropertyViewFn((e) => N(p1, {
    children: [d(ka, {
      name: b0.basic,
      children: O(e)
    }), ["logic", "both"].includes((0, import_react.useContext)(Vr).editorModeStatus) && N(p1, {
      children: [d(k, {
        ...e
      }), Y(e), N(ka, {
        name: b0.interaction,
        children: [e.onEvent.getPropertyView(), e.hidden.propertyView({
          label: _("prop.hide")
        }), e.disabled.propertyView({
          label: _("prop.disabled")
        }), e.selectType.propertyView({
          label: _("tree.selectType")
        }), e.selectType.getView() !== "none" && U(e), e.selectType.getView() === "check" && e.checkStrictly.propertyView({
          label: _("tree.checkStrictly"),
          tooltip: _("tree.checkStrictlyTooltip")
        })]
      })]
    }), ["layout", "both"].includes((0, import_react.useContext)(Vr).editorModeStatus) && N(ka, {
      name: b0.layout,
      children: [e.expanded.propertyView({
        label: _("tree.expanded")
      }), e.defaultExpandAll.propertyView({
        label: _("tree.defaultExpandAll")
      }), e.showLine.propertyView({
        label: _("tree.showLine")
      }), e.showLine.getView() && e.showLeafIcon.propertyView({
        label: _("tree.showLeafIcon")
      })]
    }), ["layout", "both"].includes((0, import_react.useContext)(Vr).editorModeStatus) && e.label.getPropertyView(), ["layout", "both"].includes((0, import_react.useContext)(Vr).editorModeStatus) && N(p1, {
      children: [d(ka, {
        name: b0.style,
        children: e.style.getPropertyView()
      }), d(ka, {
        name: b0.labelStyle,
        children: e.labelStyle.getPropertyView()
      }), d(ka, {
        name: b0.inputFieldStyle,
        children: e.inputFieldStyle.getPropertyView()
      })]
    })]
  })).build();
}();
p = class extends p {
  autoHeight() {
    return false;
  }
};
var oe = H0(p, H);

export {
  oe
};
//# sourceMappingURL=chunk-J4RAP5UY.js.map
