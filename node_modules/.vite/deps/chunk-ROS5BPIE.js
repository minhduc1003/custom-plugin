import {
  x
} from "./chunk-Z2KNLIQY.js";
import {
  ne
} from "./chunk-N55PIOUB.js";
import {
  te
} from "./chunk-CM7HFHB5.js";
import {
  M2,
  N,
  _,
  d,
  de,
  kU1,
  p1
} from "./chunk-C4ZQG65I.js";
import {
  require_react_dom
} from "./chunk-VGGCA2L5.js";
import {
  require_react
} from "./chunk-73THXJN7.js";
import {
  __toESM
} from "./chunk-2TUXWMP5.js";

// node_modules/lowcoder-sdk/dist/51dea655.js
var import_react = __toESM(require_react(), 1);
var import_react_dom = __toESM(require_react_dom(), 1);
var C = de.div`
  display: inline-flex;
  align-items: center;
  width: 100%;
  height: 100%;
  position: absolute;
  top: 0;
  background: transparent !important;
  padding: 8px;

  > div {
    width: 100%;
    height: 100%;
  }

  .ant-select {
    height: 100%;
    .ant-select-selector {
      padding: 0 7px;
      height: 100%;
      overflow: hidden;
      .ant-select-selection-item {
        display: inline-flex;
        align-items: center;
        padding-right: 24px;
      }
    }
    .ant-select-arrow {
      height: calc(100% - 3px);
      width: fit-content;
      top: 1.5px;
      margin-top: 0;
      background-color: white;
      right: 1.5px;
      border-right: 1px solid #d7d9e0;
      cursor: pointer;
      pointer-events: auto;
      svg {
        min-width: 18px;
        min-height: 18px;
      }
      &:hover svg path {
        fill: #315efb;
      }
    }
    .ant-select-selector .ant-select-selection-search {
      left: 7px;
      input {
        height: 100%;
      }
    }
    &.ant-select-open {
      .ant-select-arrow {
        border-right: none;
        border-left: 1px solid #d7d9e0;
        svg g path {
          fill: #315efb;
        }
      }
      .ant-select-selection-item {
        opacity: 0.4;
      }
    }
  }
`;
var w = {
  text: M2,
  options: kU1
};
var s = [];
var c = (t) => t.text;
var b = {};
var v = (t) => {
  const [o, i] = (0, import_react.useState)(t.initialValue);
  return d(te, {
    autoFocus: true,
    allowClear: true,
    ...b,
    value: o,
    options: t.options,
    onChange: (e) => {
      t.onChange(e), i(e);
    },
    onEvent: async (e) => (e === "blur" && t.onChangeEnd(), []),
    style: {}
  });
};
var L = function() {
  return new ne(w, (t, o) => {
    s = t.options;
    const i = t.changeValue ?? c(t), e = t.options.find((p) => p.value === i);
    return N(p1, {
      children: [d("span", {
        children: e == null ? void 0 : e.prefixIcon
      }), d("span", {
        children: e == null ? void 0 : e.label
      })]
    });
  }, (t) => t.text.value, c).setEditViewFn((t) => d(C, {
    children: d(v, {
      initialValue: t.value,
      options: s,
      onChange: t.onChange,
      onChangeEnd: t.onChangeEnd
    })
  })).setPropertyViewFn((t) => N(p1, {
    children: [t.text.propertyView({
      label: _("table.columnValue"),
      tooltip: x
    }), t.options.propertyView({
      title: _("optionsControl.optionList")
    })]
  })).build();
}();

export {
  L
};
//# sourceMappingURL=chunk-ROS5BPIE.js.map
