import {
  Bn,
  X6,
  g5
} from "./chunk-C4ZQG65I.js";
import {
  require_react_dom
} from "./chunk-VGGCA2L5.js";
import {
  require_react
} from "./chunk-73THXJN7.js";
import {
  __toESM
} from "./chunk-2TUXWMP5.js";

// node_modules/lowcoder-sdk/dist/ee28a2f0.js
var import_react = __toESM(require_react(), 1);
var import_react_dom = __toESM(require_react_dom(), 1);
var o = {
  v1: Bn(0),
  v2: Bn("abc")
};
test("with type", () => {
  const c = X6(o, "v2"), t = new c({});
  t.getView();
  const e = t.getTypeSafeView();
  expect(e).toBe("abc");
});
test("withTypeAndChildrenAbstract", () => {
  const c = g5(o, "v2", {}), t = class extends c {
    getView() {
      return this.children.compType.getView();
    }
  }, e = new t({});
  e.getView();
  const p = e.getTypeSafeView();
  expect(p).toBe("abc");
});
test("withTypeAndChildrenAbstract with custom", () => {
  const c = g5(o, "v2", {}, "myType", "myComp"), t = class extends c {
    getView() {
      return this.children.myComp.getView();
    }
  }, e = new t({});
  e.getView();
  const p = e.getTypeSafeView();
  expect(p).toBe("abc");
});
test("withTypeAndChildrenAbstract preserve previous value", () => {
  const c = g5(o, "v2", {}, "myType", "myComp"), t = class extends c {
    getView() {
      return this.children.myComp.getView();
    }
  };
  let e = new t({
    dispatch: (p) => {
      e && (e = e.reduce(p));
    }
  });
  expect(e.getTypeSafeView()).toBe("abc"), e.dispatchChangeAndPreserveAction({
    myType: "v1",
    myComp: 1
  }), expect(e.getTypeSafeView()).toBe(1), e.dispatchChangeAndPreserveAction({
    myType: "v2"
  }), expect(e.getTypeSafeView()).toBe("abc"), e.dispatchChangeAndPreserveAction({
    myType: "v1"
  }), expect(e.getTypeSafeView()).toBe(1), e.dispatchChangeAndPreserveAction({
    myType: "v2",
    myComp: "cde"
  }), expect(e.getTypeSafeView()).toBe("cde"), expect(e.toJsonValue()).toMatchObject({
    myType: "v2",
    myComp: "cde"
  });
});
//# sourceMappingURL=ee28a2f0-VUHFQTLW.js.map
