import {
  Ct,
  E7,
  Fj1,
  H0,
  H3,
  IC,
  Jf,
  KX,
  LH,
  N,
  Qf,
  R6n,
  VS,
  Vr,
  XN,
  _,
  _U1,
  ao,
  b0,
  b2e,
  cU1,
  d,
  de,
  dee,
  eee,
  gM,
  h1,
  h2,
  j$,
  k3,
  ka,
  nV,
  nc,
  p1,
  qC,
  s2e,
  s4,
  sU1,
  t2,
  u3,
  v6e,
  vc
} from "./chunk-C4ZQG65I.js";
import {
  require_react_dom
} from "./chunk-VGGCA2L5.js";
import {
  require_react
} from "./chunk-73THXJN7.js";
import {
  __toESM
} from "./chunk-2TUXWMP5.js";

// node_modules/lowcoder-sdk/dist/e7645a61.js
var import_react = __toESM(require_react(), 1);
var import_react_dom = __toESM(require_react_dom(), 1);
var ce = de(KX)`
  ${(e) => e.$animationStyle}
  height: 100%;
  border-radius: ${(e) => {
  var t;
  return (t = e.$style) == null ? void 0 : t.radius;
}};
  border-width: ${(e) => {
  var t;
  return (t = e.$style) == null ? void 0 : t.borderWidth;
}};
  border-color: ${(e) => {
  var t;
  return (t = e.$style) == null ? void 0 : t.border;
}};
  border-style: ${(e) => {
  var t;
  return (t = e.$style) == null ? void 0 : t.borderStyle;
}};
  padding: ${(e) => e.$style.padding};
  background-color: ${(e) => e.$style.background};
  overflow-x: auto;
  rotate: ${(e) => e.$style.rotation}
`;
var ue = de(j$)`
  display: flex;
  flex-direction: column;
  flex-basis: ${(e) => e.$minWidth};
  max-width: ${(e) => e.$minWidth};

  > div {
    height: ${(e) => e.$matchColumnsHeight ? "100%" : "auto"};
    background-color: ${(e) => {
  var t;
  return (t = e.$style) == null ? void 0 : t.background;
}} !important;
    border-radius: ${(e) => {
  var t;
  return (t = e.$style) == null ? void 0 : t.radius;
}};
    border-width: ${(e) => {
  var t;
  return (t = e.$style) == null ? void 0 : t.borderWidth;
}}px;
    border-color: ${(e) => {
  var t;
  return (t = e.$style) == null ? void 0 : t.border;
}};
    border-style: ${(e) => {
  var t;
  return (t = e.$style) == null ? void 0 : t.borderStyle;
}};
    margin: ${(e) => {
  var t;
  return (t = e.$style) == null ? void 0 : t.margin;
}};
    padding: ${(e) => {
  var t;
  return (t = e.$style) == null ? void 0 : t.padding;
}};
  }
`;
var de2 = {
  disabled: H3,
  columns: _U1,
  containers: t2(dee(nV), {
    0: {
      view: {},
      layout: {}
    },
    1: {
      view: {},
      layout: {}
    }
  }),
  horizontalGridCells: v6e,
  autoHeight: gM,
  rowBreak: t2(ao, false),
  matchColumnsHeight: t2(ao, true),
  style: nc(cU1, "style"),
  columnStyle: nc(sU1, "columnStyle"),
  animationStyle: nc(Fj1, "animationStyle"),
  columnPerRowLG: t2(vc, 4),
  columnPerRowMD: t2(vc, 2),
  columnPerRowSM: t2(vc, 1),
  verticalSpacing: t2(vc, 8),
  horizontalSpacing: t2(vc, 8)
};
var pe = (e) => d(Jf, {
  ...e,
  emptyRows: 15,
  hintPlaceholder: LH,
  radius: e.style.radius,
  style: e.style
});
var me = (e) => {
  let {
    columns: t,
    containers: r,
    dispatch: i,
    rowBreak: n,
    matchColumnsHeight: d2,
    style: o,
    columnStyle: O,
    columnPerRowLG: $,
    columnPerRowMD: V,
    columnPerRowSM: y,
    verticalSpacing: T,
    horizontalSpacing: G,
    animationStyle: z,
    horizontalGridCells: B
  } = e;
  return d(Qf.Provider, {
    value: e.style.background,
    children: d(b2e.Provider, {
      value: e.disabled,
      children: d("div", {
        style: {
          padding: o.margin,
          height: "100%"
        },
        children: d(ce, {
          $style: o,
          $animationStyle: z,
          wrap: n,
          gutter: [G, T],
          children: t.map((f) => {
            const h = String(f.id), D = k3(k3(i, "containers"), h);
            if (!r[h])
              return null;
            const w = r[h].children, l = t.length;
            return d(ue, {
              lg: 24 / (l < $ ? l : $),
              md: 24 / (l < V ? l : V),
              sm: 24 / (l < y ? l : y),
              xs: 24 / (l < y ? l : y),
              $style: e.columnStyle,
              $minWidth: f.minWidth,
              $matchColumnsHeight: d2,
              children: d(pe, {
                layout: w.layout.getView(),
                items: IC(w.items.getView()),
                positionParams: w.positionParams.getView(),
                dispatch: D,
                autoHeight: e.autoHeight,
                horizontalGridCells: B,
                style: O
              })
            }, h);
          })
        })
      })
    })
  });
};
var ye = function() {
  return new VS(de2, (e, t) => d(me, {
    ...e,
    dispatch: t
  })).setPropertyViewFn((e) => N(p1, {
    children: [d(ka, {
      name: b0.basic,
      children: e.columns.propertyView({
        title: _("responsiveLayout.column"),
        newOptionLabel: "Column"
      })
    }), ((0, import_react.useContext)(Vr).editorModeStatus === "logic" || (0, import_react.useContext)(Vr).editorModeStatus === "both") && N(ka, {
      name: b0.interaction,
      children: [qC(e), E7(e)]
    }), ["layout", "both"].includes((0, import_react.useContext)(Vr).editorModeStatus) && N(p1, {
      children: [N(ka, {
        name: b0.layout,
        children: [e.autoHeight.getPropertyView(), e.horizontalGridCells.propertyView({
          label: _("prop.horizontalGridCells")
        })]
      }), N(ka, {
        name: _("responsiveLayout.rowLayout"),
        children: [e.rowBreak.propertyView({
          label: _("responsiveLayout.rowBreak")
        }), u3({}, d("div", {
          style: {
            marginTop: "8px"
          },
          children: _("responsiveLayout.columnsPerRow")
        })), e.columnPerRowLG.propertyView({
          label: _("responsiveLayout.desktop")
        }), e.columnPerRowMD.propertyView({
          label: _("responsiveLayout.tablet")
        }), e.columnPerRowSM.propertyView({
          label: _("responsiveLayout.mobile")
        })]
      }), N(ka, {
        name: _("responsiveLayout.columnsLayout"),
        children: [e.matchColumnsHeight.propertyView({
          label: _("responsiveLayout.matchColumnsHeight")
        }), u3({}, d("div", {
          style: {
            marginTop: "8px"
          },
          children: _("responsiveLayout.columnsSpacing")
        })), e.horizontalSpacing.propertyView({
          label: _("responsiveLayout.horizontal")
        }), e.verticalSpacing.propertyView({
          label: _("responsiveLayout.vertical")
        })]
      }), d(ka, {
        name: _("responsiveLayout.rowStyle"),
        children: e.style.getPropertyView()
      }), d(ka, {
        name: _("responsiveLayout.columnStyle"),
        children: e.columnStyle.getPropertyView()
      }), d(ka, {
        name: b0.animationStyle,
        hasTooltip: true,
        children: e.animationStyle.getPropertyView()
      })]
    })]
  })).build();
}();
var he = class extends ye {
  syncContainers() {
    const t = this.children.columns.getView(), r = new Set(t.map((o) => String(o.id)));
    let i = this.children.containers.getView();
    const n = [];
    Object.keys(i).forEach((o) => {
      r.has(o) || n.push(s4("containers", s4(o, eee())));
    }), r.forEach((o) => {
      i.hasOwnProperty(o) || n.push(s4("containers", XN(o, {
        layout: {},
        items: {}
      })));
    });
    let d2 = this;
    return n.forEach((o) => {
      d2 = d2.reduce(o);
    }), d2;
  }
  reduce(t) {
    const r = this.children.columns.getView();
    if (t.type === h2.CUSTOM) {
      const n = t.value;
      if (n.type === "push") {
        const o = n.value;
        h1.isEmpty(o.key) && (o.key = o.label), t = {
          ...t,
          value: {
            ...n,
            value: {
              ...o
            }
          }
        };
      }
      const {
        path: d2
      } = t;
      if (n.type === "delete" && d2[0] === "columns" && r.length <= 1)
        return Ct.warning(_("responsiveLayout.atLeastOneColumnError")), this;
    }
    let i = super.reduce(t);
    return t.type === h2.UPDATE_NODES_V2 && (i = i.syncContainers()), i;
  }
  realSimpleContainer(t) {
    return Object.values(this.children.containers.children).find((r) => r.realSimpleContainer(t));
  }
  getCompTree() {
    const t = this.children.containers.getView(), r = Object.values(t).map((i) => i.getCompTree());
    return R6n(r);
  }
  findContainer(t) {
    const r = this.children.containers.getView();
    for (const i of Object.values(r)) {
      const n = i.findContainer(t);
      if (n)
        return n === i ? this : n;
    }
  }
  getPasteValue(t) {
    const r = this.children.containers.getView(), i = h1.mapValues(r, (n) => n.getPasteValue(t));
    return {
      ...this.toJsonValue(),
      containers: i
    };
  }
  autoHeight() {
    return this.children.autoHeight.getView();
  }
};
var be = H0(he, [s2e]);

export {
  ye,
  be
};
//# sourceMappingURL=chunk-MOB4AT22.js.map
