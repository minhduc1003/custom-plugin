import {
  D,
  T
} from "./chunk-X2WK2QYD.js";
import {
  m
} from "./chunk-CVL2DCJG.js";
import {
  o
} from "./chunk-MZOHA253.js";
import {
  BXe,
  KRe,
  Vr,
  d,
  de,
  h4,
  lZn,
  nn,
  o2,
  zf
} from "./chunk-C4ZQG65I.js";
import {
  require_react_dom
} from "./chunk-VGGCA2L5.js";
import {
  require_react
} from "./chunk-73THXJN7.js";
import {
  __toESM
} from "./chunk-2TUXWMP5.js";

// node_modules/lowcoder-sdk/dist/d2612a35.js
var import_react = __toESM(require_react(), 1);
var import_react_dom = __toESM(require_react_dom(), 1);
var {
  RangePicker: C
} = KRe;
var w = de(C)`
  width: 100%;
  box-shadow: ${(e) => `${e.$style.boxShadow} ${e.$style.boxShadowColor}`};
  ${(e) => e.$style && T(e.$style)}
`;
var b = de(h4)`
  width: 400px; 
  margin: 10px 0px;
  .ant-select-selector {
    font-size: 14px;
    line-height: 1.5;
  }
`;
var I = de.div`
  text-align: center;
`;
var R = import_react.default.lazy(() => import("./1f89a7c1-4UCP7PFI.js").then((e) => ({
  default: e.DateRangeMobileUIView
})));
var A = (e) => {
  const n = (0, import_react.useContext)(Vr);
  let l;
  return Array.isArray(e.placeholder) ? l = e.placeholder : l = [e.placeholder || "Start Date", e.placeholder || "End Date"], m(d(R, {
    ...e
  }), d(w, {
    ...o2.omit(e, "onChange"),
    ref: e.viewRef,
    value: [e.start, e.end],
    disabledDate: (t) => D(t, e.minDate, e.maxDate),
    onCalendarChange: (t) => {
      e.onChange(t == null ? void 0 : t[0], t == null ? void 0 : t[1]);
    },
    inputReadOnly: zf(n == null ? void 0 : n.getAppSettings().maxWidth),
    suffixIcon: BXe(e.suffixIcon) && e.suffixIcon,
    placeholder: l,
    minDate: e.minDate ? nn(e.minDate, lZn) : void 0,
    maxDate: e.maxDate ? nn(e.maxDate, lZn) : void 0,
    hourStep: e.hourStep,
    minuteStep: e.minuteStep,
    secondStep: e.secondStep,
    renderExtraFooter: () => e.timeZone === "UserChoice" && d(I, {
      children: d(b, {
        options: o.filter((t) => t.value !== "UserChoice"),
        placeholder: "Select Time Zone",
        defaultValue: "Etc/UTC",
        onChange: e == null ? void 0 : e.onClickDateRangeTimeZone
      })
    })
  }));
};

export {
  A
};
//# sourceMappingURL=chunk-ORRWBCWV.js.map
