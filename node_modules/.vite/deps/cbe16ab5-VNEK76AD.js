import {
  Jo,
  M2,
  PL,
  d,
  g2,
  k3,
  p1,
  vc,
  x2e
} from "./chunk-C4ZQG65I.js";
import {
  require_react_dom
} from "./chunk-VGGCA2L5.js";
import {
  require_react
} from "./chunk-73THXJN7.js";
import {
  __toESM
} from "./chunk-2TUXWMP5.js";

// node_modules/lowcoder-sdk/dist/cbe16ab5.js
var import_react = __toESM(require_react(), 1);
var import_react_dom = __toESM(require_react_dom(), 1);
var C = new g2({
  v1: M2,
  v2: vc
}, (t) => t).setPropertyViewFn(() => d(p1, {})).build();
var v = {
  value: {
    v1: "v1: {{a + 1}}",
    v2: "{{a + 2}}"
  }
};
var u = x2e(C);
describe("withMultiContext", () => {
  it("common", () => {
    let t = new u({
      dispatch: (p) => {
        t = PL(t.reduce(p));
      },
      ...v
    });
    t = PL(t);
    const o = "k1", s = t.getView()({
      a: 11
    }, o).getView();
    expect(s.v1 === "v1: 12").toBeTruthy(), expect(s.v2 === 13).toBeTruthy();
    let e = t.getOriginalComp().changeDispatch(k3(k3(t.dispatch, Jo), o)).getComp();
    e.dispatch(e.changeChildAction("v2", "{{a + 3}}")), expect(t.children[Jo].getView()[o].getView().v2).toEqual(14);
    const c = "not-exist";
    e = t.getOriginalComp().changeDispatch(k3(k3(t.dispatch, Jo), c)).getComp(), e.dispatch(e.changeChildAction("v2", "{{a + 3}}")), expect(t.children[Jo].getView().hasOwnProperty(c)).toBeFalsy();
  });
});
//# sourceMappingURL=cbe16ab5-VNEK76AD.js.map
