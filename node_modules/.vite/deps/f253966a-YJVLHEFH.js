import {
  pt
} from "./chunk-FBSDHPXE.js";
import {
  dt
} from "./chunk-SCZNWIII.js";
import "./chunk-GAGBQ5H3.js";
import "./chunk-NHSDYLI7.js";
import "./chunk-PZ2QAXW6.js";
import "./chunk-6GCGVRH5.js";
import "./chunk-JHLVXI66.js";
import {
  ie,
  w
} from "./chunk-NFFAU32G.js";
import "./chunk-ASSQVYPX.js";
import "./chunk-N6GHBDCY.js";
import "./chunk-AXUQWSIE.js";
import "./chunk-JAILEAXE.js";
import "./chunk-WJDB5KYS.js";
import "./chunk-CVAATRKD.js";
import "./chunk-WXT6MRKI.js";
import "./chunk-L63JEYDN.js";
import "./chunk-ROS5BPIE.js";
import "./chunk-L237NUKP.js";
import "./chunk-LGOCZWWP.js";
import "./chunk-5TTKJPVI.js";
import "./chunk-2WCVLA62.js";
import "./chunk-2NK27OYZ.js";
import "./chunk-RKGH4KYG.js";
import "./chunk-VZ5HYFWM.js";
import "./chunk-GVR6SMOX.js";
import "./chunk-HH257QPH.js";
import "./chunk-J35SZZWO.js";
import "./chunk-OLUJ7YB4.js";
import "./chunk-IMATYS3Y.js";
import "./chunk-QLNMZPUP.js";
import "./chunk-Z2KNLIQY.js";
import "./chunk-N55PIOUB.js";
import "./chunk-BKGZLFRE.js";
import "./chunk-P5ARDIOU.js";
import "./chunk-HNNKGNYR.js";
import "./chunk-CM7HFHB5.js";
import "./chunk-GENSJFPI.js";
import "./chunk-UCKZF5HB.js";
import "./chunk-5HTQQ5EI.js";
import "./chunk-XSKHF64U.js";
import "./chunk-ARF62KDN.js";
import "./chunk-5NYYS2XH.js";
import "./chunk-WECP47J3.js";
import {
  PL,
  h1,
  mC
} from "./chunk-C4ZQG65I.js";
import {
  require_react_dom
} from "./chunk-VGGCA2L5.js";
import {
  require_react
} from "./chunk-73THXJN7.js";
import {
  __toESM
} from "./chunk-2TUXWMP5.js";

// node_modules/lowcoder-sdk/dist/f253966a.js
var import_react = __toESM(require_react(), 1);
var import_react_dom = __toESM(require_react_dom(), 1);
test("test column", () => {
  const e = {
    title: "name"
    // editable: true, // TODO: change to boolean
  };
  let o = new ie({
    value: e
  });
  o = PL(o);
  const t = o.getView();
  expect(t.title).toEqual(e.title);
});
test("test column render", () => {
  const e = {
    render: {
      compType: "text",
      comp: {
        text: "{{currentRow.id}}"
      }
    }
    // editable: true, // TODO: change to boolean
  };
  let o = new ie({
    value: e
  });
  o = PL(o);
  const t = o.getView();
  expect(t.render({
    currentCell: null,
    currentIndex: null,
    currentRow: {
      id: "hello"
    },
    currentOriginalIndex: null
  }, "0").getView().view({}).props.normalView).toEqual("hello");
});
test("test table", async () => {
  const e = {
    data: JSON.stringify([{
      a: 1
    }]),
    columns: [{
      dataIndex: "a",
      hide: true
    }, {
      title: "custom",
      dataIndex: "",
      isCustom: true
    }]
  }, o = {
    query1: mC({
      data: [{
        q: 1
      }]
    }),
    query2: mC({
      data: [{
        q2: 2
      }]
    })
  };
  let t = new dt({
    dispatch: (l) => {
      t = PL(t.reduce(l), o);
    },
    value: e
  });
  t = PL(t);
  let r = t.children.columns.getView();
  expect(r.length).toEqual(2), t = PL(t.reduce(t.changeChildAction("data", '[{"a":1, "c":2, "d":3}]'))), await new Promise((l) => setTimeout(l, 20)), r = t.children.columns.getView(), expect(r.length).toEqual(4), expect(r[0].getView().dataIndex).toEqual("a"), expect(r[0].getView().hide).toBe(true), expect(r[1].getView().title).toEqual("custom"), expect(r[2].getView().title).toEqual("c"), expect(r[3].getView().title).toEqual("d");
}, 1e3);
test("test mock table render", () => {
  let e = new pt({});
  e = PL(e);
});
test("test table data transform", () => {
  function e(i, m) {
    const p = m.exposingValues.displayData, {
      data: u
    } = m.getProps(), s = m.filterData;
    return expect(u.length).toEqual(3), expect(p.length).toEqual(i), expect(p.map((n) => h1.omit(n, "custom"))).toEqual(h1.map(s, (n) => h1.omit(n, w))), {
      transformedData: s,
      data: u,
      displayData: p
    };
  }
  const o = {
    data: JSON.stringify([{
      id: 1,
      name: "gg"
    }, {
      id: 5,
      name: "gg2"
    }, {
      id: 3,
      name: "jjj"
    }]),
    columns: [{
      dataIndex: "id",
      isCustom: false,
      sortable: true,
      render: {
        compType: "text",
        comp: {
          text: "{{currentCell}}"
        }
      }
    }, {
      dataIndex: "name",
      isCustom: false,
      render: {
        compType: "text",
        comp: {
          text: "{{currentCell}}"
        }
      }
    }, {
      title: "custom",
      dataIndex: "ealekfg",
      isCustom: true,
      render: {
        compType: "image",
        comp: {
          src: "{{currentRow.id}}"
        }
      }
    }]
  };
  let t = new dt({
    dispatch: (i) => {
      t = PL(t.reduce(i));
    },
    value: o
  });
  t = PL(t), t = PL(t.reduce(t.changeChildAction("sort", [{
    column: "id",
    desc: true
  }])));
  let {
    transformedData: r,
    data: l,
    displayData: f
  } = e(3, t);
  expect(r.map((i) => i.id)).toEqual([5, 3, 1]), t = PL(t.reduce(t.changeChildAction("toolbar", {
    searchText: "gg"
  }))), e(2, t), t = PL(t.reduce(t.changeChildAction("toolbar", {
    showFilter: true,
    filter: {
      stackType: "and",
      filters: [{
        columnKey: "id",
        filterValue: "4",
        operator: "gt"
      }, {
        columnKey: "id",
        filterValue: "5",
        operator: "lte"
      }]
    }
  }))), e(1, t);
});
//# sourceMappingURL=f253966a-YJVLHEFH.js.map
