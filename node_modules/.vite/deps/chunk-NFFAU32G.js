import {
  be
} from "./chunk-ASSQVYPX.js";
import {
  D,
  ne
} from "./chunk-N6GHBDCY.js";
import {
  w
} from "./chunk-AXUQWSIE.js";
import {
  Be,
  Te
} from "./chunk-JAILEAXE.js";
import {
  V
} from "./chunk-WJDB5KYS.js";
import {
  x
} from "./chunk-Z2KNLIQY.js";
import {
  j
} from "./chunk-N55PIOUB.js";
import {
  n,
  r
} from "./chunk-BKGZLFRE.js";
import {
  $9,
  $C,
  $s,
  ABe,
  Bn,
  C3,
  Ct,
  Dw,
  E3,
  EQe,
  FL,
  Iee,
  Ise,
  JFe,
  K6n,
  M2,
  Mg,
  Mo,
  N,
  Oee,
  P4,
  QFe,
  Qf,
  R9,
  S0,
  T2,
  TI,
  Th2,
  U8,
  Ub,
  Vr,
  Vse,
  W4,
  YFe,
  Yh,
  _,
  _n,
  ao,
  ca,
  d,
  d3,
  da,
  de,
  dg,
  em,
  g2,
  gC,
  h1,
  h2,
  hc,
  hl,
  ho,
  il,
  mJe,
  oC,
  oV,
  p1,
  s4,
  sFe,
  t2,
  u3,
  up2,
  v0,
  vc,
  z3,
  zc,
  zx
} from "./chunk-C4ZQG65I.js";
import {
  require_react
} from "./chunk-73THXJN7.js";
import {
  __toESM
} from "./chunk-2TUXWMP5.js";

// node_modules/lowcoder-sdk/dist/f915fcd2.js
var import_react = __toESM(require_react(), 1);
var S = "children";
var w2 = "__ob_origin_index";
var wo = "__ob_origin_record";
var K = 55;
var rt = 500;
function yo(e, t, o, n2) {
  let i = e;
  return t && (i = i.filter((l) => {
    let a = t == null ? void 0 : t.toLowerCase();
    return a ? Object.values(l).find((s) => s == null ? void 0 : s.toString().toLowerCase().includes(a)) : true;
  })), n2 && o.filters.length > 0 && (i = i.filter((l) => {
    for (let a of o.filters) {
      const s = l[a.columnKey], d2 = Te[a.operator].filter(a.filterValue, s);
      if (o.stackType === "or" && d2)
        return true;
      if (o.stackType === "and" && !d2)
        return false;
    }
    return o.filters.length === 0 || o.stackType === "and" ? true : o.stackType !== "or";
  })), i;
}
function xo(e, t, o) {
  let n2 = e.map((i, l) => ({
    ...i,
    [w2]: l + ""
  }));
  if (o.length > 0) {
    const [i, l] = h1(o).filter((a) => {
      var s;
      return !!a.column && ((s = t[a.column]) == null ? void 0 : s.sortable);
    }).map((a) => [a.column, a.desc ? "desc" : "asc"]).unzip().value();
    n2 = h1.orderBy(n2, i.map((a) => (s) => {
      const d2 = s[a];
      return typeof d2 == "string" ? d2.toLowerCase() : d2;
    }), l);
  }
  return n2;
}
function nt({
  hide: e,
  tempHide: t,
  enableColumnSetting: o
}) {
  return o && t || e;
}
function it(e, t) {
  return e + "-" + t;
}
function lt(e, t) {
  const o = t + "";
  return Array.isArray(e[S]) ? {
    ...e,
    [w2]: o,
    children: e[S].map((n2, i) => lt(n2, it(o, i + "")))
  } : {
    ...e,
    [w2]: o
  };
}
function at(e, t, o) {
  return e.map((n2, i) => {
    const l = {
      [w2]: n2[w2]
    };
    return o.forEach((a) => {
      const s = a.render.wrap({
        currentCell: n2[a.dataIndex],
        currentRow: h1.omit(n2, w2),
        currentIndex: i % t,
        currentOriginalIndex: n2[w2]
      });
      Array.isArray(n2[S]) && (l[S] = at(n2[S], t, o));
      const d2 = s.comp[j](s.comp);
      d2 !== null && (l[a.dataIndex] = d2);
    }), l;
  });
}
function st(e, t) {
  return e.map((o) => {
    const n2 = h1(o).omit(w2).mapKeys((i, l) => t[l] || l).value();
    return Array.isArray(o[S]) ? {
      ...n2,
      [S]: st(o[S], t)
    } : n2;
  });
}
function $o(e, t) {
  return h1.mapValues(t, (o, n2) => {
    const i = o.wrap().compType, l = {
      compType: i
    };
    return i === "tag" ? l.uniqueTags = h1(e).map((a) => a[n2]).filter((a) => !!a).uniq().value() : i === "badgeStatus" && (l.uniqueStatus = h1(e).map((a) => {
      const s = a[n2];
      return s.split(" ")[1] ? {
        status: s.slice(0, s.indexOf(" ")),
        text: s.slice(s.indexOf(" ") + 1)
      } : {
        status: s,
        text: ""
      };
    }).uniqBy("text").value()), l;
  });
}
function Co(e) {
  const {
    title: t,
    tooltip: o,
    editable: n2
  } = e;
  return N("div", {
    children: [d(Mo, {
      title: o,
      children: d("span", {
        style: {
          borderBottom: o ? "1px dotted" : ""
        },
        children: t
      })
    }), n2 && d(up2, {
      style: {
        verticalAlign: "baseline",
        marginLeft: "4px"
      }
    })]
  });
}
function So(e, t) {
  let o = [];
  return Object.keys(e).forEach((n2) => {
    t.includes(n2) || o.push({
      label: n2,
      value: `{{currentRow.${n2}}}`
    });
  }), o.push({
    label: "Select with handlebars",
    value: "{{currentCell}}"
  }), o;
}
function dt(e, t, o, n2, i, l, a, s, d2) {
  const p = e.filter((r2) => r2.isCustom).map((r2) => r2.dataIndex), m = So(a, p), x2 = new Map(t.map((r2) => [r2.column, r2.desc ? "descend" : "ascend"]));
  return h1.sortBy(e, (r2) => {
    if (r2.fixed === "left")
      return -1;
    if (r2.fixed === "right")
      return Number.MAX_SAFE_INTEGER;
    if (l.length > 0) {
      const g = l.indexOf(r2.isCustom ? r2.title : r2.dataIndex);
      if (g >= 0)
        return g;
    }
    return 0;
  }).flatMap((r2, g) => {
    if (nt({
      hide: r2.hide,
      tempHide: r2.tempHide,
      enableColumnSetting: o
    }))
      return [];
    if (i && l.length > 0 && !l.includes(r2.isCustom ? r2.title : r2.dataIndex))
      return [];
    const I = (a[r2.dataIndex] ?? {}).uniqueTags ?? [], D2 = (a[r2.dataIndex] ?? {}).uniqueStatus ?? [], A = Co({
      title: r2.title,
      tooltip: r2.titleTooltip,
      editable: r2.editable
    });
    return {
      key: `${r2.dataIndex}-${g}`,
      title: r2.showTitle ? A : "",
      titleText: r2.title,
      dataIndex: r2.dataIndex,
      align: r2.align,
      width: r2.autoWidth === "auto" ? 0 : r2.width,
      fixed: r2.fixed === "close" ? false : r2.fixed,
      style: {
        background: r2.background,
        margin: r2.margin,
        text: r2.text,
        border: r2.border,
        radius: r2.radius,
        textSize: r2.textSize,
        textWeight: r2.textWeight,
        fontStyle: r2.fontStyle,
        fontFamily: r2.fontFamily,
        borderWidth: r2.borderWidth
      },
      linkStyle: {
        text: r2.linkColor,
        hoverText: r2.linkHoverColor,
        activeText: r2.linkActiveColor
      },
      cellColorFn: r2.cellColor,
      onWidthResize: r2.onWidthResize,
      render: (P, V2, R) => {
        const W = h1.omit(V2, w2);
        return r2.render({
          currentCell: P,
          currentRow: W,
          currentIndex: R,
          currentOriginalIndex: K6n(V2[w2]),
          initialColumns: m
        }, String(V2[w2])).getView().view({
          editable: V2[w2].startsWith(z) || r2.editable,
          size: n2,
          candidateTags: I,
          candidateStatus: D2,
          textOverflow: r2.textOverflow,
          cellTooltip: r2.cellTooltip({
            currentCell: P,
            currentRow: W,
            currentIndex: R
          }),
          editMode: s,
          onTableEvent: d2
        });
      },
      ...r2.sortable ? {
        sorter: true,
        sortOrder: x2.get(r2.dataIndex),
        showSorterTooltip: false
      } : {}
    };
  });
}
function Ne(e) {
  var t;
  return (t = e.column) != null && t.dataIndex ? {
    column: e.column.dataIndex.toString(),
    desc: e.order === "descend"
  } : null;
}
function ct(e, t, o, n2, i, l) {
  if (n2.action === "sort") {
    let a = [];
    if (Array.isArray(o))
      o.forEach((s) => {
        const d2 = Ne(s);
        d2 && a.push(d2);
      });
    else {
      const s = Ne(o);
      s && a.push(s);
    }
    i(U8("sort", a, true)), l("sortChange");
  }
}
function ut(e, t) {
  const o = (l) => {
    const a = new Blob([l]).size;
    return l.length === a ? l.length * 10 : l.length * 20;
  }, n2 = h1.max(t.map((l) => {
    const a = l[e];
    return a ? o(a.toString()) : K;
  })) || 0, i = o(e);
  return Math.max(Math.min(rt, Math.max(i, n2) + 10), K);
}
function vo(e, t) {
  const o = e.findIndex((i) => i[w2] === t);
  if (o < 0)
    return;
  const n2 = e[o];
  return {
    currentRow: h1.omit(n2, w2),
    currentIndex: o,
    currentOriginalIndex: K6n(n2[w2])
  };
}
function fe(e) {
  const t = wt(e);
  return t && Array.isArray(t[S]);
}
var sr = Object.freeze(Object.defineProperty({
  __proto__: null,
  COLUMN_CHILDREN_KEY: S,
  COL_MAX_WIDTH: rt,
  COL_MIN_WIDTH: K,
  OB_ROW_ORI_INDEX: w2,
  OB_ROW_RECORD: wo,
  buildOriginIndex: it,
  calcColumnWidth: ut,
  columnHide: nt,
  columnsToAntdFormat: dt,
  filterData: yo,
  genSelectionParams: vo,
  getColumnsAggr: $o,
  getOriDisplayData: at,
  onTableChange: ct,
  sortData: xo,
  supportChildrenTree: fe,
  tranToTableRecord: lt,
  transformDispalyData: st
}, Symbol.toStringTag, { value: "Module" }));
var Vo = (e) => e.length === 1 ? `(${e[0]} + ${e[0]})` : e.length === 2 ? `(${e[0]} + ${e[0]})` : e.length === 3 || e.length === 4 ? `(${e[0]} + ${e[2]})` : "0px";
var To = de(oC.Summary.Row)`
  td:last-child {
    border-right: unset !important;
  }

  ${(e) => !e.$istoolbarPositionBelow && `
    &:last-child td {
      border-bottom: none !important;
    }
  `}
  
`;
var Ro = de(oC.Summary.Cell)`
  background: ${(e) => e.$style.background} !important;
  border-color: ${(e) => e.$style.border} !important;
  // border-width: ${(e) => e.$style.borderWidth} !important;
  // border-style: ${(e) => e.$style.borderStyle} !important;
  border-radius: ${(e) => e.$style.radius};
  padding: 0 !important;

  > div {
    margin: ${(e) => e.$style.margin};
    color: ${(e) => e.$style.text};
    font-weight: ${(e) => e.$style.textWeight};
    font-family: ${(e) => e.$style.fontFamily};
    overflow: hidden; 
    ${(e) => e.$tableSize === "small" && `
      padding: 1px 8px;
      font-size: ${e.$defaultThemeDetail.textSize == e.$style.textSize ? "14px !important" : e.$style.textSize + " !important"};
      font-style:${e.$style.fontStyle} !important;
      min-height: 14px;
      line-height: 20px;
      ${!e.$autoHeight && `
        overflow-y: auto;
        max-height: 28px;
      `};
    `};
    ${(e) => e.$tableSize === "middle" && `
      padding: 8px 8px;
      font-size: ${e.$defaultThemeDetail.textSize == e.$style.textSize ? "16px !important" : e.$style.textSize + " !important"};
      font-style:${e.$style.fontStyle} !important;
      min-height: 24px;
      line-height: 24px;
      ${!e.$autoHeight && `
        overflow-y: auto;
        max-height: 48px;
      `};
    `};
    ${(e) => e.$tableSize === "large" && `
      padding: 16px 16px;
      font-size: ${e.$defaultThemeDetail.textSize == e.$style.textSize ? "18px !important" : e.$style.textSize + " !important"};
      font-style:${e.$style.fontStyle} !important;
      min-height: 48px;
      ${!e.$autoHeight && `
        overflow-y: auto;
        max-height: 96px;
      `};
    `};
    
    > .ant-badge > .ant-badge-status-text,
    > div > .markdown-body {
      color: ${(e) => e.$style.text};
    }

    > div > svg g {
      stroke: ${(e) => e.$style.text};
    }

    > a,
    > div  a {
      color: ${(e) => {
  var t;
  return (t = e.$linkStyle) == null ? void 0 : t.text;
}};

      &:hover {
        color: ${(e) => {
  var t;
  return (t = e.$linkStyle) == null ? void 0 : t.hoverText;
}};
      }

      &:active {
        color: ${(e) => {
  var t;
  return (t = e.$linkStyle) == null ? void 0 : t.activeText;
}}};
      }
    }
  }
`;
var ko = ({
  children: e,
  tooltipTitle: t
}) => t ? d(Mo, {
  title: t,
  placement: "topLeft",
  children: e
}) : d(p1, {
  children: e
});
function zo(e) {
  const {
    children: t,
    rowStyle: o,
    columnStyle: n2,
    tableSize: i,
    autoHeight: l,
    cellColor: a,
    cellTooltip: s,
    ...d2
  } = e, p = {
    background: a || n2.background || o.background,
    margin: n2.margin || o.margin,
    text: n2.text || o.text,
    border: n2.border || o.border,
    borderWidth: o.borderWidth,
    borderStyle: o.borderStyle,
    radius: n2.radius || o.radius,
    textSize: n2.textSize || o.textSize,
    textWeight: o.textWeight || n2.textWeight,
    fontFamily: o.fontFamily || n2.fontFamily,
    fontStyle: o.fontStyle || n2.fontStyle
  };
  return d(Ro, {
    ...d2,
    $style: p,
    $defaultThemeDetail: P4,
    $tableSize: i,
    $autoHeight: l,
    children: d(ko, {
      tooltipTitle: s,
      children: d("div", {
        children: t
      })
    })
  });
}
function ht(e) {
  const {
    columns: t,
    summaryRows: o,
    summaryRowStyle: n2,
    tableSize: i,
    expandableRows: l,
    istoolbarPositionBelow: a
  } = e;
  let s = t.filter((d2) => !d2.getView().hide);
  return l && s.unshift(new ie({})), s.length ? d(oC.Summary, {
    children: Array.from(Array(o)).map((d2, p) => d(To, {
      $istoolbarPositionBelow: a,
      children: s.map((m, x2) => {
        const u = m.children.summaryColumns.getView()[p].getView();
        return d(zo, {
          index: x2,
          tableSize: i,
          rowStyle: n2,
          align: u.align,
          cellColor: u.cellColor,
          cellTooltip: u.cellTooltip,
          columnStyle: {
            background: u.background,
            margin: u.margin,
            text: u.text,
            border: u.border,
            radius: u.radius,
            textSize: u.textSize,
            textWeight: u.textWeight,
            fontStyle: u.fontStyle,
            fontFamily: u.fontFamily
          },
          linkStyle: {
            text: u.linkColor,
            hoverText: u.linkHoverColor,
            activeText: u.linkActiveColor
          },
          children: u.render({}, "").getView().view({})
        }, `summary-${p}-${m.getView().dataIndex}-${x2}`);
      })
    }, p))
  }) : d(p1, {});
}
var dr = Object.freeze(Object.defineProperty({
  __proto__: null,
  TableSummary: ht
}, Symbol.toStringTag, { value: "Module" }));
var z = "empty_row";
function O(e) {
  return `linear-gradient(${e}, ${e})`;
}
var Io = (e, t, o, n2) => {
  const i = O(e.background), l = O(t.selectedRowBackground), a = O(t.hoverRowBackground), s = O(t.alternateBackground);
  return T2`
    .ant-table-body {
      background: ${O(e.background)};
    }
    .ant-table-tbody {
      > tr:nth-of-type(2n + 1) {
        &,
        > td {
          background: ${O(t.background)};
          // border-bottom:${t.borderWidth} ${t.borderStyle} ${t.border} !important;
          // border-right:${t.borderWidth} ${t.borderStyle} ${t.border} !important;
        }
      }

      > tr:nth-of-type(2n) {
        &,
        > td {
          background: ${s};
          // border-bottom:${t.borderWidth} ${t.borderStyle} ${t.border} !important;
          // border-right:${t.borderWidth} ${t.borderStyle} ${t.border} !important;
        }
      }

      // selected row
      > tr:nth-of-type(2n + 1).ant-table-row-selected {
        > td {
          background: ${l}, ${t.background} !important;
        }

        > td.ant-table-cell-row-hover,
        &:hover > td {
          background: ${a}, ${l}, ${t.background} !important;
        }
      }

      > tr:nth-of-type(2n).ant-table-row-selected {
        > td {
          background: ${l}, ${s} !important;
        }

        > td.ant-table-cell-row-hover,
        &:hover > td {
          background: ${a}, ${l}, ${s} !important;
        }
      }

      // hover row
      > tr:nth-of-type(2n + 1) > td.ant-table-cell-row-hover {
        &,
        > div:nth-of-type(2) {
          background: ${a}, ${t.background} !important;
        }
      }

      > tr:nth-of-type(2n) > td.ant-table-cell-row-hover {
        &,
        > div:nth-of-type(2) {
          background: ${a}, ${s} !important;
        }
      }

      > tr.ant-table-expanded-row > td {
        background: ${i};
      }
    }
  `;
};
var _o = de.span`
  position: absolute;
  top: 0;
  right: -5px;
  width: 10px;
  height: 100%;
  cursor: col-resize;
  z-index: 1;
`;
var Eo = de.div`
  display: flex;
  flex-direction: column;
  background: ${(e) => e.$style.background} !important;
  border-radius: ${(e) => e.$style.radius} !important;
  padding: ${(e) => e.$style.padding} !important;
  margin: ${(e) => e.$style.margin} !important;
  border-style: ${(e) => e.$style.borderStyle} !important;
  border-width: ${(e) => `${e.$style.borderWidth} !important`};
  border-color: ${(e) => `${e.$style.border} !important`};
  height: calc(100% - ${(e) => Vo(e.$style.margin.split(" "))});
  overflow: hidden;

  > div.table-scrollbar-wrapper {
    overflow: auto;
    ${(e) => e.$fixedToolbar && "height: auto"};

    ${(e) => (e.$showHorizontalScrollbar || e.$showVerticalScrollbar) && `
      .simplebar-content-wrapper {
        overflow: auto !important;
      }  
    `}

    ${(e) => !e.$showHorizontalScrollbar && `
      div.simplebar-horizontal {
        visibility: hidden !important;
      }  
    `}
    ${(e) => !e.$showVerticalScrollbar && `
      div.simplebar-vertical {
        visibility: hidden !important;
      }  
    `}
  }
`;
var Ao = de.div`
  .ant-table-wrapper {
    border-top: unset;
    border-color: inherit;
  }

  .ant-table-row-expand-icon {
    color: ${em};
  }

  .ant-table .ant-table-cell-with-append .ant-table-row-expand-icon {
    margin: 0;
    top: 18px;
    left: 4px;
  }

  .ant-table.ant-table-small .ant-table-cell-with-append .ant-table-row-expand-icon {
    top: 10px;
  }

  .ant-table.ant-table-middle .ant-table-cell-with-append .ant-table-row-expand-icon {
    top: 14px;
    margin-right:5px;
  }

  .ant-table {
    background: ${(e) => e.$style.background};
    .ant-table-container {
      border-left: unset;
      border-top: none !important;
      border-inline-start: none !important;

      &::after {
        box-shadow: none !important;
      }

      .ant-table-content {
        overflow: unset !important
      }

      // A table expand row contains table
      .ant-table-tbody .ant-table-wrapper:only-child .ant-table {
        margin: 0;
      }

      table {
        border-top: unset;

        > .ant-table-thead {
          ${(e) => e.$fixedHeader && `
              position: sticky;
              position: -webkit-sticky;
              // top: ${e.$fixedToolbar ? "47px" : "0"};
              top: 0;
              z-index: 99;
            `}
          > tr > th {
            background-color: ${(e) => e.$headerStyle.headerBackground};
           
            border-color: ${(e) => e.$headerStyle.border};
            border-width: ${(e) => e.$headerStyle.borderWidth};
            color: ${(e) => e.$headerStyle.headerText};
            // border-inline-end: ${(e) => `${e.$headerStyle.borderWidth} solid ${e.$headerStyle.border}`} !important;
            

            > div {
              margin: ${(e) => e.$headerStyle.margin};

              &, .ant-table-column-title > div {
                font-size: ${(e) => e.$headerStyle.textSize};
                font-weight: ${(e) => e.$headerStyle.textWeight};
                font-family: ${(e) => e.$headerStyle.fontFamily};
                font-style: ${(e) => e.$headerStyle.fontStyle};
                color:${(e) => e.$headerStyle.text}
              }
            }

            &:last-child {
              border-inline-end: none !important;
            }
            &.ant-table-column-has-sorters:hover {
              background-color: ${(e) => $s(e.$headerStyle.headerBackground, 0.05)};
            }
  
            > .ant-table-column-sorters > .ant-table-column-sorter {
              color: ${(e) => e.$headerStyle.headerText === P4.textDark ? "#bfbfbf" : e.$headerStyle.headerText};
            }

            &::before {
              background-color: ${(e) => e.$headerStyle.border};
              width: ${(e) => e.$visibleResizables ? "1px" : "0px"} !important;
            }
          }
        }

        > thead > tr > th,
        > tbody > tr > td {
          border-color: ${(e) => e.$headerStyle.border};
          ${(e) => !e.$showHRowGridBorder && "border-bottom: 0px;"}
        }

        td {
          padding: 0px 0px;
          // ${(e) => e.$showHRowGridBorder ? "border-bottom: 1px solid #D7D9E0 !important;" : "border-bottom: 0px;"}
        }

        thead > tr:first-child {
          th:last-child {
            border-right: unset;
          }
        }

        tbody > tr > td:last-child {
          border-right: unset !important;
        }

        .ant-empty-img-simple-g {
          fill: #fff;
        }

        > thead > tr:first-child {
          th:first-child {
            border-top-left-radius: 0px;
          }

          th:last-child {
            border-top-right-radius: 0px;
          }
        }
      }

      .ant-table-expanded-row-fixed:after {
        border-right: unset !important;
      }
    }
  }
  
  ${(e) => e.$style && Io(e.$style, e.$rowStyle, e.$headerStyle, e.$toolbarStyle)}
`;
var Le = de.th`
  overflow: hidden;

  > div {
    overflow: hidden;
    white-space: pre;
    text-overflow: ellipsis;
  }

  ${(e) => e.width && `width: ${e.width}px`};
`;
var Wo = de.td`
  .ant-table-row-expand-icon,
  .ant-table-row-indent {
    display: ${(e) => e.$isEditing ? "none" : "initial"};
  }
  &.ant-table-row-expand-icon-cell {
    background: ${(e) => e.$background};
    border-color: ${(e) => e.$style.border};
  }
  background: ${(e) => e.$background} !important;
  border-color: ${(e) => e.$style.border} !important;
  border-radius: ${(e) => e.$style.radius};
  padding: 0 !important;

  > div:not(.editing-border, .editing-wrapper),
  .editing-wrapper .ant-input,
  .editing-wrapper .ant-input-number,
  .editing-wrapper .ant-picker {
    margin: ${(e) => e.$isEditing ? "0px" : e.$style.margin};
    color: ${(e) => e.$style.text};
    font-weight: ${(e) => e.$style.textWeight};
    font-family: ${(e) => e.$style.fontFamily};
    overflow: hidden; 
    ${(e) => e.$tableSize === "small" && `
      padding: 1px 8px;
      font-size: ${e.$defaultThemeDetail.textSize == e.$style.textSize ? "14px !important" : e.$style.textSize + " !important"};
      font-style:${e.$style.fontStyle} !important;
      min-height: ${e.$style.rowHeight || "14px"};
      line-height: 20px;
      ${!e.$autoHeight && `
        overflow-y: auto;
        max-height: ${e.$style.rowHeight || "28px"};
      `};
    `};
    ${(e) => e.$tableSize === "middle" && `
      padding: 8px 8px;
      font-size: ${e.$defaultThemeDetail.textSize == e.$style.textSize ? "16px !important" : e.$style.textSize + " !important"};
      font-style:${e.$style.fontStyle} !important;
      min-height: ${e.$style.rowHeight || "24px"};
      line-height: 24px;
      ${!e.$autoHeight && `
        overflow-y: auto;
        max-height: ${e.$style.rowHeight || "48px"};
      `};
    `};
    ${(e) => e.$tableSize === "large" && `
      padding: 16px 16px;
      font-size: ${e.$defaultThemeDetail.textSize == e.$style.textSize ? "18px !important" : e.$style.textSize + " !important"};
      font-style:${e.$style.fontStyle} !important;
      min-height: ${e.$style.rowHeight || "48px"};
      ${!e.$autoHeight && `
        overflow-y: auto;
        max-height: ${e.$style.rowHeight || "96px"};
      `};
    `};
    
    > .ant-badge > .ant-badge-status-text,
    > div > .markdown-body {
      color: ${(e) => e.$style.text};
    }

    > div > svg g {
      stroke: ${(e) => e.$style.text};
    }

    // dark link|links color
    > a,
    > div  a {
      color: ${(e) => {
  var t;
  return (t = e.$linkStyle) == null ? void 0 : t.text;
}};

      &:hover {
        color: ${(e) => {
  var t;
  return (t = e.$linkStyle) == null ? void 0 : t.hoverText;
}};
      }

      &:active {
        color: ${(e) => {
  var t;
  return (t = e.$linkStyle) == null ? void 0 : t.activeText;
}}};
      }
    }
  }
`;
var Ho = (e) => {
  const {
    onResize: t,
    onResizeStop: o,
    width: n2,
    viewModeResizable: i,
    ...l
  } = e, [a, s] = (0, import_react.useState)(0), d2 = (0, import_react.useRef)(null), p = $C(), m = () => {
    n2 && n2 > 0 || s(d2.current.getBoundingClientRect().width);
  };
  (0, import_react.useEffect)(() => {
    d2.current && m();
  }, []);
  const x2 = h1.isNil(l.title);
  return p && !i || x2 ? d(Le, {
    ref: d2,
    ...l,
    width: n2
  }) : d(Iee, {
    width: n2 > 0 ? n2 : a,
    height: 0,
    onResize: (u, {
      size: r2
    }) => t(r2.width),
    onResizeStart: (u) => {
      m(), u.stopPropagation(), u.preventDefault();
    },
    onResizeStop: o,
    draggableOpts: {
      enableUserSelectHack: false
    },
    handle: (u, r2) => d(_o, {
      ref: r2,
      onClick: (g) => {
        g.preventDefault(), g.stopPropagation();
      }
    }),
    children: d(Le, {
      ref: d2,
      ...l,
      title: ""
    })
  });
};
function Oo(e) {
  const {
    record: t,
    title: o,
    rowIndex: n2,
    rowColorFn: i,
    rowHeightFn: l,
    cellColorFn: a,
    children: s,
    columnsStyle: d2,
    columnStyle: p,
    linkStyle: m,
    tableSize: x2,
    autoHeight: u,
    ...r2
  } = e, [g, I] = (0, import_react.useState)(false), D2 = (0, import_react.useContext)(n);
  let A;
  if (!t)
    A = d("td", {
      ...r2,
      children: s
    });
  else {
    const P = i({
      currentRow: t,
      currentIndex: n2,
      currentOriginalIndex: t[w2],
      columnTitle: o
    }), V2 = l({
      currentRow: t,
      currentIndex: n2,
      currentOriginalIndex: t[w2],
      columnTitle: o
    }), W = {
      background: a({
        currentCell: t[o],
        currentRow: t
      }) || P || p.background || d2.background,
      margin: p.margin || d2.margin,
      text: p.text || d2.text,
      border: p.border || d2.border,
      radius: p.radius || d2.radius,
      // borderWidth: columnStyle.borderWidth || columnsStyle.borderWidth,
      textSize: p.textSize || d2.textSize,
      textWeight: d2.textWeight || p.textWeight,
      fontFamily: d2.fontFamily || p.fontFamily,
      fontStyle: d2.fontStyle || p.fontStyle,
      rowHeight: V2
    };
    let {
      background: _2
    } = W;
    D2.selected && (_2 = O(Vse(_2)) + "," + _2), D2.hover && (_2 = O(Ise(_2)) + "," + _2), A = d(Wo, {
      ...r2,
      $background: _2,
      $style: W,
      $defaultThemeDetail: P4,
      $linkStyle: m,
      $isEditing: g,
      $tableSize: x2,
      $autoHeight: u,
      children: s
    });
  }
  return d(r.Provider, {
    value: {
      isEditing: g,
      setIsEditing: I
    },
    children: A
  });
}
function Fo(e) {
  const [t, o] = (0, import_react.useState)(false), [n2, i] = (0, import_react.useState)(false);
  return d(n.Provider, {
    value: {
      hover: t,
      selected: n2
    },
    children: d("tr", {
      ...e,
      tabIndex: -1,
      onMouseEnter: () => o(true),
      onMouseLeave: () => o(false),
      onFocus: () => i(true),
      onBlur: () => i(false)
    })
  });
}
function pt(e) {
  const [t, o] = (0, import_react.useState)({
    index: -1,
    width: -1
  }), n2 = e.columns.map((i, l) => {
    const {
      width: a,
      style: s,
      linkStyle: d2,
      cellColorFn: p,
      ...m
    } = i, x2 = (t.index === l ? t.width : i.width) ?? 0;
    let u = "auto", r2 = K;
    return typeof x2 == "number" && x2 > 0 && (r2 = "unset", u = x2), {
      ...m,
      RC_TABLE_INTERNAL_COL_DEFINE: {
        style: {
          minWidth: r2,
          width: u
        }
      },
      onCell: (g, I) => ({
        record: g,
        title: String(i.dataIndex),
        rowColorFn: e.rowColorFn,
        rowHeightFn: e.rowHeightFn,
        cellColorFn: p,
        rowIndex: I,
        columnsStyle: e.columnsStyle,
        columnStyle: s,
        linkStyle: d2,
        tableSize: e.size,
        autoHeight: e.rowAutoHeight,
        onClick: () => {
          e.onCellClick(i.titleText, String(i.dataIndex));
        }
      }),
      onHeaderCell: () => ({
        width: x2,
        title: i.titleText,
        viewModeResizable: e.viewModeResizable,
        onResize: (g) => {
          g && o({
            index: l,
            width: g
          });
        },
        onResizeStop: (g, {
          size: I
        }) => {
          o({
            index: -1,
            width: -1
          }), i.onWidthResize && i.onWidthResize(I.width);
        }
      })
    };
  });
  return d(oC, {
    components: {
      header: {
        cell: Ho
      },
      body: {
        cell: Oo,
        row: Fo
      }
    },
    ...e,
    pagination: false,
    columns: n2,
    scroll: {
      x: K * n2.length,
      y: void 0
    }
  });
}
pt.whyDidYouRender = true;
var ue = (e, t) => {
  const o = {
    [w2]: `${z}_${e}`
  };
  return Object.keys(t).forEach((n2) => {
    o[n2] = "";
  }), o;
};
function Mo2(e) {
  const [t, o] = (0, import_react.useState)({}), n2 = (0, import_react.useContext)(Vr), {
    width: i,
    ref: l
  } = gC({
    refreshMode: "debounce",
    refreshRate: 600,
    handleHeight: false
  }), a = $C(), s = (0, import_react.useContext)(Yh), [d2, p] = (0, import_react.useState)(false), {
    comp: m,
    onDownload: x2,
    onRefresh: u
  } = e, r2 = m.children, g = r2.style.getView(), I = r2.rowStyle.getView(), D2 = r2.headerStyle.getView(), A = r2.toolbarStyle.getView(), P = r2.rowAutoHeight.getView(), V2 = m.getTableAutoHeight(), R = r2.showHorizontalScrollbar.getView(), W = r2.showVerticalScrollbar.getView(), _2 = r2.visibleResizables.getView(), yt = r2.showHRowGridBorder.getView(), xt = r2.columnsStyle.getView(), $t = r2.summaryRowStyle.getView(), xe = (0, import_react.useMemo)(() => r2.columns.getChangeSet(), [r2.columns]), U = (0, import_react.useMemo)(() => r2.columns.getChangeSet(true), [r2.columns]), Ct2 = (0, import_react.useMemo)(() => !h1.isEmpty(xe) || !h1.isEmpty(U), [xe, U]), Y = (0, import_react.useMemo)(() => r2.columns.getView(), [r2.columns]), $e = (0, import_react.useMemo)(() => Y.map((b) => b.getView()), [Y]), X = m.filterData, Ce = (0, import_react.useMemo)(() => r2.sort.getView(), [r2.sort]), $ = (0, import_react.useMemo)(() => r2.toolbar.getView(), [r2.toolbar]), St = (0, import_react.useMemo)(() => r2.showSummary.getView(), [r2.showSummary]), vt = (0, import_react.useMemo)(() => r2.summaryRows.getView(), [r2.summaryRows]), le = (0, import_react.useMemo)(() => r2.inlineAddNewRow.getView(), [r2.inlineAddNewRow]), F = (0, import_react.useMemo)(() => r2.pagination.getView(), [r2.pagination]), ae = (0, import_react.useMemo)(() => r2.size.getView(), [r2.size]), Se = (0, import_react.useMemo)(() => r2.editModeClicks.getView(), [r2.editModeClicks]), J = (0, import_react.useMemo)(() => r2.onEvent.getView(), [r2.onEvent]), ve = r2.dynamicColumn.getView(), Ve = (0, import_react.useMemo)(() => r2.dynamicColumnConfig.getView(), [r2.dynamicColumnConfig]), Z = m.columnAggrData, se = (0, import_react.useMemo)(() => r2.expansion.getView(), [r2.expansion]), Te2 = (0, import_react.useMemo)(() => dt($e, Ce, $.columnSetting, ae, ve, Ve, Z, Se, J), [$e, Ce, $.columnSetting, ae, ve, Ve, Z, Se]), Vt = (0, import_react.useMemo)(() => fe(r2.data.getView()), [r2.data]), Re = (0, import_react.useCallback)(() => {
    if (!le) {
      o({}), setTimeout(() => r2.columns.dispatchClearInsertSet());
      return;
    }
    let b = {
      ...t
    };
    const T = Object.keys(b), H = T.length, k = Object.keys(U).filter((E) => E.startsWith(z)), ke = k.length, ze = T.filter((E) => !k.includes(E));
    if (ze.length === H) {
      const G = `${z}_0`;
      o({
        [G]: ue(0, Z)
      });
      const Ee = document.querySelector(`[data-row-key=${G}]`);
      Ee && (Ee.style.display = "");
      return;
    }
    ze.forEach((E) => {
      if (E === T[H - 1] || E === T[H - 2])
        delete b[E];
      else {
        const G = document.querySelector(`[data-row-key=${E}]`);
        G && (G.style.display = "none");
      }
    });
    const Ie = ke ? k[ke - 1] : "", _e = (Ie ? parseInt(Ie.replace(`${z}_`, "")) : -1) + 1, kt = `${z}_${_e}`;
    b[kt] = ue(_e, Z), o(b);
  }, [le, JSON.stringify(U), o, ue]);
  (0, import_react.useEffect)(() => {
    Re();
  }, [Re]);
  const de2 = (0, import_react.useMemo)(() => {
    let b = X, T = F.current;
    const H = F.total || X.length;
    if (X.length > F.pageSize) {
      let k = (T - 1) * F.pageSize;
      k >= H && (T = 1, k = 0), b = b.slice(k, k + F.pageSize);
    }
    return {
      total: H,
      current: T,
      data: b
    };
  }, [F, X]);
  dg(m.children);
  const q = (0, import_react.useCallback)((b) => {
    if (b === "saveChanges" && !r2.onEvent.isBind(b)) {
      !a && Ct.warning(_("table.saveChangesNotBind"));
      return;
    }
    r2.onEvent.getView()(b), setTimeout(() => r2.columns.dispatchClearChangeSet());
  }, [a, r2.onEvent, r2.columns]), Q = d(Be, {
    toolbar: $,
    $style: A,
    pagination: {
      ...F,
      total: de2.total,
      current: de2.current
    },
    columns: Y,
    onRefresh: () => u(n2.queryCompInfoList().map((b) => b.name), p),
    onDownload: () => {
      q("download"), x2(`${s}-data`);
    },
    hasChange: Ct2,
    onSaveChanges: () => q("saveChanges"),
    onCancelChanges: () => {
      q("cancelChanges"), le && o({});
    },
    onEvent: J
  }), Tt = () => {
    if (St)
      return d(ht, {
        tableSize: ae,
        istoolbarPositionBelow: $.position === "below",
        expandableRows: !!se.expandModalView,
        summaryRows: parseInt(vt),
        columns: Y,
        summaryRowStyle: $t
      });
  };
  if (Te2.length === 0)
    return d(Dw, {
      text: _("table.emptyColumns")
    });
  const Rt = !R && !W;
  return d(Qf.Provider, {
    value: g.background,
    children: N(Eo, {
      ref: l,
      $style: g,
      $tableAutoHeight: V2,
      $showHorizontalScrollbar: R,
      $showVerticalScrollbar: W,
      $fixedToolbar: $.fixedToolbar,
      children: [$.position === "above" && ($.fixedToolbar || V2 && R) && Q, d(zc, {
        className: "table-scrollbar-wrapper",
        style: {
          height: "100%",
          margin: "0px",
          padding: "0px"
        },
        hideScrollbar: Rt,
        prefixNode: $.position === "above" && !$.fixedToolbar && !(V2 && R) && Q,
        suffixNode: $.position === "below" && !$.fixedToolbar && !(V2 && R) && Q,
        children: N(Ao, {
          $style: g,
          $rowStyle: I,
          $headerStyle: D2,
          $toolbarStyle: A,
          $toolbarPosition: $.position,
          $fixedHeader: r2.fixedHeader.getView(),
          $fixedToolbar: $.fixedToolbar && $.position === "above",
          $visibleResizables: _2,
          $showHRowGridBorder: yt,
          children: [d(pt, {
            expandable: {
              ...se.expandableConfig,
              childrenColumnName: Vt ? S : "OB_CHILDREN_KEY_PLACEHOLDER",
              fixed: "left",
              onExpand: (b) => {
                q(b ? "rowExpand" : "rowShrink");
              }
            },
            rowColorFn: r2.rowColor.getView(),
            rowHeightFn: r2.rowHeight.getView(),
            ...r2.selection.getView()(J),
            bordered: r2.showRowGridBorder.getView(),
            onChange: (b, T, H, k) => {
              ct(b, T, H, k, m.dispatch, J);
            },
            showHeader: !r2.hideHeader.getView(),
            columns: Te2,
            columnsStyle: xt,
            viewModeResizable: r2.viewModeResizable.getView(),
            visibleResizables: r2.visibleResizables.getView(),
            dataSource: de2.data.concat(Object.values(t)),
            size: r2.size.getView(),
            rowAutoHeight: P,
            tableLayout: "fixed",
            loading: d2 || // fixme isLoading type
            r2.showDataLoadSpinner.getView() && r2.data.isLoading() || r2.loading.getView(),
            onCellClick: (b, T) => {
              m.children.selectedCell.dispatchChangeValueAction({
                name: b,
                dataIndex: T
              });
            },
            summary: Tt
          }), d(V.Provider, {
            value: {
              modalWidth: i && Math.max(i, 300)
            },
            children: se.expandModalView
          })]
        })
      }), $.position === "below" && ($.fixedToolbar || V2 && R) && Q]
    })
  });
}
var cr = Object.freeze(Object.defineProperty({
  __proto__: null,
  EMPTY_ROW_KEY: z,
  TableCompView: Mo2
}, Symbol.toStringTag, { value: "Module" }));
var re = mJe(ne);
var Do = [{
  label: _("table.auto"),
  value: "auto"
}, {
  label: _("table.fixed"),
  value: "fixed"
}];
var Po = [{
  label: d($9, {}),
  value: "left"
}, {
  label: d(Th2, {}),
  value: "close"
}, {
  label: d(R9, {}),
  value: "right"
}];
var mt = _("table.cellColor");
var Bo = TI(new g2({
  color: EQe
}, (e) => e.color).setPropertyViewFn((e) => e.color.propertyView({
  label: mt,
  tooltip: _("table.cellColorDesc")
})).build());
var we = class extends Bo {
  getPropertyView() {
    return u3({
      filterText: mt
    }, super.getPropertyView());
  }
};
var gt = _("table.columnTooltip");
var No = TI(new g2({
  tooltip: M2
}, (e) => e.tooltip).setPropertyViewFn((e) => e.tooltip.propertyView({
  label: gt,
  tooltip: x
})).build());
var ye = class extends No {
  getPropertyView() {
    return u3({
      filterText: gt
    }, super.getPropertyView());
  }
};
var bt = {
  // column title
  title: M2,
  titleTooltip: M2,
  showTitle: t2(ao, true),
  cellTooltip: ye,
  // a custom column or a data column
  isCustom: Bn(false),
  // If it is a data column, it must be the name of the column and cannot be duplicated as a react key
  dataIndex: Bn(""),
  hide: ao,
  sortable: ao,
  width: vc,
  autoWidth: ca(Do, "auto"),
  render: re,
  align: oV,
  tempHide: z3(false),
  fixed: ca(Po, "close"),
  editable: ao,
  background: t2(Mg, ""),
  margin: t2(FL, ""),
  text: t2(Mg, ""),
  border: t2(Mg, ""),
  borderWidth: t2(FL, ""),
  radius: t2(FL, ""),
  textSize: t2(FL, ""),
  textWeight: t2(M2, "normal"),
  fontFamily: t2(M2, "sans-serif"),
  fontStyle: t2(M2, "normal"),
  cellColor: we,
  textOverflow: t2(w, "ellipsis"),
  linkColor: t2(Mg, "#3377ff"),
  linkHoverColor: t2(Mg, ""),
  linkActiveColor: t2(Mg, ""),
  summaryColumns: t2(E3(be), [{}, {}, {}])
};
var Lo = de(sFe)` width: 24px; margin: 0 8px 0 -3px; padding: 3px;`;
var jo = de(Oee)` width: 24px; margin: 0 8px 0 -3px; padding: 3px;`;
var qo = de(YFe)` width: 24px; margin: 0 8px 0 -3px; padding: 3px;`;
var je = de(QFe)` width: 24px; margin: 0 8px 0 -3px; padding: 3px;`;
var Go = de(JFe)` width: 24px; margin: 0 8px 0 -3px; padding: 3px;`;
de(ABe)` width: 24px; margin: 0 0px 0 -12px;`;
var Ko = new g2(bt, (e, t) => ({
  ...e,
  onWidthResize: (o) => {
    t(hl({
      width: ho(o, true),
      autoWidth: ho("fixed", true)
    }));
  }
})).setPropertyViewFn(() => d(p1, {})).build();
var ie = class extends Ko {
  reduce(t) {
    let o = super.reduce(t);
    if (t.type === h2.UPDATE_NODES_V2 && (o = o.setChild("cellColor", o.children.cellColor.reduce(we.changeContextDataAction({
      currentCell: void 0,
      currentRow: {}
    }))), o = o.setChild("cellTooltip", o.children.cellTooltip.reduce(ye.changeContextDataAction({
      currentCell: void 0,
      currentRow: {},
      currentIndex: 0
    })))), t.type === h2.CHANGE_VALUE) {
      const n2 = o.children.title.unevaledValue, i = o.children.dataIndex.getView();
      n2 || o.children.title.dispatchChangeValueAction(i);
    }
    return o;
  }
  getView() {
    const t = super.getView(), o = this.children.render.getSelectedComp().getComp().children.compType.getView();
    return {
      ...t,
      editable: D[o].canBeEditable() && t.editable
    };
  }
  exposingNode() {
    const t = this.children.dataIndex.exposingNode(), o = hc(this.children.render.node(), (n2) => ({
      wrap: n2.__comp__.wrap,
      map: h1.mapValues(n2.__map__, (i) => i.comp)
    }));
    return d3({
      dataIndex: t,
      render: o
    });
  }
  propertyView(t, o, n2) {
    var p, m, x2;
    const i = this.children.render.getSelectedComp().getComp().children.compType.getView(), l = ((p = this.children.render.getSelectedComp().getParams()) == null ? void 0 : p.initialColumns) || [], a = this.children.render.getSelectedComp().getComp().toJsonValue();
    let s = "{{currentCell}}";
    (m = a.comp) != null && m.hasOwnProperty("src") ? s = a.comp.src : (x2 = a.comp) != null && x2.hasOwnProperty("text") && (s = a.comp.text);
    const d2 = this.children.summaryColumns.getView();
    return N(p1, {
      children: [o === "summary" && d2[n2].propertyView(""), o === "normal" && N(p1, {
        children: [this.children.title.propertyView({
          label: _("table.columnTitle"),
          placeholder: this.children.dataIndex.getView()
        }), this.children.titleTooltip.propertyView({
          label: _("table.columnTitleTooltip")
        }), this.children.cellTooltip.getPropertyView(), d(da, {
          showSearch: true,
          defaultValue: s,
          options: l,
          label: _("table.dataMapping"),
          onChange: (u) => {
            const r2 = i;
            let g = {
              text: u
            };
            i === "image" && (g = {
              src: u
            }), this.children.render.dispatchChangeValueAction({
              compType: r2,
              comp: g
            });
          }
        }), this.children.render.getPropertyView(), this.children.showTitle.propertyView({
          label: _("table.showTitle"),
          tooltip: _("table.showTitleTooltip")
        }), D[i].canBeEditable() && this.children.editable.propertyView({
          label: _("table.editable")
        }), this.children.sortable.propertyView({
          label: _("table.sortable")
        }), this.children.hide.propertyView({
          label: _("prop.hide")
        }), this.children.align.propertyView({
          label: _("table.align"),
          radioButton: true
        }), this.children.fixed.propertyView({
          label: _("table.fixedColumn"),
          radioButton: true
        }), this.children.autoWidth.propertyView({
          label: _("table.autoWidth"),
          radioButton: true
        }), this.children.autoWidth.getView() === "fixed" && this.children.width.propertyView({
          label: _("prop.width")
        }), (i === "link" || i === "links") && N(p1, {
          children: [d(zx, {
            style: {
              margin: "12px 0"
            }
          }), u3({}, d("div", {
            children: d("b", {
              children: "Link Style"
            })
          })), this.children.linkColor.propertyView({
            label: _("text")
            // trans('style.background'),
          }), this.children.linkHoverColor.propertyView({
            label: "Hover text"
            // trans('style.background'),
          }), this.children.linkActiveColor.propertyView({
            label: "Active text"
            // trans('style.background'),
          })]
        }), d(zx, {
          style: {
            margin: "12px 0"
          }
        }), u3({}, d("div", {
          children: d("b", {
            children: "Column Style"
          })
        })), this.children.background.propertyView({
          label: _("style.background")
        }), i !== "link" && this.children.text.propertyView({
          label: _("text")
        }), this.children.border.propertyView({
          label: _("style.border")
        }), this.children.borderWidth.propertyView({
          label: _("style.borderWidth"),
          preInputNode: d(jo, {
            as: Oee,
            title: ""
          }),
          placeholder: "1px"
        }), this.children.radius.propertyView({
          label: _("style.borderRadius"),
          preInputNode: d(Lo, {
            as: sFe,
            title: ""
          }),
          placeholder: "3px"
        }), this.children.textSize.propertyView({
          label: _("style.textSize"),
          preInputNode: d(qo, {
            as: YFe,
            title: ""
          }),
          placeholder: "14px"
        }), this.children.textWeight.propertyView({
          label: _("style.textWeight"),
          preInputNode: d(Go, {
            as: JFe,
            title: ""
          }),
          placeholder: "normal"
        }), this.children.fontFamily.propertyView({
          label: _("style.fontFamily"),
          preInputNode: d(je, {
            as: QFe,
            title: ""
          }),
          placeholder: "sans-serif"
        }), this.children.fontStyle.propertyView({
          label: _("style.fontStyle"),
          preInputNode: d(je, {
            as: QFe,
            title: ""
          }),
          placeholder: "normal"
        }), this.children.textOverflow.getPropertyView(), this.children.cellColor.getPropertyView()]
      })]
    });
  }
  getChangeSet() {
    const t = this.children.dataIndex.getView(), o = h1.mapValues(this.children.render.getMap(), (n2) => n2.getComp().children.comp.children.changeValue.getView());
    return {
      [t]: o
    };
  }
  dispatchClearChangeSet() {
    this.children.render.dispatch(il(re.forEachAction(s4("comp", s4("comp", U8("changeValue", null, false))))));
  }
  dispatchClearInsertSet() {
    const t = this.children.render.getMap();
    Object.keys(t).filter((n2) => n2.startsWith(z)).forEach((n2) => {
      t[n2].getComp().children.comp.children.changeValue.dispatchChangeValueAction(null);
    });
  }
  static setSelectionAction(t) {
    return s4("render", re.setSelectionAction(t));
  }
};
function Uo() {
  return {
    title: _("table.customColumn"),
    dataIndex: W4(),
    isCustom: true
  };
}
function ft(e, t, o, n2) {
  return {
    title: o ?? e,
    dataIndex: e,
    isCustom: false,
    autoWidth: "fixed",
    width: t + "",
    render: {
      compType: n2 ? "tag" : "text",
      comp: {
        text: "{{currentCell}}"
      }
    }
  };
}
var ur = Object.freeze(Object.defineProperty({
  __proto__: null,
  CellColorComp: we,
  CellTooltipComp: ye,
  ColumnComp: ie,
  RenderComp: re,
  columnChildrenMap: bt,
  newCustomColumn: Uo,
  newPrimaryColumn: ft
}, Symbol.toStringTag, { value: "Module" }));
var Yo = E3(ie);
function wt(e) {
  if (e.length <= 0 || typeof e[0] == "string")
    return;
  const t = {};
  return e.slice(0, 50).forEach((o) => {
    Object.keys(o).forEach((n2) => {
      t.hasOwnProperty(n2) || (t[n2] = o[n2]);
    });
  }), t;
}
var Xo = class extends Yo {
  reduce(t) {
    if (C3(t, "dataChanged")) {
      const o = t.value.rowExample, {
        readOnly: n2
      } = v0();
      let i = this;
      if (t.value.doGeneColumn && (t.value.dynamicColumn || !n2)) {
        const l = this.geneColumnsAction(o, t.value.data);
        i = this.reduce(this.multiAction(l));
      }
      return i;
    }
    return super.reduce(t);
  }
  getChangeSet(t) {
    const o = {};
    return this.getView().forEach((i) => {
      const l = i.getChangeSet();
      Object.keys(l).forEach((a) => {
        Object.keys(l[a]).forEach((s) => {
          const d2 = t ? s.startsWith(z) : !s.startsWith(z);
          !h1.isNil(l[a][s]) && d2 && (o[s] || (o[s] = {}), o[s][a] = l[a][s]);
        });
      });
    }), o;
  }
  dispatchClearChangeSet() {
    this.getView().forEach((o) => o.dispatchClearChangeSet());
  }
  dispatchClearInsertSet() {
    this.getView().forEach((o) => o.dispatchClearInsertSet());
  }
  /**
   * If the table data changes, call this method to trigger the action
   */
  dataChangedAction(t) {
    return _n({
      type: "dataChanged",
      ...t
    }, true);
  }
  /**
   * According to the data, adjust the column
   */
  geneColumnsAction(t, o) {
    if (t == null)
      return [];
    const n2 = Object.keys(t);
    if (n2.length === 0)
      return [];
    const i = this.getView(), l = [];
    let a = 0;
    return i.forEach((s, d2) => {
      if (s.getView().isCustom)
        return;
      const p = s.getView().dataIndex;
      (p === S || !n2.find((m) => p === m)) && (l.push(this.deleteAction(d2 - a)), a += 1);
    }), n2.forEach((s) => {
      s === S && fe(o) || i.find((d2) => d2.getView().dataIndex === s) || l.push(this.pushAction(ft(s, ut(s, o))));
    }), l.length === 0 ? [] : l;
  }
  withParamsNode() {
    const t = this.getView(), o = h1(t).map((i) => i.children.render.getOriginalComp().node()).toPairs().fromPairs().value();
    return S0(this, "withParamsNode", [d3(o), o], (i, l) => Ub(i[1], l[1]))[0];
  }
  getColumnsNode(t) {
    const o = this.getView(), n2 = h1(o).map((l) => l.children[t].node()).toPairs().fromPairs().value();
    return S0(this, "col_nodes_" + t, [d3(n2), n2], (l, a) => Ub(l[1], a[1]))[0];
  }
  setSelectionAction(t) {
    return this.forEachAction(ie.setSelectionAction(t));
  }
};
var hr = Object.freeze(Object.defineProperty({
  __proto__: null,
  ColumnListComp: Xo,
  tableDataRowExample: wt
}, Symbol.toStringTag, { value: "Module" }));

export {
  S,
  w2 as w,
  yo,
  xo,
  nt,
  lt,
  at,
  st,
  $o,
  dt,
  ut,
  vo,
  sr,
  dr,
  z,
  Mo2 as Mo,
  cr,
  re,
  ie,
  Uo,
  ft,
  ur,
  wt,
  Xo,
  hr
};
//# sourceMappingURL=chunk-NFFAU32G.js.map
