import {
  A0r,
  BWe,
  C8,
  D0r,
  DV2,
  GA2,
  H0r,
  I0r,
  Np,
  P0r,
  QD2,
  Rve,
  V0r,
  XA2,
  Xee,
  YD2,
  YV2,
  ZV2,
  aS,
  bH,
  d,
  dD2,
  e1e,
  fD2,
  g8,
  gE,
  oS,
  p1,
  r1e,
  sD2,
  sn,
  v0r,
  v1,
  w0,
  xw
} from "./chunk-2ZELARZW.js";
import {
  require_react_dom
} from "./chunk-VGGCA2L5.js";
import {
  require_react
} from "./chunk-73THXJN7.js";
import {
  __toESM
} from "./chunk-2TUXWMP5.js";

// node_modules/lowcoder-sdk/dist/2a12f2bc.js
var import_react = __toESM(require_react(), 1);
var import_react_dom = __toESM(require_react_dom(), 1);
var ct = {
  classId: "classID",
  dataType: "datatype",
  itemId: "itemID",
  strokeDashArray: "strokeDasharray",
  strokeDashOffset: "strokeDashoffset",
  strokeLineCap: "strokeLinecap",
  strokeLineJoin: "strokeLinejoin",
  strokeMiterLimit: "strokeMiterlimit",
  typeOf: "typeof",
  xLinkActuate: "xlinkActuate",
  xLinkArcRole: "xlinkArcrole",
  xLinkHref: "xlinkHref",
  xLinkRole: "xlinkRole",
  xLinkShow: "xlinkShow",
  xLinkTitle: "xlinkTitle",
  xLinkType: "xlinkType",
  xmlnsXLink: "xmlnsXlink"
};
function xe(e2) {
  const t = [];
  let n = -1, r = 0, i = 0;
  for (; ++n < e2.length; ) {
    const l = e2.charCodeAt(n);
    let u = "";
    if (l === 37 && r1e(e2.charCodeAt(n + 1)) && r1e(e2.charCodeAt(n + 2)))
      i = 2;
    else if (l < 128)
      /[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(l)) || (u = String.fromCharCode(l));
    else if (l > 55295 && l < 57344) {
      const a = e2.charCodeAt(n + 1);
      l < 56320 && a > 56319 && a < 57344 ? (u = String.fromCharCode(l, a), i = 1) : u = "ï¿½";
    } else
      u = String.fromCharCode(l);
    u && (t.push(e2.slice(r, n), encodeURIComponent(u)), r = n + i + 1, u = ""), i && (n += i, i = 0);
  }
  return t.join("") + e2.slice(r);
}
var Ue = {
  name: "attention",
  tokenize: vn,
  resolveAll: Vn
};
function Vn(e2, t) {
  let n = -1, r, i, l, u, a, s, o, c;
  for (; ++n < e2.length; )
    if (e2[n][0] === "enter" && e2[n][1].type === "attentionSequence" && e2[n][1]._close) {
      for (r = n; r--; )
        if (e2[r][0] === "exit" && e2[r][1].type === "attentionSequence" && e2[r][1]._open && // If the markers are the same:
        t.sliceSerialize(e2[r][1]).charCodeAt(0) === t.sliceSerialize(e2[n][1]).charCodeAt(0)) {
          if ((e2[r][1]._close || e2[n][1]._open) && (e2[n][1].end.offset - e2[n][1].start.offset) % 3 && !((e2[r][1].end.offset - e2[r][1].start.offset + e2[n][1].end.offset - e2[n][1].start.offset) % 3))
            continue;
          s = e2[r][1].end.offset - e2[r][1].start.offset > 1 && e2[n][1].end.offset - e2[n][1].start.offset > 1 ? 2 : 1;
          const m = Object.assign({}, e2[r][1].end), g = Object.assign({}, e2[n][1].start);
          pt(m, -s), pt(g, s), u = {
            type: s > 1 ? "strongSequence" : "emphasisSequence",
            start: m,
            end: Object.assign({}, e2[r][1].end)
          }, a = {
            type: s > 1 ? "strongSequence" : "emphasisSequence",
            start: Object.assign({}, e2[n][1].start),
            end: g
          }, l = {
            type: s > 1 ? "strongText" : "emphasisText",
            start: Object.assign({}, e2[r][1].end),
            end: Object.assign({}, e2[n][1].start)
          }, i = {
            type: s > 1 ? "strong" : "emphasis",
            start: Object.assign({}, u.start),
            end: Object.assign({}, a.end)
          }, e2[r][1].end = Object.assign({}, u.start), e2[n][1].start = Object.assign({}, a.end), o = [], e2[r][1].end.offset - e2[r][1].start.offset && (o = I0r(o, [
            ["enter", e2[r][1], t],
            ["exit", e2[r][1], t]
          ])), o = I0r(o, [
            ["enter", i, t],
            ["enter", u, t],
            ["exit", u, t],
            ["enter", l, t]
          ]), o = I0r(
            o,
            sD2(
              t.parser.constructs.insideSpan.null,
              e2.slice(r + 1, n),
              t
            )
          ), o = I0r(o, [
            ["exit", l, t],
            ["enter", a, t],
            ["exit", a, t],
            ["exit", i, t]
          ]), e2[n][1].end.offset - e2[n][1].start.offset ? (c = 2, o = I0r(o, [
            ["enter", e2[n][1], t],
            ["exit", e2[n][1], t]
          ])) : c = 0, gE(e2, r - 1, n - r + 3, o), n = r + o.length - c - 2;
          break;
        }
    }
  for (n = -1; ++n < e2.length; )
    e2[n][1].type === "attentionSequence" && (e2[n][1].type = "data");
  return e2;
}
function vn(e2, t) {
  const n = this.parser.constructs.attentionMarkers.null, r = this.previous, i = Rve(r);
  let l;
  return u;
  function u(s) {
    return l = s, e2.enter("attentionSequence"), a(s);
  }
  function a(s) {
    if (s === l)
      return e2.consume(s), a;
    const o = e2.exit("attentionSequence"), c = Rve(s), m = !c || c === 2 && i || n.includes(s), g = !i || i === 2 && c || n.includes(r);
    return o._open = !!(l === 42 ? m : m && (i || !g)), o._close = !!(l === 42 ? g : g && (c || !m)), t(s);
  }
}
function pt(e2, t) {
  e2.column += t, e2.offset += t, e2._bufferIndex += t;
}
var $n = {
  name: "autolink",
  tokenize: Un
};
function Un(e2, t, n) {
  let r = 0;
  return i;
  function i(h) {
    return e2.enter("autolink"), e2.enter("autolinkMarker"), e2.consume(h), e2.exit("autolinkMarker"), e2.enter("autolinkProtocol"), l;
  }
  function l(h) {
    return xw(h) ? (e2.consume(h), u) : o(h);
  }
  function u(h) {
    return h === 43 || h === 45 || h === 46 || r1e(h) ? (r = 1, a(h)) : o(h);
  }
  function a(h) {
    return h === 58 ? (e2.consume(h), r = 0, s) : (h === 43 || h === 45 || h === 46 || r1e(h)) && r++ < 32 ? (e2.consume(h), a) : (r = 0, o(h));
  }
  function s(h) {
    return h === 62 ? (e2.exit("autolinkProtocol"), e2.enter("autolinkMarker"), e2.consume(h), e2.exit("autolinkMarker"), e2.exit("autolink"), t) : h === null || h === 32 || h === 60 || XA2(h) ? n(h) : (e2.consume(h), s);
  }
  function o(h) {
    return h === 64 ? (e2.consume(h), c) : V0r(h) ? (e2.consume(h), o) : n(h);
  }
  function c(h) {
    return r1e(h) ? m(h) : n(h);
  }
  function m(h) {
    return h === 46 ? (e2.consume(h), r = 0, c) : h === 62 ? (e2.exit("autolinkProtocol").type = "autolinkEmail", e2.enter("autolinkMarker"), e2.consume(h), e2.exit("autolinkMarker"), e2.exit("autolink"), t) : g(h);
  }
  function g(h) {
    if ((h === 45 || r1e(h)) && r++ < 63) {
      const b = h === 45 ? g : m;
      return e2.consume(h), b;
    }
    return n(h);
  }
}
var Gt = {
  name: "blockQuote",
  tokenize: Qn,
  continuation: {
    tokenize: Wn
  },
  exit: Gn
};
function Qn(e2, t, n) {
  const r = this;
  return i;
  function i(u) {
    if (u === 62) {
      const a = r.containerState;
      return a.open || (e2.enter("blockQuote", {
        _container: true
      }), a.open = true), e2.enter("blockQuotePrefix"), e2.enter("blockQuoteMarker"), e2.consume(u), e2.exit("blockQuoteMarker"), l;
    }
    return n(u);
  }
  function l(u) {
    return g8(u) ? (e2.enter("blockQuotePrefixWhitespace"), e2.consume(u), e2.exit("blockQuotePrefixWhitespace"), e2.exit("blockQuotePrefix"), t) : (e2.exit("blockQuotePrefix"), t(u));
  }
}
function Wn(e2, t, n) {
  const r = this;
  return i;
  function i(u) {
    return g8(u) ? C8(
      e2,
      l,
      "linePrefix",
      r.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4
    )(u) : l(u);
  }
  function l(u) {
    return e2.attempt(Gt, t, n)(u);
  }
}
function Gn(e2) {
  e2.exit("blockQuote");
}
var Xt = {
  name: "characterEscape",
  tokenize: Xn
};
function Xn(e2, t, n) {
  return r;
  function r(l) {
    return e2.enter("characterEscape"), e2.enter("escapeMarker"), e2.consume(l), e2.exit("escapeMarker"), i;
  }
  function i(l) {
    return P0r(l) ? (e2.enter("characterEscapeValue"), e2.consume(l), e2.exit("characterEscapeValue"), e2.exit("characterEscape"), t) : n(l);
  }
}
var Yt = {
  name: "characterReference",
  tokenize: Yn
};
function Yn(e2, t, n) {
  const r = this;
  let i = 0, l, u;
  return a;
  function a(m) {
    return e2.enter("characterReference"), e2.enter("characterReferenceMarker"), e2.consume(m), e2.exit("characterReferenceMarker"), s;
  }
  function s(m) {
    return m === 35 ? (e2.enter("characterReferenceMarkerNumeric"), e2.consume(m), e2.exit("characterReferenceMarkerNumeric"), o) : (e2.enter("characterReferenceValue"), l = 31, u = r1e, c(m));
  }
  function o(m) {
    return m === 88 || m === 120 ? (e2.enter("characterReferenceMarkerHexadecimal"), e2.consume(m), e2.exit("characterReferenceMarkerHexadecimal"), e2.enter("characterReferenceValue"), l = 6, u = D0r, c) : (e2.enter("characterReferenceValue"), l = 7, u = A0r, c(m));
  }
  function c(m) {
    if (m === 59 && i) {
      const g = e2.exit("characterReferenceValue");
      return u === r1e && !fD2(r.sliceSerialize(g)) ? n(m) : (e2.enter("characterReferenceMarker"), e2.consume(m), e2.exit("characterReferenceMarker"), e2.exit("characterReference"), t);
    }
    return u(m) && i++ < l ? (e2.consume(m), c) : n(m);
  }
}
var ft = {
  tokenize: Kn,
  partial: true
};
var ht = {
  name: "codeFenced",
  tokenize: Jn,
  concrete: true
};
function Jn(e2, t, n) {
  const r = this, i = {
    tokenize: N,
    partial: true
  };
  let l = 0, u = 0, a;
  return s;
  function s(d2) {
    return o(d2);
  }
  function o(d2) {
    const T = r.events[r.events.length - 1];
    return l = T && T[1].type === "linePrefix" ? T[2].sliceSerialize(T[1], true).length : 0, a = d2, e2.enter("codeFenced"), e2.enter("codeFencedFence"), e2.enter("codeFencedFenceSequence"), c(d2);
  }
  function c(d2) {
    return d2 === a ? (u++, e2.consume(d2), c) : u < 3 ? n(d2) : (e2.exit("codeFencedFenceSequence"), g8(d2) ? C8(e2, m, "whitespace")(d2) : m(d2));
  }
  function m(d2) {
    return d2 === null || Np(d2) ? (e2.exit("codeFencedFence"), r.interrupt ? t(d2) : e2.check(ft, x, F)(d2)) : (e2.enter("codeFencedFenceInfo"), e2.enter("chunkString", {
      contentType: "string"
    }), g(d2));
  }
  function g(d2) {
    return d2 === null || Np(d2) ? (e2.exit("chunkString"), e2.exit("codeFencedFenceInfo"), m(d2)) : g8(d2) ? (e2.exit("chunkString"), e2.exit("codeFencedFenceInfo"), C8(e2, h, "whitespace")(d2)) : d2 === 96 && d2 === a ? n(d2) : (e2.consume(d2), g);
  }
  function h(d2) {
    return d2 === null || Np(d2) ? m(d2) : (e2.enter("codeFencedFenceMeta"), e2.enter("chunkString", {
      contentType: "string"
    }), b(d2));
  }
  function b(d2) {
    return d2 === null || Np(d2) ? (e2.exit("chunkString"), e2.exit("codeFencedFenceMeta"), m(d2)) : d2 === 96 && d2 === a ? n(d2) : (e2.consume(d2), b);
  }
  function x(d2) {
    return e2.attempt(i, F, S)(d2);
  }
  function S(d2) {
    return e2.enter("lineEnding"), e2.consume(d2), e2.exit("lineEnding"), k;
  }
  function k(d2) {
    return l > 0 && g8(d2) ? C8(
      e2,
      P,
      "linePrefix",
      l + 1
    )(d2) : P(d2);
  }
  function P(d2) {
    return d2 === null || Np(d2) ? e2.check(ft, x, F)(d2) : (e2.enter("codeFlowValue"), E(d2));
  }
  function E(d2) {
    return d2 === null || Np(d2) ? (e2.exit("codeFlowValue"), P(d2)) : (e2.consume(d2), E);
  }
  function F(d2) {
    return e2.exit("codeFenced"), t(d2);
  }
  function N(d2, T, L) {
    let _ = 0;
    return v;
    function v(B) {
      return d2.enter("lineEnding"), d2.consume(B), d2.exit("lineEnding"), C;
    }
    function C(B) {
      return d2.enter("codeFencedFence"), g8(B) ? C8(
        d2,
        I,
        "linePrefix",
        r.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4
      )(B) : I(B);
    }
    function I(B) {
      return B === a ? (d2.enter("codeFencedFenceSequence"), H(B)) : L(B);
    }
    function H(B) {
      return B === a ? (_++, d2.consume(B), H) : _ >= u ? (d2.exit("codeFencedFenceSequence"), g8(B) ? C8(d2, q, "whitespace")(B) : q(B)) : L(B);
    }
    function q(B) {
      return B === null || Np(B) ? (d2.exit("codeFencedFence"), T(B)) : L(B);
    }
  }
}
function Kn(e2, t, n) {
  const r = this;
  return i;
  function i(u) {
    return u === null ? n(u) : (e2.enter("lineEnding"), e2.consume(u), e2.exit("lineEnding"), l);
  }
  function l(u) {
    return r.parser.lazy[r.now().line] ? n(u) : t(u);
  }
}
var Be = {
  name: "codeIndented",
  tokenize: er
};
var Zn = {
  tokenize: tr,
  partial: true
};
function er(e2, t, n) {
  const r = this;
  return i;
  function i(o) {
    return e2.enter("codeIndented"), C8(e2, l, "linePrefix", 4 + 1)(o);
  }
  function l(o) {
    const c = r.events[r.events.length - 1];
    return c && c[1].type === "linePrefix" && c[2].sliceSerialize(c[1], true).length >= 4 ? u(o) : n(o);
  }
  function u(o) {
    return o === null ? s(o) : Np(o) ? e2.attempt(Zn, u, s)(o) : (e2.enter("codeFlowValue"), a(o));
  }
  function a(o) {
    return o === null || Np(o) ? (e2.exit("codeFlowValue"), u(o)) : (e2.consume(o), a);
  }
  function s(o) {
    return e2.exit("codeIndented"), t(o);
  }
}
function tr(e2, t, n) {
  const r = this;
  return i;
  function i(u) {
    return r.parser.lazy[r.now().line] ? n(u) : Np(u) ? (e2.enter("lineEnding"), e2.consume(u), e2.exit("lineEnding"), i) : C8(e2, l, "linePrefix", 4 + 1)(u);
  }
  function l(u) {
    const a = r.events[r.events.length - 1];
    return a && a[1].type === "linePrefix" && a[2].sliceSerialize(a[1], true).length >= 4 ? t(u) : Np(u) ? i(u) : n(u);
  }
}
var nr = {
  name: "codeText",
  tokenize: lr,
  resolve: rr,
  previous: ir
};
function rr(e2) {
  let t = e2.length - 4, n = 3, r, i;
  if ((e2[n][1].type === "lineEnding" || e2[n][1].type === "space") && (e2[t][1].type === "lineEnding" || e2[t][1].type === "space")) {
    for (r = n; ++r < t; )
      if (e2[r][1].type === "codeTextData") {
        e2[n][1].type = "codeTextPadding", e2[t][1].type = "codeTextPadding", n += 2, t -= 2;
        break;
      }
  }
  for (r = n - 1, t++; ++r <= t; )
    i === void 0 ? r !== t && e2[r][1].type !== "lineEnding" && (i = r) : (r === t || e2[r][1].type === "lineEnding") && (e2[i][1].type = "codeTextData", r !== i + 2 && (e2[i][1].end = e2[r - 1][1].end, e2.splice(i + 2, r - i - 2), t -= r - i - 2, r = i + 2), i = void 0);
  return e2;
}
function ir(e2) {
  return e2 !== 96 || this.events[this.events.length - 1][1].type === "characterEscape";
}
function lr(e2, t, n) {
  let r = 0, i, l;
  return u;
  function u(m) {
    return e2.enter("codeText"), e2.enter("codeTextSequence"), a(m);
  }
  function a(m) {
    return m === 96 ? (e2.consume(m), r++, a) : (e2.exit("codeTextSequence"), s(m));
  }
  function s(m) {
    return m === null ? n(m) : m === 32 ? (e2.enter("space"), e2.consume(m), e2.exit("space"), s) : m === 96 ? (l = e2.enter("codeTextSequence"), i = 0, c(m)) : Np(m) ? (e2.enter("lineEnding"), e2.consume(m), e2.exit("lineEnding"), s) : (e2.enter("codeTextData"), o(m));
  }
  function o(m) {
    return m === null || m === 32 || m === 96 || Np(m) ? (e2.exit("codeTextData"), s(m)) : (e2.consume(m), o);
  }
  function c(m) {
    return m === 96 ? (e2.consume(m), i++, c) : i === r ? (e2.exit("codeTextSequence"), e2.exit("codeText"), t(m)) : (l.type = "codeTextData", o(m));
  }
}
function Jt(e2) {
  const t = {};
  let n = -1, r, i, l, u, a, s, o;
  for (; ++n < e2.length; ) {
    for (; n in t; )
      n = t[n];
    if (r = e2[n], n && r[1].type === "chunkFlow" && e2[n - 1][1].type === "listItemPrefix" && (s = r[1]._tokenizer.events, l = 0, l < s.length && s[l][1].type === "lineEndingBlank" && (l += 2), l < s.length && s[l][1].type === "content"))
      for (; ++l < s.length && s[l][1].type !== "content"; )
        s[l][1].type === "chunkText" && (s[l][1]._isInFirstContentOfListItem = true, l++);
    if (r[0] === "enter")
      r[1].contentType && (Object.assign(t, ur(e2, n)), n = t[n], o = true);
    else if (r[1]._container) {
      for (l = n, i = void 0; l-- && (u = e2[l], u[1].type === "lineEnding" || u[1].type === "lineEndingBlank"); )
        u[0] === "enter" && (i && (e2[i][1].type = "lineEndingBlank"), u[1].type = "lineEnding", i = l);
      i && (r[1].end = Object.assign({}, e2[i][1].start), a = e2.slice(i, n), a.unshift(r), gE(e2, i, n - i + 1, a));
    }
  }
  return !o;
}
function ur(e2, t) {
  const n = e2[t][1], r = e2[t][2];
  let i = t - 1;
  const l = [], u = n._tokenizer || r.parser[n.contentType](n.start), a = u.events, s = [], o = {};
  let c, m, g = -1, h = n, b = 0, x = 0;
  const S = [x];
  for (; h; ) {
    for (; e2[++i][1] !== h; )
      ;
    l.push(i), h._tokenizer || (c = r.sliceStream(h), h.next || c.push(null), m && u.defineSkip(h.start), h._isInFirstContentOfListItem && (u._gfmTasklistFirstContentOfListItem = true), u.write(c), h._isInFirstContentOfListItem && (u._gfmTasklistFirstContentOfListItem = void 0)), m = h, h = h.next;
  }
  for (h = n; ++g < a.length; )
    a[g][0] === "exit" && a[g - 1][0] === "enter" && a[g][1].type === a[g - 1][1].type && a[g][1].start.line !== a[g][1].end.line && (x = g + 1, S.push(x), h._tokenizer = void 0, h.previous = void 0, h = h.next);
  for (u.events = [], h ? (h._tokenizer = void 0, h.previous = void 0) : S.pop(), g = S.length; g--; ) {
    const k = a.slice(S[g], S[g + 1]), P = l.pop();
    s.unshift([P, P + k.length - 1]), gE(e2, P, 2, k);
  }
  for (g = -1; ++g < s.length; )
    o[b + s[g][0]] = b + s[g][1], b += s[g][1] - s[g][0] - 1;
  return o;
}
var ar = {
  tokenize: cr,
  resolve: sr
};
var or = {
  tokenize: pr,
  partial: true
};
function sr(e2) {
  return Jt(e2), e2;
}
function cr(e2, t) {
  let n;
  return r;
  function r(a) {
    return e2.enter("content"), n = e2.enter("chunkContent", {
      contentType: "content"
    }), i(a);
  }
  function i(a) {
    return a === null ? l(a) : Np(a) ? e2.check(
      or,
      u,
      l
    )(a) : (e2.consume(a), i);
  }
  function l(a) {
    return e2.exit("chunkContent"), e2.exit("content"), t(a);
  }
  function u(a) {
    return e2.consume(a), e2.exit("chunkContent"), n.next = e2.enter("chunkContent", {
      contentType: "content",
      previous: n
    }), n = n.next, i;
  }
}
function pr(e2, t, n) {
  const r = this;
  return i;
  function i(u) {
    return e2.exit("chunkContent"), e2.enter("lineEnding"), e2.consume(u), e2.exit("lineEnding"), C8(e2, l, "linePrefix");
  }
  function l(u) {
    if (u === null || Np(u))
      return n(u);
    const a = r.events[r.events.length - 1];
    return !r.parser.constructs.disable.null.includes("codeIndented") && a && a[1].type === "linePrefix" && a[2].sliceSerialize(a[1], true).length >= 4 ? t(u) : e2.interrupt(r.parser.constructs.flow, n, t)(u);
  }
}
function Kt(e2, t, n, r, i, l, u, a, s) {
  const o = s || Number.POSITIVE_INFINITY;
  let c = 0;
  return m;
  function m(k) {
    return k === 60 ? (e2.enter(r), e2.enter(i), e2.enter(l), e2.consume(k), e2.exit(l), g) : k === null || k === 32 || k === 41 || XA2(k) ? n(k) : (e2.enter(r), e2.enter(u), e2.enter(a), e2.enter("chunkString", {
      contentType: "string"
    }), x(k));
  }
  function g(k) {
    return k === 62 ? (e2.enter(l), e2.consume(k), e2.exit(l), e2.exit(i), e2.exit(r), t) : (e2.enter(a), e2.enter("chunkString", {
      contentType: "string"
    }), h(k));
  }
  function h(k) {
    return k === 62 ? (e2.exit("chunkString"), e2.exit(a), g(k)) : k === null || k === 60 || Np(k) ? n(k) : (e2.consume(k), k === 92 ? b : h);
  }
  function b(k) {
    return k === 60 || k === 62 || k === 92 ? (e2.consume(k), h) : h(k);
  }
  function x(k) {
    return !c && (k === null || k === 41 || w0(k)) ? (e2.exit("chunkString"), e2.exit(a), e2.exit(u), e2.exit(r), t(k)) : c < o && k === 40 ? (e2.consume(k), c++, x) : k === 41 ? (e2.consume(k), c--, x) : k === null || k === 32 || k === 40 || XA2(k) ? n(k) : (e2.consume(k), k === 92 ? S : x);
  }
  function S(k) {
    return k === 40 || k === 41 || k === 92 ? (e2.consume(k), x) : x(k);
  }
}
function Zt(e2, t, n, r, i, l) {
  const u = this;
  let a = 0, s;
  return o;
  function o(h) {
    return e2.enter(r), e2.enter(i), e2.consume(h), e2.exit(i), e2.enter(l), c;
  }
  function c(h) {
    return a > 999 || h === null || h === 91 || h === 93 && !s || // To do: remove in the future once weâve switched from
    // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,
    // which doesnât need this.
    // Hidden footnotes hook.
    /* c8 ignore next 3 */
    h === 94 && !a && "_hiddenFootnoteSupport" in u.parser.constructs ? n(h) : h === 93 ? (e2.exit(l), e2.enter(i), e2.consume(h), e2.exit(i), e2.exit(r), t) : Np(h) ? (e2.enter("lineEnding"), e2.consume(h), e2.exit("lineEnding"), c) : (e2.enter("chunkString", {
      contentType: "string"
    }), m(h));
  }
  function m(h) {
    return h === null || h === 91 || h === 93 || Np(h) || a++ > 999 ? (e2.exit("chunkString"), c(h)) : (e2.consume(h), s || (s = !g8(h)), h === 92 ? g : m);
  }
  function g(h) {
    return h === 91 || h === 92 || h === 93 ? (e2.consume(h), a++, m) : m(h);
  }
}
function en(e2, t, n, r, i, l) {
  let u;
  return a;
  function a(g) {
    return g === 34 || g === 39 || g === 40 ? (e2.enter(r), e2.enter(i), e2.consume(g), e2.exit(i), u = g === 40 ? 41 : g, s) : n(g);
  }
  function s(g) {
    return g === u ? (e2.enter(i), e2.consume(g), e2.exit(i), e2.exit(r), t) : (e2.enter(l), o(g));
  }
  function o(g) {
    return g === u ? (e2.exit(l), s(u)) : g === null ? n(g) : Np(g) ? (e2.enter("lineEnding"), e2.consume(g), e2.exit("lineEnding"), C8(e2, o, "linePrefix")) : (e2.enter("chunkString", {
      contentType: "string"
    }), c(g));
  }
  function c(g) {
    return g === u || g === null || Np(g) ? (e2.exit("chunkString"), o(g)) : (e2.consume(g), g === 92 ? m : c);
  }
  function m(g) {
    return g === u || g === 92 ? (e2.consume(g), c) : c(g);
  }
}
function Se(e2, t) {
  let n;
  return r;
  function r(i) {
    return Np(i) ? (e2.enter("lineEnding"), e2.consume(i), e2.exit("lineEnding"), n = true, r) : g8(i) ? C8(
      e2,
      r,
      n ? "linePrefix" : "lineSuffix"
    )(i) : t(i);
  }
}
var fr = {
  name: "definition",
  tokenize: mr
};
var hr = {
  tokenize: gr,
  partial: true
};
function mr(e2, t, n) {
  const r = this;
  let i;
  return l;
  function l(h) {
    return e2.enter("definition"), u(h);
  }
  function u(h) {
    return Zt.call(
      r,
      e2,
      a,
      // Note: we donât need to reset the way `markdown-rs` does.
      n,
      "definitionLabel",
      "definitionLabelMarker",
      "definitionLabelString"
    )(h);
  }
  function a(h) {
    return i = oS(
      r.sliceSerialize(r.events[r.events.length - 1][1]).slice(1, -1)
    ), h === 58 ? (e2.enter("definitionMarker"), e2.consume(h), e2.exit("definitionMarker"), s) : n(h);
  }
  function s(h) {
    return w0(h) ? Se(e2, o)(h) : o(h);
  }
  function o(h) {
    return Kt(
      e2,
      c,
      // Note: we donât need to reset the way `markdown-rs` does.
      n,
      "definitionDestination",
      "definitionDestinationLiteral",
      "definitionDestinationLiteralMarker",
      "definitionDestinationRaw",
      "definitionDestinationString"
    )(h);
  }
  function c(h) {
    return e2.attempt(hr, m, m)(h);
  }
  function m(h) {
    return g8(h) ? C8(e2, g, "whitespace")(h) : g(h);
  }
  function g(h) {
    return h === null || Np(h) ? (e2.exit("definition"), r.parser.defined.push(i), t(h)) : n(h);
  }
}
function gr(e2, t, n) {
  return r;
  function r(a) {
    return w0(a) ? Se(e2, i)(a) : n(a);
  }
  function i(a) {
    return en(
      e2,
      l,
      n,
      "definitionTitle",
      "definitionTitleMarker",
      "definitionTitleString"
    )(a);
  }
  function l(a) {
    return g8(a) ? C8(e2, u, "whitespace")(a) : u(a);
  }
  function u(a) {
    return a === null || Np(a) ? t(a) : n(a);
  }
}
var dr = {
  name: "hardBreakEscape",
  tokenize: yr
};
function yr(e2, t, n) {
  return r;
  function r(l) {
    return e2.enter("hardBreakEscape"), e2.consume(l), i;
  }
  function i(l) {
    return Np(l) ? (e2.exit("hardBreakEscape"), t(l)) : n(l);
  }
}
var xr = {
  name: "headingAtx",
  tokenize: wr,
  resolve: kr
};
function kr(e2, t) {
  let n = e2.length - 2, r = 3, i, l;
  return e2[r][1].type === "whitespace" && (r += 2), n - 2 > r && e2[n][1].type === "whitespace" && (n -= 2), e2[n][1].type === "atxHeadingSequence" && (r === n - 1 || n - 4 > r && e2[n - 2][1].type === "whitespace") && (n -= r + 1 === n ? 2 : 4), n > r && (i = {
    type: "atxHeadingText",
    start: e2[r][1].start,
    end: e2[n][1].end
  }, l = {
    type: "chunkText",
    start: e2[r][1].start,
    end: e2[n][1].end,
    contentType: "text"
  }, gE(e2, r, n - r + 1, [
    ["enter", i, t],
    ["enter", l, t],
    ["exit", l, t],
    ["exit", i, t]
  ])), e2;
}
function wr(e2, t, n) {
  let r = 0;
  return i;
  function i(c) {
    return e2.enter("atxHeading"), l(c);
  }
  function l(c) {
    return e2.enter("atxHeadingSequence"), u(c);
  }
  function u(c) {
    return c === 35 && r++ < 6 ? (e2.consume(c), u) : c === null || w0(c) ? (e2.exit("atxHeadingSequence"), a(c)) : n(c);
  }
  function a(c) {
    return c === 35 ? (e2.enter("atxHeadingSequence"), s(c)) : c === null || Np(c) ? (e2.exit("atxHeading"), t(c)) : g8(c) ? C8(e2, a, "whitespace")(c) : (e2.enter("atxHeadingText"), o(c));
  }
  function s(c) {
    return c === 35 ? (e2.consume(c), s) : (e2.exit("atxHeadingSequence"), a(c));
  }
  function o(c) {
    return c === null || c === 35 || w0(c) ? (e2.exit("atxHeadingText"), a(c)) : (e2.consume(c), o);
  }
}
var br = [
  "address",
  "article",
  "aside",
  "base",
  "basefont",
  "blockquote",
  "body",
  "caption",
  "center",
  "col",
  "colgroup",
  "dd",
  "details",
  "dialog",
  "dir",
  "div",
  "dl",
  "dt",
  "fieldset",
  "figcaption",
  "figure",
  "footer",
  "form",
  "frame",
  "frameset",
  "h1",
  "h2",
  "h3",
  "h4",
  "h5",
  "h6",
  "head",
  "header",
  "hr",
  "html",
  "iframe",
  "legend",
  "li",
  "link",
  "main",
  "menu",
  "menuitem",
  "nav",
  "noframes",
  "ol",
  "optgroup",
  "option",
  "p",
  "param",
  "search",
  "section",
  "summary",
  "table",
  "tbody",
  "td",
  "tfoot",
  "th",
  "thead",
  "title",
  "tr",
  "track",
  "ul"
];
var mt = ["pre", "script", "style", "textarea"];
var Sr = {
  name: "htmlFlow",
  tokenize: Tr,
  resolveTo: Ir,
  concrete: true
};
var Er = {
  tokenize: zr,
  partial: true
};
var Cr = {
  tokenize: Ar,
  partial: true
};
function Ir(e2) {
  let t = e2.length;
  for (; t-- && !(e2[t][0] === "enter" && e2[t][1].type === "htmlFlow"); )
    ;
  return t > 1 && e2[t - 2][1].type === "linePrefix" && (e2[t][1].start = e2[t - 2][1].start, e2[t + 1][1].start = e2[t - 2][1].start, e2.splice(t - 2, 2)), e2;
}
function Tr(e2, t, n) {
  const r = this;
  let i, l, u, a, s;
  return o;
  function o(f) {
    return c(f);
  }
  function c(f) {
    return e2.enter("htmlFlow"), e2.enter("htmlFlowData"), e2.consume(f), m;
  }
  function m(f) {
    return f === 33 ? (e2.consume(f), g) : f === 47 ? (e2.consume(f), l = true, x) : f === 63 ? (e2.consume(f), i = 3, r.interrupt ? t : p) : xw(f) ? (e2.consume(f), u = String.fromCharCode(f), S) : n(f);
  }
  function g(f) {
    return f === 45 ? (e2.consume(f), i = 2, h) : f === 91 ? (e2.consume(f), i = 5, a = 0, b) : xw(f) ? (e2.consume(f), i = 4, r.interrupt ? t : p) : n(f);
  }
  function h(f) {
    return f === 45 ? (e2.consume(f), r.interrupt ? t : p) : n(f);
  }
  function b(f) {
    const ee = "CDATA[";
    return f === ee.charCodeAt(a++) ? (e2.consume(f), a === ee.length ? r.interrupt ? t : I : b) : n(f);
  }
  function x(f) {
    return xw(f) ? (e2.consume(f), u = String.fromCharCode(f), S) : n(f);
  }
  function S(f) {
    if (f === null || f === 47 || f === 62 || w0(f)) {
      const ee = f === 47, he = u.toLowerCase();
      return !ee && !l && mt.includes(he) ? (i = 1, r.interrupt ? t(f) : I(f)) : br.includes(u.toLowerCase()) ? (i = 6, ee ? (e2.consume(f), k) : r.interrupt ? t(f) : I(f)) : (i = 7, r.interrupt && !r.parser.lazy[r.now().line] ? n(f) : l ? P(f) : E(f));
    }
    return f === 45 || r1e(f) ? (e2.consume(f), u += String.fromCharCode(f), S) : n(f);
  }
  function k(f) {
    return f === 62 ? (e2.consume(f), r.interrupt ? t : I) : n(f);
  }
  function P(f) {
    return g8(f) ? (e2.consume(f), P) : v(f);
  }
  function E(f) {
    return f === 47 ? (e2.consume(f), v) : f === 58 || f === 95 || xw(f) ? (e2.consume(f), F) : g8(f) ? (e2.consume(f), E) : v(f);
  }
  function F(f) {
    return f === 45 || f === 46 || f === 58 || f === 95 || r1e(f) ? (e2.consume(f), F) : N(f);
  }
  function N(f) {
    return f === 61 ? (e2.consume(f), d2) : g8(f) ? (e2.consume(f), N) : E(f);
  }
  function d2(f) {
    return f === null || f === 60 || f === 61 || f === 62 || f === 96 ? n(f) : f === 34 || f === 39 ? (e2.consume(f), s = f, T) : g8(f) ? (e2.consume(f), d2) : L(f);
  }
  function T(f) {
    return f === s ? (e2.consume(f), s = null, _) : f === null || Np(f) ? n(f) : (e2.consume(f), T);
  }
  function L(f) {
    return f === null || f === 34 || f === 39 || f === 47 || f === 60 || f === 61 || f === 62 || f === 96 || w0(f) ? N(f) : (e2.consume(f), L);
  }
  function _(f) {
    return f === 47 || f === 62 || g8(f) ? E(f) : n(f);
  }
  function v(f) {
    return f === 62 ? (e2.consume(f), C) : n(f);
  }
  function C(f) {
    return f === null || Np(f) ? I(f) : g8(f) ? (e2.consume(f), C) : n(f);
  }
  function I(f) {
    return f === 45 && i === 2 ? (e2.consume(f), Q) : f === 60 && i === 1 ? (e2.consume(f), $) : f === 62 && i === 4 ? (e2.consume(f), Z) : f === 63 && i === 3 ? (e2.consume(f), p) : f === 93 && i === 5 ? (e2.consume(f), ie) : Np(f) && (i === 6 || i === 7) ? (e2.exit("htmlFlowData"), e2.check(
      Er,
      le,
      H
    )(f)) : f === null || Np(f) ? (e2.exit("htmlFlowData"), H(f)) : (e2.consume(f), I);
  }
  function H(f) {
    return e2.check(
      Cr,
      q,
      le
    )(f);
  }
  function q(f) {
    return e2.enter("lineEnding"), e2.consume(f), e2.exit("lineEnding"), B;
  }
  function B(f) {
    return f === null || Np(f) ? H(f) : (e2.enter("htmlFlowData"), I(f));
  }
  function Q(f) {
    return f === 45 ? (e2.consume(f), p) : I(f);
  }
  function $(f) {
    return f === 47 ? (e2.consume(f), u = "", K) : I(f);
  }
  function K(f) {
    if (f === 62) {
      const ee = u.toLowerCase();
      return mt.includes(ee) ? (e2.consume(f), Z) : I(f);
    }
    return xw(f) && u.length < 8 ? (e2.consume(f), u += String.fromCharCode(f), K) : I(f);
  }
  function ie(f) {
    return f === 93 ? (e2.consume(f), p) : I(f);
  }
  function p(f) {
    return f === 62 ? (e2.consume(f), Z) : f === 45 && i === 2 ? (e2.consume(f), p) : I(f);
  }
  function Z(f) {
    return f === null || Np(f) ? (e2.exit("htmlFlowData"), le(f)) : (e2.consume(f), Z);
  }
  function le(f) {
    return e2.exit("htmlFlow"), t(f);
  }
}
function Ar(e2, t, n) {
  const r = this;
  return i;
  function i(u) {
    return Np(u) ? (e2.enter("lineEnding"), e2.consume(u), e2.exit("lineEnding"), l) : n(u);
  }
  function l(u) {
    return r.parser.lazy[r.now().line] ? n(u) : t(u);
  }
}
function zr(e2, t, n) {
  return r;
  function r(i) {
    return e2.enter("lineEnding"), e2.consume(i), e2.exit("lineEnding"), e2.attempt(dD2, t, n);
  }
}
var Or = {
  name: "htmlText",
  tokenize: Pr
};
function Pr(e2, t, n) {
  const r = this;
  let i, l, u;
  return a;
  function a(p) {
    return e2.enter("htmlText"), e2.enter("htmlTextData"), e2.consume(p), s;
  }
  function s(p) {
    return p === 33 ? (e2.consume(p), o) : p === 47 ? (e2.consume(p), N) : p === 63 ? (e2.consume(p), E) : xw(p) ? (e2.consume(p), L) : n(p);
  }
  function o(p) {
    return p === 45 ? (e2.consume(p), c) : p === 91 ? (e2.consume(p), l = 0, b) : xw(p) ? (e2.consume(p), P) : n(p);
  }
  function c(p) {
    return p === 45 ? (e2.consume(p), h) : n(p);
  }
  function m(p) {
    return p === null ? n(p) : p === 45 ? (e2.consume(p), g) : Np(p) ? (u = m, $(p)) : (e2.consume(p), m);
  }
  function g(p) {
    return p === 45 ? (e2.consume(p), h) : m(p);
  }
  function h(p) {
    return p === 62 ? Q(p) : p === 45 ? g(p) : m(p);
  }
  function b(p) {
    const Z = "CDATA[";
    return p === Z.charCodeAt(l++) ? (e2.consume(p), l === Z.length ? x : b) : n(p);
  }
  function x(p) {
    return p === null ? n(p) : p === 93 ? (e2.consume(p), S) : Np(p) ? (u = x, $(p)) : (e2.consume(p), x);
  }
  function S(p) {
    return p === 93 ? (e2.consume(p), k) : x(p);
  }
  function k(p) {
    return p === 62 ? Q(p) : p === 93 ? (e2.consume(p), k) : x(p);
  }
  function P(p) {
    return p === null || p === 62 ? Q(p) : Np(p) ? (u = P, $(p)) : (e2.consume(p), P);
  }
  function E(p) {
    return p === null ? n(p) : p === 63 ? (e2.consume(p), F) : Np(p) ? (u = E, $(p)) : (e2.consume(p), E);
  }
  function F(p) {
    return p === 62 ? Q(p) : E(p);
  }
  function N(p) {
    return xw(p) ? (e2.consume(p), d2) : n(p);
  }
  function d2(p) {
    return p === 45 || r1e(p) ? (e2.consume(p), d2) : T(p);
  }
  function T(p) {
    return Np(p) ? (u = T, $(p)) : g8(p) ? (e2.consume(p), T) : Q(p);
  }
  function L(p) {
    return p === 45 || r1e(p) ? (e2.consume(p), L) : p === 47 || p === 62 || w0(p) ? _(p) : n(p);
  }
  function _(p) {
    return p === 47 ? (e2.consume(p), Q) : p === 58 || p === 95 || xw(p) ? (e2.consume(p), v) : Np(p) ? (u = _, $(p)) : g8(p) ? (e2.consume(p), _) : Q(p);
  }
  function v(p) {
    return p === 45 || p === 46 || p === 58 || p === 95 || r1e(p) ? (e2.consume(p), v) : C(p);
  }
  function C(p) {
    return p === 61 ? (e2.consume(p), I) : Np(p) ? (u = C, $(p)) : g8(p) ? (e2.consume(p), C) : _(p);
  }
  function I(p) {
    return p === null || p === 60 || p === 61 || p === 62 || p === 96 ? n(p) : p === 34 || p === 39 ? (e2.consume(p), i = p, H) : Np(p) ? (u = I, $(p)) : g8(p) ? (e2.consume(p), I) : (e2.consume(p), q);
  }
  function H(p) {
    return p === i ? (e2.consume(p), i = void 0, B) : p === null ? n(p) : Np(p) ? (u = H, $(p)) : (e2.consume(p), H);
  }
  function q(p) {
    return p === null || p === 34 || p === 39 || p === 60 || p === 61 || p === 96 ? n(p) : p === 47 || p === 62 || w0(p) ? _(p) : (e2.consume(p), q);
  }
  function B(p) {
    return p === 47 || p === 62 || w0(p) ? _(p) : n(p);
  }
  function Q(p) {
    return p === 62 ? (e2.consume(p), e2.exit("htmlTextData"), e2.exit("htmlText"), t) : n(p);
  }
  function $(p) {
    return e2.exit("htmlTextData"), e2.enter("lineEnding"), e2.consume(p), e2.exit("lineEnding"), K;
  }
  function K(p) {
    return g8(p) ? C8(
      e2,
      ie,
      "linePrefix",
      r.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4
    )(p) : ie(p);
  }
  function ie(p) {
    return e2.enter("htmlTextData"), u(p);
  }
}
var Ze = {
  name: "labelEnd",
  tokenize: Dr,
  resolveTo: _r,
  resolveAll: Br
};
var Lr = {
  tokenize: Rr
};
var Fr = {
  tokenize: jr
};
var Nr = {
  tokenize: Mr
};
function Br(e2) {
  let t = -1;
  for (; ++t < e2.length; ) {
    const n = e2[t][1];
    (n.type === "labelImage" || n.type === "labelLink" || n.type === "labelEnd") && (e2.splice(t + 1, n.type === "labelImage" ? 4 : 2), n.type = "data", t++);
  }
  return e2;
}
function _r(e2, t) {
  let n = e2.length, r = 0, i, l, u, a;
  for (; n--; )
    if (i = e2[n][1], l) {
      if (i.type === "link" || i.type === "labelLink" && i._inactive)
        break;
      e2[n][0] === "enter" && i.type === "labelLink" && (i._inactive = true);
    } else if (u) {
      if (e2[n][0] === "enter" && (i.type === "labelImage" || i.type === "labelLink") && !i._balanced && (l = n, i.type !== "labelLink")) {
        r = 2;
        break;
      }
    } else
      i.type === "labelEnd" && (u = n);
  const s = {
    type: e2[l][1].type === "labelLink" ? "link" : "image",
    start: Object.assign({}, e2[l][1].start),
    end: Object.assign({}, e2[e2.length - 1][1].end)
  }, o = {
    type: "label",
    start: Object.assign({}, e2[l][1].start),
    end: Object.assign({}, e2[u][1].end)
  }, c = {
    type: "labelText",
    start: Object.assign({}, e2[l + r + 2][1].end),
    end: Object.assign({}, e2[u - 2][1].start)
  };
  return a = [
    ["enter", s, t],
    ["enter", o, t]
  ], a = I0r(a, e2.slice(l + 1, l + r + 3)), a = I0r(a, [["enter", c, t]]), a = I0r(
    a,
    sD2(
      t.parser.constructs.insideSpan.null,
      e2.slice(l + r + 4, u - 3),
      t
    )
  ), a = I0r(a, [
    ["exit", c, t],
    e2[u - 2],
    e2[u - 1],
    ["exit", o, t]
  ]), a = I0r(a, e2.slice(u + 1)), a = I0r(a, [["exit", s, t]]), gE(e2, l, e2.length, a), e2;
}
function Dr(e2, t, n) {
  const r = this;
  let i = r.events.length, l, u;
  for (; i--; )
    if ((r.events[i][1].type === "labelImage" || r.events[i][1].type === "labelLink") && !r.events[i][1]._balanced) {
      l = r.events[i][1];
      break;
    }
  return a;
  function a(g) {
    return l ? l._inactive ? m(g) : (u = r.parser.defined.includes(
      oS(
        r.sliceSerialize({
          start: l.end,
          end: r.now()
        })
      )
    ), e2.enter("labelEnd"), e2.enter("labelMarker"), e2.consume(g), e2.exit("labelMarker"), e2.exit("labelEnd"), s) : n(g);
  }
  function s(g) {
    return g === 40 ? e2.attempt(
      Lr,
      c,
      u ? c : m
    )(g) : g === 91 ? e2.attempt(
      Fr,
      c,
      u ? o : m
    )(g) : u ? c(g) : m(g);
  }
  function o(g) {
    return e2.attempt(
      Nr,
      c,
      m
    )(g);
  }
  function c(g) {
    return t(g);
  }
  function m(g) {
    return l._balanced = true, n(g);
  }
}
function Rr(e2, t, n) {
  return r;
  function r(m) {
    return e2.enter("resource"), e2.enter("resourceMarker"), e2.consume(m), e2.exit("resourceMarker"), i;
  }
  function i(m) {
    return w0(m) ? Se(e2, l)(m) : l(m);
  }
  function l(m) {
    return m === 41 ? c(m) : Kt(
      e2,
      u,
      a,
      "resourceDestination",
      "resourceDestinationLiteral",
      "resourceDestinationLiteralMarker",
      "resourceDestinationRaw",
      "resourceDestinationString",
      32
    )(m);
  }
  function u(m) {
    return w0(m) ? Se(e2, s)(m) : c(m);
  }
  function a(m) {
    return n(m);
  }
  function s(m) {
    return m === 34 || m === 39 || m === 40 ? en(
      e2,
      o,
      n,
      "resourceTitle",
      "resourceTitleMarker",
      "resourceTitleString"
    )(m) : c(m);
  }
  function o(m) {
    return w0(m) ? Se(e2, c)(m) : c(m);
  }
  function c(m) {
    return m === 41 ? (e2.enter("resourceMarker"), e2.consume(m), e2.exit("resourceMarker"), e2.exit("resource"), t) : n(m);
  }
}
function jr(e2, t, n) {
  const r = this;
  return i;
  function i(a) {
    return Zt.call(
      r,
      e2,
      l,
      u,
      "reference",
      "referenceMarker",
      "referenceString"
    )(a);
  }
  function l(a) {
    return r.parser.defined.includes(
      oS(
        r.sliceSerialize(r.events[r.events.length - 1][1]).slice(1, -1)
      )
    ) ? t(a) : n(a);
  }
  function u(a) {
    return n(a);
  }
}
function Mr(e2, t, n) {
  return r;
  function r(l) {
    return e2.enter("reference"), e2.enter("referenceMarker"), e2.consume(l), e2.exit("referenceMarker"), i;
  }
  function i(l) {
    return l === 93 ? (e2.enter("referenceMarker"), e2.consume(l), e2.exit("referenceMarker"), e2.exit("reference"), t) : n(l);
  }
}
var Hr = {
  name: "labelStartImage",
  tokenize: qr,
  resolveAll: Ze.resolveAll
};
function qr(e2, t, n) {
  const r = this;
  return i;
  function i(a) {
    return e2.enter("labelImage"), e2.enter("labelImageMarker"), e2.consume(a), e2.exit("labelImageMarker"), l;
  }
  function l(a) {
    return a === 91 ? (e2.enter("labelMarker"), e2.consume(a), e2.exit("labelMarker"), e2.exit("labelImage"), u) : n(a);
  }
  function u(a) {
    return a === 94 && "_hiddenFootnoteSupport" in r.parser.constructs ? n(a) : t(a);
  }
}
var Vr = {
  name: "labelStartLink",
  tokenize: vr,
  resolveAll: Ze.resolveAll
};
function vr(e2, t, n) {
  const r = this;
  return i;
  function i(u) {
    return e2.enter("labelLink"), e2.enter("labelMarker"), e2.consume(u), e2.exit("labelMarker"), e2.exit("labelLink"), l;
  }
  function l(u) {
    return u === 94 && "_hiddenFootnoteSupport" in r.parser.constructs ? n(u) : t(u);
  }
}
var _e = {
  name: "lineEnding",
  tokenize: $r
};
function $r(e2, t) {
  return n;
  function n(r) {
    return e2.enter("lineEnding"), e2.consume(r), e2.exit("lineEnding"), C8(e2, t, "linePrefix");
  }
}
var Ae = {
  name: "thematicBreak",
  tokenize: Ur
};
function Ur(e2, t, n) {
  let r = 0, i;
  return l;
  function l(o) {
    return e2.enter("thematicBreak"), u(o);
  }
  function u(o) {
    return i = o, a(o);
  }
  function a(o) {
    return o === i ? (e2.enter("thematicBreakSequence"), s(o)) : r >= 3 && (o === null || Np(o)) ? (e2.exit("thematicBreak"), t(o)) : n(o);
  }
  function s(o) {
    return o === i ? (e2.consume(o), r++, s) : (e2.exit("thematicBreakSequence"), g8(o) ? C8(e2, a, "whitespace")(o) : a(o));
  }
}
var W = {
  name: "list",
  tokenize: Gr,
  continuation: {
    tokenize: Xr
  },
  exit: Jr
};
var Qr = {
  tokenize: Kr,
  partial: true
};
var Wr = {
  tokenize: Yr,
  partial: true
};
function Gr(e2, t, n) {
  const r = this, i = r.events[r.events.length - 1];
  let l = i && i[1].type === "linePrefix" ? i[2].sliceSerialize(i[1], true).length : 0, u = 0;
  return a;
  function a(h) {
    const b = r.containerState.type || (h === 42 || h === 43 || h === 45 ? "listUnordered" : "listOrdered");
    if (b === "listUnordered" ? !r.containerState.marker || h === r.containerState.marker : A0r(h)) {
      if (r.containerState.type || (r.containerState.type = b, e2.enter(b, {
        _container: true
      })), b === "listUnordered")
        return e2.enter("listItemPrefix"), h === 42 || h === 45 ? e2.check(Ae, n, o)(h) : o(h);
      if (!r.interrupt || h === 49)
        return e2.enter("listItemPrefix"), e2.enter("listItemValue"), s(h);
    }
    return n(h);
  }
  function s(h) {
    return A0r(h) && ++u < 10 ? (e2.consume(h), s) : (!r.interrupt || u < 2) && (r.containerState.marker ? h === r.containerState.marker : h === 41 || h === 46) ? (e2.exit("listItemValue"), o(h)) : n(h);
  }
  function o(h) {
    return e2.enter("listItemMarker"), e2.consume(h), e2.exit("listItemMarker"), r.containerState.marker = r.containerState.marker || h, e2.check(
      dD2,
      // Canât be empty when interrupting.
      r.interrupt ? n : c,
      e2.attempt(
        Qr,
        g,
        m
      )
    );
  }
  function c(h) {
    return r.containerState.initialBlankLine = true, l++, g(h);
  }
  function m(h) {
    return g8(h) ? (e2.enter("listItemPrefixWhitespace"), e2.consume(h), e2.exit("listItemPrefixWhitespace"), g) : n(h);
  }
  function g(h) {
    return r.containerState.size = l + r.sliceSerialize(e2.exit("listItemPrefix"), true).length, t(h);
  }
}
function Xr(e2, t, n) {
  const r = this;
  return r.containerState._closeFlow = void 0, e2.check(dD2, i, l);
  function i(a) {
    return r.containerState.furtherBlankLines = r.containerState.furtherBlankLines || r.containerState.initialBlankLine, C8(
      e2,
      t,
      "listItemIndent",
      r.containerState.size + 1
    )(a);
  }
  function l(a) {
    return r.containerState.furtherBlankLines || !g8(a) ? (r.containerState.furtherBlankLines = void 0, r.containerState.initialBlankLine = void 0, u(a)) : (r.containerState.furtherBlankLines = void 0, r.containerState.initialBlankLine = void 0, e2.attempt(Wr, t, u)(a));
  }
  function u(a) {
    return r.containerState._closeFlow = true, r.interrupt = void 0, C8(
      e2,
      e2.attempt(W, t, n),
      "linePrefix",
      r.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4
    )(a);
  }
}
function Yr(e2, t, n) {
  const r = this;
  return C8(
    e2,
    i,
    "listItemIndent",
    r.containerState.size + 1
  );
  function i(l) {
    const u = r.events[r.events.length - 1];
    return u && u[1].type === "listItemIndent" && u[2].sliceSerialize(u[1], true).length === r.containerState.size ? t(l) : n(l);
  }
}
function Jr(e2) {
  e2.exit(this.containerState.type);
}
function Kr(e2, t, n) {
  const r = this;
  return C8(
    e2,
    i,
    "listItemPrefixWhitespace",
    r.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4 + 1
  );
  function i(l) {
    const u = r.events[r.events.length - 1];
    return !g8(l) && u && u[1].type === "listItemPrefixWhitespace" ? t(l) : n(l);
  }
}
var gt = {
  name: "setextUnderline",
  tokenize: ei,
  resolveTo: Zr
};
function Zr(e2, t) {
  let n = e2.length, r, i, l;
  for (; n--; )
    if (e2[n][0] === "enter") {
      if (e2[n][1].type === "content") {
        r = n;
        break;
      }
      e2[n][1].type === "paragraph" && (i = n);
    } else
      e2[n][1].type === "content" && e2.splice(n, 1), !l && e2[n][1].type === "definition" && (l = n);
  const u = {
    type: "setextHeading",
    start: Object.assign({}, e2[i][1].start),
    end: Object.assign({}, e2[e2.length - 1][1].end)
  };
  return e2[i][1].type = "setextHeadingText", l ? (e2.splice(i, 0, ["enter", u, t]), e2.splice(l + 1, 0, ["exit", e2[r][1], t]), e2[r][1].end = Object.assign({}, e2[l][1].end)) : e2[r][1] = u, e2.push(["exit", u, t]), e2;
}
function ei(e2, t, n) {
  const r = this;
  let i;
  return l;
  function l(o) {
    let c = r.events.length, m;
    for (; c--; )
      if (r.events[c][1].type !== "lineEnding" && r.events[c][1].type !== "linePrefix" && r.events[c][1].type !== "content") {
        m = r.events[c][1].type === "paragraph";
        break;
      }
    return !r.parser.lazy[r.now().line] && (r.interrupt || m) ? (e2.enter("setextHeadingLine"), i = o, u(o)) : n(o);
  }
  function u(o) {
    return e2.enter("setextHeadingLineSequence"), a(o);
  }
  function a(o) {
    return o === i ? (e2.consume(o), a) : (e2.exit("setextHeadingLineSequence"), g8(o) ? C8(e2, s, "lineSuffix")(o) : s(o));
  }
  function s(o) {
    return o === null || Np(o) ? (e2.exit("setextHeadingLine"), t(o)) : n(o);
  }
}
var dt = ["http", "https", "mailto", "tel"];
function ti(e2) {
  const t = (e2 || "").trim(), n = t.charAt(0);
  if (n === "#" || n === "/")
    return t;
  const r = t.indexOf(":");
  if (r === -1)
    return t;
  let i = -1;
  for (; ++i < dt.length; ) {
    const l = dt[i];
    if (r === l.length && t.slice(0, l.length).toLowerCase() === l)
      return t;
  }
  return i = t.indexOf("?"), i !== -1 && r > i || (i = t.indexOf("#"), i !== -1 && r > i) ? t : "javascript:void(0)";
}
var ni = function(t) {
  return t != null && t.constructor != null && typeof t.constructor.isBuffer == "function" && t.constructor.isBuffer(t);
};
var tn = sn(ni);
function Ee(e2) {
  return !e2 || typeof e2 != "object" ? "" : "position" in e2 || "type" in e2 ? yt(e2.position) : "start" in e2 || "end" in e2 ? yt(e2) : "line" in e2 || "column" in e2 ? Qe(e2) : "";
}
function Qe(e2) {
  return xt(e2 && e2.line) + ":" + xt(e2 && e2.column);
}
function yt(e2) {
  return Qe(e2 && e2.start) + "-" + Qe(e2 && e2.end);
}
function xt(e2) {
  return e2 && typeof e2 == "number" ? e2 : 1;
}
var J = class extends Error {
  /**
   * Create a message for `reason` at `place` from `origin`.
   *
   * When an error is passed in as `reason`, the `stack` is copied.
   *
   * @param {string | Error | VFileMessage} reason
   *   Reason for message, uses the stack and message of the error if given.
   *
   *   > ð **Note**: you should use markdown.
   * @param {Node | NodeLike | Position | Point | null | undefined} [place]
   *   Place in file where the message occurred.
   * @param {string | null | undefined} [origin]
   *   Place in code where the message originates (example:
   *   `'my-package:my-rule'` or `'my-rule'`).
   * @returns
   *   Instance of `VFileMessage`.
   */
  // To do: next major: expose `undefined` everywhere instead of `null`.
  constructor(t, n, r) {
    const i = [null, null];
    let l = {
      // @ts-expect-error: we always follows the structure of `position`.
      start: { line: null, column: null },
      // @ts-expect-error: "
      end: { line: null, column: null }
    };
    if (super(), typeof n == "string" && (r = n, n = void 0), typeof r == "string") {
      const u = r.indexOf(":");
      u === -1 ? i[1] = r : (i[0] = r.slice(0, u), i[1] = r.slice(u + 1));
    }
    n && ("type" in n || "position" in n ? n.position && (l = n.position) : "start" in n || "end" in n ? l = n : ("line" in n || "column" in n) && (l.start = n)), this.name = Ee(n) || "1:1", this.message = typeof t == "object" ? t.message : t, this.stack = "", typeof t == "object" && t.stack && (this.stack = t.stack), this.reason = this.message, this.fatal, this.line = l.start.line, this.column = l.start.column, this.position = l, this.source = i[0], this.ruleId = i[1], this.file, this.actual, this.expected, this.url, this.note;
  }
};
J.prototype.file = "";
J.prototype.name = "";
J.prototype.reason = "";
J.prototype.message = "";
J.prototype.stack = "";
J.prototype.fatal = null;
J.prototype.column = null;
J.prototype.line = null;
J.prototype.source = null;
J.prototype.ruleId = null;
J.prototype.position = null;
var ne = { basename: ri, dirname: ii, extname: li, join: ui, sep: "/" };
function ri(e2, t) {
  if (t !== void 0 && typeof t != "string")
    throw new TypeError('"ext" argument must be a string');
  Ce(e2);
  let n = 0, r = -1, i = e2.length, l;
  if (t === void 0 || t.length === 0 || t.length > e2.length) {
    for (; i--; )
      if (e2.charCodeAt(i) === 47) {
        if (l) {
          n = i + 1;
          break;
        }
      } else
        r < 0 && (l = true, r = i + 1);
    return r < 0 ? "" : e2.slice(n, r);
  }
  if (t === e2)
    return "";
  let u = -1, a = t.length - 1;
  for (; i--; )
    if (e2.charCodeAt(i) === 47) {
      if (l) {
        n = i + 1;
        break;
      }
    } else
      u < 0 && (l = true, u = i + 1), a > -1 && (e2.charCodeAt(i) === t.charCodeAt(a--) ? a < 0 && (r = i) : (a = -1, r = u));
  return n === r ? r = u : r < 0 && (r = e2.length), e2.slice(n, r);
}
function ii(e2) {
  if (Ce(e2), e2.length === 0)
    return ".";
  let t = -1, n = e2.length, r;
  for (; --n; )
    if (e2.charCodeAt(n) === 47) {
      if (r) {
        t = n;
        break;
      }
    } else
      r || (r = true);
  return t < 0 ? e2.charCodeAt(0) === 47 ? "/" : "." : t === 1 && e2.charCodeAt(0) === 47 ? "//" : e2.slice(0, t);
}
function li(e2) {
  Ce(e2);
  let t = e2.length, n = -1, r = 0, i = -1, l = 0, u;
  for (; t--; ) {
    const a = e2.charCodeAt(t);
    if (a === 47) {
      if (u) {
        r = t + 1;
        break;
      }
      continue;
    }
    n < 0 && (u = true, n = t + 1), a === 46 ? i < 0 ? i = t : l !== 1 && (l = 1) : i > -1 && (l = -1);
  }
  return i < 0 || n < 0 || // We saw a non-dot character immediately before the dot.
  l === 0 || // The (right-most) trimmed path component is exactly `..`.
  l === 1 && i === n - 1 && i === r + 1 ? "" : e2.slice(i, n);
}
function ui(...e2) {
  let t = -1, n;
  for (; ++t < e2.length; )
    Ce(e2[t]), e2[t] && (n = n === void 0 ? e2[t] : n + "/" + e2[t]);
  return n === void 0 ? "." : ai(n);
}
function ai(e2) {
  Ce(e2);
  const t = e2.charCodeAt(0) === 47;
  let n = oi(e2, !t);
  return n.length === 0 && !t && (n = "."), n.length > 0 && e2.charCodeAt(e2.length - 1) === 47 && (n += "/"), t ? "/" + n : n;
}
function oi(e2, t) {
  let n = "", r = 0, i = -1, l = 0, u = -1, a, s;
  for (; ++u <= e2.length; ) {
    if (u < e2.length)
      a = e2.charCodeAt(u);
    else {
      if (a === 47)
        break;
      a = 47;
    }
    if (a === 47) {
      if (!(i === u - 1 || l === 1))
        if (i !== u - 1 && l === 2) {
          if (n.length < 2 || r !== 2 || n.charCodeAt(n.length - 1) !== 46 || n.charCodeAt(n.length - 2) !== 46) {
            if (n.length > 2) {
              if (s = n.lastIndexOf("/"), s !== n.length - 1) {
                s < 0 ? (n = "", r = 0) : (n = n.slice(0, s), r = n.length - 1 - n.lastIndexOf("/")), i = u, l = 0;
                continue;
              }
            } else if (n.length > 0) {
              n = "", r = 0, i = u, l = 0;
              continue;
            }
          }
          t && (n = n.length > 0 ? n + "/.." : "..", r = 2);
        } else
          n.length > 0 ? n += "/" + e2.slice(i + 1, u) : n = e2.slice(i + 1, u), r = u - i - 1;
      i = u, l = 0;
    } else
      a === 46 && l > -1 ? l++ : l = -1;
  }
  return n;
}
function Ce(e2) {
  if (typeof e2 != "string")
    throw new TypeError(
      "Path must be a string. Received " + JSON.stringify(e2)
    );
}
var si = { cwd: ci };
function ci() {
  return "/";
}
function We(e2) {
  return e2 !== null && typeof e2 == "object" && // @ts-expect-error: indexable.
  e2.href && // @ts-expect-error: indexable.
  e2.origin;
}
function pi(e2) {
  if (typeof e2 == "string")
    e2 = new URL(e2);
  else if (!We(e2)) {
    const t = new TypeError(
      'The "path" argument must be of type string or an instance of URL. Received `' + e2 + "`"
    );
    throw t.code = "ERR_INVALID_ARG_TYPE", t;
  }
  if (e2.protocol !== "file:") {
    const t = new TypeError("The URL must be of scheme file");
    throw t.code = "ERR_INVALID_URL_SCHEME", t;
  }
  return fi(e2);
}
function fi(e2) {
  if (e2.hostname !== "") {
    const r = new TypeError(
      'File URL host must be "localhost" or empty on darwin'
    );
    throw r.code = "ERR_INVALID_FILE_URL_HOST", r;
  }
  const t = e2.pathname;
  let n = -1;
  for (; ++n < t.length; )
    if (t.charCodeAt(n) === 37 && t.charCodeAt(n + 1) === 50) {
      const r = t.charCodeAt(n + 2);
      if (r === 70 || r === 102) {
        const i = new TypeError(
          "File URL path must not include encoded / characters"
        );
        throw i.code = "ERR_INVALID_FILE_URL_PATH", i;
      }
    }
  return decodeURIComponent(t);
}
var De = ["history", "path", "basename", "stem", "extname", "dirname"];
var nn = class {
  /**
   * Create a new virtual file.
   *
   * `options` is treated as:
   *
   * *   `string` or `Buffer` â `{value: options}`
   * *   `URL` â `{path: options}`
   * *   `VFile` â shallow copies its data over to the new file
   * *   `object` â all fields are shallow copied over to the new file
   *
   * Path related fields are set in the following order (least specific to
   * most specific): `history`, `path`, `basename`, `stem`, `extname`,
   * `dirname`.
   *
   * You cannot set `dirname` or `extname` without setting either `history`,
   * `path`, `basename`, or `stem` too.
   *
   * @param {Compatible | null | undefined} [value]
   *   File value.
   * @returns
   *   New instance.
   */
  constructor(t) {
    let n;
    t ? typeof t == "string" || hi(t) ? n = { value: t } : We(t) ? n = { path: t } : n = t : n = {}, this.data = {}, this.messages = [], this.history = [], this.cwd = si.cwd(), this.value, this.stored, this.result, this.map;
    let r = -1;
    for (; ++r < De.length; ) {
      const l = De[r];
      l in n && n[l] !== void 0 && n[l] !== null && (this[l] = l === "history" ? [...n[l]] : n[l]);
    }
    let i;
    for (i in n)
      De.includes(i) || (this[i] = n[i]);
  }
  /**
   * Get the full path (example: `'~/index.min.js'`).
   *
   * @returns {string}
   */
  get path() {
    return this.history[this.history.length - 1];
  }
  /**
   * Set the full path (example: `'~/index.min.js'`).
   *
   * Cannot be nullified.
   * You can set a file URL (a `URL` object with a `file:` protocol) which will
   * be turned into a path with `url.fileURLToPath`.
   *
   * @param {string | URL} path
   */
  set path(t) {
    We(t) && (t = pi(t)), je(t, "path"), this.path !== t && this.history.push(t);
  }
  /**
   * Get the parent path (example: `'~'`).
   */
  get dirname() {
    return typeof this.path == "string" ? ne.dirname(this.path) : void 0;
  }
  /**
   * Set the parent path (example: `'~'`).
   *
   * Cannot be set if thereâs no `path` yet.
   */
  set dirname(t) {
    kt(this.basename, "dirname"), this.path = ne.join(t || "", this.basename);
  }
  /**
   * Get the basename (including extname) (example: `'index.min.js'`).
   */
  get basename() {
    return typeof this.path == "string" ? ne.basename(this.path) : void 0;
  }
  /**
   * Set basename (including extname) (`'index.min.js'`).
   *
   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
   * on windows).
   * Cannot be nullified (use `file.path = file.dirname` instead).
   */
  set basename(t) {
    je(t, "basename"), Re(t, "basename"), this.path = ne.join(this.dirname || "", t);
  }
  /**
   * Get the extname (including dot) (example: `'.js'`).
   */
  get extname() {
    return typeof this.path == "string" ? ne.extname(this.path) : void 0;
  }
  /**
   * Set the extname (including dot) (example: `'.js'`).
   *
   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
   * on windows).
   * Cannot be set if thereâs no `path` yet.
   */
  set extname(t) {
    if (Re(t, "extname"), kt(this.dirname, "extname"), t) {
      if (t.charCodeAt(0) !== 46)
        throw new Error("`extname` must start with `.`");
      if (t.includes(".", 1))
        throw new Error("`extname` cannot contain multiple dots");
    }
    this.path = ne.join(this.dirname, this.stem + (t || ""));
  }
  /**
   * Get the stem (basename w/o extname) (example: `'index.min'`).
   */
  get stem() {
    return typeof this.path == "string" ? ne.basename(this.path, this.extname) : void 0;
  }
  /**
   * Set the stem (basename w/o extname) (example: `'index.min'`).
   *
   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
   * on windows).
   * Cannot be nullified (use `file.path = file.dirname` instead).
   */
  set stem(t) {
    je(t, "stem"), Re(t, "stem"), this.path = ne.join(this.dirname || "", t + (this.extname || ""));
  }
  /**
   * Serialize the file.
   *
   * @param {BufferEncoding | null | undefined} [encoding='utf8']
   *   Character encoding to understand `value` as when itâs a `Buffer`
   *   (default: `'utf8'`).
   * @returns {string}
   *   Serialized file.
   */
  toString(t) {
    return (this.value || "").toString(t || void 0);
  }
  /**
   * Create a warning message associated with the file.
   *
   * Its `fatal` is set to `false` and `file` is set to the current file path.
   * Its added to `file.messages`.
   *
   * @param {string | Error | VFileMessage} reason
   *   Reason for message, uses the stack and message of the error if given.
   * @param {Node | NodeLike | Position | Point | null | undefined} [place]
   *   Place in file where the message occurred.
   * @param {string | null | undefined} [origin]
   *   Place in code where the message originates (example:
   *   `'my-package:my-rule'` or `'my-rule'`).
   * @returns {VFileMessage}
   *   Message.
   */
  message(t, n, r) {
    const i = new J(t, n, r);
    return this.path && (i.name = this.path + ":" + i.name, i.file = this.path), i.fatal = false, this.messages.push(i), i;
  }
  /**
   * Create an info message associated with the file.
   *
   * Its `fatal` is set to `null` and `file` is set to the current file path.
   * Its added to `file.messages`.
   *
   * @param {string | Error | VFileMessage} reason
   *   Reason for message, uses the stack and message of the error if given.
   * @param {Node | NodeLike | Position | Point | null | undefined} [place]
   *   Place in file where the message occurred.
   * @param {string | null | undefined} [origin]
   *   Place in code where the message originates (example:
   *   `'my-package:my-rule'` or `'my-rule'`).
   * @returns {VFileMessage}
   *   Message.
   */
  info(t, n, r) {
    const i = this.message(t, n, r);
    return i.fatal = null, i;
  }
  /**
   * Create a fatal error associated with the file.
   *
   * Its `fatal` is set to `true` and `file` is set to the current file path.
   * Its added to `file.messages`.
   *
   * > ð **Note**: a fatal error means that a file is no longer processable.
   *
   * @param {string | Error | VFileMessage} reason
   *   Reason for message, uses the stack and message of the error if given.
   * @param {Node | NodeLike | Position | Point | null | undefined} [place]
   *   Place in file where the message occurred.
   * @param {string | null | undefined} [origin]
   *   Place in code where the message originates (example:
   *   `'my-package:my-rule'` or `'my-rule'`).
   * @returns {never}
   *   Message.
   * @throws {VFileMessage}
   *   Message.
   */
  fail(t, n, r) {
    const i = this.message(t, n, r);
    throw i.fatal = true, i;
  }
};
function Re(e2, t) {
  if (e2 && e2.includes(ne.sep))
    throw new Error(
      "`" + t + "` cannot be a path: did not expect `" + ne.sep + "`"
    );
}
function je(e2, t) {
  if (!e2)
    throw new Error("`" + t + "` cannot be empty");
}
function kt(e2, t) {
  if (!e2)
    throw new Error("Setting `" + t + "` requires `path` to be set too");
}
function hi(e2) {
  return tn(e2);
}
function wt(e2) {
  if (e2)
    throw e2;
}
var ze = Object.prototype.hasOwnProperty;
var rn = Object.prototype.toString;
var bt = Object.defineProperty;
var St = Object.getOwnPropertyDescriptor;
var Et = function(t) {
  return typeof Array.isArray == "function" ? Array.isArray(t) : rn.call(t) === "[object Array]";
};
var Ct = function(t) {
  if (!t || rn.call(t) !== "[object Object]")
    return false;
  var n = ze.call(t, "constructor"), r = t.constructor && t.constructor.prototype && ze.call(t.constructor.prototype, "isPrototypeOf");
  if (t.constructor && !n && !r)
    return false;
  var i;
  for (i in t)
    ;
  return typeof i > "u" || ze.call(t, i);
};
var It = function(t, n) {
  bt && n.name === "__proto__" ? bt(t, n.name, {
    enumerable: true,
    configurable: true,
    value: n.newValue,
    writable: true
  }) : t[n.name] = n.newValue;
};
var Tt = function(t, n) {
  if (n === "__proto__")
    if (ze.call(t, n)) {
      if (St)
        return St(t, n).value;
    } else
      return;
  return t[n];
};
var mi = function e() {
  var t, n, r, i, l, u, a = arguments[0], s = 1, o = arguments.length, c = false;
  for (typeof a == "boolean" && (c = a, a = arguments[1] || {}, s = 2), (a == null || typeof a != "object" && typeof a != "function") && (a = {}); s < o; ++s)
    if (t = arguments[s], t != null)
      for (n in t)
        r = Tt(a, n), i = Tt(t, n), a !== i && (c && i && (Ct(i) || (l = Et(i))) ? (l ? (l = false, u = r && Et(r) ? r : []) : u = r && Ct(r) ? r : {}, It(a, { name: n, newValue: e(c, u, i) })) : typeof i < "u" && It(a, { name: n, newValue: i }));
  return a;
};
var At = sn(mi);
function Ge(e2) {
  if (typeof e2 != "object" || e2 === null)
    return false;
  const t = Object.getPrototypeOf(e2);
  return (t === null || t === Object.prototype || Object.getPrototypeOf(t) === null) && !(Symbol.toStringTag in e2) && !(Symbol.iterator in e2);
}
function gi() {
  const e2 = [], t = { run: n, use: r };
  return t;
  function n(...i) {
    let l = -1;
    const u = i.pop();
    if (typeof u != "function")
      throw new TypeError("Expected function as last argument, not " + u);
    a(null, ...i);
    function a(s, ...o) {
      const c = e2[++l];
      let m = -1;
      if (s) {
        u(s);
        return;
      }
      for (; ++m < i.length; )
        (o[m] === null || o[m] === void 0) && (o[m] = i[m]);
      i = o, c ? di(c, a)(...o) : u(null, ...o);
    }
  }
  function r(i) {
    if (typeof i != "function")
      throw new TypeError(
        "Expected `middelware` to be a function, not " + i
      );
    return e2.push(i), t;
  }
}
function di(e2, t) {
  let n;
  return r;
  function r(...u) {
    const a = e2.length > u.length;
    let s;
    a && u.push(i);
    try {
      s = e2.apply(this, u);
    } catch (o) {
      const c = (
        /** @type {Error} */
        o
      );
      if (a && n)
        throw c;
      return i(c);
    }
    a || (s && s.then && typeof s.then == "function" ? s.then(l, i) : s instanceof Error ? i(s) : l(s));
  }
  function i(u, ...a) {
    n || (n = true, t(u, ...a));
  }
  function l(u) {
    i(null, u);
  }
}
var yi = un().freeze();
var ln = {}.hasOwnProperty;
function un() {
  const e2 = gi(), t = [];
  let n = {}, r, i = -1;
  return l.data = u, l.Parser = void 0, l.Compiler = void 0, l.freeze = a, l.attachers = t, l.use = s, l.parse = o, l.stringify = c, l.run = m, l.runSync = g, l.process = h, l.processSync = b, l;
  function l() {
    const x = un();
    let S = -1;
    for (; ++S < t.length; )
      x.use(...t[S]);
    return x.data(At(true, {}, n)), x;
  }
  function u(x, S) {
    return typeof x == "string" ? arguments.length === 2 ? (qe("data", r), n[x] = S, l) : ln.call(n, x) && n[x] || null : x ? (qe("data", r), n = x, l) : n;
  }
  function a() {
    if (r)
      return l;
    for (; ++i < t.length; ) {
      const [x, ...S] = t[i];
      if (S[0] === false)
        continue;
      S[0] === true && (S[0] = void 0);
      const k = x.call(l, ...S);
      typeof k == "function" && e2.use(k);
    }
    return r = true, i = Number.POSITIVE_INFINITY, l;
  }
  function s(x, ...S) {
    let k;
    if (qe("use", r), x != null)
      if (typeof x == "function")
        N(x, ...S);
      else if (typeof x == "object")
        Array.isArray(x) ? F(x) : E(x);
      else
        throw new TypeError("Expected usable value, not `" + x + "`");
    return k && (n.settings = Object.assign(n.settings || {}, k)), l;
    function P(d2) {
      if (typeof d2 == "function")
        N(d2);
      else if (typeof d2 == "object")
        if (Array.isArray(d2)) {
          const [T, ...L] = d2;
          N(T, ...L);
        } else
          E(d2);
      else
        throw new TypeError("Expected usable value, not `" + d2 + "`");
    }
    function E(d2) {
      F(d2.plugins), d2.settings && (k = Object.assign(k || {}, d2.settings));
    }
    function F(d2) {
      let T = -1;
      if (d2 != null)
        if (Array.isArray(d2))
          for (; ++T < d2.length; ) {
            const L = d2[T];
            P(L);
          }
        else
          throw new TypeError("Expected a list of plugins, not `" + d2 + "`");
    }
    function N(d2, T) {
      let L = -1, _;
      for (; ++L < t.length; )
        if (t[L][0] === d2) {
          _ = t[L];
          break;
        }
      _ ? (Ge(_[1]) && Ge(T) && (T = At(true, _[1], T)), _[1] = T) : t.push([...arguments]);
    }
  }
  function o(x) {
    l.freeze();
    const S = be(x), k = l.Parser;
    return Me("parse", k), zt(k, "parse") ? new k(String(S), S).parse() : k(String(S), S);
  }
  function c(x, S) {
    l.freeze();
    const k = be(S), P = l.Compiler;
    return He("stringify", P), Ot(x), zt(P, "compile") ? new P(x, k).compile() : P(x, k);
  }
  function m(x, S, k) {
    if (Ot(x), l.freeze(), !k && typeof S == "function" && (k = S, S = void 0), !k)
      return new Promise(P);
    P(null, k);
    function P(E, F) {
      e2.run(x, be(S), N);
      function N(d2, T, L) {
        T = T || x, d2 ? F(d2) : E ? E(T) : k(null, T, L);
      }
    }
  }
  function g(x, S) {
    let k, P;
    return l.run(x, S, E), Pt("runSync", "run", P), k;
    function E(F, N) {
      wt(F), k = N, P = true;
    }
  }
  function h(x, S) {
    if (l.freeze(), Me("process", l.Parser), He("process", l.Compiler), !S)
      return new Promise(k);
    k(null, S);
    function k(P, E) {
      const F = be(x);
      l.run(l.parse(F), F, (d2, T, L) => {
        if (d2 || !T || !L)
          N(d2);
        else {
          const _ = l.stringify(T, L);
          _ == null || (wi(_) ? L.value = _ : L.result = _), N(d2, L);
        }
      });
      function N(d2, T) {
        d2 || !T ? E(d2) : P ? P(T) : S(null, T);
      }
    }
  }
  function b(x) {
    let S;
    l.freeze(), Me("processSync", l.Parser), He("processSync", l.Compiler);
    const k = be(x);
    return l.process(k, P), Pt("processSync", "process", S), k;
    function P(E) {
      S = true, wt(E);
    }
  }
}
function zt(e2, t) {
  return typeof e2 == "function" && // Prototypes do exist.
  // type-coverage:ignore-next-line
  e2.prototype && // A function with keys in its prototype is probably a constructor.
  // Classesâ prototype methods are not enumerable, so we check if some value
  // exists in the prototype.
  // type-coverage:ignore-next-line
  (xi(e2.prototype) || t in e2.prototype);
}
function xi(e2) {
  let t;
  for (t in e2)
    if (ln.call(e2, t))
      return true;
  return false;
}
function Me(e2, t) {
  if (typeof t != "function")
    throw new TypeError("Cannot `" + e2 + "` without `Parser`");
}
function He(e2, t) {
  if (typeof t != "function")
    throw new TypeError("Cannot `" + e2 + "` without `Compiler`");
}
function qe(e2, t) {
  if (t)
    throw new Error(
      "Cannot call `" + e2 + "` on a frozen processor.\nCreate a new processor first, by calling it: use `processor()` instead of `processor`."
    );
}
function Ot(e2) {
  if (!Ge(e2) || typeof e2.type != "string")
    throw new TypeError("Expected node, got `" + e2 + "`");
}
function Pt(e2, t, n) {
  if (!n)
    throw new Error(
      "`" + e2 + "` finished async. Use `" + t + "` instead"
    );
}
function be(e2) {
  return ki(e2) ? e2 : new nn(e2);
}
function ki(e2) {
  return !!(e2 && typeof e2 == "object" && "message" in e2 && "messages" in e2);
}
function wi(e2) {
  return typeof e2 == "string" || tn(e2);
}
var bi = {};
function Si(e2, t) {
  const n = t || bi, r = typeof n.includeImageAlt == "boolean" ? n.includeImageAlt : true, i = typeof n.includeHtml == "boolean" ? n.includeHtml : true;
  return an(e2, r, i);
}
function an(e2, t, n) {
  if (Ei(e2)) {
    if ("value" in e2)
      return e2.type === "html" && !n ? "" : e2.value;
    if (t && "alt" in e2 && e2.alt)
      return e2.alt;
    if ("children" in e2)
      return Lt(e2.children, t, n);
  }
  return Array.isArray(e2) ? Lt(e2, t, n) : "";
}
function Lt(e2, t, n) {
  const r = [];
  let i = -1;
  for (; ++i < e2.length; )
    r[i] = an(e2[i], t, n);
  return r.join("");
}
function Ei(e2) {
  return !!(e2 && typeof e2 == "object");
}
var Ci = {
  tokenize: Ii
};
function Ii(e2) {
  const t = e2.attempt(
    this.parser.constructs.contentInitial,
    r,
    i
  );
  let n;
  return t;
  function r(a) {
    if (a === null) {
      e2.consume(a);
      return;
    }
    return e2.enter("lineEnding"), e2.consume(a), e2.exit("lineEnding"), C8(e2, t, "linePrefix");
  }
  function i(a) {
    return e2.enter("paragraph"), l(a);
  }
  function l(a) {
    const s = e2.enter("chunkText", {
      contentType: "text",
      previous: n
    });
    return n && (n.next = s), n = s, u(a);
  }
  function u(a) {
    if (a === null) {
      e2.exit("chunkText"), e2.exit("paragraph"), e2.consume(a);
      return;
    }
    return Np(a) ? (e2.consume(a), e2.exit("chunkText"), l) : (e2.consume(a), u);
  }
}
var Ti = {
  tokenize: Ai
};
var Ft = {
  tokenize: zi
};
function Ai(e2) {
  const t = this, n = [];
  let r = 0, i, l, u;
  return a;
  function a(E) {
    if (r < n.length) {
      const F = n[r];
      return t.containerState = F[1], e2.attempt(
        F[0].continuation,
        s,
        o
      )(E);
    }
    return o(E);
  }
  function s(E) {
    if (r++, t.containerState._closeFlow) {
      t.containerState._closeFlow = void 0, i && P();
      const F = t.events.length;
      let N = F, d2;
      for (; N--; )
        if (t.events[N][0] === "exit" && t.events[N][1].type === "chunkFlow") {
          d2 = t.events[N][1].end;
          break;
        }
      k(r);
      let T = F;
      for (; T < t.events.length; )
        t.events[T][1].end = Object.assign({}, d2), T++;
      return gE(
        t.events,
        N + 1,
        0,
        t.events.slice(F)
      ), t.events.length = T, o(E);
    }
    return a(E);
  }
  function o(E) {
    if (r === n.length) {
      if (!i)
        return g(E);
      if (i.currentConstruct && i.currentConstruct.concrete)
        return b(E);
      t.interrupt = !!(i.currentConstruct && !i._gfmTableDynamicInterruptHack);
    }
    return t.containerState = {}, e2.check(
      Ft,
      c,
      m
    )(E);
  }
  function c(E) {
    return i && P(), k(r), g(E);
  }
  function m(E) {
    return t.parser.lazy[t.now().line] = r !== n.length, u = t.now().offset, b(E);
  }
  function g(E) {
    return t.containerState = {}, e2.attempt(
      Ft,
      h,
      b
    )(E);
  }
  function h(E) {
    return r++, n.push([t.currentConstruct, t.containerState]), g(E);
  }
  function b(E) {
    if (E === null) {
      i && P(), k(0), e2.consume(E);
      return;
    }
    return i = i || t.parser.flow(t.now()), e2.enter("chunkFlow", {
      contentType: "flow",
      previous: l,
      _tokenizer: i
    }), x(E);
  }
  function x(E) {
    if (E === null) {
      S(e2.exit("chunkFlow"), true), k(0), e2.consume(E);
      return;
    }
    return Np(E) ? (e2.consume(E), S(e2.exit("chunkFlow")), r = 0, t.interrupt = void 0, a) : (e2.consume(E), x);
  }
  function S(E, F) {
    const N = t.sliceStream(E);
    if (F && N.push(null), E.previous = l, l && (l.next = E), l = E, i.defineSkip(E.start), i.write(N), t.parser.lazy[E.start.line]) {
      let d2 = i.events.length;
      for (; d2--; )
        if (
          // The token starts before the line endingâ¦
          i.events[d2][1].start.offset < u && // â¦and either is not ended yetâ¦
          (!i.events[d2][1].end || // â¦or ends after it.
          i.events[d2][1].end.offset > u)
        )
          return;
      const T = t.events.length;
      let L = T, _, v;
      for (; L--; )
        if (t.events[L][0] === "exit" && t.events[L][1].type === "chunkFlow") {
          if (_) {
            v = t.events[L][1].end;
            break;
          }
          _ = true;
        }
      for (k(r), d2 = T; d2 < t.events.length; )
        t.events[d2][1].end = Object.assign({}, v), d2++;
      gE(
        t.events,
        L + 1,
        0,
        t.events.slice(T)
      ), t.events.length = d2;
    }
  }
  function k(E) {
    let F = n.length;
    for (; F-- > E; ) {
      const N = n[F];
      t.containerState = N[1], N[0].exit.call(t, e2);
    }
    n.length = E;
  }
  function P() {
    i.write([null]), l = void 0, i = void 0, t.containerState._closeFlow = void 0;
  }
}
function zi(e2, t, n) {
  return C8(
    e2,
    e2.attempt(this.parser.constructs.document, t, n),
    "linePrefix",
    this.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4
  );
}
var Oi = {
  tokenize: Pi
};
function Pi(e2) {
  const t = this, n = e2.attempt(
    // Try to parse a blank line.
    dD2,
    r,
    // Try to parse initial flow (essentially, only code).
    e2.attempt(
      this.parser.constructs.flowInitial,
      i,
      C8(
        e2,
        e2.attempt(
          this.parser.constructs.flow,
          i,
          e2.attempt(ar, i)
        ),
        "linePrefix"
      )
    )
  );
  return n;
  function r(l) {
    if (l === null) {
      e2.consume(l);
      return;
    }
    return e2.enter("lineEndingBlank"), e2.consume(l), e2.exit("lineEndingBlank"), t.currentConstruct = void 0, n;
  }
  function i(l) {
    if (l === null) {
      e2.consume(l);
      return;
    }
    return e2.enter("lineEnding"), e2.consume(l), e2.exit("lineEnding"), t.currentConstruct = void 0, n;
  }
}
var Li = {
  resolveAll: sn2()
};
var Fi = on("string");
var Ni = on("text");
function on(e2) {
  return {
    tokenize: t,
    resolveAll: sn2(
      e2 === "text" ? Bi : void 0
    )
  };
  function t(n) {
    const r = this, i = this.parser.constructs[e2], l = n.attempt(i, u, a);
    return u;
    function u(c) {
      return o(c) ? l(c) : a(c);
    }
    function a(c) {
      if (c === null) {
        n.consume(c);
        return;
      }
      return n.enter("data"), n.consume(c), s;
    }
    function s(c) {
      return o(c) ? (n.exit("data"), l(c)) : (n.consume(c), s);
    }
    function o(c) {
      if (c === null)
        return true;
      const m = i[c];
      let g = -1;
      if (m)
        for (; ++g < m.length; ) {
          const h = m[g];
          if (!h.previous || h.previous.call(r, r.previous))
            return true;
        }
      return false;
    }
  }
}
function sn2(e2) {
  return t;
  function t(n, r) {
    let i = -1, l;
    for (; ++i <= n.length; )
      l === void 0 ? n[i] && n[i][1].type === "data" && (l = i, i++) : (!n[i] || n[i][1].type !== "data") && (i !== l + 2 && (n[l][1].end = n[i - 1][1].end, n.splice(l + 2, i - l - 2), i = l + 2), l = void 0);
    return e2 ? e2(n, r) : n;
  }
}
function Bi(e2, t) {
  let n = 0;
  for (; ++n <= e2.length; )
    if ((n === e2.length || e2[n][1].type === "lineEnding") && e2[n - 1][1].type === "data") {
      const r = e2[n - 1][1], i = t.sliceStream(r);
      let l = i.length, u = -1, a = 0, s;
      for (; l--; ) {
        const o = i[l];
        if (typeof o == "string") {
          for (u = o.length; o.charCodeAt(u - 1) === 32; )
            a++, u--;
          if (u)
            break;
          u = -1;
        } else if (o === -2)
          s = true, a++;
        else if (o !== -1) {
          l++;
          break;
        }
      }
      if (a) {
        const o = {
          type: n === e2.length || s || a < 2 ? "lineSuffix" : "hardBreakTrailing",
          start: {
            line: r.end.line,
            column: r.end.column - a,
            offset: r.end.offset - a,
            _index: r.start._index + l,
            _bufferIndex: l ? u : r.start._bufferIndex + u
          },
          end: Object.assign({}, r.end)
        };
        r.end = Object.assign({}, o.start), r.start.offset === r.end.offset ? Object.assign(r, o) : (e2.splice(
          n,
          0,
          ["enter", o, t],
          ["exit", o, t]
        ), n += 2);
      }
      n++;
    }
  return e2;
}
function _i(e2, t, n) {
  let r = Object.assign(
    n ? Object.assign({}, n) : {
      line: 1,
      column: 1,
      offset: 0
    },
    {
      _index: 0,
      _bufferIndex: -1
    }
  );
  const i = {}, l = [];
  let u = [], a = [];
  const s = {
    consume: P,
    enter: E,
    exit: F,
    attempt: T(N),
    check: T(d2),
    interrupt: T(d2, {
      interrupt: true
    })
  }, o = {
    previous: null,
    code: null,
    containerState: {},
    events: [],
    parser: e2,
    sliceStream: h,
    sliceSerialize: g,
    now: b,
    defineSkip: x,
    write: m
  };
  let c = t.tokenize.call(o, s);
  return t.resolveAll && l.push(t), o;
  function m(C) {
    return u = I0r(u, C), S(), u[u.length - 1] !== null ? [] : (L(t, 0), o.events = sD2(l, o.events, o), o.events);
  }
  function g(C, I) {
    return Ri(h(C), I);
  }
  function h(C) {
    return Di(u, C);
  }
  function b() {
    const { line: C, column: I, offset: H, _index: q, _bufferIndex: B } = r;
    return {
      line: C,
      column: I,
      offset: H,
      _index: q,
      _bufferIndex: B
    };
  }
  function x(C) {
    i[C.line] = C.column, v();
  }
  function S() {
    let C;
    for (; r._index < u.length; ) {
      const I = u[r._index];
      if (typeof I == "string")
        for (C = r._index, r._bufferIndex < 0 && (r._bufferIndex = 0); r._index === C && r._bufferIndex < I.length; )
          k(I.charCodeAt(r._bufferIndex));
      else
        k(I);
    }
  }
  function k(C) {
    c = c(C);
  }
  function P(C) {
    Np(C) ? (r.line++, r.column = 1, r.offset += C === -3 ? 2 : 1, v()) : C !== -1 && (r.column++, r.offset++), r._bufferIndex < 0 ? r._index++ : (r._bufferIndex++, r._bufferIndex === u[r._index].length && (r._bufferIndex = -1, r._index++)), o.previous = C;
  }
  function E(C, I) {
    const H = I || {};
    return H.type = C, H.start = b(), o.events.push(["enter", H, o]), a.push(H), H;
  }
  function F(C) {
    const I = a.pop();
    return I.end = b(), o.events.push(["exit", I, o]), I;
  }
  function N(C, I) {
    L(C, I.from);
  }
  function d2(C, I) {
    I.restore();
  }
  function T(C, I) {
    return H;
    function H(q, B, Q) {
      let $, K, ie, p;
      return Array.isArray(q) ? le(q) : "tokenize" in q ? (
        // @ts-expect-error Looks like a construct.
        le([q])
      ) : Z(q);
      function Z(U) {
        return me;
        function me(oe) {
          const ge = oe !== null && U[oe], de = oe !== null && U.null, Le = [
            // To do: add more extension tests.
            /* c8 ignore next 2 */
            ...Array.isArray(ge) ? ge : ge ? [ge] : [],
            ...Array.isArray(de) ? de : de ? [de] : []
          ];
          return le(Le)(oe);
        }
      }
      function le(U) {
        return $ = U, K = 0, U.length === 0 ? Q : f(U[K]);
      }
      function f(U) {
        return me;
        function me(oe) {
          return p = _(), ie = U, U.partial || (o.currentConstruct = U), U.name && o.parser.constructs.disable.null.includes(U.name) ? he() : U.tokenize.call(
            // If we do have fields, create an object w/ `context` as its
            // prototype.
            // This allows a âlive bindingâ, which is needed for `interrupt`.
            I ? Object.assign(Object.create(o), I) : o,
            s,
            ee,
            he
          )(oe);
        }
      }
      function ee(U) {
        return C(ie, p), B;
      }
      function he(U) {
        return p.restore(), ++K < $.length ? f($[K]) : Q;
      }
    }
  }
  function L(C, I) {
    C.resolveAll && !l.includes(C) && l.push(C), C.resolve && gE(
      o.events,
      I,
      o.events.length - I,
      C.resolve(o.events.slice(I), o)
    ), C.resolveTo && (o.events = C.resolveTo(o.events, o));
  }
  function _() {
    const C = b(), I = o.previous, H = o.currentConstruct, q = o.events.length, B = Array.from(a);
    return {
      restore: Q,
      from: q
    };
    function Q() {
      r = C, o.previous = I, o.currentConstruct = H, o.events.length = q, a = B, v();
    }
  }
  function v() {
    r.line in i && r.column < 2 && (r.column = i[r.line], r.offset += i[r.line] - 1);
  }
}
function Di(e2, t) {
  const n = t.start._index, r = t.start._bufferIndex, i = t.end._index, l = t.end._bufferIndex;
  let u;
  if (n === i)
    u = [e2[n].slice(r, l)];
  else {
    if (u = e2.slice(n, i), r > -1) {
      const a = u[0];
      typeof a == "string" ? u[0] = a.slice(r) : u.shift();
    }
    l > 0 && u.push(e2[i].slice(0, l));
  }
  return u;
}
function Ri(e2, t) {
  let n = -1;
  const r = [];
  let i;
  for (; ++n < e2.length; ) {
    const l = e2[n];
    let u;
    if (typeof l == "string")
      u = l;
    else
      switch (l) {
        case -5: {
          u = "\r";
          break;
        }
        case -4: {
          u = `
`;
          break;
        }
        case -3: {
          u = `\r
`;
          break;
        }
        case -2: {
          u = t ? " " : "	";
          break;
        }
        case -1: {
          if (!t && i)
            continue;
          u = " ";
          break;
        }
        default:
          u = String.fromCharCode(l);
      }
    i = l === -2, r.push(u);
  }
  return r.join("");
}
var ji = {
  42: W,
  43: W,
  45: W,
  48: W,
  49: W,
  50: W,
  51: W,
  52: W,
  53: W,
  54: W,
  55: W,
  56: W,
  57: W,
  62: Gt
};
var Mi = {
  91: fr
};
var Hi = {
  [-2]: Be,
  [-1]: Be,
  32: Be
};
var qi = {
  35: xr,
  42: Ae,
  45: [gt, Ae],
  60: Sr,
  61: gt,
  95: Ae,
  96: ht,
  126: ht
};
var Vi = {
  38: Yt,
  92: Xt
};
var vi = {
  [-5]: _e,
  [-4]: _e,
  [-3]: _e,
  33: Hr,
  38: Yt,
  42: Ue,
  60: [$n, Or],
  91: Vr,
  92: [dr, Xt],
  93: Ze,
  95: Ue,
  96: nr
};
var $i = {
  null: [Ue, Li]
};
var Ui = {
  null: [42, 95]
};
var Qi = {
  null: []
};
var Wi = Object.freeze(Object.defineProperty({
  __proto__: null,
  attentionMarkers: Ui,
  contentInitial: Mi,
  disable: Qi,
  document: ji,
  flow: qi,
  flowInitial: Hi,
  insideSpan: $i,
  string: Vi,
  text: vi
}, Symbol.toStringTag, { value: "Module" }));
function Gi(e2) {
  const n = (
    /** @type {FullNormalizedExtension} */
    GA2([Wi, ...(e2 || {}).extensions || []])
  ), r = {
    defined: [],
    lazy: {},
    constructs: n,
    content: i(Ci),
    document: i(Ti),
    flow: i(Oi),
    string: i(Fi),
    text: i(Ni)
  };
  return r;
  function i(l) {
    return u;
    function u(a) {
      return _i(r, l, a);
    }
  }
}
var Nt = /[\0\t\n\r]/g;
function Xi() {
  let e2 = 1, t = "", n = true, r;
  return i;
  function i(l, u, a) {
    const s = [];
    let o, c, m, g, h;
    for (l = t + l.toString(u), m = 0, t = "", n && (l.charCodeAt(0) === 65279 && m++, n = void 0); m < l.length; ) {
      if (Nt.lastIndex = m, o = Nt.exec(l), g = o && o.index !== void 0 ? o.index : l.length, h = l.charCodeAt(g), !o) {
        t = l.slice(m);
        break;
      }
      if (h === 10 && m === g && r)
        s.push(-3), r = void 0;
      else
        switch (r && (s.push(-5), r = void 0), m < g && (s.push(l.slice(m, g)), e2 += g - m), h) {
          case 0: {
            s.push(65533), e2++;
            break;
          }
          case 9: {
            for (c = Math.ceil(e2 / 4) * 4, s.push(-2); e2++ < c; )
              s.push(-1);
            break;
          }
          case 10: {
            s.push(-4), e2 = 1;
            break;
          }
          default:
            r = true, e2 = 1;
        }
      m = g + 1;
    }
    return a && (r && s.push(-5), t && s.push(t), s.push(null)), s;
  }
}
function Yi(e2) {
  for (; !Jt(e2); )
    ;
  return e2;
}
var cn = {}.hasOwnProperty;
var Ji = (
  /**
   * @type {(
   *   ((value: Value, encoding: Encoding, options?: Options | null | undefined) => Root) &
   *   ((value: Value, options?: Options | null | undefined) => Root)
   * )}
   */
  /**
   * @param {Value} value
   * @param {Encoding | Options | null | undefined} [encoding]
   * @param {Options | null | undefined} [options]
   * @returns {Root}
   */
  function(e2, t, n) {
    return typeof t != "string" && (n = t, t = void 0), Ki(n)(
      Yi(
        Gi(n).document().write(Xi()(e2, t, true))
      )
    );
  }
);
function Ki(e2) {
  const t = {
    transforms: [],
    canContainEols: ["emphasis", "fragment", "heading", "paragraph", "strong"],
    enter: {
      autolink: a(ut),
      autolinkProtocol: C,
      autolinkEmail: C,
      atxHeading: a(rt),
      blockQuote: a(Le),
      characterEscape: C,
      characterReference: C,
      codeFenced: a(nt),
      codeFencedFenceInfo: s,
      codeFencedFenceMeta: s,
      codeIndented: a(nt, s),
      codeText: a(kn, s),
      codeTextData: C,
      data: C,
      codeFlowValue: C,
      definition: a(wn),
      definitionDestinationString: s,
      definitionLabelString: s,
      definitionTitleString: s,
      emphasis: a(bn),
      hardBreakEscape: a(it),
      hardBreakTrailing: a(it),
      htmlFlow: a(lt, s),
      htmlFlowData: C,
      htmlText: a(lt, s),
      htmlTextData: C,
      image: a(Sn),
      label: s,
      link: a(ut),
      listItem: a(En),
      listItemValue: b,
      listOrdered: a(at, h),
      listUnordered: a(at),
      paragraph: a(Cn),
      reference: he,
      referenceString: s,
      resourceDestinationString: s,
      resourceTitleString: s,
      setextHeading: a(rt),
      strong: a(In),
      thematicBreak: a(An)
    },
    exit: {
      atxHeading: c(),
      atxHeadingSequence: T,
      autolink: c(),
      autolinkEmail: de,
      autolinkProtocol: ge,
      blockQuote: c(),
      characterEscapeValue: I,
      characterReferenceMarkerHexadecimal: me,
      characterReferenceMarkerNumeric: me,
      characterReferenceValue: oe,
      codeFenced: c(P),
      codeFencedFence: k,
      codeFencedFenceInfo: x,
      codeFencedFenceMeta: S,
      codeFlowValue: I,
      codeIndented: c(E),
      codeText: c($),
      codeTextData: I,
      data: I,
      definition: c(),
      definitionDestinationString: d2,
      definitionLabelString: F,
      definitionTitleString: N,
      emphasis: c(),
      hardBreakEscape: c(q),
      hardBreakTrailing: c(q),
      htmlFlow: c(B),
      htmlFlowData: I,
      htmlText: c(Q),
      htmlTextData: I,
      image: c(ie),
      label: Z,
      labelText: p,
      lineEnding: H,
      link: c(K),
      listItem: c(),
      listOrdered: c(),
      listUnordered: c(),
      paragraph: c(),
      referenceString: U,
      resourceDestinationString: le,
      resourceTitleString: f,
      resource: ee,
      setextHeading: c(v),
      setextHeadingLineSequence: _,
      setextHeadingText: L,
      strong: c(),
      thematicBreak: c()
    }
  };
  pn(t, (e2 || {}).mdastExtensions || []);
  const n = {};
  return r;
  function r(y) {
    let w = {
      type: "root",
      children: []
    };
    const A = {
      stack: [w],
      tokenStack: [],
      config: t,
      enter: o,
      exit: m,
      buffer: s,
      resume: g,
      setData: l,
      getData: u
    }, D = [];
    let j = -1;
    for (; ++j < y.length; )
      if (y[j][1].type === "listOrdered" || y[j][1].type === "listUnordered")
        if (y[j][0] === "enter")
          D.push(j);
        else {
          const te = D.pop();
          j = i(y, te, j);
        }
    for (j = -1; ++j < y.length; ) {
      const te = t[y[j][0]];
      cn.call(te, y[j][1].type) && te[y[j][1].type].call(
        Object.assign(
          {
            sliceSerialize: y[j][2].sliceSerialize
          },
          A
        ),
        y[j][1]
      );
    }
    if (A.tokenStack.length > 0) {
      const te = A.tokenStack[A.tokenStack.length - 1];
      (te[1] || Bt).call(A, void 0, te[0]);
    }
    for (w.position = {
      start: ce(
        y.length > 0 ? y[0][1].start : {
          line: 1,
          column: 1,
          offset: 0
        }
      ),
      end: ce(
        y.length > 0 ? y[y.length - 2][1].end : {
          line: 1,
          column: 1,
          offset: 0
        }
      )
    }, j = -1; ++j < t.transforms.length; )
      w = t.transforms[j](w) || w;
    return w;
  }
  function i(y, w, A) {
    let D = w - 1, j = -1, te = false, se, ue, ke, we;
    for (; ++D <= A; ) {
      const V = y[D];
      if (V[1].type === "listUnordered" || V[1].type === "listOrdered" || V[1].type === "blockQuote" ? (V[0] === "enter" ? j++ : j--, we = void 0) : V[1].type === "lineEndingBlank" ? V[0] === "enter" && (se && !we && !j && !ke && (ke = D), we = void 0) : V[1].type === "linePrefix" || V[1].type === "listItemValue" || V[1].type === "listItemMarker" || V[1].type === "listItemPrefix" || V[1].type === "listItemPrefixWhitespace" || (we = void 0), !j && V[0] === "enter" && V[1].type === "listItemPrefix" || j === -1 && V[0] === "exit" && (V[1].type === "listUnordered" || V[1].type === "listOrdered")) {
        if (se) {
          let Fe = D;
          for (ue = void 0; Fe--; ) {
            const ae = y[Fe];
            if (ae[1].type === "lineEnding" || ae[1].type === "lineEndingBlank") {
              if (ae[0] === "exit")
                continue;
              ue && (y[ue][1].type = "lineEndingBlank", te = true), ae[1].type = "lineEnding", ue = Fe;
            } else if (!(ae[1].type === "linePrefix" || ae[1].type === "blockQuotePrefix" || ae[1].type === "blockQuotePrefixWhitespace" || ae[1].type === "blockQuoteMarker" || ae[1].type === "listItemIndent"))
              break;
          }
          ke && (!ue || ke < ue) && (se._spread = true), se.end = Object.assign(
            {},
            ue ? y[ue][1].start : V[1].end
          ), y.splice(ue || D, 0, ["exit", se, V[2]]), D++, A++;
        }
        V[1].type === "listItemPrefix" && (se = {
          type: "listItem",
          _spread: false,
          start: Object.assign({}, V[1].start),
          // @ts-expect-error: weâll add `end` in a second.
          end: void 0
        }, y.splice(D, 0, ["enter", se, V[2]]), D++, A++, ke = void 0, we = true);
      }
    }
    return y[w][1]._spread = te, A;
  }
  function l(y, w) {
    n[y] = w;
  }
  function u(y) {
    return n[y];
  }
  function a(y, w) {
    return A;
    function A(D) {
      o.call(this, y(D), D), w && w.call(this, D);
    }
  }
  function s() {
    this.stack.push({
      type: "fragment",
      children: []
    });
  }
  function o(y, w, A) {
    return this.stack[this.stack.length - 1].children.push(y), this.stack.push(y), this.tokenStack.push([w, A]), y.position = {
      start: ce(w.start)
    }, y;
  }
  function c(y) {
    return w;
    function w(A) {
      y && y.call(this, A), m.call(this, A);
    }
  }
  function m(y, w) {
    const A = this.stack.pop(), D = this.tokenStack.pop();
    if (D)
      D[0].type !== y.type && (w ? w.call(this, y, D[0]) : (D[1] || Bt).call(this, y, D[0]));
    else
      throw new Error(
        "Cannot close `" + y.type + "` (" + Ee({
          start: y.start,
          end: y.end
        }) + "): itâs not open"
      );
    return A.position.end = ce(y.end), A;
  }
  function g() {
    return Si(this.stack.pop());
  }
  function h() {
    l("expectingFirstListItemValue", true);
  }
  function b(y) {
    if (u("expectingFirstListItemValue")) {
      const w = this.stack[this.stack.length - 2];
      w.start = Number.parseInt(this.sliceSerialize(y), 10), l("expectingFirstListItemValue");
    }
  }
  function x() {
    const y = this.resume(), w = this.stack[this.stack.length - 1];
    w.lang = y;
  }
  function S() {
    const y = this.resume(), w = this.stack[this.stack.length - 1];
    w.meta = y;
  }
  function k() {
    u("flowCodeInside") || (this.buffer(), l("flowCodeInside", true));
  }
  function P() {
    const y = this.resume(), w = this.stack[this.stack.length - 1];
    w.value = y.replace(/^(\r?\n|\r)|(\r?\n|\r)$/g, ""), l("flowCodeInside");
  }
  function E() {
    const y = this.resume(), w = this.stack[this.stack.length - 1];
    w.value = y.replace(/(\r?\n|\r)$/g, "");
  }
  function F(y) {
    const w = this.resume(), A = this.stack[this.stack.length - 1];
    A.label = w, A.identifier = oS(
      this.sliceSerialize(y)
    ).toLowerCase();
  }
  function N() {
    const y = this.resume(), w = this.stack[this.stack.length - 1];
    w.title = y;
  }
  function d2() {
    const y = this.resume(), w = this.stack[this.stack.length - 1];
    w.url = y;
  }
  function T(y) {
    const w = this.stack[this.stack.length - 1];
    if (!w.depth) {
      const A = this.sliceSerialize(y).length;
      w.depth = A;
    }
  }
  function L() {
    l("setextHeadingSlurpLineEnding", true);
  }
  function _(y) {
    const w = this.stack[this.stack.length - 1];
    w.depth = this.sliceSerialize(y).charCodeAt(0) === 61 ? 1 : 2;
  }
  function v() {
    l("setextHeadingSlurpLineEnding");
  }
  function C(y) {
    const w = this.stack[this.stack.length - 1];
    let A = w.children[w.children.length - 1];
    (!A || A.type !== "text") && (A = Tn(), A.position = {
      start: ce(y.start)
    }, w.children.push(A)), this.stack.push(A);
  }
  function I(y) {
    const w = this.stack.pop();
    w.value += this.sliceSerialize(y), w.position.end = ce(y.end);
  }
  function H(y) {
    const w = this.stack[this.stack.length - 1];
    if (u("atHardBreak")) {
      const A = w.children[w.children.length - 1];
      A.position.end = ce(y.end), l("atHardBreak");
      return;
    }
    !u("setextHeadingSlurpLineEnding") && t.canContainEols.includes(w.type) && (C.call(this, y), I.call(this, y));
  }
  function q() {
    l("atHardBreak", true);
  }
  function B() {
    const y = this.resume(), w = this.stack[this.stack.length - 1];
    w.value = y;
  }
  function Q() {
    const y = this.resume(), w = this.stack[this.stack.length - 1];
    w.value = y;
  }
  function $() {
    const y = this.resume(), w = this.stack[this.stack.length - 1];
    w.value = y;
  }
  function K() {
    const y = this.stack[this.stack.length - 1];
    if (u("inReference")) {
      const w = u("referenceType") || "shortcut";
      y.type += "Reference", y.referenceType = w, delete y.url, delete y.title;
    } else
      delete y.identifier, delete y.label;
    l("referenceType");
  }
  function ie() {
    const y = this.stack[this.stack.length - 1];
    if (u("inReference")) {
      const w = u("referenceType") || "shortcut";
      y.type += "Reference", y.referenceType = w, delete y.url, delete y.title;
    } else
      delete y.identifier, delete y.label;
    l("referenceType");
  }
  function p(y) {
    const w = this.sliceSerialize(y), A = this.stack[this.stack.length - 2];
    A.label = QD2(w), A.identifier = oS(w).toLowerCase();
  }
  function Z() {
    const y = this.stack[this.stack.length - 1], w = this.resume(), A = this.stack[this.stack.length - 1];
    if (l("inReference", true), A.type === "link") {
      const D = y.children;
      A.children = D;
    } else
      A.alt = w;
  }
  function le() {
    const y = this.resume(), w = this.stack[this.stack.length - 1];
    w.url = y;
  }
  function f() {
    const y = this.resume(), w = this.stack[this.stack.length - 1];
    w.title = y;
  }
  function ee() {
    l("inReference");
  }
  function he() {
    l("referenceType", "collapsed");
  }
  function U(y) {
    const w = this.resume(), A = this.stack[this.stack.length - 1];
    A.label = w, A.identifier = oS(
      this.sliceSerialize(y)
    ).toLowerCase(), l("referenceType", "full");
  }
  function me(y) {
    l("characterReferenceType", y.type);
  }
  function oe(y) {
    const w = this.sliceSerialize(y), A = u("characterReferenceType");
    let D;
    A ? (D = YD2(
      w,
      A === "characterReferenceMarkerNumeric" ? 10 : 16
    ), l("characterReferenceType")) : D = fD2(w);
    const j = this.stack.pop();
    j.value += D, j.position.end = ce(y.end);
  }
  function ge(y) {
    I.call(this, y);
    const w = this.stack[this.stack.length - 1];
    w.url = this.sliceSerialize(y);
  }
  function de(y) {
    I.call(this, y);
    const w = this.stack[this.stack.length - 1];
    w.url = "mailto:" + this.sliceSerialize(y);
  }
  function Le() {
    return {
      type: "blockquote",
      children: []
    };
  }
  function nt() {
    return {
      type: "code",
      lang: null,
      meta: null,
      value: ""
    };
  }
  function kn() {
    return {
      type: "inlineCode",
      value: ""
    };
  }
  function wn() {
    return {
      type: "definition",
      identifier: "",
      label: null,
      title: null,
      url: ""
    };
  }
  function bn() {
    return {
      type: "emphasis",
      children: []
    };
  }
  function rt() {
    return {
      type: "heading",
      depth: void 0,
      children: []
    };
  }
  function it() {
    return {
      type: "break"
    };
  }
  function lt() {
    return {
      type: "html",
      value: ""
    };
  }
  function Sn() {
    return {
      type: "image",
      title: null,
      url: "",
      alt: null
    };
  }
  function ut() {
    return {
      type: "link",
      title: null,
      url: "",
      children: []
    };
  }
  function at(y) {
    return {
      type: "list",
      ordered: y.type === "listOrdered",
      start: null,
      spread: y._spread,
      children: []
    };
  }
  function En(y) {
    return {
      type: "listItem",
      spread: y._spread,
      checked: null,
      children: []
    };
  }
  function Cn() {
    return {
      type: "paragraph",
      children: []
    };
  }
  function In() {
    return {
      type: "strong",
      children: []
    };
  }
  function Tn() {
    return {
      type: "text",
      value: ""
    };
  }
  function An() {
    return {
      type: "thematicBreak"
    };
  }
}
function ce(e2) {
  return {
    line: e2.line,
    column: e2.column,
    offset: e2.offset
  };
}
function pn(e2, t) {
  let n = -1;
  for (; ++n < t.length; ) {
    const r = t[n];
    Array.isArray(r) ? pn(e2, r) : Zi(e2, r);
  }
}
function Zi(e2, t) {
  let n;
  for (n in t)
    if (cn.call(t, n)) {
      if (n === "canContainEols") {
        const r = t[n];
        r && e2[n].push(...r);
      } else if (n === "transforms") {
        const r = t[n];
        r && e2[n].push(...r);
      } else if (n === "enter" || n === "exit") {
        const r = t[n];
        r && Object.assign(e2[n], r);
      }
    }
}
function Bt(e2, t) {
  throw e2 ? new Error(
    "Cannot close `" + e2.type + "` (" + Ee({
      start: e2.start,
      end: e2.end
    }) + "): a different token (`" + t.type + "`, " + Ee({
      start: t.start,
      end: t.end
    }) + ") is open"
  ) : new Error(
    "Cannot close document, a token (`" + t.type + "`, " + Ee({
      start: t.start,
      end: t.end
    }) + ") is still open"
  );
}
function el(e2) {
  Object.assign(this, { Parser: (n) => {
    const r = (
      /** @type {Options} */
      this.data("settings")
    );
    return Ji(
      n,
      Object.assign({}, r, e2, {
        // Note: these options are not in the readme.
        // The goal is for them to be set by plugins on `data` instead of being
        // passed by users.
        extensions: this.data("micromarkExtensions") || [],
        mdastExtensions: this.data("fromMarkdownExtensions") || []
      })
    );
  } });
}
function tl(e2, t) {
  const n = {
    type: "element",
    tagName: "blockquote",
    properties: {},
    children: e2.wrap(e2.all(t), true)
  };
  return e2.patch(t, n), e2.applyData(t, n);
}
function nl(e2, t) {
  const n = { type: "element", tagName: "br", properties: {}, children: [] };
  return e2.patch(t, n), [e2.applyData(t, n), { type: "text", value: `
` }];
}
function rl(e2, t) {
  const n = t.value ? t.value + `
` : "", r = t.lang ? t.lang.match(/^[^ \t]+(?=[ \t]|$)/) : null, i = {};
  r && (i.className = ["language-" + r]);
  let l = {
    type: "element",
    tagName: "code",
    properties: i,
    children: [{ type: "text", value: n }]
  };
  return t.meta && (l.data = { meta: t.meta }), e2.patch(t, l), l = e2.applyData(t, l), l = { type: "element", tagName: "pre", properties: {}, children: [l] }, e2.patch(t, l), l;
}
function il(e2, t) {
  const n = {
    type: "element",
    tagName: "del",
    properties: {},
    children: e2.all(t)
  };
  return e2.patch(t, n), e2.applyData(t, n);
}
function ll(e2, t) {
  const n = {
    type: "element",
    tagName: "em",
    properties: {},
    children: e2.all(t)
  };
  return e2.patch(t, n), e2.applyData(t, n);
}
function fn(e2, t) {
  const n = String(t.identifier).toUpperCase(), r = xe(n.toLowerCase()), i = e2.footnoteOrder.indexOf(n);
  let l;
  i === -1 ? (e2.footnoteOrder.push(n), e2.footnoteCounts[n] = 1, l = e2.footnoteOrder.length) : (e2.footnoteCounts[n]++, l = i + 1);
  const u = e2.footnoteCounts[n], a = {
    type: "element",
    tagName: "a",
    properties: {
      href: "#" + e2.clobberPrefix + "fn-" + r,
      id: e2.clobberPrefix + "fnref-" + r + (u > 1 ? "-" + u : ""),
      dataFootnoteRef: true,
      ariaDescribedBy: ["footnote-label"]
    },
    children: [{ type: "text", value: String(l) }]
  };
  e2.patch(t, a);
  const s = {
    type: "element",
    tagName: "sup",
    properties: {},
    children: [a]
  };
  return e2.patch(t, s), e2.applyData(t, s);
}
function ul(e2, t) {
  const n = e2.footnoteById;
  let r = 1;
  for (; r in n; )
    r++;
  const i = String(r);
  return n[i] = {
    type: "footnoteDefinition",
    identifier: i,
    children: [{ type: "paragraph", children: t.children }],
    position: t.position
  }, fn(e2, {
    type: "footnoteReference",
    identifier: i,
    position: t.position
  });
}
function al(e2, t) {
  const n = {
    type: "element",
    tagName: "h" + t.depth,
    properties: {},
    children: e2.all(t)
  };
  return e2.patch(t, n), e2.applyData(t, n);
}
function ol(e2, t) {
  if (e2.dangerous) {
    const n = { type: "raw", value: t.value };
    return e2.patch(t, n), e2.applyData(t, n);
  }
  return null;
}
function hn(e2, t) {
  const n = t.referenceType;
  let r = "]";
  if (n === "collapsed" ? r += "[]" : n === "full" && (r += "[" + (t.label || t.identifier) + "]"), t.type === "imageReference")
    return { type: "text", value: "![" + t.alt + r };
  const i = e2.all(t), l = i[0];
  l && l.type === "text" ? l.value = "[" + l.value : i.unshift({ type: "text", value: "[" });
  const u = i[i.length - 1];
  return u && u.type === "text" ? u.value += r : i.push({ type: "text", value: r }), i;
}
function sl(e2, t) {
  const n = e2.definition(t.identifier);
  if (!n)
    return hn(e2, t);
  const r = { src: xe(n.url || ""), alt: t.alt };
  n.title !== null && n.title !== void 0 && (r.title = n.title);
  const i = { type: "element", tagName: "img", properties: r, children: [] };
  return e2.patch(t, i), e2.applyData(t, i);
}
function cl(e2, t) {
  const n = { src: xe(t.url) };
  t.alt !== null && t.alt !== void 0 && (n.alt = t.alt), t.title !== null && t.title !== void 0 && (n.title = t.title);
  const r = { type: "element", tagName: "img", properties: n, children: [] };
  return e2.patch(t, r), e2.applyData(t, r);
}
function pl(e2, t) {
  const n = { type: "text", value: t.value.replace(/\r?\n|\r/g, " ") };
  e2.patch(t, n);
  const r = {
    type: "element",
    tagName: "code",
    properties: {},
    children: [n]
  };
  return e2.patch(t, r), e2.applyData(t, r);
}
function fl(e2, t) {
  const n = e2.definition(t.identifier);
  if (!n)
    return hn(e2, t);
  const r = { href: xe(n.url || "") };
  n.title !== null && n.title !== void 0 && (r.title = n.title);
  const i = {
    type: "element",
    tagName: "a",
    properties: r,
    children: e2.all(t)
  };
  return e2.patch(t, i), e2.applyData(t, i);
}
function hl(e2, t) {
  const n = { href: xe(t.url) };
  t.title !== null && t.title !== void 0 && (n.title = t.title);
  const r = {
    type: "element",
    tagName: "a",
    properties: n,
    children: e2.all(t)
  };
  return e2.patch(t, r), e2.applyData(t, r);
}
function ml(e2, t, n) {
  const r = e2.all(t), i = n ? gl(n) : mn(t), l = {}, u = [];
  if (typeof t.checked == "boolean") {
    const c = r[0];
    let m;
    c && c.type === "element" && c.tagName === "p" ? m = c : (m = { type: "element", tagName: "p", properties: {}, children: [] }, r.unshift(m)), m.children.length > 0 && m.children.unshift({ type: "text", value: " " }), m.children.unshift({
      type: "element",
      tagName: "input",
      properties: { type: "checkbox", checked: t.checked, disabled: true },
      children: []
    }), l.className = ["task-list-item"];
  }
  let a = -1;
  for (; ++a < r.length; ) {
    const c = r[a];
    (i || a !== 0 || c.type !== "element" || c.tagName !== "p") && u.push({ type: "text", value: `
` }), c.type === "element" && c.tagName === "p" && !i ? u.push(...c.children) : u.push(c);
  }
  const s = r[r.length - 1];
  s && (i || s.type !== "element" || s.tagName !== "p") && u.push({ type: "text", value: `
` });
  const o = { type: "element", tagName: "li", properties: l, children: u };
  return e2.patch(t, o), e2.applyData(t, o);
}
function gl(e2) {
  let t = false;
  if (e2.type === "list") {
    t = e2.spread || false;
    const n = e2.children;
    let r = -1;
    for (; !t && ++r < n.length; )
      t = mn(n[r]);
  }
  return t;
}
function mn(e2) {
  const t = e2.spread;
  return t ?? e2.children.length > 1;
}
function dl(e2, t) {
  const n = {}, r = e2.all(t);
  let i = -1;
  for (typeof t.start == "number" && t.start !== 1 && (n.start = t.start); ++i < r.length; ) {
    const u = r[i];
    if (u.type === "element" && u.tagName === "li" && u.properties && Array.isArray(u.properties.className) && u.properties.className.includes("task-list-item")) {
      n.className = ["contains-task-list"];
      break;
    }
  }
  const l = {
    type: "element",
    tagName: t.ordered ? "ol" : "ul",
    properties: n,
    children: e2.wrap(r, true)
  };
  return e2.patch(t, l), e2.applyData(t, l);
}
function yl(e2, t) {
  const n = {
    type: "element",
    tagName: "p",
    properties: {},
    children: e2.all(t)
  };
  return e2.patch(t, n), e2.applyData(t, n);
}
function xl(e2, t) {
  const n = { type: "root", children: e2.wrap(e2.all(t)) };
  return e2.patch(t, n), e2.applyData(t, n);
}
function kl(e2, t) {
  const n = {
    type: "element",
    tagName: "strong",
    properties: {},
    children: e2.all(t)
  };
  return e2.patch(t, n), e2.applyData(t, n);
}
function wl(e2, t) {
  const n = e2.all(t), r = n.shift(), i = [];
  if (r) {
    const u = {
      type: "element",
      tagName: "thead",
      properties: {},
      children: e2.wrap([r], true)
    };
    e2.patch(t.children[0], u), i.push(u);
  }
  if (n.length > 0) {
    const u = {
      type: "element",
      tagName: "tbody",
      properties: {},
      children: e2.wrap(n, true)
    }, a = Xee(t.children[1]), s = BWe(t.children[t.children.length - 1]);
    a.line && s.line && (u.position = { start: a, end: s }), i.push(u);
  }
  const l = {
    type: "element",
    tagName: "table",
    properties: {},
    children: e2.wrap(i, true)
  };
  return e2.patch(t, l), e2.applyData(t, l);
}
function bl(e2, t, n) {
  const r = n ? n.children : void 0, l = (r ? r.indexOf(t) : 1) === 0 ? "th" : "td", u = n && n.type === "table" ? n.align : void 0, a = u ? u.length : t.children.length;
  let s = -1;
  const o = [];
  for (; ++s < a; ) {
    const m = t.children[s], g = {}, h = u ? u[s] : void 0;
    h && (g.align = h);
    let b = { type: "element", tagName: l, properties: g, children: [] };
    m && (b.children = e2.all(m), e2.patch(m, b), b = e2.applyData(t, b)), o.push(b);
  }
  const c = {
    type: "element",
    tagName: "tr",
    properties: {},
    children: e2.wrap(o, true)
  };
  return e2.patch(t, c), e2.applyData(t, c);
}
function Sl(e2, t) {
  const n = {
    type: "element",
    tagName: "td",
    // Assume body cell.
    properties: {},
    children: e2.all(t)
  };
  return e2.patch(t, n), e2.applyData(t, n);
}
var _t = 9;
var Dt = 32;
function El(e2) {
  const t = String(e2), n = /\r?\n|\r/g;
  let r = n.exec(t), i = 0;
  const l = [];
  for (; r; )
    l.push(
      Rt(t.slice(i, r.index), i > 0, true),
      r[0]
    ), i = r.index + r[0].length, r = n.exec(t);
  return l.push(Rt(t.slice(i), i > 0, false)), l.join("");
}
function Rt(e2, t, n) {
  let r = 0, i = e2.length;
  if (t) {
    let l = e2.codePointAt(r);
    for (; l === _t || l === Dt; )
      r++, l = e2.codePointAt(r);
  }
  if (n) {
    let l = e2.codePointAt(i - 1);
    for (; l === _t || l === Dt; )
      i--, l = e2.codePointAt(i - 1);
  }
  return i > r ? e2.slice(r, i) : "";
}
function Cl(e2, t) {
  const n = { type: "text", value: El(String(t.value)) };
  return e2.patch(t, n), e2.applyData(t, n);
}
function Il(e2, t) {
  const n = {
    type: "element",
    tagName: "hr",
    properties: {},
    children: []
  };
  return e2.patch(t, n), e2.applyData(t, n);
}
var Tl = {
  blockquote: tl,
  break: nl,
  code: rl,
  delete: il,
  emphasis: ll,
  footnoteReference: fn,
  footnote: ul,
  heading: al,
  html: ol,
  imageReference: sl,
  image: cl,
  inlineCode: pl,
  linkReference: fl,
  link: hl,
  listItem: ml,
  list: dl,
  paragraph: yl,
  root: xl,
  strong: kl,
  table: wl,
  tableCell: Sl,
  tableRow: bl,
  text: Cl,
  thematicBreak: Il,
  toml: Ie,
  yaml: Ie,
  definition: Ie,
  footnoteDefinition: Ie
};
function Ie() {
  return null;
}
function Al(e2) {
  return !e2 || !e2.position || !e2.position.start || !e2.position.start.line || !e2.position.start.column || !e2.position.end || !e2.position.end.line || !e2.position.end.column;
}
var jt = {}.hasOwnProperty;
function zl(e2) {
  const t = /* @__PURE__ */ Object.create(null);
  if (!e2 || !e2.type)
    throw new Error("mdast-util-definitions expected node");
  return DV2(e2, "definition", (r) => {
    const i = Mt(r.identifier);
    i && !jt.call(t, i) && (t[i] = r);
  }), n;
  function n(r) {
    const i = Mt(r);
    return i && jt.call(t, i) ? t[i] : null;
  }
}
function Mt(e2) {
  return String(e2 || "").toUpperCase();
}
var Oe = {}.hasOwnProperty;
function Ol(e2, t) {
  const n = t || {}, r = n.allowDangerousHtml || false, i = {};
  return u.dangerous = r, u.clobberPrefix = n.clobberPrefix === void 0 || n.clobberPrefix === null ? "user-content-" : n.clobberPrefix, u.footnoteLabel = n.footnoteLabel || "Footnotes", u.footnoteLabelTagName = n.footnoteLabelTagName || "h2", u.footnoteLabelProperties = n.footnoteLabelProperties || {
    className: ["sr-only"]
  }, u.footnoteBackLabel = n.footnoteBackLabel || "Back to content", u.unknownHandler = n.unknownHandler, u.passThrough = n.passThrough, u.handlers = { ...Tl, ...n.handlers }, u.definition = zl(e2), u.footnoteById = i, u.footnoteOrder = [], u.footnoteCounts = {}, u.patch = Pl, u.applyData = Ll, u.one = a, u.all = s, u.wrap = Nl, u.augment = l, DV2(e2, "footnoteDefinition", (o) => {
    const c = String(o.identifier).toUpperCase();
    Oe.call(i, c) || (i[c] = o);
  }), u;
  function l(o, c) {
    if (o && "data" in o && o.data) {
      const m = o.data;
      m.hName && (c.type !== "element" && (c = {
        type: "element",
        tagName: "",
        properties: {},
        children: []
      }), c.tagName = m.hName), c.type === "element" && m.hProperties && (c.properties = { ...c.properties, ...m.hProperties }), "children" in c && c.children && m.hChildren && (c.children = m.hChildren);
    }
    if (o) {
      const m = "type" in o ? o : { position: o };
      Al(m) || (c.position = { start: Xee(m), end: BWe(m) });
    }
    return c;
  }
  function u(o, c, m, g) {
    return Array.isArray(m) && (g = m, m = {}), l(o, {
      type: "element",
      tagName: c,
      properties: m || {},
      children: g || []
    });
  }
  function a(o, c) {
    return gn(u, o, c);
  }
  function s(o) {
    return et(u, o);
  }
}
function Pl(e2, t) {
  e2.position && (t.position = H0r(e2));
}
function Ll(e2, t) {
  let n = t;
  if (e2 && e2.data) {
    const r = e2.data.hName, i = e2.data.hChildren, l = e2.data.hProperties;
    typeof r == "string" && (n.type === "element" ? n.tagName = r : n = {
      type: "element",
      tagName: r,
      properties: {},
      children: []
    }), n.type === "element" && l && (n.properties = { ...n.properties, ...l }), "children" in n && n.children && i !== null && i !== void 0 && (n.children = i);
  }
  return n;
}
function gn(e2, t, n) {
  const r = t && t.type;
  if (!r)
    throw new Error("Expected node, got `" + t + "`");
  return Oe.call(e2.handlers, r) ? e2.handlers[r](e2, t, n) : e2.passThrough && e2.passThrough.includes(r) ? "children" in t ? { ...t, children: et(e2, t) } : t : e2.unknownHandler ? e2.unknownHandler(e2, t, n) : Fl(e2, t);
}
function et(e2, t) {
  const n = [];
  if ("children" in t) {
    const r = t.children;
    let i = -1;
    for (; ++i < r.length; ) {
      const l = gn(e2, r[i], t);
      if (l) {
        if (i && r[i - 1].type === "break" && (!Array.isArray(l) && l.type === "text" && (l.value = l.value.replace(/^\s+/, "")), !Array.isArray(l) && l.type === "element")) {
          const u = l.children[0];
          u && u.type === "text" && (u.value = u.value.replace(/^\s+/, ""));
        }
        Array.isArray(l) ? n.push(...l) : n.push(l);
      }
    }
  }
  return n;
}
function Fl(e2, t) {
  const n = t.data || {}, r = "value" in t && !(Oe.call(n, "hProperties") || Oe.call(n, "hChildren")) ? { type: "text", value: t.value } : {
    type: "element",
    tagName: "div",
    properties: {},
    children: et(e2, t)
  };
  return e2.patch(t, r), e2.applyData(t, r);
}
function Nl(e2, t) {
  const n = [];
  let r = -1;
  for (t && n.push({ type: "text", value: `
` }); ++r < e2.length; )
    r && n.push({ type: "text", value: `
` }), n.push(e2[r]);
  return t && e2.length > 0 && n.push({ type: "text", value: `
` }), n;
}
function Bl(e2) {
  const t = [];
  let n = -1;
  for (; ++n < e2.footnoteOrder.length; ) {
    const r = e2.footnoteById[e2.footnoteOrder[n]];
    if (!r)
      continue;
    const i = e2.all(r), l = String(r.identifier).toUpperCase(), u = xe(l.toLowerCase());
    let a = 0;
    const s = [];
    for (; ++a <= e2.footnoteCounts[l]; ) {
      const m = {
        type: "element",
        tagName: "a",
        properties: {
          href: "#" + e2.clobberPrefix + "fnref-" + u + (a > 1 ? "-" + a : ""),
          dataFootnoteBackref: true,
          className: ["data-footnote-backref"],
          ariaLabel: e2.footnoteBackLabel
        },
        children: [{ type: "text", value: "â©" }]
      };
      a > 1 && m.children.push({
        type: "element",
        tagName: "sup",
        children: [{ type: "text", value: String(a) }]
      }), s.length > 0 && s.push({ type: "text", value: " " }), s.push(m);
    }
    const o = i[i.length - 1];
    if (o && o.type === "element" && o.tagName === "p") {
      const m = o.children[o.children.length - 1];
      m && m.type === "text" ? m.value += " " : o.children.push({ type: "text", value: " " }), o.children.push(...s);
    } else
      i.push(...s);
    const c = {
      type: "element",
      tagName: "li",
      properties: { id: e2.clobberPrefix + "fn-" + u },
      children: e2.wrap(i, true)
    };
    e2.patch(r, c), t.push(c);
  }
  if (t.length !== 0)
    return {
      type: "element",
      tagName: "section",
      properties: { dataFootnotes: true, className: ["footnotes"] },
      children: [
        {
          type: "element",
          tagName: e2.footnoteLabelTagName,
          properties: {
            // To do: use structured clone.
            ...JSON.parse(JSON.stringify(e2.footnoteLabelProperties)),
            id: "footnote-label"
          },
          children: [{ type: "text", value: e2.footnoteLabel }]
        },
        { type: "text", value: `
` },
        {
          type: "element",
          tagName: "ol",
          properties: {},
          children: e2.wrap(t, true)
        },
        { type: "text", value: `
` }
      ]
    };
}
function dn(e2, t) {
  const n = Ol(e2, t), r = n.one(e2, null), i = Bl(n);
  return i && r.children.push({ type: "text", value: `
` }, i), Array.isArray(r) ? { type: "root", children: r } : r;
}
var _l = (
  /** @type {(import('unified').Plugin<[Processor, Options?]|[null|undefined, Options?]|[Options]|[], MdastRoot>)} */
  function(e2, t) {
    return e2 && "run" in e2 ? Rl(e2, t) : jl(e2 || t);
  }
);
var Dl = _l;
function Rl(e2, t) {
  return (n, r, i) => {
    e2.run(dn(n, t), r, (l) => {
      i(l);
    });
  };
}
function jl(e2) {
  return (t) => dn(t, e2);
}
function Ml(e2) {
  if (e2.allowedElements && e2.disallowedElements)
    throw new TypeError(
      "Only one of `allowedElements` and `disallowedElements` should be defined"
    );
  if (e2.allowedElements || e2.disallowedElements || e2.allowElement)
    return (t) => {
      DV2(t, "element", (n, r, i) => {
        const l = (
          /** @type {Element|Root} */
          i
        );
        let u;
        if (e2.allowedElements ? u = !e2.allowedElements.includes(n.tagName) : e2.disallowedElements && (u = e2.disallowedElements.includes(n.tagName)), !u && e2.allowElement && typeof r == "number" && (u = !e2.allowElement(n, r, l)), u && typeof r == "number")
          return e2.unwrapDisallowed && n.children ? l.children.splice(r, 1, ...n.children) : l.children.splice(r, 1), r;
      });
    };
}
function Hl(e2) {
  const t = (
    // @ts-expect-error looks like a node.
    e2 && typeof e2 == "object" && e2.type === "text" ? (
      // @ts-expect-error looks like a text.
      e2.value || ""
    ) : e2
  );
  return typeof t == "string" && t.replace(/[ \t\n\f\r]/g, "") === "";
}
var tt = { exports: {} };
var Ht = /\/\*[^*]*\*+([^/*][^*]*\*+)*\//g;
var ql = /\n/g;
var Vl = /^\s*/;
var vl = /^(\*?[-#/*\\\w]+(\[[0-9a-z_-]+\])?)\s*/;
var $l = /^:\s*/;
var Ul = /^((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^)]*?\)|[^};])+)/;
var Ql = /^[;\s]*/;
var Wl = /^\s+|\s+$/g;
var Gl = `
`;
var qt = "/";
var Vt = "*";
var fe = "";
var Xl = "comment";
var Yl = "declaration";
var Jl = function(e2, t) {
  if (typeof e2 != "string")
    throw new TypeError("First argument must be a string");
  if (!e2)
    return [];
  t = t || {};
  var n = 1, r = 1;
  function i(b) {
    var x = b.match(ql);
    x && (n += x.length);
    var S = b.lastIndexOf(Gl);
    r = ~S ? b.length - S : r + b.length;
  }
  function l() {
    var b = { line: n, column: r };
    return function(x) {
      return x.position = new u(b), o(), x;
    };
  }
  function u(b) {
    this.start = b, this.end = { line: n, column: r }, this.source = t.source;
  }
  u.prototype.content = e2;
  function a(b) {
    var x = new Error(
      t.source + ":" + n + ":" + r + ": " + b
    );
    if (x.reason = b, x.filename = t.source, x.line = n, x.column = r, x.source = e2, !t.silent)
      throw x;
  }
  function s(b) {
    var x = b.exec(e2);
    if (x) {
      var S = x[0];
      return i(S), e2 = e2.slice(S.length), x;
    }
  }
  function o() {
    s(Vl);
  }
  function c(b) {
    var x;
    for (b = b || []; x = m(); )
      x !== false && b.push(x);
    return b;
  }
  function m() {
    var b = l();
    if (!(qt != e2.charAt(0) || Vt != e2.charAt(1))) {
      for (var x = 2; fe != e2.charAt(x) && (Vt != e2.charAt(x) || qt != e2.charAt(x + 1)); )
        ++x;
      if (x += 2, fe === e2.charAt(x - 1))
        return a("End of comment missing");
      var S = e2.slice(2, x - 2);
      return r += 2, i(S), e2 = e2.slice(x), r += 2, b({
        type: Xl,
        comment: S
      });
    }
  }
  function g() {
    var b = l(), x = s(vl);
    if (x) {
      if (m(), !s($l))
        return a("property missing ':'");
      var S = s(Ul), k = b({
        type: Yl,
        property: vt(x[0].replace(Ht, fe)),
        value: S ? vt(S[0].replace(Ht, fe)) : fe
      });
      return s(Ql), k;
    }
  }
  function h() {
    var b = [];
    c(b);
    for (var x; x = g(); )
      x !== false && (b.push(x), c(b));
    return b;
  }
  return o(), h();
};
function vt(e2) {
  return e2 ? e2.replace(Wl, fe) : fe;
}
var Kl = Jl;
function yn(e2, t) {
  var n = null;
  if (!e2 || typeof e2 != "string")
    return n;
  for (var r, i = Kl(e2), l = typeof t == "function", u, a, s = 0, o = i.length; s < o; s++)
    r = i[s], u = r.property, a = r.value, l ? t(u, a, r) : a && (n || (n = {}), n[u] = a);
  return n;
}
tt.exports = yn;
tt.exports.default = yn;
var Zl = tt.exports;
var eu = sn(Zl);
var Xe = {}.hasOwnProperty;
var tu = /* @__PURE__ */ new Set(["table", "thead", "tbody", "tfoot", "tr"]);
function xn(e2, t) {
  const n = [];
  let r = -1, i;
  for (; ++r < t.children.length; )
    i = t.children[r], i.type === "element" ? n.push(nu(e2, i, r, t)) : i.type === "text" ? (t.type !== "element" || !tu.has(t.tagName) || !Hl(i)) && n.push(i.value) : i.type === "raw" && !e2.options.skipHtml && n.push(i.value);
  return n;
}
function nu(e2, t, n, r) {
  const i = e2.options, l = i.transformLinkUri === void 0 ? ti : i.transformLinkUri, u = e2.schema, a = t.tagName, s = {};
  let o = u, c;
  if (u.space === "html" && a === "svg" && (o = aS, e2.schema = o), t.properties)
    for (c in t.properties)
      Xe.call(t.properties, c) && iu(s, c, t.properties[c], e2);
  (a === "ol" || a === "ul") && e2.listDepth++;
  const m = xn(e2, t);
  (a === "ol" || a === "ul") && e2.listDepth--, e2.schema = u;
  const g = t.position || {
    start: {
      line: null,
      column: null,
      offset: null
    },
    end: {
      line: null,
      column: null,
      offset: null
    }
  }, h = i.components && Xe.call(i.components, a) ? i.components[a] : a, b = typeof h == "string" || h === import_react.default.Fragment;
  if (!v0r.isValidElementType(h))
    throw new TypeError(`Component for name \`${a}\` not defined or is not renderable`);
  if (s.key = n, a === "a" && i.linkTarget && (s.target = typeof i.linkTarget == "function" ? i.linkTarget(String(s.href || ""), t.children, typeof s.title == "string" ? s.title : null) : i.linkTarget), a === "a" && l && (s.href = l(String(s.href || ""), t.children, typeof s.title == "string" ? s.title : null)), !b && a === "code" && r.type === "element" && r.tagName !== "pre" && (s.inline = true), !b && (a === "h1" || a === "h2" || a === "h3" || a === "h4" || a === "h5" || a === "h6") && (s.level = Number.parseInt(a.charAt(1), 10)), a === "img" && i.transformImageUri && (s.src = i.transformImageUri(String(s.src || ""), String(s.alt || ""), typeof s.title == "string" ? s.title : null)), !b && a === "li" && r.type === "element") {
    const x = ru(t);
    s.checked = x && x.properties ? !!x.properties.checked : null, s.index = Ve(r, t), s.ordered = r.tagName === "ol";
  }
  return !b && (a === "ol" || a === "ul") && (s.ordered = a === "ol", s.depth = e2.listDepth), (a === "td" || a === "th") && (s.align && (s.style || (s.style = {}), s.style.textAlign = s.align, delete s.align), b || (s.isHeader = a === "th")), !b && a === "tr" && r.type === "element" && (s.isHeader = r.tagName === "thead"), i.sourcePos && (s["data-sourcepos"] = au(g)), !b && i.rawSourcePos && (s.sourcePosition = t.position), !b && i.includeElementIndex && (s.index = Ve(r, t), s.siblingCount = Ve(r)), b || (s.node = t), m.length > 0 ? import_react.default.createElement(h, s, m) : import_react.default.createElement(h, s);
}
function ru(e2) {
  let t = -1;
  for (; ++t < e2.children.length; ) {
    const n = e2.children[t];
    if (n.type === "element" && n.tagName === "input")
      return n;
  }
  return null;
}
function Ve(e2, t) {
  let n = -1, r = 0;
  for (; ++n < e2.children.length && e2.children[n] !== t; )
    e2.children[n].type === "element" && r++;
  return r;
}
function iu(e2, t, n, r) {
  const i = e1e(r.schema, t);
  let l = n;
  l == null || l !== l || (Array.isArray(l) && (l = i.commaSeparated ? YV2(l) : ZV2(l)), i.property === "style" && typeof l == "string" && (l = lu(l)), i.space && i.property ? e2[Xe.call(ct, i.property) ? ct[i.property] : i.property] = l : i.attribute && (e2[i.attribute] = l));
}
function lu(e2) {
  const t = {};
  try {
    eu(e2, n);
  } catch {
  }
  return t;
  function n(r, i) {
    const l = r.slice(0, 4) === "-ms-" ? `ms-${r.slice(4)}` : r;
    t[l.replace(/-([a-z])/g, uu)] = i;
  }
}
function uu(e2, t) {
  return t.toUpperCase();
}
function au(e2) {
  return [e2.start.line, ":", e2.start.column, "-", e2.end.line, ":", e2.end.column].map(String).join("");
}
var $t = {}.hasOwnProperty;
var ou = "https://github.com/remarkjs/react-markdown/blob/main/changelog.md";
var Te = {
  plugins: {
    to: "remarkPlugins",
    id: "change-plugins-to-remarkplugins"
  },
  renderers: {
    to: "components",
    id: "change-renderers-to-components"
  },
  astPlugins: {
    id: "remove-buggy-html-in-markdown-parser"
  },
  allowDangerousHtml: {
    id: "remove-buggy-html-in-markdown-parser"
  },
  escapeHtml: {
    id: "remove-buggy-html-in-markdown-parser"
  },
  source: {
    to: "children",
    id: "change-source-to-children"
  },
  allowNode: {
    to: "allowElement",
    id: "replace-allownode-allowedtypes-and-disallowedtypes"
  },
  allowedTypes: {
    to: "allowedElements",
    id: "replace-allownode-allowedtypes-and-disallowedtypes"
  },
  disallowedTypes: {
    to: "disallowedElements",
    id: "replace-allownode-allowedtypes-and-disallowedtypes"
  },
  includeNodeIndex: {
    to: "includeElementIndex",
    id: "change-includenodeindex-to-includeelementindex"
  }
};
function su(e2) {
  for (const l in Te)
    if ($t.call(Te, l) && $t.call(e2, l)) {
      const u = Te[l];
      console.warn(`[react-markdown] Warning: please ${u.to ? `use \`${u.to}\` instead of` : "remove"} \`${l}\` (see <${ou}#${u.id}> for more info)`), delete Te[l];
    }
  const t = yi().use(el).use(e2.remarkPlugins || []).use(Dl, {
    ...e2.remarkRehypeOptions,
    allowDangerousHtml: true
  }).use(e2.rehypePlugins || []).use(Ml, e2), n = new nn();
  typeof e2.children == "string" ? n.value = e2.children : e2.children !== void 0 && e2.children !== null && console.warn(`[react-markdown] Warning: please pass a string as \`children\` (not: \`${e2.children}\`)`);
  const r = t.runSync(t.parse(n), n);
  if (r.type !== "root")
    throw new TypeError("Expected a `root` node");
  let i = d(p1, {
    children: xn({
      options: e2,
      schema: bH,
      listDepth: 0
    }, r)
  });
  return e2.className && (i = d("div", {
    className: e2.className,
    children: i
  })), i;
}
su.propTypes = {
  // Core options:
  children: v1.string,
  // Layout options:
  className: v1.string,
  // Filter options:
  allowElement: v1.func,
  allowedElements: v1.arrayOf(v1.string),
  disallowedElements: v1.arrayOf(v1.string),
  unwrapDisallowed: v1.bool,
  // Plugin options:
  remarkPlugins: v1.arrayOf(v1.oneOfType([v1.object, v1.func, v1.arrayOf(v1.oneOfType([v1.bool, v1.string, v1.object, v1.func, v1.arrayOf(
    // prettier-ignore
    // type-coverage:ignore-next-line
    v1.any
  )]))])),
  rehypePlugins: v1.arrayOf(v1.oneOfType([v1.object, v1.func, v1.arrayOf(v1.oneOfType([v1.bool, v1.string, v1.object, v1.func, v1.arrayOf(
    // prettier-ignore
    // type-coverage:ignore-next-line
    v1.any
  )]))])),
  // Transform options:
  sourcePos: v1.bool,
  rawSourcePos: v1.bool,
  skipHtml: v1.bool,
  includeElementIndex: v1.bool,
  transformLinkUri: v1.oneOfType([v1.func, v1.bool]),
  linkTarget: v1.oneOfType([v1.func, v1.string]),
  transformImageUri: v1.func,
  components: v1.object
};
export {
  su as default,
  ti as uriTransformer
};
/*! Bundled license information:

lowcoder-sdk/dist/2a12f2bc.js:
  (*!
   * Determine if an object is a Buffer
   *
   * @author   Feross Aboukhadijeh <https://feross.org>
   * @license  MIT
   *)
*/
//# sourceMappingURL=2a12f2bc-KD7P7N3R.js.map
