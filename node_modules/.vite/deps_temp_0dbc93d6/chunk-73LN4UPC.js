import {
  at as at2
} from "./chunk-6QEPQE7Z.js";
import {
  J,
  Z,
  ze
} from "./chunk-EKQL2BCI.js";
import {
  b
} from "./chunk-MKBWIDPH.js";
import {
  te
} from "./chunk-WX2SP7KE.js";
import {
  $o,
  Mo,
  S,
  at,
  lt,
  nt,
  st,
  vo,
  w,
  wt,
  xo,
  yo,
  z
} from "./chunk-NCDKRTSH.js";
import {
  $Qe,
  $se,
  H0,
  HQe,
  Ih,
  J72,
  Jo,
  LC,
  N0,
  NQe,
  Oc,
  Qn,
  Rw,
  S0,
  U8,
  Vr,
  W8,
  _,
  d,
  d3,
  dg,
  h1,
  h2,
  hc,
  il,
  j2e,
  s11,
  s4,
  vo as vo2
} from "./chunk-2ZELARZW.js";
import {
  require_react_dom
} from "./chunk-VGGCA2L5.js";
import {
  require_react
} from "./chunk-73THXJN7.js";
import {
  __toESM
} from "./chunk-2TUXWMP5.js";

// node_modules/lowcoder-sdk/dist/e830a3ab.js
var import_react = __toESM(require_react(), 1);
var import_react_dom = __toESM(require_react_dom(), 1);
var O = Object.defineProperty;
var K = (e, s, t) => s in e ? O(e, s, { enumerable: true, configurable: true, writable: true, value: t }) : e[s] = t;
var x = (e, s, t) => (K(e, typeof s != "symbol" ? s + "" : s, t), t);
var De = class extends ze {
  constructor() {
    super(...arguments);
    x(this, "prevUnevaledValue");
    x(this, "filterData", []);
    x(this, "columnAggrData", {});
  }
  autoHeight() {
    return this.children.autoHeight.getView();
  }
  getTableAutoHeight() {
    return this.children.autoHeight.getView();
  }
  getSlotContainer() {
    return this.children.expansion.children.slot.getSelectedComp().getComp().children.container;
  }
  findContainer(t) {
    return this.getSlotContainer().findContainer(t);
  }
  getCompTree() {
    return this.getSlotContainer().getCompTree();
  }
  getPasteValue(t) {
    return {
      ...this.toJsonValue(),
      expansion: this.children.expansion.getPasteValue(t)
    };
  }
  realSimpleContainer(t) {
    return this.getSlotContainer().realSimpleContainer(t);
  }
  downloadData(t) {
    j2e({
      data: this.exposingValues.displayData,
      filename: t,
      fileType: "csv",
      delimiter: this.children.toolbar.children.columnSeparator.getView()
    });
  }
  refreshData(t, a) {
    const o = this.children.data.exposingNode().dependNames().map((i) => i.split(".")[0]);
    if (h1.isEmpty(o)) {
      a(true), setTimeout(() => a(false), 200);
      return;
    }
    const r = new Set(t);
    o.forEach((i) => {
      r.has(i) && this.dispatch(il(Ih(i, W8({}))));
    });
  }
  // only for test?
  getProps() {
    return dg(h1.omit(this.children, "style"));
  }
  shouldGenerateColumn(t, a) {
    const n = t.children.columns.getView().map((l) => {
      const h = l.getView();
      return h.isCustom ? "" : h.dataIndex;
    }).filter((l) => !!l), o = t.children.data.unevaledValue, r = this.prevUnevaledValue;
    if (!a)
      return this.prevUnevaledValue = o, false;
    let i = false;
    const d2 = Object.keys(a), p = t.children.dynamicColumn.getView();
    if ((!r && n.length === 0 || r && o !== r || p || n.length < d2.length && n.every((l) => d2.includes(l))) && (i = true), !i) {
      const l = t.children.dataRowExample.getView(), h = n.length !== d2.length || !h1.isEqual(h1.sortBy(n), h1.sortBy(d2));
      h && !h1.isEqual(l, a) ? setTimeout(() => {
        t.children.dataRowExample.dispatchChangeValueAction(a);
      }) : !h && l && setTimeout(() => {
        t.children.dataRowExample.dispatchChangeValueAction(null);
      });
    }
    return this.prevUnevaledValue = o, i;
  }
  reduce(t) {
    let a = super.reduce(t), n = false;
    if (t.type === h2.UPDATE_NODES_V2) {
      const l = wt(a.children.data.getView());
      if (n = a.children.data !== this.children.data && !h1.isEqual(this.children.data.getView(), a.children.data.getView()), n && (a = a.setChild("rowColor", a.children.rowColor.reduce(J.changeContextDataAction({
        currentRow: l,
        currentIndex: 0,
        currentOriginalIndex: 0,
        columnTitle: l ? Object.keys(l)[0] : void 0
      }))), a = a.setChild("rowHeight", a.children.rowHeight.reduce(Z.changeContextDataAction({
        currentRow: l,
        currentIndex: 0,
        currentOriginalIndex: 0,
        columnTitle: l ? Object.keys(l)[0] : void 0
      })))), n) {
        const h = a.shouldGenerateColumn(a, l), g = [];
        g.push(s4("columns", a.children.columns.dataChangedAction({
          rowExample: l || {},
          doGeneColumn: h,
          dynamicColumn: a.children.dynamicColumn.getView(),
          data: a.children.data.getView()
        }))), h && g.push(a.changeChildAction("dataRowExample", null)), setTimeout(() => {
          g.forEach((P) => a.dispatch(il(P)));
        }, 0);
      }
    }
    let o = false;
    const r = te(this.children.selection)[0] ?? "0", i = te(a.children.selection)[0] ?? "0", d2 = this.children.selection !== a.children.selection && r !== i;
    (t.type === h2.CUSTOM && a.children.columns.getView().length !== this.children.columns.getView().length || d2) && (a = a.setChild("columns", a.children.columns.reduce(a.children.columns.setSelectionAction(i))), o = true);
    let p = a.children.expansion.children.slot.getCachedParams(i);
    return (d2 || h1.isNil(p) || n) && (p = h1.isNil(p) || n ? vo(a.filterData, i) : void 0, a = a.setChild("expansion", a.children.expansion.reduce(a.children.expansion.setSelectionAction(i, p))), o = true), t.type === h2.UPDATE_NODES_V2 && o && setTimeout(() => a.dispatch(J72())), a;
  }
  extraNode() {
    return {
      node: {
        sortedData: this.sortDataNode(),
        filterData: this.filterNode(),
        oriDisplayData: this.oriDisplayDataNode(),
        columnAggrData: this.columnAggrNode()
      },
      updateNodeFields: (a) => ({
        filterData: a.filterData,
        columnAggrData: a.columnAggrData
      })
    };
  }
  // handle sort: data -> sortedData
  sortDataNode() {
    const t = {
      data: this.children.data.exposingNode(),
      sort: this.children.sort.node(),
      dataIndexes: this.children.columns.getColumnsNode("dataIndex"),
      sortables: this.children.columns.getColumnsNode("sortable")
    }, a = hc(d3(t), (n) => {
      const {
        data: o,
        sort: r,
        dataIndexes: i,
        sortables: d2
      } = n, p = h1(i).mapValues((h, g) => ({
        sortable: !!d2[g]
      })).mapKeys((h, g) => i[g]).value();
      return xo(o, p, r);
    });
    return S0(this, "sortedDataNode", [a, t], (n, o) => LC(n[1], o[1]))[0];
  }
  // handle hide/search/filter: sortedData->filteredData
  filterNode() {
    const t = {
      data: this.sortDataNode(),
      searchValue: this.children.searchText.node(),
      filter: this.children.toolbar.children.filter.node(),
      showFilter: this.children.toolbar.children.showFilter.node()
    };
    let a = this;
    const n = hc(d3(t), (o) => {
      const {
        data: r,
        searchValue: i,
        filter: d2,
        showFilter: p
      } = o, l = yo(r, i.value, d2, p.value);
      if (i.value && r.length !== l.length) {
        const h = a.children.onEvent.getView();
        setTimeout(() => {
          h("dataSearch");
        });
      }
      return l.map((h) => lt(h, h[w]));
    });
    return S0(this, "filteredDataNode", [n, t], (o, r) => LC(o[1], r[1]))[0];
  }
  oriDisplayDataNode() {
    const t = {
      data: this.filterNode(),
      // --> pageSize
      showSizeChanger: this.children.pagination.children.showSizeChanger.node(),
      pageSize: this.children.pagination.children.pageSize.node(),
      pageSizeOptions: this.children.pagination.children.pageSizeOptions.node(),
      changablePageSize: this.children.pagination.children.changeablePageSize.node(),
      // <-- pageSize
      withParams: this.children.columns.withParamsNode(),
      dataIndexes: this.children.columns.getColumnsNode("dataIndex")
    }, a = hc(d3(t), (n) => {
      const o = h1(n.dataIndexes).mapValues((i, d2) => ({
        dataIndex: i,
        render: n.withParams[d2]
      })).value(), r = b(n.showSizeChanger.value, n.pageSize.value, n.pageSizeOptions.value, n.changablePageSize);
      return at(n.data, r, Object.values(o));
    });
    return S0(this, "oriDisplayDataNode", [a, t], (n, o) => LC(n[1], o[1]))[0];
  }
  displayDataIndexesNode() {
    const t = {
      oriDisplayData: this.oriDisplayDataNode()
    }, a = hc(d3(t), (n) => h1(n.oriDisplayData).map((o, r) => [o[w], r]).fromPairs().value());
    return S0(this, "displayDataIndexesNode", [a, t], (n, o) => LC(n[1], o[1]))[0];
  }
  getUpsertSetResNode(t, a) {
    return hc(d3(t), (n) => {
      const o = h1(n.dataIndexes).mapValues((i, d2) => n.renders[d2]).mapKeys((i, d2) => n.dataIndexes[d2]).value(), r = {};
      return h1.forEach(o, (i, d2) => {
        h1.forEach(i[Jo], (p, l) => {
          const h = p.comp.comp.changeValue, g = a && l.startsWith(z) || !a && !l.startsWith(z);
          !h1.isNil(h) && g && (r[l] || (r[l] = {}), r[l][d2] = h);
        });
      }), r;
    });
  }
  changeSetNode() {
    const t = {
      dataIndexes: this.children.columns.getColumnsNode("dataIndex"),
      renders: this.children.columns.getColumnsNode("render")
    }, a = this.getUpsertSetResNode(t);
    return S0(this, "changeSetNode", [a, t], (n, o) => LC(n[1], o[1]))[0];
  }
  insertSetNode() {
    const t = {
      dataIndexes: this.children.columns.getColumnsNode("dataIndex"),
      renders: this.children.columns.getColumnsNode("render")
    }, a = this.getUpsertSetResNode(t, true);
    return S0(this, "insertSetNode", [a, t], (n, o) => LC(n[1], o[1]))[0];
  }
  getToUpsertRowsResNodes(t) {
    return hc(d3(t), (a) => h1(a.changeSet).map((o, r) => {
      const i = a.indexes[r];
      return {
        ...h1.omit(a.oriDisplayData[i], w),
        ...o
      };
    }).value());
  }
  toUpdateRowsNode() {
    const t = {
      oriDisplayData: this.oriDisplayDataNode(),
      indexes: this.displayDataIndexesNode(),
      changeSet: this.changeSetNode()
    }, a = this.getToUpsertRowsResNodes(t);
    return S0(this, "toUpdateRowsNode", [a, t], (n, o) => LC(n[1], o[1]))[0];
  }
  toInsertRowsNode() {
    const t = {
      oriDisplayData: this.oriDisplayDataNode(),
      indexes: this.displayDataIndexesNode(),
      changeSet: this.insertSetNode()
    }, a = this.getToUpsertRowsResNodes(t);
    return S0(this, "toInsertRowsNode", [a, t], (n, o) => LC(n[1], o[1]))[0];
  }
  columnAggrNode() {
    const t = {
      oriDisplayData: this.oriDisplayDataNode(),
      withParams: this.children.columns.withParamsNode(),
      dataIndexes: this.children.columns.getColumnsNode("dataIndex")
    }, a = hc(d3(t), (n) => {
      const o = h1(n.dataIndexes).mapValues((i, d2) => n.withParams[d2]).mapKeys((i, d2) => n.dataIndexes[d2]).value();
      return $o(n.oriDisplayData, o);
    });
    return S0(this, "columnAggrNode", [a, t], (n, o) => LC(n[1], o[1]))[0];
  }
};
var S2 = Oc(De, (e) => ((0, import_react.useState)([]), d(Rw, {
  hidden: e.children.hidden.getView(),
  children: d(Mo, {
    comp: e,
    onRefresh: (s, t) => e.refreshData(s, t),
    onDownload: (s) => e.downloadData(s)
  })
})));
var we = (e) => (s) => {
  const t = (0, import_react.useContext)(Vr).editorModeStatus;
  return d(e, {
    ...s,
    editorModeStatus: t
  });
};
S2 = Qn(S2, (e) => we(at2)(e));
S2 = $se(S2, (e) => (s) => {
  if (e) {
    if (s11(s)) {
      const t = s.value.context;
      if (t && !h1.isNil(t.currentOriginalIndex)) {
        const a = t.currentOriginalIndex + "";
        e(s4("selection", U8("selectedRowKey", a, false)));
      }
    }
    return e(s);
  }
});
function A(e, s) {
  const t = (s + "").split("-");
  let a = e, n;
  for (let o of t) {
    const r = Number(o);
    r >= 0 && Array.isArray(a) && r < a.length && (n = a[r], a = n[S]);
  }
  return n;
}
function T(e, s) {
  const t = s.split("-"), a = t[0];
  if (!a)
    return "";
  let n;
  return e.forEach((o, r) => {
    o[w] === a && (n = r);
  }), n && t.length > 1 ? [n, ...t.slice(1)].join("-") : n;
}
S2 = N0(S2, [{
  method: {
    name: "setFilter",
    description: "",
    params: [{
      name: "filter",
      type: "JSON"
    }]
  },
  execute: (e, s) => {
    if (s[0]) {
      const t = s[0], a = e.children.toolbar.children.filter.getView();
      e.children.toolbar.children.filter.dispatchChangeValueAction({
        ...a,
        ...t
      });
    }
  }
}, {
  method: {
    name: "setPage",
    description: "",
    params: [{
      name: "page",
      type: "number"
    }]
  },
  execute: (e, s) => {
    const t = s[0];
    t && t > 0 && e.children.pagination.children.pageNo.dispatchChangeValueAction(t);
  }
}, {
  method: {
    name: "setSort",
    description: "",
    params: [{
      name: "sortColumn",
      type: "string"
    }, {
      name: "sortDesc",
      type: "boolean"
    }]
  },
  execute: (e, s) => {
    s[0] && e.children.sort.dispatchChangeValueAction([{
      column: s[0],
      desc: s[1]
    }]);
  }
}, {
  method: {
    name: "resetSelections",
    description: "",
    params: []
  },
  execute: (e) => {
    e.children.selection.children.selectedRowKey.dispatchChangeValueAction("0"), e.children.selection.children.selectedRowKeys.dispatchChangeValueAction([]);
  }
}, {
  method: {
    name: "cancelChanges",
    description: "",
    params: []
  },
  execute: (e, s) => {
    e.children.columns.dispatchClearChangeSet();
  }
}, {
  method: {
    name: "cancelInsertChanges",
    description: "",
    params: []
  },
  execute: (e, s) => {
    e.children.columns.dispatchClearInsertSet();
  }
}]);
var dt = H0(S2, [new $Qe("selectedRow", (e) => ({
  selectedRowKey: e.selection.children.selectedRowKey.node(),
  data: e.data.exposingNode()
}), (e) => {
  if (e.data)
    return A(e.data, e.selectedRowKey);
}, _("table.selectedRowDesc")), new $Qe("selectedRows", (e) => ({
  selectedRowKeys: e.selection.children.selectedRowKeys.node(),
  data: e.data.exposingNode()
}), (e) => {
  if (e.data)
    return e.selectedRowKeys.flatMap((s) => {
      const t = A(e.data, s);
      return t === void 0 ? [] : [t];
    });
}, _("table.selectedRowsDesc")), new NQe("selectedIndex", (e) => ({
  oriDisplayData: e.oriDisplayDataNode(),
  selectedRowKey: e.children.selection.children.selectedRowKey.node()
}), (e) => T(e.oriDisplayData, e.selectedRowKey), _("table.selectedIndexDesc")), new NQe("selectedIndexes", (e) => ({
  oriDisplayData: e.oriDisplayDataNode(),
  selectedRowKeys: e.children.selection.children.selectedRowKeys.node()
}), (e) => e.selectedRowKeys.flatMap((s) => {
  const t = T(e.oriDisplayData, s);
  return t === void 0 ? [] : [t];
}), _("table.selectedIndexDesc")), new NQe("changeSet", (e) => ({
  changeSet: e.changeSetNode()
}), (e) => e.changeSet, _("table.changeSetDesc")), new NQe("insertSet", (e) => ({
  insertSet: e.insertSetNode()
}), (e) => e.insertSet, _("table.changeSetDesc")), new NQe("toUpdateRows", (e) => ({
  toUpdateRows: e.toUpdateRowsNode()
}), (e) => e.toUpdateRows, _("table.toUpdateRowsDesc")), new NQe("toInsertRows", (e) => ({
  toInsertRows: e.toInsertRowsNode()
}), (e) => e.toInsertRows, _("table.toUpdateRowsDesc")), new $Qe("pageNo", (e) => ({
  pageNo: e.pagination.children.pageNo.exposingNode()
}), (e) => e.pageNo, _("table.pageNoDesc")), new $Qe("pageSize", (e) => ({
  showSizeChanger: e.pagination.children.showSizeChanger.node(),
  changeablePageSize: e.pagination.children.changeablePageSize.node(),
  pageSize: e.pagination.children.pageSize.node(),
  pageSizeOptions: e.pagination.children.pageSizeOptions.node()
}), (e) => b(e.showSizeChanger.value, e.pageSize.value, e.pageSizeOptions.value, e.changeablePageSize), _("table.pageSizeDesc")), new $Qe("sortColumn", (e) => ({
  sort: e.sort.node(),
  columns: e.columns.node()
}), (e) => {
  var a;
  const s = (a = e.sort[0]) == null ? void 0 : a.column, t = Object.values(e.columns).find((n) => n.dataIndex === s);
  return t != null && t.isCustom && (t != null && t.title.value) ? t.title.value : s;
}, _("table.sortColumnDesc")), HQe({
  name: "sortDesc",
  desc: _("table.sortDesc"),
  depKeys: ["sort"],
  func: (e) => {
    var s;
    return ((s = e.sort[0]) == null ? void 0 : s.desc) || false;
  }
}), new $Qe("pageOffset", (e) => ({
  showSizeChanger: e.pagination.children.showSizeChanger.node(),
  changeablePageSize: e.pagination.children.changeablePageSize.node(),
  pageSize: e.pagination.children.pageSize.node(),
  pageSizeOptions: e.pagination.children.pageSizeOptions.node(),
  pageNo: e.pagination.children.pageNo.node()
}), (e) => b(e.showSizeChanger.value, e.pageSize.value, e.pageSizeOptions.value, e.changeablePageSize) * (e.pageNo - 1), _("table.pageOffsetDesc")), new NQe("displayData", (e) => ({
  oriDisplayData: e.oriDisplayDataNode(),
  dataIndexes: e.children.columns.getColumnsNode("dataIndex"),
  titles: e.children.columns.getColumnsNode("title"),
  // --> hide
  hides: e.children.columns.getColumnsNode("hide"),
  tempHides: e.children.columns.getColumnsNode("tempHide"),
  columnSetting: e.children.toolbar.children.columnSetting.node()
  // <-- hide
}), (e) => {
  const s = h1(e.dataIndexes).pickBy((t, a) => !nt({
    hide: e.hides[a].value,
    tempHide: e.tempHides[a],
    enableColumnSetting: e.columnSetting.value
  })).mapValues((t, a) => {
    var n;
    return (n = e.titles[a]) == null ? void 0 : n.value;
  }).mapKeys((t, a) => e.dataIndexes[a]).value();
  return st(e.oriDisplayData, s);
}, _("table.displayDataDesc")), new $Qe("filter", (e) => ({
  filter: e.toolbar.children.filter.node()
}), (e) => e.filter, _("table.filterDesc")), new $Qe("selectedCell", (e) => ({
  selectedCell: e.selectedCell.node()
}), (e) => e.selectedCell, _("table.selectedCellDesc")), new vo2("data", _("table.dataDesc"))]);

export {
  De,
  dt
};
//# sourceMappingURL=chunk-73LN4UPC.js.map
