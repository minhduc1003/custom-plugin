import {
  X
} from "./chunk-V26E4E3O.js";
import {
  f
} from "./chunk-FRVWTJX4.js";
import "./chunk-HCH6A2AU.js";
import "./chunk-VT64YZPN.js";
import {
  C5,
  E7,
  Fj1,
  H0,
  H3,
  M2,
  N,
  One,
  Vr,
  X11,
  _,
  aLe,
  ao,
  b0,
  cW1,
  ca,
  d,
  de,
  g2,
  hWe,
  ka,
  lW1,
  nc,
  om,
  p1,
  qC,
  s2e,
  t2
} from "./chunk-2ZELARZW.js";
import {
  require_react_dom
} from "./chunk-VGGCA2L5.js";
import {
  require_react
} from "./chunk-73THXJN7.js";
import {
  __toESM
} from "./chunk-2TUXWMP5.js";

// node_modules/lowcoder-sdk/dist/7e0d8a7e.js
var import_react = __toESM(require_react(), 1);
var import_react_dom = __toESM(require_react_dom(), 1);
var {
  Meta: _2
} = aLe;
var N2 = de.div`
  height: 100%;
  width: 100%;
  .ant-card-small >.ant-card-head {
    background-color: ${(t) => {
  var e;
  return (e = t.$headerStyle) == null ? void 0 : e.background;
}} !important;
    border: ${(t) => {
  var e;
  return (e = t.$headerStyle) == null ? void 0 : e.border;
}};
    border-style: ${(t) => {
  var e;
  return (e = t.$headerStyle) == null ? void 0 : e.borderStyle;
}};
    border-width: ${(t) => {
  var e;
  return (e = t.$headerStyle) == null ? void 0 : e.borderWidth;
}};
    border-radius: ${(t) => {
  var e;
  return (e = t.$headerStyle) == null ? void 0 : e.radius;
}};
    font-size: ${(t) => {
  var e;
  return (e = t.$headerStyle) == null ? void 0 : e.textSize;
}};
    font-style: ${(t) => {
  var e;
  return (e = t.$headerStyle) == null ? void 0 : e.fontStyle;
}};
    font-family: ${(t) => {
  var e;
  return (e = t.$headerStyle) == null ? void 0 : e.fontFamily;
}};
    font-weight: ${(t) => {
  var e;
  return (e = t.$headerStyle) == null ? void 0 : e.textWeight;
}};
    text-transform: ${(t) => {
  var e;
  return (e = t.$headerStyle) == null ? void 0 : e.textTransform;
}};
    text-decoration: ${(t) => {
  var e;
  return (e = t.$headerStyle) == null ? void 0 : e.textDecoration;
}};
    color: ${(t) => {
  var e;
  return (e = t.$headerStyle) == null ? void 0 : e.text;
}};
    rotate: ${(t) => {
  var e;
  return (e = t.$headerStyle) == null ? void 0 : e.rotation;
}};
    margin: ${(t) => {
  var e;
  return (e = t.$headerStyle) == null ? void 0 : e.margin;
}};
    padding: ${(t) => {
  var e;
  return (e = t.$headerStyle) == null ? void 0 : e.padding;
}};
  }
  .ant-card-head-title{
    font-size: ${(t) => {
  var e;
  return (e = t.$headerStyle) == null ? void 0 : e.textSize;
}};
    font-family: ${(t) => {
  var e;
  return (e = t.$headerStyle) == null ? void 0 : e.fontFamily;
}};
  }
  .ant-card .ant-card-actions {
    border-top: 1px solid ${(t) => {
  var e;
  return (e = t.$style) == null ? void 0 : e.border;
}};
  }
  .ant-card .ant-card-actions>li:not(:last-child) {
    border-inline-end: 1px solid ${(t) => {
  var e;
  return (e = t.$style) == null ? void 0 : e.border;
}};
  }
  .ant-card .ant-card-actions {
    background-color: ${(t) => {
  var e;
  return (e = t.$style) == null ? void 0 : e.background;
}};
  }
  .ant-card .ant-card-body {
   background-color: ${(t) => {
  var e;
  return (e = t.$bodyStyle) == null ? void 0 : e.background;
}} !important;
    border: ${(t) => {
  var e;
  return (e = t.$bodyStyle) == null ? void 0 : e.border;
}};
    border-style: ${(t) => {
  var e;
  return (e = t.$bodyStyle) == null ? void 0 : e.borderStyle;
}};
    border-width: ${(t) => {
  var e;
  return (e = t.$bodyStyle) == null ? void 0 : e.borderWidth;
}};
    border-radius: ${(t) => {
  var e;
  return (e = t.$bodyStyle) == null ? void 0 : e.radius;
}};
    rotate: ${(t) => {
  var e;
  return (e = t.$bodyStyle) == null ? void 0 : e.rotation;
}};
    margin: ${(t) => {
  var e;
  return (e = t.$bodyStyle) == null ? void 0 : e.margin;
}};
    padding: ${(t) => {
  var e;
  return (e = t.$bodyStyle) == null ? void 0 : e.padding;
}};
  }
  .ant-card {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    margin: ${(t) => {
  var e;
  return (e = t.$style) == null ? void 0 : e.margin;
}};
    padding: ${(t) => {
  var e;
  return (e = t.$style) == null ? void 0 : e.padding;
}};
    background-color: ${(t) => {
  var e;
  return (e = t.$style) == null ? void 0 : e.background;
}};
    border: ${(t) => {
  var e;
  return (e = t.$style) == null ? void 0 : e.border;
}};
    rotate: ${(t) => {
  var e;
  return (e = t.$style) == null ? void 0 : e.rotation;
}};
    border-style: ${(t) => {
  var e;
  return (e = t.$style) == null ? void 0 : e.borderStyle;
}};
    border-radius: ${(t) => {
  var e;
  return (e = t.$style) == null ? void 0 : e.radius;
}};
    border-width: ${(t) => {
  var e;
  return (e = t.$style) == null ? void 0 : e.borderWidth;
}};
    box-shadow: ${(t) => {
  var e, c;
  return `${(e = t.$style) == null ? void 0 : e.boxShadow} ${(c = t.$style) == null ? void 0 : c.boxShadowColor}`;
}};
    ${(t) => t.$animationStyle}
  }
  .ant-card-body {
    display: ${(t) => t.$showMate ? "" : "none"};
    height: ${(t) => t.$cardType == "custom" ? "100%" : "auto"};
  }
  .ant-card-body .ant-card-meta .ant-card-meta-title{
    color: ${(t) => {
  var e;
  return (e = t.$bodyStyle) == null ? void 0 : e.text;
}} !important;
    font-size: ${(t) => {
  var e;
  return (e = t.$bodyStyle) == null ? void 0 : e.textSize;
}};
    font-style: ${(t) => {
  var e;
  return (e = t.$bodyStyle) == null ? void 0 : e.fontStyle;
}};
    font-family: ${(t) => {
  var e;
  return (e = t.$bodyStyle) == null ? void 0 : e.fontFamily;
}};
    font-weight: ${(t) => {
  var e;
  return (e = t.$bodyStyle) == null ? void 0 : e.textWeight;
}};
    text-transform: ${(t) => {
  var e;
  return (e = t.$bodyStyle) == null ? void 0 : e.textTransform;
}};
    text-decoration: ${(t) => {
  var e;
  return (e = t.$bodyStyle) == null ? void 0 : e.textDecoration;
}};
  }
  .ant-card-body .ant-card-meta .ant-card-meta-description{
    color: ${(t) => {
  var e;
  return (e = t.$bodyStyle) == null ? void 0 : e.text;
}} !important;
    font-size: ${(t) => {
  var e;
  return (e = t.$bodyStyle) == null ? void 0 : e.textSize;
}};
    font-style: ${(t) => {
  var e;
  return (e = t.$bodyStyle) == null ? void 0 : e.fontStyle;
}};
    font-family: ${(t) => {
  var e;
  return (e = t.$bodyStyle) == null ? void 0 : e.fontFamily;
}};
    font-weight: ${(t) => {
  var e;
  return (e = t.$bodyStyle) == null ? void 0 : e.textWeight;
}};
    text-transform: ${(t) => {
  var e;
  return (e = t.$bodyStyle) == null ? void 0 : e.textTransform;
}};
    text-decoration: ${(t) => {
  var e;
  return (e = t.$bodyStyle) == null ? void 0 : e.textDecoration;
}};
  }
`;
var j = de.div`
  height: 100%;
  width: 100%;
`;
var G = de.div`
  pointer-events: ${(t) => t.disabled ? "none" : ""};
  svg {
    color: ${(t) => {
  var e;
  return t.disabled ? "#d9d9d9" : (e = t.$style) == null ? void 0 : e.IconColor;
}};
  }
  &:hover {
    svg {
      color: ${(t) => {
  var e;
  return (e = t.$style) == null ? void 0 : e.activateColor;
}};
    }
}
`;
var Y = [{
  label: _("card.common"),
  value: "common"
}, {
  label: _("card.custom"),
  value: "custom"
}];
var J = [{
  label: _("card.default"),
  value: "default"
}, {
  label: _("card.small"),
  value: "small"
}];
var X2 = new g2({
  label: M2,
  icon: t2(C5, "/icon:antd/settingoutlined"),
  disabled: H3,
  hidden: H3,
  onEvent: One
}, (t) => t).setPropertyViewFn((t) => N(p1, {
  children: [t.icon.propertyView({
    label: _("button.icon")
  }), qC(t), E7(t), t.onEvent.getPropertyView()]
})).build();
var Z = om(X2, {
  initOptions: [{
    label: _("optionsControl.optionI", {
      i: 1
    }),
    icon: "/icon:antd/settingoutlined"
  }, {
    label: _("optionsControl.optionI", {
      i: 2
    }),
    icon: "/icon:antd/editoutlined"
  }, {
    label: _("optionsControl.optionI", {
      i: 3
    }),
    icon: "/icon:antd/ellipsisoutlined"
  }]
});
var q = function() {
  const t = {
    showTitle: ao.DEFAULT_TRUE,
    title: t2(M2, _("card.title")),
    size: ca(J, "small"),
    extraTitle: t2(M2, _("card.more")),
    cardType: ca(Y, "common"),
    CoverImg: ao.DEFAULT_TRUE,
    imgSrc: t2(M2, "https://lowcoder.cloud/images/e0a89736c6be4393893d2981ac1fd753.png"),
    imgHeight: t2(M2, "auto"),
    showMeta: ao.DEFAULT_TRUE,
    metaTitle: t2(M2, _("card.metaTitle")),
    metaDesc: t2(M2, _("card.metaDesc")),
    hoverable: ao.DEFAULT_TRUE,
    showActionIcon: ao.DEFAULT_TRUE,
    actionOptions: Z,
    onEvent: X11,
    style: nc(lW1, "style"),
    headerStyle: nc(cW1, "headerStyle"),
    bodyStyle: nc(cW1, "bodyStyle"),
    animationStyle: nc(Fj1, "animationStyle")
  };
  return new f(t, (e) => {
    e.container.showHeader = false, e.container.style = Object.assign(e.container.style, {
      CONTAINER_BODY_PADDING: e.style.containerBodyPadding,
      border: "#00000000",
      background: e.style.background
    });
    const c = (0, import_react.useRef)(null), [h, v] = (0, import_react.useState)(0), [w, E] = (0, import_react.useState)(0);
    (0, import_react.useEffect)(() => {
      w && h && u();
    }, [w, h]);
    const u = () => {
      const r = c.current;
      v((r == null ? void 0 : r.clientWidth) ?? 0), E((r == null ? void 0 : r.clientHeight) ?? 0);
    };
    return d(hWe, {
      onResize: u,
      children: d(N2, {
        ref: c,
        $style: e.style,
        $animationStyle: e.animationStyle,
        $headerStyle: e.headerStyle,
        $bodyStyle: e.bodyStyle,
        $showMate: e.showMeta || e.cardType == "custom",
        $cardType: e.cardType,
        onMouseEnter: () => e.onEvent("focus"),
        onMouseLeave: () => e.onEvent("blur"),
        onClick: () => e.onEvent("click"),
        children: N(aLe, {
          style: {
            width: h,
            height: "100%"
          },
          size: e.size,
          hoverable: e.hoverable,
          title: e.showTitle && e.title,
          extra: e.showTitle && d("a", {
            href: "#",
            onClick: () => e.onEvent("clickExtra"),
            children: e.extraTitle
          }),
          cover: e.cardType == "common" && e.CoverImg && d("img", {
            src: e.imgSrc,
            height: e.imgHeight
          }),
          actions: e.cardType == "common" && e.showActionIcon ? e.actionOptions.filter((r) => !r.hidden).map((r) => d(G, {
            onClick: () => r.onEvent("click"),
            disabled: r.disabled,
            $style: e.style,
            children: r.icon
          })) : [],
          children: [e.cardType == "common" && e.showMeta && d(_2, {
            title: e.metaTitle,
            description: e.metaDesc
          }), e.cardType == "custom" && d(j, {
            children: d(X, {
              ...e
            })
          })]
        })
      })
    });
  }).setPropertyViewFn((e) => N(p1, {
    children: [((0, import_react.useContext)(Vr).editorModeStatus === "logic" || (0, import_react.useContext)(Vr).editorModeStatus === "both") && N(p1, {
      children: [N(ka, {
        name: b0.basic,
        children: [e.size.propertyView({
          label: _("card.titleSize"),
          radioButton: true
        }), e.showTitle.propertyView({
          label: _("card.showTitle")
        }), e.showTitle.getView() && e.title.propertyView({
          label: _("card.title")
        }), e.showTitle.getView() && e.extraTitle.propertyView({
          label: _("card.extraTitle")
        }), e.cardType.getView() == "common" && e.CoverImg.propertyView({
          label: _("card.CoverImg")
        }), e.cardType.getView() == "common" && e.CoverImg.getView() && e.imgSrc.propertyView({
          label: _("card.imgSrc")
        }), e.cardType.getView() == "common" && e.CoverImg.getView() && e.imgHeight.propertyView({
          label: _("card.imgHeight")
        }), e.cardType.getView() == "common" && e.showMeta.propertyView({
          label: _("card.showMeta")
        }), e.cardType.getView() == "common" && e.showMeta.getView() && e.metaTitle.propertyView({
          label: _("card.metaTitle")
        }), e.cardType.getView() == "common" && e.showMeta.getView() && e.metaDesc.propertyView({
          label: _("card.metaDesc")
        }), e.cardType.getView() == "common" && e.showActionIcon.propertyView({
          label: _("card.showActionIcon")
        }), e.cardType.getView() == "common" && e.showActionIcon.getView() && e.actionOptions.propertyView({
          title: _("card.actionOptions")
        })]
      }), N(ka, {
        name: b0.interaction,
        children: [E7(e), e.onEvent.getPropertyView()]
      })]
    }), ((0, import_react.useContext)(Vr).editorModeStatus === "layout" || (0, import_react.useContext)(Vr).editorModeStatus === "both") && N(p1, {
      children: [d(ka, {
        name: b0.layout,
        children: e.cardType.propertyView({
          label: _("card.cardType"),
          radioButton: true
        })
      }), d(ka, {
        name: b0.style,
        children: e.style.getPropertyView()
      }), d(ka, {
        name: b0.headerStyle,
        children: e.headerStyle.getPropertyView()
      }), d(ka, {
        name: b0.bodyStyle,
        children: e.bodyStyle.getPropertyView()
      }), d(ka, {
        name: b0.animationStyle,
        hasTooltip: true,
        children: e.animationStyle.getPropertyView()
      })]
    })]
  })).build();
}();
var ie = H0(q, [s2e]);
export {
  ie as CardComp,
  q as ContainerBaseComp
};
//# sourceMappingURL=7e0d8a7e-55VFKING.js.map
