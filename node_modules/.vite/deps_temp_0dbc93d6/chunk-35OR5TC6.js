import {
  ne
} from "./chunk-YT7XWS54.js";
import {
  $9,
  C5,
  D5n,
  M2,
  Mg,
  Mo,
  N,
  R9,
  Xx,
  _,
  ao,
  ca,
  d,
  de,
  em,
  eu,
  g2,
  m11,
  nc,
  o7t,
  om,
  p1,
  rW1,
  t2,
  vc,
  ya,
  z3
} from "./chunk-2ZELARZW.js";
import {
  require_react_dom
} from "./chunk-VGGCA2L5.js";
import {
  require_react
} from "./chunk-73THXJN7.js";
import {
  __toESM
} from "./chunk-2TUXWMP5.js";

// node_modules/lowcoder-sdk/dist/9ee13d0e.js
var import_react = __toESM(require_react(), 1);
var import_react_dom = __toESM(require_react_dom(), 1);
de.div`
  > a {
    color: ${em} !important;

    &:hover {
      color: ${D5n} !important;
    }
  }
`;
var C = ["#fde68a", "#eecff3", "#a7f3d0", "#bfdbfe", "#bfdbfe", "#c7d2fe", "#fecaca", "#fcd6bb"];
var $ = de.div`
  height: 100%;
  width: 100%;
  display: flex;
  align-items: center;
  justify-content: ${(t) => t.alignment};
  cursor: pointer;
`;
var B = new g2({
  src: M2,
  AvatarIcon: C5,
  label: M2,
  color: Mg,
  backgroundColor: Mg,
  Tooltip: M2
}, (t) => t).setPropertyViewFn((t) => N(p1, {
  children: [t.src.propertyView({
    label: _("avatarComp.src"),
    placeholder: "",
    tooltip: _("avatarComp.avatarCompTooltip")
  }), t.label.propertyView({
    label: _("avatarComp.title"),
    tooltip: _("avatarComp.avatarCompTooltip")
  }), t.AvatarIcon.propertyView({
    label: _("avatarComp.icon"),
    IconType: "All",
    tooltip: _("avatarComp.avatarCompTooltip")
  }), t.color.propertyView({
    label: _("style.fill")
  }), t.backgroundColor.propertyView({
    label: _("style.background")
  }), t.Tooltip.propertyView({
    label: _("badge.tooltip")
  })]
})).build();
var O = [eu, m11];
var L = [{
  label: d($9, {}),
  value: "flex-start"
}, {
  label: d(Xx, {}),
  value: "center"
}, {
  label: d(R9, {}),
  value: "flex-end"
}];
var H = function() {
  const t = {
    style: nc(rW1),
    maxCount: t2(vc, 3),
    avatarSize: t2(vc, 40),
    alignment: ca(L, "center"),
    autoColor: ao.DEFAULT_TRUE,
    onEvent: ya(O),
    currentAvatar: z3({}),
    avatars: om(B, {
      initOptions: [{
        src: "https://api.dicebear.com/7.x/miniavs/svg?seed=1",
        label: String.fromCharCode(65 + Math.ceil(Math.random() * 25))
      }, {
        AvatarIcon: "/icon:antd/startwotone"
      }, {
        label: String.fromCharCode(65 + Math.ceil(Math.random() * 25))
      }, {
        label: String.fromCharCode(65 + Math.ceil(Math.random() * 25))
      }]
    })
  };
  return new ne(t, (a, R) => d($, {
    $style: a.style,
    alignment: a.alignment,
    children: d(o7t.Group, {
      maxCount: a.maxCount,
      size: a.avatarSize,
      children: a.avatars.map((r, m) => {
        var n;
        return d(Mo, {
          title: r.Tooltip,
          children: d(o7t, {
            src: r.src ?? void 0,
            icon: ((n = r.AvatarIcon) == null ? void 0 : n.props.value) === "" || r.label.trim() !== "" ? void 0 : r.AvatarIcon,
            style: {
              color: r.color ? r.color : a.style.fill !== "#FFFFFF" ? a.style.fill : "#FFFFFF",
              backgroundColor: r.backgroundColor ? r.backgroundColor : a.autoColor ? C[m % C.length] : a.style.background
            },
            size: a.avatarSize,
            onClick: () => {
              a.onEvent("click");
            },
            children: r.label
          })
        });
      })
    })
  }), () => "").setPropertyViewFn((a) => N(p1, {
    children: [a.avatars.propertyView({}), a.maxCount.propertyView({
      label: _("avatarGroup.maxCount")
    }), a.avatarSize.propertyView({
      label: _("avatarGroup.avatarSize")
    }), a.autoColor.propertyView({
      label: _("avatarGroup.autoColor")
    }), a.alignment.propertyView({
      label: _("table.avatarGroupAlignment"),
      radioButton: true
    }), a.onEvent.propertyView()]
  })).build();
}();

export {
  L,
  H
};
//# sourceMappingURL=chunk-35OR5TC6.js.map
