import {
  pt
} from "./chunk-MBG3SW4O.js";
import {
  dt
} from "./chunk-73LN4UPC.js";
import "./chunk-6QEPQE7Z.js";
import "./chunk-EKQL2BCI.js";
import "./chunk-MKBWIDPH.js";
import "./chunk-WX2SP7KE.js";
import "./chunk-BVDJWWQT.js";
import {
  ie,
  w
} from "./chunk-NCDKRTSH.js";
import "./chunk-DUBJU634.js";
import "./chunk-AYAGYW5Z.js";
import "./chunk-FYFEE5MO.js";
import "./chunk-PJT5DRVG.js";
import "./chunk-3KC2BSDX.js";
import "./chunk-AOVWTW27.js";
import "./chunk-MEZEKXQL.js";
import "./chunk-35OR5TC6.js";
import "./chunk-TU5ZXGQL.js";
import "./chunk-MCIUU3OK.js";
import "./chunk-XHYKILBN.js";
import "./chunk-UJOKFOHB.js";
import "./chunk-BFA4XLEP.js";
import "./chunk-FB47X7C3.js";
import "./chunk-U3BV2XWB.js";
import "./chunk-ZJJZ7KCT.js";
import "./chunk-UD6GF23N.js";
import "./chunk-JNTGN7JA.js";
import "./chunk-DTUB3P6T.js";
import "./chunk-FJZ2UJYE.js";
import "./chunk-MYGL7TQR.js";
import "./chunk-4PBCAFGZ.js";
import "./chunk-Y7AE76OL.js";
import "./chunk-YT7XWS54.js";
import "./chunk-2B5JEFTZ.js";
import "./chunk-3Y5I3OZJ.js";
import "./chunk-3GBVGJ5V.js";
import "./chunk-5IAS3Q6R.js";
import "./chunk-PPPGPJTG.js";
import "./chunk-6F5TAIKV.js";
import "./chunk-5PD5AN2J.js";
import "./chunk-APJJAOFL.js";
import "./chunk-KGJNSQSZ.js";
import "./chunk-A3UAJ3XR.js";
import "./chunk-QUWBOWXT.js";
import {
  PL,
  h1,
  mC
} from "./chunk-2ZELARZW.js";
import {
  require_react_dom
} from "./chunk-VGGCA2L5.js";
import {
  require_react
} from "./chunk-73THXJN7.js";
import {
  __toESM
} from "./chunk-2TUXWMP5.js";

// node_modules/lowcoder-sdk/dist/f253966a.js
var import_react = __toESM(require_react(), 1);
var import_react_dom = __toESM(require_react_dom(), 1);
test("test column", () => {
  const e = {
    title: "name"
    // editable: true, // TODO: change to boolean
  };
  let o = new ie({
    value: e
  });
  o = PL(o);
  const t = o.getView();
  expect(t.title).toEqual(e.title);
});
test("test column render", () => {
  const e = {
    render: {
      compType: "text",
      comp: {
        text: "{{currentRow.id}}"
      }
    }
    // editable: true, // TODO: change to boolean
  };
  let o = new ie({
    value: e
  });
  o = PL(o);
  const t = o.getView();
  expect(t.render({
    currentCell: null,
    currentIndex: null,
    currentRow: {
      id: "hello"
    },
    currentOriginalIndex: null
  }, "0").getView().view({}).props.normalView).toEqual("hello");
});
test("test table", async () => {
  const e = {
    data: JSON.stringify([{
      a: 1
    }]),
    columns: [{
      dataIndex: "a",
      hide: true
    }, {
      title: "custom",
      dataIndex: "",
      isCustom: true
    }]
  }, o = {
    query1: mC({
      data: [{
        q: 1
      }]
    }),
    query2: mC({
      data: [{
        q2: 2
      }]
    })
  };
  let t = new dt({
    dispatch: (l) => {
      t = PL(t.reduce(l), o);
    },
    value: e
  });
  t = PL(t);
  let r = t.children.columns.getView();
  expect(r.length).toEqual(2), t = PL(t.reduce(t.changeChildAction("data", '[{"a":1, "c":2, "d":3}]'))), await new Promise((l) => setTimeout(l, 20)), r = t.children.columns.getView(), expect(r.length).toEqual(4), expect(r[0].getView().dataIndex).toEqual("a"), expect(r[0].getView().hide).toBe(true), expect(r[1].getView().title).toEqual("custom"), expect(r[2].getView().title).toEqual("c"), expect(r[3].getView().title).toEqual("d");
}, 1e3);
test("test mock table render", () => {
  let e = new pt({});
  e = PL(e);
});
test("test table data transform", () => {
  function e(i, m) {
    const p = m.exposingValues.displayData, {
      data: u
    } = m.getProps(), s = m.filterData;
    return expect(u.length).toEqual(3), expect(p.length).toEqual(i), expect(p.map((n) => h1.omit(n, "custom"))).toEqual(h1.map(s, (n) => h1.omit(n, w))), {
      transformedData: s,
      data: u,
      displayData: p
    };
  }
  const o = {
    data: JSON.stringify([{
      id: 1,
      name: "gg"
    }, {
      id: 5,
      name: "gg2"
    }, {
      id: 3,
      name: "jjj"
    }]),
    columns: [{
      dataIndex: "id",
      isCustom: false,
      sortable: true,
      render: {
        compType: "text",
        comp: {
          text: "{{currentCell}}"
        }
      }
    }, {
      dataIndex: "name",
      isCustom: false,
      render: {
        compType: "text",
        comp: {
          text: "{{currentCell}}"
        }
      }
    }, {
      title: "custom",
      dataIndex: "ealekfg",
      isCustom: true,
      render: {
        compType: "image",
        comp: {
          src: "{{currentRow.id}}"
        }
      }
    }]
  };
  let t = new dt({
    dispatch: (i) => {
      t = PL(t.reduce(i));
    },
    value: o
  });
  t = PL(t), t = PL(t.reduce(t.changeChildAction("sort", [{
    column: "id",
    desc: true
  }])));
  let {
    transformedData: r,
    data: l,
    displayData: f
  } = e(3, t);
  expect(r.map((i) => i.id)).toEqual([5, 3, 1]), t = PL(t.reduce(t.changeChildAction("toolbar", {
    searchText: "gg"
  }))), e(2, t), t = PL(t.reduce(t.changeChildAction("toolbar", {
    showFilter: true,
    filter: {
      stackType: "and",
      filters: [{
        columnKey: "id",
        filterValue: "4",
        operator: "gt"
      }, {
        columnKey: "id",
        filterValue: "5",
        operator: "lte"
      }]
    }
  }))), e(1, t);
});
//# sourceMappingURL=f253966a-6VP7EJQG.js.map
