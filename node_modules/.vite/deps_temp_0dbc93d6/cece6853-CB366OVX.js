import {
  $Ue,
  N,
  V9,
  Vh,
  c7,
  d,
  de,
  h1,
  iS,
  j4
} from "./chunk-2ZELARZW.js";
import {
  require_react_dom
} from "./chunk-VGGCA2L5.js";
import {
  require_react
} from "./chunk-73THXJN7.js";
import {
  __toESM
} from "./chunk-2TUXWMP5.js";

// node_modules/lowcoder-sdk/dist/cece6853.js
var import_react = __toESM(require_react(), 1);
var import_react_dom = __toESM(require_react_dom(), 1);
var x = de.div`
  flex-shrink: 0;
  width: ${(n) => n.$placement === "right" ? "96px" : "112px"};
`;
var v = de.div`
  ${c7};
  width: 100%;
  font-size: 13px;
  line-height: 15px;
`;
var C = de.div`
  display: flex;
  justify-content: space-between;
  width: 100%;
  flex-direction: row;
  align-items: center;

  .ant-select .ant-select-selector {
    margin: 0;
  }

  .ant-select-selection-item {
    height: 26px;
  }
`;
function V(n, s) {
  return class extends Vh {
    getDefaultValue() {
      return s;
    }
    propertyView(e) {
      const {
        placement: a = "right"
      } = e, d2 = h1.fromPairs(n.map((l) => [l.value, l]));
      return N(C, {
        children: [e.label && d(x, {
          $placement: a,
          children: d(V9, {
            title: e.tooltip,
            label: e.label
          })
        }), d(iS, {
          title: e.label ? void 0 : e.tooltip,
          children: d($Ue, {
            $placement: a,
            children: d(j4, {
              mode: "multiple",
              popupClassName: "ob-dropdown-control-select",
              filterOption: (l, t) => {
                if (!(t != null && t.value))
                  return false;
                const o = d2[t.value].label;
                return typeof o == "number" || typeof o == "string" || typeof o == "boolean" ? o.toString().toLowerCase().includes(l) : false;
              },
              border: e.border,
              defaultValue: this.getDefaultValue(),
              value: this.value,
              style: {
                width: "100%"
              },
              onChange: (l) => {
                var t;
                e.disableDispatchValueChange || this.dispatchChangeValueAction(l), (t = e.onChange) == null || t.call(e, l);
              },
              disabled: e.disabled,
              allowClear: true,
              placeholder: e.placeholder,
              optionLabelProp: "children",
              children: n.map((l) => d(j4.Option, {
                value: l.value,
                children: d(v, {
                  children: l.label
                })
              }, l.value))
            })
          })
        })]
      });
    }
    getPropertyView() {
      throw new Error("Method not implemented.");
    }
  };
}
export {
  V as multiSelectControl
};
//# sourceMappingURL=cece6853-CB366OVX.js.map
