import {
  d
} from "./chunk-VT64YZPN.js";
import {
  $6n,
  Bn,
  Fse,
  IXe,
  Pse,
  R6n,
  S0,
  Xj1,
  Zj1,
  _,
  ao,
  d3,
  dee,
  g2,
  gM,
  h1,
  nV,
  nc,
  t2,
  v6e,
  yw,
  zte
} from "./chunk-2ZELARZW.js";
import {
  require_react_dom
} from "./chunk-VGGCA2L5.js";
import {
  require_react
} from "./chunk-73THXJN7.js";
import {
  __toESM
} from "./chunk-2TUXWMP5.js";

// node_modules/lowcoder-sdk/dist/ef17c1a9.js
var import_react = __toESM(require_react(), 1);
var import_react_dom = __toESM(require_react_dom(), 1);
var g = Object.defineProperty;
var C = (t, r, e) => r in t ? g(t, r, { enumerable: true, configurable: true, writable: true, value: e }) : t[r] = e;
var y = (t, r, e) => (C(t, typeof r != "symbol" ? r + "" : r, e), e);
var _2 = {
  header: nV,
  // Support future tab or step container expansion
  body: t2(dee(d), {
    0: {
      view: {
        layout: {},
        items: {}
      }
    }
  }),
  footer: nV,
  showHeader: ao.DEFAULT_TRUE,
  showBody: ao.DEFAULT_TRUE,
  showFooter: ao,
  autoHeight: gM,
  horizontalGridCells: v6e,
  scrollbars: t2(ao, false),
  style: t2(nc(Pse, "style"), {
    borderWidth: "1px"
  }),
  headerStyle: nc(Zj1, "headerStyle"),
  bodyStyle: nc(Fse, "bodyStyle"),
  footerStyle: nc(Xj1, "footerStyle"),
  appliedThemeId: Bn("")
  // for comp containing container, comps's appliedThemeId will always be empty so maintaining here
};
var z = zte(new g2(_2, (t, r) => ({
  ...t,
  dispatch: r
})).build(), $6n);
var j = class extends z {
  constructor() {
    super(...arguments);
    y(this, "scrollbars");
  }
  allContainers() {
    return [this.children.header, ...Object.values(this.children.body.getView()).map((e) => e.children.view), this.children.footer];
  }
  realSimpleContainer(e) {
    return h1.isNil(e) ? this.children.body.getView()[0].children.view : this.allContainers().find((o) => o.realSimpleContainer(e));
  }
  getCompTree() {
    return R6n(this.allContainers().map((e) => e.getCompTree()));
  }
  findContainer(e) {
    for (const o of this.allContainers()) {
      const i = o.findContainer(e);
      if (i)
        return i === o ? this : i;
    }
  }
  getPasteValue(e) {
    return {
      ...this.toJsonValue(),
      header: this.children.header.getPasteValue(e),
      body: h1.mapValues(this.children.body.getView(), (o) => ({
        ...o.toJsonValue(),
        view: o.children.view.getPasteValue(e)
      })),
      footer: this.children.footer.getPasteValue(e)
    };
  }
  autoHeight() {
    return this.children.autoHeight.getView();
  }
  exposingNode() {
    const e = {};
    return IXe(this.getCompTree(), (o) => {
      const i = o.children.comp;
      let l = i.exposingNode();
      if (yw(l) && !l.children.hasOwnProperty("formDataKey")) {
        const p = i.children.formDataKey;
        p && (l = d3({
          ...l.children,
          formDataKey: p.exposingNode()
        }));
      }
      return e[o.children.name.getView()] = l, true;
    }), S0(this, "exposing_node", d3(e), f);
  }
  getPropertyView() {
    return [this.areaPropertyView(), this.heightPropertyView(), this.gridPropertyView()];
  }
  areaPropertyView() {
    return [this.children.showHeader.propertyView({
      label: _("prop.showHeader")
    }), this.children.showBody.propertyView({
      label: _("prop.showBody")
    }), this.children.showFooter.propertyView({
      label: _("prop.showFooter")
    })];
  }
  heightPropertyView() {
    return [this.children.autoHeight.getPropertyView(), !this.children.autoHeight.getView() && this.children.scrollbars.propertyView({
      label: _("prop.scrollbar")
    })];
  }
  gridPropertyView() {
    return [this.children.horizontalGridCells.propertyView({
      label: _("prop.horizontalGridCells")
    })];
  }
  stylePropertyView() {
    return this.children.style.getPropertyView();
  }
  headerStylePropertyView() {
    return this.children.headerStyle.getPropertyView();
  }
  bodyStylePropertyView() {
    return this.children.bodyStyle.getPropertyView();
  }
  footerStylePropertyView() {
    return this.children.footerStyle.getPropertyView();
  }
};
function f(t, r) {
  if (t === r)
    return true;
  if (t && r && yw(t) && yw(r)) {
    const e = t.children, o = r.children, i = Object.keys(e);
    return i.length === Object.keys(o).length && i.every((l) => f(e[l], o[l]));
  }
  return false;
}

export {
  j
};
//# sourceMappingURL=chunk-HCH6A2AU.js.map
