import {
  Ct,
  E7,
  H0,
  H3,
  IC,
  Jf,
  LH,
  M2,
  N,
  Pse,
  Qf,
  R6n,
  VS,
  Vr,
  XN,
  _,
  _U1,
  ao,
  b0,
  b2e,
  d,
  de,
  dee,
  eee,
  gM,
  h1,
  h2,
  j$,
  k3,
  ka,
  nV,
  nc,
  p1,
  qC,
  s2e,
  s4,
  sU1,
  t2,
  u3,
  v6e
} from "./chunk-2ZELARZW.js";
import {
  require_react_dom
} from "./chunk-VGGCA2L5.js";
import {
  require_react
} from "./chunk-73THXJN7.js";
import {
  __toESM
} from "./chunk-2TUXWMP5.js";

// node_modules/lowcoder-sdk/dist/e0f78fd8.js
var import_react = __toESM(require_react(), 1);
var import_react_dom = __toESM(require_react_dom(), 1);
var oe = de.div`
  display: ${(t) => {
  var e;
  return (e = t.$style) == null ? void 0 : e.display;
}};
  grid-template-columns: ${(t) => {
  var e;
  return (e = t.$style) == null ? void 0 : e.gridTemplateColumns;
}};
  grid-template-rows: ${(t) => {
  var e;
  return (e = t.$style) == null ? void 0 : e.gridTemplateRows;
}};
  column-gap: ${(t) => {
  var e;
  return (e = t.$style) == null ? void 0 : e.columnGap;
}};
  row-gap: ${(t) => {
  var e;
  return (e = t.$style) == null ? void 0 : e.rowGap;
}};

  background-color: ${(t) => {
  var e;
  return (e = t.$style) == null ? void 0 : e.background;
}} !important;
  border-radius: ${(t) => {
  var e;
  return (e = t.$style) == null ? void 0 : e.radius;
}};
  border-width: ${(t) => {
  var e;
  return (e = t.$style) == null ? void 0 : e.borderWidth;
}};
  border-color: ${(t) => {
  var e;
  return (e = t.$style) == null ? void 0 : e.border;
}};
  border-style: ${(t) => {
  var e;
  return (e = t.$style) == null ? void 0 : e.borderStyle;
}};
  margin: ${(t) => {
  var e;
  return (e = t.$style) == null ? void 0 : e.margin;
}};
  padding: ${(t) => {
  var e;
  return (e = t.$style) == null ? void 0 : e.padding;
}};
`;
var ne = de(j$)`
  > div {
    height: ${(t) => {
  var e, o;
  return t.$matchColumnsHeight ? `calc(100% - ${((e = t.$style) == null ? void 0 : e.padding) || 0} - ${((o = t.$style) == null ? void 0 : o.padding) || 0})` : "auto";
}};
    background-color: ${(t) => {
  var e;
  return (e = t.$style) == null ? void 0 : e.background;
}} !important;
    border-radius: ${(t) => {
  var e;
  return (e = t.$style) == null ? void 0 : e.radius;
}};
    border-width: ${(t) => {
  var e;
  return (e = t.$style) == null ? void 0 : e.borderWidth;
}};
    border-color: ${(t) => {
  var e;
  return (e = t.$style) == null ? void 0 : e.border;
}};
    border-style: ${(t) => {
  var e;
  return (e = t.$style) == null ? void 0 : e.borderStyle;
}};
    margin: ${(t) => {
  var e;
  return (e = t.$style) == null ? void 0 : e.margin;
}};
    padding: ${(t) => {
  var e;
  return (e = t.$style) == null ? void 0 : e.padding;
}};
  }
`;
var ae = {
  disabled: H3,
  columns: _U1,
  containers: t2(dee(nV), {
    0: {
      view: {},
      layout: {}
    },
    1: {
      view: {},
      layout: {}
    }
  }),
  horizontalGridCells: v6e,
  autoHeight: gM,
  matchColumnsHeight: t2(ao, true),
  templateRows: t2(M2, "1fr"),
  rowGap: t2(M2, "20px"),
  templateColumns: t2(M2, "1fr 1fr"),
  columnGap: t2(M2, "20px"),
  style: nc(Pse, "style"),
  columnStyle: nc(sU1, "columnStyle")
};
var se = (t) => d(Jf, {
  ...t,
  emptyRows: 15,
  hintPlaceholder: LH,
  radius: "0",
  style: t.style,
  enableGridLines: false
});
var re = (t) => {
  let {
    columns: e,
    containers: o,
    dispatch: s,
    matchColumnsHeight: n,
    templateRows: l,
    rowGap: a,
    templateColumns: P,
    columnGap: H,
    columnStyle: T,
    horizontalGridCells: x
  } = t;
  return d(Qf.Provider, {
    value: t.style.background,
    children: d(b2e.Provider, {
      value: t.disabled,
      children: d(oe, {
        $style: {
          ...t.style,
          display: "grid",
          gridTemplateColumns: P,
          columnGap: H,
          gridTemplateRows: l,
          rowGap: a
        },
        children: e.map((b) => {
          const h = String(b.id), M = k3(k3(s, "containers"), h);
          if (!o[h])
            return null;
          const C = o[h].children;
          return e.length, d(Qf.Provider, {
            value: t.columnStyle.background,
            children: d(ne, {
              $style: t.columnStyle,
              $minWidth: b.minWidth,
              $matchColumnsHeight: n,
              children: d(se, {
                layout: C.layout.getView(),
                items: IC(C.items.getView()),
                horizontalGridCells: x,
                positionParams: C.positionParams.getView(),
                dispatch: M,
                autoHeight: t.autoHeight,
                style: T
              })
            }, h)
          });
        })
      })
    })
  });
};
var ie = function() {
  return new VS(ae, (t, e) => d(re, {
    ...t,
    dispatch: e
  })).setPropertyViewFn((t) => N(p1, {
    children: [d(ka, {
      name: b0.basic,
      children: t.columns.propertyView({
        title: _("responsiveLayout.column"),
        newOptionLabel: _("responsiveLayout.addColumn")
      })
    }), ((0, import_react.useContext)(Vr).editorModeStatus === "logic" || (0, import_react.useContext)(Vr).editorModeStatus === "both") && N(ka, {
      name: b0.interaction,
      children: [qC(t), E7(t)]
    }), ["layout", "both"].includes((0, import_react.useContext)(Vr).editorModeStatus) && N(p1, {
      children: [N(ka, {
        name: b0.layout,
        children: [t.autoHeight.getPropertyView(), t.horizontalGridCells.propertyView({
          label: _("prop.horizontalGridCells")
        })]
      }), N(ka, {
        name: _("responsiveLayout.columnsLayout"),
        children: [t.matchColumnsHeight.propertyView({
          label: _("responsiveLayout.matchColumnsHeight")
        }), u3({}, d("div", {
          style: {
            marginTop: "8px"
          },
          children: _("responsiveLayout.columnsSpacing")
        })), t.templateColumns.propertyView({
          label: _("responsiveLayout.columnDefinition"),
          tooltip: _("responsiveLayout.columnsDefinitionTooltip")
        }), t.templateRows.propertyView({
          label: _("responsiveLayout.rowDefinition"),
          tooltip: _("responsiveLayout.rowsDefinitionTooltip")
        }), t.columnGap.propertyView({
          label: _("responsiveLayout.columnGap")
        }), t.rowGap.propertyView({
          label: _("responsiveLayout.rowGap")
        })]
      })]
    }), ((0, import_react.useContext)(Vr).editorModeStatus === "layout" || (0, import_react.useContext)(Vr).editorModeStatus === "both") && N(p1, {
      children: [d(ka, {
        name: b0.style,
        children: t.style.getPropertyView()
      }), d(ka, {
        name: b0.columnStyle,
        children: t.columnStyle.getPropertyView()
      })]
    })]
  })).build();
}();
var le = class extends ie {
  syncContainers() {
    const e = this.children.columns.getView(), o = new Set(e.map((a) => String(a.id)));
    let s = this.children.containers.getView();
    const n = [];
    Object.keys(s).forEach((a) => {
      o.has(a) || n.push(s4("containers", s4(a, eee())));
    }), o.forEach((a) => {
      s.hasOwnProperty(a) || n.push(s4("containers", XN(a, {
        layout: {},
        items: {}
      })));
    });
    let l = this;
    return n.forEach((a) => {
      l = l.reduce(a);
    }), l;
  }
  reduce(e) {
    const o = this.children.columns.getView();
    if (e.type === h2.CUSTOM) {
      const n = e.value;
      if (n.type === "push") {
        const a = n.value;
        h1.isEmpty(a.key) && (a.key = a.label), e = {
          ...e,
          value: {
            ...n,
            value: {
              ...a
            }
          }
        };
      }
      const {
        path: l
      } = e;
      if (n.type === "delete" && l[0] === "columns" && o.length <= 1)
        return Ct.warning(_("responsiveLayout.atLeastOneColumnError")), this;
    }
    let s = super.reduce(e);
    return e.type === h2.UPDATE_NODES_V2 && (s = s.syncContainers()), s;
  }
  realSimpleContainer(e) {
    return Object.values(this.children.containers.children).find((o) => o.realSimpleContainer(e));
  }
  getCompTree() {
    const e = this.children.containers.getView(), o = Object.values(e).map((s) => s.getCompTree());
    return R6n(o);
  }
  findContainer(e) {
    const o = this.children.containers.getView();
    for (const s of Object.values(o)) {
      const n = s.findContainer(e);
      if (n)
        return n === s ? this : n;
    }
  }
  getPasteValue(e) {
    const o = this.children.containers.getView(), s = h1.mapValues(o, (n) => n.getPasteValue(e));
    return {
      ...this.toJsonValue(),
      containers: s
    };
  }
  autoHeight() {
    return this.children.autoHeight.getView();
  }
};
var pe = H0(le, [s2e]);

export {
  ie,
  pe
};
//# sourceMappingURL=chunk-JG6OGZU3.js.map
