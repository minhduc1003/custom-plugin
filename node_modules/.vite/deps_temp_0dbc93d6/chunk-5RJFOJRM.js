import {
  e
} from "./chunk-QLOEH37K.js";
import {
  DW1,
  E7,
  Fj1,
  H0,
  Ih,
  M2,
  N,
  VS,
  Vr,
  W8,
  _,
  b0,
  d,
  de,
  f6e,
  gc,
  ka,
  nc,
  p1,
  s2e,
  t2,
  vo
} from "./chunk-2ZELARZW.js";
import {
  require_react_dom
} from "./chunk-VGGCA2L5.js";
import {
  require_react
} from "./chunk-73THXJN7.js";
import {
  __toESM
} from "./chunk-2TUXWMP5.js";

// node_modules/lowcoder-sdk/dist/f4dd517e.js
var import_react = __toESM(require_react(), 1);
var import_react_dom = __toESM(require_react_dom(), 1);
var z = {
  name: "{{currentUser.name}}",
  text: _("customComp.text"),
  query: "query1"
};
var X = `
  <style type="text/css">
  body {
    padding: 5px;
  }
  </style>
  
  <link rel="stylesheet" type="text/css" href="https://unpkg.com/antd@4.21.4/dist/antd.min.css"/>
  <script type="text/javascript" src="https://unpkg.com/antd@4.21.4/dist/antd.min.js" ><\/script>
  
  <div id="root"></div>
  
  <script type="text/babel">
  
  const { Button, Card, Space } = antd;
  
  const MyCustomComponent = ({ runQuery, model, updateModel}) => (
    <Card title={"Hello, " + model.name}>
        <p>{model.text}</p>
        <Space>
          <Button
            type="primary"
            onClick={() => runQuery(model.query)}
         >
            ${_("customComp.triggerQuery")}
          </Button>
          <Button
            onClick={() => updateModel({ text: "${_("customComp.updateText")}" })}
          >
          ${_("customComp.updateData")}
          </Button>
      </Space>
    </Card>
  );
  
  const ConnectedComponent = ${_("customComp.sdkGlobalVarName")}.connect(MyCustomComponent);
  const root = ReactDOM.createRoot(document.getElementById("root"));
  root.render(<ConnectedComponent />);
  
  <\/script>
  `;
var J = de.div`
  width: 100%;
  height: 100%;
  ${(t) => t.$style};
  rotate: ${(t) => t.$style.rotation};
  ${(t) => t.$animationStyle};
  iframe {
    border: 0;
    width: 100%;
    height: 100%;
    display: block;
  }
`;
function m(t, r) {
  var n;
  (n = t == null ? void 0 : t.contentWindow) == null || n.postMessage(r, "*");
}
function K(t) {
  const r = (0, import_react.useRef)(String(Date.now())), {
    model: n,
    code: c,
    onModelChange: p,
    dispatch: A
  } = t, i = (0, import_react.useRef)(null), a = (0, import_react.useRef)(n), y = (0, import_react.useRef)(false), V = (0, import_react.useRef)({
    runQuery: async (e2) => {
      const {
        queryName: u
      } = e2;
      return gc(A, Ih(u, W8({}))).catch((C) => Promise.resolve({}));
    },
    getModel: async (e2) => a.current,
    updateModel: async (e2) => (a.current = {
      ...a.current,
      ...e2
    }, m(i.current, {
      type: e.Data,
      payload: {
        model: a.current
      }
    }), p(a.current), a.current)
  });
  return (0, import_react.useEffect)(() => {
    m(i.current, {
      type: e.Data,
      payload: {
        model: n
      }
    }), a.current = n;
  }, [n]), (0, import_react.useEffect)(() => {
    if (!i.current)
      return;
    const e2 = i.current, u = (h) => {
      const {
        type: b,
        payload: x,
        hostId: M
      } = h.data;
      if (!b || !x || !M || M !== r.current)
        return;
      const {
        method: v,
        data: j,
        id: L
      } = x;
      if (b === e.Invoke) {
        const g = V.current[v];
        if (!g || typeof g != "function")
          return;
        g(j).then((N2) => {
          m(e2, {
            type: e.Invoke,
            payload: {
              id: L,
              method: v,
              response: N2
            }
          });
        });
      }
    }, C = () => {
      m(e2, {
        type: e.Init,
        payload: {
          hostId: r.current,
          code: c
        }
      });
    };
    window.addEventListener("message", u), e2.addEventListener("load", C);
    const S = e2.getAttribute("src");
    if (S && y) {
      y.current = false;
      const h = new URL("?_t=" + Date.now(), S);
      e2.setAttribute("src", h.toString());
    }
    return () => {
      y.current = true, window.removeEventListener("message", u), e2.removeEventListener("load", C);
    };
  }, [c]), d(J, {
    $style: t.style,
    $animationStyle: t.animationStyle,
    children: d("iframe", {
      ref: i,
      title: "custom-comp",
      src: _("customComponent.entryUrl")
    })
  });
}
var tt = {
  model: f6e(z),
  code: t2(M2, X),
  style: nc(DW1, "style"),
  animationStyle: nc(Fj1, "animationStyle")
};
var et = new VS(tt, (t, r) => {
  const {
    code: n,
    model: c
  } = t;
  return d(K, {
    style: t.style,
    animationStyle: t.animationStyle,
    code: n,
    model: c.value,
    onModelChange: (p) => c.onChange(p),
    dispatch: r
  });
}).setPropertyViewFn((t) => d(p1, {
  children: ((0, import_react.useContext)(Vr).editorModeStatus === "logic" || (0, import_react.useContext)(Vr).editorModeStatus === "both") && N(p1, {
    children: [N(ka, {
      name: b0.interaction,
      children: [t.model.propertyView({
        label: _("customComp.data")
      }), t.code.propertyView({
        label: _("customComp.code"),
        language: "html"
      }), E7(t)]
    }), d(ka, {
      name: b0.style,
      children: t.style.getPropertyView()
    }), d(ka, {
      name: b0.animationStyle,
      hasTooltip: true,
      children: t.animationStyle.getPropertyView()
    })]
  })
})).build();
var ot = class extends et {
  autoHeight() {
    return false;
  }
};
var ct = H0(ot, [new vo("model", _("data")), new vo("code", _("code")), s2e]);

export {
  ct
};
//# sourceMappingURL=chunk-5RJFOJRM.js.map
