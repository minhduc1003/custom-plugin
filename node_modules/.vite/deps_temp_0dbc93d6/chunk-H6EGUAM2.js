import {
  V
} from "./chunk-VUZTW3IR.js";
import {
  V as V2
} from "./chunk-ZYPGHTDV.js";
import {
  c,
  h
} from "./chunk-A3UAJ3XR.js";
import {
  o
} from "./chunk-MHPZYSTA.js";
import {
  M,
  S,
  v
} from "./chunk-2SYORDDG.js";
import {
  BXe,
  C5,
  E7,
  EB1,
  EP1,
  Fj1,
  GK1,
  H0,
  H3,
  HQe,
  M2,
  N,
  N0,
  PW1,
  QU1,
  RQe,
  SQe,
  US,
  VC,
  VS,
  Vr,
  WS,
  ZK1,
  _,
  ao,
  b0,
  cZn,
  ca,
  d,
  fKn,
  fW1,
  h1,
  kB1,
  ka,
  nc,
  nn,
  p1,
  pQe,
  qC,
  qOe,
  t2,
  uW1,
  vB1,
  vKn,
  vo,
  wB1,
  xB1,
  ya,
  zB1
} from "./chunk-2ZELARZW.js";
import {
  require_react_dom
} from "./chunk-VGGCA2L5.js";
import {
  require_react
} from "./chunk-73THXJN7.js";
import {
  __toESM
} from "./chunk-2TUXWMP5.js";

// node_modules/lowcoder-sdk/dist/c3947343.js
var import_react = __toESM(require_react(), 1);
var import_react_dom = __toESM(require_react_dom(), 1);
nn.extend(vKn);
nn.extend(fKn);
nn.extend(qOe);
var Ze = [VC, WS, US];
var xe = {
  required: ao,
  minTime: M2,
  maxTime: M2,
  customRule: SQe
};
var $ = {
  label: GK1,
  placeholder: t2(M2, _("time.placeholder")),
  format: M2,
  disabled: H3,
  onEvent: ya(Ze),
  showTime: ao,
  use12Hours: ao,
  hourStep: pQe.closed(1, 24, 1),
  minuteStep: pQe.closed(1, 60, 1),
  secondStep: pQe.closed(1, 60, 1),
  style: nc(fW1, "style"),
  animationStyle: nc(Fj1, "animationStyle"),
  labelStyle: nc(uW1.filter((e) => ["accent", "validate"].includes(e.name) === false), "labelStyle"),
  inputFieldStyle: nc(PW1, "inputFieldStyle"),
  suffixIcon: t2(C5, "/icon:regular/clock"),
  timeZone: ca(o, "Etc/UTC"),
  viewRef: ZK1,
  ...xe
};
var G = (e) => h1.pick(e, "format", "use12Hours", "minuteStep", "secondStep", "placeholder");
var J = (e) => [EB1(e), wB1(e), xB1(e)];
function V3(e) {
  if (e.customRule)
    return {
      validateStatus: "error",
      help: e.customRule
    };
  const t = nn(e.value.value, cZn);
  return e.required && !t.isValid() ? {
    validateStatus: "error",
    help: _("prop.required")
  } : {
    validateStatus: "success"
  };
}
var Re = {
  value: QU1("value"),
  userTimeZone: QU1("userTimeZone", "Etc/UTC"),
  ...$,
  ...c
};
var Pe = new VS(Re, (e) => {
  let t = null;
  e.value.value !== "" && (t = nn(e.value.value, cZn));
  const [a, i] = (0, import_react.useState)(t);
  (0, import_react.useEffect)(() => {
    const c2 = e.value.value ? nn(e.value.value, cZn) : null;
    i(c2);
  }, [e.value.value]);
  const g = (c2) => {
    e.userTimeZone.onChange(c2);
  };
  return e.label({
    required: e.required,
    style: e.style,
    labelStyle: e.labelStyle,
    inputFieldStyle: e.inputFieldStyle,
    animationStyle: e.animationStyle,
    onMouseDown: (c2) => c2.stopPropagation(),
    children: d(V, {
      handleTimeZoneChange: g,
      timeZone: e == null ? void 0 : e.timeZone,
      viewRef: e.viewRef,
      $style: e.inputFieldStyle,
      disabled: e.disabled,
      value: a != null && a.isValid() ? a : null,
      disabledTime: () => v(e.minTime, e.maxTime),
      ...G(e),
      hourStep: e.hourStep,
      minuteStep: e.minuteStep,
      secondStep: e.secondStep,
      placeholder: e.placeholder,
      onChange: (c2) => {
        M(c2 && c2.isValid() ? c2.format(EP1) : "", e.value.onChange, e.onEvent);
      },
      onFocus: () => e.onEvent("focus"),
      onBlur: () => e.onEvent("blur"),
      suffixIcon: BXe(e.suffixIcon) && e.suffixIcon
    }),
    ...V3(e)
  });
}).setPropertyViewFn((e) => N(p1, {
  children: [N(ka, {
    name: b0.basic,
    children: [e.value.propertyView({
      label: _("prop.defaultValue"),
      tooltip: _("time.formatTip")
    }), e.timeZone.propertyView({
      label: _("prop.timeZone")
    })]
  }), d(h, {
    ...e
  }), ((0, import_react.useContext)(Vr).editorModeStatus === "logic" || (0, import_react.useContext)(Vr).editorModeStatus === "both") && N(p1, {
    children: [N(ka, {
      name: b0.validation,
      children: [vB1(e), zB1(e), kB1(e), e.customRule.propertyView({})]
    }), N(ka, {
      name: b0.interaction,
      children: [e.onEvent.getPropertyView(), qC(e), E7(e)]
    })]
  }), ((0, import_react.useContext)(Vr).editorModeStatus === "layout" || (0, import_react.useContext)(Vr).editorModeStatus === "both") && e.label.getPropertyView(), ((0, import_react.useContext)(Vr).editorModeStatus === "layout" || (0, import_react.useContext)(Vr).editorModeStatus === "both") && N(ka, {
    name: b0.layout,
    children: [e.format.propertyView({
      label: _("time.format")
    }), e.placeholder.propertyView({
      label: _("time.placeholderText")
    })]
  }), ((0, import_react.useContext)(Vr).editorModeStatus === "logic" || (0, import_react.useContext)(Vr).editorModeStatus === "both") && N(ka, {
    name: b0.advanced,
    children: [J(e), e.use12Hours.propertyView({
      label: _("prop.use12Hours")
    }), e.suffixIcon.propertyView({
      label: _("button.suffixIcon")
    })]
  }), ((0, import_react.useContext)(Vr).editorModeStatus === "layout" || (0, import_react.useContext)(Vr).editorModeStatus === "both") && N(p1, {
    children: [d(ka, {
      name: b0.style,
      children: e.style.getPropertyView()
    }), d(ka, {
      name: b0.labelStyle,
      children: e.labelStyle.getPropertyView()
    }), d(ka, {
      name: b0.inputFieldStyle,
      children: e.inputFieldStyle.getPropertyView()
    }), d(ka, {
      name: b0.animationStyle,
      hasTooltip: true,
      children: e.animationStyle.getPropertyView()
    })]
  })]
})).setExposeMethodConfigs(S).build();
var Me = function() {
  const e = {
    start: QU1("start"),
    end: QU1("end"),
    userRangeTimeZone: QU1("userRangeTimeZone", "Etc/UTC"),
    ...c,
    ...$
  };
  return new VS(e, (t) => {
    let a = null;
    t.start.value !== "" && (a = nn(t.start.value, cZn));
    let i = null;
    t.end.value !== "" && (i = nn(t.end.value, cZn));
    const [g, c2] = (0, import_react.useState)(a), [S2, Y] = (0, import_react.useState)(i);
    (0, import_react.useEffect)(() => {
      const y = t.start.value ? nn(t.start.value, cZn) : null;
      c2(y);
    }, [t.start.value]), (0, import_react.useEffect)(() => {
      const y = t.end.value ? nn(t.end.value, cZn) : null;
      Y(y);
    }, [t.end.value]);
    const Q = d(V2, {
      handleTimeRangeZoneChange: (y) => {
        t.userRangeTimeZone.onChange(y);
      },
      timeZone: t == null ? void 0 : t.timeZone,
      viewRef: t.viewRef,
      $style: t.inputFieldStyle,
      disabled: t.disabled,
      start: g != null && g.isValid() ? g : null,
      end: S2 != null && S2.isValid() ? S2 : null,
      disabledTime: () => v(t.minTime, t.maxTime),
      ...G(t),
      hourStep: t.hourStep,
      minuteStep: t.minuteStep,
      secondStep: t.secondStep,
      placeholder: [t.placeholder, t.placeholder],
      onChange: (y, Z) => {
        t.start.onChange(y && y.isValid() ? y.format(EP1) : ""), t.end.onChange(Z && Z.isValid() ? Z.format(EP1) : ""), t.onEvent("change");
      },
      onFocus: () => t.onEvent("focus"),
      onBlur: () => t.onEvent("blur"),
      suffixIcon: BXe(t.suffixIcon) && t.suffixIcon
    }), w = V3({
      ...t,
      value: t.start
    }), F = V3({
      ...t,
      value: t.end
    });
    return t.label({
      required: t.required,
      style: t.style,
      labelStyle: t.labelStyle,
      inputFieldStyle: t.inputFieldStyle,
      animationStyle: t.animationStyle,
      children: Q,
      onMouseDown: (y) => y.stopPropagation(),
      ...w.validateStatus !== "success" ? w : F.validateStatus !== "success" ? F : w
    });
  }).setPropertyViewFn((t) => N(p1, {
    children: [N(ka, {
      name: b0.basic,
      children: [t.start.propertyView({
        label: _("time.start"),
        tooltip: _("time.formatTip")
      }), t.end.propertyView({
        label: _("time.end"),
        tooltip: _("time.formatTip")
      }), t.timeZone.propertyView({
        label: _("prop.timeZone")
      })]
    }), d(h, {
      ...t
    }), ((0, import_react.useContext)(Vr).editorModeStatus === "logic" || (0, import_react.useContext)(Vr).editorModeStatus === "both") && N(p1, {
      children: [N(ka, {
        name: b0.validation,
        children: [vB1(t), zB1(t), kB1(t), t.customRule.propertyView({})]
      }), N(ka, {
        name: b0.interaction,
        children: [t.onEvent.getPropertyView(), qC(t), E7(t)]
      })]
    }), ((0, import_react.useContext)(Vr).editorModeStatus === "layout" || (0, import_react.useContext)(Vr).editorModeStatus === "both") && t.label.getPropertyView(), ((0, import_react.useContext)(Vr).editorModeStatus === "layout" || (0, import_react.useContext)(Vr).editorModeStatus === "both") && N(ka, {
      name: b0.layout,
      children: [t.format.propertyView({
        label: _("time.format")
      }), t.placeholder.propertyView({
        label: _("time.placeholderText")
      })]
    }), ((0, import_react.useContext)(Vr).editorModeStatus === "logic" || (0, import_react.useContext)(Vr).editorModeStatus === "both") && N(ka, {
      name: b0.advanced,
      children: [J(t), t.use12Hours.propertyView({
        label: _("prop.use12Hours")
      }), t.suffixIcon.propertyView({
        label: _("button.suffixIcon")
      })]
    }), ((0, import_react.useContext)(Vr).editorModeStatus === "layout" || (0, import_react.useContext)(Vr).editorModeStatus === "both") && N(p1, {
      children: [d(ka, {
        name: b0.style,
        children: t.style.getPropertyView()
      }), d(ka, {
        name: b0.labelStyle,
        children: t.labelStyle.getPropertyView()
      }), d(ka, {
        name: b0.inputFieldStyle,
        children: t.inputFieldStyle.getPropertyView()
      }), d(ka, {
        name: b0.animationStyle,
        hasTooltip: true,
        children: t.animationStyle.getPropertyView()
      })]
    })]
  })).build();
}();
var Ae = H0(Pe, [new vo("value", _("export.timePickerValueDesc")), HQe({
  name: "formattedValue",
  desc: _("export.timePickerFormattedValueDesc"),
  depKeys: ["value", "format", "timeZone", "userTimeZone"],
  func: (e) => {
    let t = null;
    for (const i of cZn)
      if (nn.utc(e.value, i).isValid()) {
        t = nn.utc(e.value, i);
        break;
      }
    const a = e.timeZone === "UserChoice" ? e.userTimeZone : e.timeZone || "UTC";
    return t != null && t.isValid() ? t.tz(a).format(e.format) : "";
  }
}), HQe({
  name: "timeZone",
  desc: _("export.timeZoneDesc"),
  depKeys: ["timeZone", "userTimeZone"],
  func: (e) => e.timeZone === "UserChoice" ? e.userTimeZone : e.timeZone || "UTC"
}), HQe({
  name: "invalid",
  desc: _("export.invalidDesc"),
  depKeys: ["value", "required", "minTime", "maxTime", "customRule"],
  func: (e) => V3({
    ...e,
    value: {
      value: e.value
    }
  }).validateStatus !== "success"
}), ...RQe]);
var I = H0(Me, [
  // new NameConfig("start", trans("export.timeRangeStartDesc")),
  // new NameConfig("end", trans("export.timeRangeEndDesc")),
  HQe({
    name: "start",
    desc: _("export.timeRangeStartDesc"),
    depKeys: ["start", "timeZone", "userRangeTimeZone"],
    func: (e) => {
      let t = null;
      for (const i of cZn)
        if (nn.utc(e.start, i).isValid()) {
          t = nn.utc(e.start, i);
          break;
        }
      (t == null ? void 0 : t.hour()) === 0 && (t == null ? void 0 : t.minute()) === 0 && (t == null ? void 0 : t.second()) === 0 && (t = t == null ? void 0 : t.hour(12));
      const a = e.timeZone === "UserChoice" ? e.userRangeTimeZone : e.timeZone || "UTC";
      return t != null && t.isValid() ? t.tz(a).format(e.format || "HH:mm:ss") : null;
    }
  }),
  HQe({
    name: "end",
    desc: _("export.timeRangeEndDesc"),
    depKeys: ["end", "timeZone", "userRangeTimeZone"],
    func: (e) => {
      let t = null;
      for (const i of cZn)
        if (nn.utc(e.end, i).isValid()) {
          t = nn.utc(e.end, i);
          break;
        }
      const a = e.timeZone === "UserChoice" ? e.userRangeTimeZone : e.timeZone || "UTC";
      return t != null && t.isValid() ? t.tz(a).format(e.format || "HH:mm:ss") : null;
    }
  }),
  HQe({
    name: "formattedValue",
    desc: _("export.timeRangeFormattedValueDesc"),
    depKeys: ["start", "end", "format", "timeZone", "userRangeTimeZone"],
    func: (e) => {
      let t = null, a = null;
      for (const S2 of cZn)
        if (nn.utc(e.start, S2).isValid()) {
          t = nn.utc(e.start, S2);
          break;
        }
      for (const S2 of cZn)
        if (nn.utc(e.end, S2).isValid()) {
          a = nn.utc(e.end, S2);
          break;
        }
      const i = e.timeZone === "UserChoice" ? e.userRangeTimeZone : e.timeZone || "UTC", g = t != null && t.isValid() ? t.tz(i).format(e.format) : "", c2 = a != null && a.isValid() ? a.tz(i).format(e.format) : "";
      return [g, c2].filter(Boolean).join(" - ");
    }
  }),
  HQe({
    name: "formattedStartValue",
    desc: _("export.timeRangeFormattedStartValueDesc"),
    depKeys: ["start", "format", "timeZone", "userRangeTimeZone"],
    func: (e) => {
      let t = null;
      for (const i of cZn)
        if (nn.utc(e.start, i).isValid()) {
          t = nn.utc(e.start, i);
          break;
        }
      const a = e.timeZone === "UserChoice" ? e.userRangeTimeZone : e.timeZone || "UTC";
      return t != null && t.isValid() ? t.tz(a).format(e.format) : "";
    }
  }),
  HQe({
    name: "formattedEndValue",
    desc: _("export.timeRangeFormattedEndValueDesc"),
    depKeys: ["end", "format", "timeZone", "userRangeTimeZone"],
    func: (e) => {
      let t = null;
      for (const i of cZn)
        if (nn.utc(e.end, i).isValid()) {
          t = nn.utc(e.end, i);
          break;
        }
      const a = e.timeZone === "UserChoice" ? e.userRangeTimeZone : e.timeZone || "UTC";
      return t != null && t.isValid() ? t.tz(a).format(e.format) : "";
    }
  }),
  HQe({
    name: "timeZone",
    desc: _("export.timeZoneDesc"),
    depKeys: ["timeZone", "userRangeTimeZone"],
    func: (e) => e.timeZone === "UserChoice" ? e.userRangeTimeZone : e.timeZone || "UTC"
  }),
  HQe({
    name: "invalid",
    desc: _("export.invalidDesc"),
    depKeys: ["start", "end", "required", "minTime", "maxTime", "customRule"],
    func: (e) => {
      const t = V3({
        ...e,
        value: {
          value: e.start
        }
      }).validateStatus !== "success", a = V3({
        ...e,
        value: {
          value: e.end
        }
      }).validateStatus !== "success";
      return t || a;
    }
  }),
  ...RQe
]);
I = N0(I, [...S, {
  method: {
    name: "clearAll",
    description: _("date.clearAllDesc"),
    params: []
  },
  execute: (e) => {
    e.children.start.getView().onChange(""), e.children.end.getView().onChange("");
  }
}, {
  method: {
    name: "resetAll",
    description: _("date.resetAllDesc"),
    params: []
  },
  execute: (e) => {
    e.children.start.getView().reset(), e.children.end.getView().reset();
  }
}, {
  method: {
    name: "setRange",
    params: []
  },
  execute: (e, t) => {
    if (t.length !== 1)
      return Promise.reject(_("formComp.valuesLengthError"));
    const a = t[0];
    if (typeof a != "object" || a === null || Array.isArray(a) || !a.hasOwnProperty("start") || !a.hasOwnProperty("end"))
      return Promise.reject(_("formComp.valueTypeError"));
    e.children.start.getView().onChange(a.start), e.children.end.getView().onChange(a.end);
  }
}]);

export {
  Pe,
  Me,
  Ae,
  I
};
//# sourceMappingURL=chunk-H6EGUAM2.js.map
