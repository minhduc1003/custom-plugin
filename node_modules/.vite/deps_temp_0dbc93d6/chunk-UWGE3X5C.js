import {
  c,
  h
} from "./chunk-A3UAJ3XR.js";
import {
  $s,
  BXe,
  C5,
  Ct,
  E7,
  Ee1,
  Fj1,
  Gse,
  H0,
  H3,
  IW1,
  M2,
  N,
  N0,
  N3,
  Q6,
  RQe,
  T2,
  VC,
  VS,
  Vr,
  _,
  ao,
  b0,
  ca,
  d,
  de,
  ee1,
  fg,
  h1,
  hN,
  hl,
  ho,
  ka,
  mye,
  nc,
  p1,
  qC,
  qse,
  sa,
  t2,
  vc,
  vo,
  ya,
  z3
} from "./chunk-2ZELARZW.js";
import {
  require_react_dom
} from "./chunk-VGGCA2L5.js";
import {
  require_react
} from "./chunk-73THXJN7.js";
import {
  __toESM
} from "./chunk-2TUXWMP5.js";

// node_modules/lowcoder-sdk/dist/e1e86b1c.js
var import_react = __toESM(require_react(), 1);
var import_react_dom = __toESM(require_react_dom(), 1);
var L = N3((e) => {
  var a;
  if (typeof e == "number")
    return e;
  if (typeof e == "string") {
    const l = e.trim();
    if (l === "")
      return 0;
    const s = Number(l);
    if (!h1.isNaN(s))
      return s;
    const d2 = ["bytes", "kb", "mb", "gb", "tb"];
    if (new RegExp("^\\d+\\s*[kmgt]b$", "i").test(l)) {
      const m = parseInt(((a = l.match("^\\d+")) == null ? void 0 : a[0]) ?? "", 10), i = d2.findIndex((b) => l.search(new RegExp(b, "i")) !== -1);
      return m * Math.pow(1024, i);
    }
  }
  throw new TypeError(_("file.typeErrorMsg", {
    value: typeof e
  }));
});
var D = N(p1, {
  children: [d("div", {
    children: _("file.parsedValueTooltip1")
  }), d("div", {
    children: _("file.parsedValueTooltip2")
  })]
});
var ge = [VC, {
  label: _("event.parse"),
  value: "parse",
  description: _("event.parseDesc")
}];
var xe = {
  minSize: L,
  maxSize: L,
  maxFiles: vc
};
var be = {
  value: z3([]),
  files: z3([]),
  fileType: fg,
  showUploadList: ao.DEFAULT_TRUE,
  disabled: H3,
  onEvent: ya(ge),
  style: nc(IW1, "style"),
  animationStyle: nc(Fj1, "animationStyle"),
  parseFiles: Q6,
  parsedValue: z3([]),
  prefixIcon: t2(C5, "/icon:solid/arrow-up-from-bracket"),
  suffixIcon: C5,
  ...xe
};
var ye = (e) => [e.minSize.propertyView({
  label: _("file.minSize"),
  placeholder: "1kb",
  tooltip: _("file.minSizeTooltip")
}), e.maxSize.propertyView({
  label: _("file.maxSize"),
  placeholder: "10kb",
  tooltip: _("file.maxSizeTooltip")
})];
var we = (e) => ({
  accept: e.fileType.toString(),
  multiple: e.uploadType === "multiple",
  directory: e.uploadType === "directory",
  showUploadList: e.showUploadList,
  customRequest: (a) => a.onSuccess && a.onSuccess({})
  // Override the default upload logic and do not upload to the specified server
});
var Se = (e) => T2`
    .ant-btn {
      border-radius: ${e.radius};
      rotate: ${e.rotation};
      margin: ${e.margin};	
      padding: ${e.padding};	
      width: ${qse(e.margin)};	
      height: ${Gse(e.margin)};
      font-family:${e.fontFamily};
      font-size:${e.textSize};
      font-weight:${e.textWeight};
      font-style:${e.fontStyle};
      border-width:${e.borderWidth};
      border-style:${e.borderStyle};
      text-decoration:${e.textDecoration};
      text-transform:${e.textTransform};
      text-transform:${e.textTransform};
    }

    .ant-btn:not(:disabled) {
      border-color: ${e.border};
      background-color: ${e.background};
      color: ${e.text};

      &:hover,
      &:focus {
        border-color: ${e.accent};
        color: ${e.accent};
      }

      &:active {
        border-color: ${$s(e.accent, 0.1)};
        color: ${$s(e.accent, 0.1)};
      }
    }
  `;
var Ve = de(hN)`
  .ant-upload,
  .ant-btn {
    ${(e) => e.$animationStyle}
    width: 100%;
    display: inline-flex;
    justify-content: center;
    align-items: center;
    gap: 6px;

    > span {
      overflow: hidden;
      display: inline-flex;
      justify-content: flex-start;
      align-items: center;
      gap: 6px;
      min-height: 1px;
    }
  }
  ${(e) => e.$style && Se(e.$style)}
`;
var P = de.span`
  display: flex;
`;
function Ce(e) {
  return Promise.all(e.map((a) => {
    var l;
    return ((l = a.originFileObj) == null ? void 0 : l.arrayBuffer().then((s) => Ee1.Buffer.from(s).toString("base64")).catch(() => null)) ?? null;
  }));
}
function ve(e) {
  return Promise.all(e.map(async (a) => {
    var s;
    const l = await import("./2112abba-6EDT3BVO.js");
    return ((s = a.originFileObj) == null ? void 0 : s.arrayBuffer().then((d2) => {
      var i;
      const f = mye.getExtension(((i = a.originFileObj) == null ? void 0 : i.type) ?? "");
      if (f === "xlsx" || f === "csv") {
        const b = l.read(d2, {
          raw: true,
          codepage: 65001
        });
        return l.utils.sheet_to_json(b.Sheets[b.SheetNames[0]], {
          raw: false
        });
      }
      const m = new TextDecoder("utf-8").decode(d2);
      return m ? JSON.parse(m) : null;
    }).catch(() => null)) ?? null;
  }));
}
var $e = (e) => {
  const {
    dispatch: a,
    files: l,
    style: s
  } = e, [d2, f] = (0, import_react.useState)(l.map((i) => ({
    ...i,
    status: "done"
  })));
  (0, import_react.useEffect)(() => {
    l.length === 0 && d2.length !== 0 && f([]);
  }, [l]);
  const m = BXe(e.prefixIcon) || !!e.text || BXe(e.suffixIcon);
  return d(Ve, {
    $animationStyle: e.animationStyle,
    ...we(e),
    $style: s,
    fileList: d2,
    beforeUpload: (i) => !i.size || i.size <= 0 ? (Ct.error(`${i.name} ` + _("file.fileEmptyErrorMsg")), hN.LIST_IGNORE) : e.minSize && i.size < e.minSize || e.maxSize && i.size > e.maxSize ? (Ct.error(`${i.name} ` + _("file.fileSizeExceedErrorMsg")), hN.LIST_IGNORE) : true,
    onChange: (i) => {
      if (i.fileList.filter((n) => n.status === "uploading").length !== 0) {
        f(i.fileList);
        return;
      }
      let p = e.maxFiles;
      e.uploadType === "single" ? p = 1 : e.maxFiles <= 0 && (p = 100);
      const h2 = i.fileList.filter((n) => n.status === "done");
      if (i.file.status === "removed") {
        const n = e.files.findIndex((V) => V.uid === i.file.uid);
        a(hl({
          value: ho([...e.value.slice(0, n), ...e.value.slice(n + 1)], false),
          files: ho([...e.files.slice(0, n), ...e.files.slice(n + 1)], false),
          parsedValue: ho([...e.parsedValue.slice(0, n), ...e.parsedValue.slice(n + 1)], false)
        })), e.onEvent("change");
      } else {
        const n = Math.min(e.value.length, h2.length), V = Math.min(e.parsedValue.length, h2.length);
        Promise.all([Ce(h2.slice(n)), ve(h2.slice(V))]).then(([B, O]) => {
          a(hl({
            value: ho([...e.value, ...B].slice(-p), false),
            files: ho(h2.map((j) => h1.pick(j, ["uid", "name", "type", "size", "lastModified"])).slice(-p), false),
            ...e.parseFiles ? {
              parsedValue: ho([...e.parsedValue, ...O].slice(-p), false)
            } : {}
          })), e.onEvent("change"), e.onEvent("parse");
        });
      }
      f(h2.slice(-p));
    },
    children: d(sa, {
      disabled: e.disabled,
      children: m && N("span", {
        children: [BXe(e.prefixIcon) && d(P, {
          children: e.prefixIcon
        }), !!e.text && e.text, BXe(e.suffixIcon) && d(P, {
          children: e.suffixIcon
        })]
      })
    })
  });
};
var Te = [{
  label: _("file.single"),
  value: "single"
}, {
  label: _("file.multiple"),
  value: "multiple"
}, {
  label: _("file.directory"),
  value: "directory"
}];
var Fe = {
  text: t2(M2, _("file.upload")),
  uploadType: ca(Te, "single"),
  ...be,
  ...c
};
var F = new VS(Fe, (e, a) => d($e, {
  ...e,
  dispatch: a
})).setPropertyViewFn((e) => N(p1, {
  children: [N(ka, {
    name: b0.basic,
    children: [e.text.propertyView({
      label: _("text")
    }), e.uploadType.propertyView({
      label: _("file.uploadType")
    })]
  }), d(h, {
    ...e
  }), ((0, import_react.useContext)(Vr).editorModeStatus === "logic" || (0, import_react.useContext)(Vr).editorModeStatus === "both") && N(p1, {
    children: [N(ka, {
      name: b0.validation,
      children: [e.uploadType.getView() !== "single" && e.maxFiles.propertyView({
        label: _("file.maxFiles")
      }), ye(e)]
    }), N(ka, {
      name: b0.interaction,
      children: [e.onEvent.getPropertyView(), qC(e), E7(e)]
    }), N(ka, {
      name: b0.advanced,
      children: [e.fileType.propertyView({
        label: _("file.fileType"),
        placeholder: '[".png"]',
        tooltip: N(p1, {
          children: [_("file.reference"), " ", d("a", {
            href: _("file.fileTypeTooltipUrl"),
            target: "_blank",
            rel: "noreferrer",
            children: _("file.fileTypeTooltip")
          })]
        })
      }), e.prefixIcon.propertyView({
        label: _("button.prefixIcon")
      }), e.suffixIcon.propertyView({
        label: _("button.suffixIcon")
      }), e.showUploadList.propertyView({
        label: _("file.showUploadList")
      }), e.parseFiles.propertyView({
        label: _("file.parseFiles"),
        tooltip: D,
        placement: "right"
      })]
    })]
  }), ((0, import_react.useContext)(Vr).editorModeStatus === "layout" || (0, import_react.useContext)(Vr).editorModeStatus === "both") && N(p1, {
    children: [d(ka, {
      name: b0.style,
      children: e.style.getPropertyView()
    }), d(ka, {
      name: b0.animationStyle,
      hasTooltip: true,
      children: e.animationStyle.getPropertyView()
    })]
  })]
})).build();
F = N0(F, [{
  method: {
    name: "clearValue",
    description: _("file.clearValueDesc"),
    params: []
  },
  execute: (e) => e.dispatch(hl({
    value: ho([], false),
    files: ho([], false),
    parsedValue: ho([], false)
  }))
}]);
var Le = H0(F, [new vo("value", _("file.filesValueDesc")), new vo("files", N(p1, {
  children: [_("file.filesDesc"), (() => {
    const e = ee1("file");
    if (e)
      return N(p1, {
        children: ["Â ", d("a", {
          href: e,
          target: "_blank",
          rel: "noreferrer",
          children: _("uiComp.fileUploadCompName")
        })]
      });
  })()]
})), new vo("parsedValue", D), ...RQe]);

export {
  Ce,
  ve,
  Le
};
//# sourceMappingURL=chunk-UWGE3X5C.js.map
