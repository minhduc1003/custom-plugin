import {
  Bn,
  M2,
  PL,
  TI,
  d,
  g2,
  vc
} from "./chunk-2ZELARZW.js";
import {
  require_react_dom
} from "./chunk-VGGCA2L5.js";
import {
  require_react
} from "./chunk-73THXJN7.js";
import {
  __toESM
} from "./chunk-2TUXWMP5.js";

// node_modules/lowcoder-sdk/dist/720136f1.js
var import_react = __toESM(require_react(), 1);
var import_react_dom = __toESM(require_react_dom(), 1);
var i = (a) => d("div", {});
var u = function() {
  const a = {
    v1: Bn(0),
    v2: vc,
    vStr: M2
  };
  return new g2(a, (e) => ({
    v1: e.v1,
    v2: e.v2,
    v3: e.v1 + e.v2,
    vStr: e.vStr
  })).setPropertyViewFn(i).build();
}();
var l = {
  value: {
    v1: 11,
    v2: "{{testParam + 10}}"
  }
};
test("without context", () => {
  let a = new u(l);
  a = PL(a);
  let e = a.getView();
  expect(e.v1).toEqual(11), expect(e.v2).toEqual(0), expect(e.v3).toEqual(11);
});
test("test with context", () => {
  const a = TI(u);
  let e = new a(l);
  e = PL(e);
  let t = e.getView()({
    testParam: 100
  });
  expect(t.v1).toEqual(11), expect(t.v2).toEqual(110), expect(t.v3).toEqual(121), t = e.getView()({
    testParam: -100
  }), expect(t.v1).toEqual(11), expect(t.v2).toEqual(-90), expect(t.v3).toEqual(-79);
});
test("test with multi context", () => {
  const a = {
    value: {
      v1: 11,
      v2: "{{param1+param2*2}}"
    }
  }, e = TI(u);
  let t = new e(a);
  t = PL(t);
  let o = t.getView()({
    param1: 100,
    param2: 102
  });
  expect(o.v1).toEqual(11), expect(o.v2).toEqual(304);
});
test("test with context bad input", () => {
  const a = {
    value: {
      v1: 11,
      v2: "{{tstParam}}"
    }
  }, e = TI(u);
  let t = new e(a);
  t = PL(t);
  let o = t.getView()({
    testParam: 100
  });
  expect(o.v1).toEqual(11);
});
test("with context Date value", () => {
  const a = {
    value: {
      v1: 11,
      v2: "{{testParam}}",
      vStr: "{{testParam}}"
    }
  }, e = TI(u);
  let t = new e(a);
  t = PL(t);
  let o = t.getView()({
    testParam: /* @__PURE__ */ new Date(1664887576e3)
    // 2022-10-04T12:46:16.000Z
  });
  expect(o.v1).toEqual(11), expect(o.v2).toEqual(1664887576e3), expect(o.vStr).toEqual("2022-10-04T12:46:16.000Z");
});
test("with context Date method", () => {
  const a = {
    value: {
      v1: 11,
      v2: "{{testParam.getTime()}}",
      vStr: "{{testParam.getTime()}}"
    }
  }, e = TI(u);
  let t = new e(a);
  t = PL(t);
  let o = t.getView()({
    testParam: /* @__PURE__ */ new Date(1664887576e3)
  });
  expect(o.v1).toEqual(11), expect(o.v2).toEqual(1664887576e3), expect(o.vStr).toEqual("1664887576000");
});
export {
  u as TestComp
};
//# sourceMappingURL=720136f1-NHADNG5L.js.map
