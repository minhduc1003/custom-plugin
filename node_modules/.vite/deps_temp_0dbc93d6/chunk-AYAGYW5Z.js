import {
  IC,
  Jf,
  LH,
  Qf,
  U8,
  WC,
  _,
  d,
  de,
  eN,
  g2,
  gs,
  nV,
  z3,
  zr
} from "./chunk-2ZELARZW.js";
import {
  require_react_dom
} from "./chunk-VGGCA2L5.js";
import {
  require_react
} from "./chunk-73THXJN7.js";
import {
  __toESM
} from "./chunk-2TUXWMP5.js";

// node_modules/lowcoder-sdk/dist/608865ad.js
var import_react = __toESM(require_react(), 1);
var import_react_dom = __toESM(require_react_dom(), 1);
var x = de.div`
  .ant-modal-content {
    overflow: hidden;
    background-color: ${(o) => o.$background};

    .ant-modal-body > div {
      background-color: ${(o) => o.$background};
    }
  }
`;
var P = de.div`
  pointer-events: auto;

  .ant-modal-body > div {
    overflow: overlay;
  }
`;
var V = (0, import_react.createContext)({
  modalWidth: 520
});
var S = (o) => d(Jf, {
  ...o,
  emptyRows: 15,
  autoHeight: true
});
function I(o) {
  const {
    visible: n,
    containerProps: t,
    onCancel: d2
  } = o, s = (0, import_react.useContext)(Qf), {
    modalWidth: c = 520
  } = (0, import_react.useContext)(V);
  return n ? d(P, {
    children: d(eN, {
      width: c,
      open: n,
      onCancel: d2,
      getContainer: () => document.querySelector(`#${WC}`) || document.body,
      footer: null,
      styles: {
        body: {
          padding: "0"
        }
      },
      zIndex: gs.modal,
      modalRender: (u) => d(x, {
        $background: s,
        onClick: () => {
        },
        children: u
      }),
      focusTriggerAfterClose: false,
      children: d(S, {
        ...t,
        hintPlaceholder: LH,
        containerPadding: [36, 36],
        items: IC(t.items)
      })
    })
  }) : null;
}
var $ = {
  container: nV,
  showConfigModal: z3(false)
};
var T = new g2($, (o, n) => d(I, {
  containerProps: o.container,
  visible: o.showConfigModal,
  onCancel: () => n(U8("showConfigModal", false, false))
})).setPropertyViewFn((o, n) => d(zr, {
  onClick: () => n(U8("showConfigModal", true, false)),
  children: _("slotControl.configSlotView")
})).build();
var W = class extends T {
  propertyView(n) {
    return d(zr, {
      onClick: () => this.dispatch(this.changeChildAction("showConfigModal", true)),
      children: n.buttonText
    });
  }
  getPasteValue(n) {
    return {
      ...this.toJsonValue(),
      container: this.children.container.getPasteValue(n)
    };
  }
};

export {
  V,
  W
};
//# sourceMappingURL=chunk-AYAGYW5Z.js.map
