import "./chunk-2TUXWMP5.js";

// node_modules/lowcoder-sdk/dist/a9ee5852.js
var mr = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof global < "u" ? global : typeof self < "u" ? self : {};
function Fn(t4) {
  return t4 && Object.prototype.hasOwnProperty.call(t4, "default") ? t4.default : t4;
}
var gr = typeof global < "u" ? global : typeof self < "u" ? self : typeof window < "u" ? window : {};
function v0() {
  throw new Error("setTimeout has not been defined");
}
function E0() {
  throw new Error("clearTimeout has not been defined");
}
var Xr = v0;
var Qr = E0;
typeof gr.setTimeout == "function" && (Xr = setTimeout);
typeof gr.clearTimeout == "function" && (Qr = clearTimeout);
function b0(t4) {
  if (Xr === setTimeout)
    return setTimeout(t4, 0);
  if ((Xr === v0 || !Xr) && setTimeout)
    return Xr = setTimeout, setTimeout(t4, 0);
  try {
    return Xr(t4, 0);
  } catch {
    try {
      return Xr.call(null, t4, 0);
    } catch {
      return Xr.call(this, t4, 0);
    }
  }
}
function u1(t4) {
  if (Qr === clearTimeout)
    return clearTimeout(t4);
  if ((Qr === E0 || !Qr) && clearTimeout)
    return Qr = clearTimeout, clearTimeout(t4);
  try {
    return Qr(t4);
  } catch {
    try {
      return Qr.call(null, t4);
    } catch {
      return Qr.call(this, t4);
    }
  }
}
var Mr = [];
var Xn = false;
var bn;
var wa = -1;
function c1() {
  !Xn || !bn || (Xn = false, bn.length ? Mr = bn.concat(Mr) : wa = -1, Mr.length && C0());
}
function C0() {
  if (!Xn) {
    var t4 = b0(c1);
    Xn = true;
    for (var e = Mr.length; e; ) {
      for (bn = Mr, Mr = []; ++wa < e; )
        bn && bn[wa].run();
      wa = -1, e = Mr.length;
    }
    bn = null, Xn = false, u1(t4);
  }
}
function p1(t4) {
  var e = new Array(arguments.length - 1);
  if (arguments.length > 1)
    for (var r = 1; r < arguments.length; r++)
      e[r - 1] = arguments[r];
  Mr.push(new S0(t4, e)), Mr.length === 1 && !Xn && b0(C0);
}
function S0(t4, e) {
  this.fun = t4, this.array = e;
}
S0.prototype.run = function() {
  this.fun.apply(null, this.array);
};
var f1 = "browser";
var h1 = "browser";
var m1 = true;
var d1 = {};
var g1 = [];
var y1 = "";
var x1 = {};
var v1 = {};
var E1 = {};
function Pn() {
}
var b1 = Pn;
var C1 = Pn;
var S1 = Pn;
var A1 = Pn;
var D1 = Pn;
var w1 = Pn;
var k1 = Pn;
function T1(t4) {
  throw new Error("process.binding is not supported");
}
function F1() {
  return "/";
}
function P1(t4) {
  throw new Error("process.chdir is not supported");
}
function I1() {
  return 0;
}
var Vn = gr.performance || {};
var _1 = Vn.now || Vn.mozNow || Vn.msNow || Vn.oNow || Vn.webkitNow || function() {
  return (/* @__PURE__ */ new Date()).getTime();
};
function B1(t4) {
  var e = _1.call(Vn) * 1e-3, r = Math.floor(e), s = Math.floor(e % 1 * 1e9);
  return t4 && (r = r - t4[0], s = s - t4[1], s < 0 && (r--, s += 1e9)), [r, s];
}
var O1 = /* @__PURE__ */ new Date();
function L1() {
  var t4 = /* @__PURE__ */ new Date(), e = t4 - O1;
  return e / 1e3;
}
var Ze = {
  nextTick: p1,
  title: f1,
  browser: m1,
  env: d1,
  argv: g1,
  version: y1,
  versions: x1,
  on: b1,
  addListener: C1,
  once: S1,
  off: A1,
  removeListener: D1,
  removeAllListeners: w1,
  emit: k1,
  binding: T1,
  cwd: F1,
  chdir: P1,
  umask: I1,
  hrtime: B1,
  platform: h1,
  release: v1,
  config: E1,
  uptime: L1
};
var A0 = {};
function D0(t4, e) {
  for (var r = 0, s = t4.length - 1; s >= 0; s--) {
    var n = t4[s];
    n === "." ? t4.splice(s, 1) : n === ".." ? (t4.splice(s, 1), r++) : r && (t4.splice(s, 1), r--);
  }
  if (e)
    for (; r--; r)
      t4.unshift("..");
  return t4;
}
var R1 = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var jl = function(t4) {
  return R1.exec(t4).slice(1);
};
function ja() {
  for (var t4 = "", e = false, r = arguments.length - 1; r >= -1 && !e; r--) {
    var s = r >= 0 ? arguments[r] : "/";
    if (typeof s != "string")
      throw new TypeError("Arguments to path.resolve must be strings");
    if (!s)
      continue;
    t4 = s + "/" + t4, e = s.charAt(0) === "/";
  }
  return t4 = D0(Vl(t4.split("/"), function(n) {
    return !!n;
  }), !e).join("/"), (e ? "/" : "") + t4 || ".";
}
function Ml(t4) {
  var e = $l(t4), r = j1(t4, -1) === "/";
  return t4 = D0(Vl(t4.split("/"), function(s) {
    return !!s;
  }), !e).join("/"), !t4 && !e && (t4 = "."), t4 && r && (t4 += "/"), (e ? "/" : "") + t4;
}
function $l(t4) {
  return t4.charAt(0) === "/";
}
function w0() {
  var t4 = Array.prototype.slice.call(arguments, 0);
  return Ml(Vl(t4, function(e, r) {
    if (typeof e != "string")
      throw new TypeError("Arguments to path.join must be strings");
    return e;
  }).join("/"));
}
function k0(t4, e) {
  t4 = ja(t4).substr(1), e = ja(e).substr(1);
  function r(u) {
    for (var c = 0; c < u.length && u[c] === ""; c++)
      ;
    for (var f = u.length - 1; f >= 0 && u[f] === ""; f--)
      ;
    return c > f ? [] : u.slice(c, f - c + 1);
  }
  for (var s = r(t4.split("/")), n = r(e.split("/")), a = Math.min(s.length, n.length), o = a, l = 0; l < a; l++)
    if (s[l] !== n[l]) {
      o = l;
      break;
    }
  for (var i = [], l = o; l < s.length; l++)
    i.push("..");
  return i = i.concat(n.slice(o)), i.join("/");
}
var T0 = "/";
var F0 = ":";
function P0(t4) {
  var e = jl(t4), r = e[0], s = e[1];
  return !r && !s ? "." : (s && (s = s.substr(0, s.length - 1)), r + s);
}
function I0(t4, e) {
  var r = jl(t4)[2];
  return e && r.substr(-1 * e.length) === e && (r = r.substr(0, r.length - e.length)), r;
}
function _0(t4) {
  return jl(t4)[3];
}
var N1 = {
  extname: _0,
  basename: I0,
  dirname: P0,
  sep: T0,
  delimiter: F0,
  relative: k0,
  join: w0,
  isAbsolute: $l,
  normalize: Ml,
  resolve: ja
};
function Vl(t4, e) {
  if (t4.filter)
    return t4.filter(e);
  for (var r = [], s = 0; s < t4.length; s++)
    e(t4[s], s, t4) && r.push(t4[s]);
  return r;
}
var j1 = "ab".substr(-1) === "b" ? function(t4, e, r) {
  return t4.substr(e, r);
} : function(t4, e, r) {
  return e < 0 && (e = t4.length + e), t4.substr(e, r);
};
var M1 = Object.freeze({
  __proto__: null,
  resolve: ja,
  normalize: Ml,
  isAbsolute: $l,
  join: w0,
  relative: k0,
  sep: T0,
  delimiter: F0,
  dirname: P0,
  basename: I0,
  extname: _0,
  default: N1
});
var B0 = Fn(M1);
var Ar = [];
var ur = [];
var $1 = typeof Uint8Array < "u" ? Uint8Array : Array;
var Ul = false;
function O0() {
  Ul = true;
  for (var t4 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", e = 0, r = t4.length; e < r; ++e)
    Ar[e] = t4[e], ur[t4.charCodeAt(e)] = e;
  ur["-".charCodeAt(0)] = 62, ur["_".charCodeAt(0)] = 63;
}
function V1(t4) {
  Ul || O0();
  var e, r, s, n, a, o, l = t4.length;
  if (l % 4 > 0)
    throw new Error("Invalid string. Length must be a multiple of 4");
  a = t4[l - 2] === "=" ? 2 : t4[l - 1] === "=" ? 1 : 0, o = new $1(l * 3 / 4 - a), s = a > 0 ? l - 4 : l;
  var i = 0;
  for (e = 0, r = 0; e < s; e += 4, r += 3)
    n = ur[t4.charCodeAt(e)] << 18 | ur[t4.charCodeAt(e + 1)] << 12 | ur[t4.charCodeAt(e + 2)] << 6 | ur[t4.charCodeAt(e + 3)], o[i++] = n >> 16 & 255, o[i++] = n >> 8 & 255, o[i++] = n & 255;
  return a === 2 ? (n = ur[t4.charCodeAt(e)] << 2 | ur[t4.charCodeAt(e + 1)] >> 4, o[i++] = n & 255) : a === 1 && (n = ur[t4.charCodeAt(e)] << 10 | ur[t4.charCodeAt(e + 1)] << 4 | ur[t4.charCodeAt(e + 2)] >> 2, o[i++] = n >> 8 & 255, o[i++] = n & 255), o;
}
function U1(t4) {
  return Ar[t4 >> 18 & 63] + Ar[t4 >> 12 & 63] + Ar[t4 >> 6 & 63] + Ar[t4 & 63];
}
function q1(t4, e, r) {
  for (var s, n = [], a = e; a < r; a += 3)
    s = (t4[a] << 16) + (t4[a + 1] << 8) + t4[a + 2], n.push(U1(s));
  return n.join("");
}
function bd(t4) {
  Ul || O0();
  for (var e, r = t4.length, s = r % 3, n = "", a = [], o = 16383, l = 0, i = r - s; l < i; l += o)
    a.push(q1(t4, l, l + o > i ? i : l + o));
  return s === 1 ? (e = t4[r - 1], n += Ar[e >> 2], n += Ar[e << 4 & 63], n += "==") : s === 2 && (e = (t4[r - 2] << 8) + t4[r - 1], n += Ar[e >> 10], n += Ar[e >> 4 & 63], n += Ar[e << 2 & 63], n += "="), a.push(n), a.join("");
}
function li(t4, e, r, s, n) {
  var a, o, l = n * 8 - s - 1, i = (1 << l) - 1, u = i >> 1, c = -7, f = r ? n - 1 : 0, h = r ? -1 : 1, p = t4[e + f];
  for (f += h, a = p & (1 << -c) - 1, p >>= -c, c += l; c > 0; a = a * 256 + t4[e + f], f += h, c -= 8)
    ;
  for (o = a & (1 << -c) - 1, a >>= -c, c += s; c > 0; o = o * 256 + t4[e + f], f += h, c -= 8)
    ;
  if (a === 0)
    a = 1 - u;
  else {
    if (a === i)
      return o ? NaN : (p ? -1 : 1) * (1 / 0);
    o = o + Math.pow(2, s), a = a - u;
  }
  return (p ? -1 : 1) * o * Math.pow(2, a - s);
}
function L0(t4, e, r, s, n, a) {
  var o, l, i, u = a * 8 - n - 1, c = (1 << u) - 1, f = c >> 1, h = n === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0, p = s ? 0 : a - 1, m = s ? 1 : -1, d = e < 0 || e === 0 && 1 / e < 0 ? 1 : 0;
  for (e = Math.abs(e), isNaN(e) || e === 1 / 0 ? (l = isNaN(e) ? 1 : 0, o = c) : (o = Math.floor(Math.log(e) / Math.LN2), e * (i = Math.pow(2, -o)) < 1 && (o--, i *= 2), o + f >= 1 ? e += h / i : e += h * Math.pow(2, 1 - f), e * i >= 2 && (o++, i /= 2), o + f >= c ? (l = 0, o = c) : o + f >= 1 ? (l = (e * i - 1) * Math.pow(2, n), o = o + f) : (l = e * Math.pow(2, f - 1) * Math.pow(2, n), o = 0)); n >= 8; t4[r + p] = l & 255, p += m, l /= 256, n -= 8)
    ;
  for (o = o << n | l, u += n; u > 0; t4[r + p] = o & 255, p += m, o /= 256, u -= 8)
    ;
  t4[r + p - m] |= d * 128;
}
var W1 = {}.toString;
var R0 = Array.isArray || function(t4) {
  return W1.call(t4) == "[object Array]";
};
var z1 = 50;
me.TYPED_ARRAY_SUPPORT = gr.TYPED_ARRAY_SUPPORT !== void 0 ? gr.TYPED_ARRAY_SUPPORT : true;
Ma();
function Ma() {
  return me.TYPED_ARRAY_SUPPORT ? 2147483647 : 1073741823;
}
function $r(t4, e) {
  if (Ma() < e)
    throw new RangeError("Invalid typed array length");
  return me.TYPED_ARRAY_SUPPORT ? (t4 = new Uint8Array(e), t4.__proto__ = me.prototype) : (t4 === null && (t4 = new me(e)), t4.length = e), t4;
}
function me(t4, e, r) {
  if (!me.TYPED_ARRAY_SUPPORT && !(this instanceof me))
    return new me(t4, e, r);
  if (typeof t4 == "number") {
    if (typeof e == "string")
      throw new Error(
        "If encoding is specified then the first argument must be a string"
      );
    return ql(this, t4);
  }
  return N0(this, t4, e, r);
}
me.poolSize = 8192;
me._augment = function(t4) {
  return t4.__proto__ = me.prototype, t4;
};
function N0(t4, e, r, s) {
  if (typeof e == "number")
    throw new TypeError('"value" argument must not be a number');
  return typeof ArrayBuffer < "u" && e instanceof ArrayBuffer ? K1(t4, e, r, s) : typeof e == "string" ? H1(t4, e, r) : J1(t4, e);
}
me.from = function(t4, e, r) {
  return N0(null, t4, e, r);
};
me.TYPED_ARRAY_SUPPORT && (me.prototype.__proto__ = Uint8Array.prototype, me.__proto__ = Uint8Array, typeof Symbol < "u" && Symbol.species && me[Symbol.species]);
function j0(t4) {
  if (typeof t4 != "number")
    throw new TypeError('"size" argument must be a number');
  if (t4 < 0)
    throw new RangeError('"size" argument must not be negative');
}
function G1(t4, e, r, s) {
  return j0(e), e <= 0 ? $r(t4, e) : r !== void 0 ? typeof s == "string" ? $r(t4, e).fill(r, s) : $r(t4, e).fill(r) : $r(t4, e);
}
me.alloc = function(t4, e, r) {
  return G1(null, t4, e, r);
};
function ql(t4, e) {
  if (j0(e), t4 = $r(t4, e < 0 ? 0 : Wl(e) | 0), !me.TYPED_ARRAY_SUPPORT)
    for (var r = 0; r < e; ++r)
      t4[r] = 0;
  return t4;
}
me.allocUnsafe = function(t4) {
  return ql(null, t4);
};
me.allocUnsafeSlow = function(t4) {
  return ql(null, t4);
};
function H1(t4, e, r) {
  if ((typeof r != "string" || r === "") && (r = "utf8"), !me.isEncoding(r))
    throw new TypeError('"encoding" must be a valid string encoding');
  var s = M0(e, r) | 0;
  t4 = $r(t4, s);
  var n = t4.write(e, r);
  return n !== s && (t4 = t4.slice(0, n)), t4;
}
function rl(t4, e) {
  var r = e.length < 0 ? 0 : Wl(e.length) | 0;
  t4 = $r(t4, r);
  for (var s = 0; s < r; s += 1)
    t4[s] = e[s] & 255;
  return t4;
}
function K1(t4, e, r, s) {
  if (e.byteLength, r < 0 || e.byteLength < r)
    throw new RangeError("'offset' is out of bounds");
  if (e.byteLength < r + (s || 0))
    throw new RangeError("'length' is out of bounds");
  return r === void 0 && s === void 0 ? e = new Uint8Array(e) : s === void 0 ? e = new Uint8Array(e, r) : e = new Uint8Array(e, r, s), me.TYPED_ARRAY_SUPPORT ? (t4 = e, t4.__proto__ = me.prototype) : t4 = rl(t4, e), t4;
}
function J1(t4, e) {
  if (Tr(e)) {
    var r = Wl(e.length) | 0;
    return t4 = $r(t4, r), t4.length === 0 || e.copy(t4, 0, 0, r), t4;
  }
  if (e) {
    if (typeof ArrayBuffer < "u" && e.buffer instanceof ArrayBuffer || "length" in e)
      return typeof e.length != "number" || mC(e.length) ? $r(t4, 0) : rl(t4, e);
    if (e.type === "Buffer" && R0(e.data))
      return rl(t4, e.data);
  }
  throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.");
}
function Wl(t4) {
  if (t4 >= Ma())
    throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + Ma().toString(16) + " bytes");
  return t4 | 0;
}
me.isBuffer = Hn;
function Tr(t4) {
  return !!(t4 != null && t4._isBuffer);
}
me.compare = function(e, r) {
  if (!Tr(e) || !Tr(r))
    throw new TypeError("Arguments must be Buffers");
  if (e === r)
    return 0;
  for (var s = e.length, n = r.length, a = 0, o = Math.min(s, n); a < o; ++a)
    if (e[a] !== r[a]) {
      s = e[a], n = r[a];
      break;
    }
  return s < n ? -1 : n < s ? 1 : 0;
};
me.isEncoding = function(e) {
  switch (String(e).toLowerCase()) {
    case "hex":
    case "utf8":
    case "utf-8":
    case "ascii":
    case "latin1":
    case "binary":
    case "base64":
    case "ucs2":
    case "ucs-2":
    case "utf16le":
    case "utf-16le":
      return true;
    default:
      return false;
  }
};
me.concat = function(e, r) {
  if (!R0(e))
    throw new TypeError('"list" argument must be an Array of Buffers');
  if (e.length === 0)
    return me.alloc(0);
  var s;
  if (r === void 0)
    for (r = 0, s = 0; s < e.length; ++s)
      r += e[s].length;
  var n = me.allocUnsafe(r), a = 0;
  for (s = 0; s < e.length; ++s) {
    var o = e[s];
    if (!Tr(o))
      throw new TypeError('"list" argument must be an Array of Buffers');
    o.copy(n, a), a += o.length;
  }
  return n;
};
function M0(t4, e) {
  if (Tr(t4))
    return t4.length;
  if (typeof ArrayBuffer < "u" && typeof ArrayBuffer.isView == "function" && (ArrayBuffer.isView(t4) || t4 instanceof ArrayBuffer))
    return t4.byteLength;
  typeof t4 != "string" && (t4 = "" + t4);
  var r = t4.length;
  if (r === 0)
    return 0;
  for (var s = false; ; )
    switch (e) {
      case "ascii":
      case "latin1":
      case "binary":
        return r;
      case "utf8":
      case "utf-8":
      case void 0:
        return $a(t4).length;
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
        return r * 2;
      case "hex":
        return r >>> 1;
      case "base64":
        return G0(t4).length;
      default:
        if (s)
          return $a(t4).length;
        e = ("" + e).toLowerCase(), s = true;
    }
}
me.byteLength = M0;
function X1(t4, e, r) {
  var s = false;
  if ((e === void 0 || e < 0) && (e = 0), e > this.length || ((r === void 0 || r > this.length) && (r = this.length), r <= 0) || (r >>>= 0, e >>>= 0, r <= e))
    return "";
  for (t4 || (t4 = "utf8"); ; )
    switch (t4) {
      case "hex":
        return iC(this, e, r);
      case "utf8":
      case "utf-8":
        return U0(this, e, r);
      case "ascii":
        return sC(this, e, r);
      case "latin1":
      case "binary":
        return aC(this, e, r);
      case "base64":
        return rC(this, e, r);
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
        return oC(this, e, r);
      default:
        if (s)
          throw new TypeError("Unknown encoding: " + t4);
        t4 = (t4 + "").toLowerCase(), s = true;
    }
}
me.prototype._isBuffer = true;
function Cn(t4, e, r) {
  var s = t4[e];
  t4[e] = t4[r], t4[r] = s;
}
me.prototype.swap16 = function() {
  var e = this.length;
  if (e % 2 !== 0)
    throw new RangeError("Buffer size must be a multiple of 16-bits");
  for (var r = 0; r < e; r += 2)
    Cn(this, r, r + 1);
  return this;
};
me.prototype.swap32 = function() {
  var e = this.length;
  if (e % 4 !== 0)
    throw new RangeError("Buffer size must be a multiple of 32-bits");
  for (var r = 0; r < e; r += 4)
    Cn(this, r, r + 3), Cn(this, r + 1, r + 2);
  return this;
};
me.prototype.swap64 = function() {
  var e = this.length;
  if (e % 8 !== 0)
    throw new RangeError("Buffer size must be a multiple of 64-bits");
  for (var r = 0; r < e; r += 8)
    Cn(this, r, r + 7), Cn(this, r + 1, r + 6), Cn(this, r + 2, r + 5), Cn(this, r + 3, r + 4);
  return this;
};
me.prototype.toString = function() {
  var e = this.length | 0;
  return e === 0 ? "" : arguments.length === 0 ? U0(this, 0, e) : X1.apply(this, arguments);
};
me.prototype.equals = function(e) {
  if (!Tr(e))
    throw new TypeError("Argument must be a Buffer");
  return this === e ? true : me.compare(this, e) === 0;
};
me.prototype.inspect = function() {
  var e = "", r = z1;
  return this.length > 0 && (e = this.toString("hex", 0, r).match(/.{2}/g).join(" "), this.length > r && (e += " ... ")), "<Buffer " + e + ">";
};
me.prototype.compare = function(e, r, s, n, a) {
  if (!Tr(e))
    throw new TypeError("Argument must be a Buffer");
  if (r === void 0 && (r = 0), s === void 0 && (s = e ? e.length : 0), n === void 0 && (n = 0), a === void 0 && (a = this.length), r < 0 || s > e.length || n < 0 || a > this.length)
    throw new RangeError("out of range index");
  if (n >= a && r >= s)
    return 0;
  if (n >= a)
    return -1;
  if (r >= s)
    return 1;
  if (r >>>= 0, s >>>= 0, n >>>= 0, a >>>= 0, this === e)
    return 0;
  for (var o = a - n, l = s - r, i = Math.min(o, l), u = this.slice(n, a), c = e.slice(r, s), f = 0; f < i; ++f)
    if (u[f] !== c[f]) {
      o = u[f], l = c[f];
      break;
    }
  return o < l ? -1 : l < o ? 1 : 0;
};
function $0(t4, e, r, s, n) {
  if (t4.length === 0)
    return -1;
  if (typeof r == "string" ? (s = r, r = 0) : r > 2147483647 ? r = 2147483647 : r < -2147483648 && (r = -2147483648), r = +r, isNaN(r) && (r = n ? 0 : t4.length - 1), r < 0 && (r = t4.length + r), r >= t4.length) {
    if (n)
      return -1;
    r = t4.length - 1;
  } else if (r < 0)
    if (n)
      r = 0;
    else
      return -1;
  if (typeof e == "string" && (e = me.from(e, s)), Tr(e))
    return e.length === 0 ? -1 : Cd(t4, e, r, s, n);
  if (typeof e == "number")
    return e = e & 255, me.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf == "function" ? n ? Uint8Array.prototype.indexOf.call(t4, e, r) : Uint8Array.prototype.lastIndexOf.call(t4, e, r) : Cd(t4, [e], r, s, n);
  throw new TypeError("val must be string, number or Buffer");
}
function Cd(t4, e, r, s, n) {
  var a = 1, o = t4.length, l = e.length;
  if (s !== void 0 && (s = String(s).toLowerCase(), s === "ucs2" || s === "ucs-2" || s === "utf16le" || s === "utf-16le")) {
    if (t4.length < 2 || e.length < 2)
      return -1;
    a = 2, o /= 2, l /= 2, r /= 2;
  }
  function i(p, m) {
    return a === 1 ? p[m] : p.readUInt16BE(m * a);
  }
  var u;
  if (n) {
    var c = -1;
    for (u = r; u < o; u++)
      if (i(t4, u) === i(e, c === -1 ? 0 : u - c)) {
        if (c === -1 && (c = u), u - c + 1 === l)
          return c * a;
      } else
        c !== -1 && (u -= u - c), c = -1;
  } else
    for (r + l > o && (r = o - l), u = r; u >= 0; u--) {
      for (var f = true, h = 0; h < l; h++)
        if (i(t4, u + h) !== i(e, h)) {
          f = false;
          break;
        }
      if (f)
        return u;
    }
  return -1;
}
me.prototype.includes = function(e, r, s) {
  return this.indexOf(e, r, s) !== -1;
};
me.prototype.indexOf = function(e, r, s) {
  return $0(this, e, r, s, true);
};
me.prototype.lastIndexOf = function(e, r, s) {
  return $0(this, e, r, s, false);
};
function Q1(t4, e, r, s) {
  r = Number(r) || 0;
  var n = t4.length - r;
  s ? (s = Number(s), s > n && (s = n)) : s = n;
  var a = e.length;
  if (a % 2 !== 0)
    throw new TypeError("Invalid hex string");
  s > a / 2 && (s = a / 2);
  for (var o = 0; o < s; ++o) {
    var l = parseInt(e.substr(o * 2, 2), 16);
    if (isNaN(l))
      return o;
    t4[r + o] = l;
  }
  return o;
}
function Y1(t4, e, r, s) {
  return pi($a(e, t4.length - r), t4, r, s);
}
function V0(t4, e, r, s) {
  return pi(fC(e), t4, r, s);
}
function Z1(t4, e, r, s) {
  return V0(t4, e, r, s);
}
function eC(t4, e, r, s) {
  return pi(G0(e), t4, r, s);
}
function tC(t4, e, r, s) {
  return pi(hC(e, t4.length - r), t4, r, s);
}
me.prototype.write = function(e, r, s, n) {
  if (r === void 0)
    n = "utf8", s = this.length, r = 0;
  else if (s === void 0 && typeof r == "string")
    n = r, s = this.length, r = 0;
  else if (isFinite(r))
    r = r | 0, isFinite(s) ? (s = s | 0, n === void 0 && (n = "utf8")) : (n = s, s = void 0);
  else
    throw new Error(
      "Buffer.write(string, encoding, offset[, length]) is no longer supported"
    );
  var a = this.length - r;
  if ((s === void 0 || s > a) && (s = a), e.length > 0 && (s < 0 || r < 0) || r > this.length)
    throw new RangeError("Attempt to write outside buffer bounds");
  n || (n = "utf8");
  for (var o = false; ; )
    switch (n) {
      case "hex":
        return Q1(this, e, r, s);
      case "utf8":
      case "utf-8":
        return Y1(this, e, r, s);
      case "ascii":
        return V0(this, e, r, s);
      case "latin1":
      case "binary":
        return Z1(this, e, r, s);
      case "base64":
        return eC(this, e, r, s);
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
        return tC(this, e, r, s);
      default:
        if (o)
          throw new TypeError("Unknown encoding: " + n);
        n = ("" + n).toLowerCase(), o = true;
    }
};
me.prototype.toJSON = function() {
  return {
    type: "Buffer",
    data: Array.prototype.slice.call(this._arr || this, 0)
  };
};
function rC(t4, e, r) {
  return e === 0 && r === t4.length ? bd(t4) : bd(t4.slice(e, r));
}
function U0(t4, e, r) {
  r = Math.min(t4.length, r);
  for (var s = [], n = e; n < r; ) {
    var a = t4[n], o = null, l = a > 239 ? 4 : a > 223 ? 3 : a > 191 ? 2 : 1;
    if (n + l <= r) {
      var i, u, c, f;
      switch (l) {
        case 1:
          a < 128 && (o = a);
          break;
        case 2:
          i = t4[n + 1], (i & 192) === 128 && (f = (a & 31) << 6 | i & 63, f > 127 && (o = f));
          break;
        case 3:
          i = t4[n + 1], u = t4[n + 2], (i & 192) === 128 && (u & 192) === 128 && (f = (a & 15) << 12 | (i & 63) << 6 | u & 63, f > 2047 && (f < 55296 || f > 57343) && (o = f));
          break;
        case 4:
          i = t4[n + 1], u = t4[n + 2], c = t4[n + 3], (i & 192) === 128 && (u & 192) === 128 && (c & 192) === 128 && (f = (a & 15) << 18 | (i & 63) << 12 | (u & 63) << 6 | c & 63, f > 65535 && f < 1114112 && (o = f));
      }
    }
    o === null ? (o = 65533, l = 1) : o > 65535 && (o -= 65536, s.push(o >>> 10 & 1023 | 55296), o = 56320 | o & 1023), s.push(o), n += l;
  }
  return nC(s);
}
var Sd = 4096;
function nC(t4) {
  var e = t4.length;
  if (e <= Sd)
    return String.fromCharCode.apply(String, t4);
  for (var r = "", s = 0; s < e; )
    r += String.fromCharCode.apply(
      String,
      t4.slice(s, s += Sd)
    );
  return r;
}
function sC(t4, e, r) {
  var s = "";
  r = Math.min(t4.length, r);
  for (var n = e; n < r; ++n)
    s += String.fromCharCode(t4[n] & 127);
  return s;
}
function aC(t4, e, r) {
  var s = "";
  r = Math.min(t4.length, r);
  for (var n = e; n < r; ++n)
    s += String.fromCharCode(t4[n]);
  return s;
}
function iC(t4, e, r) {
  var s = t4.length;
  (!e || e < 0) && (e = 0), (!r || r < 0 || r > s) && (r = s);
  for (var n = "", a = e; a < r; ++a)
    n += pC(t4[a]);
  return n;
}
function oC(t4, e, r) {
  for (var s = t4.slice(e, r), n = "", a = 0; a < s.length; a += 2)
    n += String.fromCharCode(s[a] + s[a + 1] * 256);
  return n;
}
me.prototype.slice = function(e, r) {
  var s = this.length;
  e = ~~e, r = r === void 0 ? s : ~~r, e < 0 ? (e += s, e < 0 && (e = 0)) : e > s && (e = s), r < 0 ? (r += s, r < 0 && (r = 0)) : r > s && (r = s), r < e && (r = e);
  var n;
  if (me.TYPED_ARRAY_SUPPORT)
    n = this.subarray(e, r), n.__proto__ = me.prototype;
  else {
    var a = r - e;
    n = new me(a, void 0);
    for (var o = 0; o < a; ++o)
      n[o] = this[o + e];
  }
  return n;
};
function Pt(t4, e, r) {
  if (t4 % 1 !== 0 || t4 < 0)
    throw new RangeError("offset is not uint");
  if (t4 + e > r)
    throw new RangeError("Trying to access beyond buffer length");
}
me.prototype.readUIntLE = function(e, r, s) {
  e = e | 0, r = r | 0, s || Pt(e, r, this.length);
  for (var n = this[e], a = 1, o = 0; ++o < r && (a *= 256); )
    n += this[e + o] * a;
  return n;
};
me.prototype.readUIntBE = function(e, r, s) {
  e = e | 0, r = r | 0, s || Pt(e, r, this.length);
  for (var n = this[e + --r], a = 1; r > 0 && (a *= 256); )
    n += this[e + --r] * a;
  return n;
};
me.prototype.readUInt8 = function(e, r) {
  return r || Pt(e, 1, this.length), this[e];
};
me.prototype.readUInt16LE = function(e, r) {
  return r || Pt(e, 2, this.length), this[e] | this[e + 1] << 8;
};
me.prototype.readUInt16BE = function(e, r) {
  return r || Pt(e, 2, this.length), this[e] << 8 | this[e + 1];
};
me.prototype.readUInt32LE = function(e, r) {
  return r || Pt(e, 4, this.length), (this[e] | this[e + 1] << 8 | this[e + 2] << 16) + this[e + 3] * 16777216;
};
me.prototype.readUInt32BE = function(e, r) {
  return r || Pt(e, 4, this.length), this[e] * 16777216 + (this[e + 1] << 16 | this[e + 2] << 8 | this[e + 3]);
};
me.prototype.readIntLE = function(e, r, s) {
  e = e | 0, r = r | 0, s || Pt(e, r, this.length);
  for (var n = this[e], a = 1, o = 0; ++o < r && (a *= 256); )
    n += this[e + o] * a;
  return a *= 128, n >= a && (n -= Math.pow(2, 8 * r)), n;
};
me.prototype.readIntBE = function(e, r, s) {
  e = e | 0, r = r | 0, s || Pt(e, r, this.length);
  for (var n = r, a = 1, o = this[e + --n]; n > 0 && (a *= 256); )
    o += this[e + --n] * a;
  return a *= 128, o >= a && (o -= Math.pow(2, 8 * r)), o;
};
me.prototype.readInt8 = function(e, r) {
  return r || Pt(e, 1, this.length), this[e] & 128 ? (255 - this[e] + 1) * -1 : this[e];
};
me.prototype.readInt16LE = function(e, r) {
  r || Pt(e, 2, this.length);
  var s = this[e] | this[e + 1] << 8;
  return s & 32768 ? s | 4294901760 : s;
};
me.prototype.readInt16BE = function(e, r) {
  r || Pt(e, 2, this.length);
  var s = this[e + 1] | this[e] << 8;
  return s & 32768 ? s | 4294901760 : s;
};
me.prototype.readInt32LE = function(e, r) {
  return r || Pt(e, 4, this.length), this[e] | this[e + 1] << 8 | this[e + 2] << 16 | this[e + 3] << 24;
};
me.prototype.readInt32BE = function(e, r) {
  return r || Pt(e, 4, this.length), this[e] << 24 | this[e + 1] << 16 | this[e + 2] << 8 | this[e + 3];
};
me.prototype.readFloatLE = function(e, r) {
  return r || Pt(e, 4, this.length), li(this, e, true, 23, 4);
};
me.prototype.readFloatBE = function(e, r) {
  return r || Pt(e, 4, this.length), li(this, e, false, 23, 4);
};
me.prototype.readDoubleLE = function(e, r) {
  return r || Pt(e, 8, this.length), li(this, e, true, 52, 8);
};
me.prototype.readDoubleBE = function(e, r) {
  return r || Pt(e, 8, this.length), li(this, e, false, 52, 8);
};
function Wt(t4, e, r, s, n, a) {
  if (!Tr(t4))
    throw new TypeError('"buffer" argument must be a Buffer instance');
  if (e > n || e < a)
    throw new RangeError('"value" argument is out of bounds');
  if (r + s > t4.length)
    throw new RangeError("Index out of range");
}
me.prototype.writeUIntLE = function(e, r, s, n) {
  if (e = +e, r = r | 0, s = s | 0, !n) {
    var a = Math.pow(2, 8 * s) - 1;
    Wt(this, e, r, s, a, 0);
  }
  var o = 1, l = 0;
  for (this[r] = e & 255; ++l < s && (o *= 256); )
    this[r + l] = e / o & 255;
  return r + s;
};
me.prototype.writeUIntBE = function(e, r, s, n) {
  if (e = +e, r = r | 0, s = s | 0, !n) {
    var a = Math.pow(2, 8 * s) - 1;
    Wt(this, e, r, s, a, 0);
  }
  var o = s - 1, l = 1;
  for (this[r + o] = e & 255; --o >= 0 && (l *= 256); )
    this[r + o] = e / l & 255;
  return r + s;
};
me.prototype.writeUInt8 = function(e, r, s) {
  return e = +e, r = r | 0, s || Wt(this, e, r, 1, 255, 0), me.TYPED_ARRAY_SUPPORT || (e = Math.floor(e)), this[r] = e & 255, r + 1;
};
function ui(t4, e, r, s) {
  e < 0 && (e = 65535 + e + 1);
  for (var n = 0, a = Math.min(t4.length - r, 2); n < a; ++n)
    t4[r + n] = (e & 255 << 8 * (s ? n : 1 - n)) >>> (s ? n : 1 - n) * 8;
}
me.prototype.writeUInt16LE = function(e, r, s) {
  return e = +e, r = r | 0, s || Wt(this, e, r, 2, 65535, 0), me.TYPED_ARRAY_SUPPORT ? (this[r] = e & 255, this[r + 1] = e >>> 8) : ui(this, e, r, true), r + 2;
};
me.prototype.writeUInt16BE = function(e, r, s) {
  return e = +e, r = r | 0, s || Wt(this, e, r, 2, 65535, 0), me.TYPED_ARRAY_SUPPORT ? (this[r] = e >>> 8, this[r + 1] = e & 255) : ui(this, e, r, false), r + 2;
};
function ci(t4, e, r, s) {
  e < 0 && (e = 4294967295 + e + 1);
  for (var n = 0, a = Math.min(t4.length - r, 4); n < a; ++n)
    t4[r + n] = e >>> (s ? n : 3 - n) * 8 & 255;
}
me.prototype.writeUInt32LE = function(e, r, s) {
  return e = +e, r = r | 0, s || Wt(this, e, r, 4, 4294967295, 0), me.TYPED_ARRAY_SUPPORT ? (this[r + 3] = e >>> 24, this[r + 2] = e >>> 16, this[r + 1] = e >>> 8, this[r] = e & 255) : ci(this, e, r, true), r + 4;
};
me.prototype.writeUInt32BE = function(e, r, s) {
  return e = +e, r = r | 0, s || Wt(this, e, r, 4, 4294967295, 0), me.TYPED_ARRAY_SUPPORT ? (this[r] = e >>> 24, this[r + 1] = e >>> 16, this[r + 2] = e >>> 8, this[r + 3] = e & 255) : ci(this, e, r, false), r + 4;
};
me.prototype.writeIntLE = function(e, r, s, n) {
  if (e = +e, r = r | 0, !n) {
    var a = Math.pow(2, 8 * s - 1);
    Wt(this, e, r, s, a - 1, -a);
  }
  var o = 0, l = 1, i = 0;
  for (this[r] = e & 255; ++o < s && (l *= 256); )
    e < 0 && i === 0 && this[r + o - 1] !== 0 && (i = 1), this[r + o] = (e / l >> 0) - i & 255;
  return r + s;
};
me.prototype.writeIntBE = function(e, r, s, n) {
  if (e = +e, r = r | 0, !n) {
    var a = Math.pow(2, 8 * s - 1);
    Wt(this, e, r, s, a - 1, -a);
  }
  var o = s - 1, l = 1, i = 0;
  for (this[r + o] = e & 255; --o >= 0 && (l *= 256); )
    e < 0 && i === 0 && this[r + o + 1] !== 0 && (i = 1), this[r + o] = (e / l >> 0) - i & 255;
  return r + s;
};
me.prototype.writeInt8 = function(e, r, s) {
  return e = +e, r = r | 0, s || Wt(this, e, r, 1, 127, -128), me.TYPED_ARRAY_SUPPORT || (e = Math.floor(e)), e < 0 && (e = 255 + e + 1), this[r] = e & 255, r + 1;
};
me.prototype.writeInt16LE = function(e, r, s) {
  return e = +e, r = r | 0, s || Wt(this, e, r, 2, 32767, -32768), me.TYPED_ARRAY_SUPPORT ? (this[r] = e & 255, this[r + 1] = e >>> 8) : ui(this, e, r, true), r + 2;
};
me.prototype.writeInt16BE = function(e, r, s) {
  return e = +e, r = r | 0, s || Wt(this, e, r, 2, 32767, -32768), me.TYPED_ARRAY_SUPPORT ? (this[r] = e >>> 8, this[r + 1] = e & 255) : ui(this, e, r, false), r + 2;
};
me.prototype.writeInt32LE = function(e, r, s) {
  return e = +e, r = r | 0, s || Wt(this, e, r, 4, 2147483647, -2147483648), me.TYPED_ARRAY_SUPPORT ? (this[r] = e & 255, this[r + 1] = e >>> 8, this[r + 2] = e >>> 16, this[r + 3] = e >>> 24) : ci(this, e, r, true), r + 4;
};
me.prototype.writeInt32BE = function(e, r, s) {
  return e = +e, r = r | 0, s || Wt(this, e, r, 4, 2147483647, -2147483648), e < 0 && (e = 4294967295 + e + 1), me.TYPED_ARRAY_SUPPORT ? (this[r] = e >>> 24, this[r + 1] = e >>> 16, this[r + 2] = e >>> 8, this[r + 3] = e & 255) : ci(this, e, r, false), r + 4;
};
function q0(t4, e, r, s, n, a) {
  if (r + s > t4.length)
    throw new RangeError("Index out of range");
  if (r < 0)
    throw new RangeError("Index out of range");
}
function W0(t4, e, r, s, n) {
  return n || q0(t4, e, r, 4), L0(t4, e, r, s, 23, 4), r + 4;
}
me.prototype.writeFloatLE = function(e, r, s) {
  return W0(this, e, r, true, s);
};
me.prototype.writeFloatBE = function(e, r, s) {
  return W0(this, e, r, false, s);
};
function z0(t4, e, r, s, n) {
  return n || q0(t4, e, r, 8), L0(t4, e, r, s, 52, 8), r + 8;
}
me.prototype.writeDoubleLE = function(e, r, s) {
  return z0(this, e, r, true, s);
};
me.prototype.writeDoubleBE = function(e, r, s) {
  return z0(this, e, r, false, s);
};
me.prototype.copy = function(e, r, s, n) {
  if (s || (s = 0), !n && n !== 0 && (n = this.length), r >= e.length && (r = e.length), r || (r = 0), n > 0 && n < s && (n = s), n === s || e.length === 0 || this.length === 0)
    return 0;
  if (r < 0)
    throw new RangeError("targetStart out of bounds");
  if (s < 0 || s >= this.length)
    throw new RangeError("sourceStart out of bounds");
  if (n < 0)
    throw new RangeError("sourceEnd out of bounds");
  n > this.length && (n = this.length), e.length - r < n - s && (n = e.length - r + s);
  var a = n - s, o;
  if (this === e && s < r && r < n)
    for (o = a - 1; o >= 0; --o)
      e[o + r] = this[o + s];
  else if (a < 1e3 || !me.TYPED_ARRAY_SUPPORT)
    for (o = 0; o < a; ++o)
      e[o + r] = this[o + s];
  else
    Uint8Array.prototype.set.call(
      e,
      this.subarray(s, s + a),
      r
    );
  return a;
};
me.prototype.fill = function(e, r, s, n) {
  if (typeof e == "string") {
    if (typeof r == "string" ? (n = r, r = 0, s = this.length) : typeof s == "string" && (n = s, s = this.length), e.length === 1) {
      var a = e.charCodeAt(0);
      a < 256 && (e = a);
    }
    if (n !== void 0 && typeof n != "string")
      throw new TypeError("encoding must be a string");
    if (typeof n == "string" && !me.isEncoding(n))
      throw new TypeError("Unknown encoding: " + n);
  } else
    typeof e == "number" && (e = e & 255);
  if (r < 0 || this.length < r || this.length < s)
    throw new RangeError("Out of range index");
  if (s <= r)
    return this;
  r = r >>> 0, s = s === void 0 ? this.length : s >>> 0, e || (e = 0);
  var o;
  if (typeof e == "number")
    for (o = r; o < s; ++o)
      this[o] = e;
  else {
    var l = Tr(e) ? e : $a(new me(e, n).toString()), i = l.length;
    for (o = 0; o < s - r; ++o)
      this[o + r] = l[o % i];
  }
  return this;
};
var lC = /[^+\/0-9A-Za-z-_]/g;
function uC(t4) {
  if (t4 = cC(t4).replace(lC, ""), t4.length < 2)
    return "";
  for (; t4.length % 4 !== 0; )
    t4 = t4 + "=";
  return t4;
}
function cC(t4) {
  return t4.trim ? t4.trim() : t4.replace(/^\s+|\s+$/g, "");
}
function pC(t4) {
  return t4 < 16 ? "0" + t4.toString(16) : t4.toString(16);
}
function $a(t4, e) {
  e = e || 1 / 0;
  for (var r, s = t4.length, n = null, a = [], o = 0; o < s; ++o) {
    if (r = t4.charCodeAt(o), r > 55295 && r < 57344) {
      if (!n) {
        if (r > 56319) {
          (e -= 3) > -1 && a.push(239, 191, 189);
          continue;
        } else if (o + 1 === s) {
          (e -= 3) > -1 && a.push(239, 191, 189);
          continue;
        }
        n = r;
        continue;
      }
      if (r < 56320) {
        (e -= 3) > -1 && a.push(239, 191, 189), n = r;
        continue;
      }
      r = (n - 55296 << 10 | r - 56320) + 65536;
    } else
      n && (e -= 3) > -1 && a.push(239, 191, 189);
    if (n = null, r < 128) {
      if ((e -= 1) < 0)
        break;
      a.push(r);
    } else if (r < 2048) {
      if ((e -= 2) < 0)
        break;
      a.push(
        r >> 6 | 192,
        r & 63 | 128
      );
    } else if (r < 65536) {
      if ((e -= 3) < 0)
        break;
      a.push(
        r >> 12 | 224,
        r >> 6 & 63 | 128,
        r & 63 | 128
      );
    } else if (r < 1114112) {
      if ((e -= 4) < 0)
        break;
      a.push(
        r >> 18 | 240,
        r >> 12 & 63 | 128,
        r >> 6 & 63 | 128,
        r & 63 | 128
      );
    } else
      throw new Error("Invalid code point");
  }
  return a;
}
function fC(t4) {
  for (var e = [], r = 0; r < t4.length; ++r)
    e.push(t4.charCodeAt(r) & 255);
  return e;
}
function hC(t4, e) {
  for (var r, s, n, a = [], o = 0; o < t4.length && !((e -= 2) < 0); ++o)
    r = t4.charCodeAt(o), s = r >> 8, n = r % 256, a.push(n), a.push(s);
  return a;
}
function G0(t4) {
  return V1(uC(t4));
}
function pi(t4, e, r, s) {
  for (var n = 0; n < s && !(n + r >= e.length || n >= t4.length); ++n)
    e[n + r] = t4[n];
  return n;
}
function mC(t4) {
  return t4 !== t4;
}
function Hn(t4) {
  return t4 != null && (!!t4._isBuffer || H0(t4) || dC(t4));
}
function H0(t4) {
  return !!t4.constructor && typeof t4.constructor.isBuffer == "function" && t4.constructor.isBuffer(t4);
}
function dC(t4) {
  return typeof t4.readFloatLE == "function" && typeof t4.slice == "function" && H0(t4.slice(0, 0));
}
var nl;
typeof Object.create == "function" ? nl = function(e, r) {
  e.super_ = r, e.prototype = Object.create(r.prototype, {
    constructor: {
      value: e,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
} : nl = function(e, r) {
  e.super_ = r;
  var s = function() {
  };
  s.prototype = r.prototype, e.prototype = new s(), e.prototype.constructor = e;
};
var zl = nl;
var gC = /%[sdj%]/g;
function fi(t4) {
  if (!zs(t4)) {
    for (var e = [], r = 0; r < arguments.length; r++)
      e.push(dr(arguments[r]));
    return e.join(" ");
  }
  for (var r = 1, s = arguments, n = s.length, a = String(t4).replace(gC, function(l) {
    if (l === "%%")
      return "%";
    if (r >= n)
      return l;
    switch (l) {
      case "%s":
        return String(s[r++]);
      case "%d":
        return Number(s[r++]);
      case "%j":
        try {
          return JSON.stringify(s[r++]);
        } catch {
          return "[Circular]";
        }
      default:
        return l;
    }
  }), o = s[r]; r < n; o = s[++r])
    Ws(o) || !In(o) ? a += " " + o : a += " " + dr(o);
  return a;
}
function Gl(t4, e) {
  if (Dr(gr.process))
    return function() {
      return Gl(t4, e).apply(this, arguments);
    };
  if (Ze.noDeprecation === true)
    return t4;
  var r = false;
  function s() {
    if (!r) {
      if (Ze.throwDeprecation)
        throw new Error(e);
      Ze.traceDeprecation ? console.trace(e) : console.error(e), r = true;
    }
    return t4.apply(this, arguments);
  }
  return s;
}
var sa = {};
var Hi;
function K0(t4) {
  if (Dr(Hi) && (Hi = Ze.env.NODE_DEBUG || ""), t4 = t4.toUpperCase(), !sa[t4])
    if (new RegExp("\\b" + t4 + "\\b", "i").test(Hi)) {
      var e = 0;
      sa[t4] = function() {
        var r = fi.apply(null, arguments);
        console.error("%s %d: %s", t4, e, r);
      };
    } else
      sa[t4] = function() {
      };
  return sa[t4];
}
function dr(t4, e) {
  var r = {
    seen: [],
    stylize: xC
  };
  return arguments.length >= 3 && (r.depth = arguments[2]), arguments.length >= 4 && (r.colors = arguments[3]), hi(e) ? r.showHidden = e : e && Xl(r, e), Dr(r.showHidden) && (r.showHidden = false), Dr(r.depth) && (r.depth = 2), Dr(r.colors) && (r.colors = false), Dr(r.customInspect) && (r.customInspect = true), r.colors && (r.stylize = yC), Va(r, t4, r.depth);
}
dr.colors = {
  bold: [1, 22],
  italic: [3, 23],
  underline: [4, 24],
  inverse: [7, 27],
  white: [37, 39],
  grey: [90, 39],
  black: [30, 39],
  blue: [34, 39],
  cyan: [36, 39],
  green: [32, 39],
  magenta: [35, 39],
  red: [31, 39],
  yellow: [33, 39]
};
dr.styles = {
  special: "cyan",
  number: "yellow",
  boolean: "yellow",
  undefined: "grey",
  null: "bold",
  string: "green",
  date: "magenta",
  // "name": intentionally not styling
  regexp: "red"
};
function yC(t4, e) {
  var r = dr.styles[e];
  return r ? "\x1B[" + dr.colors[r][0] + "m" + t4 + "\x1B[" + dr.colors[r][1] + "m" : t4;
}
function xC(t4, e) {
  return t4;
}
function vC(t4) {
  var e = {};
  return t4.forEach(function(r, s) {
    e[r] = true;
  }), e;
}
function Va(t4, e, r) {
  if (t4.customInspect && e && Dn(e.inspect) && // Filter out the util module, it's inspect function is special
  e.inspect !== dr && // Also filter out any prototype objects using the circular check.
  !(e.constructor && e.constructor.prototype === e)) {
    var s = e.inspect(r, t4);
    return zs(s) || (s = Va(t4, s, r)), s;
  }
  var n = EC(t4, e);
  if (n)
    return n;
  var a = Object.keys(e), o = vC(a);
  if (t4.showHidden && (a = Object.getOwnPropertyNames(e)), Qn(e) && (a.indexOf("message") >= 0 || a.indexOf("description") >= 0))
    return Ki(e);
  if (a.length === 0) {
    if (Dn(e)) {
      var l = e.name ? ": " + e.name : "";
      return t4.stylize("[Function" + l + "]", "special");
    }
    if (An(e))
      return t4.stylize(RegExp.prototype.toString.call(e), "regexp");
    if (rs(e))
      return t4.stylize(Date.prototype.toString.call(e), "date");
    if (Qn(e))
      return Ki(e);
  }
  var i = "", u = false, c = ["{", "}"];
  if (Hl(e) && (u = true, c = ["[", "]"]), Dn(e)) {
    var f = e.name ? ": " + e.name : "";
    i = " [Function" + f + "]";
  }
  if (An(e) && (i = " " + RegExp.prototype.toString.call(e)), rs(e) && (i = " " + Date.prototype.toUTCString.call(e)), Qn(e) && (i = " " + Ki(e)), a.length === 0 && (!u || e.length == 0))
    return c[0] + i + c[1];
  if (r < 0)
    return An(e) ? t4.stylize(RegExp.prototype.toString.call(e), "regexp") : t4.stylize("[Object]", "special");
  t4.seen.push(e);
  var h;
  return u ? h = bC(t4, e, r, o, a) : h = a.map(function(p) {
    return sl(t4, e, r, o, p, u);
  }), t4.seen.pop(), CC(h, i, c);
}
function EC(t4, e) {
  if (Dr(e))
    return t4.stylize("undefined", "undefined");
  if (zs(e)) {
    var r = "'" + JSON.stringify(e).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
    return t4.stylize(r, "string");
  }
  if (Kl(e))
    return t4.stylize("" + e, "number");
  if (hi(e))
    return t4.stylize("" + e, "boolean");
  if (Ws(e))
    return t4.stylize("null", "null");
}
function Ki(t4) {
  return "[" + Error.prototype.toString.call(t4) + "]";
}
function bC(t4, e, r, s, n) {
  for (var a = [], o = 0, l = e.length; o < l; ++o)
    Z0(e, String(o)) ? a.push(sl(
      t4,
      e,
      r,
      s,
      String(o),
      true
    )) : a.push("");
  return n.forEach(function(i) {
    i.match(/^\d+$/) || a.push(sl(
      t4,
      e,
      r,
      s,
      i,
      true
    ));
  }), a;
}
function sl(t4, e, r, s, n, a) {
  var o, l, i;
  if (i = Object.getOwnPropertyDescriptor(e, n) || { value: e[n] }, i.get ? i.set ? l = t4.stylize("[Getter/Setter]", "special") : l = t4.stylize("[Getter]", "special") : i.set && (l = t4.stylize("[Setter]", "special")), Z0(s, n) || (o = "[" + n + "]"), l || (t4.seen.indexOf(i.value) < 0 ? (Ws(r) ? l = Va(t4, i.value, null) : l = Va(t4, i.value, r - 1), l.indexOf(`
`) > -1 && (a ? l = l.split(`
`).map(function(u) {
    return "  " + u;
  }).join(`
`).substr(2) : l = `
` + l.split(`
`).map(function(u) {
    return "   " + u;
  }).join(`
`))) : l = t4.stylize("[Circular]", "special")), Dr(o)) {
    if (a && n.match(/^\d+$/))
      return l;
    o = JSON.stringify("" + n), o.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/) ? (o = o.substr(1, o.length - 2), o = t4.stylize(o, "name")) : (o = o.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'"), o = t4.stylize(o, "string"));
  }
  return o + ": " + l;
}
function CC(t4, e, r) {
  var s = t4.reduce(function(n, a) {
    return a.indexOf(`
`) >= 0, n + a.replace(/\u001b\[\d\d?m/g, "").length + 1;
  }, 0);
  return s > 60 ? r[0] + (e === "" ? "" : e + `
 `) + " " + t4.join(`,
  `) + " " + r[1] : r[0] + e + " " + t4.join(", ") + " " + r[1];
}
function Hl(t4) {
  return Array.isArray(t4);
}
function hi(t4) {
  return typeof t4 == "boolean";
}
function Ws(t4) {
  return t4 === null;
}
function J0(t4) {
  return t4 == null;
}
function Kl(t4) {
  return typeof t4 == "number";
}
function zs(t4) {
  return typeof t4 == "string";
}
function X0(t4) {
  return typeof t4 == "symbol";
}
function Dr(t4) {
  return t4 === void 0;
}
function An(t4) {
  return In(t4) && Jl(t4) === "[object RegExp]";
}
function In(t4) {
  return typeof t4 == "object" && t4 !== null;
}
function rs(t4) {
  return In(t4) && Jl(t4) === "[object Date]";
}
function Qn(t4) {
  return In(t4) && (Jl(t4) === "[object Error]" || t4 instanceof Error);
}
function Dn(t4) {
  return typeof t4 == "function";
}
function Ua(t4) {
  return t4 === null || typeof t4 == "boolean" || typeof t4 == "number" || typeof t4 == "string" || typeof t4 == "symbol" || // ES6 symbol
  typeof t4 > "u";
}
function Q0(t4) {
  return me.isBuffer(t4);
}
function Jl(t4) {
  return Object.prototype.toString.call(t4);
}
function Ji(t4) {
  return t4 < 10 ? "0" + t4.toString(10) : t4.toString(10);
}
var SC = [
  "Jan",
  "Feb",
  "Mar",
  "Apr",
  "May",
  "Jun",
  "Jul",
  "Aug",
  "Sep",
  "Oct",
  "Nov",
  "Dec"
];
function AC() {
  var t4 = /* @__PURE__ */ new Date(), e = [
    Ji(t4.getHours()),
    Ji(t4.getMinutes()),
    Ji(t4.getSeconds())
  ].join(":");
  return [t4.getDate(), SC[t4.getMonth()], e].join(" ");
}
function Y0() {
  console.log("%s - %s", AC(), fi.apply(null, arguments));
}
function Xl(t4, e) {
  if (!e || !In(e))
    return t4;
  for (var r = Object.keys(e), s = r.length; s--; )
    t4[r[s]] = e[r[s]];
  return t4;
}
function Z0(t4, e) {
  return Object.prototype.hasOwnProperty.call(t4, e);
}
var DC = {
  inherits: zl,
  _extend: Xl,
  log: Y0,
  isBuffer: Q0,
  isPrimitive: Ua,
  isFunction: Dn,
  isError: Qn,
  isDate: rs,
  isObject: In,
  isRegExp: An,
  isUndefined: Dr,
  isSymbol: X0,
  isString: zs,
  isNumber: Kl,
  isNullOrUndefined: J0,
  isNull: Ws,
  isBoolean: hi,
  isArray: Hl,
  inspect: dr,
  deprecate: Gl,
  format: fi,
  debuglog: K0
};
var wC = Object.freeze({
  __proto__: null,
  format: fi,
  deprecate: Gl,
  debuglog: K0,
  inspect: dr,
  isArray: Hl,
  isBoolean: hi,
  isNull: Ws,
  isNullOrUndefined: J0,
  isNumber: Kl,
  isString: zs,
  isSymbol: X0,
  isUndefined: Dr,
  isRegExp: An,
  isObject: In,
  isDate: rs,
  isError: Qn,
  isFunction: Dn,
  isPrimitive: Ua,
  isBuffer: Q0,
  log: Y0,
  inherits: zl,
  _extend: Xl,
  default: DC
});
function Ad(t4, e) {
  if (t4 === e)
    return 0;
  for (var r = t4.length, s = e.length, n = 0, a = Math.min(r, s); n < a; ++n)
    if (t4[n] !== e[n]) {
      r = t4[n], s = e[n];
      break;
    }
  return r < s ? -1 : s < r ? 1 : 0;
}
var kC = Object.prototype.hasOwnProperty;
var Dd = Object.keys || function(t4) {
  var e = [];
  for (var r in t4)
    kC.call(t4, r) && e.push(r);
  return e;
};
var wd = Array.prototype.slice;
var Xi;
function ex() {
  return typeof Xi < "u" ? Xi : Xi = function() {
    return (function() {
    }).name === "foo";
  }();
}
function kd(t4) {
  return Object.prototype.toString.call(t4);
}
function Td(t4) {
  return Hn(t4) || typeof gr.ArrayBuffer != "function" ? false : typeof ArrayBuffer.isView == "function" ? ArrayBuffer.isView(t4) : t4 ? !!(t4 instanceof DataView || t4.buffer && t4.buffer instanceof ArrayBuffer) : false;
}
function jt(t4, e) {
  t4 || Nt(t4, true, e, "==", Ls);
}
var TC = /\s*function\s+([^\(\s]*)\s*/;
function tx(t4) {
  if (Dn(t4)) {
    if (ex())
      return t4.name;
    var e = t4.toString(), r = e.match(TC);
    return r && r[1];
  }
}
jt.AssertionError = mi;
function mi(t4) {
  this.name = "AssertionError", this.actual = t4.actual, this.expected = t4.expected, this.operator = t4.operator, t4.message ? (this.message = t4.message, this.generatedMessage = false) : (this.message = FC(this), this.generatedMessage = true);
  var e = t4.stackStartFunction || Nt;
  if (Error.captureStackTrace)
    Error.captureStackTrace(this, e);
  else {
    var r = new Error();
    if (r.stack) {
      var s = r.stack, n = tx(e), a = s.indexOf(`
` + n);
      if (a >= 0) {
        var o = s.indexOf(`
`, a + 1);
        s = s.substring(o + 1);
      }
      this.stack = s;
    }
  }
}
zl(mi, Error);
function Fd(t4, e) {
  return typeof t4 == "string" ? t4.length < e ? t4 : t4.slice(0, e) : t4;
}
function Pd(t4) {
  if (ex() || !Dn(t4))
    return dr(t4);
  var e = tx(t4), r = e ? ": " + e : "";
  return "[Function" + r + "]";
}
function FC(t4) {
  return Fd(Pd(t4.actual), 128) + " " + t4.operator + " " + Fd(Pd(t4.expected), 128);
}
function Nt(t4, e, r, s, n) {
  throw new mi({
    message: r,
    actual: t4,
    expected: e,
    operator: s,
    stackStartFunction: n
  });
}
jt.fail = Nt;
function Ls(t4, e) {
  t4 || Nt(t4, true, e, "==", Ls);
}
jt.ok = Ls;
jt.equal = Ql;
function Ql(t4, e, r) {
  t4 != e && Nt(t4, e, r, "==", Ql);
}
jt.notEqual = Yl;
function Yl(t4, e, r) {
  t4 == e && Nt(t4, e, r, "!=", Yl);
}
jt.deepEqual = Zl;
function Zl(t4, e, r) {
  ns(t4, e, false) || Nt(t4, e, r, "deepEqual", Zl);
}
jt.deepStrictEqual = eu;
function eu(t4, e, r) {
  ns(t4, e, true) || Nt(t4, e, r, "deepStrictEqual", eu);
}
function ns(t4, e, r, s) {
  if (t4 === e)
    return true;
  if (Hn(t4) && Hn(e))
    return Ad(t4, e) === 0;
  if (rs(t4) && rs(e))
    return t4.getTime() === e.getTime();
  if (An(t4) && An(e))
    return t4.source === e.source && t4.global === e.global && t4.multiline === e.multiline && t4.lastIndex === e.lastIndex && t4.ignoreCase === e.ignoreCase;
  if ((t4 === null || typeof t4 != "object") && (e === null || typeof e != "object"))
    return r ? t4 === e : t4 == e;
  if (Td(t4) && Td(e) && kd(t4) === kd(e) && !(t4 instanceof Float32Array || t4 instanceof Float64Array))
    return Ad(
      new Uint8Array(t4.buffer),
      new Uint8Array(e.buffer)
    ) === 0;
  if (Hn(t4) !== Hn(e))
    return false;
  s = s || { actual: [], expected: [] };
  var n = s.actual.indexOf(t4);
  return n !== -1 && n === s.expected.indexOf(e) ? true : (s.actual.push(t4), s.expected.push(e), PC(t4, e, r, s));
}
function Id(t4) {
  return Object.prototype.toString.call(t4) == "[object Arguments]";
}
function PC(t4, e, r, s) {
  if (t4 == null || e === null || e === void 0)
    return false;
  if (Ua(t4) || Ua(e))
    return t4 === e;
  if (r && Object.getPrototypeOf(t4) !== Object.getPrototypeOf(e))
    return false;
  var n = Id(t4), a = Id(e);
  if (n && !a || !n && a)
    return false;
  if (n)
    return t4 = wd.call(t4), e = wd.call(e), ns(t4, e, r);
  var o = Dd(t4), l = Dd(e), i, u;
  if (o.length !== l.length)
    return false;
  for (o.sort(), l.sort(), u = o.length - 1; u >= 0; u--)
    if (o[u] !== l[u])
      return false;
  for (u = o.length - 1; u >= 0; u--)
    if (i = o[u], !ns(t4[i], e[i], r, s))
      return false;
  return true;
}
jt.notDeepEqual = tu;
function tu(t4, e, r) {
  ns(t4, e, false) && Nt(t4, e, r, "notDeepEqual", tu);
}
jt.notDeepStrictEqual = ru;
function ru(t4, e, r) {
  ns(t4, e, true) && Nt(t4, e, r, "notDeepStrictEqual", ru);
}
jt.strictEqual = nu;
function nu(t4, e, r) {
  t4 !== e && Nt(t4, e, r, "===", nu);
}
jt.notStrictEqual = su;
function su(t4, e, r) {
  t4 === e && Nt(t4, e, r, "!==", su);
}
function _d(t4, e) {
  if (!t4 || !e)
    return false;
  if (Object.prototype.toString.call(e) == "[object RegExp]")
    return e.test(t4);
  try {
    if (t4 instanceof e)
      return true;
  } catch {
  }
  return Error.isPrototypeOf(e) ? false : e.call({}, t4) === true;
}
function IC(t4) {
  var e;
  try {
    t4();
  } catch (r) {
    e = r;
  }
  return e;
}
function rx(t4, e, r, s) {
  var n;
  if (typeof e != "function")
    throw new TypeError('"block" argument must be a function');
  typeof r == "string" && (s = r, r = null), n = IC(e), s = (r && r.name ? " (" + r.name + ")." : ".") + (s ? " " + s : "."), t4 && !n && Nt(n, r, "Missing expected exception" + s);
  var a = typeof s == "string", o = !t4 && Qn(n), l = !t4 && n && !r;
  if ((o && a && _d(n, r) || l) && Nt(n, r, "Got unwanted exception" + s), t4 && n && r && !_d(n, r) || !t4 && n)
    throw n;
}
jt.throws = nx;
function nx(t4, e, r) {
  rx(true, t4, e, r);
}
jt.doesNotThrow = sx;
function sx(t4, e, r) {
  rx(false, t4, e, r);
}
jt.ifError = ax;
function ax(t4) {
  if (t4)
    throw t4;
}
var _C = Object.freeze({
  __proto__: null,
  default: jt,
  AssertionError: mi,
  fail: Nt,
  ok: Ls,
  assert: Ls,
  equal: Ql,
  notEqual: Yl,
  deepEqual: Zl,
  deepStrictEqual: eu,
  notDeepEqual: tu,
  notDeepStrictEqual: ru,
  strictEqual: nu,
  notStrictEqual: su,
  throws: nx,
  doesNotThrow: sx,
  ifError: ax
});
var os = Fn(_C);
var di = {};
var BC = "estraverse";
var OC = "ECMAScript JS AST traversal functions";
var LC = "https://github.com/estools/estraverse";
var RC = "estraverse.js";
var NC = "4.3.0";
var jC = {
  node: ">=4.0"
};
var MC = [
  {
    name: "Yusuke Suzuki",
    email: "utatane.tea@gmail.com",
    web: "http://github.com/Constellation"
  }
];
var $C = {
  type: "git",
  url: "http://github.com/estools/estraverse.git"
};
var VC = {
  "babel-preset-env": "^1.6.1",
  "babel-register": "^6.3.13",
  chai: "^2.1.1",
  espree: "^1.11.0",
  gulp: "^3.8.10",
  "gulp-bump": "^0.2.2",
  "gulp-filter": "^2.0.0",
  "gulp-git": "^1.0.1",
  "gulp-tag-version": "^1.3.0",
  jshint: "^2.5.6",
  mocha: "^2.1.0"
};
var UC = "BSD-2-Clause";
var qC = {
  test: "npm run-script lint && npm run-script unit-test",
  lint: "jshint estraverse.js",
  "unit-test": "mocha --compilers js:babel-register"
};
var WC = {
  name: BC,
  description: OC,
  homepage: LC,
  main: RC,
  version: NC,
  engines: jC,
  maintainers: MC,
  repository: $C,
  devDependencies: VC,
  license: UC,
  scripts: qC
};
(function(t4) {
  (function e(r) {
    var s, n, a, o, l, i;
    function u(b) {
      var v = {}, C, T;
      for (C in b)
        b.hasOwnProperty(C) && (T = b[C], typeof T == "object" && T !== null ? v[C] = u(T) : v[C] = T);
      return v;
    }
    function c(b, v) {
      var C, T, w, B;
      for (T = b.length, w = 0; T; )
        C = T >>> 1, B = w + C, v(b[B]) ? T = C : (w = B + 1, T -= C + 1);
      return w;
    }
    s = {
      AssignmentExpression: "AssignmentExpression",
      AssignmentPattern: "AssignmentPattern",
      ArrayExpression: "ArrayExpression",
      ArrayPattern: "ArrayPattern",
      ArrowFunctionExpression: "ArrowFunctionExpression",
      AwaitExpression: "AwaitExpression",
      // CAUTION: It's deferred to ES7.
      BlockStatement: "BlockStatement",
      BinaryExpression: "BinaryExpression",
      BreakStatement: "BreakStatement",
      CallExpression: "CallExpression",
      CatchClause: "CatchClause",
      ClassBody: "ClassBody",
      ClassDeclaration: "ClassDeclaration",
      ClassExpression: "ClassExpression",
      ComprehensionBlock: "ComprehensionBlock",
      // CAUTION: It's deferred to ES7.
      ComprehensionExpression: "ComprehensionExpression",
      // CAUTION: It's deferred to ES7.
      ConditionalExpression: "ConditionalExpression",
      ContinueStatement: "ContinueStatement",
      DebuggerStatement: "DebuggerStatement",
      DirectiveStatement: "DirectiveStatement",
      DoWhileStatement: "DoWhileStatement",
      EmptyStatement: "EmptyStatement",
      ExportAllDeclaration: "ExportAllDeclaration",
      ExportDefaultDeclaration: "ExportDefaultDeclaration",
      ExportNamedDeclaration: "ExportNamedDeclaration",
      ExportSpecifier: "ExportSpecifier",
      ExpressionStatement: "ExpressionStatement",
      ForStatement: "ForStatement",
      ForInStatement: "ForInStatement",
      ForOfStatement: "ForOfStatement",
      FunctionDeclaration: "FunctionDeclaration",
      FunctionExpression: "FunctionExpression",
      GeneratorExpression: "GeneratorExpression",
      // CAUTION: It's deferred to ES7.
      Identifier: "Identifier",
      IfStatement: "IfStatement",
      ImportExpression: "ImportExpression",
      ImportDeclaration: "ImportDeclaration",
      ImportDefaultSpecifier: "ImportDefaultSpecifier",
      ImportNamespaceSpecifier: "ImportNamespaceSpecifier",
      ImportSpecifier: "ImportSpecifier",
      Literal: "Literal",
      LabeledStatement: "LabeledStatement",
      LogicalExpression: "LogicalExpression",
      MemberExpression: "MemberExpression",
      MetaProperty: "MetaProperty",
      MethodDefinition: "MethodDefinition",
      ModuleSpecifier: "ModuleSpecifier",
      NewExpression: "NewExpression",
      ObjectExpression: "ObjectExpression",
      ObjectPattern: "ObjectPattern",
      Program: "Program",
      Property: "Property",
      RestElement: "RestElement",
      ReturnStatement: "ReturnStatement",
      SequenceExpression: "SequenceExpression",
      SpreadElement: "SpreadElement",
      Super: "Super",
      SwitchStatement: "SwitchStatement",
      SwitchCase: "SwitchCase",
      TaggedTemplateExpression: "TaggedTemplateExpression",
      TemplateElement: "TemplateElement",
      TemplateLiteral: "TemplateLiteral",
      ThisExpression: "ThisExpression",
      ThrowStatement: "ThrowStatement",
      TryStatement: "TryStatement",
      UnaryExpression: "UnaryExpression",
      UpdateExpression: "UpdateExpression",
      VariableDeclaration: "VariableDeclaration",
      VariableDeclarator: "VariableDeclarator",
      WhileStatement: "WhileStatement",
      WithStatement: "WithStatement",
      YieldExpression: "YieldExpression"
    }, a = {
      AssignmentExpression: ["left", "right"],
      AssignmentPattern: ["left", "right"],
      ArrayExpression: ["elements"],
      ArrayPattern: ["elements"],
      ArrowFunctionExpression: ["params", "body"],
      AwaitExpression: ["argument"],
      // CAUTION: It's deferred to ES7.
      BlockStatement: ["body"],
      BinaryExpression: ["left", "right"],
      BreakStatement: ["label"],
      CallExpression: ["callee", "arguments"],
      CatchClause: ["param", "body"],
      ClassBody: ["body"],
      ClassDeclaration: ["id", "superClass", "body"],
      ClassExpression: ["id", "superClass", "body"],
      ComprehensionBlock: ["left", "right"],
      // CAUTION: It's deferred to ES7.
      ComprehensionExpression: ["blocks", "filter", "body"],
      // CAUTION: It's deferred to ES7.
      ConditionalExpression: ["test", "consequent", "alternate"],
      ContinueStatement: ["label"],
      DebuggerStatement: [],
      DirectiveStatement: [],
      DoWhileStatement: ["body", "test"],
      EmptyStatement: [],
      ExportAllDeclaration: ["source"],
      ExportDefaultDeclaration: ["declaration"],
      ExportNamedDeclaration: ["declaration", "specifiers", "source"],
      ExportSpecifier: ["exported", "local"],
      ExpressionStatement: ["expression"],
      ForStatement: ["init", "test", "update", "body"],
      ForInStatement: ["left", "right", "body"],
      ForOfStatement: ["left", "right", "body"],
      FunctionDeclaration: ["id", "params", "body"],
      FunctionExpression: ["id", "params", "body"],
      GeneratorExpression: ["blocks", "filter", "body"],
      // CAUTION: It's deferred to ES7.
      Identifier: [],
      IfStatement: ["test", "consequent", "alternate"],
      ImportExpression: ["source"],
      ImportDeclaration: ["specifiers", "source"],
      ImportDefaultSpecifier: ["local"],
      ImportNamespaceSpecifier: ["local"],
      ImportSpecifier: ["imported", "local"],
      Literal: [],
      LabeledStatement: ["label", "body"],
      LogicalExpression: ["left", "right"],
      MemberExpression: ["object", "property"],
      MetaProperty: ["meta", "property"],
      MethodDefinition: ["key", "value"],
      ModuleSpecifier: [],
      NewExpression: ["callee", "arguments"],
      ObjectExpression: ["properties"],
      ObjectPattern: ["properties"],
      Program: ["body"],
      Property: ["key", "value"],
      RestElement: ["argument"],
      ReturnStatement: ["argument"],
      SequenceExpression: ["expressions"],
      SpreadElement: ["argument"],
      Super: [],
      SwitchStatement: ["discriminant", "cases"],
      SwitchCase: ["test", "consequent"],
      TaggedTemplateExpression: ["tag", "quasi"],
      TemplateElement: [],
      TemplateLiteral: ["quasis", "expressions"],
      ThisExpression: [],
      ThrowStatement: ["argument"],
      TryStatement: ["block", "handler", "finalizer"],
      UnaryExpression: ["argument"],
      UpdateExpression: ["argument"],
      VariableDeclaration: ["declarations"],
      VariableDeclarator: ["id", "init"],
      WhileStatement: ["test", "body"],
      WithStatement: ["object", "body"],
      YieldExpression: ["argument"]
    }, o = {}, l = {}, i = {}, n = {
      Break: o,
      Skip: l,
      Remove: i
    };
    function f(b, v) {
      this.parent = b, this.key = v;
    }
    f.prototype.replace = function(v) {
      this.parent[this.key] = v;
    }, f.prototype.remove = function() {
      return Array.isArray(this.parent) ? (this.parent.splice(this.key, 1), true) : (this.replace(null), false);
    };
    function h(b, v, C, T) {
      this.node = b, this.path = v, this.wrap = C, this.ref = T;
    }
    function p() {
    }
    p.prototype.path = function() {
      var v, C, T, w, B, I;
      function _(S, F) {
        if (Array.isArray(F))
          for (T = 0, w = F.length; T < w; ++T)
            S.push(F[T]);
        else
          S.push(F);
      }
      if (!this.__current.path)
        return null;
      for (B = [], v = 2, C = this.__leavelist.length; v < C; ++v)
        I = this.__leavelist[v], _(B, I.path);
      return _(B, this.__current.path), B;
    }, p.prototype.type = function() {
      var b = this.current();
      return b.type || this.__current.wrap;
    }, p.prototype.parents = function() {
      var v, C, T;
      for (T = [], v = 1, C = this.__leavelist.length; v < C; ++v)
        T.push(this.__leavelist[v].node);
      return T;
    }, p.prototype.current = function() {
      return this.__current.node;
    }, p.prototype.__execute = function(v, C) {
      var T, w;
      return w = void 0, T = this.__current, this.__current = C, this.__state = null, v && (w = v.call(this, C.node, this.__leavelist[this.__leavelist.length - 1].node)), this.__current = T, w;
    }, p.prototype.notify = function(v) {
      this.__state = v;
    }, p.prototype.skip = function() {
      this.notify(l);
    }, p.prototype.break = function() {
      this.notify(o);
    }, p.prototype.remove = function() {
      this.notify(i);
    }, p.prototype.__initialize = function(b, v) {
      this.visitor = v, this.root = b, this.__worklist = [], this.__leavelist = [], this.__current = null, this.__state = null, this.__fallback = null, v.fallback === "iteration" ? this.__fallback = Object.keys : typeof v.fallback == "function" && (this.__fallback = v.fallback), this.__keys = a, v.keys && (this.__keys = Object.assign(Object.create(this.__keys), v.keys));
    };
    function m(b) {
      return b == null ? false : typeof b == "object" && typeof b.type == "string";
    }
    function d(b, v) {
      return (b === s.ObjectExpression || b === s.ObjectPattern) && v === "properties";
    }
    p.prototype.traverse = function(v, C) {
      var T, w, B, I, _, S, F, N, k, j, O, z;
      for (this.__initialize(v, C), z = {}, T = this.__worklist, w = this.__leavelist, T.push(new h(v, null, null, null)), w.push(new h(null, null, null, null)); T.length; ) {
        if (B = T.pop(), B === z) {
          if (B = w.pop(), S = this.__execute(C.leave, B), this.__state === o || S === o)
            return;
          continue;
        }
        if (B.node) {
          if (S = this.__execute(C.enter, B), this.__state === o || S === o)
            return;
          if (T.push(z), w.push(B), this.__state === l || S === l)
            continue;
          if (I = B.node, _ = I.type || B.wrap, j = this.__keys[_], !j)
            if (this.__fallback)
              j = this.__fallback(I);
            else
              throw new Error("Unknown node type " + _ + ".");
          for (N = j.length; (N -= 1) >= 0; )
            if (F = j[N], O = I[F], !!O)
              if (Array.isArray(O)) {
                for (k = O.length; (k -= 1) >= 0; )
                  if (O[k]) {
                    if (d(_, j[N]))
                      B = new h(O[k], [F, k], "Property", null);
                    else if (m(O[k]))
                      B = new h(O[k], [F, k], null, null);
                    else
                      continue;
                    T.push(B);
                  }
              } else
                m(O) && T.push(new h(O, F, null, null));
        }
      }
    }, p.prototype.replace = function(v, C) {
      var T, w, B, I, _, S, F, N, k, j, O, z, te;
      function se(ye) {
        var Se, xe, Ae, _e;
        if (ye.ref.remove()) {
          for (xe = ye.ref.key, _e = ye.ref.parent, Se = T.length; Se--; )
            if (Ae = T[Se], Ae.ref && Ae.ref.parent === _e) {
              if (Ae.ref.key < xe)
                break;
              --Ae.ref.key;
            }
        }
      }
      for (this.__initialize(v, C), O = {}, T = this.__worklist, w = this.__leavelist, z = {
        root: v
      }, S = new h(v, null, null, new f(z, "root")), T.push(S), w.push(S); T.length; ) {
        if (S = T.pop(), S === O) {
          if (S = w.pop(), _ = this.__execute(C.leave, S), _ !== void 0 && _ !== o && _ !== l && _ !== i && S.ref.replace(_), (this.__state === i || _ === i) && se(S), this.__state === o || _ === o)
            return z.root;
          continue;
        }
        if (_ = this.__execute(C.enter, S), _ !== void 0 && _ !== o && _ !== l && _ !== i && (S.ref.replace(_), S.node = _), (this.__state === i || _ === i) && (se(S), S.node = null), this.__state === o || _ === o)
          return z.root;
        if (B = S.node, !!B && (T.push(O), w.push(S), !(this.__state === l || _ === l))) {
          if (I = B.type || S.wrap, k = this.__keys[I], !k)
            if (this.__fallback)
              k = this.__fallback(B);
            else
              throw new Error("Unknown node type " + I + ".");
          for (F = k.length; (F -= 1) >= 0; )
            if (te = k[F], j = B[te], !!j)
              if (Array.isArray(j)) {
                for (N = j.length; (N -= 1) >= 0; )
                  if (j[N]) {
                    if (d(I, k[F]))
                      S = new h(j[N], [te, N], "Property", new f(j, N));
                    else if (m(j[N]))
                      S = new h(j[N], [te, N], null, new f(j, N));
                    else
                      continue;
                    T.push(S);
                  }
              } else
                m(j) && T.push(new h(j, te, null, new f(B, te)));
        }
      }
      return z.root;
    };
    function g(b, v) {
      var C = new p();
      return C.traverse(b, v);
    }
    function y(b, v) {
      var C = new p();
      return C.replace(b, v);
    }
    function x(b, v) {
      var C;
      return C = c(v, function(w) {
        return w.range[0] > b.range[0];
      }), b.extendedRange = [b.range[0], b.range[1]], C !== v.length && (b.extendedRange[1] = v[C].range[0]), C -= 1, C >= 0 && (b.extendedRange[0] = v[C].range[1]), b;
    }
    function A(b, v, C) {
      var T = [], w, B, I, _;
      if (!b.range)
        throw new Error("attachComments needs range information");
      if (!C.length) {
        if (v.length) {
          for (I = 0, B = v.length; I < B; I += 1)
            w = u(v[I]), w.extendedRange = [0, b.range[0]], T.push(w);
          b.leadingComments = T;
        }
        return b;
      }
      for (I = 0, B = v.length; I < B; I += 1)
        T.push(x(u(v[I]), C));
      return _ = 0, g(b, {
        enter: function(S) {
          for (var F; _ < T.length && (F = T[_], !(F.extendedRange[1] > S.range[0])); )
            F.extendedRange[1] === S.range[0] ? (S.leadingComments || (S.leadingComments = []), S.leadingComments.push(F), T.splice(_, 1)) : _ += 1;
          if (_ === T.length)
            return n.Break;
          if (T[_].extendedRange[0] > S.range[1])
            return n.Skip;
        }
      }), _ = 0, g(b, {
        leave: function(S) {
          for (var F; _ < T.length && (F = T[_], !(S.range[1] < F.extendedRange[0])); )
            S.range[1] === F.extendedRange[0] ? (S.trailingComments || (S.trailingComments = []), S.trailingComments.push(F), T.splice(_, 1)) : _ += 1;
          if (_ === T.length)
            return n.Break;
          if (T[_].extendedRange[0] > S.range[1])
            return n.Skip;
        }
      }), b;
    }
    return r.version = WC.version, r.Syntax = s, r.traverse = g, r.replace = y, r.attachComments = A, r.VisitorKeys = a, r.VisitorOption = n, r.Controller = p, r.cloneEnvironment = function() {
      return e({});
    }, r;
  })(t4);
})(di);
var ix = 1;
var ox = 2;
var zC = ix | ox;
var jr = class {
  constructor(e, r, s, n, a, o, l) {
    this.identifier = e, this.from = r, this.tainted = false, this.resolved = null, this.flag = s, this.isWrite() && (this.writeExpr = n, this.partial = o, this.init = l), this.__maybeImplicitGlobal = a;
  }
  /**
   * Whether the reference is static.
   * @method Reference#isStatic
   * @returns {boolean} static
   */
  isStatic() {
    return !this.tainted && this.resolved && this.resolved.scope.isStatic();
  }
  /**
   * Whether the reference is writeable.
   * @method Reference#isWrite
   * @returns {boolean} write
   */
  isWrite() {
    return !!(this.flag & jr.WRITE);
  }
  /**
   * Whether the reference is readable.
   * @method Reference#isRead
   * @returns {boolean} read
   */
  isRead() {
    return !!(this.flag & jr.READ);
  }
  /**
   * Whether the reference is read-only.
   * @method Reference#isReadOnly
   * @returns {boolean} read only
   */
  isReadOnly() {
    return this.flag === jr.READ;
  }
  /**
   * Whether the reference is write-only.
   * @method Reference#isWriteOnly
   * @returns {boolean} write only
   */
  isWriteOnly() {
    return this.flag === jr.WRITE;
  }
  /**
   * Whether the reference is read-write.
   * @method Reference#isReadWrite
   * @returns {boolean} read write
   */
  isReadWrite() {
    return this.flag === jr.RW;
  }
};
jr.READ = ix;
jr.WRITE = ox;
jr.RW = zC;
var au = jr;
var on = class {
  constructor(e, r) {
    this.name = e, this.identifiers = [], this.references = [], this.defs = [], this.tainted = false, this.stack = true, this.scope = r;
  }
};
on.CatchClause = "CatchClause";
on.Parameter = "Parameter";
on.FunctionName = "FunctionName";
on.ClassName = "ClassName";
on.Variable = "Variable";
on.ImportBinding = "ImportBinding";
on.ImplicitGlobalVariable = "ImplicitGlobalVariable";
var gi = on;
var GC = gi;
var lx = class {
  constructor(e, r, s, n, a, o) {
    this.type = e, this.name = r, this.node = s, this.parent = n, this.index = a, this.kind = o;
  }
};
var HC = class extends lx {
  constructor(e, r, s, n) {
    super(GC.Parameter, e, r, null, s, null), this.rest = n;
  }
};
var ux = {
  ParameterDefinition: HC,
  Definition: lx
};
var cr = di.Syntax;
var Bd = au;
var Rs = gi;
var cx = ux.Definition;
var al = os;
function KC(t4, e, r, s) {
  let n;
  if (t4.upper && t4.upper.isStrict || r || t4.type === "class" || t4.type === "module")
    return true;
  if (t4.type === "block" || t4.type === "switch")
    return false;
  if (t4.type === "function") {
    if (e.type === cr.ArrowFunctionExpression && e.body.type !== cr.BlockStatement || (e.type === cr.Program ? n = e : n = e.body, !n))
      return false;
  } else if (t4.type === "global")
    n = e;
  else
    return false;
  if (s)
    for (let a = 0, o = n.body.length; a < o; ++a) {
      const l = n.body[a];
      if (l.type !== cr.DirectiveStatement)
        break;
      if (l.raw === '"use strict"' || l.raw === "'use strict'")
        return true;
    }
  else
    for (let a = 0, o = n.body.length; a < o; ++a) {
      const l = n.body[a];
      if (l.type !== cr.ExpressionStatement)
        break;
      const i = l.expression;
      if (i.type !== cr.Literal || typeof i.value != "string")
        break;
      if (i.raw !== null && i.raw !== void 0) {
        if (i.raw === '"use strict"' || i.raw === "'use strict'")
          return true;
      } else if (i.value === "use strict")
        return true;
    }
  return false;
}
function JC(t4, e) {
  t4.scopes.push(e);
  const r = t4.__nodeToScope.get(e.block);
  r ? r.push(e) : t4.__nodeToScope.set(e.block, [e]);
}
function XC(t4) {
  return t4.type === Rs.ClassName || t4.type === Rs.Variable && t4.parent.kind !== "var";
}
var yr = class {
  constructor(e, r, s, n, a) {
    this.type = r, this.set = /* @__PURE__ */ new Map(), this.taints = /* @__PURE__ */ new Map(), this.dynamic = this.type === "global" || this.type === "with", this.block = n, this.through = [], this.variables = [], this.references = [], this.variableScope = this.type === "global" || this.type === "function" || this.type === "module" ? this : s.variableScope, this.functionExpressionScope = false, this.directCallToEvalScope = false, this.thisFound = false, this.__left = [], this.upper = s, this.isStrict = KC(this, n, a, e.__useDirective()), this.childScopes = [], this.upper && this.upper.childScopes.push(this), this.__declaredVariables = e.__declaredVariables, JC(e, this);
  }
  __shouldStaticallyClose(e) {
    return !this.dynamic || e.__isOptimistic();
  }
  __shouldStaticallyCloseForGlobal(e) {
    const r = e.identifier.name;
    if (!this.set.has(r))
      return false;
    const n = this.set.get(r).defs;
    return n.length > 0 && n.every(XC);
  }
  __staticCloseRef(e) {
    this.__resolve(e) || this.__delegateToUpperScope(e);
  }
  __dynamicCloseRef(e) {
    let r = this;
    do
      r.through.push(e), r = r.upper;
    while (r);
  }
  __globalCloseRef(e) {
    this.__shouldStaticallyCloseForGlobal(e) ? this.__staticCloseRef(e) : this.__dynamicCloseRef(e);
  }
  __close(e) {
    let r;
    this.__shouldStaticallyClose(e) ? r = this.__staticCloseRef : this.type !== "global" ? r = this.__dynamicCloseRef : r = this.__globalCloseRef;
    for (let s = 0, n = this.__left.length; s < n; ++s) {
      const a = this.__left[s];
      r.call(this, a);
    }
    return this.__left = null, this.upper;
  }
  // To override by function scopes.
  // References in default parameters isn't resolved to variables which are in their function body.
  __isValidResolution(e, r) {
    return true;
  }
  __resolve(e) {
    const r = e.identifier.name;
    if (!this.set.has(r))
      return false;
    const s = this.set.get(r);
    return this.__isValidResolution(e, s) ? (s.references.push(e), s.stack = s.stack && e.from.variableScope === this.variableScope, e.tainted && (s.tainted = true, this.taints.set(s.name, true)), e.resolved = s, true) : false;
  }
  __delegateToUpperScope(e) {
    this.upper && this.upper.__left.push(e), this.through.push(e);
  }
  __addDeclaredVariablesOfNode(e, r) {
    if (r == null)
      return;
    let s = this.__declaredVariables.get(r);
    s == null && (s = [], this.__declaredVariables.set(r, s)), s.indexOf(e) === -1 && s.push(e);
  }
  __defineGeneric(e, r, s, n, a) {
    let o;
    o = r.get(e), o || (o = new Rs(e, this), r.set(e, o), s.push(o)), a && (o.defs.push(a), this.__addDeclaredVariablesOfNode(o, a.node), this.__addDeclaredVariablesOfNode(o, a.parent)), n && o.identifiers.push(n);
  }
  __define(e, r) {
    e && e.type === cr.Identifier && this.__defineGeneric(
      e.name,
      this.set,
      this.variables,
      e,
      r
    );
  }
  __referencing(e, r, s, n, a, o) {
    if (!e || e.type !== cr.Identifier || e.name === "super")
      return;
    const l = new Bd(e, this, r || Bd.READ, s, n, !!a, !!o);
    this.references.push(l), this.__left.push(l);
  }
  __detectEval() {
    let e = this;
    this.directCallToEvalScope = true;
    do
      e.dynamic = true, e = e.upper;
    while (e);
  }
  __detectThis() {
    this.thisFound = true;
  }
  __isClosed() {
    return this.__left === null;
  }
  /**
   * returns resolved {Reference}
   * @method Scope#resolve
   * @param {Espree.Identifier} ident - identifier to be resolved.
   * @returns {Reference} reference
   */
  resolve(e) {
    let r, s, n;
    for (al(this.__isClosed(), "Scope should be closed."), al(e.type === cr.Identifier, "Target should be identifier."), s = 0, n = this.references.length; s < n; ++s)
      if (r = this.references[s], r.identifier === e)
        return r;
    return null;
  }
  /**
   * returns this scope is static
   * @method Scope#isStatic
   * @returns {boolean} static
   */
  isStatic() {
    return !this.dynamic;
  }
  /**
   * returns this scope has materialized arguments
   * @method Scope#isArgumentsMaterialized
   * @returns {boolean} arguemnts materialized
   */
  isArgumentsMaterialized() {
    return true;
  }
  /**
   * returns this scope has materialized `this` reference
   * @method Scope#isThisMaterialized
   * @returns {boolean} this materialized
   */
  isThisMaterialized() {
    return true;
  }
  isUsedName(e) {
    if (this.set.has(e))
      return true;
    for (let r = 0, s = this.through.length; r < s; ++r)
      if (this.through[r].identifier.name === e)
        return true;
    return false;
  }
};
var QC = class extends yr {
  constructor(e, r) {
    super(e, "global", null, r, false), this.implicit = {
      set: /* @__PURE__ */ new Map(),
      variables: [],
      /**
      * List of {@link Reference}s that are left to be resolved (i.e. which
      * need to be linked to the variable they refer to).
      * @member {Reference[]} Scope#implicit#left
      */
      left: []
    };
  }
  __close(e) {
    const r = [];
    for (let s = 0, n = this.__left.length; s < n; ++s) {
      const a = this.__left[s];
      a.__maybeImplicitGlobal && !this.set.has(a.identifier.name) && r.push(a.__maybeImplicitGlobal);
    }
    for (let s = 0, n = r.length; s < n; ++s) {
      const a = r[s];
      this.__defineImplicit(
        a.pattern,
        new cx(
          Rs.ImplicitGlobalVariable,
          a.pattern,
          a.node,
          null,
          null,
          null
        )
      );
    }
    return this.implicit.left = this.__left, super.__close(e);
  }
  __defineImplicit(e, r) {
    e && e.type === cr.Identifier && this.__defineGeneric(
      e.name,
      this.implicit.set,
      this.implicit.variables,
      e,
      r
    );
  }
};
var YC = class extends yr {
  constructor(e, r, s) {
    super(e, "module", r, s, false);
  }
};
var ZC = class extends yr {
  constructor(e, r, s) {
    super(e, "function-expression-name", r, s, false), this.__define(
      s.id,
      new cx(
        Rs.FunctionName,
        s.id,
        s,
        null,
        null,
        null
      )
    ), this.functionExpressionScope = true;
  }
};
var eS = class extends yr {
  constructor(e, r, s) {
    super(e, "catch", r, s, false);
  }
};
var tS = class extends yr {
  constructor(e, r, s) {
    super(e, "with", r, s, false);
  }
  __close(e) {
    if (this.__shouldStaticallyClose(e))
      return super.__close(e);
    for (let r = 0, s = this.__left.length; r < s; ++r) {
      const n = this.__left[r];
      n.tainted = true, this.__delegateToUpperScope(n);
    }
    return this.__left = null, this.upper;
  }
};
var rS = class extends yr {
  constructor(e, r, s) {
    super(e, "block", r, s, false);
  }
};
var nS = class extends yr {
  constructor(e, r, s) {
    super(e, "switch", r, s, false);
  }
};
var sS = class extends yr {
  constructor(e, r, s, n) {
    super(e, "function", r, s, n), this.block.type !== cr.ArrowFunctionExpression && this.__defineArguments();
  }
  isArgumentsMaterialized() {
    if (this.block.type === cr.ArrowFunctionExpression)
      return false;
    if (!this.isStatic())
      return true;
    const e = this.set.get("arguments");
    return al(e, "Always have arguments variable."), e.tainted || e.references.length !== 0;
  }
  isThisMaterialized() {
    return this.isStatic() ? this.thisFound : true;
  }
  __defineArguments() {
    this.__defineGeneric(
      "arguments",
      this.set,
      this.variables,
      null,
      null
    ), this.taints.set("arguments", true);
  }
  // References in default parameters isn't resolved to variables which are in their function body.
  //     const x = 1
  //     function f(a = x) { // This `x` is resolved to the `x` in the outer scope.
  //         const x = 2
  //         console.log(a)
  //     }
  __isValidResolution(e, r) {
    if (this.block.type === "Program")
      return true;
    const s = this.block.body.range[0];
    return !(r.scope === this && e.identifier.range[0] < s && // the reference is in the parameter part.
    r.defs.every((n) => n.name.range[0] >= s));
  }
};
var aS = class extends yr {
  constructor(e, r, s) {
    super(e, "for", r, s, false);
  }
};
var iS = class extends yr {
  constructor(e, r, s) {
    super(e, "class", r, s, false);
  }
};
var px = {
  Scope: yr,
  GlobalScope: QC,
  ModuleScope: YC,
  FunctionExpressionNameScope: ZC,
  CatchScope: eS,
  WithScope: tS,
  BlockScope: rS,
  SwitchScope: nS,
  FunctionScope: sS,
  ForScope: aS,
  ClassScope: iS
};
var Fr = px;
var oS = os;
var Od = Fr.GlobalScope;
var lS = Fr.CatchScope;
var uS = Fr.WithScope;
var cS = Fr.ModuleScope;
var pS = Fr.ClassScope;
var fS = Fr.SwitchScope;
var hS = Fr.FunctionScope;
var mS = Fr.ForScope;
var dS = Fr.FunctionExpressionNameScope;
var gS = Fr.BlockScope;
var yS = class {
  constructor(e) {
    this.scopes = [], this.globalScope = null, this.__nodeToScope = /* @__PURE__ */ new WeakMap(), this.__currentScope = null, this.__options = e, this.__declaredVariables = /* @__PURE__ */ new WeakMap();
  }
  __useDirective() {
    return this.__options.directive;
  }
  __isOptimistic() {
    return this.__options.optimistic;
  }
  __ignoreEval() {
    return this.__options.ignoreEval;
  }
  __isNodejsScope() {
    return this.__options.nodejsScope;
  }
  isModule() {
    return this.__options.sourceType === "module";
  }
  isImpliedStrict() {
    return this.__options.impliedStrict;
  }
  isStrictModeSupported() {
    return this.__options.ecmaVersion >= 5;
  }
  // Returns appropriate scope for this node.
  __get(e) {
    return this.__nodeToScope.get(e);
  }
  /**
   * Get variables that are declared by the node.
   *
   * "are declared by the node" means the node is same as `Variable.defs[].node` or `Variable.defs[].parent`.
   * If the node declares nothing, this method returns an empty array.
   * CAUTION: This API is experimental. See https://github.com/estools/escope/pull/69 for more details.
   *
   * @param {Espree.Node} node - a node to get.
   * @returns {Variable[]} variables that declared by the node.
   */
  getDeclaredVariables(e) {
    return this.__declaredVariables.get(e) || [];
  }
  /**
   * acquire scope from node.
   * @method ScopeManager#acquire
   * @param {Espree.Node} node - node for the acquired scope.
   * @param {boolean=} inner - look up the most inner scope, default value is false.
   * @returns {Scope?} Scope from node
   */
  acquire(e, r) {
    function s(a) {
      return !(a.type === "function" && a.functionExpressionScope);
    }
    const n = this.__get(e);
    if (!n || n.length === 0)
      return null;
    if (n.length === 1)
      return n[0];
    if (r)
      for (let a = n.length - 1; a >= 0; --a) {
        const o = n[a];
        if (s(o))
          return o;
      }
    else
      for (let a = 0, o = n.length; a < o; ++a) {
        const l = n[a];
        if (s(l))
          return l;
      }
    return null;
  }
  /**
   * acquire all scopes from node.
   * @method ScopeManager#acquireAll
   * @param {Espree.Node} node - node for the acquired scope.
   * @returns {Scopes?} Scope array
   */
  acquireAll(e) {
    return this.__get(e);
  }
  /**
   * release the node.
   * @method ScopeManager#release
   * @param {Espree.Node} node - releasing node.
   * @param {boolean=} inner - look up the most inner scope, default value is false.
   * @returns {Scope?} upper scope for the node.
   */
  release(e, r) {
    const s = this.__get(e);
    if (s && s.length) {
      const n = s[0].upper;
      return n ? this.acquire(n.block, r) : null;
    }
    return null;
  }
  attach() {
  }
  // eslint-disable-line class-methods-use-this
  detach() {
  }
  // eslint-disable-line class-methods-use-this
  __nestScope(e) {
    return e instanceof Od && (oS(this.__currentScope === null), this.globalScope = e), this.__currentScope = e, e;
  }
  __nestGlobalScope(e) {
    return this.__nestScope(new Od(this, e));
  }
  __nestBlockScope(e) {
    return this.__nestScope(new gS(this, this.__currentScope, e));
  }
  __nestFunctionScope(e, r) {
    return this.__nestScope(new hS(this, this.__currentScope, e, r));
  }
  __nestForScope(e) {
    return this.__nestScope(new mS(this, this.__currentScope, e));
  }
  __nestCatchScope(e) {
    return this.__nestScope(new lS(this, this.__currentScope, e));
  }
  __nestWithScope(e) {
    return this.__nestScope(new uS(this, this.__currentScope, e));
  }
  __nestClassScope(e) {
    return this.__nestScope(new pS(this, this.__currentScope, e));
  }
  __nestSwitchScope(e) {
    return this.__nestScope(new fS(this, this.__currentScope, e));
  }
  __nestModuleScope(e) {
    return this.__nestScope(new cS(this, this.__currentScope, e));
  }
  __nestFunctionExpressionNameScope(e) {
    return this.__nestScope(new dS(this, this.__currentScope, e));
  }
  __isES6() {
    return this.__options.ecmaVersion >= 6;
  }
};
var xS = yS;
var Fs = {};
var fx = {};
(function(t4) {
  (function e(r) {
    var s, n, a, o, l, i;
    function u(v) {
      var C = {}, T, w;
      for (T in v)
        v.hasOwnProperty(T) && (w = v[T], typeof w == "object" && w !== null ? C[T] = u(w) : C[T] = w);
      return C;
    }
    function c(v, C) {
      var T, w, B, I;
      for (w = v.length, B = 0; w; )
        T = w >>> 1, I = B + T, C(v[I]) ? w = T : (B = I + 1, w -= T + 1);
      return B;
    }
    s = {
      AssignmentExpression: "AssignmentExpression",
      AssignmentPattern: "AssignmentPattern",
      ArrayExpression: "ArrayExpression",
      ArrayPattern: "ArrayPattern",
      ArrowFunctionExpression: "ArrowFunctionExpression",
      AwaitExpression: "AwaitExpression",
      // CAUTION: It's deferred to ES7.
      BlockStatement: "BlockStatement",
      BinaryExpression: "BinaryExpression",
      BreakStatement: "BreakStatement",
      CallExpression: "CallExpression",
      CatchClause: "CatchClause",
      ChainExpression: "ChainExpression",
      ClassBody: "ClassBody",
      ClassDeclaration: "ClassDeclaration",
      ClassExpression: "ClassExpression",
      ComprehensionBlock: "ComprehensionBlock",
      // CAUTION: It's deferred to ES7.
      ComprehensionExpression: "ComprehensionExpression",
      // CAUTION: It's deferred to ES7.
      ConditionalExpression: "ConditionalExpression",
      ContinueStatement: "ContinueStatement",
      DebuggerStatement: "DebuggerStatement",
      DirectiveStatement: "DirectiveStatement",
      DoWhileStatement: "DoWhileStatement",
      EmptyStatement: "EmptyStatement",
      ExportAllDeclaration: "ExportAllDeclaration",
      ExportDefaultDeclaration: "ExportDefaultDeclaration",
      ExportNamedDeclaration: "ExportNamedDeclaration",
      ExportSpecifier: "ExportSpecifier",
      ExpressionStatement: "ExpressionStatement",
      ForStatement: "ForStatement",
      ForInStatement: "ForInStatement",
      ForOfStatement: "ForOfStatement",
      FunctionDeclaration: "FunctionDeclaration",
      FunctionExpression: "FunctionExpression",
      GeneratorExpression: "GeneratorExpression",
      // CAUTION: It's deferred to ES7.
      Identifier: "Identifier",
      IfStatement: "IfStatement",
      ImportExpression: "ImportExpression",
      ImportDeclaration: "ImportDeclaration",
      ImportDefaultSpecifier: "ImportDefaultSpecifier",
      ImportNamespaceSpecifier: "ImportNamespaceSpecifier",
      ImportSpecifier: "ImportSpecifier",
      Literal: "Literal",
      LabeledStatement: "LabeledStatement",
      LogicalExpression: "LogicalExpression",
      MemberExpression: "MemberExpression",
      MetaProperty: "MetaProperty",
      MethodDefinition: "MethodDefinition",
      ModuleSpecifier: "ModuleSpecifier",
      NewExpression: "NewExpression",
      ObjectExpression: "ObjectExpression",
      ObjectPattern: "ObjectPattern",
      PrivateIdentifier: "PrivateIdentifier",
      Program: "Program",
      Property: "Property",
      PropertyDefinition: "PropertyDefinition",
      RestElement: "RestElement",
      ReturnStatement: "ReturnStatement",
      SequenceExpression: "SequenceExpression",
      SpreadElement: "SpreadElement",
      Super: "Super",
      SwitchStatement: "SwitchStatement",
      SwitchCase: "SwitchCase",
      TaggedTemplateExpression: "TaggedTemplateExpression",
      TemplateElement: "TemplateElement",
      TemplateLiteral: "TemplateLiteral",
      ThisExpression: "ThisExpression",
      ThrowStatement: "ThrowStatement",
      TryStatement: "TryStatement",
      UnaryExpression: "UnaryExpression",
      UpdateExpression: "UpdateExpression",
      VariableDeclaration: "VariableDeclaration",
      VariableDeclarator: "VariableDeclarator",
      WhileStatement: "WhileStatement",
      WithStatement: "WithStatement",
      YieldExpression: "YieldExpression"
    }, a = {
      AssignmentExpression: ["left", "right"],
      AssignmentPattern: ["left", "right"],
      ArrayExpression: ["elements"],
      ArrayPattern: ["elements"],
      ArrowFunctionExpression: ["params", "body"],
      AwaitExpression: ["argument"],
      // CAUTION: It's deferred to ES7.
      BlockStatement: ["body"],
      BinaryExpression: ["left", "right"],
      BreakStatement: ["label"],
      CallExpression: ["callee", "arguments"],
      CatchClause: ["param", "body"],
      ChainExpression: ["expression"],
      ClassBody: ["body"],
      ClassDeclaration: ["id", "superClass", "body"],
      ClassExpression: ["id", "superClass", "body"],
      ComprehensionBlock: ["left", "right"],
      // CAUTION: It's deferred to ES7.
      ComprehensionExpression: ["blocks", "filter", "body"],
      // CAUTION: It's deferred to ES7.
      ConditionalExpression: ["test", "consequent", "alternate"],
      ContinueStatement: ["label"],
      DebuggerStatement: [],
      DirectiveStatement: [],
      DoWhileStatement: ["body", "test"],
      EmptyStatement: [],
      ExportAllDeclaration: ["source"],
      ExportDefaultDeclaration: ["declaration"],
      ExportNamedDeclaration: ["declaration", "specifiers", "source"],
      ExportSpecifier: ["exported", "local"],
      ExpressionStatement: ["expression"],
      ForStatement: ["init", "test", "update", "body"],
      ForInStatement: ["left", "right", "body"],
      ForOfStatement: ["left", "right", "body"],
      FunctionDeclaration: ["id", "params", "body"],
      FunctionExpression: ["id", "params", "body"],
      GeneratorExpression: ["blocks", "filter", "body"],
      // CAUTION: It's deferred to ES7.
      Identifier: [],
      IfStatement: ["test", "consequent", "alternate"],
      ImportExpression: ["source"],
      ImportDeclaration: ["specifiers", "source"],
      ImportDefaultSpecifier: ["local"],
      ImportNamespaceSpecifier: ["local"],
      ImportSpecifier: ["imported", "local"],
      Literal: [],
      LabeledStatement: ["label", "body"],
      LogicalExpression: ["left", "right"],
      MemberExpression: ["object", "property"],
      MetaProperty: ["meta", "property"],
      MethodDefinition: ["key", "value"],
      ModuleSpecifier: [],
      NewExpression: ["callee", "arguments"],
      ObjectExpression: ["properties"],
      ObjectPattern: ["properties"],
      PrivateIdentifier: [],
      Program: ["body"],
      Property: ["key", "value"],
      PropertyDefinition: ["key", "value"],
      RestElement: ["argument"],
      ReturnStatement: ["argument"],
      SequenceExpression: ["expressions"],
      SpreadElement: ["argument"],
      Super: [],
      SwitchStatement: ["discriminant", "cases"],
      SwitchCase: ["test", "consequent"],
      TaggedTemplateExpression: ["tag", "quasi"],
      TemplateElement: [],
      TemplateLiteral: ["quasis", "expressions"],
      ThisExpression: [],
      ThrowStatement: ["argument"],
      TryStatement: ["block", "handler", "finalizer"],
      UnaryExpression: ["argument"],
      UpdateExpression: ["argument"],
      VariableDeclaration: ["declarations"],
      VariableDeclarator: ["id", "init"],
      WhileStatement: ["test", "body"],
      WithStatement: ["object", "body"],
      YieldExpression: ["argument"]
    }, o = {}, l = {}, i = {}, n = {
      Break: o,
      Skip: l,
      Remove: i
    };
    function f(v, C) {
      this.parent = v, this.key = C;
    }
    f.prototype.replace = function(C) {
      this.parent[this.key] = C;
    }, f.prototype.remove = function() {
      return Array.isArray(this.parent) ? (this.parent.splice(this.key, 1), true) : (this.replace(null), false);
    };
    function h(v, C, T, w) {
      this.node = v, this.path = C, this.wrap = T, this.ref = w;
    }
    function p() {
    }
    p.prototype.path = function() {
      var C, T, w, B, I, _;
      function S(F, N) {
        if (Array.isArray(N))
          for (w = 0, B = N.length; w < B; ++w)
            F.push(N[w]);
        else
          F.push(N);
      }
      if (!this.__current.path)
        return null;
      for (I = [], C = 2, T = this.__leavelist.length; C < T; ++C)
        _ = this.__leavelist[C], S(I, _.path);
      return S(I, this.__current.path), I;
    }, p.prototype.type = function() {
      var v = this.current();
      return v.type || this.__current.wrap;
    }, p.prototype.parents = function() {
      var C, T, w;
      for (w = [], C = 1, T = this.__leavelist.length; C < T; ++C)
        w.push(this.__leavelist[C].node);
      return w;
    }, p.prototype.current = function() {
      return this.__current.node;
    }, p.prototype.__execute = function(C, T) {
      var w, B;
      return B = void 0, w = this.__current, this.__current = T, this.__state = null, C && (B = C.call(this, T.node, this.__leavelist[this.__leavelist.length - 1].node)), this.__current = w, B;
    }, p.prototype.notify = function(C) {
      this.__state = C;
    }, p.prototype.skip = function() {
      this.notify(l);
    }, p.prototype.break = function() {
      this.notify(o);
    }, p.prototype.remove = function() {
      this.notify(i);
    }, p.prototype.__initialize = function(v, C) {
      this.visitor = C, this.root = v, this.__worklist = [], this.__leavelist = [], this.__current = null, this.__state = null, this.__fallback = null, C.fallback === "iteration" ? this.__fallback = Object.keys : typeof C.fallback == "function" && (this.__fallback = C.fallback), this.__keys = a, C.keys && (this.__keys = Object.assign(Object.create(this.__keys), C.keys));
    };
    function m(v) {
      return v == null ? false : typeof v == "object" && typeof v.type == "string";
    }
    function d(v, C) {
      return (v === s.ObjectExpression || v === s.ObjectPattern) && C === "properties";
    }
    function g(v, C) {
      for (var T = v.length - 1; T >= 0; --T)
        if (v[T].node === C)
          return true;
      return false;
    }
    p.prototype.traverse = function(C, T) {
      var w, B, I, _, S, F, N, k, j, O, z, te;
      for (this.__initialize(C, T), te = {}, w = this.__worklist, B = this.__leavelist, w.push(new h(C, null, null, null)), B.push(new h(null, null, null, null)); w.length; ) {
        if (I = w.pop(), I === te) {
          if (I = B.pop(), F = this.__execute(T.leave, I), this.__state === o || F === o)
            return;
          continue;
        }
        if (I.node) {
          if (F = this.__execute(T.enter, I), this.__state === o || F === o)
            return;
          if (w.push(te), B.push(I), this.__state === l || F === l)
            continue;
          if (_ = I.node, S = _.type || I.wrap, O = this.__keys[S], !O)
            if (this.__fallback)
              O = this.__fallback(_);
            else
              throw new Error("Unknown node type " + S + ".");
          for (k = O.length; (k -= 1) >= 0; )
            if (N = O[k], z = _[N], !!z) {
              if (Array.isArray(z)) {
                for (j = z.length; (j -= 1) >= 0; )
                  if (z[j] && !g(B, z[j])) {
                    if (d(S, O[k]))
                      I = new h(z[j], [N, j], "Property", null);
                    else if (m(z[j]))
                      I = new h(z[j], [N, j], null, null);
                    else
                      continue;
                    w.push(I);
                  }
              } else if (m(z)) {
                if (g(B, z))
                  continue;
                w.push(new h(z, N, null, null));
              }
            }
        }
      }
    }, p.prototype.replace = function(C, T) {
      var w, B, I, _, S, F, N, k, j, O, z, te, se;
      function ye(Se) {
        var xe, Ae, _e, H;
        if (Se.ref.remove()) {
          for (Ae = Se.ref.key, H = Se.ref.parent, xe = w.length; xe--; )
            if (_e = w[xe], _e.ref && _e.ref.parent === H) {
              if (_e.ref.key < Ae)
                break;
              --_e.ref.key;
            }
        }
      }
      for (this.__initialize(C, T), z = {}, w = this.__worklist, B = this.__leavelist, te = {
        root: C
      }, F = new h(C, null, null, new f(te, "root")), w.push(F), B.push(F); w.length; ) {
        if (F = w.pop(), F === z) {
          if (F = B.pop(), S = this.__execute(T.leave, F), S !== void 0 && S !== o && S !== l && S !== i && F.ref.replace(S), (this.__state === i || S === i) && ye(F), this.__state === o || S === o)
            return te.root;
          continue;
        }
        if (S = this.__execute(T.enter, F), S !== void 0 && S !== o && S !== l && S !== i && (F.ref.replace(S), F.node = S), (this.__state === i || S === i) && (ye(F), F.node = null), this.__state === o || S === o)
          return te.root;
        if (I = F.node, !!I && (w.push(z), B.push(F), !(this.__state === l || S === l))) {
          if (_ = I.type || F.wrap, j = this.__keys[_], !j)
            if (this.__fallback)
              j = this.__fallback(I);
            else
              throw new Error("Unknown node type " + _ + ".");
          for (N = j.length; (N -= 1) >= 0; )
            if (se = j[N], O = I[se], !!O)
              if (Array.isArray(O)) {
                for (k = O.length; (k -= 1) >= 0; )
                  if (O[k]) {
                    if (d(_, j[N]))
                      F = new h(O[k], [se, k], "Property", new f(O, k));
                    else if (m(O[k]))
                      F = new h(O[k], [se, k], null, new f(O, k));
                    else
                      continue;
                    w.push(F);
                  }
              } else
                m(O) && w.push(new h(O, se, null, new f(I, se)));
        }
      }
      return te.root;
    };
    function y(v, C) {
      var T = new p();
      return T.traverse(v, C);
    }
    function x(v, C) {
      var T = new p();
      return T.replace(v, C);
    }
    function A(v, C) {
      var T;
      return T = c(C, function(B) {
        return B.range[0] > v.range[0];
      }), v.extendedRange = [v.range[0], v.range[1]], T !== C.length && (v.extendedRange[1] = C[T].range[0]), T -= 1, T >= 0 && (v.extendedRange[0] = C[T].range[1]), v;
    }
    function b(v, C, T) {
      var w = [], B, I, _, S;
      if (!v.range)
        throw new Error("attachComments needs range information");
      if (!T.length) {
        if (C.length) {
          for (_ = 0, I = C.length; _ < I; _ += 1)
            B = u(C[_]), B.extendedRange = [0, v.range[0]], w.push(B);
          v.leadingComments = w;
        }
        return v;
      }
      for (_ = 0, I = C.length; _ < I; _ += 1)
        w.push(A(u(C[_]), T));
      return S = 0, y(v, {
        enter: function(F) {
          for (var N; S < w.length && (N = w[S], !(N.extendedRange[1] > F.range[0])); )
            N.extendedRange[1] === F.range[0] ? (F.leadingComments || (F.leadingComments = []), F.leadingComments.push(N), w.splice(S, 1)) : S += 1;
          if (S === w.length)
            return n.Break;
          if (w[S].extendedRange[0] > F.range[1])
            return n.Skip;
        }
      }), S = 0, y(v, {
        leave: function(F) {
          for (var N; S < w.length && (N = w[S], !(F.range[1] < N.extendedRange[0])); )
            F.range[1] === N.extendedRange[0] ? (F.trailingComments || (F.trailingComments = []), F.trailingComments.push(N), w.splice(S, 1)) : S += 1;
          if (S === w.length)
            return n.Break;
          if (w[S].extendedRange[0] > F.range[1])
            return n.Skip;
        }
      }), v;
    }
    return r.Syntax = s, r.traverse = y, r.replace = x, r.attachComments = b, r.VisitorKeys = a, r.VisitorOption = n, r.Controller = p, r.cloneEnvironment = function() {
      return e({});
    }, r;
  })(t4);
})(fx);
var vS = "esrecurse";
var ES = "ECMAScript AST recursive visitor";
var bS = "https://github.com/estools/esrecurse";
var CS = "esrecurse.js";
var SS = "4.3.0";
var AS = {
  node: ">=4.0"
};
var DS = [
  {
    name: "Yusuke Suzuki",
    email: "utatane.tea@gmail.com",
    web: "https://github.com/Constellation"
  }
];
var wS = {
  type: "git",
  url: "https://github.com/estools/esrecurse.git"
};
var kS = {
  estraverse: "^5.2.0"
};
var TS = {
  "babel-cli": "^6.24.1",
  "babel-eslint": "^7.2.3",
  "babel-preset-es2015": "^6.24.1",
  "babel-register": "^6.24.1",
  chai: "^4.0.2",
  esprima: "^4.0.0",
  gulp: "^3.9.0",
  "gulp-bump": "^2.7.0",
  "gulp-eslint": "^4.0.0",
  "gulp-filter": "^5.0.0",
  "gulp-git": "^2.4.1",
  "gulp-mocha": "^4.3.1",
  "gulp-tag-version": "^1.2.1",
  jsdoc: "^3.3.0-alpha10",
  minimist: "^1.1.0"
};
var FS = "BSD-2-Clause";
var PS = {
  test: "gulp travis",
  "unit-test": "gulp test",
  lint: "gulp lint"
};
var IS = {
  presets: [
    "es2015"
  ]
};
var _S = {
  name: vS,
  description: ES,
  homepage: bS,
  main: CS,
  version: SS,
  engines: AS,
  maintainers: DS,
  repository: wS,
  dependencies: kS,
  devDependencies: TS,
  license: FS,
  scripts: PS,
  babel: IS
};
(function() {
  var t4 = fx;
  function e(n) {
    return n == null ? false : typeof n == "object" && typeof n.type == "string";
  }
  function r(n, a) {
    return (n === t4.Syntax.ObjectExpression || n === t4.Syntax.ObjectPattern) && a === "properties";
  }
  function s(n, a) {
    a = a || {}, this.__visitor = n || this, this.__childVisitorKeys = a.childVisitorKeys ? Object.assign({}, t4.VisitorKeys, a.childVisitorKeys) : t4.VisitorKeys, a.fallback === "iteration" ? this.__fallback = Object.keys : typeof a.fallback == "function" && (this.__fallback = a.fallback);
  }
  s.prototype.visitChildren = function(n) {
    var a, o, l, i, u, c, f;
    if (n != null) {
      if (a = n.type || t4.Syntax.Property, o = this.__childVisitorKeys[a], !o)
        if (this.__fallback)
          o = this.__fallback(n);
        else
          throw new Error("Unknown node type " + a + ".");
      for (l = 0, i = o.length; l < i; ++l)
        if (f = n[o[l]], f)
          if (Array.isArray(f))
            for (u = 0, c = f.length; u < c; ++u)
              f[u] && (e(f[u]) || r(a, o[l])) && this.visit(f[u]);
          else
            e(f) && this.visit(f);
    }
  }, s.prototype.visit = function(n) {
    var a;
    if (n != null) {
      if (a = n.type || t4.Syntax.Property, this.__visitor[a]) {
        this.__visitor[a].call(this, n);
        return;
      }
      this.visitChildren(n);
    }
  }, Fs.version = _S.version, Fs.Visitor = s, Fs.visit = function(n, a, o) {
    var l = new s(a, o);
    l.visit(n);
  };
})();
var Rn = di.Syntax;
var BS = Fs;
function OS(t4) {
  return t4[t4.length - 1] || null;
}
var LS = class extends BS.Visitor {
  static isPattern(e) {
    const r = e.type;
    return r === Rn.Identifier || r === Rn.ObjectPattern || r === Rn.ArrayPattern || r === Rn.SpreadElement || r === Rn.RestElement || r === Rn.AssignmentPattern;
  }
  constructor(e, r, s) {
    super(null, e), this.rootPattern = r, this.callback = s, this.assignments = [], this.rightHandNodes = [], this.restElements = [];
  }
  Identifier(e) {
    const r = OS(this.restElements);
    this.callback(e, {
      topLevel: e === this.rootPattern,
      rest: r != null && r.argument === e,
      assignments: this.assignments
    });
  }
  Property(e) {
    e.computed && this.rightHandNodes.push(e.key), this.visit(e.value);
  }
  ArrayPattern(e) {
    for (let r = 0, s = e.elements.length; r < s; ++r) {
      const n = e.elements[r];
      this.visit(n);
    }
  }
  AssignmentPattern(e) {
    this.assignments.push(e), this.visit(e.left), this.rightHandNodes.push(e.right), this.assignments.pop();
  }
  RestElement(e) {
    this.restElements.push(e), this.visit(e.argument), this.restElements.pop();
  }
  MemberExpression(e) {
    e.computed && this.rightHandNodes.push(e.property), this.rightHandNodes.push(e.object);
  }
  //
  // ForInStatement.left and AssignmentExpression.left are LeftHandSideExpression.
  // By spec, LeftHandSideExpression is Pattern or MemberExpression.
  //   (see also: https://github.com/estree/estree/pull/20#issuecomment-74584758)
  // But espree 2.0 parses to ArrayExpression, ObjectExpression, etc...
  //
  SpreadElement(e) {
    this.visit(e.argument);
  }
  ArrayExpression(e) {
    e.elements.forEach(this.visit, this);
  }
  AssignmentExpression(e) {
    this.assignments.push(e), this.visit(e.left), this.rightHandNodes.push(e.right), this.assignments.pop();
  }
  CallExpression(e) {
    e.arguments.forEach((r) => {
      this.rightHandNodes.push(r);
    }), this.visit(e.callee);
  }
};
var RS = LS;
var _r = di.Syntax;
var hx = Fs;
var dn = au;
var Un = gi;
var il = RS;
var mx = ux;
var NS = os;
var Ld = mx.ParameterDefinition;
var qn = mx.Definition;
function jS(t4, e, r, s) {
  const n = new il(t4, e, s);
  n.visit(e), r != null && n.rightHandNodes.forEach(r.visit, r);
}
var MS = class extends hx.Visitor {
  constructor(e, r) {
    super(null, r.options), this.declaration = e, this.referencer = r;
  }
  visitImport(e, r) {
    this.referencer.visitPattern(e, (s) => {
      this.referencer.currentScope().__define(
        s,
        new qn(
          Un.ImportBinding,
          s,
          r,
          this.declaration,
          null,
          null
        )
      );
    });
  }
  ImportNamespaceSpecifier(e) {
    const r = e.local || e.id;
    r && this.visitImport(r, e);
  }
  ImportDefaultSpecifier(e) {
    const r = e.local || e.id;
    this.visitImport(r, e);
  }
  ImportSpecifier(e) {
    const r = e.local || e.id;
    e.name ? this.visitImport(e.name, e) : this.visitImport(r, e);
  }
};
var $S = class extends hx.Visitor {
  constructor(e, r) {
    super(null, e), this.options = e, this.scopeManager = r, this.parent = null, this.isInnerMethodDefinition = false;
  }
  currentScope() {
    return this.scopeManager.__currentScope;
  }
  close(e) {
    for (; this.currentScope() && e === this.currentScope().block; )
      this.scopeManager.__currentScope = this.currentScope().__close(this.scopeManager);
  }
  pushInnerMethodDefinition(e) {
    const r = this.isInnerMethodDefinition;
    return this.isInnerMethodDefinition = e, r;
  }
  popInnerMethodDefinition(e) {
    this.isInnerMethodDefinition = e;
  }
  referencingDefaultValue(e, r, s, n) {
    const a = this.currentScope();
    r.forEach((o) => {
      a.__referencing(
        e,
        dn.WRITE,
        o.right,
        s,
        e !== o.left,
        n
      );
    });
  }
  visitPattern(e, r, s) {
    let n = r, a = s;
    typeof r == "function" && (a = r, n = { processRightHandNodes: false }), jS(
      this.options,
      e,
      n.processRightHandNodes ? this : null,
      a
    );
  }
  visitFunction(e) {
    let r, s;
    e.type === _r.FunctionDeclaration && this.currentScope().__define(
      e.id,
      new qn(
        Un.FunctionName,
        e.id,
        e,
        null,
        null,
        null
      )
    ), e.type === _r.FunctionExpression && e.id && this.scopeManager.__nestFunctionExpressionNameScope(e), this.scopeManager.__nestFunctionScope(e, this.isInnerMethodDefinition);
    const n = this;
    function a(o, l) {
      n.currentScope().__define(
        o,
        new Ld(
          o,
          e,
          r,
          l.rest
        )
      ), n.referencingDefaultValue(o, l.assignments, null, true);
    }
    for (r = 0, s = e.params.length; r < s; ++r)
      this.visitPattern(e.params[r], { processRightHandNodes: true }, a);
    e.rest && this.visitPattern({
      type: "RestElement",
      argument: e.rest
    }, (o) => {
      this.currentScope().__define(
        o,
        new Ld(
          o,
          e,
          e.params.length,
          true
        )
      );
    }), e.body && (e.body.type === _r.BlockStatement ? this.visitChildren(e.body) : this.visit(e.body)), this.close(e);
  }
  visitClass(e) {
    e.type === _r.ClassDeclaration && this.currentScope().__define(
      e.id,
      new qn(
        Un.ClassName,
        e.id,
        e,
        null,
        null,
        null
      )
    ), this.visit(e.superClass), this.scopeManager.__nestClassScope(e), e.id && this.currentScope().__define(
      e.id,
      new qn(
        Un.ClassName,
        e.id,
        e
      )
    ), this.visit(e.body), this.close(e);
  }
  visitProperty(e) {
    let r;
    e.computed && this.visit(e.key);
    const s = e.type === _r.MethodDefinition;
    s && (r = this.pushInnerMethodDefinition(true)), this.visit(e.value), s && this.popInnerMethodDefinition(r);
  }
  visitForIn(e) {
    e.left.type === _r.VariableDeclaration && e.left.kind !== "var" && this.scopeManager.__nestForScope(e), e.left.type === _r.VariableDeclaration ? (this.visit(e.left), this.visitPattern(e.left.declarations[0].id, (r) => {
      this.currentScope().__referencing(r, dn.WRITE, e.right, null, true, true);
    })) : this.visitPattern(e.left, { processRightHandNodes: true }, (r, s) => {
      let n = null;
      this.currentScope().isStrict || (n = {
        pattern: r,
        node: e
      }), this.referencingDefaultValue(r, s.assignments, n, false), this.currentScope().__referencing(r, dn.WRITE, e.right, n, true, false);
    }), this.visit(e.right), this.visit(e.body), this.close(e);
  }
  visitVariableDeclaration(e, r, s, n) {
    const a = s.declarations[n], o = a.init;
    this.visitPattern(a.id, { processRightHandNodes: true }, (l, i) => {
      e.__define(
        l,
        new qn(
          r,
          l,
          a,
          s,
          n,
          s.kind
        )
      ), this.referencingDefaultValue(l, i.assignments, null, true), o && this.currentScope().__referencing(l, dn.WRITE, o, null, !i.topLevel, true);
    });
  }
  AssignmentExpression(e) {
    il.isPattern(e.left) ? e.operator === "=" ? this.visitPattern(e.left, { processRightHandNodes: true }, (r, s) => {
      let n = null;
      this.currentScope().isStrict || (n = {
        pattern: r,
        node: e
      }), this.referencingDefaultValue(r, s.assignments, n, false), this.currentScope().__referencing(r, dn.WRITE, e.right, n, !s.topLevel, false);
    }) : this.currentScope().__referencing(e.left, dn.RW, e.right) : this.visit(e.left), this.visit(e.right);
  }
  CatchClause(e) {
    this.scopeManager.__nestCatchScope(e), this.visitPattern(e.param, { processRightHandNodes: true }, (r, s) => {
      this.currentScope().__define(
        r,
        new qn(
          Un.CatchClause,
          e.param,
          e,
          null,
          null,
          null
        )
      ), this.referencingDefaultValue(r, s.assignments, null, true);
    }), this.visit(e.body), this.close(e);
  }
  Program(e) {
    this.scopeManager.__nestGlobalScope(e), this.scopeManager.__isNodejsScope() && (this.currentScope().isStrict = false, this.scopeManager.__nestFunctionScope(e, false)), this.scopeManager.__isES6() && this.scopeManager.isModule() && this.scopeManager.__nestModuleScope(e), this.scopeManager.isStrictModeSupported() && this.scopeManager.isImpliedStrict() && (this.currentScope().isStrict = true), this.visitChildren(e), this.close(e);
  }
  Identifier(e) {
    this.currentScope().__referencing(e);
  }
  UpdateExpression(e) {
    il.isPattern(e.argument) ? this.currentScope().__referencing(e.argument, dn.RW, null) : this.visitChildren(e);
  }
  MemberExpression(e) {
    this.visit(e.object), e.computed && this.visit(e.property);
  }
  Property(e) {
    this.visitProperty(e);
  }
  MethodDefinition(e) {
    this.visitProperty(e);
  }
  BreakStatement() {
  }
  // eslint-disable-line class-methods-use-this
  ContinueStatement() {
  }
  // eslint-disable-line class-methods-use-this
  LabeledStatement(e) {
    this.visit(e.body);
  }
  ForStatement(e) {
    e.init && e.init.type === _r.VariableDeclaration && e.init.kind !== "var" && this.scopeManager.__nestForScope(e), this.visitChildren(e), this.close(e);
  }
  ClassExpression(e) {
    this.visitClass(e);
  }
  ClassDeclaration(e) {
    this.visitClass(e);
  }
  CallExpression(e) {
    !this.scopeManager.__ignoreEval() && e.callee.type === _r.Identifier && e.callee.name === "eval" && this.currentScope().variableScope.__detectEval(), this.visitChildren(e);
  }
  BlockStatement(e) {
    this.scopeManager.__isES6() && this.scopeManager.__nestBlockScope(e), this.visitChildren(e), this.close(e);
  }
  ThisExpression() {
    this.currentScope().variableScope.__detectThis();
  }
  WithStatement(e) {
    this.visit(e.object), this.scopeManager.__nestWithScope(e), this.visit(e.body), this.close(e);
  }
  VariableDeclaration(e) {
    const r = e.kind === "var" ? this.currentScope().variableScope : this.currentScope();
    for (let s = 0, n = e.declarations.length; s < n; ++s) {
      const a = e.declarations[s];
      this.visitVariableDeclaration(r, Un.Variable, e, s), a.init && this.visit(a.init);
    }
  }
  // sec 13.11.8
  SwitchStatement(e) {
    this.visit(e.discriminant), this.scopeManager.__isES6() && this.scopeManager.__nestSwitchScope(e);
    for (let r = 0, s = e.cases.length; r < s; ++r)
      this.visit(e.cases[r]);
    this.close(e);
  }
  FunctionDeclaration(e) {
    this.visitFunction(e);
  }
  FunctionExpression(e) {
    this.visitFunction(e);
  }
  ForOfStatement(e) {
    this.visitForIn(e);
  }
  ForInStatement(e) {
    this.visitForIn(e);
  }
  ArrowFunctionExpression(e) {
    this.visitFunction(e);
  }
  ImportDeclaration(e) {
    NS(this.scopeManager.__isES6() && this.scopeManager.isModule(), "ImportDeclaration should appear when the mode is ES6 and in the module context."), new MS(e, this).visit(e);
  }
  visitExportDeclaration(e) {
    if (!e.source) {
      if (e.declaration) {
        this.visit(e.declaration);
        return;
      }
      this.visitChildren(e);
    }
  }
  // TODO: ExportDeclaration doesn't exist. for bc?
  ExportDeclaration(e) {
    this.visitExportDeclaration(e);
  }
  ExportAllDeclaration(e) {
    this.visitExportDeclaration(e);
  }
  ExportDefaultDeclaration(e) {
    this.visitExportDeclaration(e);
  }
  ExportNamedDeclaration(e) {
    this.visitExportDeclaration(e);
  }
  ExportSpecifier(e) {
    const r = e.id || e.local;
    this.visit(r);
  }
  MetaProperty() {
  }
};
var VS = $S;
var US = "eslint-scope";
var qS = "ECMAScript scope analyzer for ESLint";
var WS = "http://github.com/eslint/eslint-scope";
var zS = "lib/index.js";
var GS = "5.1.1";
var HS = {
  node: ">=8.0.0"
};
var KS = "eslint/eslint-scope";
var JS = {
  url: "https://github.com/eslint/eslint-scope/issues"
};
var XS = "BSD-2-Clause";
var QS = {
  test: "node Makefile.js test",
  lint: "node Makefile.js lint",
  "generate-release": "eslint-generate-release",
  "generate-alpharelease": "eslint-generate-prerelease alpha",
  "generate-betarelease": "eslint-generate-prerelease beta",
  "generate-rcrelease": "eslint-generate-prerelease rc",
  "publish-release": "eslint-publish-release"
};
var YS = [
  "LICENSE",
  "README.md",
  "lib"
];
var ZS = {
  esrecurse: "^4.3.0",
  estraverse: "^4.1.1"
};
var eA = {
  "@typescript-eslint/parser": "^1.11.0",
  chai: "^4.2.0",
  eslint: "^6.0.1",
  "eslint-config-eslint": "^5.0.1",
  "eslint-plugin-node": "^9.1.0",
  "eslint-release": "^1.0.0",
  "eslint-visitor-keys": "^1.2.0",
  espree: "^7.1.0",
  istanbul: "^0.4.5",
  mocha: "^6.1.4",
  "npm-license": "^0.3.3",
  shelljs: "^0.8.3",
  typescript: "^3.5.2"
};
var tA = {
  name: US,
  description: qS,
  homepage: WS,
  main: zS,
  version: GS,
  engines: HS,
  repository: KS,
  bugs: JS,
  license: XS,
  scripts: QS,
  files: YS,
  dependencies: ZS,
  devDependencies: eA
};
var rA = os;
var dx = xS;
var nA = VS;
var sA = au;
var aA = gi;
var iA = px.Scope;
var oA = tA.version;
function lA() {
  return {
    optimistic: false,
    directive: false,
    nodejsScope: false,
    impliedStrict: false,
    sourceType: "script",
    // one of ['script', 'module']
    ecmaVersion: 5,
    childVisitorKeys: null,
    fallback: "iteration"
  };
}
function ol(t4, e) {
  function r(s) {
    return typeof s == "object" && s instanceof Object && !(s instanceof Array) && !(s instanceof RegExp);
  }
  for (const s in e)
    if (Object.prototype.hasOwnProperty.call(e, s)) {
      const n = e[s];
      r(n) ? r(t4[s]) ? ol(t4[s], n) : t4[s] = ol({}, n) : t4[s] = n;
    }
  return t4;
}
function uA(t4, e) {
  const r = ol(lA(), e), s = new dx(r);
  return new nA(r, s).visit(t4), rA(s.__currentScope === null, "currentScope should be null."), s;
}
var cA = {
  /** @name module:escope.version */
  version: oA,
  /** @name module:escope.Reference */
  Reference: sA,
  /** @name module:escope.Variable */
  Variable: aA,
  /** @name module:escope.Scope */
  Scope: iA,
  /** @name module:escope.ScopeManager */
  ScopeManager: dx,
  analyze: uA
};
var pA = [
  "left",
  "right"
];
var fA = [
  "left",
  "right"
];
var hA = [
  "elements"
];
var mA = [
  "elements"
];
var dA = [
  "params",
  "body"
];
var gA = [
  "argument"
];
var yA = [
  "body"
];
var xA = [
  "left",
  "right"
];
var vA = [
  "label"
];
var EA = [
  "callee",
  "arguments"
];
var bA = [
  "param",
  "body"
];
var CA = [
  "expression"
];
var SA = [
  "body"
];
var AA = [
  "id",
  "superClass",
  "body"
];
var DA = [
  "id",
  "superClass",
  "body"
];
var wA = [
  "test",
  "consequent",
  "alternate"
];
var kA = [
  "label"
];
var TA = [];
var FA = [
  "body",
  "test"
];
var PA = [];
var IA = [
  "exported",
  "source"
];
var _A = [
  "declaration"
];
var BA = [
  "declaration",
  "specifiers",
  "source"
];
var OA = [
  "exported",
  "local"
];
var LA = [
  "expression"
];
var RA = [
  "argument"
];
var NA = [
  "argument"
];
var jA = [
  "init",
  "test",
  "update",
  "body"
];
var MA = [
  "left",
  "right",
  "body"
];
var $A = [
  "left",
  "right",
  "body"
];
var VA = [
  "id",
  "params",
  "body"
];
var UA = [
  "id",
  "params",
  "body"
];
var qA = [];
var WA = [
  "test",
  "consequent",
  "alternate"
];
var zA = [
  "specifiers",
  "source"
];
var GA = [
  "local"
];
var HA = [
  "source"
];
var KA = [
  "local"
];
var JA = [
  "imported",
  "local"
];
var XA = [
  "name",
  "value"
];
var QA = [
  "name"
];
var YA = [
  "openingElement",
  "children",
  "closingElement"
];
var ZA = [];
var eD = [
  "expression"
];
var tD = [];
var rD = [
  "object",
  "property"
];
var nD = [
  "namespace",
  "name"
];
var sD = [
  "name",
  "attributes"
];
var aD = [
  "argument"
];
var iD = [];
var oD = [
  "openingFragment",
  "children",
  "closingFragment"
];
var lD = [];
var uD = [
  "label",
  "body"
];
var cD = [
  "left",
  "right"
];
var pD = [
  "object",
  "property"
];
var fD = [
  "meta",
  "property"
];
var hD = [
  "key",
  "value"
];
var mD = [
  "callee",
  "arguments"
];
var dD = [
  "properties"
];
var gD = [
  "properties"
];
var yD = [];
var xD = [
  "body"
];
var vD = [
  "key",
  "value"
];
var ED = [
  "key",
  "value"
];
var bD = [
  "argument"
];
var CD = [
  "argument"
];
var SD = [
  "expressions"
];
var AD = [
  "argument"
];
var DD = [];
var wD = [
  "discriminant",
  "cases"
];
var kD = [
  "test",
  "consequent"
];
var TD = [
  "tag",
  "quasi"
];
var FD = [];
var PD = [
  "quasis",
  "expressions"
];
var ID = [];
var _D = [
  "argument"
];
var BD = [
  "block",
  "handler",
  "finalizer"
];
var OD = [
  "argument"
];
var LD = [
  "argument"
];
var RD = [
  "declarations"
];
var ND = [
  "id",
  "init"
];
var jD = [
  "test",
  "body"
];
var MD = [
  "object",
  "body"
];
var $D = [
  "argument"
];
var VD = {
  AssignmentExpression: pA,
  AssignmentPattern: fA,
  ArrayExpression: hA,
  ArrayPattern: mA,
  ArrowFunctionExpression: dA,
  AwaitExpression: gA,
  BlockStatement: yA,
  BinaryExpression: xA,
  BreakStatement: vA,
  CallExpression: EA,
  CatchClause: bA,
  ChainExpression: CA,
  ClassBody: SA,
  ClassDeclaration: AA,
  ClassExpression: DA,
  ConditionalExpression: wA,
  ContinueStatement: kA,
  DebuggerStatement: TA,
  DoWhileStatement: FA,
  EmptyStatement: PA,
  ExportAllDeclaration: IA,
  ExportDefaultDeclaration: _A,
  ExportNamedDeclaration: BA,
  ExportSpecifier: OA,
  ExpressionStatement: LA,
  ExperimentalRestProperty: RA,
  ExperimentalSpreadProperty: NA,
  ForStatement: jA,
  ForInStatement: MA,
  ForOfStatement: $A,
  FunctionDeclaration: VA,
  FunctionExpression: UA,
  Identifier: qA,
  IfStatement: WA,
  ImportDeclaration: zA,
  ImportDefaultSpecifier: GA,
  ImportExpression: HA,
  ImportNamespaceSpecifier: KA,
  ImportSpecifier: JA,
  JSXAttribute: XA,
  JSXClosingElement: QA,
  JSXElement: YA,
  JSXEmptyExpression: ZA,
  JSXExpressionContainer: eD,
  JSXIdentifier: tD,
  JSXMemberExpression: rD,
  JSXNamespacedName: nD,
  JSXOpeningElement: sD,
  JSXSpreadAttribute: aD,
  JSXText: iD,
  JSXFragment: oD,
  Literal: lD,
  LabeledStatement: uD,
  LogicalExpression: cD,
  MemberExpression: pD,
  MetaProperty: fD,
  MethodDefinition: hD,
  NewExpression: mD,
  ObjectExpression: dD,
  ObjectPattern: gD,
  PrivateIdentifier: yD,
  Program: xD,
  Property: vD,
  PropertyDefinition: ED,
  RestElement: bD,
  ReturnStatement: CD,
  SequenceExpression: SD,
  SpreadElement: AD,
  Super: DD,
  SwitchStatement: wD,
  SwitchCase: kD,
  TaggedTemplateExpression: TD,
  TemplateElement: FD,
  TemplateLiteral: PD,
  ThisExpression: ID,
  ThrowStatement: _D,
  TryStatement: BD,
  UnaryExpression: OD,
  UpdateExpression: LD,
  VariableDeclaration: RD,
  VariableDeclarator: ND,
  WhileStatement: jD,
  WithStatement: MD,
  YieldExpression: $D
};
var Ns = VD;
var UD = Object.freeze(Object.keys(Ns));
for (const t4 of UD)
  Object.freeze(Ns[t4]);
Object.freeze(Ns);
var qD = /* @__PURE__ */ new Set([
  "parent",
  "leadingComments",
  "trailingComments"
]);
function WD(t4) {
  return !qD.has(t4) && t4[0] !== "_";
}
var gx = Object.freeze({
  /**
   * Visitor keys.
   * @type {{ [type: string]: string[] | undefined }}
   */
  KEYS: Ns,
  /**
   * Get visitor keys of a given node.
   * @param {Object} node The AST node to get keys.
   * @returns {string[]} Visitor keys of the node.
   */
  getKeys(t4) {
    return Object.keys(t4).filter(WD);
  },
  // Disable valid-jsdoc rule because it reports syntax error on the type of @returns.
  // eslint-disable-next-line valid-jsdoc
  /**
   * Make the union set with `KEYS` and given keys.
   * @param {Object} additionalKeys The additional keys.
   * @returns {{ [type: string]: string[] | undefined }} The union set.
   */
  unionWith(t4) {
    const e = Object.assign({}, Ns);
    for (const r of Object.keys(t4))
      if (e.hasOwnProperty(r)) {
        const s = new Set(t4[r]);
        for (const n of e[r])
          s.add(n);
        e[r] = Object.freeze(Array.from(s));
      } else
        e[r] = Object.freeze(Array.from(t4[r]));
    return Object.freeze(e);
  }
});
var Wr = {};
var Qi = {
  3: "abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile",
  5: "class enum extends super const export import",
  6: "enum",
  strict: "implements interface let package private protected public static yield",
  strictBind: "eval arguments"
};
var Yi = "break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this";
var zD = {
  5: Yi,
  "5module": Yi + " export import",
  6: Yi + " const class extends export import super"
};
var GD = /^in(stanceof)?$/;
var iu = "ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙՠ-ֈא-תׯ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࡠ-ࡪࢠ-ࢴࢶ-ࣇऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱৼਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡૹଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘ-ౚౠౡಀಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഄ-ഌഎ-ഐഒ-ഺഽൎൔ-ൖൟ-ൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄຆ-ຊຌ-ຣລວ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏽᏸ-ᏽᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡸᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᲀ-ᲈᲐ-ᲺᲽ-Ჿᳩ-ᳬᳮ-ᳳᳵᳶᳺᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕ℘-ℝℤΩℨK-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々-〇〡-〩〱-〵〸-〼ぁ-ゖ゛-ゟァ-ヺー-ヿㄅ-ㄯㄱ-ㆎㆠ-ㆿㇰ-ㇿ㐀-䶿一-鿼ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞿꟂ-ꟊꟵ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꣽꣾꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭩꭰ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ";
var yx = "‌‍·̀-ͯ·҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-٩ٰۖ-ۜ۟-۪ۤۧۨ-ۭ۰-۹ܑܰ-݊ަ-ް߀-߉߫-߽߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛࣓-ࣣ࣡-ःऺ-़ा-ॏ॑-ॗॢॣ०-९ঁ-ঃ়া-ৄেৈো-্ৗৢৣ০-৯৾ਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣ૦-૯ૺ-૿ଁ-ଃ଼ା-ୄେୈୋ-୍୕-ୗୢୣ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఀ-ఄా-ౄె-ైొ-్ౕౖౢౣ౦-౯ಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣ೦-೯ഀ-ഃ഻഼ാ-ൄെ-ൈൊ-്ൗൢൣ൦-൯ඁ-ඃ්ා-ුූෘ-ෟ෦-෯ෲෳัิ-ฺ็-๎๐-๙ັິ-ຼ່-ໍ໐-໙༘༙༠-༩༹༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှ၀-၉ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟፩-፱ᜒ-᜔ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝០-៩᠋-᠍᠐-᠙ᢩᤠ-ᤫᤰ-᤻᥆-᥏᧐-᧚ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼-᪉᪐-᪙᪰-᪽ᪿᫀᬀ-ᬄ᬴-᭄᭐-᭙᭫-᭳ᮀ-ᮂᮡ-ᮭ᮰-᮹᯦-᯳ᰤ-᰷᱀-᱉᱐-᱙᳐-᳔᳒-᳨᳭᳴᳷-᳹᷀-᷹᷻-᷿‿⁀⁔⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯꘠-꘩꙯ꙴ-꙽ꚞꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧ꠬ꢀꢁꢴ-ꣅ꣐-꣙꣠-꣱ꣿ-꤉ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀꧐-꧙ꧥ꧰-꧹ꨩ-ꨶꩃꩌꩍ꩐-꩙ꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭꯰-꯹ﬞ︀-️︠-︯︳︴﹍-﹏０-９＿";
var HD = new RegExp("[" + iu + "]");
var KD = new RegExp("[" + iu + yx + "]");
iu = yx = null;
var xx = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 107, 20, 28, 22, 13, 52, 76, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 230, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 35, 56, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 190, 0, 80, 921, 103, 110, 18, 195, 2749, 1070, 4050, 582, 8634, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8952, 286, 50, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 2357, 44, 11, 6, 17, 0, 370, 43, 1301, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42717, 35, 4148, 12, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938];
var JD = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 154, 10, 176, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 135, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 419, 13, 1495, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];
function ll(t4, e) {
  for (var r = 65536, s = 0; s < e.length; s += 2) {
    if (r += e[s], r > t4)
      return false;
    if (r += e[s + 1], r >= t4)
      return true;
  }
}
function Ur(t4, e) {
  return t4 < 65 ? t4 === 36 : t4 < 91 ? true : t4 < 97 ? t4 === 95 : t4 < 123 ? true : t4 <= 65535 ? t4 >= 170 && HD.test(String.fromCharCode(t4)) : e === false ? false : ll(t4, xx);
}
function Tn(t4, e) {
  return t4 < 48 ? t4 === 36 : t4 < 58 ? true : t4 < 65 ? false : t4 < 91 ? true : t4 < 97 ? t4 === 95 : t4 < 123 ? true : t4 <= 65535 ? t4 >= 170 && KD.test(String.fromCharCode(t4)) : e === false ? false : ll(t4, xx) || ll(t4, JD);
}
var Xe = function(e, r) {
  r === void 0 && (r = {}), this.label = e, this.keyword = r.keyword, this.beforeExpr = !!r.beforeExpr, this.startsExpr = !!r.startsExpr, this.isLoop = !!r.isLoop, this.isAssign = !!r.isAssign, this.prefix = !!r.prefix, this.postfix = !!r.postfix, this.binop = r.binop || null, this.updateContext = null;
};
function ir(t4, e) {
  return new Xe(t4, { beforeExpr: true, binop: e });
}
var or = { beforeExpr: true };
var Ht = { startsExpr: true };
var yi = {};
function Ke(t4, e) {
  return e === void 0 && (e = {}), e.keyword = t4, yi[t4] = new Xe(t4, e);
}
var $ = {
  num: new Xe("num", Ht),
  regexp: new Xe("regexp", Ht),
  string: new Xe("string", Ht),
  name: new Xe("name", Ht),
  eof: new Xe("eof"),
  // Punctuation token types.
  bracketL: new Xe("[", { beforeExpr: true, startsExpr: true }),
  bracketR: new Xe("]"),
  braceL: new Xe("{", { beforeExpr: true, startsExpr: true }),
  braceR: new Xe("}"),
  parenL: new Xe("(", { beforeExpr: true, startsExpr: true }),
  parenR: new Xe(")"),
  comma: new Xe(",", or),
  semi: new Xe(";", or),
  colon: new Xe(":", or),
  dot: new Xe("."),
  question: new Xe("?", or),
  questionDot: new Xe("?."),
  arrow: new Xe("=>", or),
  template: new Xe("template"),
  invalidTemplate: new Xe("invalidTemplate"),
  ellipsis: new Xe("...", or),
  backQuote: new Xe("`", Ht),
  dollarBraceL: new Xe("${", { beforeExpr: true, startsExpr: true }),
  // Operators. These carry several kinds of properties to help the
  // parser use them properly (the presence of these properties is
  // what categorizes them as operators).
  //
  // `binop`, when present, specifies that this operator is a binary
  // operator, and will refer to its precedence.
  //
  // `prefix` and `postfix` mark the operator as a prefix or postfix
  // unary operator.
  //
  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as
  // binary operators with a very low precedence, that should result
  // in AssignmentExpression nodes.
  eq: new Xe("=", { beforeExpr: true, isAssign: true }),
  assign: new Xe("_=", { beforeExpr: true, isAssign: true }),
  incDec: new Xe("++/--", { prefix: true, postfix: true, startsExpr: true }),
  prefix: new Xe("!/~", { beforeExpr: true, prefix: true, startsExpr: true }),
  logicalOR: ir("||", 1),
  logicalAND: ir("&&", 2),
  bitwiseOR: ir("|", 3),
  bitwiseXOR: ir("^", 4),
  bitwiseAND: ir("&", 5),
  equality: ir("==/!=/===/!==", 6),
  relational: ir("</>/<=/>=", 7),
  bitShift: ir("<</>>/>>>", 8),
  plusMin: new Xe("+/-", { beforeExpr: true, binop: 9, prefix: true, startsExpr: true }),
  modulo: ir("%", 10),
  star: ir("*", 10),
  slash: ir("/", 10),
  starstar: new Xe("**", { beforeExpr: true }),
  coalesce: ir("??", 1),
  // Keyword token types.
  _break: Ke("break"),
  _case: Ke("case", or),
  _catch: Ke("catch"),
  _continue: Ke("continue"),
  _debugger: Ke("debugger"),
  _default: Ke("default", or),
  _do: Ke("do", { isLoop: true, beforeExpr: true }),
  _else: Ke("else", or),
  _finally: Ke("finally"),
  _for: Ke("for", { isLoop: true }),
  _function: Ke("function", Ht),
  _if: Ke("if"),
  _return: Ke("return", or),
  _switch: Ke("switch"),
  _throw: Ke("throw", or),
  _try: Ke("try"),
  _var: Ke("var"),
  _const: Ke("const"),
  _while: Ke("while", { isLoop: true }),
  _with: Ke("with"),
  _new: Ke("new", { beforeExpr: true, startsExpr: true }),
  _this: Ke("this", Ht),
  _super: Ke("super", Ht),
  _class: Ke("class", Ht),
  _extends: Ke("extends", or),
  _export: Ke("export"),
  _import: Ke("import", Ht),
  _null: Ke("null", Ht),
  _true: Ke("true", Ht),
  _false: Ke("false", Ht),
  _in: Ke("in", { beforeExpr: true, binop: 7 }),
  _instanceof: Ke("instanceof", { beforeExpr: true, binop: 7 }),
  _typeof: Ke("typeof", { beforeExpr: true, prefix: true, startsExpr: true }),
  _void: Ke("void", { beforeExpr: true, prefix: true, startsExpr: true }),
  _delete: Ke("delete", { beforeExpr: true, prefix: true, startsExpr: true })
};
var Zt = /\r\n?|\n|\u2028|\u2029/;
var ss = new RegExp(Zt.source, "g");
function ls(t4, e) {
  return t4 === 10 || t4 === 13 || !e && (t4 === 8232 || t4 === 8233);
}
var ou = /[\u1680\u2000-\u200a\u202f\u205f\u3000\ufeff]/;
var pr = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g;
var vx = Object.prototype;
var XD = vx.hasOwnProperty;
var QD = vx.toString;
function xi(t4, e) {
  return XD.call(t4, e);
}
var Rd = Array.isArray || function(t4) {
  return QD.call(t4) === "[object Array]";
};
function Sn(t4) {
  return new RegExp("^(?:" + t4.replace(/ /g, "|") + ")$");
}
var as = function(e, r) {
  this.line = e, this.column = r;
};
as.prototype.offset = function(e) {
  return new as(this.line, this.column + e);
};
var Gs = function(e, r, s) {
  this.start = r, this.end = s, e.sourceFile !== null && (this.source = e.sourceFile);
};
function lu(t4, e) {
  for (var r = 1, s = 0; ; ) {
    ss.lastIndex = s;
    var n = ss.exec(t4);
    if (n && n.index < e)
      ++r, s = n.index + n[0].length;
    else
      return new as(r, e - s);
  }
}
var qa = {
  // `ecmaVersion` indicates the ECMAScript version to parse. Must be
  // either 3, 5, 6 (2015), 7 (2016), 8 (2017), 9 (2018), or 10
  // (2019). This influences support for strict mode, the set of
  // reserved words, and support for new syntax features. The default
  // is 10.
  ecmaVersion: 10,
  // `sourceType` indicates the mode the code should be parsed in.
  // Can be either `"script"` or `"module"`. This influences global
  // strict mode and parsing of `import` and `export` declarations.
  sourceType: "script",
  // `onInsertedSemicolon` can be a callback that will be called
  // when a semicolon is automatically inserted. It will be passed
  // the position of the comma as an offset, and if `locations` is
  // enabled, it is given the location as a `{line, column}` object
  // as second argument.
  onInsertedSemicolon: null,
  // `onTrailingComma` is similar to `onInsertedSemicolon`, but for
  // trailing commas.
  onTrailingComma: null,
  // By default, reserved words are only enforced if ecmaVersion >= 5.
  // Set `allowReserved` to a boolean value to explicitly turn this on
  // an off. When this option has the value "never", reserved words
  // and keywords can also not be used as property names.
  allowReserved: null,
  // When enabled, a return at the top level is not considered an
  // error.
  allowReturnOutsideFunction: false,
  // When enabled, import/export statements are not constrained to
  // appearing at the top of the program.
  allowImportExportEverywhere: false,
  // When enabled, await identifiers are allowed to appear at the top-level scope,
  // but they are still not allowed in non-async functions.
  allowAwaitOutsideFunction: false,
  // When enabled, hashbang directive in the beginning of file
  // is allowed and treated as a line comment.
  allowHashBang: false,
  // When `locations` is on, `loc` properties holding objects with
  // `start` and `end` properties in `{line, column}` form (with
  // line being 1-based and column 0-based) will be attached to the
  // nodes.
  locations: false,
  // A function can be passed as `onToken` option, which will
  // cause Acorn to call that function with object in the same
  // format as tokens returned from `tokenizer().getToken()`. Note
  // that you are not allowed to call the parser from the
  // callback—that will corrupt its internal state.
  onToken: null,
  // A function can be passed as `onComment` option, which will
  // cause Acorn to call that function with `(block, text, start,
  // end)` parameters whenever a comment is skipped. `block` is a
  // boolean indicating whether this is a block (`/* */`) comment,
  // `text` is the content of the comment, and `start` and `end` are
  // character offsets that denote the start and end of the comment.
  // When the `locations` option is on, two more parameters are
  // passed, the full `{line, column}` locations of the start and
  // end of the comments. Note that you are not allowed to call the
  // parser from the callback—that will corrupt its internal state.
  onComment: null,
  // Nodes have their start and end characters offsets recorded in
  // `start` and `end` properties (directly on the node, rather than
  // the `loc` object, which holds line/column data. To also add a
  // [semi-standardized][range] `range` property holding a `[start,
  // end]` array with the same numbers, set the `ranges` option to
  // `true`.
  //
  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678
  ranges: false,
  // It is possible to parse multiple files into a single AST by
  // passing the tree produced by parsing the first file as
  // `program` option in subsequent parses. This will add the
  // toplevel forms of the parsed file to the `Program` (top) node
  // of an existing parse tree.
  program: null,
  // When `locations` is on, you can pass this to record the source
  // file in every node's `loc` object.
  sourceFile: null,
  // This value, if given, is stored in every node, whether
  // `locations` is on or off.
  directSourceFile: null,
  // When enabled, parenthesized expressions are represented by
  // (non-standard) ParenthesizedExpression nodes
  preserveParens: false
};
function YD(t4) {
  var e = {};
  for (var r in qa)
    e[r] = t4 && xi(t4, r) ? t4[r] : qa[r];
  if (e.ecmaVersion >= 2015 && (e.ecmaVersion -= 2009), e.allowReserved == null && (e.allowReserved = e.ecmaVersion < 5), Rd(e.onToken)) {
    var s = e.onToken;
    e.onToken = function(n) {
      return s.push(n);
    };
  }
  return Rd(e.onComment) && (e.onComment = ZD(e, e.onComment)), e;
}
function ZD(t4, e) {
  return function(r, s, n, a, o, l) {
    var i = {
      type: r ? "Block" : "Line",
      value: s,
      start: n,
      end: a
    };
    t4.locations && (i.loc = new Gs(this, o, l)), t4.ranges && (i.range = [n, a]), e.push(i);
  };
}
var js = 1;
var Hs = 2;
var uu = js | Hs;
var Ex = 4;
var bx = 8;
var Cx = 16;
var Sx = 32;
var Ax = 64;
var Dx = 128;
function cu(t4, e) {
  return Hs | (t4 ? Ex : 0) | (e ? bx : 0);
}
var Nd = 0;
var pu = 1;
var Vr = 2;
var wx = 3;
var kx = 4;
var Tx = 5;
var ht = function(e, r, s) {
  this.options = e = YD(e), this.sourceFile = e.sourceFile, this.keywords = Sn(zD[e.ecmaVersion >= 6 ? 6 : e.sourceType === "module" ? "5module" : 5]);
  var n = "";
  if (e.allowReserved !== true) {
    for (var a = e.ecmaVersion; !(n = Qi[a]); a--)
      ;
    e.sourceType === "module" && (n += " await");
  }
  this.reservedWords = Sn(n);
  var o = (n ? n + " " : "") + Qi.strict;
  this.reservedWordsStrict = Sn(o), this.reservedWordsStrictBind = Sn(o + " " + Qi.strictBind), this.input = String(r), this.containsEsc = false, s ? (this.pos = s, this.lineStart = this.input.lastIndexOf(`
`, s - 1) + 1, this.curLine = this.input.slice(0, this.lineStart).split(Zt).length) : (this.pos = this.lineStart = 0, this.curLine = 1), this.type = $.eof, this.value = null, this.start = this.end = this.pos, this.startLoc = this.endLoc = this.curPosition(), this.lastTokEndLoc = this.lastTokStartLoc = null, this.lastTokStart = this.lastTokEnd = this.pos, this.context = this.initialContext(), this.exprAllowed = true, this.inModule = e.sourceType === "module", this.strict = this.inModule || this.strictDirective(this.pos), this.potentialArrowAt = -1, this.yieldPos = this.awaitPos = this.awaitIdentPos = 0, this.labels = [], this.undefinedExports = {}, this.pos === 0 && e.allowHashBang && this.input.slice(0, 2) === "#!" && this.skipLineComment(2), this.scopeStack = [], this.enterScope(js), this.regexpState = null;
};
var _n = { inFunction: { configurable: true }, inGenerator: { configurable: true }, inAsync: { configurable: true }, allowSuper: { configurable: true }, allowDirectSuper: { configurable: true }, treatFunctionsAsVar: { configurable: true } };
ht.prototype.parse = function() {
  var e = this.options.program || this.startNode();
  return this.nextToken(), this.parseTopLevel(e);
};
_n.inFunction.get = function() {
  return (this.currentVarScope().flags & Hs) > 0;
};
_n.inGenerator.get = function() {
  return (this.currentVarScope().flags & bx) > 0;
};
_n.inAsync.get = function() {
  return (this.currentVarScope().flags & Ex) > 0;
};
_n.allowSuper.get = function() {
  return (this.currentThisScope().flags & Ax) > 0;
};
_n.allowDirectSuper.get = function() {
  return (this.currentThisScope().flags & Dx) > 0;
};
_n.treatFunctionsAsVar.get = function() {
  return this.treatFunctionsAsVarInScope(this.currentScope());
};
ht.prototype.inNonArrowFunction = function() {
  return (this.currentThisScope().flags & Hs) > 0;
};
ht.extend = function() {
  for (var e = [], r = arguments.length; r--; )
    e[r] = arguments[r];
  for (var s = this, n = 0; n < e.length; n++)
    s = e[n](s);
  return s;
};
ht.parse = function(e, r) {
  return new this(r, e).parse();
};
ht.parseExpressionAt = function(e, r, s) {
  var n = new this(s, e, r);
  return n.nextToken(), n.parseExpression();
};
ht.tokenizer = function(e, r) {
  return new this(r, e);
};
Object.defineProperties(ht.prototype, _n);
var Mt = ht.prototype;
var ew = /^(?:'((?:\\.|[^'\\])*?)'|"((?:\\.|[^"\\])*?)")/;
Mt.strictDirective = function(t4) {
  for (; ; ) {
    pr.lastIndex = t4, t4 += pr.exec(this.input)[0].length;
    var e = ew.exec(this.input.slice(t4));
    if (!e)
      return false;
    if ((e[1] || e[2]) === "use strict") {
      pr.lastIndex = t4 + e[0].length;
      var r = pr.exec(this.input), s = r.index + r[0].length, n = this.input.charAt(s);
      return n === ";" || n === "}" || Zt.test(r[0]) && !(/[(`.[+\-/*%<>=,?^&]/.test(n) || n === "!" && this.input.charAt(s + 1) === "=");
    }
    t4 += e[0].length, pr.lastIndex = t4, t4 += pr.exec(this.input)[0].length, this.input[t4] === ";" && t4++;
  }
};
Mt.eat = function(t4) {
  return this.type === t4 ? (this.next(), true) : false;
};
Mt.isContextual = function(t4) {
  return this.type === $.name && this.value === t4 && !this.containsEsc;
};
Mt.eatContextual = function(t4) {
  return this.isContextual(t4) ? (this.next(), true) : false;
};
Mt.expectContextual = function(t4) {
  this.eatContextual(t4) || this.unexpected();
};
Mt.canInsertSemicolon = function() {
  return this.type === $.eof || this.type === $.braceR || Zt.test(this.input.slice(this.lastTokEnd, this.start));
};
Mt.insertSemicolon = function() {
  if (this.canInsertSemicolon())
    return this.options.onInsertedSemicolon && this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc), true;
};
Mt.semicolon = function() {
  !this.eat($.semi) && !this.insertSemicolon() && this.unexpected();
};
Mt.afterTrailingComma = function(t4, e) {
  if (this.type === t4)
    return this.options.onTrailingComma && this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc), e || this.next(), true;
};
Mt.expect = function(t4) {
  this.eat(t4) || this.unexpected();
};
Mt.unexpected = function(t4) {
  this.raise(t4 ?? this.start, "Unexpected token");
};
function vi() {
  this.shorthandAssign = this.trailingComma = this.parenthesizedAssign = this.parenthesizedBind = this.doubleProto = -1;
}
Mt.checkPatternErrors = function(t4, e) {
  if (t4) {
    t4.trailingComma > -1 && this.raiseRecoverable(t4.trailingComma, "Comma is not permitted after the rest element");
    var r = e ? t4.parenthesizedAssign : t4.parenthesizedBind;
    r > -1 && this.raiseRecoverable(r, "Parenthesized pattern");
  }
};
Mt.checkExpressionErrors = function(t4, e) {
  if (!t4)
    return false;
  var r = t4.shorthandAssign, s = t4.doubleProto;
  if (!e)
    return r >= 0 || s >= 0;
  r >= 0 && this.raise(r, "Shorthand property assignments are valid only in destructuring patterns"), s >= 0 && this.raiseRecoverable(s, "Redefinition of __proto__ property");
};
Mt.checkYieldAwaitInDefaultParams = function() {
  this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos) && this.raise(this.yieldPos, "Yield expression cannot be a default value"), this.awaitPos && this.raise(this.awaitPos, "Await expression cannot be a default value");
};
Mt.isSimpleAssignTarget = function(t4) {
  return t4.type === "ParenthesizedExpression" ? this.isSimpleAssignTarget(t4.expression) : t4.type === "Identifier" || t4.type === "MemberExpression";
};
var $e = ht.prototype;
$e.parseTopLevel = function(t4) {
  var e = {};
  for (t4.body || (t4.body = []); this.type !== $.eof; ) {
    var r = this.parseStatement(null, true, e);
    t4.body.push(r);
  }
  if (this.inModule)
    for (var s = 0, n = Object.keys(this.undefinedExports); s < n.length; s += 1) {
      var a = n[s];
      this.raiseRecoverable(this.undefinedExports[a].start, "Export '" + a + "' is not defined");
    }
  return this.adaptDirectivePrologue(t4.body), this.next(), t4.sourceType = this.options.sourceType, this.finishNode(t4, "Program");
};
var fu = { kind: "loop" };
var tw = { kind: "switch" };
$e.isLet = function(t4) {
  if (this.options.ecmaVersion < 6 || !this.isContextual("let"))
    return false;
  pr.lastIndex = this.pos;
  var e = pr.exec(this.input), r = this.pos + e[0].length, s = this.input.charCodeAt(r);
  if (s === 91)
    return true;
  if (t4)
    return false;
  if (s === 123)
    return true;
  if (Ur(s, true)) {
    for (var n = r + 1; Tn(this.input.charCodeAt(n), true); )
      ++n;
    var a = this.input.slice(r, n);
    if (!GD.test(a))
      return true;
  }
  return false;
};
$e.isAsyncFunction = function() {
  if (this.options.ecmaVersion < 8 || !this.isContextual("async"))
    return false;
  pr.lastIndex = this.pos;
  var t4 = pr.exec(this.input), e = this.pos + t4[0].length;
  return !Zt.test(this.input.slice(this.pos, e)) && this.input.slice(e, e + 8) === "function" && (e + 8 === this.input.length || !Tn(this.input.charAt(e + 8)));
};
$e.parseStatement = function(t4, e, r) {
  var s = this.type, n = this.startNode(), a;
  switch (this.isLet(t4) && (s = $._var, a = "let"), s) {
    case $._break:
    case $._continue:
      return this.parseBreakContinueStatement(n, s.keyword);
    case $._debugger:
      return this.parseDebuggerStatement(n);
    case $._do:
      return this.parseDoStatement(n);
    case $._for:
      return this.parseForStatement(n);
    case $._function:
      return t4 && (this.strict || t4 !== "if" && t4 !== "label") && this.options.ecmaVersion >= 6 && this.unexpected(), this.parseFunctionStatement(n, false, !t4);
    case $._class:
      return t4 && this.unexpected(), this.parseClass(n, true);
    case $._if:
      return this.parseIfStatement(n);
    case $._return:
      return this.parseReturnStatement(n);
    case $._switch:
      return this.parseSwitchStatement(n);
    case $._throw:
      return this.parseThrowStatement(n);
    case $._try:
      return this.parseTryStatement(n);
    case $._const:
    case $._var:
      return a = a || this.value, t4 && a !== "var" && this.unexpected(), this.parseVarStatement(n, a);
    case $._while:
      return this.parseWhileStatement(n);
    case $._with:
      return this.parseWithStatement(n);
    case $.braceL:
      return this.parseBlock(true, n);
    case $.semi:
      return this.parseEmptyStatement(n);
    case $._export:
    case $._import:
      if (this.options.ecmaVersion > 10 && s === $._import) {
        pr.lastIndex = this.pos;
        var o = pr.exec(this.input), l = this.pos + o[0].length, i = this.input.charCodeAt(l);
        if (i === 40 || i === 46)
          return this.parseExpressionStatement(n, this.parseExpression());
      }
      return this.options.allowImportExportEverywhere || (e || this.raise(this.start, "'import' and 'export' may only appear at the top level"), this.inModule || this.raise(this.start, "'import' and 'export' may appear only with 'sourceType: module'")), s === $._import ? this.parseImport(n) : this.parseExport(n, r);
    default:
      if (this.isAsyncFunction())
        return t4 && this.unexpected(), this.next(), this.parseFunctionStatement(n, true, !t4);
      var u = this.value, c = this.parseExpression();
      return s === $.name && c.type === "Identifier" && this.eat($.colon) ? this.parseLabeledStatement(n, u, c, t4) : this.parseExpressionStatement(n, c);
  }
};
$e.parseBreakContinueStatement = function(t4, e) {
  var r = e === "break";
  this.next(), this.eat($.semi) || this.insertSemicolon() ? t4.label = null : this.type !== $.name ? this.unexpected() : (t4.label = this.parseIdent(), this.semicolon());
  for (var s = 0; s < this.labels.length; ++s) {
    var n = this.labels[s];
    if ((t4.label == null || n.name === t4.label.name) && (n.kind != null && (r || n.kind === "loop") || t4.label && r))
      break;
  }
  return s === this.labels.length && this.raise(t4.start, "Unsyntactic " + e), this.finishNode(t4, r ? "BreakStatement" : "ContinueStatement");
};
$e.parseDebuggerStatement = function(t4) {
  return this.next(), this.semicolon(), this.finishNode(t4, "DebuggerStatement");
};
$e.parseDoStatement = function(t4) {
  return this.next(), this.labels.push(fu), t4.body = this.parseStatement("do"), this.labels.pop(), this.expect($._while), t4.test = this.parseParenExpression(), this.options.ecmaVersion >= 6 ? this.eat($.semi) : this.semicolon(), this.finishNode(t4, "DoWhileStatement");
};
$e.parseForStatement = function(t4) {
  this.next();
  var e = this.options.ecmaVersion >= 9 && (this.inAsync || !this.inFunction && this.options.allowAwaitOutsideFunction) && this.eatContextual("await") ? this.lastTokStart : -1;
  if (this.labels.push(fu), this.enterScope(0), this.expect($.parenL), this.type === $.semi)
    return e > -1 && this.unexpected(e), this.parseFor(t4, null);
  var r = this.isLet();
  if (this.type === $._var || this.type === $._const || r) {
    var s = this.startNode(), n = r ? "let" : this.value;
    return this.next(), this.parseVar(s, true, n), this.finishNode(s, "VariableDeclaration"), (this.type === $._in || this.options.ecmaVersion >= 6 && this.isContextual("of")) && s.declarations.length === 1 ? (this.options.ecmaVersion >= 9 && (this.type === $._in ? e > -1 && this.unexpected(e) : t4.await = e > -1), this.parseForIn(t4, s)) : (e > -1 && this.unexpected(e), this.parseFor(t4, s));
  }
  var a = new vi(), o = this.parseExpression(true, a);
  return this.type === $._in || this.options.ecmaVersion >= 6 && this.isContextual("of") ? (this.options.ecmaVersion >= 9 && (this.type === $._in ? e > -1 && this.unexpected(e) : t4.await = e > -1), this.toAssignable(o, false, a), this.checkLVal(o), this.parseForIn(t4, o)) : (this.checkExpressionErrors(a, true), e > -1 && this.unexpected(e), this.parseFor(t4, o));
};
$e.parseFunctionStatement = function(t4, e, r) {
  return this.next(), this.parseFunction(t4, Ps | (r ? 0 : ul), false, e);
};
$e.parseIfStatement = function(t4) {
  return this.next(), t4.test = this.parseParenExpression(), t4.consequent = this.parseStatement("if"), t4.alternate = this.eat($._else) ? this.parseStatement("if") : null, this.finishNode(t4, "IfStatement");
};
$e.parseReturnStatement = function(t4) {
  return !this.inFunction && !this.options.allowReturnOutsideFunction && this.raise(this.start, "'return' outside of function"), this.next(), this.eat($.semi) || this.insertSemicolon() ? t4.argument = null : (t4.argument = this.parseExpression(), this.semicolon()), this.finishNode(t4, "ReturnStatement");
};
$e.parseSwitchStatement = function(t4) {
  this.next(), t4.discriminant = this.parseParenExpression(), t4.cases = [], this.expect($.braceL), this.labels.push(tw), this.enterScope(0);
  for (var e, r = false; this.type !== $.braceR; )
    if (this.type === $._case || this.type === $._default) {
      var s = this.type === $._case;
      e && this.finishNode(e, "SwitchCase"), t4.cases.push(e = this.startNode()), e.consequent = [], this.next(), s ? e.test = this.parseExpression() : (r && this.raiseRecoverable(this.lastTokStart, "Multiple default clauses"), r = true, e.test = null), this.expect($.colon);
    } else
      e || this.unexpected(), e.consequent.push(this.parseStatement(null));
  return this.exitScope(), e && this.finishNode(e, "SwitchCase"), this.next(), this.labels.pop(), this.finishNode(t4, "SwitchStatement");
};
$e.parseThrowStatement = function(t4) {
  return this.next(), Zt.test(this.input.slice(this.lastTokEnd, this.start)) && this.raise(this.lastTokEnd, "Illegal newline after throw"), t4.argument = this.parseExpression(), this.semicolon(), this.finishNode(t4, "ThrowStatement");
};
var rw = [];
$e.parseTryStatement = function(t4) {
  if (this.next(), t4.block = this.parseBlock(), t4.handler = null, this.type === $._catch) {
    var e = this.startNode();
    if (this.next(), this.eat($.parenL)) {
      e.param = this.parseBindingAtom();
      var r = e.param.type === "Identifier";
      this.enterScope(r ? Sx : 0), this.checkLVal(e.param, r ? kx : Vr), this.expect($.parenR);
    } else
      this.options.ecmaVersion < 10 && this.unexpected(), e.param = null, this.enterScope(0);
    e.body = this.parseBlock(false), this.exitScope(), t4.handler = this.finishNode(e, "CatchClause");
  }
  return t4.finalizer = this.eat($._finally) ? this.parseBlock() : null, !t4.handler && !t4.finalizer && this.raise(t4.start, "Missing catch or finally clause"), this.finishNode(t4, "TryStatement");
};
$e.parseVarStatement = function(t4, e) {
  return this.next(), this.parseVar(t4, false, e), this.semicolon(), this.finishNode(t4, "VariableDeclaration");
};
$e.parseWhileStatement = function(t4) {
  return this.next(), t4.test = this.parseParenExpression(), this.labels.push(fu), t4.body = this.parseStatement("while"), this.labels.pop(), this.finishNode(t4, "WhileStatement");
};
$e.parseWithStatement = function(t4) {
  return this.strict && this.raise(this.start, "'with' in strict mode"), this.next(), t4.object = this.parseParenExpression(), t4.body = this.parseStatement("with"), this.finishNode(t4, "WithStatement");
};
$e.parseEmptyStatement = function(t4) {
  return this.next(), this.finishNode(t4, "EmptyStatement");
};
$e.parseLabeledStatement = function(t4, e, r, s) {
  for (var n = 0, a = this.labels; n < a.length; n += 1) {
    var o = a[n];
    o.name === e && this.raise(r.start, "Label '" + e + "' is already declared");
  }
  for (var l = this.type.isLoop ? "loop" : this.type === $._switch ? "switch" : null, i = this.labels.length - 1; i >= 0; i--) {
    var u = this.labels[i];
    if (u.statementStart === t4.start)
      u.statementStart = this.start, u.kind = l;
    else
      break;
  }
  return this.labels.push({ name: e, kind: l, statementStart: this.start }), t4.body = this.parseStatement(s ? s.indexOf("label") === -1 ? s + "label" : s : "label"), this.labels.pop(), t4.label = r, this.finishNode(t4, "LabeledStatement");
};
$e.parseExpressionStatement = function(t4, e) {
  return t4.expression = e, this.semicolon(), this.finishNode(t4, "ExpressionStatement");
};
$e.parseBlock = function(t4, e, r) {
  for (t4 === void 0 && (t4 = true), e === void 0 && (e = this.startNode()), e.body = [], this.expect($.braceL), t4 && this.enterScope(0); this.type !== $.braceR; ) {
    var s = this.parseStatement(null);
    e.body.push(s);
  }
  return r && (this.strict = false), this.next(), t4 && this.exitScope(), this.finishNode(e, "BlockStatement");
};
$e.parseFor = function(t4, e) {
  return t4.init = e, this.expect($.semi), t4.test = this.type === $.semi ? null : this.parseExpression(), this.expect($.semi), t4.update = this.type === $.parenR ? null : this.parseExpression(), this.expect($.parenR), t4.body = this.parseStatement("for"), this.exitScope(), this.labels.pop(), this.finishNode(t4, "ForStatement");
};
$e.parseForIn = function(t4, e) {
  var r = this.type === $._in;
  return this.next(), e.type === "VariableDeclaration" && e.declarations[0].init != null && (!r || this.options.ecmaVersion < 8 || this.strict || e.kind !== "var" || e.declarations[0].id.type !== "Identifier") ? this.raise(
    e.start,
    (r ? "for-in" : "for-of") + " loop variable declaration may not have an initializer"
  ) : e.type === "AssignmentPattern" && this.raise(e.start, "Invalid left-hand side in for-loop"), t4.left = e, t4.right = r ? this.parseExpression() : this.parseMaybeAssign(), this.expect($.parenR), t4.body = this.parseStatement("for"), this.exitScope(), this.labels.pop(), this.finishNode(t4, r ? "ForInStatement" : "ForOfStatement");
};
$e.parseVar = function(t4, e, r) {
  for (t4.declarations = [], t4.kind = r; ; ) {
    var s = this.startNode();
    if (this.parseVarId(s, r), this.eat($.eq) ? s.init = this.parseMaybeAssign(e) : r === "const" && !(this.type === $._in || this.options.ecmaVersion >= 6 && this.isContextual("of")) ? this.unexpected() : s.id.type !== "Identifier" && !(e && (this.type === $._in || this.isContextual("of"))) ? this.raise(this.lastTokEnd, "Complex binding patterns require an initialization value") : s.init = null, t4.declarations.push(this.finishNode(s, "VariableDeclarator")), !this.eat($.comma))
      break;
  }
  return t4;
};
$e.parseVarId = function(t4, e) {
  t4.id = this.parseBindingAtom(), this.checkLVal(t4.id, e === "var" ? pu : Vr, false);
};
var Ps = 1;
var ul = 2;
var Fx = 4;
$e.parseFunction = function(t4, e, r, s) {
  this.initFunction(t4), (this.options.ecmaVersion >= 9 || this.options.ecmaVersion >= 6 && !s) && (this.type === $.star && e & ul && this.unexpected(), t4.generator = this.eat($.star)), this.options.ecmaVersion >= 8 && (t4.async = !!s), e & Ps && (t4.id = e & Fx && this.type !== $.name ? null : this.parseIdent(), t4.id && !(e & ul) && this.checkLVal(t4.id, this.strict || t4.generator || t4.async ? this.treatFunctionsAsVar ? pu : Vr : wx));
  var n = this.yieldPos, a = this.awaitPos, o = this.awaitIdentPos;
  return this.yieldPos = 0, this.awaitPos = 0, this.awaitIdentPos = 0, this.enterScope(cu(t4.async, t4.generator)), e & Ps || (t4.id = this.type === $.name ? this.parseIdent() : null), this.parseFunctionParams(t4), this.parseFunctionBody(t4, r, false), this.yieldPos = n, this.awaitPos = a, this.awaitIdentPos = o, this.finishNode(t4, e & Ps ? "FunctionDeclaration" : "FunctionExpression");
};
$e.parseFunctionParams = function(t4) {
  this.expect($.parenL), t4.params = this.parseBindingList($.parenR, false, this.options.ecmaVersion >= 8), this.checkYieldAwaitInDefaultParams();
};
$e.parseClass = function(t4, e) {
  this.next();
  var r = this.strict;
  this.strict = true, this.parseClassId(t4, e), this.parseClassSuper(t4);
  var s = this.startNode(), n = false;
  for (s.body = [], this.expect($.braceL); this.type !== $.braceR; ) {
    var a = this.parseClassElement(t4.superClass !== null);
    a && (s.body.push(a), a.type === "MethodDefinition" && a.kind === "constructor" && (n && this.raise(a.start, "Duplicate constructor in the same class"), n = true));
  }
  return this.strict = r, this.next(), t4.body = this.finishNode(s, "ClassBody"), this.finishNode(t4, e ? "ClassDeclaration" : "ClassExpression");
};
$e.parseClassElement = function(t4) {
  var e = this;
  if (this.eat($.semi))
    return null;
  var r = this.startNode(), s = function(i, u) {
    u === void 0 && (u = false);
    var c = e.start, f = e.startLoc;
    return e.eatContextual(i) ? e.type !== $.parenL && (!u || !e.canInsertSemicolon()) ? true : (r.key && e.unexpected(), r.computed = false, r.key = e.startNodeAt(c, f), r.key.name = i, e.finishNode(r.key, "Identifier"), false) : false;
  };
  r.kind = "method", r.static = s("static");
  var n = this.eat($.star), a = false;
  n || (this.options.ecmaVersion >= 8 && s("async", true) ? (a = true, n = this.options.ecmaVersion >= 9 && this.eat($.star)) : s("get") ? r.kind = "get" : s("set") && (r.kind = "set")), r.key || this.parsePropertyName(r);
  var o = r.key, l = false;
  return !r.computed && !r.static && (o.type === "Identifier" && o.name === "constructor" || o.type === "Literal" && o.value === "constructor") ? (r.kind !== "method" && this.raise(o.start, "Constructor can't have get/set modifier"), n && this.raise(o.start, "Constructor can't be a generator"), a && this.raise(o.start, "Constructor can't be an async method"), r.kind = "constructor", l = t4) : r.static && o.type === "Identifier" && o.name === "prototype" && this.raise(o.start, "Classes may not have a static property named prototype"), this.parseClassMethod(r, n, a, l), r.kind === "get" && r.value.params.length !== 0 && this.raiseRecoverable(r.value.start, "getter should have no params"), r.kind === "set" && r.value.params.length !== 1 && this.raiseRecoverable(r.value.start, "setter should have exactly one param"), r.kind === "set" && r.value.params[0].type === "RestElement" && this.raiseRecoverable(r.value.params[0].start, "Setter cannot use rest params"), r;
};
$e.parseClassMethod = function(t4, e, r, s) {
  return t4.value = this.parseMethod(e, r, s), this.finishNode(t4, "MethodDefinition");
};
$e.parseClassId = function(t4, e) {
  this.type === $.name ? (t4.id = this.parseIdent(), e && this.checkLVal(t4.id, Vr, false)) : (e === true && this.unexpected(), t4.id = null);
};
$e.parseClassSuper = function(t4) {
  t4.superClass = this.eat($._extends) ? this.parseExprSubscripts() : null;
};
$e.parseExport = function(t4, e) {
  if (this.next(), this.eat($.star))
    return this.options.ecmaVersion >= 11 && (this.eatContextual("as") ? (t4.exported = this.parseIdent(true), this.checkExport(e, t4.exported.name, this.lastTokStart)) : t4.exported = null), this.expectContextual("from"), this.type !== $.string && this.unexpected(), t4.source = this.parseExprAtom(), this.semicolon(), this.finishNode(t4, "ExportAllDeclaration");
  if (this.eat($._default)) {
    this.checkExport(e, "default", this.lastTokStart);
    var r;
    if (this.type === $._function || (r = this.isAsyncFunction())) {
      var s = this.startNode();
      this.next(), r && this.next(), t4.declaration = this.parseFunction(s, Ps | Fx, false, r);
    } else if (this.type === $._class) {
      var n = this.startNode();
      t4.declaration = this.parseClass(n, "nullableID");
    } else
      t4.declaration = this.parseMaybeAssign(), this.semicolon();
    return this.finishNode(t4, "ExportDefaultDeclaration");
  }
  if (this.shouldParseExportStatement())
    t4.declaration = this.parseStatement(null), t4.declaration.type === "VariableDeclaration" ? this.checkVariableExport(e, t4.declaration.declarations) : this.checkExport(e, t4.declaration.id.name, t4.declaration.id.start), t4.specifiers = [], t4.source = null;
  else {
    if (t4.declaration = null, t4.specifiers = this.parseExportSpecifiers(e), this.eatContextual("from"))
      this.type !== $.string && this.unexpected(), t4.source = this.parseExprAtom();
    else {
      for (var a = 0, o = t4.specifiers; a < o.length; a += 1) {
        var l = o[a];
        this.checkUnreserved(l.local), this.checkLocalExport(l.local);
      }
      t4.source = null;
    }
    this.semicolon();
  }
  return this.finishNode(t4, "ExportNamedDeclaration");
};
$e.checkExport = function(t4, e, r) {
  t4 && (xi(t4, e) && this.raiseRecoverable(r, "Duplicate export '" + e + "'"), t4[e] = true);
};
$e.checkPatternExport = function(t4, e) {
  var r = e.type;
  if (r === "Identifier")
    this.checkExport(t4, e.name, e.start);
  else if (r === "ObjectPattern")
    for (var s = 0, n = e.properties; s < n.length; s += 1) {
      var a = n[s];
      this.checkPatternExport(t4, a);
    }
  else if (r === "ArrayPattern")
    for (var o = 0, l = e.elements; o < l.length; o += 1) {
      var i = l[o];
      i && this.checkPatternExport(t4, i);
    }
  else
    r === "Property" ? this.checkPatternExport(t4, e.value) : r === "AssignmentPattern" ? this.checkPatternExport(t4, e.left) : r === "RestElement" ? this.checkPatternExport(t4, e.argument) : r === "ParenthesizedExpression" && this.checkPatternExport(t4, e.expression);
};
$e.checkVariableExport = function(t4, e) {
  if (t4)
    for (var r = 0, s = e; r < s.length; r += 1) {
      var n = s[r];
      this.checkPatternExport(t4, n.id);
    }
};
$e.shouldParseExportStatement = function() {
  return this.type.keyword === "var" || this.type.keyword === "const" || this.type.keyword === "class" || this.type.keyword === "function" || this.isLet() || this.isAsyncFunction();
};
$e.parseExportSpecifiers = function(t4) {
  var e = [], r = true;
  for (this.expect($.braceL); !this.eat($.braceR); ) {
    if (r)
      r = false;
    else if (this.expect($.comma), this.afterTrailingComma($.braceR))
      break;
    var s = this.startNode();
    s.local = this.parseIdent(true), s.exported = this.eatContextual("as") ? this.parseIdent(true) : s.local, this.checkExport(t4, s.exported.name, s.exported.start), e.push(this.finishNode(s, "ExportSpecifier"));
  }
  return e;
};
$e.parseImport = function(t4) {
  return this.next(), this.type === $.string ? (t4.specifiers = rw, t4.source = this.parseExprAtom()) : (t4.specifiers = this.parseImportSpecifiers(), this.expectContextual("from"), t4.source = this.type === $.string ? this.parseExprAtom() : this.unexpected()), this.semicolon(), this.finishNode(t4, "ImportDeclaration");
};
$e.parseImportSpecifiers = function() {
  var t4 = [], e = true;
  if (this.type === $.name) {
    var r = this.startNode();
    if (r.local = this.parseIdent(), this.checkLVal(r.local, Vr), t4.push(this.finishNode(r, "ImportDefaultSpecifier")), !this.eat($.comma))
      return t4;
  }
  if (this.type === $.star) {
    var s = this.startNode();
    return this.next(), this.expectContextual("as"), s.local = this.parseIdent(), this.checkLVal(s.local, Vr), t4.push(this.finishNode(s, "ImportNamespaceSpecifier")), t4;
  }
  for (this.expect($.braceL); !this.eat($.braceR); ) {
    if (e)
      e = false;
    else if (this.expect($.comma), this.afterTrailingComma($.braceR))
      break;
    var n = this.startNode();
    n.imported = this.parseIdent(true), this.eatContextual("as") ? n.local = this.parseIdent() : (this.checkUnreserved(n.imported), n.local = n.imported), this.checkLVal(n.local, Vr), t4.push(this.finishNode(n, "ImportSpecifier"));
  }
  return t4;
};
$e.adaptDirectivePrologue = function(t4) {
  for (var e = 0; e < t4.length && this.isDirectiveCandidate(t4[e]); ++e)
    t4[e].directive = t4[e].expression.raw.slice(1, -1);
};
$e.isDirectiveCandidate = function(t4) {
  return t4.type === "ExpressionStatement" && t4.expression.type === "Literal" && typeof t4.expression.value == "string" && // Reject parenthesized strings.
  (this.input[t4.start] === '"' || this.input[t4.start] === "'");
};
var zr = ht.prototype;
zr.toAssignable = function(t4, e, r) {
  if (this.options.ecmaVersion >= 6 && t4)
    switch (t4.type) {
      case "Identifier":
        this.inAsync && t4.name === "await" && this.raise(t4.start, "Cannot use 'await' as identifier inside an async function");
        break;
      case "ObjectPattern":
      case "ArrayPattern":
      case "RestElement":
        break;
      case "ObjectExpression":
        t4.type = "ObjectPattern", r && this.checkPatternErrors(r, true);
        for (var s = 0, n = t4.properties; s < n.length; s += 1) {
          var a = n[s];
          this.toAssignable(a, e), a.type === "RestElement" && (a.argument.type === "ArrayPattern" || a.argument.type === "ObjectPattern") && this.raise(a.argument.start, "Unexpected token");
        }
        break;
      case "Property":
        t4.kind !== "init" && this.raise(t4.key.start, "Object pattern can't contain getter or setter"), this.toAssignable(t4.value, e);
        break;
      case "ArrayExpression":
        t4.type = "ArrayPattern", r && this.checkPatternErrors(r, true), this.toAssignableList(t4.elements, e);
        break;
      case "SpreadElement":
        t4.type = "RestElement", this.toAssignable(t4.argument, e), t4.argument.type === "AssignmentPattern" && this.raise(t4.argument.start, "Rest elements cannot have a default value");
        break;
      case "AssignmentExpression":
        t4.operator !== "=" && this.raise(t4.left.end, "Only '=' operator can be used for specifying default value."), t4.type = "AssignmentPattern", delete t4.operator, this.toAssignable(t4.left, e);
      case "AssignmentPattern":
        break;
      case "ParenthesizedExpression":
        this.toAssignable(t4.expression, e, r);
        break;
      case "ChainExpression":
        this.raiseRecoverable(t4.start, "Optional chaining cannot appear in left-hand side");
        break;
      case "MemberExpression":
        if (!e)
          break;
      default:
        this.raise(t4.start, "Assigning to rvalue");
    }
  else
    r && this.checkPatternErrors(r, true);
  return t4;
};
zr.toAssignableList = function(t4, e) {
  for (var r = t4.length, s = 0; s < r; s++) {
    var n = t4[s];
    n && this.toAssignable(n, e);
  }
  if (r) {
    var a = t4[r - 1];
    this.options.ecmaVersion === 6 && e && a && a.type === "RestElement" && a.argument.type !== "Identifier" && this.unexpected(a.argument.start);
  }
  return t4;
};
zr.parseSpread = function(t4) {
  var e = this.startNode();
  return this.next(), e.argument = this.parseMaybeAssign(false, t4), this.finishNode(e, "SpreadElement");
};
zr.parseRestBinding = function() {
  var t4 = this.startNode();
  return this.next(), this.options.ecmaVersion === 6 && this.type !== $.name && this.unexpected(), t4.argument = this.parseBindingAtom(), this.finishNode(t4, "RestElement");
};
zr.parseBindingAtom = function() {
  if (this.options.ecmaVersion >= 6)
    switch (this.type) {
      case $.bracketL:
        var t4 = this.startNode();
        return this.next(), t4.elements = this.parseBindingList($.bracketR, true, true), this.finishNode(t4, "ArrayPattern");
      case $.braceL:
        return this.parseObj(true);
    }
  return this.parseIdent();
};
zr.parseBindingList = function(t4, e, r) {
  for (var s = [], n = true; !this.eat(t4); )
    if (n ? n = false : this.expect($.comma), e && this.type === $.comma)
      s.push(null);
    else {
      if (r && this.afterTrailingComma(t4))
        break;
      if (this.type === $.ellipsis) {
        var a = this.parseRestBinding();
        this.parseBindingListItem(a), s.push(a), this.type === $.comma && this.raise(this.start, "Comma is not permitted after the rest element"), this.expect(t4);
        break;
      } else {
        var o = this.parseMaybeDefault(this.start, this.startLoc);
        this.parseBindingListItem(o), s.push(o);
      }
    }
  return s;
};
zr.parseBindingListItem = function(t4) {
  return t4;
};
zr.parseMaybeDefault = function(t4, e, r) {
  if (r = r || this.parseBindingAtom(), this.options.ecmaVersion < 6 || !this.eat($.eq))
    return r;
  var s = this.startNodeAt(t4, e);
  return s.left = r, s.right = this.parseMaybeAssign(), this.finishNode(s, "AssignmentPattern");
};
zr.checkLVal = function(t4, e, r) {
  switch (e === void 0 && (e = Nd), t4.type) {
    case "Identifier":
      e === Vr && t4.name === "let" && this.raiseRecoverable(t4.start, "let is disallowed as a lexically bound name"), this.strict && this.reservedWordsStrictBind.test(t4.name) && this.raiseRecoverable(t4.start, (e ? "Binding " : "Assigning to ") + t4.name + " in strict mode"), r && (xi(r, t4.name) && this.raiseRecoverable(t4.start, "Argument name clash"), r[t4.name] = true), e !== Nd && e !== Tx && this.declareName(t4.name, e, t4.start);
      break;
    case "ChainExpression":
      this.raiseRecoverable(t4.start, "Optional chaining cannot appear in left-hand side");
      break;
    case "MemberExpression":
      e && this.raiseRecoverable(t4.start, "Binding member expression");
      break;
    case "ObjectPattern":
      for (var s = 0, n = t4.properties; s < n.length; s += 1) {
        var a = n[s];
        this.checkLVal(a, e, r);
      }
      break;
    case "Property":
      this.checkLVal(t4.value, e, r);
      break;
    case "ArrayPattern":
      for (var o = 0, l = t4.elements; o < l.length; o += 1) {
        var i = l[o];
        i && this.checkLVal(i, e, r);
      }
      break;
    case "AssignmentPattern":
      this.checkLVal(t4.left, e, r);
      break;
    case "RestElement":
      this.checkLVal(t4.argument, e, r);
      break;
    case "ParenthesizedExpression":
      this.checkLVal(t4.expression, e, r);
      break;
    default:
      this.raise(t4.start, (e ? "Binding" : "Assigning to") + " rvalue");
  }
};
var Ue = ht.prototype;
Ue.checkPropClash = function(t4, e, r) {
  if (!(this.options.ecmaVersion >= 9 && t4.type === "SpreadElement") && !(this.options.ecmaVersion >= 6 && (t4.computed || t4.method || t4.shorthand))) {
    var s = t4.key, n;
    switch (s.type) {
      case "Identifier":
        n = s.name;
        break;
      case "Literal":
        n = String(s.value);
        break;
      default:
        return;
    }
    var a = t4.kind;
    if (this.options.ecmaVersion >= 6) {
      n === "__proto__" && a === "init" && (e.proto && (r ? r.doubleProto < 0 && (r.doubleProto = s.start) : this.raiseRecoverable(s.start, "Redefinition of __proto__ property")), e.proto = true);
      return;
    }
    n = "$" + n;
    var o = e[n];
    if (o) {
      var l;
      a === "init" ? l = this.strict && o.init || o.get || o.set : l = o.init || o[a], l && this.raiseRecoverable(s.start, "Redefinition of property");
    } else
      o = e[n] = {
        init: false,
        get: false,
        set: false
      };
    o[a] = true;
  }
};
Ue.parseExpression = function(t4, e) {
  var r = this.start, s = this.startLoc, n = this.parseMaybeAssign(t4, e);
  if (this.type === $.comma) {
    var a = this.startNodeAt(r, s);
    for (a.expressions = [n]; this.eat($.comma); )
      a.expressions.push(this.parseMaybeAssign(t4, e));
    return this.finishNode(a, "SequenceExpression");
  }
  return n;
};
Ue.parseMaybeAssign = function(t4, e, r) {
  if (this.isContextual("yield")) {
    if (this.inGenerator)
      return this.parseYield(t4);
    this.exprAllowed = false;
  }
  var s = false, n = -1, a = -1;
  e ? (n = e.parenthesizedAssign, a = e.trailingComma, e.parenthesizedAssign = e.trailingComma = -1) : (e = new vi(), s = true);
  var o = this.start, l = this.startLoc;
  (this.type === $.parenL || this.type === $.name) && (this.potentialArrowAt = this.start);
  var i = this.parseMaybeConditional(t4, e);
  if (r && (i = r.call(this, i, o, l)), this.type.isAssign) {
    var u = this.startNodeAt(o, l);
    return u.operator = this.value, u.left = this.type === $.eq ? this.toAssignable(i, false, e) : i, s || (e.parenthesizedAssign = e.trailingComma = e.doubleProto = -1), e.shorthandAssign >= u.left.start && (e.shorthandAssign = -1), this.checkLVal(i), this.next(), u.right = this.parseMaybeAssign(t4), this.finishNode(u, "AssignmentExpression");
  } else
    s && this.checkExpressionErrors(e, true);
  return n > -1 && (e.parenthesizedAssign = n), a > -1 && (e.trailingComma = a), i;
};
Ue.parseMaybeConditional = function(t4, e) {
  var r = this.start, s = this.startLoc, n = this.parseExprOps(t4, e);
  if (this.checkExpressionErrors(e))
    return n;
  if (this.eat($.question)) {
    var a = this.startNodeAt(r, s);
    return a.test = n, a.consequent = this.parseMaybeAssign(), this.expect($.colon), a.alternate = this.parseMaybeAssign(t4), this.finishNode(a, "ConditionalExpression");
  }
  return n;
};
Ue.parseExprOps = function(t4, e) {
  var r = this.start, s = this.startLoc, n = this.parseMaybeUnary(e, false);
  return this.checkExpressionErrors(e) || n.start === r && n.type === "ArrowFunctionExpression" ? n : this.parseExprOp(n, r, s, -1, t4);
};
Ue.parseExprOp = function(t4, e, r, s, n) {
  var a = this.type.binop;
  if (a != null && (!n || this.type !== $._in) && a > s) {
    var o = this.type === $.logicalOR || this.type === $.logicalAND, l = this.type === $.coalesce;
    l && (a = $.logicalAND.binop);
    var i = this.value;
    this.next();
    var u = this.start, c = this.startLoc, f = this.parseExprOp(this.parseMaybeUnary(null, false), u, c, a, n), h = this.buildBinary(e, r, t4, f, i, o || l);
    return (o && this.type === $.coalesce || l && (this.type === $.logicalOR || this.type === $.logicalAND)) && this.raiseRecoverable(this.start, "Logical expressions and coalesce expressions cannot be mixed. Wrap either by parentheses"), this.parseExprOp(h, e, r, s, n);
  }
  return t4;
};
Ue.buildBinary = function(t4, e, r, s, n, a) {
  var o = this.startNodeAt(t4, e);
  return o.left = r, o.operator = n, o.right = s, this.finishNode(o, a ? "LogicalExpression" : "BinaryExpression");
};
Ue.parseMaybeUnary = function(t4, e) {
  var r = this.start, s = this.startLoc, n;
  if (this.isContextual("await") && (this.inAsync || !this.inFunction && this.options.allowAwaitOutsideFunction))
    n = this.parseAwait(), e = true;
  else if (this.type.prefix) {
    var a = this.startNode(), o = this.type === $.incDec;
    a.operator = this.value, a.prefix = true, this.next(), a.argument = this.parseMaybeUnary(null, true), this.checkExpressionErrors(t4, true), o ? this.checkLVal(a.argument) : this.strict && a.operator === "delete" && a.argument.type === "Identifier" ? this.raiseRecoverable(a.start, "Deleting local variable in strict mode") : e = true, n = this.finishNode(a, o ? "UpdateExpression" : "UnaryExpression");
  } else {
    if (n = this.parseExprSubscripts(t4), this.checkExpressionErrors(t4))
      return n;
    for (; this.type.postfix && !this.canInsertSemicolon(); ) {
      var l = this.startNodeAt(r, s);
      l.operator = this.value, l.prefix = false, l.argument = n, this.checkLVal(n), this.next(), n = this.finishNode(l, "UpdateExpression");
    }
  }
  return !e && this.eat($.starstar) ? this.buildBinary(r, s, n, this.parseMaybeUnary(null, false), "**", false) : n;
};
Ue.parseExprSubscripts = function(t4) {
  var e = this.start, r = this.startLoc, s = this.parseExprAtom(t4);
  if (s.type === "ArrowFunctionExpression" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== ")")
    return s;
  var n = this.parseSubscripts(s, e, r);
  return t4 && n.type === "MemberExpression" && (t4.parenthesizedAssign >= n.start && (t4.parenthesizedAssign = -1), t4.parenthesizedBind >= n.start && (t4.parenthesizedBind = -1)), n;
};
Ue.parseSubscripts = function(t4, e, r, s) {
  for (var n = this.options.ecmaVersion >= 8 && t4.type === "Identifier" && t4.name === "async" && this.lastTokEnd === t4.end && !this.canInsertSemicolon() && t4.end - t4.start === 5 && this.potentialArrowAt === t4.start, a = false; ; ) {
    var o = this.parseSubscript(t4, e, r, s, n, a);
    if (o.optional && (a = true), o === t4 || o.type === "ArrowFunctionExpression") {
      if (a) {
        var l = this.startNodeAt(e, r);
        l.expression = o, o = this.finishNode(l, "ChainExpression");
      }
      return o;
    }
    t4 = o;
  }
};
Ue.parseSubscript = function(t4, e, r, s, n, a) {
  var o = this.options.ecmaVersion >= 11, l = o && this.eat($.questionDot);
  s && l && this.raise(this.lastTokStart, "Optional chaining cannot appear in the callee of new expressions");
  var i = this.eat($.bracketL);
  if (i || l && this.type !== $.parenL && this.type !== $.backQuote || this.eat($.dot)) {
    var u = this.startNodeAt(e, r);
    u.object = t4, u.property = i ? this.parseExpression() : this.parseIdent(this.options.allowReserved !== "never"), u.computed = !!i, i && this.expect($.bracketR), o && (u.optional = l), t4 = this.finishNode(u, "MemberExpression");
  } else if (!s && this.eat($.parenL)) {
    var c = new vi(), f = this.yieldPos, h = this.awaitPos, p = this.awaitIdentPos;
    this.yieldPos = 0, this.awaitPos = 0, this.awaitIdentPos = 0;
    var m = this.parseExprList($.parenR, this.options.ecmaVersion >= 8, false, c);
    if (n && !l && !this.canInsertSemicolon() && this.eat($.arrow))
      return this.checkPatternErrors(c, false), this.checkYieldAwaitInDefaultParams(), this.awaitIdentPos > 0 && this.raise(this.awaitIdentPos, "Cannot use 'await' as identifier inside an async function"), this.yieldPos = f, this.awaitPos = h, this.awaitIdentPos = p, this.parseArrowExpression(this.startNodeAt(e, r), m, true);
    this.checkExpressionErrors(c, true), this.yieldPos = f || this.yieldPos, this.awaitPos = h || this.awaitPos, this.awaitIdentPos = p || this.awaitIdentPos;
    var d = this.startNodeAt(e, r);
    d.callee = t4, d.arguments = m, o && (d.optional = l), t4 = this.finishNode(d, "CallExpression");
  } else if (this.type === $.backQuote) {
    (l || a) && this.raise(this.start, "Optional chaining cannot appear in the tag of tagged template expressions");
    var g = this.startNodeAt(e, r);
    g.tag = t4, g.quasi = this.parseTemplate({ isTagged: true }), t4 = this.finishNode(g, "TaggedTemplateExpression");
  }
  return t4;
};
Ue.parseExprAtom = function(t4) {
  this.type === $.slash && this.readRegexp();
  var e, r = this.potentialArrowAt === this.start;
  switch (this.type) {
    case $._super:
      return this.allowSuper || this.raise(this.start, "'super' keyword outside a method"), e = this.startNode(), this.next(), this.type === $.parenL && !this.allowDirectSuper && this.raise(e.start, "super() call outside constructor of a subclass"), this.type !== $.dot && this.type !== $.bracketL && this.type !== $.parenL && this.unexpected(), this.finishNode(e, "Super");
    case $._this:
      return e = this.startNode(), this.next(), this.finishNode(e, "ThisExpression");
    case $.name:
      var s = this.start, n = this.startLoc, a = this.containsEsc, o = this.parseIdent(false);
      if (this.options.ecmaVersion >= 8 && !a && o.name === "async" && !this.canInsertSemicolon() && this.eat($._function))
        return this.parseFunction(this.startNodeAt(s, n), 0, false, true);
      if (r && !this.canInsertSemicolon()) {
        if (this.eat($.arrow))
          return this.parseArrowExpression(this.startNodeAt(s, n), [o], false);
        if (this.options.ecmaVersion >= 8 && o.name === "async" && this.type === $.name && !a)
          return o = this.parseIdent(false), (this.canInsertSemicolon() || !this.eat($.arrow)) && this.unexpected(), this.parseArrowExpression(this.startNodeAt(s, n), [o], true);
      }
      return o;
    case $.regexp:
      var l = this.value;
      return e = this.parseLiteral(l.value), e.regex = { pattern: l.pattern, flags: l.flags }, e;
    case $.num:
    case $.string:
      return this.parseLiteral(this.value);
    case $._null:
    case $._true:
    case $._false:
      return e = this.startNode(), e.value = this.type === $._null ? null : this.type === $._true, e.raw = this.type.keyword, this.next(), this.finishNode(e, "Literal");
    case $.parenL:
      var i = this.start, u = this.parseParenAndDistinguishExpression(r);
      return t4 && (t4.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(u) && (t4.parenthesizedAssign = i), t4.parenthesizedBind < 0 && (t4.parenthesizedBind = i)), u;
    case $.bracketL:
      return e = this.startNode(), this.next(), e.elements = this.parseExprList($.bracketR, true, true, t4), this.finishNode(e, "ArrayExpression");
    case $.braceL:
      return this.parseObj(false, t4);
    case $._function:
      return e = this.startNode(), this.next(), this.parseFunction(e, 0);
    case $._class:
      return this.parseClass(this.startNode(), false);
    case $._new:
      return this.parseNew();
    case $.backQuote:
      return this.parseTemplate();
    case $._import:
      return this.options.ecmaVersion >= 11 ? this.parseExprImport() : this.unexpected();
    default:
      this.unexpected();
  }
};
Ue.parseExprImport = function() {
  var t4 = this.startNode();
  this.containsEsc && this.raiseRecoverable(this.start, "Escape sequence in keyword import");
  var e = this.parseIdent(true);
  switch (this.type) {
    case $.parenL:
      return this.parseDynamicImport(t4);
    case $.dot:
      return t4.meta = e, this.parseImportMeta(t4);
    default:
      this.unexpected();
  }
};
Ue.parseDynamicImport = function(t4) {
  if (this.next(), t4.source = this.parseMaybeAssign(), !this.eat($.parenR)) {
    var e = this.start;
    this.eat($.comma) && this.eat($.parenR) ? this.raiseRecoverable(e, "Trailing comma is not allowed in import()") : this.unexpected(e);
  }
  return this.finishNode(t4, "ImportExpression");
};
Ue.parseImportMeta = function(t4) {
  this.next();
  var e = this.containsEsc;
  return t4.property = this.parseIdent(true), t4.property.name !== "meta" && this.raiseRecoverable(t4.property.start, "The only valid meta property for import is 'import.meta'"), e && this.raiseRecoverable(t4.start, "'import.meta' must not contain escaped characters"), this.options.sourceType !== "module" && this.raiseRecoverable(t4.start, "Cannot use 'import.meta' outside a module"), this.finishNode(t4, "MetaProperty");
};
Ue.parseLiteral = function(t4) {
  var e = this.startNode();
  return e.value = t4, e.raw = this.input.slice(this.start, this.end), e.raw.charCodeAt(e.raw.length - 1) === 110 && (e.bigint = e.raw.slice(0, -1).replace(/_/g, "")), this.next(), this.finishNode(e, "Literal");
};
Ue.parseParenExpression = function() {
  this.expect($.parenL);
  var t4 = this.parseExpression();
  return this.expect($.parenR), t4;
};
Ue.parseParenAndDistinguishExpression = function(t4) {
  var e = this.start, r = this.startLoc, s, n = this.options.ecmaVersion >= 8;
  if (this.options.ecmaVersion >= 6) {
    this.next();
    var a = this.start, o = this.startLoc, l = [], i = true, u = false, c = new vi(), f = this.yieldPos, h = this.awaitPos, p;
    for (this.yieldPos = 0, this.awaitPos = 0; this.type !== $.parenR; )
      if (i ? i = false : this.expect($.comma), n && this.afterTrailingComma($.parenR, true)) {
        u = true;
        break;
      } else if (this.type === $.ellipsis) {
        p = this.start, l.push(this.parseParenItem(this.parseRestBinding())), this.type === $.comma && this.raise(this.start, "Comma is not permitted after the rest element");
        break;
      } else
        l.push(this.parseMaybeAssign(false, c, this.parseParenItem));
    var m = this.start, d = this.startLoc;
    if (this.expect($.parenR), t4 && !this.canInsertSemicolon() && this.eat($.arrow))
      return this.checkPatternErrors(c, false), this.checkYieldAwaitInDefaultParams(), this.yieldPos = f, this.awaitPos = h, this.parseParenArrowList(e, r, l);
    (!l.length || u) && this.unexpected(this.lastTokStart), p && this.unexpected(p), this.checkExpressionErrors(c, true), this.yieldPos = f || this.yieldPos, this.awaitPos = h || this.awaitPos, l.length > 1 ? (s = this.startNodeAt(a, o), s.expressions = l, this.finishNodeAt(s, "SequenceExpression", m, d)) : s = l[0];
  } else
    s = this.parseParenExpression();
  if (this.options.preserveParens) {
    var g = this.startNodeAt(e, r);
    return g.expression = s, this.finishNode(g, "ParenthesizedExpression");
  } else
    return s;
};
Ue.parseParenItem = function(t4) {
  return t4;
};
Ue.parseParenArrowList = function(t4, e, r) {
  return this.parseArrowExpression(this.startNodeAt(t4, e), r);
};
var nw = [];
Ue.parseNew = function() {
  this.containsEsc && this.raiseRecoverable(this.start, "Escape sequence in keyword new");
  var t4 = this.startNode(), e = this.parseIdent(true);
  if (this.options.ecmaVersion >= 6 && this.eat($.dot)) {
    t4.meta = e;
    var r = this.containsEsc;
    return t4.property = this.parseIdent(true), t4.property.name !== "target" && this.raiseRecoverable(t4.property.start, "The only valid meta property for new is 'new.target'"), r && this.raiseRecoverable(t4.start, "'new.target' must not contain escaped characters"), this.inNonArrowFunction() || this.raiseRecoverable(t4.start, "'new.target' can only be used in functions"), this.finishNode(t4, "MetaProperty");
  }
  var s = this.start, n = this.startLoc, a = this.type === $._import;
  return t4.callee = this.parseSubscripts(this.parseExprAtom(), s, n, true), a && t4.callee.type === "ImportExpression" && this.raise(s, "Cannot use new with import()"), this.eat($.parenL) ? t4.arguments = this.parseExprList($.parenR, this.options.ecmaVersion >= 8, false) : t4.arguments = nw, this.finishNode(t4, "NewExpression");
};
Ue.parseTemplateElement = function(t4) {
  var e = t4.isTagged, r = this.startNode();
  return this.type === $.invalidTemplate ? (e || this.raiseRecoverable(this.start, "Bad escape sequence in untagged template literal"), r.value = {
    raw: this.value,
    cooked: null
  }) : r.value = {
    raw: this.input.slice(this.start, this.end).replace(/\r\n?/g, `
`),
    cooked: this.value
  }, this.next(), r.tail = this.type === $.backQuote, this.finishNode(r, "TemplateElement");
};
Ue.parseTemplate = function(t4) {
  t4 === void 0 && (t4 = {});
  var e = t4.isTagged;
  e === void 0 && (e = false);
  var r = this.startNode();
  this.next(), r.expressions = [];
  var s = this.parseTemplateElement({ isTagged: e });
  for (r.quasis = [s]; !s.tail; )
    this.type === $.eof && this.raise(this.pos, "Unterminated template literal"), this.expect($.dollarBraceL), r.expressions.push(this.parseExpression()), this.expect($.braceR), r.quasis.push(s = this.parseTemplateElement({ isTagged: e }));
  return this.next(), this.finishNode(r, "TemplateLiteral");
};
Ue.isAsyncProp = function(t4) {
  return !t4.computed && t4.key.type === "Identifier" && t4.key.name === "async" && (this.type === $.name || this.type === $.num || this.type === $.string || this.type === $.bracketL || this.type.keyword || this.options.ecmaVersion >= 9 && this.type === $.star) && !Zt.test(this.input.slice(this.lastTokEnd, this.start));
};
Ue.parseObj = function(t4, e) {
  var r = this.startNode(), s = true, n = {};
  for (r.properties = [], this.next(); !this.eat($.braceR); ) {
    if (s)
      s = false;
    else if (this.expect($.comma), this.options.ecmaVersion >= 5 && this.afterTrailingComma($.braceR))
      break;
    var a = this.parseProperty(t4, e);
    t4 || this.checkPropClash(a, n, e), r.properties.push(a);
  }
  return this.finishNode(r, t4 ? "ObjectPattern" : "ObjectExpression");
};
Ue.parseProperty = function(t4, e) {
  var r = this.startNode(), s, n, a, o;
  if (this.options.ecmaVersion >= 9 && this.eat($.ellipsis))
    return t4 ? (r.argument = this.parseIdent(false), this.type === $.comma && this.raise(this.start, "Comma is not permitted after the rest element"), this.finishNode(r, "RestElement")) : (this.type === $.parenL && e && (e.parenthesizedAssign < 0 && (e.parenthesizedAssign = this.start), e.parenthesizedBind < 0 && (e.parenthesizedBind = this.start)), r.argument = this.parseMaybeAssign(false, e), this.type === $.comma && e && e.trailingComma < 0 && (e.trailingComma = this.start), this.finishNode(r, "SpreadElement"));
  this.options.ecmaVersion >= 6 && (r.method = false, r.shorthand = false, (t4 || e) && (a = this.start, o = this.startLoc), t4 || (s = this.eat($.star)));
  var l = this.containsEsc;
  return this.parsePropertyName(r), !t4 && !l && this.options.ecmaVersion >= 8 && !s && this.isAsyncProp(r) ? (n = true, s = this.options.ecmaVersion >= 9 && this.eat($.star), this.parsePropertyName(r, e)) : n = false, this.parsePropertyValue(r, t4, s, n, a, o, e, l), this.finishNode(r, "Property");
};
Ue.parsePropertyValue = function(t4, e, r, s, n, a, o, l) {
  if ((r || s) && this.type === $.colon && this.unexpected(), this.eat($.colon))
    t4.value = e ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, o), t4.kind = "init";
  else if (this.options.ecmaVersion >= 6 && this.type === $.parenL)
    e && this.unexpected(), t4.kind = "init", t4.method = true, t4.value = this.parseMethod(r, s);
  else if (!e && !l && this.options.ecmaVersion >= 5 && !t4.computed && t4.key.type === "Identifier" && (t4.key.name === "get" || t4.key.name === "set") && this.type !== $.comma && this.type !== $.braceR && this.type !== $.eq) {
    (r || s) && this.unexpected(), t4.kind = t4.key.name, this.parsePropertyName(t4), t4.value = this.parseMethod(false);
    var i = t4.kind === "get" ? 0 : 1;
    if (t4.value.params.length !== i) {
      var u = t4.value.start;
      t4.kind === "get" ? this.raiseRecoverable(u, "getter should have no params") : this.raiseRecoverable(u, "setter should have exactly one param");
    } else
      t4.kind === "set" && t4.value.params[0].type === "RestElement" && this.raiseRecoverable(t4.value.params[0].start, "Setter cannot use rest params");
  } else
    this.options.ecmaVersion >= 6 && !t4.computed && t4.key.type === "Identifier" ? ((r || s) && this.unexpected(), this.checkUnreserved(t4.key), t4.key.name === "await" && !this.awaitIdentPos && (this.awaitIdentPos = n), t4.kind = "init", e ? t4.value = this.parseMaybeDefault(n, a, t4.key) : this.type === $.eq && o ? (o.shorthandAssign < 0 && (o.shorthandAssign = this.start), t4.value = this.parseMaybeDefault(n, a, t4.key)) : t4.value = t4.key, t4.shorthand = true) : this.unexpected();
};
Ue.parsePropertyName = function(t4) {
  if (this.options.ecmaVersion >= 6) {
    if (this.eat($.bracketL))
      return t4.computed = true, t4.key = this.parseMaybeAssign(), this.expect($.bracketR), t4.key;
    t4.computed = false;
  }
  return t4.key = this.type === $.num || this.type === $.string ? this.parseExprAtom() : this.parseIdent(this.options.allowReserved !== "never");
};
Ue.initFunction = function(t4) {
  t4.id = null, this.options.ecmaVersion >= 6 && (t4.generator = t4.expression = false), this.options.ecmaVersion >= 8 && (t4.async = false);
};
Ue.parseMethod = function(t4, e, r) {
  var s = this.startNode(), n = this.yieldPos, a = this.awaitPos, o = this.awaitIdentPos;
  return this.initFunction(s), this.options.ecmaVersion >= 6 && (s.generator = t4), this.options.ecmaVersion >= 8 && (s.async = !!e), this.yieldPos = 0, this.awaitPos = 0, this.awaitIdentPos = 0, this.enterScope(cu(e, s.generator) | Ax | (r ? Dx : 0)), this.expect($.parenL), s.params = this.parseBindingList($.parenR, false, this.options.ecmaVersion >= 8), this.checkYieldAwaitInDefaultParams(), this.parseFunctionBody(s, false, true), this.yieldPos = n, this.awaitPos = a, this.awaitIdentPos = o, this.finishNode(s, "FunctionExpression");
};
Ue.parseArrowExpression = function(t4, e, r) {
  var s = this.yieldPos, n = this.awaitPos, a = this.awaitIdentPos;
  return this.enterScope(cu(r, false) | Cx), this.initFunction(t4), this.options.ecmaVersion >= 8 && (t4.async = !!r), this.yieldPos = 0, this.awaitPos = 0, this.awaitIdentPos = 0, t4.params = this.toAssignableList(e, true), this.parseFunctionBody(t4, true, false), this.yieldPos = s, this.awaitPos = n, this.awaitIdentPos = a, this.finishNode(t4, "ArrowFunctionExpression");
};
Ue.parseFunctionBody = function(t4, e, r) {
  var s = e && this.type !== $.braceL, n = this.strict, a = false;
  if (s)
    t4.body = this.parseMaybeAssign(), t4.expression = true, this.checkParams(t4, false);
  else {
    var o = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(t4.params);
    (!n || o) && (a = this.strictDirective(this.end), a && o && this.raiseRecoverable(t4.start, "Illegal 'use strict' directive in function with non-simple parameter list"));
    var l = this.labels;
    this.labels = [], a && (this.strict = true), this.checkParams(t4, !n && !a && !e && !r && this.isSimpleParamList(t4.params)), this.strict && t4.id && this.checkLVal(t4.id, Tx), t4.body = this.parseBlock(false, void 0, a && !n), t4.expression = false, this.adaptDirectivePrologue(t4.body.body), this.labels = l;
  }
  this.exitScope();
};
Ue.isSimpleParamList = function(t4) {
  for (var e = 0, r = t4; e < r.length; e += 1) {
    var s = r[e];
    if (s.type !== "Identifier")
      return false;
  }
  return true;
};
Ue.checkParams = function(t4, e) {
  for (var r = {}, s = 0, n = t4.params; s < n.length; s += 1) {
    var a = n[s];
    this.checkLVal(a, pu, e ? null : r);
  }
};
Ue.parseExprList = function(t4, e, r, s) {
  for (var n = [], a = true; !this.eat(t4); ) {
    if (a)
      a = false;
    else if (this.expect($.comma), e && this.afterTrailingComma(t4))
      break;
    var o = void 0;
    r && this.type === $.comma ? o = null : this.type === $.ellipsis ? (o = this.parseSpread(s), s && this.type === $.comma && s.trailingComma < 0 && (s.trailingComma = this.start)) : o = this.parseMaybeAssign(false, s), n.push(o);
  }
  return n;
};
Ue.checkUnreserved = function(t4) {
  var e = t4.start, r = t4.end, s = t4.name;
  if (this.inGenerator && s === "yield" && this.raiseRecoverable(e, "Cannot use 'yield' as identifier inside a generator"), this.inAsync && s === "await" && this.raiseRecoverable(e, "Cannot use 'await' as identifier inside an async function"), this.keywords.test(s) && this.raise(e, "Unexpected keyword '" + s + "'"), !(this.options.ecmaVersion < 6 && this.input.slice(e, r).indexOf("\\") !== -1)) {
    var n = this.strict ? this.reservedWordsStrict : this.reservedWords;
    n.test(s) && (!this.inAsync && s === "await" && this.raiseRecoverable(e, "Cannot use keyword 'await' outside an async function"), this.raiseRecoverable(e, "The keyword '" + s + "' is reserved"));
  }
};
Ue.parseIdent = function(t4, e) {
  var r = this.startNode();
  return this.type === $.name ? r.name = this.value : this.type.keyword ? (r.name = this.type.keyword, (r.name === "class" || r.name === "function") && (this.lastTokEnd !== this.lastTokStart + 1 || this.input.charCodeAt(this.lastTokStart) !== 46) && this.context.pop()) : this.unexpected(), this.next(!!t4), this.finishNode(r, "Identifier"), t4 || (this.checkUnreserved(r), r.name === "await" && !this.awaitIdentPos && (this.awaitIdentPos = r.start)), r;
};
Ue.parseYield = function(t4) {
  this.yieldPos || (this.yieldPos = this.start);
  var e = this.startNode();
  return this.next(), this.type === $.semi || this.canInsertSemicolon() || this.type !== $.star && !this.type.startsExpr ? (e.delegate = false, e.argument = null) : (e.delegate = this.eat($.star), e.argument = this.parseMaybeAssign(t4)), this.finishNode(e, "YieldExpression");
};
Ue.parseAwait = function() {
  this.awaitPos || (this.awaitPos = this.start);
  var t4 = this.startNode();
  return this.next(), t4.argument = this.parseMaybeUnary(null, false), this.finishNode(t4, "AwaitExpression");
};
var Wa = ht.prototype;
Wa.raise = function(t4, e) {
  var r = lu(this.input, t4);
  e += " (" + r.line + ":" + r.column + ")";
  var s = new SyntaxError(e);
  throw s.pos = t4, s.loc = r, s.raisedAt = this.pos, s;
};
Wa.raiseRecoverable = Wa.raise;
Wa.curPosition = function() {
  if (this.options.locations)
    return new as(this.curLine, this.pos - this.lineStart);
};
var ln = ht.prototype;
var sw = function(e) {
  this.flags = e, this.var = [], this.lexical = [], this.functions = [];
};
ln.enterScope = function(t4) {
  this.scopeStack.push(new sw(t4));
};
ln.exitScope = function() {
  this.scopeStack.pop();
};
ln.treatFunctionsAsVarInScope = function(t4) {
  return t4.flags & Hs || !this.inModule && t4.flags & js;
};
ln.declareName = function(t4, e, r) {
  var s = false;
  if (e === Vr) {
    var n = this.currentScope();
    s = n.lexical.indexOf(t4) > -1 || n.functions.indexOf(t4) > -1 || n.var.indexOf(t4) > -1, n.lexical.push(t4), this.inModule && n.flags & js && delete this.undefinedExports[t4];
  } else if (e === kx) {
    var a = this.currentScope();
    a.lexical.push(t4);
  } else if (e === wx) {
    var o = this.currentScope();
    this.treatFunctionsAsVar ? s = o.lexical.indexOf(t4) > -1 : s = o.lexical.indexOf(t4) > -1 || o.var.indexOf(t4) > -1, o.functions.push(t4);
  } else
    for (var l = this.scopeStack.length - 1; l >= 0; --l) {
      var i = this.scopeStack[l];
      if (i.lexical.indexOf(t4) > -1 && !(i.flags & Sx && i.lexical[0] === t4) || !this.treatFunctionsAsVarInScope(i) && i.functions.indexOf(t4) > -1) {
        s = true;
        break;
      }
      if (i.var.push(t4), this.inModule && i.flags & js && delete this.undefinedExports[t4], i.flags & uu)
        break;
    }
  s && this.raiseRecoverable(r, "Identifier '" + t4 + "' has already been declared");
};
ln.checkLocalExport = function(t4) {
  this.scopeStack[0].lexical.indexOf(t4.name) === -1 && this.scopeStack[0].var.indexOf(t4.name) === -1 && (this.undefinedExports[t4.name] = t4);
};
ln.currentScope = function() {
  return this.scopeStack[this.scopeStack.length - 1];
};
ln.currentVarScope = function() {
  for (var t4 = this.scopeStack.length - 1; ; t4--) {
    var e = this.scopeStack[t4];
    if (e.flags & uu)
      return e;
  }
};
ln.currentThisScope = function() {
  for (var t4 = this.scopeStack.length - 1; ; t4--) {
    var e = this.scopeStack[t4];
    if (e.flags & uu && !(e.flags & Cx))
      return e;
  }
};
var Ei = function(e, r, s) {
  this.type = "", this.start = r, this.end = 0, e.options.locations && (this.loc = new Gs(e, s)), e.options.directSourceFile && (this.sourceFile = e.options.directSourceFile), e.options.ranges && (this.range = [r, 0]);
};
var bi = ht.prototype;
bi.startNode = function() {
  return new Ei(this, this.start, this.startLoc);
};
bi.startNodeAt = function(t4, e) {
  return new Ei(this, t4, e);
};
function Px(t4, e, r, s) {
  return t4.type = e, t4.end = r, this.options.locations && (t4.loc.end = s), this.options.ranges && (t4.range[1] = r), t4;
}
bi.finishNode = function(t4, e) {
  return Px.call(this, t4, e, this.lastTokEnd, this.lastTokEndLoc);
};
bi.finishNodeAt = function(t4, e, r, s) {
  return Px.call(this, t4, e, r, s);
};
var lr = function(e, r, s, n, a) {
  this.token = e, this.isExpr = !!r, this.preserveSpace = !!s, this.override = n, this.generator = !!a;
};
var gt = {
  b_stat: new lr("{", false),
  b_expr: new lr("{", true),
  b_tmpl: new lr("${", false),
  p_stat: new lr("(", false),
  p_expr: new lr("(", true),
  q_tmpl: new lr("`", true, true, function(t4) {
    return t4.tryReadTemplateToken();
  }),
  f_stat: new lr("function", false),
  f_expr: new lr("function", true),
  f_expr_gen: new lr("function", true, false, null, true),
  f_gen: new lr("function", false, false, null, true)
};
var Ci = ht.prototype;
Ci.initialContext = function() {
  return [gt.b_stat];
};
Ci.braceIsBlock = function(t4) {
  var e = this.curContext();
  return e === gt.f_expr || e === gt.f_stat ? true : t4 === $.colon && (e === gt.b_stat || e === gt.b_expr) ? !e.isExpr : t4 === $._return || t4 === $.name && this.exprAllowed ? Zt.test(this.input.slice(this.lastTokEnd, this.start)) : t4 === $._else || t4 === $.semi || t4 === $.eof || t4 === $.parenR || t4 === $.arrow ? true : t4 === $.braceL ? e === gt.b_stat : t4 === $._var || t4 === $._const || t4 === $.name ? false : !this.exprAllowed;
};
Ci.inGeneratorContext = function() {
  for (var t4 = this.context.length - 1; t4 >= 1; t4--) {
    var e = this.context[t4];
    if (e.token === "function")
      return e.generator;
  }
  return false;
};
Ci.updateContext = function(t4) {
  var e, r = this.type;
  r.keyword && t4 === $.dot ? this.exprAllowed = false : (e = r.updateContext) ? e.call(this, t4) : this.exprAllowed = r.beforeExpr;
};
$.parenR.updateContext = $.braceR.updateContext = function() {
  if (this.context.length === 1) {
    this.exprAllowed = true;
    return;
  }
  var t4 = this.context.pop();
  t4 === gt.b_stat && this.curContext().token === "function" && (t4 = this.context.pop()), this.exprAllowed = !t4.isExpr;
};
$.braceL.updateContext = function(t4) {
  this.context.push(this.braceIsBlock(t4) ? gt.b_stat : gt.b_expr), this.exprAllowed = true;
};
$.dollarBraceL.updateContext = function() {
  this.context.push(gt.b_tmpl), this.exprAllowed = true;
};
$.parenL.updateContext = function(t4) {
  var e = t4 === $._if || t4 === $._for || t4 === $._with || t4 === $._while;
  this.context.push(e ? gt.p_stat : gt.p_expr), this.exprAllowed = true;
};
$.incDec.updateContext = function() {
};
$._function.updateContext = $._class.updateContext = function(t4) {
  t4.beforeExpr && t4 !== $.semi && t4 !== $._else && !(t4 === $._return && Zt.test(this.input.slice(this.lastTokEnd, this.start))) && !((t4 === $.colon || t4 === $.braceL) && this.curContext() === gt.b_stat) ? this.context.push(gt.f_expr) : this.context.push(gt.f_stat), this.exprAllowed = false;
};
$.backQuote.updateContext = function() {
  this.curContext() === gt.q_tmpl ? this.context.pop() : this.context.push(gt.q_tmpl), this.exprAllowed = false;
};
$.star.updateContext = function(t4) {
  if (t4 === $._function) {
    var e = this.context.length - 1;
    this.context[e] === gt.f_expr ? this.context[e] = gt.f_expr_gen : this.context[e] = gt.f_gen;
  }
  this.exprAllowed = true;
};
$.name.updateContext = function(t4) {
  var e = false;
  this.options.ecmaVersion >= 6 && t4 !== $.dot && (this.value === "of" && !this.exprAllowed || this.value === "yield" && this.inGeneratorContext()) && (e = true), this.exprAllowed = e;
};
var Ix = "ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS";
var _x = Ix + " Extended_Pictographic";
var aw = _x;
var iw = {
  9: Ix,
  10: _x,
  11: aw
};
var jd = "Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu";
var Bx = "Adlam Adlm Ahom Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb";
var Ox = Bx + " Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd";
var ow = Ox + " Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho";
var lw = {
  9: Bx,
  10: Ox,
  11: ow
};
var Lx = {};
function hu(t4) {
  var e = Lx[t4] = {
    binary: Sn(iw[t4] + " " + jd),
    nonBinary: {
      General_Category: Sn(jd),
      Script: Sn(lw[t4])
    }
  };
  e.nonBinary.Script_Extensions = e.nonBinary.Script, e.nonBinary.gc = e.nonBinary.General_Category, e.nonBinary.sc = e.nonBinary.Script, e.nonBinary.scx = e.nonBinary.Script_Extensions;
}
hu(9);
hu(10);
hu(11);
var Le = ht.prototype;
var Gr = function(e) {
  this.parser = e, this.validFlags = "gim" + (e.options.ecmaVersion >= 6 ? "uy" : "") + (e.options.ecmaVersion >= 9 ? "s" : ""), this.unicodeProperties = Lx[e.options.ecmaVersion >= 11 ? 11 : e.options.ecmaVersion], this.source = "", this.flags = "", this.start = 0, this.switchU = false, this.switchN = false, this.pos = 0, this.lastIntValue = 0, this.lastStringValue = "", this.lastAssertionIsQuantifiable = false, this.numCapturingParens = 0, this.maxBackReference = 0, this.groupNames = [], this.backReferenceNames = [];
};
Gr.prototype.reset = function(e, r, s) {
  var n = s.indexOf("u") !== -1;
  this.start = e | 0, this.source = r + "", this.flags = s, this.switchU = n && this.parser.options.ecmaVersion >= 6, this.switchN = n && this.parser.options.ecmaVersion >= 9;
};
Gr.prototype.raise = function(e) {
  this.parser.raiseRecoverable(this.start, "Invalid regular expression: /" + this.source + "/: " + e);
};
Gr.prototype.at = function(e, r) {
  r === void 0 && (r = false);
  var s = this.source, n = s.length;
  if (e >= n)
    return -1;
  var a = s.charCodeAt(e);
  if (!(r || this.switchU) || a <= 55295 || a >= 57344 || e + 1 >= n)
    return a;
  var o = s.charCodeAt(e + 1);
  return o >= 56320 && o <= 57343 ? (a << 10) + o - 56613888 : a;
};
Gr.prototype.nextIndex = function(e, r) {
  r === void 0 && (r = false);
  var s = this.source, n = s.length;
  if (e >= n)
    return n;
  var a = s.charCodeAt(e), o;
  return !(r || this.switchU) || a <= 55295 || a >= 57344 || e + 1 >= n || (o = s.charCodeAt(e + 1)) < 56320 || o > 57343 ? e + 1 : e + 2;
};
Gr.prototype.current = function(e) {
  return e === void 0 && (e = false), this.at(this.pos, e);
};
Gr.prototype.lookahead = function(e) {
  return e === void 0 && (e = false), this.at(this.nextIndex(this.pos, e), e);
};
Gr.prototype.advance = function(e) {
  e === void 0 && (e = false), this.pos = this.nextIndex(this.pos, e);
};
Gr.prototype.eat = function(e, r) {
  return r === void 0 && (r = false), this.current(r) === e ? (this.advance(r), true) : false;
};
function za(t4) {
  return t4 <= 65535 ? String.fromCharCode(t4) : (t4 -= 65536, String.fromCharCode((t4 >> 10) + 55296, (t4 & 1023) + 56320));
}
Le.validateRegExpFlags = function(t4) {
  for (var e = t4.validFlags, r = t4.flags, s = 0; s < r.length; s++) {
    var n = r.charAt(s);
    e.indexOf(n) === -1 && this.raise(t4.start, "Invalid regular expression flag"), r.indexOf(n, s + 1) > -1 && this.raise(t4.start, "Duplicate regular expression flag");
  }
};
Le.validateRegExpPattern = function(t4) {
  this.regexp_pattern(t4), !t4.switchN && this.options.ecmaVersion >= 9 && t4.groupNames.length > 0 && (t4.switchN = true, this.regexp_pattern(t4));
};
Le.regexp_pattern = function(t4) {
  t4.pos = 0, t4.lastIntValue = 0, t4.lastStringValue = "", t4.lastAssertionIsQuantifiable = false, t4.numCapturingParens = 0, t4.maxBackReference = 0, t4.groupNames.length = 0, t4.backReferenceNames.length = 0, this.regexp_disjunction(t4), t4.pos !== t4.source.length && (t4.eat(
    41
    /* ) */
  ) && t4.raise("Unmatched ')'"), (t4.eat(
    93
    /* ] */
  ) || t4.eat(
    125
    /* } */
  )) && t4.raise("Lone quantifier brackets")), t4.maxBackReference > t4.numCapturingParens && t4.raise("Invalid escape");
  for (var e = 0, r = t4.backReferenceNames; e < r.length; e += 1) {
    var s = r[e];
    t4.groupNames.indexOf(s) === -1 && t4.raise("Invalid named capture referenced");
  }
};
Le.regexp_disjunction = function(t4) {
  for (this.regexp_alternative(t4); t4.eat(
    124
    /* | */
  ); )
    this.regexp_alternative(t4);
  this.regexp_eatQuantifier(t4, true) && t4.raise("Nothing to repeat"), t4.eat(
    123
    /* { */
  ) && t4.raise("Lone quantifier brackets");
};
Le.regexp_alternative = function(t4) {
  for (; t4.pos < t4.source.length && this.regexp_eatTerm(t4); )
    ;
};
Le.regexp_eatTerm = function(t4) {
  return this.regexp_eatAssertion(t4) ? (t4.lastAssertionIsQuantifiable && this.regexp_eatQuantifier(t4) && t4.switchU && t4.raise("Invalid quantifier"), true) : (t4.switchU ? this.regexp_eatAtom(t4) : this.regexp_eatExtendedAtom(t4)) ? (this.regexp_eatQuantifier(t4), true) : false;
};
Le.regexp_eatAssertion = function(t4) {
  var e = t4.pos;
  if (t4.lastAssertionIsQuantifiable = false, t4.eat(
    94
    /* ^ */
  ) || t4.eat(
    36
    /* $ */
  ))
    return true;
  if (t4.eat(
    92
    /* \ */
  )) {
    if (t4.eat(
      66
      /* B */
    ) || t4.eat(
      98
      /* b */
    ))
      return true;
    t4.pos = e;
  }
  if (t4.eat(
    40
    /* ( */
  ) && t4.eat(
    63
    /* ? */
  )) {
    var r = false;
    if (this.options.ecmaVersion >= 9 && (r = t4.eat(
      60
      /* < */
    )), t4.eat(
      61
      /* = */
    ) || t4.eat(
      33
      /* ! */
    ))
      return this.regexp_disjunction(t4), t4.eat(
        41
        /* ) */
      ) || t4.raise("Unterminated group"), t4.lastAssertionIsQuantifiable = !r, true;
  }
  return t4.pos = e, false;
};
Le.regexp_eatQuantifier = function(t4, e) {
  return e === void 0 && (e = false), this.regexp_eatQuantifierPrefix(t4, e) ? (t4.eat(
    63
    /* ? */
  ), true) : false;
};
Le.regexp_eatQuantifierPrefix = function(t4, e) {
  return t4.eat(
    42
    /* * */
  ) || t4.eat(
    43
    /* + */
  ) || t4.eat(
    63
    /* ? */
  ) || this.regexp_eatBracedQuantifier(t4, e);
};
Le.regexp_eatBracedQuantifier = function(t4, e) {
  var r = t4.pos;
  if (t4.eat(
    123
    /* { */
  )) {
    var s = 0, n = -1;
    if (this.regexp_eatDecimalDigits(t4) && (s = t4.lastIntValue, t4.eat(
      44
      /* , */
    ) && this.regexp_eatDecimalDigits(t4) && (n = t4.lastIntValue), t4.eat(
      125
      /* } */
    )))
      return n !== -1 && n < s && !e && t4.raise("numbers out of order in {} quantifier"), true;
    t4.switchU && !e && t4.raise("Incomplete quantifier"), t4.pos = r;
  }
  return false;
};
Le.regexp_eatAtom = function(t4) {
  return this.regexp_eatPatternCharacters(t4) || t4.eat(
    46
    /* . */
  ) || this.regexp_eatReverseSolidusAtomEscape(t4) || this.regexp_eatCharacterClass(t4) || this.regexp_eatUncapturingGroup(t4) || this.regexp_eatCapturingGroup(t4);
};
Le.regexp_eatReverseSolidusAtomEscape = function(t4) {
  var e = t4.pos;
  if (t4.eat(
    92
    /* \ */
  )) {
    if (this.regexp_eatAtomEscape(t4))
      return true;
    t4.pos = e;
  }
  return false;
};
Le.regexp_eatUncapturingGroup = function(t4) {
  var e = t4.pos;
  if (t4.eat(
    40
    /* ( */
  )) {
    if (t4.eat(
      63
      /* ? */
    ) && t4.eat(
      58
      /* : */
    )) {
      if (this.regexp_disjunction(t4), t4.eat(
        41
        /* ) */
      ))
        return true;
      t4.raise("Unterminated group");
    }
    t4.pos = e;
  }
  return false;
};
Le.regexp_eatCapturingGroup = function(t4) {
  if (t4.eat(
    40
    /* ( */
  )) {
    if (this.options.ecmaVersion >= 9 ? this.regexp_groupSpecifier(t4) : t4.current() === 63 && t4.raise("Invalid group"), this.regexp_disjunction(t4), t4.eat(
      41
      /* ) */
    ))
      return t4.numCapturingParens += 1, true;
    t4.raise("Unterminated group");
  }
  return false;
};
Le.regexp_eatExtendedAtom = function(t4) {
  return t4.eat(
    46
    /* . */
  ) || this.regexp_eatReverseSolidusAtomEscape(t4) || this.regexp_eatCharacterClass(t4) || this.regexp_eatUncapturingGroup(t4) || this.regexp_eatCapturingGroup(t4) || this.regexp_eatInvalidBracedQuantifier(t4) || this.regexp_eatExtendedPatternCharacter(t4);
};
Le.regexp_eatInvalidBracedQuantifier = function(t4) {
  return this.regexp_eatBracedQuantifier(t4, true) && t4.raise("Nothing to repeat"), false;
};
Le.regexp_eatSyntaxCharacter = function(t4) {
  var e = t4.current();
  return Rx(e) ? (t4.lastIntValue = e, t4.advance(), true) : false;
};
function Rx(t4) {
  return t4 === 36 || t4 >= 40 && t4 <= 43 || t4 === 46 || t4 === 63 || t4 >= 91 && t4 <= 94 || t4 >= 123 && t4 <= 125;
}
Le.regexp_eatPatternCharacters = function(t4) {
  for (var e = t4.pos, r = 0; (r = t4.current()) !== -1 && !Rx(r); )
    t4.advance();
  return t4.pos !== e;
};
Le.regexp_eatExtendedPatternCharacter = function(t4) {
  var e = t4.current();
  return e !== -1 && e !== 36 && !(e >= 40 && e <= 43) && e !== 46 && e !== 63 && e !== 91 && e !== 94 && e !== 124 ? (t4.advance(), true) : false;
};
Le.regexp_groupSpecifier = function(t4) {
  if (t4.eat(
    63
    /* ? */
  )) {
    if (this.regexp_eatGroupName(t4)) {
      t4.groupNames.indexOf(t4.lastStringValue) !== -1 && t4.raise("Duplicate capture group name"), t4.groupNames.push(t4.lastStringValue);
      return;
    }
    t4.raise("Invalid group");
  }
};
Le.regexp_eatGroupName = function(t4) {
  if (t4.lastStringValue = "", t4.eat(
    60
    /* < */
  )) {
    if (this.regexp_eatRegExpIdentifierName(t4) && t4.eat(
      62
      /* > */
    ))
      return true;
    t4.raise("Invalid capture group name");
  }
  return false;
};
Le.regexp_eatRegExpIdentifierName = function(t4) {
  if (t4.lastStringValue = "", this.regexp_eatRegExpIdentifierStart(t4)) {
    for (t4.lastStringValue += za(t4.lastIntValue); this.regexp_eatRegExpIdentifierPart(t4); )
      t4.lastStringValue += za(t4.lastIntValue);
    return true;
  }
  return false;
};
Le.regexp_eatRegExpIdentifierStart = function(t4) {
  var e = t4.pos, r = this.options.ecmaVersion >= 11, s = t4.current(r);
  return t4.advance(r), s === 92 && this.regexp_eatRegExpUnicodeEscapeSequence(t4, r) && (s = t4.lastIntValue), uw(s) ? (t4.lastIntValue = s, true) : (t4.pos = e, false);
};
function uw(t4) {
  return Ur(t4, true) || t4 === 36 || t4 === 95;
}
Le.regexp_eatRegExpIdentifierPart = function(t4) {
  var e = t4.pos, r = this.options.ecmaVersion >= 11, s = t4.current(r);
  return t4.advance(r), s === 92 && this.regexp_eatRegExpUnicodeEscapeSequence(t4, r) && (s = t4.lastIntValue), cw(s) ? (t4.lastIntValue = s, true) : (t4.pos = e, false);
};
function cw(t4) {
  return Tn(t4, true) || t4 === 36 || t4 === 95 || t4 === 8204 || t4 === 8205;
}
Le.regexp_eatAtomEscape = function(t4) {
  return this.regexp_eatBackReference(t4) || this.regexp_eatCharacterClassEscape(t4) || this.regexp_eatCharacterEscape(t4) || t4.switchN && this.regexp_eatKGroupName(t4) ? true : (t4.switchU && (t4.current() === 99 && t4.raise("Invalid unicode escape"), t4.raise("Invalid escape")), false);
};
Le.regexp_eatBackReference = function(t4) {
  var e = t4.pos;
  if (this.regexp_eatDecimalEscape(t4)) {
    var r = t4.lastIntValue;
    if (t4.switchU)
      return r > t4.maxBackReference && (t4.maxBackReference = r), true;
    if (r <= t4.numCapturingParens)
      return true;
    t4.pos = e;
  }
  return false;
};
Le.regexp_eatKGroupName = function(t4) {
  if (t4.eat(
    107
    /* k */
  )) {
    if (this.regexp_eatGroupName(t4))
      return t4.backReferenceNames.push(t4.lastStringValue), true;
    t4.raise("Invalid named reference");
  }
  return false;
};
Le.regexp_eatCharacterEscape = function(t4) {
  return this.regexp_eatControlEscape(t4) || this.regexp_eatCControlLetter(t4) || this.regexp_eatZero(t4) || this.regexp_eatHexEscapeSequence(t4) || this.regexp_eatRegExpUnicodeEscapeSequence(t4, false) || !t4.switchU && this.regexp_eatLegacyOctalEscapeSequence(t4) || this.regexp_eatIdentityEscape(t4);
};
Le.regexp_eatCControlLetter = function(t4) {
  var e = t4.pos;
  if (t4.eat(
    99
    /* c */
  )) {
    if (this.regexp_eatControlLetter(t4))
      return true;
    t4.pos = e;
  }
  return false;
};
Le.regexp_eatZero = function(t4) {
  return t4.current() === 48 && !Si(t4.lookahead()) ? (t4.lastIntValue = 0, t4.advance(), true) : false;
};
Le.regexp_eatControlEscape = function(t4) {
  var e = t4.current();
  return e === 116 ? (t4.lastIntValue = 9, t4.advance(), true) : e === 110 ? (t4.lastIntValue = 10, t4.advance(), true) : e === 118 ? (t4.lastIntValue = 11, t4.advance(), true) : e === 102 ? (t4.lastIntValue = 12, t4.advance(), true) : e === 114 ? (t4.lastIntValue = 13, t4.advance(), true) : false;
};
Le.regexp_eatControlLetter = function(t4) {
  var e = t4.current();
  return Nx(e) ? (t4.lastIntValue = e % 32, t4.advance(), true) : false;
};
function Nx(t4) {
  return t4 >= 65 && t4 <= 90 || t4 >= 97 && t4 <= 122;
}
Le.regexp_eatRegExpUnicodeEscapeSequence = function(t4, e) {
  e === void 0 && (e = false);
  var r = t4.pos, s = e || t4.switchU;
  if (t4.eat(
    117
    /* u */
  )) {
    if (this.regexp_eatFixedHexDigits(t4, 4)) {
      var n = t4.lastIntValue;
      if (s && n >= 55296 && n <= 56319) {
        var a = t4.pos;
        if (t4.eat(
          92
          /* \ */
        ) && t4.eat(
          117
          /* u */
        ) && this.regexp_eatFixedHexDigits(t4, 4)) {
          var o = t4.lastIntValue;
          if (o >= 56320 && o <= 57343)
            return t4.lastIntValue = (n - 55296) * 1024 + (o - 56320) + 65536, true;
        }
        t4.pos = a, t4.lastIntValue = n;
      }
      return true;
    }
    if (s && t4.eat(
      123
      /* { */
    ) && this.regexp_eatHexDigits(t4) && t4.eat(
      125
      /* } */
    ) && pw(t4.lastIntValue))
      return true;
    s && t4.raise("Invalid unicode escape"), t4.pos = r;
  }
  return false;
};
function pw(t4) {
  return t4 >= 0 && t4 <= 1114111;
}
Le.regexp_eatIdentityEscape = function(t4) {
  if (t4.switchU)
    return this.regexp_eatSyntaxCharacter(t4) ? true : t4.eat(
      47
      /* / */
    ) ? (t4.lastIntValue = 47, true) : false;
  var e = t4.current();
  return e !== 99 && (!t4.switchN || e !== 107) ? (t4.lastIntValue = e, t4.advance(), true) : false;
};
Le.regexp_eatDecimalEscape = function(t4) {
  t4.lastIntValue = 0;
  var e = t4.current();
  if (e >= 49 && e <= 57) {
    do
      t4.lastIntValue = 10 * t4.lastIntValue + (e - 48), t4.advance();
    while ((e = t4.current()) >= 48 && e <= 57);
    return true;
  }
  return false;
};
Le.regexp_eatCharacterClassEscape = function(t4) {
  var e = t4.current();
  if (fw(e))
    return t4.lastIntValue = -1, t4.advance(), true;
  if (t4.switchU && this.options.ecmaVersion >= 9 && (e === 80 || e === 112)) {
    if (t4.lastIntValue = -1, t4.advance(), t4.eat(
      123
      /* { */
    ) && this.regexp_eatUnicodePropertyValueExpression(t4) && t4.eat(
      125
      /* } */
    ))
      return true;
    t4.raise("Invalid property name");
  }
  return false;
};
function fw(t4) {
  return t4 === 100 || t4 === 68 || t4 === 115 || t4 === 83 || t4 === 119 || t4 === 87;
}
Le.regexp_eatUnicodePropertyValueExpression = function(t4) {
  var e = t4.pos;
  if (this.regexp_eatUnicodePropertyName(t4) && t4.eat(
    61
    /* = */
  )) {
    var r = t4.lastStringValue;
    if (this.regexp_eatUnicodePropertyValue(t4)) {
      var s = t4.lastStringValue;
      return this.regexp_validateUnicodePropertyNameAndValue(t4, r, s), true;
    }
  }
  if (t4.pos = e, this.regexp_eatLoneUnicodePropertyNameOrValue(t4)) {
    var n = t4.lastStringValue;
    return this.regexp_validateUnicodePropertyNameOrValue(t4, n), true;
  }
  return false;
};
Le.regexp_validateUnicodePropertyNameAndValue = function(t4, e, r) {
  xi(t4.unicodeProperties.nonBinary, e) || t4.raise("Invalid property name"), t4.unicodeProperties.nonBinary[e].test(r) || t4.raise("Invalid property value");
};
Le.regexp_validateUnicodePropertyNameOrValue = function(t4, e) {
  t4.unicodeProperties.binary.test(e) || t4.raise("Invalid property name");
};
Le.regexp_eatUnicodePropertyName = function(t4) {
  var e = 0;
  for (t4.lastStringValue = ""; jx(e = t4.current()); )
    t4.lastStringValue += za(e), t4.advance();
  return t4.lastStringValue !== "";
};
function jx(t4) {
  return Nx(t4) || t4 === 95;
}
Le.regexp_eatUnicodePropertyValue = function(t4) {
  var e = 0;
  for (t4.lastStringValue = ""; hw(e = t4.current()); )
    t4.lastStringValue += za(e), t4.advance();
  return t4.lastStringValue !== "";
};
function hw(t4) {
  return jx(t4) || Si(t4);
}
Le.regexp_eatLoneUnicodePropertyNameOrValue = function(t4) {
  return this.regexp_eatUnicodePropertyValue(t4);
};
Le.regexp_eatCharacterClass = function(t4) {
  if (t4.eat(
    91
    /* [ */
  )) {
    if (t4.eat(
      94
      /* ^ */
    ), this.regexp_classRanges(t4), t4.eat(
      93
      /* ] */
    ))
      return true;
    t4.raise("Unterminated character class");
  }
  return false;
};
Le.regexp_classRanges = function(t4) {
  for (; this.regexp_eatClassAtom(t4); ) {
    var e = t4.lastIntValue;
    if (t4.eat(
      45
      /* - */
    ) && this.regexp_eatClassAtom(t4)) {
      var r = t4.lastIntValue;
      t4.switchU && (e === -1 || r === -1) && t4.raise("Invalid character class"), e !== -1 && r !== -1 && e > r && t4.raise("Range out of order in character class");
    }
  }
};
Le.regexp_eatClassAtom = function(t4) {
  var e = t4.pos;
  if (t4.eat(
    92
    /* \ */
  )) {
    if (this.regexp_eatClassEscape(t4))
      return true;
    if (t4.switchU) {
      var r = t4.current();
      (r === 99 || Vx(r)) && t4.raise("Invalid class escape"), t4.raise("Invalid escape");
    }
    t4.pos = e;
  }
  var s = t4.current();
  return s !== 93 ? (t4.lastIntValue = s, t4.advance(), true) : false;
};
Le.regexp_eatClassEscape = function(t4) {
  var e = t4.pos;
  if (t4.eat(
    98
    /* b */
  ))
    return t4.lastIntValue = 8, true;
  if (t4.switchU && t4.eat(
    45
    /* - */
  ))
    return t4.lastIntValue = 45, true;
  if (!t4.switchU && t4.eat(
    99
    /* c */
  )) {
    if (this.regexp_eatClassControlLetter(t4))
      return true;
    t4.pos = e;
  }
  return this.regexp_eatCharacterClassEscape(t4) || this.regexp_eatCharacterEscape(t4);
};
Le.regexp_eatClassControlLetter = function(t4) {
  var e = t4.current();
  return Si(e) || e === 95 ? (t4.lastIntValue = e % 32, t4.advance(), true) : false;
};
Le.regexp_eatHexEscapeSequence = function(t4) {
  var e = t4.pos;
  if (t4.eat(
    120
    /* x */
  )) {
    if (this.regexp_eatFixedHexDigits(t4, 2))
      return true;
    t4.switchU && t4.raise("Invalid escape"), t4.pos = e;
  }
  return false;
};
Le.regexp_eatDecimalDigits = function(t4) {
  var e = t4.pos, r = 0;
  for (t4.lastIntValue = 0; Si(r = t4.current()); )
    t4.lastIntValue = 10 * t4.lastIntValue + (r - 48), t4.advance();
  return t4.pos !== e;
};
function Si(t4) {
  return t4 >= 48 && t4 <= 57;
}
Le.regexp_eatHexDigits = function(t4) {
  var e = t4.pos, r = 0;
  for (t4.lastIntValue = 0; Mx(r = t4.current()); )
    t4.lastIntValue = 16 * t4.lastIntValue + $x(r), t4.advance();
  return t4.pos !== e;
};
function Mx(t4) {
  return t4 >= 48 && t4 <= 57 || t4 >= 65 && t4 <= 70 || t4 >= 97 && t4 <= 102;
}
function $x(t4) {
  return t4 >= 65 && t4 <= 70 ? 10 + (t4 - 65) : t4 >= 97 && t4 <= 102 ? 10 + (t4 - 97) : t4 - 48;
}
Le.regexp_eatLegacyOctalEscapeSequence = function(t4) {
  if (this.regexp_eatOctalDigit(t4)) {
    var e = t4.lastIntValue;
    if (this.regexp_eatOctalDigit(t4)) {
      var r = t4.lastIntValue;
      e <= 3 && this.regexp_eatOctalDigit(t4) ? t4.lastIntValue = e * 64 + r * 8 + t4.lastIntValue : t4.lastIntValue = e * 8 + r;
    } else
      t4.lastIntValue = e;
    return true;
  }
  return false;
};
Le.regexp_eatOctalDigit = function(t4) {
  var e = t4.current();
  return Vx(e) ? (t4.lastIntValue = e - 48, t4.advance(), true) : (t4.lastIntValue = 0, false);
};
function Vx(t4) {
  return t4 >= 48 && t4 <= 55;
}
Le.regexp_eatFixedHexDigits = function(t4, e) {
  var r = t4.pos;
  t4.lastIntValue = 0;
  for (var s = 0; s < e; ++s) {
    var n = t4.current();
    if (!Mx(n))
      return t4.pos = r, false;
    t4.lastIntValue = 16 * t4.lastIntValue + $x(n), t4.advance();
  }
  return true;
};
var Ai = function(e) {
  this.type = e.type, this.value = e.value, this.start = e.start, this.end = e.end, e.options.locations && (this.loc = new Gs(e, e.startLoc, e.endLoc)), e.options.ranges && (this.range = [e.start, e.end]);
};
var ze = ht.prototype;
ze.next = function(t4) {
  !t4 && this.type.keyword && this.containsEsc && this.raiseRecoverable(this.start, "Escape sequence in keyword " + this.type.keyword), this.options.onToken && this.options.onToken(new Ai(this)), this.lastTokEnd = this.end, this.lastTokStart = this.start, this.lastTokEndLoc = this.endLoc, this.lastTokStartLoc = this.startLoc, this.nextToken();
};
ze.getToken = function() {
  return this.next(), new Ai(this);
};
typeof Symbol < "u" && (ze[Symbol.iterator] = function() {
  var t4 = this;
  return {
    next: function() {
      var e = t4.getToken();
      return {
        done: e.type === $.eof,
        value: e
      };
    }
  };
});
ze.curContext = function() {
  return this.context[this.context.length - 1];
};
ze.nextToken = function() {
  var t4 = this.curContext();
  if ((!t4 || !t4.preserveSpace) && this.skipSpace(), this.start = this.pos, this.options.locations && (this.startLoc = this.curPosition()), this.pos >= this.input.length)
    return this.finishToken($.eof);
  if (t4.override)
    return t4.override(this);
  this.readToken(this.fullCharCodeAtPos());
};
ze.readToken = function(t4) {
  return Ur(t4, this.options.ecmaVersion >= 6) || t4 === 92 ? this.readWord() : this.getTokenFromCode(t4);
};
ze.fullCharCodeAtPos = function() {
  var t4 = this.input.charCodeAt(this.pos);
  if (t4 <= 55295 || t4 >= 57344)
    return t4;
  var e = this.input.charCodeAt(this.pos + 1);
  return (t4 << 10) + e - 56613888;
};
ze.skipBlockComment = function() {
  var t4 = this.options.onComment && this.curPosition(), e = this.pos, r = this.input.indexOf("*/", this.pos += 2);
  if (r === -1 && this.raise(this.pos - 2, "Unterminated comment"), this.pos = r + 2, this.options.locations) {
    ss.lastIndex = e;
    for (var s; (s = ss.exec(this.input)) && s.index < this.pos; )
      ++this.curLine, this.lineStart = s.index + s[0].length;
  }
  this.options.onComment && this.options.onComment(
    true,
    this.input.slice(e + 2, r),
    e,
    this.pos,
    t4,
    this.curPosition()
  );
};
ze.skipLineComment = function(t4) {
  for (var e = this.pos, r = this.options.onComment && this.curPosition(), s = this.input.charCodeAt(this.pos += t4); this.pos < this.input.length && !ls(s); )
    s = this.input.charCodeAt(++this.pos);
  this.options.onComment && this.options.onComment(
    false,
    this.input.slice(e + t4, this.pos),
    e,
    this.pos,
    r,
    this.curPosition()
  );
};
ze.skipSpace = function() {
  e:
    for (; this.pos < this.input.length; ) {
      var t4 = this.input.charCodeAt(this.pos);
      switch (t4) {
        case 32:
        case 160:
          ++this.pos;
          break;
        case 13:
          this.input.charCodeAt(this.pos + 1) === 10 && ++this.pos;
        case 10:
        case 8232:
        case 8233:
          ++this.pos, this.options.locations && (++this.curLine, this.lineStart = this.pos);
          break;
        case 47:
          switch (this.input.charCodeAt(this.pos + 1)) {
            case 42:
              this.skipBlockComment();
              break;
            case 47:
              this.skipLineComment(2);
              break;
            default:
              break e;
          }
          break;
        default:
          if (t4 > 8 && t4 < 14 || t4 >= 5760 && ou.test(String.fromCharCode(t4)))
            ++this.pos;
          else
            break e;
      }
    }
};
ze.finishToken = function(t4, e) {
  this.end = this.pos, this.options.locations && (this.endLoc = this.curPosition());
  var r = this.type;
  this.type = t4, this.value = e, this.updateContext(r);
};
ze.readToken_dot = function() {
  var t4 = this.input.charCodeAt(this.pos + 1);
  if (t4 >= 48 && t4 <= 57)
    return this.readNumber(true);
  var e = this.input.charCodeAt(this.pos + 2);
  return this.options.ecmaVersion >= 6 && t4 === 46 && e === 46 ? (this.pos += 3, this.finishToken($.ellipsis)) : (++this.pos, this.finishToken($.dot));
};
ze.readToken_slash = function() {
  var t4 = this.input.charCodeAt(this.pos + 1);
  return this.exprAllowed ? (++this.pos, this.readRegexp()) : t4 === 61 ? this.finishOp($.assign, 2) : this.finishOp($.slash, 1);
};
ze.readToken_mult_modulo_exp = function(t4) {
  var e = this.input.charCodeAt(this.pos + 1), r = 1, s = t4 === 42 ? $.star : $.modulo;
  return this.options.ecmaVersion >= 7 && t4 === 42 && e === 42 && (++r, s = $.starstar, e = this.input.charCodeAt(this.pos + 2)), e === 61 ? this.finishOp($.assign, r + 1) : this.finishOp(s, r);
};
ze.readToken_pipe_amp = function(t4) {
  var e = this.input.charCodeAt(this.pos + 1);
  if (e === t4) {
    if (this.options.ecmaVersion >= 12) {
      var r = this.input.charCodeAt(this.pos + 2);
      if (r === 61)
        return this.finishOp($.assign, 3);
    }
    return this.finishOp(t4 === 124 ? $.logicalOR : $.logicalAND, 2);
  }
  return e === 61 ? this.finishOp($.assign, 2) : this.finishOp(t4 === 124 ? $.bitwiseOR : $.bitwiseAND, 1);
};
ze.readToken_caret = function() {
  var t4 = this.input.charCodeAt(this.pos + 1);
  return t4 === 61 ? this.finishOp($.assign, 2) : this.finishOp($.bitwiseXOR, 1);
};
ze.readToken_plus_min = function(t4) {
  var e = this.input.charCodeAt(this.pos + 1);
  return e === t4 ? e === 45 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 62 && (this.lastTokEnd === 0 || Zt.test(this.input.slice(this.lastTokEnd, this.pos))) ? (this.skipLineComment(3), this.skipSpace(), this.nextToken()) : this.finishOp($.incDec, 2) : e === 61 ? this.finishOp($.assign, 2) : this.finishOp($.plusMin, 1);
};
ze.readToken_lt_gt = function(t4) {
  var e = this.input.charCodeAt(this.pos + 1), r = 1;
  return e === t4 ? (r = t4 === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2, this.input.charCodeAt(this.pos + r) === 61 ? this.finishOp($.assign, r + 1) : this.finishOp($.bitShift, r)) : e === 33 && t4 === 60 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 45 && this.input.charCodeAt(this.pos + 3) === 45 ? (this.skipLineComment(4), this.skipSpace(), this.nextToken()) : (e === 61 && (r = 2), this.finishOp($.relational, r));
};
ze.readToken_eq_excl = function(t4) {
  var e = this.input.charCodeAt(this.pos + 1);
  return e === 61 ? this.finishOp($.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2) : t4 === 61 && e === 62 && this.options.ecmaVersion >= 6 ? (this.pos += 2, this.finishToken($.arrow)) : this.finishOp(t4 === 61 ? $.eq : $.prefix, 1);
};
ze.readToken_question = function() {
  var t4 = this.options.ecmaVersion;
  if (t4 >= 11) {
    var e = this.input.charCodeAt(this.pos + 1);
    if (e === 46) {
      var r = this.input.charCodeAt(this.pos + 2);
      if (r < 48 || r > 57)
        return this.finishOp($.questionDot, 2);
    }
    if (e === 63) {
      if (t4 >= 12) {
        var s = this.input.charCodeAt(this.pos + 2);
        if (s === 61)
          return this.finishOp($.assign, 3);
      }
      return this.finishOp($.coalesce, 2);
    }
  }
  return this.finishOp($.question, 1);
};
ze.getTokenFromCode = function(t4) {
  switch (t4) {
    case 46:
      return this.readToken_dot();
    case 40:
      return ++this.pos, this.finishToken($.parenL);
    case 41:
      return ++this.pos, this.finishToken($.parenR);
    case 59:
      return ++this.pos, this.finishToken($.semi);
    case 44:
      return ++this.pos, this.finishToken($.comma);
    case 91:
      return ++this.pos, this.finishToken($.bracketL);
    case 93:
      return ++this.pos, this.finishToken($.bracketR);
    case 123:
      return ++this.pos, this.finishToken($.braceL);
    case 125:
      return ++this.pos, this.finishToken($.braceR);
    case 58:
      return ++this.pos, this.finishToken($.colon);
    case 96:
      if (this.options.ecmaVersion < 6)
        break;
      return ++this.pos, this.finishToken($.backQuote);
    case 48:
      var e = this.input.charCodeAt(this.pos + 1);
      if (e === 120 || e === 88)
        return this.readRadixNumber(16);
      if (this.options.ecmaVersion >= 6) {
        if (e === 111 || e === 79)
          return this.readRadixNumber(8);
        if (e === 98 || e === 66)
          return this.readRadixNumber(2);
      }
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
      return this.readNumber(false);
    case 34:
    case 39:
      return this.readString(t4);
    case 47:
      return this.readToken_slash();
    case 37:
    case 42:
      return this.readToken_mult_modulo_exp(t4);
    case 124:
    case 38:
      return this.readToken_pipe_amp(t4);
    case 94:
      return this.readToken_caret();
    case 43:
    case 45:
      return this.readToken_plus_min(t4);
    case 60:
    case 62:
      return this.readToken_lt_gt(t4);
    case 61:
    case 33:
      return this.readToken_eq_excl(t4);
    case 63:
      return this.readToken_question();
    case 126:
      return this.finishOp($.prefix, 1);
  }
  this.raise(this.pos, "Unexpected character '" + mu(t4) + "'");
};
ze.finishOp = function(t4, e) {
  var r = this.input.slice(this.pos, this.pos + e);
  return this.pos += e, this.finishToken(t4, r);
};
ze.readRegexp = function() {
  for (var t4, e, r = this.pos; ; ) {
    this.pos >= this.input.length && this.raise(r, "Unterminated regular expression");
    var s = this.input.charAt(this.pos);
    if (Zt.test(s) && this.raise(r, "Unterminated regular expression"), t4)
      t4 = false;
    else {
      if (s === "[")
        e = true;
      else if (s === "]" && e)
        e = false;
      else if (s === "/" && !e)
        break;
      t4 = s === "\\";
    }
    ++this.pos;
  }
  var n = this.input.slice(r, this.pos);
  ++this.pos;
  var a = this.pos, o = this.readWord1();
  this.containsEsc && this.unexpected(a);
  var l = this.regexpState || (this.regexpState = new Gr(this));
  l.reset(r, n, o), this.validateRegExpFlags(l), this.validateRegExpPattern(l);
  var i = null;
  try {
    i = new RegExp(n, o);
  } catch {
  }
  return this.finishToken($.regexp, { pattern: n, flags: o, value: i });
};
ze.readInt = function(t4, e, r) {
  for (var s = this.options.ecmaVersion >= 12 && e === void 0, n = r && this.input.charCodeAt(this.pos) === 48, a = this.pos, o = 0, l = 0, i = 0, u = e ?? 1 / 0; i < u; ++i, ++this.pos) {
    var c = this.input.charCodeAt(this.pos), f = void 0;
    if (s && c === 95) {
      n && this.raiseRecoverable(this.pos, "Numeric separator is not allowed in legacy octal numeric literals"), l === 95 && this.raiseRecoverable(this.pos, "Numeric separator must be exactly one underscore"), i === 0 && this.raiseRecoverable(this.pos, "Numeric separator is not allowed at the first of digits"), l = c;
      continue;
    }
    if (c >= 97 ? f = c - 97 + 10 : c >= 65 ? f = c - 65 + 10 : c >= 48 && c <= 57 ? f = c - 48 : f = 1 / 0, f >= t4)
      break;
    l = c, o = o * t4 + f;
  }
  return s && l === 95 && this.raiseRecoverable(this.pos - 1, "Numeric separator is not allowed at the last of digits"), this.pos === a || e != null && this.pos - a !== e ? null : o;
};
function mw(t4, e) {
  return e ? parseInt(t4, 8) : parseFloat(t4.replace(/_/g, ""));
}
function Ux(t4) {
  return typeof BigInt != "function" ? null : BigInt(t4.replace(/_/g, ""));
}
ze.readRadixNumber = function(t4) {
  var e = this.pos;
  this.pos += 2;
  var r = this.readInt(t4);
  return r == null && this.raise(this.start + 2, "Expected number in radix " + t4), this.options.ecmaVersion >= 11 && this.input.charCodeAt(this.pos) === 110 ? (r = Ux(this.input.slice(e, this.pos)), ++this.pos) : Ur(this.fullCharCodeAtPos()) && this.raise(this.pos, "Identifier directly after number"), this.finishToken($.num, r);
};
ze.readNumber = function(t4) {
  var e = this.pos;
  !t4 && this.readInt(10, void 0, true) === null && this.raise(e, "Invalid number");
  var r = this.pos - e >= 2 && this.input.charCodeAt(e) === 48;
  r && this.strict && this.raise(e, "Invalid number");
  var s = this.input.charCodeAt(this.pos);
  if (!r && !t4 && this.options.ecmaVersion >= 11 && s === 110) {
    var n = Ux(this.input.slice(e, this.pos));
    return ++this.pos, Ur(this.fullCharCodeAtPos()) && this.raise(this.pos, "Identifier directly after number"), this.finishToken($.num, n);
  }
  r && /[89]/.test(this.input.slice(e, this.pos)) && (r = false), s === 46 && !r && (++this.pos, this.readInt(10), s = this.input.charCodeAt(this.pos)), (s === 69 || s === 101) && !r && (s = this.input.charCodeAt(++this.pos), (s === 43 || s === 45) && ++this.pos, this.readInt(10) === null && this.raise(e, "Invalid number")), Ur(this.fullCharCodeAtPos()) && this.raise(this.pos, "Identifier directly after number");
  var a = mw(this.input.slice(e, this.pos), r);
  return this.finishToken($.num, a);
};
ze.readCodePoint = function() {
  var t4 = this.input.charCodeAt(this.pos), e;
  if (t4 === 123) {
    this.options.ecmaVersion < 6 && this.unexpected();
    var r = ++this.pos;
    e = this.readHexChar(this.input.indexOf("}", this.pos) - this.pos), ++this.pos, e > 1114111 && this.invalidStringToken(r, "Code point out of bounds");
  } else
    e = this.readHexChar(4);
  return e;
};
function mu(t4) {
  return t4 <= 65535 ? String.fromCharCode(t4) : (t4 -= 65536, String.fromCharCode((t4 >> 10) + 55296, (t4 & 1023) + 56320));
}
ze.readString = function(t4) {
  for (var e = "", r = ++this.pos; ; ) {
    this.pos >= this.input.length && this.raise(this.start, "Unterminated string constant");
    var s = this.input.charCodeAt(this.pos);
    if (s === t4)
      break;
    s === 92 ? (e += this.input.slice(r, this.pos), e += this.readEscapedChar(false), r = this.pos) : (ls(s, this.options.ecmaVersion >= 10) && this.raise(this.start, "Unterminated string constant"), ++this.pos);
  }
  return e += this.input.slice(r, this.pos++), this.finishToken($.string, e);
};
var qx = {};
ze.tryReadTemplateToken = function() {
  this.inTemplateElement = true;
  try {
    this.readTmplToken();
  } catch (t4) {
    if (t4 === qx)
      this.readInvalidTemplateToken();
    else
      throw t4;
  }
  this.inTemplateElement = false;
};
ze.invalidStringToken = function(t4, e) {
  if (this.inTemplateElement && this.options.ecmaVersion >= 9)
    throw qx;
  this.raise(t4, e);
};
ze.readTmplToken = function() {
  for (var t4 = "", e = this.pos; ; ) {
    this.pos >= this.input.length && this.raise(this.start, "Unterminated template");
    var r = this.input.charCodeAt(this.pos);
    if (r === 96 || r === 36 && this.input.charCodeAt(this.pos + 1) === 123)
      return this.pos === this.start && (this.type === $.template || this.type === $.invalidTemplate) ? r === 36 ? (this.pos += 2, this.finishToken($.dollarBraceL)) : (++this.pos, this.finishToken($.backQuote)) : (t4 += this.input.slice(e, this.pos), this.finishToken($.template, t4));
    if (r === 92)
      t4 += this.input.slice(e, this.pos), t4 += this.readEscapedChar(true), e = this.pos;
    else if (ls(r)) {
      switch (t4 += this.input.slice(e, this.pos), ++this.pos, r) {
        case 13:
          this.input.charCodeAt(this.pos) === 10 && ++this.pos;
        case 10:
          t4 += `
`;
          break;
        default:
          t4 += String.fromCharCode(r);
          break;
      }
      this.options.locations && (++this.curLine, this.lineStart = this.pos), e = this.pos;
    } else
      ++this.pos;
  }
};
ze.readInvalidTemplateToken = function() {
  for (; this.pos < this.input.length; this.pos++)
    switch (this.input[this.pos]) {
      case "\\":
        ++this.pos;
        break;
      case "$":
        if (this.input[this.pos + 1] !== "{")
          break;
      case "`":
        return this.finishToken($.invalidTemplate, this.input.slice(this.start, this.pos));
    }
  this.raise(this.start, "Unterminated template");
};
ze.readEscapedChar = function(t4) {
  var e = this.input.charCodeAt(++this.pos);
  switch (++this.pos, e) {
    case 110:
      return `
`;
    case 114:
      return "\r";
    case 120:
      return String.fromCharCode(this.readHexChar(2));
    case 117:
      return mu(this.readCodePoint());
    case 116:
      return "	";
    case 98:
      return "\b";
    case 118:
      return "\v";
    case 102:
      return "\f";
    case 13:
      this.input.charCodeAt(this.pos) === 10 && ++this.pos;
    case 10:
      return this.options.locations && (this.lineStart = this.pos, ++this.curLine), "";
    case 56:
    case 57:
      if (t4) {
        var r = this.pos - 1;
        return this.invalidStringToken(
          r,
          "Invalid escape sequence in template string"
        ), null;
      }
    default:
      if (e >= 48 && e <= 55) {
        var s = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0], n = parseInt(s, 8);
        return n > 255 && (s = s.slice(0, -1), n = parseInt(s, 8)), this.pos += s.length - 1, e = this.input.charCodeAt(this.pos), (s !== "0" || e === 56 || e === 57) && (this.strict || t4) && this.invalidStringToken(
          this.pos - 1 - s.length,
          t4 ? "Octal literal in template string" : "Octal literal in strict mode"
        ), String.fromCharCode(n);
      }
      return ls(e) ? "" : String.fromCharCode(e);
  }
};
ze.readHexChar = function(t4) {
  var e = this.pos, r = this.readInt(16, t4);
  return r === null && this.invalidStringToken(e, "Bad character escape sequence"), r;
};
ze.readWord1 = function() {
  this.containsEsc = false;
  for (var t4 = "", e = true, r = this.pos, s = this.options.ecmaVersion >= 6; this.pos < this.input.length; ) {
    var n = this.fullCharCodeAtPos();
    if (Tn(n, s))
      this.pos += n <= 65535 ? 1 : 2;
    else if (n === 92) {
      this.containsEsc = true, t4 += this.input.slice(r, this.pos);
      var a = this.pos;
      this.input.charCodeAt(++this.pos) !== 117 && this.invalidStringToken(this.pos, "Expecting Unicode escape sequence \\uXXXX"), ++this.pos;
      var o = this.readCodePoint();
      (e ? Ur : Tn)(o, s) || this.invalidStringToken(a, "Invalid Unicode escape"), t4 += mu(o), r = this.pos;
    } else
      break;
    e = false;
  }
  return t4 + this.input.slice(r, this.pos);
};
ze.readWord = function() {
  var t4 = this.readWord1(), e = $.name;
  return this.keywords.test(t4) && (e = yi[t4]), this.finishToken(e, t4);
};
var Wx = "7.4.1";
ht.acorn = {
  Parser: ht,
  version: Wx,
  defaultOptions: qa,
  Position: as,
  SourceLocation: Gs,
  getLineInfo: lu,
  Node: Ei,
  TokenType: Xe,
  tokTypes: $,
  keywordTypes: yi,
  TokContext: lr,
  tokContexts: gt,
  isIdentifierChar: Tn,
  isIdentifierStart: Ur,
  Token: Ai,
  isNewLine: ls,
  lineBreak: Zt,
  lineBreakG: ss,
  nonASCIIwhitespace: ou
};
function dw(t4, e) {
  return ht.parse(t4, e);
}
function gw(t4, e, r) {
  return ht.parseExpressionAt(t4, e, r);
}
function yw(t4, e) {
  return ht.tokenizer(t4, e);
}
var xw = Object.freeze({
  __proto__: null,
  Node: Ei,
  Parser: ht,
  Position: as,
  SourceLocation: Gs,
  TokContext: lr,
  Token: Ai,
  TokenType: Xe,
  defaultOptions: qa,
  getLineInfo: lu,
  isIdentifierChar: Tn,
  isIdentifierStart: Ur,
  isNewLine: ls,
  keywordTypes: yi,
  lineBreak: Zt,
  lineBreakG: ss,
  nonASCIIwhitespace: ou,
  parse: dw,
  parseExpressionAt: gw,
  tokContexts: gt,
  tokTypes: $,
  tokenizer: yw,
  version: Wx
});
var cl = Fn(xw);
var zx = { exports: {} };
var vw = {
  quot: '"',
  amp: "&",
  apos: "'",
  lt: "<",
  gt: ">",
  nbsp: " ",
  iexcl: "¡",
  cent: "¢",
  pound: "£",
  curren: "¤",
  yen: "¥",
  brvbar: "¦",
  sect: "§",
  uml: "¨",
  copy: "©",
  ordf: "ª",
  laquo: "«",
  not: "¬",
  shy: "­",
  reg: "®",
  macr: "¯",
  deg: "°",
  plusmn: "±",
  sup2: "²",
  sup3: "³",
  acute: "´",
  micro: "µ",
  para: "¶",
  middot: "·",
  cedil: "¸",
  sup1: "¹",
  ordm: "º",
  raquo: "»",
  frac14: "¼",
  frac12: "½",
  frac34: "¾",
  iquest: "¿",
  Agrave: "À",
  Aacute: "Á",
  Acirc: "Â",
  Atilde: "Ã",
  Auml: "Ä",
  Aring: "Å",
  AElig: "Æ",
  Ccedil: "Ç",
  Egrave: "È",
  Eacute: "É",
  Ecirc: "Ê",
  Euml: "Ë",
  Igrave: "Ì",
  Iacute: "Í",
  Icirc: "Î",
  Iuml: "Ï",
  ETH: "Ð",
  Ntilde: "Ñ",
  Ograve: "Ò",
  Oacute: "Ó",
  Ocirc: "Ô",
  Otilde: "Õ",
  Ouml: "Ö",
  times: "×",
  Oslash: "Ø",
  Ugrave: "Ù",
  Uacute: "Ú",
  Ucirc: "Û",
  Uuml: "Ü",
  Yacute: "Ý",
  THORN: "Þ",
  szlig: "ß",
  agrave: "à",
  aacute: "á",
  acirc: "â",
  atilde: "ã",
  auml: "ä",
  aring: "å",
  aelig: "æ",
  ccedil: "ç",
  egrave: "è",
  eacute: "é",
  ecirc: "ê",
  euml: "ë",
  igrave: "ì",
  iacute: "í",
  icirc: "î",
  iuml: "ï",
  eth: "ð",
  ntilde: "ñ",
  ograve: "ò",
  oacute: "ó",
  ocirc: "ô",
  otilde: "õ",
  ouml: "ö",
  divide: "÷",
  oslash: "ø",
  ugrave: "ù",
  uacute: "ú",
  ucirc: "û",
  uuml: "ü",
  yacute: "ý",
  thorn: "þ",
  yuml: "ÿ",
  OElig: "Œ",
  oelig: "œ",
  Scaron: "Š",
  scaron: "š",
  Yuml: "Ÿ",
  fnof: "ƒ",
  circ: "ˆ",
  tilde: "˜",
  Alpha: "Α",
  Beta: "Β",
  Gamma: "Γ",
  Delta: "Δ",
  Epsilon: "Ε",
  Zeta: "Ζ",
  Eta: "Η",
  Theta: "Θ",
  Iota: "Ι",
  Kappa: "Κ",
  Lambda: "Λ",
  Mu: "Μ",
  Nu: "Ν",
  Xi: "Ξ",
  Omicron: "Ο",
  Pi: "Π",
  Rho: "Ρ",
  Sigma: "Σ",
  Tau: "Τ",
  Upsilon: "Υ",
  Phi: "Φ",
  Chi: "Χ",
  Psi: "Ψ",
  Omega: "Ω",
  alpha: "α",
  beta: "β",
  gamma: "γ",
  delta: "δ",
  epsilon: "ε",
  zeta: "ζ",
  eta: "η",
  theta: "θ",
  iota: "ι",
  kappa: "κ",
  lambda: "λ",
  mu: "μ",
  nu: "ν",
  xi: "ξ",
  omicron: "ο",
  pi: "π",
  rho: "ρ",
  sigmaf: "ς",
  sigma: "σ",
  tau: "τ",
  upsilon: "υ",
  phi: "φ",
  chi: "χ",
  psi: "ψ",
  omega: "ω",
  thetasym: "ϑ",
  upsih: "ϒ",
  piv: "ϖ",
  ensp: " ",
  emsp: " ",
  thinsp: " ",
  zwnj: "‌",
  zwj: "‍",
  lrm: "‎",
  rlm: "‏",
  ndash: "–",
  mdash: "—",
  lsquo: "‘",
  rsquo: "’",
  sbquo: "‚",
  ldquo: "“",
  rdquo: "”",
  bdquo: "„",
  dagger: "†",
  Dagger: "‡",
  bull: "•",
  hellip: "…",
  permil: "‰",
  prime: "′",
  Prime: "″",
  lsaquo: "‹",
  rsaquo: "›",
  oline: "‾",
  frasl: "⁄",
  euro: "€",
  image: "ℑ",
  weierp: "℘",
  real: "ℜ",
  trade: "™",
  alefsym: "ℵ",
  larr: "←",
  uarr: "↑",
  rarr: "→",
  darr: "↓",
  harr: "↔",
  crarr: "↵",
  lArr: "⇐",
  uArr: "⇑",
  rArr: "⇒",
  dArr: "⇓",
  hArr: "⇔",
  forall: "∀",
  part: "∂",
  exist: "∃",
  empty: "∅",
  nabla: "∇",
  isin: "∈",
  notin: "∉",
  ni: "∋",
  prod: "∏",
  sum: "∑",
  minus: "−",
  lowast: "∗",
  radic: "√",
  prop: "∝",
  infin: "∞",
  ang: "∠",
  and: "∧",
  or: "∨",
  cap: "∩",
  cup: "∪",
  int: "∫",
  there4: "∴",
  sim: "∼",
  cong: "≅",
  asymp: "≈",
  ne: "≠",
  equiv: "≡",
  le: "≤",
  ge: "≥",
  sub: "⊂",
  sup: "⊃",
  nsub: "⊄",
  sube: "⊆",
  supe: "⊇",
  oplus: "⊕",
  otimes: "⊗",
  perp: "⊥",
  sdot: "⋅",
  lceil: "⌈",
  rceil: "⌉",
  lfloor: "⌊",
  rfloor: "⌋",
  lang: "〈",
  rang: "〉",
  loz: "◊",
  spades: "♠",
  clubs: "♣",
  hearts: "♥",
  diams: "♦"
};
(function(t4) {
  const e = vw, r = /^[\da-fA-F]+$/, s = /^\d+$/, n = /* @__PURE__ */ new WeakMap();
  function a(i) {
    i = i.Parser.acorn || i;
    let u = n.get(i);
    if (!u) {
      const c = i.tokTypes, f = i.TokContext, h = i.TokenType, p = new f("<tag", false), m = new f("</tag", false), d = new f("<tag>...</tag>", true, true), g = {
        tc_oTag: p,
        tc_cTag: m,
        tc_expr: d
      }, y = {
        jsxName: new h("jsxName"),
        jsxText: new h("jsxText", { beforeExpr: true }),
        jsxTagStart: new h("jsxTagStart", { startsExpr: true }),
        jsxTagEnd: new h("jsxTagEnd")
      };
      y.jsxTagStart.updateContext = function() {
        this.context.push(d), this.context.push(p), this.exprAllowed = false;
      }, y.jsxTagEnd.updateContext = function(x) {
        let A = this.context.pop();
        A === p && x === c.slash || A === m ? (this.context.pop(), this.exprAllowed = this.curContext() === d) : this.exprAllowed = true;
      }, u = { tokContexts: g, tokTypes: y }, n.set(i, u);
    }
    return u;
  }
  function o(i) {
    if (!i)
      return i;
    if (i.type === "JSXIdentifier")
      return i.name;
    if (i.type === "JSXNamespacedName")
      return i.namespace.name + ":" + i.name.name;
    if (i.type === "JSXMemberExpression")
      return o(i.object) + "." + o(i.property);
  }
  t4.exports = function(i) {
    return i = i || {}, function(u) {
      return l({
        allowNamespaces: i.allowNamespaces !== false,
        allowNamespacedObjects: !!i.allowNamespacedObjects
      }, u);
    };
  }, Object.defineProperty(t4.exports, "tokTypes", {
    get: function() {
      return a(cl).tokTypes;
    },
    configurable: true,
    enumerable: true
  });
  function l(i, u) {
    const c = u.acorn || cl, f = a(c), h = c.tokTypes, p = f.tokTypes, m = c.tokContexts, d = f.tokContexts.tc_oTag, g = f.tokContexts.tc_cTag, y = f.tokContexts.tc_expr, x = c.isNewLine, A = c.isIdentifierStart, b = c.isIdentifierChar;
    return class extends u {
      // Expose actual `tokTypes` and `tokContexts` to other plugins.
      static get acornJsx() {
        return f;
      }
      // Reads inline JSX contents token.
      jsx_readToken() {
        let v = "", C = this.pos;
        for (; ; ) {
          this.pos >= this.input.length && this.raise(this.start, "Unterminated JSX contents");
          let T = this.input.charCodeAt(this.pos);
          switch (T) {
            case 60:
            case 123:
              return this.pos === this.start ? T === 60 && this.exprAllowed ? (++this.pos, this.finishToken(p.jsxTagStart)) : this.getTokenFromCode(T) : (v += this.input.slice(C, this.pos), this.finishToken(p.jsxText, v));
            case 38:
              v += this.input.slice(C, this.pos), v += this.jsx_readEntity(), C = this.pos;
              break;
            case 62:
            case 125:
              this.raise(
                this.pos,
                "Unexpected token `" + this.input[this.pos] + "`. Did you mean `" + (T === 62 ? "&gt;" : "&rbrace;") + '` or `{"' + this.input[this.pos] + '"}`?'
              );
            default:
              x(T) ? (v += this.input.slice(C, this.pos), v += this.jsx_readNewLine(true), C = this.pos) : ++this.pos;
          }
        }
      }
      jsx_readNewLine(v) {
        let C = this.input.charCodeAt(this.pos), T;
        return ++this.pos, C === 13 && this.input.charCodeAt(this.pos) === 10 ? (++this.pos, T = v ? `
` : `\r
`) : T = String.fromCharCode(C), this.options.locations && (++this.curLine, this.lineStart = this.pos), T;
      }
      jsx_readString(v) {
        let C = "", T = ++this.pos;
        for (; ; ) {
          this.pos >= this.input.length && this.raise(this.start, "Unterminated string constant");
          let w = this.input.charCodeAt(this.pos);
          if (w === v)
            break;
          w === 38 ? (C += this.input.slice(T, this.pos), C += this.jsx_readEntity(), T = this.pos) : x(w) ? (C += this.input.slice(T, this.pos), C += this.jsx_readNewLine(false), T = this.pos) : ++this.pos;
        }
        return C += this.input.slice(T, this.pos++), this.finishToken(h.string, C);
      }
      jsx_readEntity() {
        let v = "", C = 0, T, w = this.input[this.pos];
        w !== "&" && this.raise(this.pos, "Entity must start with an ampersand");
        let B = ++this.pos;
        for (; this.pos < this.input.length && C++ < 10; ) {
          if (w = this.input[this.pos++], w === ";") {
            v[0] === "#" ? v[1] === "x" ? (v = v.substr(2), r.test(v) && (T = String.fromCharCode(parseInt(v, 16)))) : (v = v.substr(1), s.test(v) && (T = String.fromCharCode(parseInt(v, 10)))) : T = e[v];
            break;
          }
          v += w;
        }
        return T || (this.pos = B, "&");
      }
      // Read a JSX identifier (valid tag or attribute name).
      //
      // Optimized version since JSX identifiers can't contain
      // escape characters and so can be read as single slice.
      // Also assumes that first character was already checked
      // by isIdentifierStart in readToken.
      jsx_readWord() {
        let v, C = this.pos;
        do
          v = this.input.charCodeAt(++this.pos);
        while (b(v) || v === 45);
        return this.finishToken(p.jsxName, this.input.slice(C, this.pos));
      }
      // Parse next token as JSX identifier
      jsx_parseIdentifier() {
        let v = this.startNode();
        return this.type === p.jsxName ? v.name = this.value : this.type.keyword ? v.name = this.type.keyword : this.unexpected(), this.next(), this.finishNode(v, "JSXIdentifier");
      }
      // Parse namespaced identifier.
      jsx_parseNamespacedName() {
        let v = this.start, C = this.startLoc, T = this.jsx_parseIdentifier();
        if (!i.allowNamespaces || !this.eat(h.colon))
          return T;
        var w = this.startNodeAt(v, C);
        return w.namespace = T, w.name = this.jsx_parseIdentifier(), this.finishNode(w, "JSXNamespacedName");
      }
      // Parses element name in any form - namespaced, member
      // or single identifier.
      jsx_parseElementName() {
        if (this.type === p.jsxTagEnd)
          return "";
        let v = this.start, C = this.startLoc, T = this.jsx_parseNamespacedName();
        for (this.type === h.dot && T.type === "JSXNamespacedName" && !i.allowNamespacedObjects && this.unexpected(); this.eat(h.dot); ) {
          let w = this.startNodeAt(v, C);
          w.object = T, w.property = this.jsx_parseIdentifier(), T = this.finishNode(w, "JSXMemberExpression");
        }
        return T;
      }
      // Parses any type of JSX attribute value.
      jsx_parseAttributeValue() {
        switch (this.type) {
          case h.braceL:
            let v = this.jsx_parseExpressionContainer();
            return v.expression.type === "JSXEmptyExpression" && this.raise(v.start, "JSX attributes must only be assigned a non-empty expression"), v;
          case p.jsxTagStart:
          case h.string:
            return this.parseExprAtom();
          default:
            this.raise(this.start, "JSX value should be either an expression or a quoted JSX text");
        }
      }
      // JSXEmptyExpression is unique type since it doesn't actually parse anything,
      // and so it should start at the end of last read token (left brace) and finish
      // at the beginning of the next one (right brace).
      jsx_parseEmptyExpression() {
        let v = this.startNodeAt(this.lastTokEnd, this.lastTokEndLoc);
        return this.finishNodeAt(v, "JSXEmptyExpression", this.start, this.startLoc);
      }
      // Parses JSX expression enclosed into curly brackets.
      jsx_parseExpressionContainer() {
        let v = this.startNode();
        return this.next(), v.expression = this.type === h.braceR ? this.jsx_parseEmptyExpression() : this.parseExpression(), this.expect(h.braceR), this.finishNode(v, "JSXExpressionContainer");
      }
      // Parses following JSX attribute name-value pair.
      jsx_parseAttribute() {
        let v = this.startNode();
        return this.eat(h.braceL) ? (this.expect(h.ellipsis), v.argument = this.parseMaybeAssign(), this.expect(h.braceR), this.finishNode(v, "JSXSpreadAttribute")) : (v.name = this.jsx_parseNamespacedName(), v.value = this.eat(h.eq) ? this.jsx_parseAttributeValue() : null, this.finishNode(v, "JSXAttribute"));
      }
      // Parses JSX opening tag starting after '<'.
      jsx_parseOpeningElementAt(v, C) {
        let T = this.startNodeAt(v, C);
        T.attributes = [];
        let w = this.jsx_parseElementName();
        for (w && (T.name = w); this.type !== h.slash && this.type !== p.jsxTagEnd; )
          T.attributes.push(this.jsx_parseAttribute());
        return T.selfClosing = this.eat(h.slash), this.expect(p.jsxTagEnd), this.finishNode(T, w ? "JSXOpeningElement" : "JSXOpeningFragment");
      }
      // Parses JSX closing tag starting after '</'.
      jsx_parseClosingElementAt(v, C) {
        let T = this.startNodeAt(v, C), w = this.jsx_parseElementName();
        return w && (T.name = w), this.expect(p.jsxTagEnd), this.finishNode(T, w ? "JSXClosingElement" : "JSXClosingFragment");
      }
      // Parses entire JSX element, including it's opening tag
      // (starting after '<'), attributes, contents and closing tag.
      jsx_parseElementAt(v, C) {
        let T = this.startNodeAt(v, C), w = [], B = this.jsx_parseOpeningElementAt(v, C), I = null;
        if (!B.selfClosing) {
          e:
            for (; ; )
              switch (this.type) {
                case p.jsxTagStart:
                  if (v = this.start, C = this.startLoc, this.next(), this.eat(h.slash)) {
                    I = this.jsx_parseClosingElementAt(v, C);
                    break e;
                  }
                  w.push(this.jsx_parseElementAt(v, C));
                  break;
                case p.jsxText:
                  w.push(this.parseExprAtom());
                  break;
                case h.braceL:
                  w.push(this.jsx_parseExpressionContainer());
                  break;
                default:
                  this.unexpected();
              }
          o(I.name) !== o(B.name) && this.raise(
            I.start,
            "Expected corresponding JSX closing tag for <" + o(B.name) + ">"
          );
        }
        let _ = B.name ? "Element" : "Fragment";
        return T["opening" + _] = B, T["closing" + _] = I, T.children = w, this.type === h.relational && this.value === "<" && this.raise(this.start, "Adjacent JSX elements must be wrapped in an enclosing tag"), this.finishNode(T, "JSX" + _);
      }
      // Parse JSX text
      jsx_parseText() {
        let v = this.parseLiteral(this.value);
        return v.type = "JSXText", v;
      }
      // Parses entire JSX element from current position.
      jsx_parseElement() {
        let v = this.start, C = this.startLoc;
        return this.next(), this.jsx_parseElementAt(v, C);
      }
      parseExprAtom(v) {
        return this.type === p.jsxText ? this.jsx_parseText() : this.type === p.jsxTagStart ? this.jsx_parseElement() : super.parseExprAtom(v);
      }
      readToken(v) {
        let C = this.curContext();
        if (C === y)
          return this.jsx_readToken();
        if (C === d || C === g) {
          if (A(v))
            return this.jsx_readWord();
          if (v == 62)
            return ++this.pos, this.finishToken(p.jsxTagEnd);
          if ((v === 34 || v === 39) && C == d)
            return this.jsx_readString(v);
        }
        return v === 60 && this.exprAllowed && this.input.charCodeAt(this.pos + 1) !== 33 ? (++this.pos, this.finishToken(p.jsxTagStart)) : super.readToken(v);
      }
      updateContext(v) {
        if (this.type == h.braceL) {
          var C = this.curContext();
          C == d ? this.context.push(m.b_expr) : C == y ? this.context.push(m.b_tmpl) : super.updateContext(v), this.exprAllowed = true;
        } else if (this.type === h.slash && v === p.jsxTagStart)
          this.context.length -= 2, this.context.push(g), this.exprAllowed = false;
        else
          return super.updateContext(v);
      }
    };
  }
})(zx);
var Ew = {
  AssignmentExpression: "AssignmentExpression",
  AssignmentPattern: "AssignmentPattern",
  ArrayExpression: "ArrayExpression",
  ArrayPattern: "ArrayPattern",
  ArrowFunctionExpression: "ArrowFunctionExpression",
  AwaitExpression: "AwaitExpression",
  BlockStatement: "BlockStatement",
  BinaryExpression: "BinaryExpression",
  BreakStatement: "BreakStatement",
  CallExpression: "CallExpression",
  CatchClause: "CatchClause",
  ClassBody: "ClassBody",
  ClassDeclaration: "ClassDeclaration",
  ClassExpression: "ClassExpression",
  ConditionalExpression: "ConditionalExpression",
  ContinueStatement: "ContinueStatement",
  DoWhileStatement: "DoWhileStatement",
  DebuggerStatement: "DebuggerStatement",
  EmptyStatement: "EmptyStatement",
  ExpressionStatement: "ExpressionStatement",
  ForStatement: "ForStatement",
  ForInStatement: "ForInStatement",
  ForOfStatement: "ForOfStatement",
  FunctionDeclaration: "FunctionDeclaration",
  FunctionExpression: "FunctionExpression",
  Identifier: "Identifier",
  IfStatement: "IfStatement",
  Literal: "Literal",
  LabeledStatement: "LabeledStatement",
  LogicalExpression: "LogicalExpression",
  MemberExpression: "MemberExpression",
  MetaProperty: "MetaProperty",
  MethodDefinition: "MethodDefinition",
  NewExpression: "NewExpression",
  ObjectExpression: "ObjectExpression",
  ObjectPattern: "ObjectPattern",
  Program: "Program",
  Property: "Property",
  RestElement: "RestElement",
  ReturnStatement: "ReturnStatement",
  SequenceExpression: "SequenceExpression",
  SpreadElement: "SpreadElement",
  Super: "Super",
  SwitchCase: "SwitchCase",
  SwitchStatement: "SwitchStatement",
  TaggedTemplateExpression: "TaggedTemplateExpression",
  TemplateElement: "TemplateElement",
  TemplateLiteral: "TemplateLiteral",
  ThisExpression: "ThisExpression",
  ThrowStatement: "ThrowStatement",
  TryStatement: "TryStatement",
  UnaryExpression: "UnaryExpression",
  UpdateExpression: "UpdateExpression",
  VariableDeclaration: "VariableDeclaration",
  VariableDeclarator: "VariableDeclarator",
  WhileStatement: "WhileStatement",
  WithStatement: "WithStatement",
  YieldExpression: "YieldExpression",
  JSXIdentifier: "JSXIdentifier",
  JSXNamespacedName: "JSXNamespacedName",
  JSXMemberExpression: "JSXMemberExpression",
  JSXEmptyExpression: "JSXEmptyExpression",
  JSXExpressionContainer: "JSXExpressionContainer",
  JSXElement: "JSXElement",
  JSXClosingElement: "JSXClosingElement",
  JSXOpeningElement: "JSXOpeningElement",
  JSXAttribute: "JSXAttribute",
  JSXSpreadAttribute: "JSXSpreadAttribute",
  JSXText: "JSXText",
  ExportDefaultDeclaration: "ExportDefaultDeclaration",
  ExportNamedDeclaration: "ExportNamedDeclaration",
  ExportAllDeclaration: "ExportAllDeclaration",
  ExportSpecifier: "ExportSpecifier",
  ImportDeclaration: "ImportDeclaration",
  ImportSpecifier: "ImportSpecifier",
  ImportDefaultSpecifier: "ImportDefaultSpecifier",
  ImportNamespaceSpecifier: "ImportNamespaceSpecifier"
};
var Ut = {
  Boolean: "Boolean",
  EOF: "<end>",
  Identifier: "Identifier",
  Keyword: "Keyword",
  Null: "Null",
  Numeric: "Numeric",
  Punctuator: "Punctuator",
  String: "String",
  RegularExpression: "RegularExpression",
  Template: "Template",
  JSXIdentifier: "JSXIdentifier",
  JSXText: "JSXText"
};
function bw(t4, e) {
  const r = t4[0], s = t4[t4.length - 1], n = {
    type: Ut.Template,
    value: e.slice(r.start, s.end)
  };
  return r.loc && (n.loc = {
    start: r.loc.start,
    end: s.loc.end
  }), r.range && (n.start = r.range[0], n.end = s.range[1], n.range = [n.start, n.end]), n;
}
function pl(t4, e) {
  this._acornTokTypes = t4, this._tokens = [], this._curlyBrace = null, this._code = e;
}
pl.prototype = {
  constructor: pl,
  /**
   * Translates a single Esprima token to a single Acorn token. This may be
   * inaccurate due to how templates are handled differently in Esprima and
   * Acorn, but should be accurate for all other tokens.
   * @param {AcornToken} token The Acorn token to translate.
   * @param {Object} extra Espree extra object.
   * @returns {EsprimaToken} The Esprima version of the token.
   */
  translate(t4, e) {
    const r = t4.type, s = this._acornTokTypes;
    if (r === s.name)
      t4.type = Ut.Identifier, t4.value === "static" && (t4.type = Ut.Keyword), e.ecmaVersion > 5 && (t4.value === "yield" || t4.value === "let") && (t4.type = Ut.Keyword);
    else if (r === s.semi || r === s.comma || r === s.parenL || r === s.parenR || r === s.braceL || r === s.braceR || r === s.dot || r === s.bracketL || r === s.colon || r === s.question || r === s.bracketR || r === s.ellipsis || r === s.arrow || r === s.jsxTagStart || r === s.incDec || r === s.starstar || r === s.jsxTagEnd || r === s.prefix || r === s.questionDot || r.binop && !r.keyword || r.isAssign)
      t4.type = Ut.Punctuator, t4.value = this._code.slice(t4.start, t4.end);
    else if (r === s.jsxName)
      t4.type = Ut.JSXIdentifier;
    else if (r.label === "jsxText" || r === s.jsxAttrValueToken)
      t4.type = Ut.JSXText;
    else if (r.keyword)
      r.keyword === "true" || r.keyword === "false" ? t4.type = Ut.Boolean : r.keyword === "null" ? t4.type = Ut.Null : t4.type = Ut.Keyword;
    else if (r === s.num)
      t4.type = Ut.Numeric, t4.value = this._code.slice(t4.start, t4.end);
    else if (r === s.string)
      e.jsxAttrValueToken ? (e.jsxAttrValueToken = false, t4.type = Ut.JSXText) : t4.type = Ut.String, t4.value = this._code.slice(t4.start, t4.end);
    else if (r === s.regexp) {
      t4.type = Ut.RegularExpression;
      const n = t4.value;
      t4.regex = {
        flags: n.flags,
        pattern: n.pattern
      }, t4.value = `/${n.pattern}/${n.flags}`;
    }
    return t4;
  },
  /**
   * Function to call during Acorn's onToken handler.
   * @param {AcornToken} token The Acorn token.
   * @param {Object} extra The Espree extra object.
   * @returns {void}
   */
  onToken(t4, e) {
    const r = this, s = this._acornTokTypes, n = e.tokens, a = this._tokens;
    function o() {
      n.push(bw(r._tokens, r._code)), r._tokens = [];
    }
    if (t4.type === s.eof) {
      this._curlyBrace && n.push(this.translate(this._curlyBrace, e));
      return;
    }
    if (t4.type === s.backQuote) {
      this._curlyBrace && (n.push(this.translate(this._curlyBrace, e)), this._curlyBrace = null), a.push(t4), a.length > 1 && o();
      return;
    }
    if (t4.type === s.dollarBraceL) {
      a.push(t4), o();
      return;
    }
    if (t4.type === s.braceR) {
      this._curlyBrace && n.push(this.translate(this._curlyBrace, e)), this._curlyBrace = t4;
      return;
    }
    if (t4.type === s.template || t4.type === s.invalidTemplate) {
      this._curlyBrace && (a.push(this._curlyBrace), this._curlyBrace = null), a.push(t4);
      return;
    }
    this._curlyBrace && (n.push(this.translate(this._curlyBrace, e)), this._curlyBrace = null), n.push(this.translate(t4, e));
  }
};
var Cw = pl;
var Sw = 5;
var Ga = [
  3,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12
];
function Aw(t4 = Sw) {
  if (typeof t4 != "number")
    throw new Error(`ecmaVersion must be a number. Received value of type ${typeof t4} instead.`);
  let e = t4;
  if (e >= 2015 && (e -= 2009), !Ga.includes(e))
    throw new Error("Invalid ecmaVersion.");
  return e;
}
function Dw(t4 = "script") {
  if (t4 === "script" || t4 === "module")
    return t4;
  throw new Error("Invalid sourceType.");
}
function ww(t4) {
  const e = Aw(t4.ecmaVersion), r = Dw(t4.sourceType), s = t4.range === true, n = t4.loc === true;
  if (r === "module" && e < 6)
    throw new Error("sourceType 'module' is not supported when ecmaVersion < 2015. Consider adding `{ ecmaVersion: 2015 }` to the parser options.");
  return Object.assign({}, t4, { ecmaVersion: e, sourceType: r, ranges: s, locations: n });
}
function kw() {
  return Ga[Ga.length - 1];
}
function Tw() {
  return [...Ga];
}
var Gx = {
  normalizeOptions: ww,
  getLatestEcmaVersion: kw,
  getSupportedEcmaVersions: Tw
};
var Fw = Cw;
var { normalizeOptions: Pw } = Gx;
var Br = Symbol("espree's internal state");
var Zi = Symbol("espree's esprimaFinishNode");
function Iw(t4, e, r, s, n, a) {
  const o = {
    type: t4 ? "Block" : "Line",
    value: e
  };
  return typeof r == "number" && (o.start = r, o.end = s, o.range = [r, s]), typeof n == "object" && (o.loc = {
    start: n,
    end: a
  }), o;
}
var _w = () => (t4) => {
  const e = Object.assign({}, t4.acorn.tokTypes);
  return t4.acornJsx && Object.assign(e, t4.acornJsx.tokTypes), class extends t4 {
    constructor(s, n) {
      (typeof s != "object" || s === null) && (s = {}), typeof n != "string" && !(n instanceof String) && (n = String(n));
      const a = Pw(s), o = a.ecmaFeatures || {}, l = a.tokens === true ? new Fw(e, n) : null;
      super({
        // TODO: use {...options} when spread is supported(Node.js >= 8.3.0).
        ecmaVersion: a.ecmaVersion,
        sourceType: a.sourceType,
        ranges: a.ranges,
        locations: a.locations,
        // Truthy value is true for backward compatibility.
        allowReturnOutsideFunction: !!o.globalReturn,
        // Collect tokens
        onToken: (i) => {
          l && l.onToken(i, this[Br]), i.type !== e.eof && (this[Br].lastToken = i);
        },
        // Collect comments
        onComment: (i, u, c, f, h, p) => {
          if (this[Br].comments) {
            const m = Iw(i, u, c, f, h, p);
            this[Br].comments.push(m);
          }
        }
      }, n), this[Br] = {
        tokens: l ? [] : null,
        comments: a.comment === true ? [] : null,
        impliedStrict: o.impliedStrict === true && this.options.ecmaVersion >= 5,
        ecmaVersion: this.options.ecmaVersion,
        jsxAttrValueToken: false,
        lastToken: null
      };
    }
    tokenize() {
      do
        this.next();
      while (this.type !== e.eof);
      this.next();
      const s = this[Br], n = s.tokens;
      return s.comments && (n.comments = s.comments), n;
    }
    finishNode(...s) {
      const n = super.finishNode(...s);
      return this[Zi](n);
    }
    finishNodeAt(...s) {
      const n = super.finishNodeAt(...s);
      return this[Zi](n);
    }
    parse() {
      const s = this[Br], n = super.parse();
      return n.sourceType = this.options.sourceType, s.comments && (n.comments = s.comments), s.tokens && (n.tokens = s.tokens), n.range && (n.range[0] = n.body.length ? n.body[0].range[0] : n.range[0], n.range[1] = s.lastToken ? s.lastToken.range[1] : n.range[1]), n.loc && (n.loc.start = n.body.length ? n.body[0].loc.start : n.loc.start, n.loc.end = s.lastToken ? s.lastToken.loc.end : n.loc.end), n;
    }
    parseTopLevel(s) {
      return this[Br].impliedStrict && (this.strict = true), super.parseTopLevel(s);
    }
    /**
     * Overwrites the default raise method to throw Esprima-style errors.
     * @param {int} pos The position of the error.
     * @param {string} message The error message.
     * @throws {SyntaxError} A syntax error.
     * @returns {void}
     */
    raise(s, n) {
      const a = t4.acorn.getLineInfo(this.input, s), o = new SyntaxError(n);
      throw o.index = s, o.lineNumber = a.line, o.column = a.column + 1, o;
    }
    /**
     * Overwrites the default raise method to throw Esprima-style errors.
     * @param {int} pos The position of the error.
     * @param {string} message The error message.
     * @throws {SyntaxError} A syntax error.
     * @returns {void}
     */
    raiseRecoverable(s, n) {
      this.raise(s, n);
    }
    /**
     * Overwrites the default unexpected method to throw Esprima-style errors.
     * @param {int} pos The position of the error.
     * @throws {SyntaxError} A syntax error.
     * @returns {void}
     */
    unexpected(s) {
      let n = "Unexpected token";
      if (s != null) {
        if (this.pos = s, this.options.locations)
          for (; this.pos < this.lineStart; )
            this.lineStart = this.input.lastIndexOf(`
`, this.lineStart - 2) + 1, --this.curLine;
        this.nextToken();
      }
      this.end > this.start && (n += ` ${this.input.slice(this.start, this.end)}`), this.raise(this.start, n);
    }
    /*
    * Esprima-FB represents JSX strings as tokens called "JSXText", but Acorn-JSX
    * uses regular tt.string without any distinction between this and regular JS
    * strings. As such, we intercept an attempt to read a JSX string and set a flag
    * on extra so that when tokens are converted, the next token will be switched
    * to JSXText via onToken.
    */
    jsx_readString(s) {
      const n = super.jsx_readString(s);
      return this.type === e.string && (this[Br].jsxAttrValueToken = true), n;
    }
    /**
     * Performs last-minute Esprima-specific compatibility checks and fixes.
     * @param {ASTNode} result The node to check.
     * @returns {ASTNode} The finished node.
     */
    [Zi](s) {
      if (s.type === "TemplateElement") {
        const n = this.input.slice(s.end, s.end + 2) === "${";
        s.range && (s.range[0]--, s.range[1] += n ? 2 : 1), s.loc && (s.loc.start.column--, s.loc.end.column += n ? 2 : 1);
      }
      return s.type.indexOf("Function") > -1 && !s.generator && (s.generator = false), s;
    }
  };
};
var Bw = "espree";
var Ow = "An Esprima-compatible JavaScript parser built on Acorn";
var Lw = "Nicholas C. Zakas <nicholas+npm@nczconsulting.com>";
var Rw = "https://github.com/eslint/espree";
var Nw = "espree.js";
var jw = "7.3.1";
var Mw = [
  "lib",
  "espree.js"
];
var $w = {
  node: "^10.12.0 || >=12.0.0"
};
var Vw = "eslint/espree";
var Uw = {
  url: "http://github.com/eslint/espree.git"
};
var qw = "BSD-2-Clause";
var Ww = {
  acorn: "^7.4.0",
  "acorn-jsx": "^5.3.1",
  "eslint-visitor-keys": "^1.3.0"
};
var zw = {
  browserify: "^16.5.0",
  chai: "^4.2.0",
  eslint: "^6.0.1",
  "eslint-config-eslint": "^5.0.1",
  "eslint-plugin-node": "^9.1.0",
  "eslint-release": "^1.0.0",
  esprima: "latest",
  "esprima-fb": "^8001.2001.0-dev-harmony-fb",
  "json-diff": "^0.5.4",
  leche: "^2.3.0",
  mocha: "^6.2.0",
  nyc: "^14.1.1",
  regenerate: "^1.4.0",
  shelljs: "^0.3.0",
  "shelljs-nodecli": "^0.1.1",
  "unicode-6.3.0": "^0.7.5"
};
var Gw = [
  "ast",
  "ecmascript",
  "javascript",
  "parser",
  "syntax",
  "acorn"
];
var Hw = {
  "generate-regex": "node tools/generate-identifier-regex.js",
  test: "npm run-script lint && node Makefile.js test",
  lint: "node Makefile.js lint",
  fixlint: "node Makefile.js lint --fix",
  "sync-docs": "node Makefile.js docs",
  browserify: "node Makefile.js browserify",
  "generate-release": "eslint-generate-release",
  "generate-alpharelease": "eslint-generate-prerelease alpha",
  "generate-betarelease": "eslint-generate-prerelease beta",
  "generate-rcrelease": "eslint-generate-prerelease rc",
  "publish-release": "eslint-publish-release"
};
var Kw = {
  name: Bw,
  description: Ow,
  author: Lw,
  homepage: Rw,
  main: Nw,
  version: jw,
  files: Mw,
  engines: $w,
  repository: Vw,
  bugs: Uw,
  license: qw,
  dependencies: Ww,
  devDependencies: zw,
  keywords: Gw,
  scripts: Hw
};
var Jw = [
  "left",
  "right"
];
var Xw = [
  "left",
  "right"
];
var Qw = [
  "elements"
];
var Yw = [
  "elements"
];
var Zw = [
  "params",
  "body"
];
var ek = [
  "argument"
];
var tk = [
  "body"
];
var rk = [
  "left",
  "right"
];
var nk = [
  "label"
];
var sk = [
  "callee",
  "arguments"
];
var ak = [
  "param",
  "body"
];
var ik = [
  "expression"
];
var ok = [
  "body"
];
var lk = [
  "id",
  "superClass",
  "body"
];
var uk = [
  "id",
  "superClass",
  "body"
];
var ck = [
  "test",
  "consequent",
  "alternate"
];
var pk = [
  "label"
];
var fk = [];
var hk = [
  "body",
  "test"
];
var mk = [];
var dk = [
  "exported",
  "source"
];
var gk = [
  "declaration"
];
var yk = [
  "declaration",
  "specifiers",
  "source"
];
var xk = [
  "exported",
  "local"
];
var vk = [
  "expression"
];
var Ek = [
  "argument"
];
var bk = [
  "argument"
];
var Ck = [
  "init",
  "test",
  "update",
  "body"
];
var Sk = [
  "left",
  "right",
  "body"
];
var Ak = [
  "left",
  "right",
  "body"
];
var Dk = [
  "id",
  "params",
  "body"
];
var wk = [
  "id",
  "params",
  "body"
];
var kk = [];
var Tk = [
  "test",
  "consequent",
  "alternate"
];
var Fk = [
  "specifiers",
  "source"
];
var Pk = [
  "local"
];
var Ik = [
  "source"
];
var _k = [
  "local"
];
var Bk = [
  "imported",
  "local"
];
var Ok = [
  "name",
  "value"
];
var Lk = [
  "name"
];
var Rk = [
  "openingElement",
  "children",
  "closingElement"
];
var Nk = [];
var jk = [
  "expression"
];
var Mk = [];
var $k = [
  "object",
  "property"
];
var Vk = [
  "namespace",
  "name"
];
var Uk = [
  "name",
  "attributes"
];
var qk = [
  "argument"
];
var Wk = [];
var zk = [
  "openingFragment",
  "children",
  "closingFragment"
];
var Gk = [];
var Hk = [
  "label",
  "body"
];
var Kk = [
  "left",
  "right"
];
var Jk = [
  "object",
  "property"
];
var Xk = [
  "meta",
  "property"
];
var Qk = [
  "key",
  "value"
];
var Yk = [
  "callee",
  "arguments"
];
var Zk = [
  "properties"
];
var eT = [
  "properties"
];
var tT = [
  "body"
];
var rT = [
  "key",
  "value"
];
var nT = [
  "argument"
];
var sT = [
  "argument"
];
var aT = [
  "expressions"
];
var iT = [
  "argument"
];
var oT = [];
var lT = [
  "discriminant",
  "cases"
];
var uT = [
  "test",
  "consequent"
];
var cT = [
  "tag",
  "quasi"
];
var pT = [];
var fT = [
  "quasis",
  "expressions"
];
var hT = [];
var mT = [
  "argument"
];
var dT = [
  "block",
  "handler",
  "finalizer"
];
var gT = [
  "argument"
];
var yT = [
  "argument"
];
var xT = [
  "declarations"
];
var vT = [
  "id",
  "init"
];
var ET = [
  "test",
  "body"
];
var bT = [
  "object",
  "body"
];
var CT = [
  "argument"
];
var ST = {
  AssignmentExpression: Jw,
  AssignmentPattern: Xw,
  ArrayExpression: Qw,
  ArrayPattern: Yw,
  ArrowFunctionExpression: Zw,
  AwaitExpression: ek,
  BlockStatement: tk,
  BinaryExpression: rk,
  BreakStatement: nk,
  CallExpression: sk,
  CatchClause: ak,
  ChainExpression: ik,
  ClassBody: ok,
  ClassDeclaration: lk,
  ClassExpression: uk,
  ConditionalExpression: ck,
  ContinueStatement: pk,
  DebuggerStatement: fk,
  DoWhileStatement: hk,
  EmptyStatement: mk,
  ExportAllDeclaration: dk,
  ExportDefaultDeclaration: gk,
  ExportNamedDeclaration: yk,
  ExportSpecifier: xk,
  ExpressionStatement: vk,
  ExperimentalRestProperty: Ek,
  ExperimentalSpreadProperty: bk,
  ForStatement: Ck,
  ForInStatement: Sk,
  ForOfStatement: Ak,
  FunctionDeclaration: Dk,
  FunctionExpression: wk,
  Identifier: kk,
  IfStatement: Tk,
  ImportDeclaration: Fk,
  ImportDefaultSpecifier: Pk,
  ImportExpression: Ik,
  ImportNamespaceSpecifier: _k,
  ImportSpecifier: Bk,
  JSXAttribute: Ok,
  JSXClosingElement: Lk,
  JSXElement: Rk,
  JSXEmptyExpression: Nk,
  JSXExpressionContainer: jk,
  JSXIdentifier: Mk,
  JSXMemberExpression: $k,
  JSXNamespacedName: Vk,
  JSXOpeningElement: Uk,
  JSXSpreadAttribute: qk,
  JSXText: Wk,
  JSXFragment: zk,
  Literal: Gk,
  LabeledStatement: Hk,
  LogicalExpression: Kk,
  MemberExpression: Jk,
  MetaProperty: Xk,
  MethodDefinition: Qk,
  NewExpression: Yk,
  ObjectExpression: Zk,
  ObjectPattern: eT,
  Program: tT,
  Property: rT,
  RestElement: nT,
  ReturnStatement: sT,
  SequenceExpression: aT,
  SpreadElement: iT,
  Super: oT,
  SwitchStatement: lT,
  SwitchCase: uT,
  TaggedTemplateExpression: cT,
  TemplateElement: pT,
  TemplateLiteral: fT,
  ThisExpression: hT,
  ThrowStatement: mT,
  TryStatement: dT,
  UnaryExpression: gT,
  UpdateExpression: yT,
  VariableDeclaration: xT,
  VariableDeclarator: vT,
  WhileStatement: ET,
  WithStatement: bT,
  YieldExpression: CT
};
var Ms = ST;
var AT = Object.freeze(Object.keys(Ms));
for (const t4 of AT)
  Object.freeze(Ms[t4]);
Object.freeze(Ms);
var DT = /* @__PURE__ */ new Set([
  "parent",
  "leadingComments",
  "trailingComments"
]);
function wT(t4) {
  return !DT.has(t4) && t4[0] !== "_";
}
var du = Object.freeze({
  /**
   * Visitor keys.
   * @type {{ [type: string]: string[] | undefined }}
   */
  KEYS: Ms,
  /**
   * Get visitor keys of a given node.
   * @param {Object} node The AST node to get keys.
   * @returns {string[]} Visitor keys of the node.
   */
  getKeys(t4) {
    return Object.keys(t4).filter(wT);
  },
  // Disable valid-jsdoc rule because it reports syntax error on the type of @returns.
  // eslint-disable-next-line valid-jsdoc
  /**
   * Make the union set with `KEYS` and given keys.
   * @param {Object} additionalKeys The additional keys.
   * @returns {{ [type: string]: string[] | undefined }} The union set.
   */
  unionWith(t4) {
    const e = Object.assign({}, Ms);
    for (const r of Object.keys(t4))
      if (e.hasOwnProperty(r)) {
        const s = new Set(t4[r]);
        for (const n of e[r])
          s.add(n);
        e[r] = Object.freeze(Array.from(s));
      } else
        e[r] = Object.freeze(Array.from(t4[r]));
    return Object.freeze(e);
  }
});
var Md = cl;
var kT = zx.exports;
var eo = Ew;
var $d = _w;
var { getLatestEcmaVersion: TT, getSupportedEcmaVersions: FT } = Gx;
var Hx = {
  _regular: null,
  _jsx: null,
  get regular() {
    return this._regular === null && (this._regular = Md.Parser.extend($d())), this._regular;
  },
  get jsx() {
    return this._jsx === null && (this._jsx = Md.Parser.extend(kT(), $d())), this._jsx;
  },
  get(t4) {
    return !!(t4 && t4.ecmaFeatures && t4.ecmaFeatures.jsx) ? this.jsx : this.regular;
  }
};
function PT(t4, e) {
  const r = Hx.get(e);
  return (!e || e.tokens !== true) && (e = Object.assign({}, e, { tokens: true })), new r(e, t4).tokenize();
}
function IT(t4, e) {
  const r = Hx.get(e);
  return new r(e, t4).parse();
}
Wr.version = Kw.version;
Wr.tokenize = PT;
Wr.parse = IT;
Wr.Syntax = function() {
  let t4, e = {};
  typeof Object.create == "function" && (e = /* @__PURE__ */ Object.create(null));
  for (t4 in eo)
    Object.hasOwnProperty.call(eo, t4) && (e[t4] = eo[t4]);
  return typeof Object.freeze == "function" && Object.freeze(e), e;
}();
Wr.VisitorKeys = function() {
  return du.KEYS;
}();
Wr.latestEcmaVersion = TT();
Wr.supportedEcmaVersions = FT();
var fl = { exports: {} };
(function(t4, e) {
  var r = 200, s = "__lodash_hash_undefined__", n = 800, a = 16, o = 9007199254740991, l = "[object Arguments]", i = "[object Array]", u = "[object AsyncFunction]", c = "[object Boolean]", f = "[object Date]", h = "[object Error]", p = "[object Function]", m = "[object GeneratorFunction]", d = "[object Map]", g = "[object Number]", y = "[object Null]", x = "[object Object]", A = "[object Proxy]", b = "[object RegExp]", v = "[object Set]", C = "[object String]", T = "[object Undefined]", w = "[object WeakMap]", B = "[object ArrayBuffer]", I = "[object DataView]", _ = "[object Float32Array]", S = "[object Float64Array]", F = "[object Int8Array]", N = "[object Int16Array]", k = "[object Int32Array]", j = "[object Uint8Array]", O = "[object Uint8ClampedArray]", z = "[object Uint16Array]", te = "[object Uint32Array]", se = /[\\^$.*+?()[\]{}|]/g, ye = /^\[object .+?Constructor\]$/, Se = /^(?:0|[1-9]\d*)$/, xe = {};
  xe[_] = xe[S] = xe[F] = xe[N] = xe[k] = xe[j] = xe[O] = xe[z] = xe[te] = true, xe[l] = xe[i] = xe[B] = xe[c] = xe[I] = xe[f] = xe[h] = xe[p] = xe[d] = xe[g] = xe[x] = xe[b] = xe[v] = xe[C] = xe[w] = false;
  var Ae = typeof mr == "object" && mr && mr.Object === Object && mr, _e = typeof self == "object" && self && self.Object === Object && self, H = Ae || _e || Function("return this")(), Q = e && !e.nodeType && e, ge = Q && true && t4 && !t4.nodeType && t4, ae = ge && ge.exports === Q, ee = ae && Ae.process, he = function() {
    try {
      var q = ge && ge.require && ge.require("util").types;
      return q || ee && ee.binding && ee.binding("util");
    } catch {
    }
  }(), R = he && he.isTypedArray;
  function D(q, Y, ie) {
    switch (ie.length) {
      case 0:
        return q.call(Y);
      case 1:
        return q.call(Y, ie[0]);
      case 2:
        return q.call(Y, ie[0], ie[1]);
      case 3:
        return q.call(Y, ie[0], ie[1], ie[2]);
    }
    return q.apply(Y, ie);
  }
  function U(q, Y) {
    for (var ie = -1, Ie = Array(q); ++ie < q; )
      Ie[ie] = Y(ie);
    return Ie;
  }
  function ne(q) {
    return function(Y) {
      return q(Y);
    };
  }
  function pe(q, Y) {
    return q == null ? void 0 : q[Y];
  }
  function Ee(q, Y) {
    return function(ie) {
      return q(Y(ie));
    };
  }
  var Re = Array.prototype, We = Function.prototype, wt = Object.prototype, Lt = H["__core-js_shared__"], et = We.toString, Ge = wt.hasOwnProperty, mt = function() {
    var q = /[^.]+$/.exec(Lt && Lt.keys && Lt.keys.IE_PROTO || "");
    return q ? "Symbol(src)_1." + q : "";
  }(), tr = wt.toString, vr = et.call(Object), Er = RegExp(
    "^" + et.call(Ge).replace(se, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
  ), hr = ae ? H.Buffer : void 0, P = H.Symbol, It = H.Uint8Array, St = hr ? hr.allocUnsafe : void 0, rr = Ee(Object.getPrototypeOf, Object), Te = Object.create, qe = wt.propertyIsEnumerable, Be = Re.splice, At = P ? P.toStringTag : void 0, bt = function() {
    try {
      var q = Mi(Object, "defineProperty");
      return q({}, "", {}), q;
    } catch {
    }
  }(), Ce = hr ? hr.isBuffer : void 0, Z = Math.max, W = Date.now, G = Mi(H, "Map"), J = Mi(Object, "create"), le = /* @__PURE__ */ function() {
    function q() {
    }
    return function(Y) {
      if (!mn(Y))
        return {};
      if (Te)
        return Te(Y);
      q.prototype = Y;
      var ie = new q();
      return q.prototype = void 0, ie;
    };
  }();
  function ce(q) {
    var Y = -1, ie = q == null ? 0 : q.length;
    for (this.clear(); ++Y < ie; ) {
      var Ie = q[Y];
      this.set(Ie[0], Ie[1]);
    }
  }
  function Fe() {
    this.__data__ = J ? J(null) : {}, this.size = 0;
  }
  function Ve(q) {
    var Y = this.has(q) && delete this.__data__[q];
    return this.size -= Y ? 1 : 0, Y;
  }
  function Ye(q) {
    var Y = this.__data__;
    if (J) {
      var ie = Y[q];
      return ie === s ? void 0 : ie;
    }
    return Ge.call(Y, q) ? Y[q] : void 0;
  }
  function lt(q) {
    var Y = this.__data__;
    return J ? Y[q] !== void 0 : Ge.call(Y, q);
  }
  function xt(q, Y) {
    var ie = this.__data__;
    return this.size += this.has(q) ? 0 : 1, ie[q] = J && Y === void 0 ? s : Y, this;
  }
  ce.prototype.clear = Fe, ce.prototype.delete = Ve, ce.prototype.get = Ye, ce.prototype.has = lt, ce.prototype.set = xt;
  function oe(q) {
    var Y = -1, ie = q == null ? 0 : q.length;
    for (this.clear(); ++Y < ie; ) {
      var Ie = q[Y];
      this.set(Ie[0], Ie[1]);
    }
  }
  function be() {
    this.__data__ = [], this.size = 0;
  }
  function ke(q) {
    var Y = this.__data__, ie = at(Y, q);
    if (ie < 0)
      return false;
    var Ie = Y.length - 1;
    return ie == Ie ? Y.pop() : Be.call(Y, ie, 1), --this.size, true;
  }
  function re(q) {
    var Y = this.__data__, ie = at(Y, q);
    return ie < 0 ? void 0 : Y[ie][1];
  }
  function M(q) {
    return at(this.__data__, q) > -1;
  }
  function L(q, Y) {
    var ie = this.__data__, Ie = at(ie, q);
    return Ie < 0 ? (++this.size, ie.push([q, Y])) : ie[Ie][1] = Y, this;
  }
  oe.prototype.clear = be, oe.prototype.delete = ke, oe.prototype.get = re, oe.prototype.has = M, oe.prototype.set = L;
  function V(q) {
    var Y = -1, ie = q == null ? 0 : q.length;
    for (this.clear(); ++Y < ie; ) {
      var Ie = q[Y];
      this.set(Ie[0], Ie[1]);
    }
  }
  function K() {
    this.size = 0, this.__data__ = {
      hash: new ce(),
      map: new (G || oe)(),
      string: new ce()
    };
  }
  function X(q) {
    var Y = ra(this, q).delete(q);
    return this.size -= Y ? 1 : 0, Y;
  }
  function de(q) {
    return ra(this, q).get(q);
  }
  function we(q) {
    return ra(this, q).has(q);
  }
  function Me(q, Y) {
    var ie = ra(this, q), Ie = ie.size;
    return ie.set(q, Y), this.size += ie.size == Ie ? 0 : 1, this;
  }
  V.prototype.clear = K, V.prototype.delete = X, V.prototype.get = de, V.prototype.has = we, V.prototype.set = Me;
  function Ne(q) {
    var Y = this.__data__ = new oe(q);
    this.size = Y.size;
  }
  function tt() {
    this.__data__ = new oe(), this.size = 0;
  }
  function je(q) {
    var Y = this.__data__, ie = Y.delete(q);
    return this.size = Y.size, ie;
  }
  function fe(q) {
    return this.__data__.get(q);
  }
  function De(q) {
    return this.__data__.has(q);
  }
  function ve(q, Y) {
    var ie = this.__data__;
    if (ie instanceof oe) {
      var Ie = ie.__data__;
      if (!G || Ie.length < r - 1)
        return Ie.push([q, Y]), this.size = ++ie.size, this;
      ie = this.__data__ = new V(Ie);
    }
    return ie.set(q, Y), this.size = ie.size, this;
  }
  Ne.prototype.clear = tt, Ne.prototype.delete = je, Ne.prototype.get = fe, Ne.prototype.has = De, Ne.prototype.set = ve;
  function ue(q, Y) {
    var ie = Ui(q), Ie = !ie && Vi(q), Je = !ie && !Ie && dd(q), nt = !ie && !Ie && !Je && yd(q), ct = ie || Ie || Je || nt, He = ct ? U(q.length, String) : [], pt = He.length;
    for (var ar in q)
      (Y || Ge.call(q, ar)) && !(ct && // Safari 9 has enumerable `arguments.length` in strict mode.
      (ar == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
      Je && (ar == "offset" || ar == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
      nt && (ar == "buffer" || ar == "byteLength" || ar == "byteOffset") || // Skip index properties.
      hd(ar, pt))) && He.push(ar);
    return He;
  }
  function Pe(q, Y, ie) {
    (ie !== void 0 && !na(q[Y], ie) || ie === void 0 && !(Y in q)) && ut(q, Y, ie);
  }
  function Oe(q, Y, ie) {
    var Ie = q[Y];
    (!(Ge.call(q, Y) && na(Ie, ie)) || ie === void 0 && !(Y in q)) && ut(q, Y, ie);
  }
  function at(q, Y) {
    for (var ie = q.length; ie--; )
      if (na(q[ie][0], Y))
        return ie;
    return -1;
  }
  function ut(q, Y, ie) {
    Y == "__proto__" && bt ? bt(q, Y, {
      configurable: true,
      enumerable: true,
      value: ie,
      writable: true
    }) : q[Y] = ie;
  }
  var dt = zb();
  function Dt(q) {
    return q == null ? q === void 0 ? T : y : At && At in Object(q) ? Gb(q) : Yb(q);
  }
  function zt(q) {
    return fs(q) && Dt(q) == l;
  }
  function kt(q) {
    if (!mn(q) || Xb(q))
      return false;
    var Y = Wi(q) ? Er : ye;
    return Y.test(r1(q));
  }
  function nr(q) {
    return fs(q) && gd(q.length) && !!xe[Dt(q)];
  }
  function Ir(q) {
    if (!mn(q))
      return Qb(q);
    var Y = md(q), ie = [];
    for (var Ie in q)
      Ie == "constructor" && (Y || !Ge.call(q, Ie)) || ie.push(Ie);
    return ie;
  }
  function sr(q, Y, ie, Ie, Je) {
    q !== Y && dt(Y, function(nt, ct) {
      if (Je || (Je = new Ne()), mn(nt))
        fn(q, Y, ct, ie, sr, Ie, Je);
      else {
        var He = Ie ? Ie($i(q, ct), nt, ct + "", q, Y, Je) : void 0;
        He === void 0 && (He = nt), Pe(q, ct, He);
      }
    }, xd);
  }
  function fn(q, Y, ie, Ie, Je, nt, ct) {
    var He = $i(q, ie), pt = $i(Y, ie), ar = ct.get(pt);
    if (ar) {
      Pe(q, ie, ar);
      return;
    }
    var Gt = nt ? nt(He, pt, ie + "", q, Y, ct) : void 0, hs = Gt === void 0;
    if (hs) {
      var zi = Ui(pt), Gi = !zi && dd(pt), Ed = !zi && !Gi && yd(pt);
      Gt = pt, zi || Gi || Ed ? Ui(He) ? Gt = He : n1(He) ? Gt = ea(He) : Gi ? (hs = false, Gt = Bn(pt, true)) : Ed ? (hs = false, Gt = Ln(pt, true)) : Gt = [] : s1(pt) || Vi(pt) ? (Gt = He, Vi(He) ? Gt = a1(He) : (!mn(He) || Wi(He)) && (Gt = Hb(pt))) : hs = false;
    }
    hs && (ct.set(pt, Gt), Je(Gt, pt, Ie, nt, ct), ct.delete(pt)), Pe(q, ie, Gt);
  }
  function Ys(q, Y) {
    return e1(Zb(q, Y, vd), q + "");
  }
  var Zs = bt ? function(q, Y) {
    return bt(q, "toString", {
      configurable: true,
      enumerable: false,
      value: o1(Y),
      writable: true
    });
  } : vd;
  function Bn(q, Y) {
    if (Y)
      return q.slice();
    var ie = q.length, Ie = St ? St(ie) : new q.constructor(ie);
    return q.copy(Ie), Ie;
  }
  function On(q) {
    var Y = new q.constructor(q.byteLength);
    return new It(Y).set(new It(q)), Y;
  }
  function Ln(q, Y) {
    var ie = Y ? On(q.buffer) : q.buffer;
    return new q.constructor(ie, q.byteOffset, q.length);
  }
  function ea(q, Y) {
    var ie = -1, Ie = q.length;
    for (Y || (Y = Array(Ie)); ++ie < Ie; )
      Y[ie] = q[ie];
    return Y;
  }
  function ta(q, Y, ie, Ie) {
    var Je = !ie;
    ie || (ie = {});
    for (var nt = -1, ct = Y.length; ++nt < ct; ) {
      var He = Y[nt], pt = Ie ? Ie(ie[He], q[He], He, ie, q) : void 0;
      pt === void 0 && (pt = q[He]), Je ? ut(ie, He, pt) : Oe(ie, He, pt);
    }
    return ie;
  }
  function hn(q) {
    return Ys(function(Y, ie) {
      var Ie = -1, Je = ie.length, nt = Je > 1 ? ie[Je - 1] : void 0, ct = Je > 2 ? ie[2] : void 0;
      for (nt = q.length > 3 && typeof nt == "function" ? (Je--, nt) : void 0, ct && Kb(ie[0], ie[1], ct) && (nt = Je < 3 ? void 0 : nt, Je = 1), Y = Object(Y); ++Ie < Je; ) {
        var He = ie[Ie];
        He && q(Y, He, Ie, nt);
      }
      return Y;
    });
  }
  function zb(q) {
    return function(Y, ie, Ie) {
      for (var Je = -1, nt = Object(Y), ct = Ie(Y), He = ct.length; He--; ) {
        var pt = ct[q ? He : ++Je];
        if (ie(nt[pt], pt, nt) === false)
          break;
      }
      return Y;
    };
  }
  function ra(q, Y) {
    var ie = q.__data__;
    return Jb(Y) ? ie[typeof Y == "string" ? "string" : "hash"] : ie.map;
  }
  function Mi(q, Y) {
    var ie = pe(q, Y);
    return kt(ie) ? ie : void 0;
  }
  function Gb(q) {
    var Y = Ge.call(q, At), ie = q[At];
    try {
      q[At] = void 0;
      var Ie = true;
    } catch {
    }
    var Je = tr.call(q);
    return Ie && (Y ? q[At] = ie : delete q[At]), Je;
  }
  function Hb(q) {
    return typeof q.constructor == "function" && !md(q) ? le(rr(q)) : {};
  }
  function hd(q, Y) {
    var ie = typeof q;
    return Y = Y ?? o, !!Y && (ie == "number" || ie != "symbol" && Se.test(q)) && q > -1 && q % 1 == 0 && q < Y;
  }
  function Kb(q, Y, ie) {
    if (!mn(ie))
      return false;
    var Ie = typeof Y;
    return (Ie == "number" ? qi(ie) && hd(Y, ie.length) : Ie == "string" && Y in ie) ? na(ie[Y], q) : false;
  }
  function Jb(q) {
    var Y = typeof q;
    return Y == "string" || Y == "number" || Y == "symbol" || Y == "boolean" ? q !== "__proto__" : q === null;
  }
  function Xb(q) {
    return !!mt && mt in q;
  }
  function md(q) {
    var Y = q && q.constructor, ie = typeof Y == "function" && Y.prototype || wt;
    return q === ie;
  }
  function Qb(q) {
    var Y = [];
    if (q != null)
      for (var ie in Object(q))
        Y.push(ie);
    return Y;
  }
  function Yb(q) {
    return tr.call(q);
  }
  function Zb(q, Y, ie) {
    return Y = Z(Y === void 0 ? q.length - 1 : Y, 0), function() {
      for (var Ie = arguments, Je = -1, nt = Z(Ie.length - Y, 0), ct = Array(nt); ++Je < nt; )
        ct[Je] = Ie[Y + Je];
      Je = -1;
      for (var He = Array(Y + 1); ++Je < Y; )
        He[Je] = Ie[Je];
      return He[Y] = ie(ct), D(q, this, He);
    };
  }
  function $i(q, Y) {
    if (!(Y === "constructor" && typeof q[Y] == "function") && Y != "__proto__")
      return q[Y];
  }
  var e1 = t1(Zs);
  function t1(q) {
    var Y = 0, ie = 0;
    return function() {
      var Ie = W(), Je = a - (Ie - ie);
      if (ie = Ie, Je > 0) {
        if (++Y >= n)
          return arguments[0];
      } else
        Y = 0;
      return q.apply(void 0, arguments);
    };
  }
  function r1(q) {
    if (q != null) {
      try {
        return et.call(q);
      } catch {
      }
      try {
        return q + "";
      } catch {
      }
    }
    return "";
  }
  function na(q, Y) {
    return q === Y || q !== q && Y !== Y;
  }
  var Vi = zt(/* @__PURE__ */ function() {
    return arguments;
  }()) ? zt : function(q) {
    return fs(q) && Ge.call(q, "callee") && !qe.call(q, "callee");
  }, Ui = Array.isArray;
  function qi(q) {
    return q != null && gd(q.length) && !Wi(q);
  }
  function n1(q) {
    return fs(q) && qi(q);
  }
  var dd = Ce || l1;
  function Wi(q) {
    if (!mn(q))
      return false;
    var Y = Dt(q);
    return Y == p || Y == m || Y == u || Y == A;
  }
  function gd(q) {
    return typeof q == "number" && q > -1 && q % 1 == 0 && q <= o;
  }
  function mn(q) {
    var Y = typeof q;
    return q != null && (Y == "object" || Y == "function");
  }
  function fs(q) {
    return q != null && typeof q == "object";
  }
  function s1(q) {
    if (!fs(q) || Dt(q) != x)
      return false;
    var Y = rr(q);
    if (Y === null)
      return true;
    var ie = Ge.call(Y, "constructor") && Y.constructor;
    return typeof ie == "function" && ie instanceof ie && et.call(ie) == vr;
  }
  var yd = R ? ne(R) : nr;
  function a1(q) {
    return ta(q, xd(q));
  }
  function xd(q) {
    return qi(q) ? ue(q, true) : Ir(q);
  }
  var i1 = hn(function(q, Y, ie) {
    sr(q, Y, ie);
  });
  function o1(q) {
    return function() {
      return q;
    };
  }
  function vd(q) {
    return q;
  }
  function l1() {
    return false;
  }
  t4.exports = i1;
})(fl, fl.exports);
var gu = { exports: {} };
var _T = {
  AggregateError: false,
  Array: false,
  ArrayBuffer: false,
  Atomics: false,
  BigInt: false,
  BigInt64Array: false,
  BigUint64Array: false,
  Boolean: false,
  constructor: false,
  DataView: false,
  Date: false,
  decodeURI: false,
  decodeURIComponent: false,
  encodeURI: false,
  encodeURIComponent: false,
  Error: false,
  escape: false,
  eval: false,
  EvalError: false,
  FinalizationRegistry: false,
  Float32Array: false,
  Float64Array: false,
  Function: false,
  globalThis: false,
  hasOwnProperty: false,
  Infinity: false,
  Int16Array: false,
  Int32Array: false,
  Int8Array: false,
  isFinite: false,
  isNaN: false,
  isPrototypeOf: false,
  JSON: false,
  Map: false,
  Math: false,
  NaN: false,
  Number: false,
  Object: false,
  parseFloat: false,
  parseInt: false,
  Promise: false,
  propertyIsEnumerable: false,
  Proxy: false,
  RangeError: false,
  ReferenceError: false,
  Reflect: false,
  RegExp: false,
  Set: false,
  SharedArrayBuffer: false,
  String: false,
  Symbol: false,
  SyntaxError: false,
  toLocaleString: false,
  toString: false,
  TypeError: false,
  Uint16Array: false,
  Uint32Array: false,
  Uint8Array: false,
  Uint8ClampedArray: false,
  undefined: false,
  unescape: false,
  URIError: false,
  valueOf: false,
  WeakMap: false,
  WeakRef: false,
  WeakSet: false
};
var BT = {
  Array: false,
  Boolean: false,
  constructor: false,
  Date: false,
  decodeURI: false,
  decodeURIComponent: false,
  encodeURI: false,
  encodeURIComponent: false,
  Error: false,
  escape: false,
  eval: false,
  EvalError: false,
  Function: false,
  hasOwnProperty: false,
  Infinity: false,
  isFinite: false,
  isNaN: false,
  isPrototypeOf: false,
  JSON: false,
  Math: false,
  NaN: false,
  Number: false,
  Object: false,
  parseFloat: false,
  parseInt: false,
  propertyIsEnumerable: false,
  RangeError: false,
  ReferenceError: false,
  RegExp: false,
  String: false,
  SyntaxError: false,
  toLocaleString: false,
  toString: false,
  TypeError: false,
  undefined: false,
  unescape: false,
  URIError: false,
  valueOf: false
};
var OT = {
  Array: false,
  ArrayBuffer: false,
  Boolean: false,
  constructor: false,
  DataView: false,
  Date: false,
  decodeURI: false,
  decodeURIComponent: false,
  encodeURI: false,
  encodeURIComponent: false,
  Error: false,
  escape: false,
  eval: false,
  EvalError: false,
  Float32Array: false,
  Float64Array: false,
  Function: false,
  hasOwnProperty: false,
  Infinity: false,
  Int16Array: false,
  Int32Array: false,
  Int8Array: false,
  isFinite: false,
  isNaN: false,
  isPrototypeOf: false,
  JSON: false,
  Map: false,
  Math: false,
  NaN: false,
  Number: false,
  Object: false,
  parseFloat: false,
  parseInt: false,
  Promise: false,
  propertyIsEnumerable: false,
  Proxy: false,
  RangeError: false,
  ReferenceError: false,
  Reflect: false,
  RegExp: false,
  Set: false,
  String: false,
  Symbol: false,
  SyntaxError: false,
  toLocaleString: false,
  toString: false,
  TypeError: false,
  Uint16Array: false,
  Uint32Array: false,
  Uint8Array: false,
  Uint8ClampedArray: false,
  undefined: false,
  unescape: false,
  URIError: false,
  valueOf: false,
  WeakMap: false,
  WeakSet: false
};
var LT = {
  Array: false,
  ArrayBuffer: false,
  Atomics: false,
  Boolean: false,
  constructor: false,
  DataView: false,
  Date: false,
  decodeURI: false,
  decodeURIComponent: false,
  encodeURI: false,
  encodeURIComponent: false,
  Error: false,
  escape: false,
  eval: false,
  EvalError: false,
  Float32Array: false,
  Float64Array: false,
  Function: false,
  hasOwnProperty: false,
  Infinity: false,
  Int16Array: false,
  Int32Array: false,
  Int8Array: false,
  isFinite: false,
  isNaN: false,
  isPrototypeOf: false,
  JSON: false,
  Map: false,
  Math: false,
  NaN: false,
  Number: false,
  Object: false,
  parseFloat: false,
  parseInt: false,
  Promise: false,
  propertyIsEnumerable: false,
  Proxy: false,
  RangeError: false,
  ReferenceError: false,
  Reflect: false,
  RegExp: false,
  Set: false,
  SharedArrayBuffer: false,
  String: false,
  Symbol: false,
  SyntaxError: false,
  toLocaleString: false,
  toString: false,
  TypeError: false,
  Uint16Array: false,
  Uint32Array: false,
  Uint8Array: false,
  Uint8ClampedArray: false,
  undefined: false,
  unescape: false,
  URIError: false,
  valueOf: false,
  WeakMap: false,
  WeakSet: false
};
var RT = {
  Array: false,
  ArrayBuffer: false,
  Atomics: false,
  BigInt: false,
  BigInt64Array: false,
  BigUint64Array: false,
  Boolean: false,
  constructor: false,
  DataView: false,
  Date: false,
  decodeURI: false,
  decodeURIComponent: false,
  encodeURI: false,
  encodeURIComponent: false,
  Error: false,
  escape: false,
  eval: false,
  EvalError: false,
  Float32Array: false,
  Float64Array: false,
  Function: false,
  globalThis: false,
  hasOwnProperty: false,
  Infinity: false,
  Int16Array: false,
  Int32Array: false,
  Int8Array: false,
  isFinite: false,
  isNaN: false,
  isPrototypeOf: false,
  JSON: false,
  Map: false,
  Math: false,
  NaN: false,
  Number: false,
  Object: false,
  parseFloat: false,
  parseInt: false,
  Promise: false,
  propertyIsEnumerable: false,
  Proxy: false,
  RangeError: false,
  ReferenceError: false,
  Reflect: false,
  RegExp: false,
  Set: false,
  SharedArrayBuffer: false,
  String: false,
  Symbol: false,
  SyntaxError: false,
  toLocaleString: false,
  toString: false,
  TypeError: false,
  Uint16Array: false,
  Uint32Array: false,
  Uint8Array: false,
  Uint8ClampedArray: false,
  undefined: false,
  unescape: false,
  URIError: false,
  valueOf: false,
  WeakMap: false,
  WeakSet: false
};
var NT = {
  AggregateError: false,
  Array: false,
  ArrayBuffer: false,
  Atomics: false,
  BigInt: false,
  BigInt64Array: false,
  BigUint64Array: false,
  Boolean: false,
  constructor: false,
  DataView: false,
  Date: false,
  decodeURI: false,
  decodeURIComponent: false,
  encodeURI: false,
  encodeURIComponent: false,
  Error: false,
  escape: false,
  eval: false,
  EvalError: false,
  FinalizationRegistry: false,
  Float32Array: false,
  Float64Array: false,
  Function: false,
  globalThis: false,
  hasOwnProperty: false,
  Infinity: false,
  Int16Array: false,
  Int32Array: false,
  Int8Array: false,
  isFinite: false,
  isNaN: false,
  isPrototypeOf: false,
  JSON: false,
  Map: false,
  Math: false,
  NaN: false,
  Number: false,
  Object: false,
  parseFloat: false,
  parseInt: false,
  Promise: false,
  propertyIsEnumerable: false,
  Proxy: false,
  RangeError: false,
  ReferenceError: false,
  Reflect: false,
  RegExp: false,
  Set: false,
  SharedArrayBuffer: false,
  String: false,
  Symbol: false,
  SyntaxError: false,
  toLocaleString: false,
  toString: false,
  TypeError: false,
  Uint16Array: false,
  Uint32Array: false,
  Uint8Array: false,
  Uint8ClampedArray: false,
  undefined: false,
  unescape: false,
  URIError: false,
  valueOf: false,
  WeakMap: false,
  WeakRef: false,
  WeakSet: false
};
var jT = {
  AbortController: false,
  AbortSignal: false,
  addEventListener: false,
  alert: false,
  AnalyserNode: false,
  Animation: false,
  AnimationEffectReadOnly: false,
  AnimationEffectTiming: false,
  AnimationEffectTimingReadOnly: false,
  AnimationEvent: false,
  AnimationPlaybackEvent: false,
  AnimationTimeline: false,
  applicationCache: false,
  ApplicationCache: false,
  ApplicationCacheErrorEvent: false,
  atob: false,
  Attr: false,
  Audio: false,
  AudioBuffer: false,
  AudioBufferSourceNode: false,
  AudioContext: false,
  AudioDestinationNode: false,
  AudioListener: false,
  AudioNode: false,
  AudioParam: false,
  AudioProcessingEvent: false,
  AudioScheduledSourceNode: false,
  AudioWorkletGlobalScope: false,
  AudioWorkletNode: false,
  AudioWorkletProcessor: false,
  BarProp: false,
  BaseAudioContext: false,
  BatteryManager: false,
  BeforeUnloadEvent: false,
  BiquadFilterNode: false,
  Blob: false,
  BlobEvent: false,
  blur: false,
  BroadcastChannel: false,
  btoa: false,
  BudgetService: false,
  ByteLengthQueuingStrategy: false,
  Cache: false,
  caches: false,
  CacheStorage: false,
  cancelAnimationFrame: false,
  cancelIdleCallback: false,
  CanvasCaptureMediaStreamTrack: false,
  CanvasGradient: false,
  CanvasPattern: false,
  CanvasRenderingContext2D: false,
  ChannelMergerNode: false,
  ChannelSplitterNode: false,
  CharacterData: false,
  clearInterval: false,
  clearTimeout: false,
  clientInformation: false,
  ClipboardEvent: false,
  ClipboardItem: false,
  close: false,
  closed: false,
  CloseEvent: false,
  Comment: false,
  CompositionEvent: false,
  confirm: false,
  console: false,
  ConstantSourceNode: false,
  ConvolverNode: false,
  CountQueuingStrategy: false,
  createImageBitmap: false,
  Credential: false,
  CredentialsContainer: false,
  crypto: false,
  Crypto: false,
  CryptoKey: false,
  CSS: false,
  CSSConditionRule: false,
  CSSFontFaceRule: false,
  CSSGroupingRule: false,
  CSSImportRule: false,
  CSSKeyframeRule: false,
  CSSKeyframesRule: false,
  CSSMatrixComponent: false,
  CSSMediaRule: false,
  CSSNamespaceRule: false,
  CSSPageRule: false,
  CSSPerspective: false,
  CSSRotate: false,
  CSSRule: false,
  CSSRuleList: false,
  CSSScale: false,
  CSSSkew: false,
  CSSSkewX: false,
  CSSSkewY: false,
  CSSStyleDeclaration: false,
  CSSStyleRule: false,
  CSSStyleSheet: false,
  CSSSupportsRule: false,
  CSSTransformValue: false,
  CSSTranslate: false,
  CustomElementRegistry: false,
  customElements: false,
  CustomEvent: false,
  DataTransfer: false,
  DataTransferItem: false,
  DataTransferItemList: false,
  defaultstatus: false,
  defaultStatus: false,
  DelayNode: false,
  DeviceMotionEvent: false,
  DeviceOrientationEvent: false,
  devicePixelRatio: false,
  dispatchEvent: false,
  document: false,
  Document: false,
  DocumentFragment: false,
  DocumentType: false,
  DOMError: false,
  DOMException: false,
  DOMImplementation: false,
  DOMMatrix: false,
  DOMMatrixReadOnly: false,
  DOMParser: false,
  DOMPoint: false,
  DOMPointReadOnly: false,
  DOMQuad: false,
  DOMRect: false,
  DOMRectList: false,
  DOMRectReadOnly: false,
  DOMStringList: false,
  DOMStringMap: false,
  DOMTokenList: false,
  DragEvent: false,
  DynamicsCompressorNode: false,
  Element: false,
  ErrorEvent: false,
  event: false,
  Event: false,
  EventSource: false,
  EventTarget: false,
  external: false,
  fetch: false,
  File: false,
  FileList: false,
  FileReader: false,
  find: false,
  focus: false,
  FocusEvent: false,
  FontFace: false,
  FontFaceSetLoadEvent: false,
  FormData: false,
  FormDataEvent: false,
  frameElement: false,
  frames: false,
  GainNode: false,
  Gamepad: false,
  GamepadButton: false,
  GamepadEvent: false,
  getComputedStyle: false,
  getSelection: false,
  HashChangeEvent: false,
  Headers: false,
  history: false,
  History: false,
  HTMLAllCollection: false,
  HTMLAnchorElement: false,
  HTMLAreaElement: false,
  HTMLAudioElement: false,
  HTMLBaseElement: false,
  HTMLBodyElement: false,
  HTMLBRElement: false,
  HTMLButtonElement: false,
  HTMLCanvasElement: false,
  HTMLCollection: false,
  HTMLContentElement: false,
  HTMLDataElement: false,
  HTMLDataListElement: false,
  HTMLDetailsElement: false,
  HTMLDialogElement: false,
  HTMLDirectoryElement: false,
  HTMLDivElement: false,
  HTMLDListElement: false,
  HTMLDocument: false,
  HTMLElement: false,
  HTMLEmbedElement: false,
  HTMLFieldSetElement: false,
  HTMLFontElement: false,
  HTMLFormControlsCollection: false,
  HTMLFormElement: false,
  HTMLFrameElement: false,
  HTMLFrameSetElement: false,
  HTMLHeadElement: false,
  HTMLHeadingElement: false,
  HTMLHRElement: false,
  HTMLHtmlElement: false,
  HTMLIFrameElement: false,
  HTMLImageElement: false,
  HTMLInputElement: false,
  HTMLLabelElement: false,
  HTMLLegendElement: false,
  HTMLLIElement: false,
  HTMLLinkElement: false,
  HTMLMapElement: false,
  HTMLMarqueeElement: false,
  HTMLMediaElement: false,
  HTMLMenuElement: false,
  HTMLMetaElement: false,
  HTMLMeterElement: false,
  HTMLModElement: false,
  HTMLObjectElement: false,
  HTMLOListElement: false,
  HTMLOptGroupElement: false,
  HTMLOptionElement: false,
  HTMLOptionsCollection: false,
  HTMLOutputElement: false,
  HTMLParagraphElement: false,
  HTMLParamElement: false,
  HTMLPictureElement: false,
  HTMLPreElement: false,
  HTMLProgressElement: false,
  HTMLQuoteElement: false,
  HTMLScriptElement: false,
  HTMLSelectElement: false,
  HTMLShadowElement: false,
  HTMLSlotElement: false,
  HTMLSourceElement: false,
  HTMLSpanElement: false,
  HTMLStyleElement: false,
  HTMLTableCaptionElement: false,
  HTMLTableCellElement: false,
  HTMLTableColElement: false,
  HTMLTableElement: false,
  HTMLTableRowElement: false,
  HTMLTableSectionElement: false,
  HTMLTemplateElement: false,
  HTMLTextAreaElement: false,
  HTMLTimeElement: false,
  HTMLTitleElement: false,
  HTMLTrackElement: false,
  HTMLUListElement: false,
  HTMLUnknownElement: false,
  HTMLVideoElement: false,
  IDBCursor: false,
  IDBCursorWithValue: false,
  IDBDatabase: false,
  IDBFactory: false,
  IDBIndex: false,
  IDBKeyRange: false,
  IDBObjectStore: false,
  IDBOpenDBRequest: false,
  IDBRequest: false,
  IDBTransaction: false,
  IDBVersionChangeEvent: false,
  IdleDeadline: false,
  IIRFilterNode: false,
  Image: false,
  ImageBitmap: false,
  ImageBitmapRenderingContext: false,
  ImageCapture: false,
  ImageData: false,
  indexedDB: false,
  innerHeight: false,
  innerWidth: false,
  InputEvent: false,
  IntersectionObserver: false,
  IntersectionObserverEntry: false,
  Intl: false,
  isSecureContext: false,
  KeyboardEvent: false,
  KeyframeEffect: false,
  KeyframeEffectReadOnly: false,
  length: false,
  localStorage: false,
  location: true,
  Location: false,
  locationbar: false,
  matchMedia: false,
  MediaDeviceInfo: false,
  MediaDevices: false,
  MediaElementAudioSourceNode: false,
  MediaEncryptedEvent: false,
  MediaError: false,
  MediaKeyMessageEvent: false,
  MediaKeySession: false,
  MediaKeyStatusMap: false,
  MediaKeySystemAccess: false,
  MediaList: false,
  MediaMetadata: false,
  MediaQueryList: false,
  MediaQueryListEvent: false,
  MediaRecorder: false,
  MediaSettingsRange: false,
  MediaSource: false,
  MediaStream: false,
  MediaStreamAudioDestinationNode: false,
  MediaStreamAudioSourceNode: false,
  MediaStreamEvent: false,
  MediaStreamTrack: false,
  MediaStreamTrackEvent: false,
  menubar: false,
  MessageChannel: false,
  MessageEvent: false,
  MessagePort: false,
  MIDIAccess: false,
  MIDIConnectionEvent: false,
  MIDIInput: false,
  MIDIInputMap: false,
  MIDIMessageEvent: false,
  MIDIOutput: false,
  MIDIOutputMap: false,
  MIDIPort: false,
  MimeType: false,
  MimeTypeArray: false,
  MouseEvent: false,
  moveBy: false,
  moveTo: false,
  MutationEvent: false,
  MutationObserver: false,
  MutationRecord: false,
  name: false,
  NamedNodeMap: false,
  NavigationPreloadManager: false,
  navigator: false,
  Navigator: false,
  NetworkInformation: false,
  Node: false,
  NodeFilter: false,
  NodeIterator: false,
  NodeList: false,
  Notification: false,
  OfflineAudioCompletionEvent: false,
  OfflineAudioContext: false,
  offscreenBuffering: false,
  OffscreenCanvas: true,
  OffscreenCanvasRenderingContext2D: false,
  onabort: true,
  onafterprint: true,
  onanimationend: true,
  onanimationiteration: true,
  onanimationstart: true,
  onappinstalled: true,
  onauxclick: true,
  onbeforeinstallprompt: true,
  onbeforeprint: true,
  onbeforeunload: true,
  onblur: true,
  oncancel: true,
  oncanplay: true,
  oncanplaythrough: true,
  onchange: true,
  onclick: true,
  onclose: true,
  oncontextmenu: true,
  oncuechange: true,
  ondblclick: true,
  ondevicemotion: true,
  ondeviceorientation: true,
  ondeviceorientationabsolute: true,
  ondrag: true,
  ondragend: true,
  ondragenter: true,
  ondragleave: true,
  ondragover: true,
  ondragstart: true,
  ondrop: true,
  ondurationchange: true,
  onemptied: true,
  onended: true,
  onerror: true,
  onfocus: true,
  ongotpointercapture: true,
  onhashchange: true,
  oninput: true,
  oninvalid: true,
  onkeydown: true,
  onkeypress: true,
  onkeyup: true,
  onlanguagechange: true,
  onload: true,
  onloadeddata: true,
  onloadedmetadata: true,
  onloadstart: true,
  onlostpointercapture: true,
  onmessage: true,
  onmessageerror: true,
  onmousedown: true,
  onmouseenter: true,
  onmouseleave: true,
  onmousemove: true,
  onmouseout: true,
  onmouseover: true,
  onmouseup: true,
  onmousewheel: true,
  onoffline: true,
  ononline: true,
  onpagehide: true,
  onpageshow: true,
  onpause: true,
  onplay: true,
  onplaying: true,
  onpointercancel: true,
  onpointerdown: true,
  onpointerenter: true,
  onpointerleave: true,
  onpointermove: true,
  onpointerout: true,
  onpointerover: true,
  onpointerup: true,
  onpopstate: true,
  onprogress: true,
  onratechange: true,
  onrejectionhandled: true,
  onreset: true,
  onresize: true,
  onscroll: true,
  onsearch: true,
  onseeked: true,
  onseeking: true,
  onselect: true,
  onstalled: true,
  onstorage: true,
  onsubmit: true,
  onsuspend: true,
  ontimeupdate: true,
  ontoggle: true,
  ontransitionend: true,
  onunhandledrejection: true,
  onunload: true,
  onvolumechange: true,
  onwaiting: true,
  onwheel: true,
  open: false,
  openDatabase: false,
  opener: false,
  Option: false,
  origin: false,
  OscillatorNode: false,
  outerHeight: false,
  outerWidth: false,
  OverconstrainedError: false,
  PageTransitionEvent: false,
  pageXOffset: false,
  pageYOffset: false,
  PannerNode: false,
  parent: false,
  Path2D: false,
  PaymentAddress: false,
  PaymentRequest: false,
  PaymentRequestUpdateEvent: false,
  PaymentResponse: false,
  performance: false,
  Performance: false,
  PerformanceEntry: false,
  PerformanceLongTaskTiming: false,
  PerformanceMark: false,
  PerformanceMeasure: false,
  PerformanceNavigation: false,
  PerformanceNavigationTiming: false,
  PerformanceObserver: false,
  PerformanceObserverEntryList: false,
  PerformancePaintTiming: false,
  PerformanceResourceTiming: false,
  PerformanceTiming: false,
  PeriodicWave: false,
  Permissions: false,
  PermissionStatus: false,
  personalbar: false,
  PhotoCapabilities: false,
  Plugin: false,
  PluginArray: false,
  PointerEvent: false,
  PopStateEvent: false,
  postMessage: false,
  Presentation: false,
  PresentationAvailability: false,
  PresentationConnection: false,
  PresentationConnectionAvailableEvent: false,
  PresentationConnectionCloseEvent: false,
  PresentationConnectionList: false,
  PresentationReceiver: false,
  PresentationRequest: false,
  print: false,
  ProcessingInstruction: false,
  ProgressEvent: false,
  PromiseRejectionEvent: false,
  prompt: false,
  PushManager: false,
  PushSubscription: false,
  PushSubscriptionOptions: false,
  queueMicrotask: false,
  RadioNodeList: false,
  Range: false,
  ReadableStream: false,
  registerProcessor: false,
  RemotePlayback: false,
  removeEventListener: false,
  reportError: false,
  Request: false,
  requestAnimationFrame: false,
  requestIdleCallback: false,
  resizeBy: false,
  ResizeObserver: false,
  ResizeObserverEntry: false,
  resizeTo: false,
  Response: false,
  RTCCertificate: false,
  RTCDataChannel: false,
  RTCDataChannelEvent: false,
  RTCDtlsTransport: false,
  RTCIceCandidate: false,
  RTCIceGatherer: false,
  RTCIceTransport: false,
  RTCPeerConnection: false,
  RTCPeerConnectionIceEvent: false,
  RTCRtpContributingSource: false,
  RTCRtpReceiver: false,
  RTCRtpSender: false,
  RTCSctpTransport: false,
  RTCSessionDescription: false,
  RTCStatsReport: false,
  RTCTrackEvent: false,
  screen: false,
  Screen: false,
  screenLeft: false,
  ScreenOrientation: false,
  screenTop: false,
  screenX: false,
  screenY: false,
  ScriptProcessorNode: false,
  scroll: false,
  scrollbars: false,
  scrollBy: false,
  scrollTo: false,
  scrollX: false,
  scrollY: false,
  SecurityPolicyViolationEvent: false,
  Selection: false,
  self: false,
  ServiceWorker: false,
  ServiceWorkerContainer: false,
  ServiceWorkerRegistration: false,
  sessionStorage: false,
  setInterval: false,
  setTimeout: false,
  ShadowRoot: false,
  SharedWorker: false,
  SourceBuffer: false,
  SourceBufferList: false,
  speechSynthesis: false,
  SpeechSynthesisEvent: false,
  SpeechSynthesisUtterance: false,
  StaticRange: false,
  status: false,
  statusbar: false,
  StereoPannerNode: false,
  stop: false,
  Storage: false,
  StorageEvent: false,
  StorageManager: false,
  structuredClone: false,
  styleMedia: false,
  StyleSheet: false,
  StyleSheetList: false,
  SubmitEvent: false,
  SubtleCrypto: false,
  SVGAElement: false,
  SVGAngle: false,
  SVGAnimatedAngle: false,
  SVGAnimatedBoolean: false,
  SVGAnimatedEnumeration: false,
  SVGAnimatedInteger: false,
  SVGAnimatedLength: false,
  SVGAnimatedLengthList: false,
  SVGAnimatedNumber: false,
  SVGAnimatedNumberList: false,
  SVGAnimatedPreserveAspectRatio: false,
  SVGAnimatedRect: false,
  SVGAnimatedString: false,
  SVGAnimatedTransformList: false,
  SVGAnimateElement: false,
  SVGAnimateMotionElement: false,
  SVGAnimateTransformElement: false,
  SVGAnimationElement: false,
  SVGCircleElement: false,
  SVGClipPathElement: false,
  SVGComponentTransferFunctionElement: false,
  SVGDefsElement: false,
  SVGDescElement: false,
  SVGDiscardElement: false,
  SVGElement: false,
  SVGEllipseElement: false,
  SVGFEBlendElement: false,
  SVGFEColorMatrixElement: false,
  SVGFEComponentTransferElement: false,
  SVGFECompositeElement: false,
  SVGFEConvolveMatrixElement: false,
  SVGFEDiffuseLightingElement: false,
  SVGFEDisplacementMapElement: false,
  SVGFEDistantLightElement: false,
  SVGFEDropShadowElement: false,
  SVGFEFloodElement: false,
  SVGFEFuncAElement: false,
  SVGFEFuncBElement: false,
  SVGFEFuncGElement: false,
  SVGFEFuncRElement: false,
  SVGFEGaussianBlurElement: false,
  SVGFEImageElement: false,
  SVGFEMergeElement: false,
  SVGFEMergeNodeElement: false,
  SVGFEMorphologyElement: false,
  SVGFEOffsetElement: false,
  SVGFEPointLightElement: false,
  SVGFESpecularLightingElement: false,
  SVGFESpotLightElement: false,
  SVGFETileElement: false,
  SVGFETurbulenceElement: false,
  SVGFilterElement: false,
  SVGForeignObjectElement: false,
  SVGGElement: false,
  SVGGeometryElement: false,
  SVGGradientElement: false,
  SVGGraphicsElement: false,
  SVGImageElement: false,
  SVGLength: false,
  SVGLengthList: false,
  SVGLinearGradientElement: false,
  SVGLineElement: false,
  SVGMarkerElement: false,
  SVGMaskElement: false,
  SVGMatrix: false,
  SVGMetadataElement: false,
  SVGMPathElement: false,
  SVGNumber: false,
  SVGNumberList: false,
  SVGPathElement: false,
  SVGPatternElement: false,
  SVGPoint: false,
  SVGPointList: false,
  SVGPolygonElement: false,
  SVGPolylineElement: false,
  SVGPreserveAspectRatio: false,
  SVGRadialGradientElement: false,
  SVGRect: false,
  SVGRectElement: false,
  SVGScriptElement: false,
  SVGSetElement: false,
  SVGStopElement: false,
  SVGStringList: false,
  SVGStyleElement: false,
  SVGSVGElement: false,
  SVGSwitchElement: false,
  SVGSymbolElement: false,
  SVGTextContentElement: false,
  SVGTextElement: false,
  SVGTextPathElement: false,
  SVGTextPositioningElement: false,
  SVGTitleElement: false,
  SVGTransform: false,
  SVGTransformList: false,
  SVGTSpanElement: false,
  SVGUnitTypes: false,
  SVGUseElement: false,
  SVGViewElement: false,
  TaskAttributionTiming: false,
  Text: false,
  TextDecoder: false,
  TextEncoder: false,
  TextEvent: false,
  TextMetrics: false,
  TextTrack: false,
  TextTrackCue: false,
  TextTrackCueList: false,
  TextTrackList: false,
  TimeRanges: false,
  toolbar: false,
  top: false,
  Touch: false,
  TouchEvent: false,
  TouchList: false,
  TrackEvent: false,
  TransformStream: false,
  TransitionEvent: false,
  TreeWalker: false,
  UIEvent: false,
  URL: false,
  URLSearchParams: false,
  ValidityState: false,
  visualViewport: false,
  VisualViewport: false,
  VTTCue: false,
  WaveShaperNode: false,
  WebAssembly: false,
  WebGL2RenderingContext: false,
  WebGLActiveInfo: false,
  WebGLBuffer: false,
  WebGLContextEvent: false,
  WebGLFramebuffer: false,
  WebGLProgram: false,
  WebGLQuery: false,
  WebGLRenderbuffer: false,
  WebGLRenderingContext: false,
  WebGLSampler: false,
  WebGLShader: false,
  WebGLShaderPrecisionFormat: false,
  WebGLSync: false,
  WebGLTexture: false,
  WebGLTransformFeedback: false,
  WebGLUniformLocation: false,
  WebGLVertexArrayObject: false,
  WebSocket: false,
  WheelEvent: false,
  window: false,
  Window: false,
  Worker: false,
  WritableStream: false,
  XMLDocument: false,
  XMLHttpRequest: false,
  XMLHttpRequestEventTarget: false,
  XMLHttpRequestUpload: false,
  XMLSerializer: false,
  XPathEvaluator: false,
  XPathExpression: false,
  XPathResult: false,
  XSLTProcessor: false
};
var MT = {
  addEventListener: false,
  applicationCache: false,
  atob: false,
  Blob: false,
  BroadcastChannel: false,
  btoa: false,
  Cache: false,
  caches: false,
  clearInterval: false,
  clearTimeout: false,
  close: true,
  console: false,
  CustomEvent: false,
  ErrorEvent: false,
  Event: false,
  fetch: false,
  FileReaderSync: false,
  FormData: false,
  Headers: false,
  IDBCursor: false,
  IDBCursorWithValue: false,
  IDBDatabase: false,
  IDBFactory: false,
  IDBIndex: false,
  IDBKeyRange: false,
  IDBObjectStore: false,
  IDBOpenDBRequest: false,
  IDBRequest: false,
  IDBTransaction: false,
  IDBVersionChangeEvent: false,
  ImageData: false,
  importScripts: true,
  indexedDB: false,
  location: false,
  MessageChannel: false,
  MessageEvent: false,
  MessagePort: false,
  name: false,
  navigator: false,
  Notification: false,
  onclose: true,
  onconnect: true,
  onerror: true,
  onlanguagechange: true,
  onmessage: true,
  onoffline: true,
  ononline: true,
  onrejectionhandled: true,
  onunhandledrejection: true,
  performance: false,
  Performance: false,
  PerformanceEntry: false,
  PerformanceMark: false,
  PerformanceMeasure: false,
  PerformanceNavigation: false,
  PerformanceResourceTiming: false,
  PerformanceTiming: false,
  postMessage: true,
  Promise: false,
  queueMicrotask: false,
  removeEventListener: false,
  reportError: false,
  Request: false,
  Response: false,
  self: true,
  ServiceWorkerRegistration: false,
  setInterval: false,
  setTimeout: false,
  TextDecoder: false,
  TextEncoder: false,
  URL: false,
  URLSearchParams: false,
  WebSocket: false,
  Worker: false,
  WorkerGlobalScope: false,
  XMLHttpRequest: false
};
var $T = {
  __dirname: false,
  __filename: false,
  AbortController: false,
  AbortSignal: false,
  atob: false,
  btoa: false,
  Buffer: false,
  clearImmediate: false,
  clearInterval: false,
  clearTimeout: false,
  console: false,
  DOMException: false,
  Event: false,
  EventTarget: false,
  exports: true,
  fetch: false,
  global: false,
  Intl: false,
  MessageChannel: false,
  MessageEvent: false,
  MessagePort: false,
  module: false,
  performance: false,
  process: false,
  queueMicrotask: false,
  require: false,
  setImmediate: false,
  setInterval: false,
  setTimeout: false,
  structuredClone: false,
  TextDecoder: false,
  TextEncoder: false,
  URL: false,
  URLSearchParams: false
};
var VT = {
  AbortController: false,
  AbortSignal: false,
  atob: false,
  btoa: false,
  Buffer: false,
  clearImmediate: false,
  clearInterval: false,
  clearTimeout: false,
  console: false,
  DOMException: false,
  Event: false,
  EventTarget: false,
  fetch: false,
  global: false,
  Intl: false,
  MessageChannel: false,
  MessageEvent: false,
  MessagePort: false,
  performance: false,
  process: false,
  queueMicrotask: false,
  setImmediate: false,
  setInterval: false,
  setTimeout: false,
  structuredClone: false,
  TextDecoder: false,
  TextEncoder: false,
  URL: false,
  URLSearchParams: false
};
var UT = {
  exports: true,
  global: false,
  module: false,
  require: false
};
var qT = {
  define: false,
  require: false
};
var WT = {
  after: false,
  afterEach: false,
  before: false,
  beforeEach: false,
  context: false,
  describe: false,
  it: false,
  mocha: false,
  run: false,
  setup: false,
  specify: false,
  suite: false,
  suiteSetup: false,
  suiteTeardown: false,
  teardown: false,
  test: false,
  xcontext: false,
  xdescribe: false,
  xit: false,
  xspecify: false
};
var zT = {
  afterAll: false,
  afterEach: false,
  beforeAll: false,
  beforeEach: false,
  describe: false,
  expect: false,
  expectAsync: false,
  fail: false,
  fdescribe: false,
  fit: false,
  it: false,
  jasmine: false,
  pending: false,
  runs: false,
  spyOn: false,
  spyOnAllFunctions: false,
  spyOnProperty: false,
  waits: false,
  waitsFor: false,
  xdescribe: false,
  xit: false
};
var GT = {
  afterAll: false,
  afterEach: false,
  beforeAll: false,
  beforeEach: false,
  describe: false,
  expect: false,
  fdescribe: false,
  fit: false,
  it: false,
  jest: false,
  pit: false,
  require: false,
  test: false,
  xdescribe: false,
  xit: false,
  xtest: false
};
var HT = {
  asyncTest: false,
  deepEqual: false,
  equal: false,
  expect: false,
  module: false,
  notDeepEqual: false,
  notEqual: false,
  notOk: false,
  notPropEqual: false,
  notStrictEqual: false,
  ok: false,
  propEqual: false,
  QUnit: false,
  raises: false,
  start: false,
  stop: false,
  strictEqual: false,
  test: false,
  throws: false
};
var KT = {
  console: true,
  exports: true,
  phantom: true,
  require: true,
  WebPage: true
};
var JT = {
  emit: false,
  exports: false,
  getRow: false,
  log: false,
  module: false,
  provides: false,
  require: false,
  respond: false,
  send: false,
  start: false,
  sum: false
};
var XT = {
  defineClass: false,
  deserialize: false,
  gc: false,
  help: false,
  importClass: false,
  importPackage: false,
  java: false,
  load: false,
  loadClass: false,
  Packages: false,
  print: false,
  quit: false,
  readFile: false,
  readUrl: false,
  runCommand: false,
  seal: false,
  serialize: false,
  spawn: false,
  sync: false,
  toint32: false,
  version: false
};
var QT = {
  __DIR__: false,
  __FILE__: false,
  __LINE__: false,
  com: false,
  edu: false,
  exit: false,
  java: false,
  Java: false,
  javafx: false,
  JavaImporter: false,
  javax: false,
  JSAdapter: false,
  load: false,
  loadWithNewGlobal: false,
  org: false,
  Packages: false,
  print: false,
  quit: false
};
var YT = {
  ActiveXObject: false,
  CollectGarbage: false,
  Debug: false,
  Enumerator: false,
  GetObject: false,
  RuntimeObject: false,
  ScriptEngine: false,
  ScriptEngineBuildVersion: false,
  ScriptEngineMajorVersion: false,
  ScriptEngineMinorVersion: false,
  VBArray: false,
  WScript: false,
  WSH: false
};
var ZT = {
  $: false,
  jQuery: false
};
var eF = {
  YAHOO: false,
  YAHOO_config: false,
  YUI: false,
  YUI_config: false
};
var tF = {
  cat: false,
  cd: false,
  chmod: false,
  config: false,
  cp: false,
  dirs: false,
  echo: false,
  env: false,
  error: false,
  exec: false,
  exit: false,
  find: false,
  grep: false,
  ln: false,
  ls: false,
  mkdir: false,
  mv: false,
  popd: false,
  pushd: false,
  pwd: false,
  rm: false,
  sed: false,
  set: false,
  target: false,
  tempdir: false,
  test: false,
  touch: false,
  which: false
};
var rF = {
  $: false,
  $$: false,
  $A: false,
  $break: false,
  $continue: false,
  $F: false,
  $H: false,
  $R: false,
  $w: false,
  Abstract: false,
  Ajax: false,
  Autocompleter: false,
  Builder: false,
  Class: false,
  Control: false,
  Draggable: false,
  Draggables: false,
  Droppables: false,
  Effect: false,
  Element: false,
  Enumerable: false,
  Event: false,
  Field: false,
  Form: false,
  Hash: false,
  Insertion: false,
  ObjectRange: false,
  PeriodicalExecuter: false,
  Position: false,
  Prototype: false,
  Scriptaculous: false,
  Selector: false,
  Sortable: false,
  SortableObserver: false,
  Sound: false,
  Template: false,
  Toggle: false,
  Try: false
};
var nF = {
  $: false,
  Accounts: false,
  AccountsClient: false,
  AccountsCommon: false,
  AccountsServer: false,
  App: false,
  Assets: false,
  Blaze: false,
  check: false,
  Cordova: false,
  DDP: false,
  DDPRateLimiter: false,
  DDPServer: false,
  Deps: false,
  EJSON: false,
  Email: false,
  HTTP: false,
  Log: false,
  Match: false,
  Meteor: false,
  Mongo: false,
  MongoInternals: false,
  Npm: false,
  Package: false,
  Plugin: false,
  process: false,
  Random: false,
  ReactiveDict: false,
  ReactiveVar: false,
  Router: false,
  ServiceConfiguration: false,
  Session: false,
  share: false,
  Spacebars: false,
  Template: false,
  Tinytest: false,
  Tracker: false,
  UI: false,
  Utils: false,
  WebApp: false,
  WebAppInternals: false
};
var sF = {
  _isWindows: false,
  _rand: false,
  BulkWriteResult: false,
  cat: false,
  cd: false,
  connect: false,
  db: false,
  getHostName: false,
  getMemInfo: false,
  hostname: false,
  ISODate: false,
  listFiles: false,
  load: false,
  ls: false,
  md5sumFile: false,
  mkdir: false,
  Mongo: false,
  NumberInt: false,
  NumberLong: false,
  ObjectId: false,
  PlanCache: false,
  print: false,
  printjson: false,
  pwd: false,
  quit: false,
  removeFile: false,
  rs: false,
  sh: false,
  UUID: false,
  version: false,
  WriteResult: false
};
var aF = {
  $: false,
  Application: false,
  Automation: false,
  console: false,
  delay: false,
  Library: false,
  ObjC: false,
  ObjectSpecifier: false,
  Path: false,
  Progress: false,
  Ref: false
};
var iF = {
  addEventListener: false,
  applicationCache: false,
  atob: false,
  Blob: false,
  BroadcastChannel: false,
  btoa: false,
  Cache: false,
  caches: false,
  CacheStorage: false,
  clearInterval: false,
  clearTimeout: false,
  Client: false,
  clients: false,
  Clients: false,
  close: true,
  console: false,
  CustomEvent: false,
  ErrorEvent: false,
  Event: false,
  ExtendableEvent: false,
  ExtendableMessageEvent: false,
  fetch: false,
  FetchEvent: false,
  FileReaderSync: false,
  FormData: false,
  Headers: false,
  IDBCursor: false,
  IDBCursorWithValue: false,
  IDBDatabase: false,
  IDBFactory: false,
  IDBIndex: false,
  IDBKeyRange: false,
  IDBObjectStore: false,
  IDBOpenDBRequest: false,
  IDBRequest: false,
  IDBTransaction: false,
  IDBVersionChangeEvent: false,
  ImageData: false,
  importScripts: false,
  indexedDB: false,
  location: false,
  MessageChannel: false,
  MessageEvent: false,
  MessagePort: false,
  name: false,
  navigator: false,
  Notification: false,
  onclose: true,
  onconnect: true,
  onerror: true,
  onfetch: true,
  oninstall: true,
  onlanguagechange: true,
  onmessage: true,
  onmessageerror: true,
  onnotificationclick: true,
  onnotificationclose: true,
  onoffline: true,
  ononline: true,
  onpush: true,
  onpushsubscriptionchange: true,
  onrejectionhandled: true,
  onsync: true,
  onunhandledrejection: true,
  performance: false,
  Performance: false,
  PerformanceEntry: false,
  PerformanceMark: false,
  PerformanceMeasure: false,
  PerformanceNavigation: false,
  PerformanceResourceTiming: false,
  PerformanceTiming: false,
  postMessage: true,
  Promise: false,
  queueMicrotask: false,
  registration: false,
  removeEventListener: false,
  Request: false,
  Response: false,
  self: false,
  ServiceWorker: false,
  ServiceWorkerContainer: false,
  ServiceWorkerGlobalScope: false,
  ServiceWorkerMessageEvent: false,
  ServiceWorkerRegistration: false,
  setInterval: false,
  setTimeout: false,
  skipWaiting: false,
  TextDecoder: false,
  TextEncoder: false,
  URL: false,
  URLSearchParams: false,
  WebSocket: false,
  WindowClient: false,
  Worker: false,
  WorkerGlobalScope: false,
  XMLHttpRequest: false
};
var oF = {
  advanceClock: false,
  atom: false,
  fakeClearInterval: false,
  fakeClearTimeout: false,
  fakeSetInterval: false,
  fakeSetTimeout: false,
  resetTimeouts: false,
  waitsForPromise: false
};
var lF = {
  andThen: false,
  click: false,
  currentPath: false,
  currentRouteName: false,
  currentURL: false,
  fillIn: false,
  find: false,
  findAll: false,
  findWithAssert: false,
  keyEvent: false,
  pauseTest: false,
  resumeTest: false,
  triggerEvent: false,
  visit: false,
  wait: false
};
var uF = {
  $: false,
  $$: false,
  browser: false,
  by: false,
  By: false,
  DartObject: false,
  element: false,
  protractor: false
};
var cF = {
  browser: false,
  chrome: false,
  opr: false
};
var pF = {
  cloneInto: false,
  createObjectIn: false,
  exportFunction: false,
  GM: false,
  GM_addElement: false,
  GM_addStyle: false,
  GM_addValueChangeListener: false,
  GM_deleteValue: false,
  GM_download: false,
  GM_getResourceText: false,
  GM_getResourceURL: false,
  GM_getTab: false,
  GM_getTabs: false,
  GM_getValue: false,
  GM_info: false,
  GM_listValues: false,
  GM_log: false,
  GM_notification: false,
  GM_openInTab: false,
  GM_registerMenuCommand: false,
  GM_removeValueChangeListener: false,
  GM_saveTab: false,
  GM_setClipboard: false,
  GM_setValue: false,
  GM_unregisterMenuCommand: false,
  GM_xmlhttpRequest: false,
  unsafeWindow: false
};
var fF = {
  $: false,
  $_: false,
  $$: false,
  $0: false,
  $1: false,
  $2: false,
  $3: false,
  $4: false,
  $x: false,
  chrome: false,
  clear: false,
  copy: false,
  debug: false,
  dir: false,
  dirxml: false,
  getEventListeners: false,
  inspect: false,
  keys: false,
  monitor: false,
  monitorEvents: false,
  profile: false,
  profileEnd: false,
  queryObjects: false,
  table: false,
  undebug: false,
  unmonitor: false,
  unmonitorEvents: false,
  values: false
};
var hF = {
  builtin: _T,
  es5: BT,
  es2015: OT,
  es2017: LT,
  es2020: RT,
  es2021: NT,
  browser: jT,
  worker: MT,
  node: $T,
  nodeBuiltin: VT,
  commonjs: UT,
  amd: qT,
  mocha: WT,
  jasmine: zT,
  jest: GT,
  qunit: HT,
  phantomjs: KT,
  couch: JT,
  rhino: XT,
  nashorn: QT,
  wsh: YT,
  jquery: ZT,
  yui: eF,
  shelljs: tF,
  prototypejs: rF,
  meteor: nF,
  mongo: sF,
  applescript: aF,
  serviceworker: iF,
  atomtest: oF,
  embertest: lF,
  protractor: uF,
  "shared-node-browser": {
    AbortController: false,
    AbortSignal: false,
    atob: false,
    btoa: false,
    clearInterval: false,
    clearTimeout: false,
    console: false,
    DOMException: false,
    Event: false,
    EventTarget: false,
    fetch: false,
    Intl: false,
    MessageChannel: false,
    MessageEvent: false,
    MessagePort: false,
    performance: false,
    queueMicrotask: false,
    setInterval: false,
    setTimeout: false,
    structuredClone: false,
    TextDecoder: false,
    TextEncoder: false,
    URL: false,
    URLSearchParams: false
  },
  webextensions: cF,
  greasemonkey: pF,
  devtools: fF
};
(function(t4) {
  t4.exports = hF;
})(gu);
var st = gu.exports;
function mF(t4, e) {
  const r = {};
  for (const [s, n] of Object.entries(t4))
    Object.hasOwnProperty.call(e, s) || (r[s] = n);
  return r;
}
var ms = mF(st.es2015, st.es5);
var to = {
  Atomics: false,
  SharedArrayBuffer: false
};
var Vd = {
  BigInt: false,
  BigInt64Array: false,
  BigUint64Array: false,
  globalThis: false
};
var dF = {
  AggregateError: false,
  FinalizationRegistry: false,
  WeakRef: false
};
var Kx = new Map(Object.entries({
  // Language
  builtin: {
    globals: st.es5
  },
  es6: {
    globals: ms,
    parserOptions: {
      ecmaVersion: 6
    }
  },
  es2015: {
    globals: ms,
    parserOptions: {
      ecmaVersion: 6
    }
  },
  es2017: {
    globals: { ...ms, ...to },
    parserOptions: {
      ecmaVersion: 8
    }
  },
  es2020: {
    globals: { ...ms, ...to, ...Vd },
    parserOptions: {
      ecmaVersion: 11
    }
  },
  es2021: {
    globals: { ...ms, ...to, ...Vd, ...dF },
    parserOptions: {
      ecmaVersion: 12
    }
  },
  // Platforms
  browser: {
    globals: st.browser
  },
  node: {
    globals: st.node,
    parserOptions: {
      ecmaFeatures: {
        globalReturn: true
      }
    }
  },
  "shared-node-browser": {
    globals: st["shared-node-browser"]
  },
  worker: {
    globals: st.worker
  },
  serviceworker: {
    globals: st.serviceworker
  },
  // Frameworks
  commonjs: {
    globals: st.commonjs,
    parserOptions: {
      ecmaFeatures: {
        globalReturn: true
      }
    }
  },
  amd: {
    globals: st.amd
  },
  mocha: {
    globals: st.mocha
  },
  jasmine: {
    globals: st.jasmine
  },
  jest: {
    globals: st.jest
  },
  phantomjs: {
    globals: st.phantomjs
  },
  jquery: {
    globals: st.jquery
  },
  qunit: {
    globals: st.qunit
  },
  prototypejs: {
    globals: st.prototypejs
  },
  shelljs: {
    globals: st.shelljs
  },
  meteor: {
    globals: st.meteor
  },
  mongo: {
    globals: st.mongo
  },
  protractor: {
    globals: st.protractor
  },
  applescript: {
    globals: st.applescript
  },
  nashorn: {
    globals: st.nashorn
  },
  atomtest: {
    globals: st.atomtest
  },
  embertest: {
    globals: st.embertest
  },
  webextensions: {
    globals: st.webextensions
  },
  greasemonkey: {
    globals: st.greasemonkey
  }
}));
var us = {};
var yu = { exports: {} };
var aa = { exports: {} };
var ro;
var Ud;
function gF() {
  if (Ud)
    return ro;
  Ud = 1;
  var t4 = 1e3, e = t4 * 60, r = e * 60, s = r * 24, n = s * 7, a = s * 365.25;
  ro = function(c, f) {
    f = f || {};
    var h = typeof c;
    if (h === "string" && c.length > 0)
      return o(c);
    if (h === "number" && isFinite(c))
      return f.long ? i(c) : l(c);
    throw new Error(
      "val is not a non-empty string or a valid number. val=" + JSON.stringify(c)
    );
  };
  function o(c) {
    if (c = String(c), !(c.length > 100)) {
      var f = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
        c
      );
      if (f) {
        var h = parseFloat(f[1]), p = (f[2] || "ms").toLowerCase();
        switch (p) {
          case "years":
          case "year":
          case "yrs":
          case "yr":
          case "y":
            return h * a;
          case "weeks":
          case "week":
          case "w":
            return h * n;
          case "days":
          case "day":
          case "d":
            return h * s;
          case "hours":
          case "hour":
          case "hrs":
          case "hr":
          case "h":
            return h * r;
          case "minutes":
          case "minute":
          case "mins":
          case "min":
          case "m":
            return h * e;
          case "seconds":
          case "second":
          case "secs":
          case "sec":
          case "s":
            return h * t4;
          case "milliseconds":
          case "millisecond":
          case "msecs":
          case "msec":
          case "ms":
            return h;
          default:
            return;
        }
      }
    }
  }
  function l(c) {
    var f = Math.abs(c);
    return f >= s ? Math.round(c / s) + "d" : f >= r ? Math.round(c / r) + "h" : f >= e ? Math.round(c / e) + "m" : f >= t4 ? Math.round(c / t4) + "s" : c + "ms";
  }
  function i(c) {
    var f = Math.abs(c);
    return f >= s ? u(c, f, s, "day") : f >= r ? u(c, f, r, "hour") : f >= e ? u(c, f, e, "minute") : f >= t4 ? u(c, f, t4, "second") : c + " ms";
  }
  function u(c, f, h, p) {
    var m = f >= h * 1.5;
    return Math.round(c / h) + " " + p + (m ? "s" : "");
  }
  return ro;
}
var no;
var qd;
function Jx() {
  if (qd)
    return no;
  qd = 1;
  function t4(e) {
    s.debug = s, s.default = s, s.coerce = u, s.disable = o, s.enable = a, s.enabled = l, s.humanize = gF(), s.destroy = c, Object.keys(e).forEach((f) => {
      s[f] = e[f];
    }), s.names = [], s.skips = [], s.formatters = {};
    function r(f) {
      let h = 0;
      for (let p = 0; p < f.length; p++)
        h = (h << 5) - h + f.charCodeAt(p), h |= 0;
      return s.colors[Math.abs(h) % s.colors.length];
    }
    s.selectColor = r;
    function s(f) {
      let h, p = null, m, d;
      function g(...y) {
        if (!g.enabled)
          return;
        const x = g, A = Number(/* @__PURE__ */ new Date()), b = A - (h || A);
        x.diff = b, x.prev = h, x.curr = A, h = A, y[0] = s.coerce(y[0]), typeof y[0] != "string" && y.unshift("%O");
        let v = 0;
        y[0] = y[0].replace(/%([a-zA-Z%])/g, (T, w) => {
          if (T === "%%")
            return "%";
          v++;
          const B = s.formatters[w];
          if (typeof B == "function") {
            const I = y[v];
            T = B.call(x, I), y.splice(v, 1), v--;
          }
          return T;
        }), s.formatArgs.call(x, y), (x.log || s.log).apply(x, y);
      }
      return g.namespace = f, g.useColors = s.useColors(), g.color = s.selectColor(f), g.extend = n, g.destroy = s.destroy, Object.defineProperty(g, "enabled", {
        enumerable: true,
        configurable: false,
        get: () => p !== null ? p : (m !== s.namespaces && (m = s.namespaces, d = s.enabled(f)), d),
        set: (y) => {
          p = y;
        }
      }), typeof s.init == "function" && s.init(g), g;
    }
    function n(f, h) {
      const p = s(this.namespace + (typeof h > "u" ? ":" : h) + f);
      return p.log = this.log, p;
    }
    function a(f) {
      s.save(f), s.namespaces = f, s.names = [], s.skips = [];
      let h;
      const p = (typeof f == "string" ? f : "").split(/[\s,]+/), m = p.length;
      for (h = 0; h < m; h++)
        p[h] && (f = p[h].replace(/\*/g, ".*?"), f[0] === "-" ? s.skips.push(new RegExp("^" + f.slice(1) + "$")) : s.names.push(new RegExp("^" + f + "$")));
    }
    function o() {
      const f = [
        ...s.names.map(i),
        ...s.skips.map(i).map((h) => "-" + h)
      ].join(",");
      return s.enable(""), f;
    }
    function l(f) {
      if (f[f.length - 1] === "*")
        return true;
      let h, p;
      for (h = 0, p = s.skips.length; h < p; h++)
        if (s.skips[h].test(f))
          return false;
      for (h = 0, p = s.names.length; h < p; h++)
        if (s.names[h].test(f))
          return true;
      return false;
    }
    function i(f) {
      return f.toString().substring(2, f.toString().length - 2).replace(/\.\*\?$/, "*");
    }
    function u(f) {
      return f instanceof Error ? f.stack || f.message : f;
    }
    function c() {
      console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
    }
    return s.enable(s.load()), s;
  }
  return no = t4, no;
}
var Wd;
function yF() {
  return Wd || (Wd = 1, function(t4, e) {
    e.formatArgs = s, e.save = n, e.load = a, e.useColors = r, e.storage = o(), e.destroy = /* @__PURE__ */ (() => {
      let i = false;
      return () => {
        i || (i = true, console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."));
      };
    })(), e.colors = [
      "#0000CC",
      "#0000FF",
      "#0033CC",
      "#0033FF",
      "#0066CC",
      "#0066FF",
      "#0099CC",
      "#0099FF",
      "#00CC00",
      "#00CC33",
      "#00CC66",
      "#00CC99",
      "#00CCCC",
      "#00CCFF",
      "#3300CC",
      "#3300FF",
      "#3333CC",
      "#3333FF",
      "#3366CC",
      "#3366FF",
      "#3399CC",
      "#3399FF",
      "#33CC00",
      "#33CC33",
      "#33CC66",
      "#33CC99",
      "#33CCCC",
      "#33CCFF",
      "#6600CC",
      "#6600FF",
      "#6633CC",
      "#6633FF",
      "#66CC00",
      "#66CC33",
      "#9900CC",
      "#9900FF",
      "#9933CC",
      "#9933FF",
      "#99CC00",
      "#99CC33",
      "#CC0000",
      "#CC0033",
      "#CC0066",
      "#CC0099",
      "#CC00CC",
      "#CC00FF",
      "#CC3300",
      "#CC3333",
      "#CC3366",
      "#CC3399",
      "#CC33CC",
      "#CC33FF",
      "#CC6600",
      "#CC6633",
      "#CC9900",
      "#CC9933",
      "#CCCC00",
      "#CCCC33",
      "#FF0000",
      "#FF0033",
      "#FF0066",
      "#FF0099",
      "#FF00CC",
      "#FF00FF",
      "#FF3300",
      "#FF3333",
      "#FF3366",
      "#FF3399",
      "#FF33CC",
      "#FF33FF",
      "#FF6600",
      "#FF6633",
      "#FF9900",
      "#FF9933",
      "#FFCC00",
      "#FFCC33"
    ];
    function r() {
      return typeof window < "u" && window.process && (window.process.type === "renderer" || window.process.__nwjs) ? true : typeof navigator < "u" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/) ? false : typeof document < "u" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
      typeof window < "u" && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
      // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
      typeof navigator < "u" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
      typeof navigator < "u" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
    }
    function s(i) {
      if (i[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + i[0] + (this.useColors ? "%c " : " ") + "+" + t4.exports.humanize(this.diff), !this.useColors)
        return;
      const u = "color: " + this.color;
      i.splice(1, 0, u, "color: inherit");
      let c = 0, f = 0;
      i[0].replace(/%[a-zA-Z%]/g, (h) => {
        h !== "%%" && (c++, h === "%c" && (f = c));
      }), i.splice(f, 0, u);
    }
    e.log = console.debug || console.log || (() => {
    });
    function n(i) {
      try {
        i ? e.storage.setItem("debug", i) : e.storage.removeItem("debug");
      } catch {
      }
    }
    function a() {
      let i;
      try {
        i = e.storage.getItem("debug");
      } catch {
      }
      return !i && typeof Ze < "u" && "env" in Ze && (i = Ze.env.DEBUG), i;
    }
    function o() {
      try {
        return localStorage;
      } catch {
      }
    }
    t4.exports = Jx()(e);
    const { formatters: l } = t4.exports;
    l.j = function(i) {
      try {
        return JSON.stringify(i);
      } catch (u) {
        return "[UnexpectedJSONParseError]: " + u.message;
      }
    };
  }(aa, aa.exports)), aa.exports;
}
var ia = { exports: {} };
function Xx() {
  return false;
}
function Qx() {
  throw new Error("tty.ReadStream is not implemented");
}
function Yx() {
  throw new Error("tty.ReadStream is not implemented");
}
var xF = {
  isatty: Xx,
  ReadStream: Qx,
  WriteStream: Yx
};
var vF = Object.freeze({
  __proto__: null,
  isatty: Xx,
  ReadStream: Qx,
  WriteStream: Yx,
  default: xF
});
var EF = Fn(vF);
var Zx = Fn(wC);
var oa;
function ev() {
  if (typeof oa > "u") {
    var t4 = new ArrayBuffer(2), e = new Uint8Array(t4), r = new Uint16Array(t4);
    if (e[0] = 1, e[1] = 2, r[0] === 258)
      oa = "BE";
    else if (r[0] === 513)
      oa = "LE";
    else
      throw new Error("unable to figure out endianess");
  }
  return oa;
}
function tv() {
  return typeof gr.location < "u" ? gr.location.hostname : "";
}
function rv() {
  return [];
}
function nv() {
  return 0;
}
function sv() {
  return Number.MAX_VALUE;
}
function av() {
  return Number.MAX_VALUE;
}
function iv() {
  return [];
}
function ov() {
  return "Browser";
}
function lv() {
  return typeof gr.navigator < "u" ? gr.navigator.appVersion : "";
}
function uv() {
  return {};
}
function cv() {
  return {};
}
function pv() {
  return "javascript";
}
function fv() {
  return "browser";
}
function xu() {
  return "/tmp";
}
var hv = xu;
var mv = `
`;
function dv() {
  return "$HOME";
}
var bF = {
  homedir: dv,
  EOL: mv,
  arch: pv,
  platform: fv,
  tmpdir: hv,
  tmpDir: xu,
  networkInterfaces: uv,
  getNetworkInterfaces: cv,
  release: lv,
  type: ov,
  cpus: iv,
  totalmem: av,
  freemem: sv,
  uptime: nv,
  loadavg: rv,
  hostname: tv,
  endianness: ev
};
var CF = Object.freeze({
  __proto__: null,
  endianness: ev,
  hostname: tv,
  loadavg: rv,
  uptime: nv,
  freemem: sv,
  totalmem: av,
  cpus: iv,
  type: ov,
  release: lv,
  networkInterfaces: uv,
  getNetworkInterfaces: cv,
  arch: pv,
  platform: fv,
  tmpDir: xu,
  tmpdir: hv,
  EOL: mv,
  homedir: dv,
  default: bF
});
var SF = Fn(CF);
var so;
var zd;
function AF() {
  return zd || (zd = 1, so = (t4, e) => {
    e = e || Ze.argv;
    const r = t4.startsWith("-") ? "" : t4.length === 1 ? "-" : "--", s = e.indexOf(r + t4), n = e.indexOf("--");
    return s !== -1 && (n === -1 ? true : s < n);
  }), so;
}
var ao;
var Gd;
function DF() {
  if (Gd)
    return ao;
  Gd = 1;
  const t4 = SF, e = AF(), r = Ze.env;
  let s;
  e("no-color") || e("no-colors") || e("color=false") ? s = false : (e("color") || e("colors") || e("color=true") || e("color=always")) && (s = true), "FORCE_COLOR" in r && (s = r.FORCE_COLOR.length === 0 || parseInt(r.FORCE_COLOR, 10) !== 0);
  function n(l) {
    return l === 0 ? false : {
      level: l,
      hasBasic: true,
      has256: l >= 2,
      has16m: l >= 3
    };
  }
  function a(l) {
    if (s === false)
      return 0;
    if (e("color=16m") || e("color=full") || e("color=truecolor"))
      return 3;
    if (e("color=256"))
      return 2;
    if (l && !l.isTTY && s !== true)
      return 0;
    const i = s ? 1 : 0;
    if (Ze.platform === "win32") {
      const u = t4.release().split(".");
      return Number(Ze.versions.node.split(".")[0]) >= 8 && Number(u[0]) >= 10 && Number(u[2]) >= 10586 ? Number(u[2]) >= 14931 ? 3 : 2 : 1;
    }
    if ("CI" in r)
      return ["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI"].some((u) => u in r) || r.CI_NAME === "codeship" ? 1 : i;
    if ("TEAMCITY_VERSION" in r)
      return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(r.TEAMCITY_VERSION) ? 1 : 0;
    if (r.COLORTERM === "truecolor")
      return 3;
    if ("TERM_PROGRAM" in r) {
      const u = parseInt((r.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
      switch (r.TERM_PROGRAM) {
        case "iTerm.app":
          return u >= 3 ? 3 : 2;
        case "Apple_Terminal":
          return 2;
      }
    }
    return /-256(color)?$/i.test(r.TERM) ? 2 : /^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(r.TERM) || "COLORTERM" in r ? 1 : (r.TERM === "dumb", i);
  }
  function o(l) {
    const i = a(l);
    return n(i);
  }
  return ao = {
    supportsColor: o,
    stdout: o(Ze.stdout),
    stderr: o(Ze.stderr)
  }, ao;
}
var Hd;
function wF() {
  return Hd || (Hd = 1, function(t4, e) {
    const r = EF, s = Zx;
    e.init = c, e.log = l, e.formatArgs = a, e.save = i, e.load = u, e.useColors = n, e.destroy = s.deprecate(
      () => {
      },
      "Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."
    ), e.colors = [6, 2, 3, 4, 5, 1];
    try {
      const h = DF();
      h && (h.stderr || h).level >= 2 && (e.colors = [
        20,
        21,
        26,
        27,
        32,
        33,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        56,
        57,
        62,
        63,
        68,
        69,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        92,
        93,
        98,
        99,
        112,
        113,
        128,
        129,
        134,
        135,
        148,
        149,
        160,
        161,
        162,
        163,
        164,
        165,
        166,
        167,
        168,
        169,
        170,
        171,
        172,
        173,
        178,
        179,
        184,
        185,
        196,
        197,
        198,
        199,
        200,
        201,
        202,
        203,
        204,
        205,
        206,
        207,
        208,
        209,
        214,
        215,
        220,
        221
      ]);
    } catch {
    }
    e.inspectOpts = Object.keys(Ze.env).filter((h) => /^debug_/i.test(h)).reduce((h, p) => {
      const m = p.substring(6).toLowerCase().replace(/_([a-z])/g, (g, y) => y.toUpperCase());
      let d = Ze.env[p];
      return /^(yes|on|true|enabled)$/i.test(d) ? d = true : /^(no|off|false|disabled)$/i.test(d) ? d = false : d === "null" ? d = null : d = Number(d), h[m] = d, h;
    }, {});
    function n() {
      return "colors" in e.inspectOpts ? !!e.inspectOpts.colors : r.isatty(Ze.stderr.fd);
    }
    function a(h) {
      const { namespace: p, useColors: m } = this;
      if (m) {
        const d = this.color, g = "\x1B[3" + (d < 8 ? d : "8;5;" + d), y = `  ${g};1m${p} \x1B[0m`;
        h[0] = y + h[0].split(`
`).join(`
` + y), h.push(g + "m+" + t4.exports.humanize(this.diff) + "\x1B[0m");
      } else
        h[0] = o() + p + " " + h[0];
    }
    function o() {
      return e.inspectOpts.hideDate ? "" : (/* @__PURE__ */ new Date()).toISOString() + " ";
    }
    function l(...h) {
      return Ze.stderr.write(s.format(...h) + `
`);
    }
    function i(h) {
      h ? Ze.env.DEBUG = h : delete Ze.env.DEBUG;
    }
    function u() {
      return Ze.env.DEBUG;
    }
    function c(h) {
      h.inspectOpts = {};
      const p = Object.keys(e.inspectOpts);
      for (let m = 0; m < p.length; m++)
        h.inspectOpts[p[m]] = e.inspectOpts[p[m]];
    }
    t4.exports = Jx()(e);
    const { formatters: f } = t4.exports;
    f.o = function(h) {
      return this.inspectOpts.colors = this.useColors, s.inspect(h, this.inspectOpts).split(`
`).map((p) => p.trim()).join(" ");
    }, f.O = function(h) {
      return this.inspectOpts.colors = this.useColors, s.inspect(h, this.inspectOpts);
    };
  }(ia, ia.exports)), ia.exports;
}
(function(t4) {
  typeof Ze > "u" || Ze.type === "renderer" || Ze.browser === true || Ze.__nwjs ? t4.exports = yF() : t4.exports = wF();
})(yu);
var kF = gx;
var TF = yu.exports;
function gv(t4) {
  return t4 && typeof t4 == "object" && "default" in t4 ? t4 : {
    default: t4
  };
}
var ka = gv(kF);
var FF = gv(TF);
var PF = /^(?:(?:Do)?While|For(?:In|Of)?|Switch)Statement$/u;
var yv = /\r\n|[\r\n\u2028\u2029]/u;
var IF = /^#!([^\r\n]+)/u;
function _F() {
  return new RegExp(yv.source, "gu");
}
var BF = {
  breakableTypePattern: PF,
  lineBreakPattern: yv,
  createGlobalLinebreakMatcher: _F,
  shebangPattern: IF
};
var OF = FF.default("eslint:traverser");
function Kd() {
}
function LF(t4) {
  return t4 !== null && typeof t4 == "object" && typeof t4.type == "string";
}
function RF(t4, e) {
  let r = t4[e.type];
  return r || (r = ka.default.getKeys(e), OF('Unknown node type "%s": Estimated visitor keys %j', e.type, r)), r;
}
var vu = class _vu {
  constructor() {
    this._current = null, this._parents = [], this._skipped = false, this._broken = false, this._visitorKeys = null, this._enter = null, this._leave = null;
  }
  current() {
    return this._current;
  }
  parents() {
    return this._parents.slice(0);
  }
  break() {
    this._broken = true;
  }
  skip() {
    this._skipped = true;
  }
  traverse(e, r) {
    this._current = null, this._parents = [], this._skipped = false, this._broken = false, this._visitorKeys = r.visitorKeys || ka.default.KEYS, this._enter = r.enter || Kd, this._leave = r.leave || Kd, this._traverse(e, null);
  }
  _traverse(e, r) {
    if (LF(e)) {
      if (this._current = e, this._skipped = false, this._enter(e, r), !this._skipped && !this._broken) {
        const s = RF(this._visitorKeys, e);
        if (s.length >= 1) {
          this._parents.push(e);
          for (let n = 0; n < s.length && !this._broken; ++n) {
            const a = e[s[n]];
            if (Array.isArray(a))
              for (let o = 0; o < a.length && !this._broken; ++o)
                this._traverse(a[o], e);
            else
              this._traverse(a, e);
          }
          this._parents.pop();
        }
      }
      this._broken || this._leave(e, r), this._current = r;
    }
  }
  static getKeys(e) {
    return ka.default.getKeys(e);
  }
  static traverse(e, r) {
    new _vu().traverse(e, r);
  }
  static get DEFAULT_VISITOR_KEYS() {
    return ka.default.KEYS;
  }
};
var NF = vu;
function jF(t4, e) {
  return e = {
    exports: {}
  }, t4(e, e.exports), e.exports;
}
function MF(t4) {
  return t4 && t4.default || t4;
}
us.astUtils = BF;
us.createCommonjsModule = jF;
us.getCjsExportFromNamespace = MF;
us.traverser = NF;
var Eu = { exports: {} };
(function(t4) {
  const e = ["off", "warn", "error"], r = e.reduce((n, a, o) => (n[a] = o, n), {}), s = [0, 1, 2, "off", "warn", "error"];
  t4.exports = {
    /**
     * Normalizes the severity value of a rule's configuration to a number
     * @param {(number|string|[number, ...*]|[string, ...*])} ruleConfig A rule's configuration value, generally
     * received from the user. A valid config value is either 0, 1, 2, the string "off" (treated the same as 0),
     * the string "warn" (treated the same as 1), the string "error" (treated the same as 2), or an array
     * whose first element is one of the above values. Strings are matched case-insensitively.
     * @returns {(0|1|2)} The numeric severity value if the config value was valid, otherwise 0.
     */
    getRuleSeverity(n) {
      const a = Array.isArray(n) ? n[0] : n;
      return a === 0 || a === 1 || a === 2 ? a : typeof a == "string" && r[a.toLowerCase()] || 0;
    },
    /**
     * Converts old-style severity settings (0, 1, 2) into new-style
     * severity settings (off, warn, error) for all rules. Assumption is that severity
     * values have already been validated as correct.
     * @param {Object} config The config object to normalize.
     * @returns {void}
     */
    normalizeToStrings(n) {
      n.rules && Object.keys(n.rules).forEach((a) => {
        const o = n.rules[a];
        typeof o == "number" ? n.rules[a] = e[o] || e[0] : Array.isArray(o) && typeof o[0] == "number" && (o[0] = e[o[0]] || e[0]);
      });
    },
    /**
     * Determines if the severity for the given rule configuration represents an error.
     * @param {int|string|Array} ruleConfig The configuration for an individual rule.
     * @returns {boolean} True if the rule represents an error, false if not.
     */
    isErrorSeverity(n) {
      return t4.exports.getRuleSeverity(n) === 2;
    },
    /**
     * Checks whether a given config has valid severity or not.
     * @param {number|string|Array} ruleConfig The configuration for an individual rule.
     * @returns {boolean} `true` if the configuration has valid severity.
     */
    isValidSeverity(n) {
      let a = Array.isArray(n) ? n[0] : n;
      return typeof a == "string" && (a = a.toLowerCase()), s.indexOf(a) !== -1;
    },
    /**
     * Checks whether every rule of a given config has valid severity or not.
     * @param {Object} config The configuration for rules.
     * @returns {boolean} `true` if the configuration has valid severity.
     */
    isEverySeverityValid(n) {
      return Object.keys(n).every((a) => this.isValidSeverity(n[a]));
    },
    /**
     * Normalizes a value for a global in a config
     * @param {(boolean|string|null)} configuredValue The value given for a global in configuration or in
     * a global directive comment
     * @returns {("readable"|"writeable"|"off")} The value normalized as a string
     * @throws Error if global value is invalid
     */
    normalizeConfigGlobal(n) {
      switch (n) {
        case "off":
          return "off";
        case true:
        case "true":
        case "writeable":
        case "writable":
          return "writable";
        case null:
        case false:
        case "false":
        case "readable":
        case "readonly":
          return "readonly";
        default:
          throw new Error(`'${n}' is not a valid configuration for a global (use 'readonly', 'writable', or 'off')`);
      }
    }
  };
})(Eu);
var Jd = {
  $schema: { type: "string" },
  env: { type: "object" },
  extends: { $ref: "#/definitions/stringOrStrings" },
  globals: { type: "object" },
  overrides: {
    type: "array",
    items: { $ref: "#/definitions/overrideConfig" },
    additionalItems: false
  },
  parser: { type: ["string", "null"] },
  parserOptions: { type: "object" },
  plugins: { type: "array" },
  processor: { type: "string" },
  rules: { type: "object" },
  settings: { type: "object" },
  noInlineConfig: { type: "boolean" },
  reportUnusedDisableDirectives: { type: "boolean" },
  ecmaFeatures: { type: "object" }
  // deprecated; logs a warning when used
};
var $F = {
  definitions: {
    stringOrStrings: {
      oneOf: [
        { type: "string" },
        {
          type: "array",
          items: { type: "string" },
          additionalItems: false
        }
      ]
    },
    stringOrStringsRequired: {
      oneOf: [
        { type: "string" },
        {
          type: "array",
          items: { type: "string" },
          additionalItems: false,
          minItems: 1
        }
      ]
    },
    // Config at top-level.
    objectConfig: {
      type: "object",
      properties: {
        root: { type: "boolean" },
        ignorePatterns: { $ref: "#/definitions/stringOrStrings" },
        ...Jd
      },
      additionalProperties: false
    },
    // Config in `overrides`.
    overrideConfig: {
      type: "object",
      properties: {
        excludedFiles: { $ref: "#/definitions/stringOrStrings" },
        files: { $ref: "#/definitions/stringOrStringsRequired" },
        ...Jd
      },
      required: ["files"],
      additionalProperties: false
    }
  },
  $ref: "#/definitions/objectConfig"
};
var VF = $F;
var UF = B0;
var qF = {
  ESLINT_LEGACY_ECMAFEATURES: "The 'ecmaFeatures' config file property is deprecated and has no effect.",
  ESLINT_PERSONAL_CONFIG_LOAD: "'~/.eslintrc.*' config files have been deprecated. Please use a config file per project or the '--config' option.",
  ESLINT_PERSONAL_CONFIG_SUPPRESS: "'~/.eslintrc.*' config files have been deprecated. Please remove it or add 'root:true' to the config files in your projects in order to avoid loading '~/.eslintrc.*' accidentally."
};
var Xd = /* @__PURE__ */ new Set();
function WF(t4, e) {
  const r = JSON.stringify({ source: t4, errorCode: e });
  if (Xd.has(r))
    return;
  Xd.add(r);
  const s = UF.relative(Ze.cwd(), t4), n = qF[e];
  Ze.emitWarning(
    `${n} (found in "${s}")`,
    "DeprecationWarning",
    e
  );
}
var zF = {
  emitDeprecationWarning: WF
};
var hl = { exports: {} };
(function(t4, e) {
  (function(r, s) {
    s(e);
  })(mr, function(r) {
    function s() {
      for (var M = arguments.length, L = Array(M), V = 0; V < M; V++)
        L[V] = arguments[V];
      if (L.length > 1) {
        L[0] = L[0].slice(0, -1);
        for (var K = L.length - 1, X = 1; X < K; ++X)
          L[X] = L[X].slice(1, -1);
        return L[K] = L[K].slice(1), L.join("");
      } else
        return L[0];
    }
    function n(M) {
      return "(?:" + M + ")";
    }
    function a(M) {
      return M === void 0 ? "undefined" : M === null ? "null" : Object.prototype.toString.call(M).split(" ").pop().split("]").shift().toLowerCase();
    }
    function o(M) {
      return M.toUpperCase();
    }
    function l(M) {
      return M != null ? M instanceof Array ? M : typeof M.length != "number" || M.split || M.setInterval || M.call ? [M] : Array.prototype.slice.call(M) : [];
    }
    function i(M, L) {
      var V = M;
      if (L)
        for (var K in L)
          V[K] = L[K];
      return V;
    }
    function u(M) {
      var L = "[A-Za-z]", V = "[0-9]", K = s(V, "[A-Fa-f]"), X = n(n("%[EFef]" + K + "%" + K + K + "%" + K + K) + "|" + n("%[89A-Fa-f]" + K + "%" + K + K) + "|" + n("%" + K + K)), de = "[\\:\\/\\?\\#\\[\\]\\@]", we = "[\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=]", Me = s(de, we), Ne = M ? "[\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]" : "[]", tt = M ? "[\\uE000-\\uF8FF]" : "[]", je = s(L, V, "[\\-\\.\\_\\~]", Ne);
      n(L + s(L, V, "[\\+\\-\\.]") + "*"), n(n(X + "|" + s(je, we, "[\\:]")) + "*");
      var fe = n(n("25[0-5]") + "|" + n("2[0-4]" + V) + "|" + n("1" + V + V) + "|" + n("0?[1-9]" + V) + "|0?0?" + V), De = n(fe + "\\." + fe + "\\." + fe + "\\." + fe), ve = n(K + "{1,4}"), ue = n(n(ve + "\\:" + ve) + "|" + De), Pe = n(n(ve + "\\:") + "{6}" + ue), Oe = n("\\:\\:" + n(ve + "\\:") + "{5}" + ue), at = n(n(ve) + "?\\:\\:" + n(ve + "\\:") + "{4}" + ue), ut = n(n(n(ve + "\\:") + "{0,1}" + ve) + "?\\:\\:" + n(ve + "\\:") + "{3}" + ue), dt = n(n(n(ve + "\\:") + "{0,2}" + ve) + "?\\:\\:" + n(ve + "\\:") + "{2}" + ue), Dt = n(n(n(ve + "\\:") + "{0,3}" + ve) + "?\\:\\:" + ve + "\\:" + ue), zt = n(n(n(ve + "\\:") + "{0,4}" + ve) + "?\\:\\:" + ue), kt = n(n(n(ve + "\\:") + "{0,5}" + ve) + "?\\:\\:" + ve), nr = n(n(n(ve + "\\:") + "{0,6}" + ve) + "?\\:\\:"), Ir = n([Pe, Oe, at, ut, dt, Dt, zt, kt, nr].join("|")), sr = n(n(je + "|" + X) + "+");
      n("[vV]" + K + "+\\." + s(je, we, "[\\:]") + "+"), n(n(X + "|" + s(je, we)) + "*");
      var fn = n(X + "|" + s(je, we, "[\\:\\@]"));
      return n(n(X + "|" + s(je, we, "[\\@]")) + "+"), n(n(fn + "|" + s("[\\/\\?]", tt)) + "*"), {
        NOT_SCHEME: new RegExp(s("[^]", L, V, "[\\+\\-\\.]"), "g"),
        NOT_USERINFO: new RegExp(s("[^\\%\\:]", je, we), "g"),
        NOT_HOST: new RegExp(s("[^\\%\\[\\]\\:]", je, we), "g"),
        NOT_PATH: new RegExp(s("[^\\%\\/\\:\\@]", je, we), "g"),
        NOT_PATH_NOSCHEME: new RegExp(s("[^\\%\\/\\@]", je, we), "g"),
        NOT_QUERY: new RegExp(s("[^\\%]", je, we, "[\\:\\@\\/\\?]", tt), "g"),
        NOT_FRAGMENT: new RegExp(s("[^\\%]", je, we, "[\\:\\@\\/\\?]"), "g"),
        ESCAPE: new RegExp(s("[^]", je, we), "g"),
        UNRESERVED: new RegExp(je, "g"),
        OTHER_CHARS: new RegExp(s("[^\\%]", je, Me), "g"),
        PCT_ENCODED: new RegExp(X, "g"),
        IPV4ADDRESS: new RegExp("^(" + De + ")$"),
        IPV6ADDRESS: new RegExp("^\\[?(" + Ir + ")" + n(n("\\%25|\\%(?!" + K + "{2})") + "(" + sr + ")") + "?\\]?$")
        //RFC 6874, with relaxed parsing rules
      };
    }
    var c = u(false), f = u(true), h = /* @__PURE__ */ function() {
      function M(L, V) {
        var K = [], X = true, de = false, we = void 0;
        try {
          for (var Me = L[Symbol.iterator](), Ne; !(X = (Ne = Me.next()).done) && (K.push(Ne.value), !(V && K.length === V)); X = true)
            ;
        } catch (tt) {
          de = true, we = tt;
        } finally {
          try {
            !X && Me.return && Me.return();
          } finally {
            if (de)
              throw we;
          }
        }
        return K;
      }
      return function(L, V) {
        if (Array.isArray(L))
          return L;
        if (Symbol.iterator in Object(L))
          return M(L, V);
        throw new TypeError("Invalid attempt to destructure non-iterable instance");
      };
    }(), p = function(M) {
      if (Array.isArray(M)) {
        for (var L = 0, V = Array(M.length); L < M.length; L++)
          V[L] = M[L];
        return V;
      } else
        return Array.from(M);
    }, m = 2147483647, d = 36, g = 1, y = 26, x = 38, A = 700, b = 72, v = 128, C = "-", T = /^xn--/, w = /[^\0-\x7E]/, B = /[\x2E\u3002\uFF0E\uFF61]/g, I = {
      overflow: "Overflow: input needs wider integers to process",
      "not-basic": "Illegal input >= 0x80 (not a basic code point)",
      "invalid-input": "Invalid input"
    }, _ = d - g, S = Math.floor, F = String.fromCharCode;
    function N(M) {
      throw new RangeError(I[M]);
    }
    function k(M, L) {
      for (var V = [], K = M.length; K--; )
        V[K] = L(M[K]);
      return V;
    }
    function j(M, L) {
      var V = M.split("@"), K = "";
      V.length > 1 && (K = V[0] + "@", M = V[1]), M = M.replace(B, ".");
      var X = M.split("."), de = k(X, L).join(".");
      return K + de;
    }
    function O(M) {
      for (var L = [], V = 0, K = M.length; V < K; ) {
        var X = M.charCodeAt(V++);
        if (X >= 55296 && X <= 56319 && V < K) {
          var de = M.charCodeAt(V++);
          (de & 64512) == 56320 ? L.push(((X & 1023) << 10) + (de & 1023) + 65536) : (L.push(X), V--);
        } else
          L.push(X);
      }
      return L;
    }
    var z = function(L) {
      return String.fromCodePoint.apply(String, p(L));
    }, te = function(L) {
      return L - 48 < 10 ? L - 22 : L - 65 < 26 ? L - 65 : L - 97 < 26 ? L - 97 : d;
    }, se = function(L, V) {
      return L + 22 + 75 * (L < 26) - ((V != 0) << 5);
    }, ye = function(L, V, K) {
      var X = 0;
      for (
        L = K ? S(L / A) : L >> 1, L += S(L / V);
        /* no initialization */
        L > _ * y >> 1;
        X += d
      )
        L = S(L / _);
      return S(X + (_ + 1) * L / (L + x));
    }, Se = function(L) {
      var V = [], K = L.length, X = 0, de = v, we = b, Me = L.lastIndexOf(C);
      Me < 0 && (Me = 0);
      for (var Ne = 0; Ne < Me; ++Ne)
        L.charCodeAt(Ne) >= 128 && N("not-basic"), V.push(L.charCodeAt(Ne));
      for (var tt = Me > 0 ? Me + 1 : 0; tt < K; ) {
        for (
          var je = X, fe = 1, De = d;
          ;
          /* no condition */
          De += d
        ) {
          tt >= K && N("invalid-input");
          var ve = te(L.charCodeAt(tt++));
          (ve >= d || ve > S((m - X) / fe)) && N("overflow"), X += ve * fe;
          var ue = De <= we ? g : De >= we + y ? y : De - we;
          if (ve < ue)
            break;
          var Pe = d - ue;
          fe > S(m / Pe) && N("overflow"), fe *= Pe;
        }
        var Oe = V.length + 1;
        we = ye(X - je, Oe, je == 0), S(X / Oe) > m - de && N("overflow"), de += S(X / Oe), X %= Oe, V.splice(X++, 0, de);
      }
      return String.fromCodePoint.apply(String, V);
    }, xe = function(L) {
      var V = [];
      L = O(L);
      var K = L.length, X = v, de = 0, we = b, Me = true, Ne = false, tt = void 0;
      try {
        for (var je = L[Symbol.iterator](), fe; !(Me = (fe = je.next()).done); Me = true) {
          var De = fe.value;
          De < 128 && V.push(F(De));
        }
      } catch (hn) {
        Ne = true, tt = hn;
      } finally {
        try {
          !Me && je.return && je.return();
        } finally {
          if (Ne)
            throw tt;
        }
      }
      var ve = V.length, ue = ve;
      for (ve && V.push(C); ue < K; ) {
        var Pe = m, Oe = true, at = false, ut = void 0;
        try {
          for (var dt = L[Symbol.iterator](), Dt; !(Oe = (Dt = dt.next()).done); Oe = true) {
            var zt = Dt.value;
            zt >= X && zt < Pe && (Pe = zt);
          }
        } catch (hn) {
          at = true, ut = hn;
        } finally {
          try {
            !Oe && dt.return && dt.return();
          } finally {
            if (at)
              throw ut;
          }
        }
        var kt = ue + 1;
        Pe - X > S((m - de) / kt) && N("overflow"), de += (Pe - X) * kt, X = Pe;
        var nr = true, Ir = false, sr = void 0;
        try {
          for (var fn = L[Symbol.iterator](), Ys; !(nr = (Ys = fn.next()).done); nr = true) {
            var Zs = Ys.value;
            if (Zs < X && ++de > m && N("overflow"), Zs == X) {
              for (
                var Bn = de, On = d;
                ;
                /* no condition */
                On += d
              ) {
                var Ln = On <= we ? g : On >= we + y ? y : On - we;
                if (Bn < Ln)
                  break;
                var ea = Bn - Ln, ta = d - Ln;
                V.push(F(se(Ln + ea % ta, 0))), Bn = S(ea / ta);
              }
              V.push(F(se(Bn, 0))), we = ye(de, kt, ue == ve), de = 0, ++ue;
            }
          }
        } catch (hn) {
          Ir = true, sr = hn;
        } finally {
          try {
            !nr && fn.return && fn.return();
          } finally {
            if (Ir)
              throw sr;
          }
        }
        ++de, ++X;
      }
      return V.join("");
    }, Ae = function(L) {
      return j(L, function(V) {
        return T.test(V) ? Se(V.slice(4).toLowerCase()) : V;
      });
    }, _e = function(L) {
      return j(L, function(V) {
        return w.test(V) ? "xn--" + xe(V) : V;
      });
    }, H = {
      /**
       * A string representing the current Punycode.js version number.
       * @memberOf punycode
       * @type String
       */
      version: "2.1.0",
      /**
       * An object of methods to convert from JavaScript's internal character
       * representation (UCS-2) to Unicode code points, and back.
       * @see <https://mathiasbynens.be/notes/javascript-encoding>
       * @memberOf punycode
       * @type Object
       */
      ucs2: {
        decode: O,
        encode: z
      },
      decode: Se,
      encode: xe,
      toASCII: _e,
      toUnicode: Ae
    }, Q = {};
    function ge(M) {
      var L = M.charCodeAt(0), V = void 0;
      return L < 16 ? V = "%0" + L.toString(16).toUpperCase() : L < 128 ? V = "%" + L.toString(16).toUpperCase() : L < 2048 ? V = "%" + (L >> 6 | 192).toString(16).toUpperCase() + "%" + (L & 63 | 128).toString(16).toUpperCase() : V = "%" + (L >> 12 | 224).toString(16).toUpperCase() + "%" + (L >> 6 & 63 | 128).toString(16).toUpperCase() + "%" + (L & 63 | 128).toString(16).toUpperCase(), V;
    }
    function ae(M) {
      for (var L = "", V = 0, K = M.length; V < K; ) {
        var X = parseInt(M.substr(V + 1, 2), 16);
        if (X < 128)
          L += String.fromCharCode(X), V += 3;
        else if (X >= 194 && X < 224) {
          if (K - V >= 6) {
            var de = parseInt(M.substr(V + 4, 2), 16);
            L += String.fromCharCode((X & 31) << 6 | de & 63);
          } else
            L += M.substr(V, 6);
          V += 6;
        } else if (X >= 224) {
          if (K - V >= 9) {
            var we = parseInt(M.substr(V + 4, 2), 16), Me = parseInt(M.substr(V + 7, 2), 16);
            L += String.fromCharCode((X & 15) << 12 | (we & 63) << 6 | Me & 63);
          } else
            L += M.substr(V, 9);
          V += 9;
        } else
          L += M.substr(V, 3), V += 3;
      }
      return L;
    }
    function ee(M, L) {
      function V(K) {
        var X = ae(K);
        return X.match(L.UNRESERVED) ? X : K;
      }
      return M.scheme && (M.scheme = String(M.scheme).replace(L.PCT_ENCODED, V).toLowerCase().replace(L.NOT_SCHEME, "")), M.userinfo !== void 0 && (M.userinfo = String(M.userinfo).replace(L.PCT_ENCODED, V).replace(L.NOT_USERINFO, ge).replace(L.PCT_ENCODED, o)), M.host !== void 0 && (M.host = String(M.host).replace(L.PCT_ENCODED, V).toLowerCase().replace(L.NOT_HOST, ge).replace(L.PCT_ENCODED, o)), M.path !== void 0 && (M.path = String(M.path).replace(L.PCT_ENCODED, V).replace(M.scheme ? L.NOT_PATH : L.NOT_PATH_NOSCHEME, ge).replace(L.PCT_ENCODED, o)), M.query !== void 0 && (M.query = String(M.query).replace(L.PCT_ENCODED, V).replace(L.NOT_QUERY, ge).replace(L.PCT_ENCODED, o)), M.fragment !== void 0 && (M.fragment = String(M.fragment).replace(L.PCT_ENCODED, V).replace(L.NOT_FRAGMENT, ge).replace(L.PCT_ENCODED, o)), M;
    }
    function he(M) {
      return M.replace(/^0*(.*)/, "$1") || "0";
    }
    function R(M, L) {
      var V = M.match(L.IPV4ADDRESS) || [], K = h(V, 2), X = K[1];
      return X ? X.split(".").map(he).join(".") : M;
    }
    function D(M, L) {
      var V = M.match(L.IPV6ADDRESS) || [], K = h(V, 3), X = K[1], de = K[2];
      if (X) {
        for (var we = X.toLowerCase().split("::").reverse(), Me = h(we, 2), Ne = Me[0], tt = Me[1], je = tt ? tt.split(":").map(he) : [], fe = Ne.split(":").map(he), De = L.IPV4ADDRESS.test(fe[fe.length - 1]), ve = De ? 7 : 8, ue = fe.length - ve, Pe = Array(ve), Oe = 0; Oe < ve; ++Oe)
          Pe[Oe] = je[Oe] || fe[ue + Oe] || "";
        De && (Pe[ve - 1] = R(Pe[ve - 1], L));
        var at = Pe.reduce(function(kt, nr, Ir) {
          if (!nr || nr === "0") {
            var sr = kt[kt.length - 1];
            sr && sr.index + sr.length === Ir ? sr.length++ : kt.push({ index: Ir, length: 1 });
          }
          return kt;
        }, []), ut = at.sort(function(kt, nr) {
          return nr.length - kt.length;
        })[0], dt = void 0;
        if (ut && ut.length > 1) {
          var Dt = Pe.slice(0, ut.index), zt = Pe.slice(ut.index + ut.length);
          dt = Dt.join(":") + "::" + zt.join(":");
        } else
          dt = Pe.join(":");
        return de && (dt += "%" + de), dt;
      } else
        return M;
    }
    var U = /^(?:([^:\/?#]+):)?(?:\/\/((?:([^\/?#@]*)@)?(\[[^\/?#\]]+\]|[^\/?#:]*)(?:\:(\d*))?))?([^?#]*)(?:\?([^#]*))?(?:#((?:.|\n|\r)*))?/i, ne = "".match(/(){0}/)[1] === void 0;
    function pe(M) {
      var L = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, V = {}, K = L.iri !== false ? f : c;
      L.reference === "suffix" && (M = (L.scheme ? L.scheme + ":" : "") + "//" + M);
      var X = M.match(U);
      if (X) {
        ne ? (V.scheme = X[1], V.userinfo = X[3], V.host = X[4], V.port = parseInt(X[5], 10), V.path = X[6] || "", V.query = X[7], V.fragment = X[8], isNaN(V.port) && (V.port = X[5])) : (V.scheme = X[1] || void 0, V.userinfo = M.indexOf("@") !== -1 ? X[3] : void 0, V.host = M.indexOf("//") !== -1 ? X[4] : void 0, V.port = parseInt(X[5], 10), V.path = X[6] || "", V.query = M.indexOf("?") !== -1 ? X[7] : void 0, V.fragment = M.indexOf("#") !== -1 ? X[8] : void 0, isNaN(V.port) && (V.port = M.match(/\/\/(?:.|\n)*\:(?:\/|\?|\#|$)/) ? X[4] : void 0)), V.host && (V.host = D(R(V.host, K), K)), V.scheme === void 0 && V.userinfo === void 0 && V.host === void 0 && V.port === void 0 && !V.path && V.query === void 0 ? V.reference = "same-document" : V.scheme === void 0 ? V.reference = "relative" : V.fragment === void 0 ? V.reference = "absolute" : V.reference = "uri", L.reference && L.reference !== "suffix" && L.reference !== V.reference && (V.error = V.error || "URI is not a " + L.reference + " reference.");
        var de = Q[(L.scheme || V.scheme || "").toLowerCase()];
        if (!L.unicodeSupport && (!de || !de.unicodeSupport)) {
          if (V.host && (L.domainHost || de && de.domainHost))
            try {
              V.host = H.toASCII(V.host.replace(K.PCT_ENCODED, ae).toLowerCase());
            } catch (we) {
              V.error = V.error || "Host's domain name can not be converted to ASCII via punycode: " + we;
            }
          ee(V, c);
        } else
          ee(V, K);
        de && de.parse && de.parse(V, L);
      } else
        V.error = V.error || "URI can not be parsed.";
      return V;
    }
    function Ee(M, L) {
      var V = L.iri !== false ? f : c, K = [];
      return M.userinfo !== void 0 && (K.push(M.userinfo), K.push("@")), M.host !== void 0 && K.push(D(R(String(M.host), V), V).replace(V.IPV6ADDRESS, function(X, de, we) {
        return "[" + de + (we ? "%25" + we : "") + "]";
      })), (typeof M.port == "number" || typeof M.port == "string") && (K.push(":"), K.push(String(M.port))), K.length ? K.join("") : void 0;
    }
    var Re = /^\.\.?\//, We = /^\/\.(\/|$)/, wt = /^\/\.\.(\/|$)/, Lt = /^\/?(?:.|\n)*?(?=\/|$)/;
    function et(M) {
      for (var L = []; M.length; )
        if (M.match(Re))
          M = M.replace(Re, "");
        else if (M.match(We))
          M = M.replace(We, "/");
        else if (M.match(wt))
          M = M.replace(wt, "/"), L.pop();
        else if (M === "." || M === "..")
          M = "";
        else {
          var V = M.match(Lt);
          if (V) {
            var K = V[0];
            M = M.slice(K.length), L.push(K);
          } else
            throw new Error("Unexpected dot segment condition");
        }
      return L.join("");
    }
    function Ge(M) {
      var L = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, V = L.iri ? f : c, K = [], X = Q[(L.scheme || M.scheme || "").toLowerCase()];
      if (X && X.serialize && X.serialize(M, L), M.host && !V.IPV6ADDRESS.test(M.host)) {
        if (L.domainHost || X && X.domainHost)
          try {
            M.host = L.iri ? H.toUnicode(M.host) : H.toASCII(M.host.replace(V.PCT_ENCODED, ae).toLowerCase());
          } catch (Me) {
            M.error = M.error || "Host's domain name can not be converted to " + (L.iri ? "Unicode" : "ASCII") + " via punycode: " + Me;
          }
      }
      ee(M, V), L.reference !== "suffix" && M.scheme && (K.push(M.scheme), K.push(":"));
      var de = Ee(M, L);
      if (de !== void 0 && (L.reference !== "suffix" && K.push("//"), K.push(de), M.path && M.path.charAt(0) !== "/" && K.push("/")), M.path !== void 0) {
        var we = M.path;
        !L.absolutePath && (!X || !X.absolutePath) && (we = et(we)), de === void 0 && (we = we.replace(/^\/\//, "/%2F")), K.push(we);
      }
      return M.query !== void 0 && (K.push("?"), K.push(M.query)), M.fragment !== void 0 && (K.push("#"), K.push(M.fragment)), K.join("");
    }
    function mt(M, L) {
      var V = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, K = arguments[3], X = {};
      return K || (M = pe(Ge(M, V), V), L = pe(Ge(L, V), V)), V = V || {}, !V.tolerant && L.scheme ? (X.scheme = L.scheme, X.userinfo = L.userinfo, X.host = L.host, X.port = L.port, X.path = et(L.path || ""), X.query = L.query) : (L.userinfo !== void 0 || L.host !== void 0 || L.port !== void 0 ? (X.userinfo = L.userinfo, X.host = L.host, X.port = L.port, X.path = et(L.path || ""), X.query = L.query) : (L.path ? (L.path.charAt(0) === "/" ? X.path = et(L.path) : ((M.userinfo !== void 0 || M.host !== void 0 || M.port !== void 0) && !M.path ? X.path = "/" + L.path : M.path ? X.path = M.path.slice(0, M.path.lastIndexOf("/") + 1) + L.path : X.path = L.path, X.path = et(X.path)), X.query = L.query) : (X.path = M.path, L.query !== void 0 ? X.query = L.query : X.query = M.query), X.userinfo = M.userinfo, X.host = M.host, X.port = M.port), X.scheme = M.scheme), X.fragment = L.fragment, X;
    }
    function tr(M, L, V) {
      var K = i({ scheme: "null" }, V);
      return Ge(mt(pe(M, K), pe(L, K), K, true), K);
    }
    function vr(M, L) {
      return typeof M == "string" ? M = Ge(pe(M, L), L) : a(M) === "object" && (M = pe(Ge(M, L), L)), M;
    }
    function Er(M, L, V) {
      return typeof M == "string" ? M = Ge(pe(M, V), V) : a(M) === "object" && (M = Ge(M, V)), typeof L == "string" ? L = Ge(pe(L, V), V) : a(L) === "object" && (L = Ge(L, V)), M === L;
    }
    function hr(M, L) {
      return M && M.toString().replace(!L || !L.iri ? c.ESCAPE : f.ESCAPE, ge);
    }
    function P(M, L) {
      return M && M.toString().replace(!L || !L.iri ? c.PCT_ENCODED : f.PCT_ENCODED, ae);
    }
    var It = {
      scheme: "http",
      domainHost: true,
      parse: function(L, V) {
        return L.host || (L.error = L.error || "HTTP URIs must have a host."), L;
      },
      serialize: function(L, V) {
        var K = String(L.scheme).toLowerCase() === "https";
        return (L.port === (K ? 443 : 80) || L.port === "") && (L.port = void 0), L.path || (L.path = "/"), L;
      }
    }, St = {
      scheme: "https",
      domainHost: It.domainHost,
      parse: It.parse,
      serialize: It.serialize
    };
    function rr(M) {
      return typeof M.secure == "boolean" ? M.secure : String(M.scheme).toLowerCase() === "wss";
    }
    var Te = {
      scheme: "ws",
      domainHost: true,
      parse: function(L, V) {
        var K = L;
        return K.secure = rr(K), K.resourceName = (K.path || "/") + (K.query ? "?" + K.query : ""), K.path = void 0, K.query = void 0, K;
      },
      serialize: function(L, V) {
        if ((L.port === (rr(L) ? 443 : 80) || L.port === "") && (L.port = void 0), typeof L.secure == "boolean" && (L.scheme = L.secure ? "wss" : "ws", L.secure = void 0), L.resourceName) {
          var K = L.resourceName.split("?"), X = h(K, 2), de = X[0], we = X[1];
          L.path = de && de !== "/" ? de : void 0, L.query = we, L.resourceName = void 0;
        }
        return L.fragment = void 0, L;
      }
    }, qe = {
      scheme: "wss",
      domainHost: Te.domainHost,
      parse: Te.parse,
      serialize: Te.serialize
    }, Be = {}, At = "[A-Za-z0-9\\-\\.\\_\\~\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]", bt = "[0-9A-Fa-f]", Ce = n(n("%[EFef]" + bt + "%" + bt + bt + "%" + bt + bt) + "|" + n("%[89A-Fa-f]" + bt + "%" + bt + bt) + "|" + n("%" + bt + bt)), Z = "[A-Za-z0-9\\!\\$\\%\\'\\*\\+\\-\\^\\_\\`\\{\\|\\}\\~]", W = "[\\!\\$\\%\\'\\(\\)\\*\\+\\,\\-\\.0-9\\<\\>A-Z\\x5E-\\x7E]", G = s(W, '[\\"\\\\]'), J = "[\\!\\$\\'\\(\\)\\*\\+\\,\\;\\:\\@]", le = new RegExp(At, "g"), ce = new RegExp(Ce, "g"), Fe = new RegExp(s("[^]", Z, "[\\.]", '[\\"]', G), "g"), Ve = new RegExp(s("[^]", At, J), "g"), Ye = Ve;
    function lt(M) {
      var L = ae(M);
      return L.match(le) ? L : M;
    }
    var xt = {
      scheme: "mailto",
      parse: function(L, V) {
        var K = L, X = K.to = K.path ? K.path.split(",") : [];
        if (K.path = void 0, K.query) {
          for (var de = false, we = {}, Me = K.query.split("&"), Ne = 0, tt = Me.length; Ne < tt; ++Ne) {
            var je = Me[Ne].split("=");
            switch (je[0]) {
              case "to":
                for (var fe = je[1].split(","), De = 0, ve = fe.length; De < ve; ++De)
                  X.push(fe[De]);
                break;
              case "subject":
                K.subject = P(je[1], V);
                break;
              case "body":
                K.body = P(je[1], V);
                break;
              default:
                de = true, we[P(je[0], V)] = P(je[1], V);
                break;
            }
          }
          de && (K.headers = we);
        }
        K.query = void 0;
        for (var ue = 0, Pe = X.length; ue < Pe; ++ue) {
          var Oe = X[ue].split("@");
          if (Oe[0] = P(Oe[0]), V.unicodeSupport)
            Oe[1] = P(Oe[1], V).toLowerCase();
          else
            try {
              Oe[1] = H.toASCII(P(Oe[1], V).toLowerCase());
            } catch (at) {
              K.error = K.error || "Email address's domain name can not be converted to ASCII via punycode: " + at;
            }
          X[ue] = Oe.join("@");
        }
        return K;
      },
      serialize: function(L, V) {
        var K = L, X = l(L.to);
        if (X) {
          for (var de = 0, we = X.length; de < we; ++de) {
            var Me = String(X[de]), Ne = Me.lastIndexOf("@"), tt = Me.slice(0, Ne).replace(ce, lt).replace(ce, o).replace(Fe, ge), je = Me.slice(Ne + 1);
            try {
              je = V.iri ? H.toUnicode(je) : H.toASCII(P(je, V).toLowerCase());
            } catch (ue) {
              K.error = K.error || "Email address's domain name can not be converted to " + (V.iri ? "Unicode" : "ASCII") + " via punycode: " + ue;
            }
            X[de] = tt + "@" + je;
          }
          K.path = X.join(",");
        }
        var fe = L.headers = L.headers || {};
        L.subject && (fe.subject = L.subject), L.body && (fe.body = L.body);
        var De = [];
        for (var ve in fe)
          fe[ve] !== Be[ve] && De.push(ve.replace(ce, lt).replace(ce, o).replace(Ve, ge) + "=" + fe[ve].replace(ce, lt).replace(ce, o).replace(Ye, ge));
        return De.length && (K.query = De.join("&")), K;
      }
    }, oe = /^([^\:]+)\:(.*)/, be = {
      scheme: "urn",
      parse: function(L, V) {
        var K = L.path && L.path.match(oe), X = L;
        if (K) {
          var de = V.scheme || X.scheme || "urn", we = K[1].toLowerCase(), Me = K[2], Ne = de + ":" + (V.nid || we), tt = Q[Ne];
          X.nid = we, X.nss = Me, X.path = void 0, tt && (X = tt.parse(X, V));
        } else
          X.error = X.error || "URN can not be parsed.";
        return X;
      },
      serialize: function(L, V) {
        var K = V.scheme || L.scheme || "urn", X = L.nid, de = K + ":" + (V.nid || X), we = Q[de];
        we && (L = we.serialize(L, V));
        var Me = L, Ne = L.nss;
        return Me.path = (X || V.nid) + ":" + Ne, Me;
      }
    }, ke = /^[0-9A-Fa-f]{8}(?:\-[0-9A-Fa-f]{4}){3}\-[0-9A-Fa-f]{12}$/, re = {
      scheme: "urn:uuid",
      parse: function(L, V) {
        var K = L;
        return K.uuid = K.nss, K.nss = void 0, !V.tolerant && (!K.uuid || !K.uuid.match(ke)) && (K.error = K.error || "UUID is not valid."), K;
      },
      serialize: function(L, V) {
        var K = L;
        return K.nss = (L.uuid || "").toLowerCase(), K;
      }
    };
    Q[It.scheme] = It, Q[St.scheme] = St, Q[Te.scheme] = Te, Q[qe.scheme] = qe, Q[xt.scheme] = xt, Q[be.scheme] = be, Q[re.scheme] = re, r.SCHEMES = Q, r.pctEncChar = ge, r.pctDecChars = ae, r.parse = pe, r.removeDotSegments = et, r.serialize = Ge, r.resolveComponents = mt, r.resolve = tr, r.normalize = vr, r.equal = Er, r.escapeComponent = hr, r.unescapeComponent = P, Object.defineProperty(r, "__esModule", { value: true });
  });
})(hl, hl.exports);
var bu = function t(e, r) {
  if (e === r)
    return true;
  if (e && r && typeof e == "object" && typeof r == "object") {
    if (e.constructor !== r.constructor)
      return false;
    var s, n, a;
    if (Array.isArray(e)) {
      if (s = e.length, s != r.length)
        return false;
      for (n = s; n-- !== 0; )
        if (!t(e[n], r[n]))
          return false;
      return true;
    }
    if (e.constructor === RegExp)
      return e.source === r.source && e.flags === r.flags;
    if (e.valueOf !== Object.prototype.valueOf)
      return e.valueOf() === r.valueOf();
    if (e.toString !== Object.prototype.toString)
      return e.toString() === r.toString();
    if (a = Object.keys(e), s = a.length, s !== Object.keys(r).length)
      return false;
    for (n = s; n-- !== 0; )
      if (!Object.prototype.hasOwnProperty.call(r, a[n]))
        return false;
    for (n = s; n-- !== 0; ) {
      var o = a[n];
      if (!t(e[o], r[o]))
        return false;
    }
    return true;
  }
  return e !== e && r !== r;
};
var GF = function(e) {
  for (var r = 0, s = e.length, n = 0, a; n < s; )
    r++, a = e.charCodeAt(n++), a >= 55296 && a <= 56319 && n < s && (a = e.charCodeAt(n), (a & 64512) == 56320 && n++);
  return r;
};
var cs = {
  copy: HF,
  checkDataType: ml,
  checkDataTypes: KF,
  coerceToTypes: JF,
  toHash: Cu,
  getProperty: Su,
  escapeQuotes: Au,
  equal: bu,
  ucs2length: GF,
  varOccurences: YF,
  varReplace: ZF,
  schemaHasRules: eP,
  schemaHasRulesExcept: tP,
  schemaUnknownRules: rP,
  toQuotedString: dl,
  getPathExpr: nP,
  getPath: sP,
  getData: oP,
  unescapeFragment: lP,
  unescapeJsonPointer: wu,
  escapeFragment: uP,
  escapeJsonPointer: Du
};
function HF(t4, e) {
  e = e || {};
  for (var r in t4)
    e[r] = t4[r];
  return e;
}
function ml(t4, e, r, s) {
  var n = s ? " !== " : " === ", a = s ? " || " : " && ", o = s ? "!" : "", l = s ? "" : "!";
  switch (t4) {
    case "null":
      return e + n + "null";
    case "array":
      return o + "Array.isArray(" + e + ")";
    case "object":
      return "(" + o + e + a + "typeof " + e + n + '"object"' + a + l + "Array.isArray(" + e + "))";
    case "integer":
      return "(typeof " + e + n + '"number"' + a + l + "(" + e + " % 1)" + a + e + n + e + (r ? a + o + "isFinite(" + e + ")" : "") + ")";
    case "number":
      return "(typeof " + e + n + '"' + t4 + '"' + (r ? a + o + "isFinite(" + e + ")" : "") + ")";
    default:
      return "typeof " + e + n + '"' + t4 + '"';
  }
}
function KF(t4, e, r) {
  switch (t4.length) {
    case 1:
      return ml(t4[0], e, r, true);
    default:
      var s = "", n = Cu(t4);
      n.array && n.object && (s = n.null ? "(" : "(!" + e + " || ", s += "typeof " + e + ' !== "object")', delete n.null, delete n.array, delete n.object), n.number && delete n.integer;
      for (var a in n)
        s += (s ? " && " : "") + ml(a, e, r, true);
      return s;
  }
}
var Qd = Cu(["string", "number", "integer", "boolean", "null"]);
function JF(t4, e) {
  if (Array.isArray(e)) {
    for (var r = [], s = 0; s < e.length; s++) {
      var n = e[s];
      (Qd[n] || t4 === "array" && n === "array") && (r[r.length] = n);
    }
    if (r.length)
      return r;
  } else {
    if (Qd[e])
      return [e];
    if (t4 === "array" && e === "array")
      return ["array"];
  }
}
function Cu(t4) {
  for (var e = {}, r = 0; r < t4.length; r++)
    e[t4[r]] = true;
  return e;
}
var XF = /^[a-z$_][a-z$_0-9]*$/i;
var QF = /'|\\/g;
function Su(t4) {
  return typeof t4 == "number" ? "[" + t4 + "]" : XF.test(t4) ? "." + t4 : "['" + Au(t4) + "']";
}
function Au(t4) {
  return t4.replace(QF, "\\$&").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/\f/g, "\\f").replace(/\t/g, "\\t");
}
function YF(t4, e) {
  e += "[^0-9]";
  var r = t4.match(new RegExp(e, "g"));
  return r ? r.length : 0;
}
function ZF(t4, e, r) {
  return e += "([^0-9])", r = r.replace(/\$/g, "$$$$"), t4.replace(new RegExp(e, "g"), r + "$1");
}
function eP(t4, e) {
  if (typeof t4 == "boolean")
    return !t4;
  for (var r in t4)
    if (e[r])
      return true;
}
function tP(t4, e, r) {
  if (typeof t4 == "boolean")
    return !t4 && r != "not";
  for (var s in t4)
    if (s != r && e[s])
      return true;
}
function rP(t4, e) {
  if (typeof t4 != "boolean") {
    for (var r in t4)
      if (!e[r])
        return r;
  }
}
function dl(t4) {
  return "'" + Au(t4) + "'";
}
function nP(t4, e, r, s) {
  var n = r ? "'/' + " + e + (s ? "" : ".replace(/~/g, '~0').replace(/\\//g, '~1')") : s ? "'[' + " + e + " + ']'" : "'[\\'' + " + e + " + '\\']'";
  return xv(t4, n);
}
function sP(t4, e, r) {
  var s = dl(r ? "/" + Du(e) : Su(e));
  return xv(t4, s);
}
var aP = /^\/(?:[^~]|~0|~1)*$/;
var iP = /^([0-9]+)(#|\/(?:[^~]|~0|~1)*)?$/;
function oP(t4, e, r) {
  var s, n, a, o;
  if (t4 === "")
    return "rootData";
  if (t4[0] == "/") {
    if (!aP.test(t4))
      throw new Error("Invalid JSON-pointer: " + t4);
    n = t4, a = "rootData";
  } else {
    if (o = t4.match(iP), !o)
      throw new Error("Invalid JSON-pointer: " + t4);
    if (s = +o[1], n = o[2], n == "#") {
      if (s >= e)
        throw new Error("Cannot access property/index " + s + " levels up, current level is " + e);
      return r[e - s];
    }
    if (s > e)
      throw new Error("Cannot access data " + s + " levels up, current level is " + e);
    if (a = "data" + (e - s || ""), !n)
      return a;
  }
  for (var l = a, i = n.split("/"), u = 0; u < i.length; u++) {
    var c = i[u];
    c && (a += Su(wu(c)), l += " && " + a);
  }
  return l;
}
function xv(t4, e) {
  return t4 == '""' ? e : (t4 + " + " + e).replace(/([^\\])' \+ '/g, "$1");
}
function lP(t4) {
  return wu(decodeURIComponent(t4));
}
function uP(t4) {
  return encodeURIComponent(Du(t4));
}
function Du(t4) {
  return t4.replace(/~/g, "~0").replace(/\//g, "~1");
}
function wu(t4) {
  return t4.replace(/~1/g, "/").replace(/~0/g, "~");
}
var cP = cs;
var vv = pP;
function pP(t4) {
  cP.copy(t4, this);
}
var Ev = { exports: {} };
var en = Ev.exports = function(t4, e, r) {
  typeof e == "function" && (r = e, e = {}), r = e.cb || r;
  var s = typeof r == "function" ? r : r.pre || function() {
  }, n = r.post || function() {
  };
  Ta(e, s, n, t4, "", t4);
};
en.keywords = {
  additionalItems: true,
  items: true,
  contains: true,
  additionalProperties: true,
  propertyNames: true,
  not: true
};
en.arrayKeywords = {
  items: true,
  allOf: true,
  anyOf: true,
  oneOf: true
};
en.propsKeywords = {
  definitions: true,
  properties: true,
  patternProperties: true,
  dependencies: true
};
en.skipKeywords = {
  default: true,
  enum: true,
  const: true,
  required: true,
  maximum: true,
  minimum: true,
  exclusiveMaximum: true,
  exclusiveMinimum: true,
  multipleOf: true,
  maxLength: true,
  minLength: true,
  pattern: true,
  format: true,
  maxItems: true,
  minItems: true,
  uniqueItems: true,
  maxProperties: true,
  minProperties: true
};
function Ta(t4, e, r, s, n, a, o, l, i, u) {
  if (s && typeof s == "object" && !Array.isArray(s)) {
    e(s, n, a, o, l, i, u);
    for (var c in s) {
      var f = s[c];
      if (Array.isArray(f)) {
        if (c in en.arrayKeywords)
          for (var h = 0; h < f.length; h++)
            Ta(t4, e, r, f[h], n + "/" + c + "/" + h, a, n, c, s, h);
      } else if (c in en.propsKeywords) {
        if (f && typeof f == "object")
          for (var p in f)
            Ta(t4, e, r, f[p], n + "/" + c + "/" + fP(p), a, n, c, s, p);
      } else
        (c in en.keywords || t4.allKeys && !(c in en.skipKeywords)) && Ta(t4, e, r, f, n + "/" + c, a, n, c, s);
    }
    r(s, n, a, o, l, i, u);
  }
}
function fP(t4) {
  return t4.replace(/~/g, "~0").replace(/\//g, "~1");
}
var Ks = hl.exports;
var Yd = bu;
var Di = cs;
var Ha = vv;
var hP = Ev.exports;
var ku = un;
un.normalizeId = sn;
un.fullPath = Ka;
un.url = Ja;
un.ids = xP;
un.inlineRef = gl;
un.schema = wi;
function un(t4, e, r) {
  var s = this._refs[r];
  if (typeof s == "string")
    if (this._refs[s])
      s = this._refs[s];
    else
      return un.call(this, t4, e, s);
  if (s = s || this._schemas[r], s instanceof Ha)
    return gl(s.schema, this._opts.inlineRefs) ? s.schema : s.validate || this._compile(s);
  var n = wi.call(this, e, r), a, o, l;
  return n && (a = n.schema, e = n.root, l = n.baseId), a instanceof Ha ? o = a.validate || t4.call(this, a.schema, e, void 0, l) : a !== void 0 && (o = gl(a, this._opts.inlineRefs) ? a : t4.call(this, a, e, void 0, l)), o;
}
function wi(t4, e) {
  var r = Ks.parse(e), s = Cv(r), n = Ka(this._getId(t4.schema));
  if (Object.keys(t4.schema).length === 0 || s !== n) {
    var a = sn(s), o = this._refs[a];
    if (typeof o == "string")
      return mP.call(this, t4, o, r);
    if (o instanceof Ha)
      o.validate || this._compile(o), t4 = o;
    else if (o = this._schemas[a], o instanceof Ha) {
      if (o.validate || this._compile(o), a == sn(e))
        return { schema: o, root: t4, baseId: n };
      t4 = o;
    } else
      return;
    if (!t4.schema)
      return;
    n = Ka(this._getId(t4.schema));
  }
  return bv.call(this, r, n, t4.schema, t4);
}
function mP(t4, e, r) {
  var s = wi.call(this, t4, e);
  if (s) {
    var n = s.schema, a = s.baseId;
    t4 = s.root;
    var o = this._getId(n);
    return o && (a = Ja(a, o)), bv.call(this, r, a, n, t4);
  }
}
var dP = Di.toHash(["properties", "patternProperties", "enum", "dependencies", "definitions"]);
function bv(t4, e, r, s) {
  if (t4.fragment = t4.fragment || "", t4.fragment.slice(0, 1) == "/") {
    for (var n = t4.fragment.split("/"), a = 1; a < n.length; a++) {
      var o = n[a];
      if (o) {
        if (o = Di.unescapeFragment(o), r = r[o], r === void 0)
          break;
        var l;
        if (!dP[o] && (l = this._getId(r), l && (e = Ja(e, l)), r.$ref)) {
          var i = Ja(e, r.$ref), u = wi.call(this, s, i);
          u && (r = u.schema, s = u.root, e = u.baseId);
        }
      }
    }
    if (r !== void 0 && r !== s.schema)
      return { schema: r, root: s, baseId: e };
  }
}
var gP = Di.toHash([
  "type",
  "format",
  "pattern",
  "maxLength",
  "minLength",
  "maxProperties",
  "minProperties",
  "maxItems",
  "minItems",
  "maximum",
  "minimum",
  "uniqueItems",
  "multipleOf",
  "required",
  "enum"
]);
function gl(t4, e) {
  if (e === false)
    return false;
  if (e === void 0 || e === true)
    return yl(t4);
  if (e)
    return xl(t4) <= e;
}
function yl(t4) {
  var e;
  if (Array.isArray(t4)) {
    for (var r = 0; r < t4.length; r++)
      if (e = t4[r], typeof e == "object" && !yl(e))
        return false;
  } else
    for (var s in t4)
      if (s == "$ref" || (e = t4[s], typeof e == "object" && !yl(e)))
        return false;
  return true;
}
function xl(t4) {
  var e = 0, r;
  if (Array.isArray(t4)) {
    for (var s = 0; s < t4.length; s++)
      if (r = t4[s], typeof r == "object" && (e += xl(r)), e == 1 / 0)
        return 1 / 0;
  } else
    for (var n in t4) {
      if (n == "$ref")
        return 1 / 0;
      if (gP[n])
        e++;
      else if (r = t4[n], typeof r == "object" && (e += xl(r) + 1), e == 1 / 0)
        return 1 / 0;
    }
  return e;
}
function Ka(t4, e) {
  e !== false && (t4 = sn(t4));
  var r = Ks.parse(t4);
  return Cv(r);
}
function Cv(t4) {
  return Ks.serialize(t4).split("#")[0] + "#";
}
var yP = /#\/?$/;
function sn(t4) {
  return t4 ? t4.replace(yP, "") : "";
}
function Ja(t4, e) {
  return e = sn(e), Ks.resolve(t4, e);
}
function xP(t4) {
  var e = sn(this._getId(t4)), r = { "": e }, s = { "": Ka(e, false) }, n = {}, a = this;
  return hP(t4, { allKeys: true }, function(o, l, i, u, c, f, h) {
    if (l !== "") {
      var p = a._getId(o), m = r[u], d = s[u] + "/" + c;
      if (h !== void 0 && (d += "/" + (typeof h == "number" ? h : Di.escapeFragment(h))), typeof p == "string") {
        p = m = sn(m ? Ks.resolve(m, p) : p);
        var g = a._refs[p];
        if (typeof g == "string" && (g = a._refs[g]), g && g.schema) {
          if (!Yd(o, g.schema))
            throw new Error('id "' + p + '" resolves to more than one schema');
        } else if (p != sn(d))
          if (p[0] == "#") {
            if (n[p] && !Yd(o, n[p]))
              throw new Error('id "' + p + '" resolves to more than one schema');
            n[p] = o;
          } else
            a._refs[p] = d;
      }
      r[l] = m, s[l] = d;
    }
  }), n;
}
var io = ku;
var Tu = {
  Validation: Zd(vP),
  MissingRef: Zd(Fu)
};
function vP(t4) {
  this.message = "validation failed", this.errors = t4, this.ajv = this.validation = true;
}
Fu.message = function(t4, e) {
  return "can't resolve reference " + e + " from id " + t4;
};
function Fu(t4, e, r) {
  this.message = r || Fu.message(t4, e), this.missingRef = io.url(t4, e), this.missingSchema = io.normalizeId(io.fullPath(this.missingRef));
}
function Zd(t4) {
  return t4.prototype = Object.create(Error.prototype), t4.prototype.constructor = t4, t4;
}
var Sv = function(t4, e) {
  e || (e = {}), typeof e == "function" && (e = { cmp: e });
  var r = typeof e.cycles == "boolean" ? e.cycles : false, s = e.cmp && /* @__PURE__ */ function(a) {
    return function(o) {
      return function(l, i) {
        var u = { key: l, value: o[l] }, c = { key: i, value: o[i] };
        return a(u, c);
      };
    };
  }(e.cmp), n = [];
  return function a(o) {
    if (o && o.toJSON && typeof o.toJSON == "function" && (o = o.toJSON()), o !== void 0) {
      if (typeof o == "number")
        return isFinite(o) ? "" + o : "null";
      if (typeof o != "object")
        return JSON.stringify(o);
      var l, i;
      if (Array.isArray(o)) {
        for (i = "[", l = 0; l < o.length; l++)
          l && (i += ","), i += a(o[l]) || "null";
        return i + "]";
      }
      if (o === null)
        return "null";
      if (n.indexOf(o) !== -1) {
        if (r)
          return JSON.stringify("__cycle__");
        throw new TypeError("Converting circular structure to JSON");
      }
      var u = n.push(o) - 1, c = Object.keys(o).sort(s && s(o));
      for (i = "", l = 0; l < c.length; l++) {
        var f = c[l], h = a(o[f]);
        h && (i && (i += ","), i += JSON.stringify(f) + ":" + h);
      }
      return n.splice(u, 1), "{" + i + "}";
    }
  }(t4);
};
var Av = function(e, r, s) {
  var n = "", a = e.schema.$async === true, o = e.util.schemaHasRulesExcept(e.schema, e.RULES.all, "$ref"), l = e.self._getId(e.schema);
  if (e.opts.strictKeywords) {
    var i = e.util.schemaUnknownRules(e.schema, e.RULES.keywords);
    if (i) {
      var u = "unknown keyword: " + i;
      if (e.opts.strictKeywords === "log")
        e.logger.warn(u);
      else
        throw new Error(u);
    }
  }
  if (e.isTop && (n += " var validate = ", a && (e.async = true, n += "async "), n += "function(data, dataPath, parentData, parentDataProperty, rootData) { 'use strict'; ", l && (e.opts.sourceCode || e.opts.processCode) && (n += " " + ("/*# sourceURL=" + l + " */") + " ")), typeof e.schema == "boolean" || !(o || e.schema.$ref)) {
    var r = "false schema", c = e.level, f = e.dataLevel, h = e.schema[r], p = e.schemaPath + e.util.getProperty(r), m = e.errSchemaPath + "/" + r, v = !e.opts.allErrors, w, d = "data" + (f || ""), b = "valid" + c;
    if (e.schema === false) {
      e.isTop ? v = true : n += " var " + b + " = false; ";
      var g = g || [];
      g.push(n), n = "", e.createErrors !== false ? (n += " { keyword: '" + (w || "false schema") + "' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(m) + " , params: {} ", e.opts.messages !== false && (n += " , message: 'boolean schema is false' "), e.opts.verbose && (n += " , schema: false , parentSchema: validate.schema" + e.schemaPath + " , data: " + d + " "), n += " } ") : n += " {} ";
      var y = n;
      n = g.pop(), !e.compositeRule && v ? e.async ? n += " throw new ValidationError([" + y + "]); " : n += " validate.errors = [" + y + "]; return false; " : n += " var err = " + y + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
    } else
      e.isTop ? a ? n += " return data; " : n += " validate.errors = null; return true; " : n += " var " + b + " = true; ";
    return e.isTop && (n += " }; return validate; "), n;
  }
  if (e.isTop) {
    var x = e.isTop, c = e.level = 0, f = e.dataLevel = 0, d = "data";
    if (e.rootId = e.resolve.fullPath(e.self._getId(e.root.schema)), e.baseId = e.baseId || e.rootId, delete e.isTop, e.dataPathArr = [""], e.schema.default !== void 0 && e.opts.useDefaults && e.opts.strictDefaults) {
      var A = "default is ignored in the schema root";
      if (e.opts.strictDefaults === "log")
        e.logger.warn(A);
      else
        throw new Error(A);
    }
    n += " var vErrors = null; ", n += " var errors = 0;     ", n += " if (rootData === undefined) rootData = data; ";
  } else {
    var c = e.level, f = e.dataLevel, d = "data" + (f || "");
    if (l && (e.baseId = e.resolve.url(e.baseId, l)), a && !e.async)
      throw new Error("async schema in sync schema");
    n += " var errs_" + c + " = errors;";
  }
  var b = "valid" + c, v = !e.opts.allErrors, C = "", T = "", w, B = e.schema.type, I = Array.isArray(B);
  if (B && e.opts.nullable && e.schema.nullable === true && (I ? B.indexOf("null") == -1 && (B = B.concat("null")) : B != "null" && (B = [B, "null"], I = true)), I && B.length == 1 && (B = B[0], I = false), e.schema.$ref && o) {
    if (e.opts.extendRefs == "fail")
      throw new Error('$ref: validation keywords used in schema at path "' + e.errSchemaPath + '" (see option extendRefs)');
    e.opts.extendRefs !== true && (o = false, e.logger.warn('$ref: keywords ignored in schema at path "' + e.errSchemaPath + '"'));
  }
  if (e.schema.$comment && e.opts.$comment && (n += " " + e.RULES.all.$comment.code(e, "$comment")), B) {
    if (e.opts.coerceTypes)
      var _ = e.util.coerceToTypes(e.opts.coerceTypes, B);
    var S = e.RULES.types[B];
    if (_ || I || S === true || S && !We(S)) {
      var p = e.schemaPath + ".type", m = e.errSchemaPath + "/type", p = e.schemaPath + ".type", m = e.errSchemaPath + "/type", F = I ? "checkDataTypes" : "checkDataType";
      if (n += " if (" + e.util[F](B, d, e.opts.strictNumbers, true) + ") { ", _) {
        var N = "dataType" + c, k = "coerced" + c;
        n += " var " + N + " = typeof " + d + "; var " + k + " = undefined; ", e.opts.coerceTypes == "array" && (n += " if (" + N + " == 'object' && Array.isArray(" + d + ") && " + d + ".length == 1) { " + d + " = " + d + "[0]; " + N + " = typeof " + d + "; if (" + e.util.checkDataType(e.schema.type, d, e.opts.strictNumbers) + ") " + k + " = " + d + "; } "), n += " if (" + k + " !== undefined) ; ";
        var j = _;
        if (j)
          for (var O, z = -1, te = j.length - 1; z < te; )
            O = j[z += 1], O == "string" ? n += " else if (" + N + " == 'number' || " + N + " == 'boolean') " + k + " = '' + " + d + "; else if (" + d + " === null) " + k + " = ''; " : O == "number" || O == "integer" ? (n += " else if (" + N + " == 'boolean' || " + d + " === null || (" + N + " == 'string' && " + d + " && " + d + " == +" + d + " ", O == "integer" && (n += " && !(" + d + " % 1)"), n += ")) " + k + " = +" + d + "; ") : O == "boolean" ? n += " else if (" + d + " === 'false' || " + d + " === 0 || " + d + " === null) " + k + " = false; else if (" + d + " === 'true' || " + d + " === 1) " + k + " = true; " : O == "null" ? n += " else if (" + d + " === '' || " + d + " === 0 || " + d + " === false) " + k + " = null; " : e.opts.coerceTypes == "array" && O == "array" && (n += " else if (" + N + " == 'string' || " + N + " == 'number' || " + N + " == 'boolean' || " + d + " == null) " + k + " = [" + d + "]; ");
        n += " else {   ";
        var g = g || [];
        g.push(n), n = "", e.createErrors !== false ? (n += " { keyword: '" + (w || "type") + "' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(m) + " , params: { type: '", I ? n += "" + B.join(",") : n += "" + B, n += "' } ", e.opts.messages !== false && (n += " , message: 'should be ", I ? n += "" + B.join(",") : n += "" + B, n += "' "), e.opts.verbose && (n += " , schema: validate.schema" + p + " , parentSchema: validate.schema" + e.schemaPath + " , data: " + d + " "), n += " } ") : n += " {} ";
        var y = n;
        n = g.pop(), !e.compositeRule && v ? e.async ? n += " throw new ValidationError([" + y + "]); " : n += " validate.errors = [" + y + "]; return false; " : n += " var err = " + y + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", n += " } if (" + k + " !== undefined) {  ";
        var se = f ? "data" + (f - 1 || "") : "parentData", ye = f ? e.dataPathArr[f] : "parentDataProperty";
        n += " " + d + " = " + k + "; ", f || (n += "if (" + se + " !== undefined)"), n += " " + se + "[" + ye + "] = " + k + "; } ";
      } else {
        var g = g || [];
        g.push(n), n = "", e.createErrors !== false ? (n += " { keyword: '" + (w || "type") + "' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(m) + " , params: { type: '", I ? n += "" + B.join(",") : n += "" + B, n += "' } ", e.opts.messages !== false && (n += " , message: 'should be ", I ? n += "" + B.join(",") : n += "" + B, n += "' "), e.opts.verbose && (n += " , schema: validate.schema" + p + " , parentSchema: validate.schema" + e.schemaPath + " , data: " + d + " "), n += " } ") : n += " {} ";
        var y = n;
        n = g.pop(), !e.compositeRule && v ? e.async ? n += " throw new ValidationError([" + y + "]); " : n += " validate.errors = [" + y + "]; return false; " : n += " var err = " + y + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
      }
      n += " } ";
    }
  }
  if (e.schema.$ref && !o)
    n += " " + e.RULES.all.$ref.code(e, "$ref") + " ", v && (n += " } if (errors === ", x ? n += "0" : n += "errs_" + c, n += ") { ", T += "}");
  else {
    var Se = e.RULES;
    if (Se) {
      for (var S, xe = -1, Ae = Se.length - 1; xe < Ae; )
        if (S = Se[xe += 1], We(S)) {
          if (S.type && (n += " if (" + e.util.checkDataType(S.type, d, e.opts.strictNumbers) + ") { "), e.opts.useDefaults) {
            if (S.type == "object" && e.schema.properties) {
              var h = e.schema.properties, _e = Object.keys(h), H = _e;
              if (H)
                for (var Q, ge = -1, ae = H.length - 1; ge < ae; ) {
                  Q = H[ge += 1];
                  var ee = h[Q];
                  if (ee.default !== void 0) {
                    var he = d + e.util.getProperty(Q);
                    if (e.compositeRule) {
                      if (e.opts.strictDefaults) {
                        var A = "default is ignored for: " + he;
                        if (e.opts.strictDefaults === "log")
                          e.logger.warn(A);
                        else
                          throw new Error(A);
                      }
                    } else
                      n += " if (" + he + " === undefined ", e.opts.useDefaults == "empty" && (n += " || " + he + " === null || " + he + " === '' "), n += " ) " + he + " = ", e.opts.useDefaults == "shared" ? n += " " + e.useDefault(ee.default) + " " : n += " " + JSON.stringify(ee.default) + " ", n += "; ";
                  }
                }
            } else if (S.type == "array" && Array.isArray(e.schema.items)) {
              var R = e.schema.items;
              if (R) {
                for (var ee, z = -1, D = R.length - 1; z < D; )
                  if (ee = R[z += 1], ee.default !== void 0) {
                    var he = d + "[" + z + "]";
                    if (e.compositeRule) {
                      if (e.opts.strictDefaults) {
                        var A = "default is ignored for: " + he;
                        if (e.opts.strictDefaults === "log")
                          e.logger.warn(A);
                        else
                          throw new Error(A);
                      }
                    } else
                      n += " if (" + he + " === undefined ", e.opts.useDefaults == "empty" && (n += " || " + he + " === null || " + he + " === '' "), n += " ) " + he + " = ", e.opts.useDefaults == "shared" ? n += " " + e.useDefault(ee.default) + " " : n += " " + JSON.stringify(ee.default) + " ", n += "; ";
                  }
              }
            }
          }
          var U = S.rules;
          if (U) {
            for (var ne, pe = -1, Ee = U.length - 1; pe < Ee; )
              if (ne = U[pe += 1], wt(ne)) {
                var Re = ne.code(e, ne.keyword, S.type);
                Re && (n += " " + Re + " ", v && (C += "}"));
              }
          }
          if (v && (n += " " + C + " ", C = ""), S.type && (n += " } ", B && B === S.type && !_)) {
            n += " else { ";
            var p = e.schemaPath + ".type", m = e.errSchemaPath + "/type", g = g || [];
            g.push(n), n = "", e.createErrors !== false ? (n += " { keyword: '" + (w || "type") + "' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(m) + " , params: { type: '", I ? n += "" + B.join(",") : n += "" + B, n += "' } ", e.opts.messages !== false && (n += " , message: 'should be ", I ? n += "" + B.join(",") : n += "" + B, n += "' "), e.opts.verbose && (n += " , schema: validate.schema" + p + " , parentSchema: validate.schema" + e.schemaPath + " , data: " + d + " "), n += " } ") : n += " {} ";
            var y = n;
            n = g.pop(), !e.compositeRule && v ? e.async ? n += " throw new ValidationError([" + y + "]); " : n += " validate.errors = [" + y + "]; return false; " : n += " var err = " + y + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", n += " } ";
          }
          v && (n += " if (errors === ", x ? n += "0" : n += "errs_" + c, n += ") { ", T += "}");
        }
    }
  }
  v && (n += " " + T + " "), x ? (a ? (n += " if (errors === 0) return data;           ", n += " else throw new ValidationError(vErrors); ") : (n += " validate.errors = vErrors; ", n += " return errors === 0;       "), n += " }; return validate;") : n += " var " + b + " = errors === errs_" + c + ";";
  function We(et) {
    for (var Ge = et.rules, mt = 0; mt < Ge.length; mt++)
      if (wt(Ge[mt]))
        return true;
  }
  function wt(et) {
    return e.schema[et.keyword] !== void 0 || et.implements && Lt(et);
  }
  function Lt(et) {
    for (var Ge = et.implements, mt = 0; mt < Ge.length; mt++)
      if (e.schema[Ge[mt]] !== void 0)
        return true;
  }
  return n;
};
var la = ku;
var Xa = cs;
var Dv = Tu;
var EP = Sv;
var eg = Av;
var bP = Xa.ucs2length;
var CP = bu;
var SP = Dv.Validation;
var AP = vl;
function vl(t4, e, r, s) {
  var n = this, a = this._opts, o = [void 0], l = {}, i = [], u = {}, c = [], f = {}, h = [];
  e = e || { schema: t4, refVal: o, refs: l };
  var p = DP.call(this, t4, e, s), m = this._compilations[p.index];
  if (p.compiling)
    return m.callValidate = A;
  var d = this._formats, g = this.RULES;
  try {
    var y = b(t4, e, r, s);
    m.validate = y;
    var x = m.callValidate;
    return x && (x.schema = y.schema, x.errors = null, x.refs = y.refs, x.refVal = y.refVal, x.root = y.root, x.$async = y.$async, a.sourceCode && (x.source = y.source)), y;
  } finally {
    wP.call(this, t4, e, s);
  }
  function A() {
    var F = m.validate, N = F.apply(this, arguments);
    return A.errors = F.errors, N;
  }
  function b(F, N, k, j) {
    var O = !N || N && N.schema == F;
    if (N.schema != e.schema)
      return vl.call(n, F, N, k, j);
    var z = F.$async === true, te = eg({
      isTop: true,
      schema: F,
      isRoot: O,
      baseId: j,
      root: N,
      schemaPath: "",
      errSchemaPath: "#",
      errorPath: '""',
      MissingRefError: Dv.MissingRef,
      RULES: g,
      validate: eg,
      util: Xa,
      resolve: la,
      resolveRef: v,
      usePattern: I,
      useDefault: _,
      useCustomRule: S,
      opts: a,
      formats: d,
      logger: n.logger,
      self: n
    });
    te = ua(o, FP) + ua(i, kP) + ua(c, TP) + ua(h, PP) + te, a.processCode && (te = a.processCode(te, F));
    var se;
    try {
      var ye = new Function(
        "self",
        "RULES",
        "formats",
        "root",
        "refVal",
        "defaults",
        "customRules",
        "equal",
        "ucs2length",
        "ValidationError",
        te
      );
      se = ye(
        n,
        g,
        d,
        e,
        o,
        c,
        h,
        CP,
        bP,
        SP
      ), o[0] = se;
    } catch (Se) {
      throw n.logger.error("Error compiling schema, function code:", te), Se;
    }
    return se.schema = F, se.errors = null, se.refs = l, se.refVal = o, se.root = O ? se : N, z && (se.$async = true), a.sourceCode === true && (se.source = {
      code: te,
      patterns: i,
      defaults: c
    }), se;
  }
  function v(F, N, k) {
    N = la.url(F, N);
    var j = l[N], O, z;
    if (j !== void 0)
      return O = o[j], z = "refVal[" + j + "]", B(O, z);
    if (!k && e.refs) {
      var te = e.refs[N];
      if (te !== void 0)
        return O = e.refVal[te], z = C(N, O), B(O, z);
    }
    z = C(N);
    var se = la.call(n, b, e, N);
    if (se === void 0) {
      var ye = r && r[N];
      ye && (se = la.inlineRef(ye, a.inlineRefs) ? ye : vl.call(n, ye, e, r, F));
    }
    if (se === void 0)
      T(N);
    else
      return w(N, se), B(se, z);
  }
  function C(F, N) {
    var k = o.length;
    return o[k] = N, l[F] = k, "refVal" + k;
  }
  function T(F) {
    delete l[F];
  }
  function w(F, N) {
    var k = l[F];
    o[k] = N;
  }
  function B(F, N) {
    return typeof F == "object" || typeof F == "boolean" ? { code: N, schema: F, inline: true } : { code: N, $async: F && !!F.$async };
  }
  function I(F) {
    var N = u[F];
    return N === void 0 && (N = u[F] = i.length, i[N] = F), "pattern" + N;
  }
  function _(F) {
    switch (typeof F) {
      case "boolean":
      case "number":
        return "" + F;
      case "string":
        return Xa.toQuotedString(F);
      case "object":
        if (F === null)
          return "null";
        var N = EP(F), k = f[N];
        return k === void 0 && (k = f[N] = c.length, c[k] = F), "default" + k;
    }
  }
  function S(F, N, k, j) {
    if (n._opts.validateSchema !== false) {
      var O = F.definition.dependencies;
      if (O && !O.every(function(H) {
        return Object.prototype.hasOwnProperty.call(k, H);
      }))
        throw new Error("parent schema must have all required keywords: " + O.join(","));
      var z = F.definition.validateSchema;
      if (z) {
        var te = z(N);
        if (!te) {
          var se = "keyword schema is invalid: " + n.errorsText(z.errors);
          if (n._opts.validateSchema == "log")
            n.logger.error(se);
          else
            throw new Error(se);
        }
      }
    }
    var ye = F.definition.compile, Se = F.definition.inline, xe = F.definition.macro, Ae;
    if (ye)
      Ae = ye.call(n, N, k, j);
    else if (xe)
      Ae = xe.call(n, N, k, j), a.validateSchema !== false && n.validateSchema(Ae, true);
    else if (Se)
      Ae = Se.call(n, j, F.keyword, N, k);
    else if (Ae = F.definition.validate, !Ae)
      return;
    if (Ae === void 0)
      throw new Error('custom keyword "' + F.keyword + '"failed to compile');
    var _e = h.length;
    return h[_e] = Ae, {
      code: "customRule" + _e,
      validate: Ae
    };
  }
}
function DP(t4, e, r) {
  var s = wv.call(this, t4, e, r);
  return s >= 0 ? { index: s, compiling: true } : (s = this._compilations.length, this._compilations[s] = {
    schema: t4,
    root: e,
    baseId: r
  }, { index: s, compiling: false });
}
function wP(t4, e, r) {
  var s = wv.call(this, t4, e, r);
  s >= 0 && this._compilations.splice(s, 1);
}
function wv(t4, e, r) {
  for (var s = 0; s < this._compilations.length; s++) {
    var n = this._compilations[s];
    if (n.schema == t4 && n.root == e && n.baseId == r)
      return s;
  }
  return -1;
}
function kP(t4, e) {
  return "var pattern" + t4 + " = new RegExp(" + Xa.toQuotedString(e[t4]) + ");";
}
function TP(t4) {
  return "var default" + t4 + " = defaults[" + t4 + "];";
}
function FP(t4, e) {
  return e[t4] === void 0 ? "" : "var refVal" + t4 + " = refVal[" + t4 + "];";
}
function PP(t4) {
  return "var customRule" + t4 + " = customRules[" + t4 + "];";
}
function ua(t4, e) {
  if (!t4.length)
    return "";
  for (var r = "", s = 0; s < t4.length; s++)
    r += e(s, t4);
  return r;
}
var kv = { exports: {} };
var ki = kv.exports = function() {
  this._cache = {};
};
ki.prototype.put = function(e, r) {
  this._cache[e] = r;
};
ki.prototype.get = function(e) {
  return this._cache[e];
};
ki.prototype.del = function(e) {
  delete this._cache[e];
};
ki.prototype.clear = function() {
  this._cache = {};
};
var IP = cs;
var _P = /^(\d\d\d\d)-(\d\d)-(\d\d)$/;
var BP = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
var OP = /^(\d\d):(\d\d):(\d\d)(\.\d+)?(z|[+-]\d\d(?::?\d\d)?)?$/i;
var Tv = /^(?=.{1,253}\.?$)[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[-0-9a-z]{0,61}[0-9a-z])?)*\.?$/i;
var LP = /^(?:[a-z][a-z0-9+\-.]*:)(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)(?:\?(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i;
var RP = /^(?:[a-z][a-z0-9+\-.]*:)?(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'"()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?(?:\?(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i;
var Fv = /^(?:(?:[^\x00-\x20"'<>%\\^`{|}]|%[0-9a-f]{2})|\{[+#./;?&=,!@|]?(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?(?:,(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?)*\})*$/i;
var Pv = /^(?:(?:http[s\u017F]?|ftp):\/\/)(?:(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+(?::(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*)?@)?(?:(?!10(?:\.[0-9]{1,3}){3})(?!127(?:\.[0-9]{1,3}){3})(?!169\.254(?:\.[0-9]{1,3}){2})(?!192\.168(?:\.[0-9]{1,3}){2})(?!172\.(?:1[6-9]|2[0-9]|3[01])(?:\.[0-9]{1,3}){2})(?:[1-9][0-9]?|1[0-9][0-9]|2[01][0-9]|22[0-3])(?:\.(?:1?[0-9]{1,2}|2[0-4][0-9]|25[0-5])){2}(?:\.(?:[1-9][0-9]?|1[0-9][0-9]|2[0-4][0-9]|25[0-4]))|(?:(?:(?:[0-9a-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+-)*(?:[0-9a-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+)(?:\.(?:(?:[0-9a-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+-)*(?:[0-9a-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+)*(?:\.(?:(?:[a-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]){2,})))(?::[0-9]{2,5})?(?:\/(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*)?$/i;
var Iv = /^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i;
var _v = /^(?:\/(?:[^~/]|~0|~1)*)*$/;
var Bv = /^#(?:\/(?:[a-z0-9_\-.!$&'()*+,;:=@]|%[0-9a-f]{2}|~0|~1)*)*$/i;
var Ov = /^(?:0|[1-9][0-9]*)(?:#|(?:\/(?:[^~/]|~0|~1)*)*)$/;
var NP = Ti;
function Ti(t4) {
  return t4 = t4 == "full" ? "full" : "fast", IP.copy(Ti[t4]);
}
Ti.fast = {
  // date: http://tools.ietf.org/html/rfc3339#section-5.6
  date: /^\d\d\d\d-[0-1]\d-[0-3]\d$/,
  // date-time: http://tools.ietf.org/html/rfc3339#section-5.6
  time: /^(?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d(?::?\d\d)?)?$/i,
  "date-time": /^\d\d\d\d-[0-1]\d-[0-3]\d[t\s](?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d(?::?\d\d)?)$/i,
  // uri: https://github.com/mafintosh/is-my-json-valid/blob/master/formats.js
  uri: /^(?:[a-z][a-z0-9+\-.]*:)(?:\/?\/)?[^\s]*$/i,
  "uri-reference": /^(?:(?:[a-z][a-z0-9+\-.]*:)?\/?\/)?(?:[^\\\s#][^\s#]*)?(?:#[^\\\s]*)?$/i,
  "uri-template": Fv,
  url: Pv,
  // email (sources from jsen validator):
  // http://stackoverflow.com/questions/201323/using-a-regular-expression-to-validate-an-email-address#answer-8829363
  // http://www.w3.org/TR/html5/forms.html#valid-e-mail-address (search for 'willful violation')
  email: /^[a-z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?)*$/i,
  hostname: Tv,
  // optimized https://www.safaribooksonline.com/library/view/regular-expressions-cookbook/9780596802837/ch07s16.html
  ipv4: /^(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/,
  // optimized http://stackoverflow.com/questions/53497/regular-expression-that-matches-valid-ipv6-addresses
  ipv6: /^\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(?:%.+)?\s*$/i,
  regex: Nv,
  // uuid: http://tools.ietf.org/html/rfc4122
  uuid: Iv,
  // JSON-pointer: https://tools.ietf.org/html/rfc6901
  // uri fragment: https://tools.ietf.org/html/rfc3986#appendix-A
  "json-pointer": _v,
  "json-pointer-uri-fragment": Bv,
  // relative JSON-pointer: http://tools.ietf.org/html/draft-luff-relative-json-pointer-00
  "relative-json-pointer": Ov
};
Ti.full = {
  date: Lv,
  time: Rv,
  "date-time": $P,
  uri: UP,
  "uri-reference": RP,
  "uri-template": Fv,
  url: Pv,
  email: /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i,
  hostname: Tv,
  ipv4: /^(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/,
  ipv6: /^\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(?:%.+)?\s*$/i,
  regex: Nv,
  uuid: Iv,
  "json-pointer": _v,
  "json-pointer-uri-fragment": Bv,
  "relative-json-pointer": Ov
};
function jP(t4) {
  return t4 % 4 === 0 && (t4 % 100 !== 0 || t4 % 400 === 0);
}
function Lv(t4) {
  var e = t4.match(_P);
  if (!e)
    return false;
  var r = +e[1], s = +e[2], n = +e[3];
  return s >= 1 && s <= 12 && n >= 1 && n <= (s == 2 && jP(r) ? 29 : BP[s]);
}
function Rv(t4, e) {
  var r = t4.match(OP);
  if (!r)
    return false;
  var s = r[1], n = r[2], a = r[3], o = r[5];
  return (s <= 23 && n <= 59 && a <= 59 || s == 23 && n == 59 && a == 60) && (!e || o);
}
var MP = /t|\s/i;
function $P(t4) {
  var e = t4.split(MP);
  return e.length == 2 && Lv(e[0]) && Rv(e[1], true);
}
var VP = /\/|:/;
function UP(t4) {
  return VP.test(t4) && LP.test(t4);
}
var qP = /[^\\]\\Z/;
function Nv(t4) {
  if (qP.test(t4))
    return false;
  try {
    return new RegExp(t4), true;
  } catch {
    return false;
  }
}
var WP = function(e, r, s) {
  var n = " ", a = e.level, o = e.dataLevel, l = e.schema[r], i = e.errSchemaPath + "/" + r, u = !e.opts.allErrors, c = "data" + (o || ""), f = "valid" + a, h, p;
  if (l == "#" || l == "#/")
    e.isRoot ? (h = e.async, p = "validate") : (h = e.root.schema.$async === true, p = "root.refVal[0]");
  else {
    var m = e.resolveRef(e.baseId, l, e.isRoot);
    if (m === void 0) {
      var d = e.MissingRefError.message(e.baseId, l);
      if (e.opts.missingRefs == "fail") {
        e.logger.error(d);
        var g = g || [];
        g.push(n), n = "", e.createErrors !== false ? (n += " { keyword: '$ref' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(i) + " , params: { ref: '" + e.util.escapeQuotes(l) + "' } ", e.opts.messages !== false && (n += " , message: 'can\\'t resolve reference " + e.util.escapeQuotes(l) + "' "), e.opts.verbose && (n += " , schema: " + e.util.toQuotedString(l) + " , parentSchema: validate.schema" + e.schemaPath + " , data: " + c + " "), n += " } ") : n += " {} ";
        var y = n;
        n = g.pop(), !e.compositeRule && u ? e.async ? n += " throw new ValidationError([" + y + "]); " : n += " validate.errors = [" + y + "]; return false; " : n += " var err = " + y + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", u && (n += " if (false) { ");
      } else if (e.opts.missingRefs == "ignore")
        e.logger.warn(d), u && (n += " if (true) { ");
      else
        throw new e.MissingRefError(e.baseId, l, d);
    } else if (m.inline) {
      var x = e.util.copy(e);
      x.level++;
      var A = "valid" + x.level;
      x.schema = m.schema, x.schemaPath = "", x.errSchemaPath = l;
      var b = e.validate(x).replace(/validate\.schema/g, m.code);
      n += " " + b + " ", u && (n += " if (" + A + ") { ");
    } else
      h = m.$async === true || e.async && m.$async !== false, p = m.code;
  }
  if (p) {
    var g = g || [];
    g.push(n), n = "", e.opts.passContext ? n += " " + p + ".call(this, " : n += " " + p + "( ", n += " " + c + ", (dataPath || '')", e.errorPath != '""' && (n += " + " + e.errorPath);
    var v = o ? "data" + (o - 1 || "") : "parentData", C = o ? e.dataPathArr[o] : "parentDataProperty";
    n += " , " + v + " , " + C + ", rootData)  ";
    var T = n;
    if (n = g.pop(), h) {
      if (!e.async)
        throw new Error("async schema referenced by sync schema");
      u && (n += " var " + f + "; "), n += " try { await " + T + "; ", u && (n += " " + f + " = true; "), n += " } catch (e) { if (!(e instanceof ValidationError)) throw e; if (vErrors === null) vErrors = e.errors; else vErrors = vErrors.concat(e.errors); errors = vErrors.length; ", u && (n += " " + f + " = false; "), n += " } ", u && (n += " if (" + f + ") { ");
    } else
      n += " if (!" + T + ") { if (vErrors === null) vErrors = " + p + ".errors; else vErrors = vErrors.concat(" + p + ".errors); errors = vErrors.length; } ", u && (n += " else { ");
  }
  return n;
};
var zP = function(e, r, s) {
  var n = " ", a = e.schema[r], o = e.schemaPath + e.util.getProperty(r), l = e.errSchemaPath + "/" + r, i = !e.opts.allErrors, u = e.util.copy(e), c = "";
  u.level++;
  var f = "valid" + u.level, h = u.baseId, p = true, m = a;
  if (m)
    for (var d, g = -1, y = m.length - 1; g < y; )
      d = m[g += 1], (e.opts.strictKeywords ? typeof d == "object" && Object.keys(d).length > 0 || d === false : e.util.schemaHasRules(d, e.RULES.all)) && (p = false, u.schema = d, u.schemaPath = o + "[" + g + "]", u.errSchemaPath = l + "/" + g, n += "  " + e.validate(u) + " ", u.baseId = h, i && (n += " if (" + f + ") { ", c += "}"));
  return i && (p ? n += " if (true) { " : n += " " + c.slice(0, -1) + " "), n;
};
var GP = function(e, r, s) {
  var n = " ", a = e.level, o = e.dataLevel, l = e.schema[r], i = e.schemaPath + e.util.getProperty(r), u = e.errSchemaPath + "/" + r, c = !e.opts.allErrors, f = "data" + (o || ""), h = "valid" + a, p = "errs__" + a, m = e.util.copy(e), d = "";
  m.level++;
  var g = "valid" + m.level, y = l.every(function(w) {
    return e.opts.strictKeywords ? typeof w == "object" && Object.keys(w).length > 0 || w === false : e.util.schemaHasRules(w, e.RULES.all);
  });
  if (y) {
    var x = m.baseId;
    n += " var " + p + " = errors; var " + h + " = false;  ";
    var A = e.compositeRule;
    e.compositeRule = m.compositeRule = true;
    var b = l;
    if (b)
      for (var v, C = -1, T = b.length - 1; C < T; )
        v = b[C += 1], m.schema = v, m.schemaPath = i + "[" + C + "]", m.errSchemaPath = u + "/" + C, n += "  " + e.validate(m) + " ", m.baseId = x, n += " " + h + " = " + h + " || " + g + "; if (!" + h + ") { ", d += "}";
    e.compositeRule = m.compositeRule = A, n += " " + d + " if (!" + h + ") {   var err =   ", e.createErrors !== false ? (n += " { keyword: 'anyOf' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(u) + " , params: {} ", e.opts.messages !== false && (n += " , message: 'should match some schema in anyOf' "), e.opts.verbose && (n += " , schema: validate.schema" + i + " , parentSchema: validate.schema" + e.schemaPath + " , data: " + f + " "), n += " } ") : n += " {} ", n += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", !e.compositeRule && c && (e.async ? n += " throw new ValidationError(vErrors); " : n += " validate.errors = vErrors; return false; "), n += " } else {  errors = " + p + "; if (vErrors !== null) { if (" + p + ") vErrors.length = " + p + "; else vErrors = null; } ", e.opts.allErrors && (n += " } ");
  } else
    c && (n += " if (true) { ");
  return n;
};
var HP = function(e, r, s) {
  var n = " ", a = e.schema[r], o = e.errSchemaPath + "/" + r;
  e.opts.allErrors;
  var l = e.util.toQuotedString(a);
  return e.opts.$comment === true ? n += " console.log(" + l + ");" : typeof e.opts.$comment == "function" && (n += " self._opts.$comment(" + l + ", " + e.util.toQuotedString(o) + ", validate.root.schema);"), n;
};
var KP = function(e, r, s) {
  var n = " ", a = e.level, o = e.dataLevel, l = e.schema[r], i = e.schemaPath + e.util.getProperty(r), u = e.errSchemaPath + "/" + r, c = !e.opts.allErrors, f = "data" + (o || ""), h = "valid" + a, p = e.opts.$data && l && l.$data;
  p && (n += " var schema" + a + " = " + e.util.getData(l.$data, o, e.dataPathArr) + "; "), p || (n += " var schema" + a + " = validate.schema" + i + ";"), n += "var " + h + " = equal(" + f + ", schema" + a + "); if (!" + h + ") {   ";
  var m = m || [];
  m.push(n), n = "", e.createErrors !== false ? (n += " { keyword: 'const' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(u) + " , params: { allowedValue: schema" + a + " } ", e.opts.messages !== false && (n += " , message: 'should be equal to constant' "), e.opts.verbose && (n += " , schema: validate.schema" + i + " , parentSchema: validate.schema" + e.schemaPath + " , data: " + f + " "), n += " } ") : n += " {} ";
  var d = n;
  return n = m.pop(), !e.compositeRule && c ? e.async ? n += " throw new ValidationError([" + d + "]); " : n += " validate.errors = [" + d + "]; return false; " : n += " var err = " + d + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", n += " }", c && (n += " else { "), n;
};
var JP = function(e, r, s) {
  var n = " ", a = e.level, o = e.dataLevel, l = e.schema[r], i = e.schemaPath + e.util.getProperty(r), u = e.errSchemaPath + "/" + r, c = !e.opts.allErrors, f = "data" + (o || ""), h = "valid" + a, p = "errs__" + a, m = e.util.copy(e), d = "";
  m.level++;
  var g = "valid" + m.level, y = "i" + a, x = m.dataLevel = e.dataLevel + 1, A = "data" + x, b = e.baseId, v = e.opts.strictKeywords ? typeof l == "object" && Object.keys(l).length > 0 || l === false : e.util.schemaHasRules(l, e.RULES.all);
  if (n += "var " + p + " = errors;var " + h + ";", v) {
    var C = e.compositeRule;
    e.compositeRule = m.compositeRule = true, m.schema = l, m.schemaPath = i, m.errSchemaPath = u, n += " var " + g + " = false; for (var " + y + " = 0; " + y + " < " + f + ".length; " + y + "++) { ", m.errorPath = e.util.getPathExpr(e.errorPath, y, e.opts.jsonPointers, true);
    var T = f + "[" + y + "]";
    m.dataPathArr[x] = y;
    var w = e.validate(m);
    m.baseId = b, e.util.varOccurences(w, A) < 2 ? n += " " + e.util.varReplace(w, A, T) + " " : n += " var " + A + " = " + T + "; " + w + " ", n += " if (" + g + ") break; }  ", e.compositeRule = m.compositeRule = C, n += " " + d + " if (!" + g + ") {";
  } else
    n += " if (" + f + ".length == 0) {";
  var B = B || [];
  B.push(n), n = "", e.createErrors !== false ? (n += " { keyword: 'contains' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(u) + " , params: {} ", e.opts.messages !== false && (n += " , message: 'should contain a valid item' "), e.opts.verbose && (n += " , schema: validate.schema" + i + " , parentSchema: validate.schema" + e.schemaPath + " , data: " + f + " "), n += " } ") : n += " {} ";
  var I = n;
  return n = B.pop(), !e.compositeRule && c ? e.async ? n += " throw new ValidationError([" + I + "]); " : n += " validate.errors = [" + I + "]; return false; " : n += " var err = " + I + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", n += " } else { ", v && (n += "  errors = " + p + "; if (vErrors !== null) { if (" + p + ") vErrors.length = " + p + "; else vErrors = null; } "), e.opts.allErrors && (n += " } "), n;
};
var XP = function(e, r, s) {
  var n = " ", a = e.level, o = e.dataLevel, l = e.schema[r], i = e.schemaPath + e.util.getProperty(r), u = e.errSchemaPath + "/" + r, c = !e.opts.allErrors, f = "data" + (o || ""), h = "errs__" + a, p = e.util.copy(e), m = "";
  p.level++;
  var d = "valid" + p.level, g = {}, y = {}, x = e.opts.ownProperties;
  for (C in l)
    if (C != "__proto__") {
      var A = l[C], b = Array.isArray(A) ? y : g;
      b[C] = A;
    }
  n += "var " + h + " = errors;";
  var v = e.errorPath;
  n += "var missing" + a + ";";
  for (var C in y)
    if (b = y[C], b.length) {
      if (n += " if ( " + f + e.util.getProperty(C) + " !== undefined ", x && (n += " && Object.prototype.hasOwnProperty.call(" + f + ", '" + e.util.escapeQuotes(C) + "') "), c) {
        n += " && ( ";
        var T = b;
        if (T)
          for (var w, B = -1, I = T.length - 1; B < I; ) {
            w = T[B += 1], B && (n += " || ");
            var _ = e.util.getProperty(w), S = f + _;
            n += " ( ( " + S + " === undefined ", x && (n += " || ! Object.prototype.hasOwnProperty.call(" + f + ", '" + e.util.escapeQuotes(w) + "') "), n += ") && (missing" + a + " = " + e.util.toQuotedString(e.opts.jsonPointers ? w : _) + ") ) ";
          }
        n += ")) {  ";
        var F = "missing" + a, N = "' + " + F + " + '";
        e.opts._errorDataPathProperty && (e.errorPath = e.opts.jsonPointers ? e.util.getPathExpr(v, F, true) : v + " + " + F);
        var k = k || [];
        k.push(n), n = "", e.createErrors !== false ? (n += " { keyword: 'dependencies' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(u) + " , params: { property: '" + e.util.escapeQuotes(C) + "', missingProperty: '" + N + "', depsCount: " + b.length + ", deps: '" + e.util.escapeQuotes(b.length == 1 ? b[0] : b.join(", ")) + "' } ", e.opts.messages !== false && (n += " , message: 'should have ", b.length == 1 ? n += "property " + e.util.escapeQuotes(b[0]) : n += "properties " + e.util.escapeQuotes(b.join(", ")), n += " when property " + e.util.escapeQuotes(C) + " is present' "), e.opts.verbose && (n += " , schema: validate.schema" + i + " , parentSchema: validate.schema" + e.schemaPath + " , data: " + f + " "), n += " } ") : n += " {} ";
        var j = n;
        n = k.pop(), !e.compositeRule && c ? e.async ? n += " throw new ValidationError([" + j + "]); " : n += " validate.errors = [" + j + "]; return false; " : n += " var err = " + j + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
      } else {
        n += " ) { ";
        var O = b;
        if (O)
          for (var w, z = -1, te = O.length - 1; z < te; ) {
            w = O[z += 1];
            var _ = e.util.getProperty(w), N = e.util.escapeQuotes(w), S = f + _;
            e.opts._errorDataPathProperty && (e.errorPath = e.util.getPath(v, w, e.opts.jsonPointers)), n += " if ( " + S + " === undefined ", x && (n += " || ! Object.prototype.hasOwnProperty.call(" + f + ", '" + e.util.escapeQuotes(w) + "') "), n += ") {  var err =   ", e.createErrors !== false ? (n += " { keyword: 'dependencies' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(u) + " , params: { property: '" + e.util.escapeQuotes(C) + "', missingProperty: '" + N + "', depsCount: " + b.length + ", deps: '" + e.util.escapeQuotes(b.length == 1 ? b[0] : b.join(", ")) + "' } ", e.opts.messages !== false && (n += " , message: 'should have ", b.length == 1 ? n += "property " + e.util.escapeQuotes(b[0]) : n += "properties " + e.util.escapeQuotes(b.join(", ")), n += " when property " + e.util.escapeQuotes(C) + " is present' "), e.opts.verbose && (n += " , schema: validate.schema" + i + " , parentSchema: validate.schema" + e.schemaPath + " , data: " + f + " "), n += " } ") : n += " {} ", n += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } ";
          }
      }
      n += " }   ", c && (m += "}", n += " else { ");
    }
  e.errorPath = v;
  var se = p.baseId;
  for (var C in g) {
    var A = g[C];
    (e.opts.strictKeywords ? typeof A == "object" && Object.keys(A).length > 0 || A === false : e.util.schemaHasRules(A, e.RULES.all)) && (n += " " + d + " = true; if ( " + f + e.util.getProperty(C) + " !== undefined ", x && (n += " && Object.prototype.hasOwnProperty.call(" + f + ", '" + e.util.escapeQuotes(C) + "') "), n += ") { ", p.schema = A, p.schemaPath = i + e.util.getProperty(C), p.errSchemaPath = u + "/" + e.util.escapeFragment(C), n += "  " + e.validate(p) + " ", p.baseId = se, n += " }  ", c && (n += " if (" + d + ") { ", m += "}"));
  }
  return c && (n += "   " + m + " if (" + h + " == errors) {"), n;
};
var QP = function(e, r, s) {
  var n = " ", a = e.level, o = e.dataLevel, l = e.schema[r], i = e.schemaPath + e.util.getProperty(r), u = e.errSchemaPath + "/" + r, c = !e.opts.allErrors, f = "data" + (o || ""), h = "valid" + a, p = e.opts.$data && l && l.$data;
  p && (n += " var schema" + a + " = " + e.util.getData(l.$data, o, e.dataPathArr) + "; ");
  var m = "i" + a, d = "schema" + a;
  p || (n += " var " + d + " = validate.schema" + i + ";"), n += "var " + h + ";", p && (n += " if (schema" + a + " === undefined) " + h + " = true; else if (!Array.isArray(schema" + a + ")) " + h + " = false; else {"), n += "" + h + " = false;for (var " + m + "=0; " + m + "<" + d + ".length; " + m + "++) if (equal(" + f + ", " + d + "[" + m + "])) { " + h + " = true; break; }", p && (n += "  }  "), n += " if (!" + h + ") {   ";
  var g = g || [];
  g.push(n), n = "", e.createErrors !== false ? (n += " { keyword: 'enum' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(u) + " , params: { allowedValues: schema" + a + " } ", e.opts.messages !== false && (n += " , message: 'should be equal to one of the allowed values' "), e.opts.verbose && (n += " , schema: validate.schema" + i + " , parentSchema: validate.schema" + e.schemaPath + " , data: " + f + " "), n += " } ") : n += " {} ";
  var y = n;
  return n = g.pop(), !e.compositeRule && c ? e.async ? n += " throw new ValidationError([" + y + "]); " : n += " validate.errors = [" + y + "]; return false; " : n += " var err = " + y + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", n += " }", c && (n += " else { "), n;
};
var YP = function(e, r, s) {
  var n = " ", a = e.level, o = e.dataLevel, l = e.schema[r], i = e.schemaPath + e.util.getProperty(r), u = e.errSchemaPath + "/" + r, c = !e.opts.allErrors, f = "data" + (o || "");
  if (e.opts.format === false)
    return c && (n += " if (true) { "), n;
  var h = e.opts.$data && l && l.$data, p;
  h ? (n += " var schema" + a + " = " + e.util.getData(l.$data, o, e.dataPathArr) + "; ", p = "schema" + a) : p = l;
  var m = e.opts.unknownFormats, d = Array.isArray(m);
  if (h) {
    var g = "format" + a, y = "isObject" + a, x = "formatType" + a;
    n += " var " + g + " = formats[" + p + "]; var " + y + " = typeof " + g + " == 'object' && !(" + g + " instanceof RegExp) && " + g + ".validate; var " + x + " = " + y + " && " + g + ".type || 'string'; if (" + y + ") { ", e.async && (n += " var async" + a + " = " + g + ".async; "), n += " " + g + " = " + g + ".validate; } if (  ", h && (n += " (" + p + " !== undefined && typeof " + p + " != 'string') || "), n += " (", m != "ignore" && (n += " (" + p + " && !" + g + " ", d && (n += " && self._opts.unknownFormats.indexOf(" + p + ") == -1 "), n += ") || "), n += " (" + g + " && " + x + " == '" + s + "' && !(typeof " + g + " == 'function' ? ", e.async ? n += " (async" + a + " ? await " + g + "(" + f + ") : " + g + "(" + f + ")) " : n += " " + g + "(" + f + ") ", n += " : " + g + ".test(" + f + "))))) {";
  } else {
    var g = e.formats[l];
    if (!g) {
      if (m == "ignore")
        return e.logger.warn('unknown format "' + l + '" ignored in schema at path "' + e.errSchemaPath + '"'), c && (n += " if (true) { "), n;
      if (d && m.indexOf(l) >= 0)
        return c && (n += " if (true) { "), n;
      throw new Error('unknown format "' + l + '" is used in schema at path "' + e.errSchemaPath + '"');
    }
    var y = typeof g == "object" && !(g instanceof RegExp) && g.validate, x = y && g.type || "string";
    if (y) {
      var A = g.async === true;
      g = g.validate;
    }
    if (x != s)
      return c && (n += " if (true) { "), n;
    if (A) {
      if (!e.async)
        throw new Error("async format in sync schema");
      var b = "formats" + e.util.getProperty(l) + ".validate";
      n += " if (!(await " + b + "(" + f + "))) { ";
    } else {
      n += " if (! ";
      var b = "formats" + e.util.getProperty(l);
      y && (b += ".validate"), typeof g == "function" ? n += " " + b + "(" + f + ") " : n += " " + b + ".test(" + f + ") ", n += ") { ";
    }
  }
  var v = v || [];
  v.push(n), n = "", e.createErrors !== false ? (n += " { keyword: 'format' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(u) + " , params: { format:  ", h ? n += "" + p : n += "" + e.util.toQuotedString(l), n += "  } ", e.opts.messages !== false && (n += ` , message: 'should match format "`, h ? n += "' + " + p + " + '" : n += "" + e.util.escapeQuotes(l), n += `"' `), e.opts.verbose && (n += " , schema:  ", h ? n += "validate.schema" + i : n += "" + e.util.toQuotedString(l), n += "         , parentSchema: validate.schema" + e.schemaPath + " , data: " + f + " "), n += " } ") : n += " {} ";
  var C = n;
  return n = v.pop(), !e.compositeRule && c ? e.async ? n += " throw new ValidationError([" + C + "]); " : n += " validate.errors = [" + C + "]; return false; " : n += " var err = " + C + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", n += " } ", c && (n += " else { "), n;
};
var ZP = function(e, r, s) {
  var n = " ", a = e.level, o = e.dataLevel, l = e.schema[r], i = e.schemaPath + e.util.getProperty(r), u = e.errSchemaPath + "/" + r, c = !e.opts.allErrors, f = "data" + (o || ""), h = "valid" + a, p = "errs__" + a, m = e.util.copy(e);
  m.level++;
  var d = "valid" + m.level, g = e.schema.then, y = e.schema.else, x = g !== void 0 && (e.opts.strictKeywords ? typeof g == "object" && Object.keys(g).length > 0 || g === false : e.util.schemaHasRules(g, e.RULES.all)), A = y !== void 0 && (e.opts.strictKeywords ? typeof y == "object" && Object.keys(y).length > 0 || y === false : e.util.schemaHasRules(y, e.RULES.all)), b = m.baseId;
  if (x || A) {
    var v;
    m.createErrors = false, m.schema = l, m.schemaPath = i, m.errSchemaPath = u, n += " var " + p + " = errors; var " + h + " = true;  ";
    var C = e.compositeRule;
    e.compositeRule = m.compositeRule = true, n += "  " + e.validate(m) + " ", m.baseId = b, m.createErrors = true, n += "  errors = " + p + "; if (vErrors !== null) { if (" + p + ") vErrors.length = " + p + "; else vErrors = null; }  ", e.compositeRule = m.compositeRule = C, x ? (n += " if (" + d + ") {  ", m.schema = e.schema.then, m.schemaPath = e.schemaPath + ".then", m.errSchemaPath = e.errSchemaPath + "/then", n += "  " + e.validate(m) + " ", m.baseId = b, n += " " + h + " = " + d + "; ", x && A ? (v = "ifClause" + a, n += " var " + v + " = 'then'; ") : v = "'then'", n += " } ", A && (n += " else { ")) : n += " if (!" + d + ") { ", A && (m.schema = e.schema.else, m.schemaPath = e.schemaPath + ".else", m.errSchemaPath = e.errSchemaPath + "/else", n += "  " + e.validate(m) + " ", m.baseId = b, n += " " + h + " = " + d + "; ", x && A ? (v = "ifClause" + a, n += " var " + v + " = 'else'; ") : v = "'else'", n += " } "), n += " if (!" + h + ") {   var err =   ", e.createErrors !== false ? (n += " { keyword: 'if' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(u) + " , params: { failingKeyword: " + v + " } ", e.opts.messages !== false && (n += ` , message: 'should match "' + ` + v + ` + '" schema' `), e.opts.verbose && (n += " , schema: validate.schema" + i + " , parentSchema: validate.schema" + e.schemaPath + " , data: " + f + " "), n += " } ") : n += " {} ", n += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", !e.compositeRule && c && (e.async ? n += " throw new ValidationError(vErrors); " : n += " validate.errors = vErrors; return false; "), n += " }   ", c && (n += " else { ");
  } else
    c && (n += " if (true) { ");
  return n;
};
var eI = function(e, r, s) {
  var n = " ", a = e.level, o = e.dataLevel, l = e.schema[r], i = e.schemaPath + e.util.getProperty(r), u = e.errSchemaPath + "/" + r, c = !e.opts.allErrors, f = "data" + (o || ""), h = "valid" + a, p = "errs__" + a, m = e.util.copy(e), d = "";
  m.level++;
  var g = "valid" + m.level, y = "i" + a, x = m.dataLevel = e.dataLevel + 1, A = "data" + x, b = e.baseId;
  if (n += "var " + p + " = errors;var " + h + ";", Array.isArray(l)) {
    var v = e.schema.additionalItems;
    if (v === false) {
      n += " " + h + " = " + f + ".length <= " + l.length + "; ";
      var C = u;
      u = e.errSchemaPath + "/additionalItems", n += "  if (!" + h + ") {   ";
      var T = T || [];
      T.push(n), n = "", e.createErrors !== false ? (n += " { keyword: 'additionalItems' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(u) + " , params: { limit: " + l.length + " } ", e.opts.messages !== false && (n += " , message: 'should NOT have more than " + l.length + " items' "), e.opts.verbose && (n += " , schema: false , parentSchema: validate.schema" + e.schemaPath + " , data: " + f + " "), n += " } ") : n += " {} ";
      var w = n;
      n = T.pop(), !e.compositeRule && c ? e.async ? n += " throw new ValidationError([" + w + "]); " : n += " validate.errors = [" + w + "]; return false; " : n += " var err = " + w + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", n += " } ", u = C, c && (d += "}", n += " else { ");
    }
    var B = l;
    if (B) {
      for (var I, _ = -1, S = B.length - 1; _ < S; )
        if (I = B[_ += 1], e.opts.strictKeywords ? typeof I == "object" && Object.keys(I).length > 0 || I === false : e.util.schemaHasRules(I, e.RULES.all)) {
          n += " " + g + " = true; if (" + f + ".length > " + _ + ") { ";
          var F = f + "[" + _ + "]";
          m.schema = I, m.schemaPath = i + "[" + _ + "]", m.errSchemaPath = u + "/" + _, m.errorPath = e.util.getPathExpr(e.errorPath, _, e.opts.jsonPointers, true), m.dataPathArr[x] = _;
          var N = e.validate(m);
          m.baseId = b, e.util.varOccurences(N, A) < 2 ? n += " " + e.util.varReplace(N, A, F) + " " : n += " var " + A + " = " + F + "; " + N + " ", n += " }  ", c && (n += " if (" + g + ") { ", d += "}");
        }
    }
    if (typeof v == "object" && (e.opts.strictKeywords ? typeof v == "object" && Object.keys(v).length > 0 || v === false : e.util.schemaHasRules(v, e.RULES.all))) {
      m.schema = v, m.schemaPath = e.schemaPath + ".additionalItems", m.errSchemaPath = e.errSchemaPath + "/additionalItems", n += " " + g + " = true; if (" + f + ".length > " + l.length + ") {  for (var " + y + " = " + l.length + "; " + y + " < " + f + ".length; " + y + "++) { ", m.errorPath = e.util.getPathExpr(e.errorPath, y, e.opts.jsonPointers, true);
      var F = f + "[" + y + "]";
      m.dataPathArr[x] = y;
      var N = e.validate(m);
      m.baseId = b, e.util.varOccurences(N, A) < 2 ? n += " " + e.util.varReplace(N, A, F) + " " : n += " var " + A + " = " + F + "; " + N + " ", c && (n += " if (!" + g + ") break; "), n += " } }  ", c && (n += " if (" + g + ") { ", d += "}");
    }
  } else if (e.opts.strictKeywords ? typeof l == "object" && Object.keys(l).length > 0 || l === false : e.util.schemaHasRules(l, e.RULES.all)) {
    m.schema = l, m.schemaPath = i, m.errSchemaPath = u, n += "  for (var " + y + " = 0; " + y + " < " + f + ".length; " + y + "++) { ", m.errorPath = e.util.getPathExpr(e.errorPath, y, e.opts.jsonPointers, true);
    var F = f + "[" + y + "]";
    m.dataPathArr[x] = y;
    var N = e.validate(m);
    m.baseId = b, e.util.varOccurences(N, A) < 2 ? n += " " + e.util.varReplace(N, A, F) + " " : n += " var " + A + " = " + F + "; " + N + " ", c && (n += " if (!" + g + ") break; "), n += " }";
  }
  return c && (n += " " + d + " if (" + p + " == errors) {"), n;
};
var tg = function(e, r, s) {
  var n = " ", a = e.level, o = e.dataLevel, l = e.schema[r], i = e.schemaPath + e.util.getProperty(r), u = e.errSchemaPath + "/" + r, c = !e.opts.allErrors, b, f = "data" + (o || ""), h = e.opts.$data && l && l.$data, p;
  h ? (n += " var schema" + a + " = " + e.util.getData(l.$data, o, e.dataPathArr) + "; ", p = "schema" + a) : p = l;
  var m = r == "maximum", d = m ? "exclusiveMaximum" : "exclusiveMinimum", g = e.schema[d], y = e.opts.$data && g && g.$data, x = m ? "<" : ">", A = m ? ">" : "<", b = void 0;
  if (!(h || typeof l == "number" || l === void 0))
    throw new Error(r + " must be number");
  if (!(y || g === void 0 || typeof g == "number" || typeof g == "boolean"))
    throw new Error(d + " must be number or boolean");
  if (y) {
    var v = e.util.getData(g.$data, o, e.dataPathArr), C = "exclusive" + a, T = "exclType" + a, w = "exclIsNumber" + a, B = "op" + a, I = "' + " + B + " + '";
    n += " var schemaExcl" + a + " = " + v + "; ", v = "schemaExcl" + a, n += " var " + C + "; var " + T + " = typeof " + v + "; if (" + T + " != 'boolean' && " + T + " != 'undefined' && " + T + " != 'number') { ";
    var b = d, _ = _ || [];
    _.push(n), n = "", e.createErrors !== false ? (n += " { keyword: '" + (b || "_exclusiveLimit") + "' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(u) + " , params: {} ", e.opts.messages !== false && (n += " , message: '" + d + " should be boolean' "), e.opts.verbose && (n += " , schema: validate.schema" + i + " , parentSchema: validate.schema" + e.schemaPath + " , data: " + f + " "), n += " } ") : n += " {} ";
    var S = n;
    n = _.pop(), !e.compositeRule && c ? e.async ? n += " throw new ValidationError([" + S + "]); " : n += " validate.errors = [" + S + "]; return false; " : n += " var err = " + S + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", n += " } else if ( ", h && (n += " (" + p + " !== undefined && typeof " + p + " != 'number') || "), n += " " + T + " == 'number' ? ( (" + C + " = " + p + " === undefined || " + v + " " + x + "= " + p + ") ? " + f + " " + A + "= " + v + " : " + f + " " + A + " " + p + " ) : ( (" + C + " = " + v + " === true) ? " + f + " " + A + "= " + p + " : " + f + " " + A + " " + p + " ) || " + f + " !== " + f + ") { var op" + a + " = " + C + " ? '" + x + "' : '" + x + "='; ", l === void 0 && (b = d, u = e.errSchemaPath + "/" + d, p = v, h = y);
  } else {
    var w = typeof g == "number", I = x;
    if (w && h) {
      var B = "'" + I + "'";
      n += " if ( ", h && (n += " (" + p + " !== undefined && typeof " + p + " != 'number') || "), n += " ( " + p + " === undefined || " + g + " " + x + "= " + p + " ? " + f + " " + A + "= " + g + " : " + f + " " + A + " " + p + " ) || " + f + " !== " + f + ") { ";
    } else {
      w && l === void 0 ? (C = true, b = d, u = e.errSchemaPath + "/" + d, p = g, A += "=") : (w && (p = Math[m ? "min" : "max"](g, l)), g === (w ? p : true) ? (C = true, b = d, u = e.errSchemaPath + "/" + d, A += "=") : (C = false, I += "="));
      var B = "'" + I + "'";
      n += " if ( ", h && (n += " (" + p + " !== undefined && typeof " + p + " != 'number') || "), n += " " + f + " " + A + " " + p + " || " + f + " !== " + f + ") { ";
    }
  }
  b = b || r;
  var _ = _ || [];
  _.push(n), n = "", e.createErrors !== false ? (n += " { keyword: '" + (b || "_limit") + "' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(u) + " , params: { comparison: " + B + ", limit: " + p + ", exclusive: " + C + " } ", e.opts.messages !== false && (n += " , message: 'should be " + I + " ", h ? n += "' + " + p : n += "" + p + "'"), e.opts.verbose && (n += " , schema:  ", h ? n += "validate.schema" + i : n += "" + l, n += "         , parentSchema: validate.schema" + e.schemaPath + " , data: " + f + " "), n += " } ") : n += " {} ";
  var S = n;
  return n = _.pop(), !e.compositeRule && c ? e.async ? n += " throw new ValidationError([" + S + "]); " : n += " validate.errors = [" + S + "]; return false; " : n += " var err = " + S + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", n += " } ", c && (n += " else { "), n;
};
var rg = function(e, r, s) {
  var n = " ", a = e.level, o = e.dataLevel, l = e.schema[r], i = e.schemaPath + e.util.getProperty(r), u = e.errSchemaPath + "/" + r, c = !e.opts.allErrors, d, f = "data" + (o || ""), h = e.opts.$data && l && l.$data, p;
  if (h ? (n += " var schema" + a + " = " + e.util.getData(l.$data, o, e.dataPathArr) + "; ", p = "schema" + a) : p = l, !(h || typeof l == "number"))
    throw new Error(r + " must be number");
  var m = r == "maxItems" ? ">" : "<";
  n += "if ( ", h && (n += " (" + p + " !== undefined && typeof " + p + " != 'number') || "), n += " " + f + ".length " + m + " " + p + ") { ";
  var d = r, g = g || [];
  g.push(n), n = "", e.createErrors !== false ? (n += " { keyword: '" + (d || "_limitItems") + "' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(u) + " , params: { limit: " + p + " } ", e.opts.messages !== false && (n += " , message: 'should NOT have ", r == "maxItems" ? n += "more" : n += "fewer", n += " than ", h ? n += "' + " + p + " + '" : n += "" + l, n += " items' "), e.opts.verbose && (n += " , schema:  ", h ? n += "validate.schema" + i : n += "" + l, n += "         , parentSchema: validate.schema" + e.schemaPath + " , data: " + f + " "), n += " } ") : n += " {} ";
  var y = n;
  return n = g.pop(), !e.compositeRule && c ? e.async ? n += " throw new ValidationError([" + y + "]); " : n += " validate.errors = [" + y + "]; return false; " : n += " var err = " + y + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", n += "} ", c && (n += " else { "), n;
};
var ng = function(e, r, s) {
  var n = " ", a = e.level, o = e.dataLevel, l = e.schema[r], i = e.schemaPath + e.util.getProperty(r), u = e.errSchemaPath + "/" + r, c = !e.opts.allErrors, d, f = "data" + (o || ""), h = e.opts.$data && l && l.$data, p;
  if (h ? (n += " var schema" + a + " = " + e.util.getData(l.$data, o, e.dataPathArr) + "; ", p = "schema" + a) : p = l, !(h || typeof l == "number"))
    throw new Error(r + " must be number");
  var m = r == "maxLength" ? ">" : "<";
  n += "if ( ", h && (n += " (" + p + " !== undefined && typeof " + p + " != 'number') || "), e.opts.unicode === false ? n += " " + f + ".length " : n += " ucs2length(" + f + ") ", n += " " + m + " " + p + ") { ";
  var d = r, g = g || [];
  g.push(n), n = "", e.createErrors !== false ? (n += " { keyword: '" + (d || "_limitLength") + "' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(u) + " , params: { limit: " + p + " } ", e.opts.messages !== false && (n += " , message: 'should NOT be ", r == "maxLength" ? n += "longer" : n += "shorter", n += " than ", h ? n += "' + " + p + " + '" : n += "" + l, n += " characters' "), e.opts.verbose && (n += " , schema:  ", h ? n += "validate.schema" + i : n += "" + l, n += "         , parentSchema: validate.schema" + e.schemaPath + " , data: " + f + " "), n += " } ") : n += " {} ";
  var y = n;
  return n = g.pop(), !e.compositeRule && c ? e.async ? n += " throw new ValidationError([" + y + "]); " : n += " validate.errors = [" + y + "]; return false; " : n += " var err = " + y + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", n += "} ", c && (n += " else { "), n;
};
var sg = function(e, r, s) {
  var n = " ", a = e.level, o = e.dataLevel, l = e.schema[r], i = e.schemaPath + e.util.getProperty(r), u = e.errSchemaPath + "/" + r, c = !e.opts.allErrors, d, f = "data" + (o || ""), h = e.opts.$data && l && l.$data, p;
  if (h ? (n += " var schema" + a + " = " + e.util.getData(l.$data, o, e.dataPathArr) + "; ", p = "schema" + a) : p = l, !(h || typeof l == "number"))
    throw new Error(r + " must be number");
  var m = r == "maxProperties" ? ">" : "<";
  n += "if ( ", h && (n += " (" + p + " !== undefined && typeof " + p + " != 'number') || "), n += " Object.keys(" + f + ").length " + m + " " + p + ") { ";
  var d = r, g = g || [];
  g.push(n), n = "", e.createErrors !== false ? (n += " { keyword: '" + (d || "_limitProperties") + "' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(u) + " , params: { limit: " + p + " } ", e.opts.messages !== false && (n += " , message: 'should NOT have ", r == "maxProperties" ? n += "more" : n += "fewer", n += " than ", h ? n += "' + " + p + " + '" : n += "" + l, n += " properties' "), e.opts.verbose && (n += " , schema:  ", h ? n += "validate.schema" + i : n += "" + l, n += "         , parentSchema: validate.schema" + e.schemaPath + " , data: " + f + " "), n += " } ") : n += " {} ";
  var y = n;
  return n = g.pop(), !e.compositeRule && c ? e.async ? n += " throw new ValidationError([" + y + "]); " : n += " validate.errors = [" + y + "]; return false; " : n += " var err = " + y + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", n += "} ", c && (n += " else { "), n;
};
var tI = function(e, r, s) {
  var n = " ", a = e.level, o = e.dataLevel, l = e.schema[r], i = e.schemaPath + e.util.getProperty(r), u = e.errSchemaPath + "/" + r, c = !e.opts.allErrors, f = "data" + (o || ""), h = e.opts.$data && l && l.$data, p;
  if (h ? (n += " var schema" + a + " = " + e.util.getData(l.$data, o, e.dataPathArr) + "; ", p = "schema" + a) : p = l, !(h || typeof l == "number"))
    throw new Error(r + " must be number");
  n += "var division" + a + ";if (", h && (n += " " + p + " !== undefined && ( typeof " + p + " != 'number' || "), n += " (division" + a + " = " + f + " / " + p + ", ", e.opts.multipleOfPrecision ? n += " Math.abs(Math.round(division" + a + ") - division" + a + ") > 1e-" + e.opts.multipleOfPrecision + " " : n += " division" + a + " !== parseInt(division" + a + ") ", n += " ) ", h && (n += "  )  "), n += " ) {   ";
  var m = m || [];
  m.push(n), n = "", e.createErrors !== false ? (n += " { keyword: 'multipleOf' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(u) + " , params: { multipleOf: " + p + " } ", e.opts.messages !== false && (n += " , message: 'should be multiple of ", h ? n += "' + " + p : n += "" + p + "'"), e.opts.verbose && (n += " , schema:  ", h ? n += "validate.schema" + i : n += "" + l, n += "         , parentSchema: validate.schema" + e.schemaPath + " , data: " + f + " "), n += " } ") : n += " {} ";
  var d = n;
  return n = m.pop(), !e.compositeRule && c ? e.async ? n += " throw new ValidationError([" + d + "]); " : n += " validate.errors = [" + d + "]; return false; " : n += " var err = " + d + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", n += "} ", c && (n += " else { "), n;
};
var rI = function(e, r, s) {
  var n = " ", a = e.level, o = e.dataLevel, l = e.schema[r], i = e.schemaPath + e.util.getProperty(r), u = e.errSchemaPath + "/" + r, c = !e.opts.allErrors, f = "data" + (o || ""), h = "errs__" + a, p = e.util.copy(e);
  p.level++;
  var m = "valid" + p.level;
  if (e.opts.strictKeywords ? typeof l == "object" && Object.keys(l).length > 0 || l === false : e.util.schemaHasRules(l, e.RULES.all)) {
    p.schema = l, p.schemaPath = i, p.errSchemaPath = u, n += " var " + h + " = errors;  ";
    var d = e.compositeRule;
    e.compositeRule = p.compositeRule = true, p.createErrors = false;
    var g;
    p.opts.allErrors && (g = p.opts.allErrors, p.opts.allErrors = false), n += " " + e.validate(p) + " ", p.createErrors = true, g && (p.opts.allErrors = g), e.compositeRule = p.compositeRule = d, n += " if (" + m + ") {   ";
    var y = y || [];
    y.push(n), n = "", e.createErrors !== false ? (n += " { keyword: 'not' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(u) + " , params: {} ", e.opts.messages !== false && (n += " , message: 'should NOT be valid' "), e.opts.verbose && (n += " , schema: validate.schema" + i + " , parentSchema: validate.schema" + e.schemaPath + " , data: " + f + " "), n += " } ") : n += " {} ";
    var x = n;
    n = y.pop(), !e.compositeRule && c ? e.async ? n += " throw new ValidationError([" + x + "]); " : n += " validate.errors = [" + x + "]; return false; " : n += " var err = " + x + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", n += " } else {  errors = " + h + "; if (vErrors !== null) { if (" + h + ") vErrors.length = " + h + "; else vErrors = null; } ", e.opts.allErrors && (n += " } ");
  } else
    n += "  var err =   ", e.createErrors !== false ? (n += " { keyword: 'not' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(u) + " , params: {} ", e.opts.messages !== false && (n += " , message: 'should NOT be valid' "), e.opts.verbose && (n += " , schema: validate.schema" + i + " , parentSchema: validate.schema" + e.schemaPath + " , data: " + f + " "), n += " } ") : n += " {} ", n += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", c && (n += " if (false) { ");
  return n;
};
var nI = function(e, r, s) {
  var n = " ", a = e.level, o = e.dataLevel, l = e.schema[r], i = e.schemaPath + e.util.getProperty(r), u = e.errSchemaPath + "/" + r, c = !e.opts.allErrors, f = "data" + (o || ""), h = "valid" + a, p = "errs__" + a, m = e.util.copy(e), d = "";
  m.level++;
  var g = "valid" + m.level, y = m.baseId, x = "prevValid" + a, A = "passingSchemas" + a;
  n += "var " + p + " = errors , " + x + " = false , " + h + " = false , " + A + " = null; ";
  var b = e.compositeRule;
  e.compositeRule = m.compositeRule = true;
  var v = l;
  if (v)
    for (var C, T = -1, w = v.length - 1; T < w; )
      C = v[T += 1], (e.opts.strictKeywords ? typeof C == "object" && Object.keys(C).length > 0 || C === false : e.util.schemaHasRules(C, e.RULES.all)) ? (m.schema = C, m.schemaPath = i + "[" + T + "]", m.errSchemaPath = u + "/" + T, n += "  " + e.validate(m) + " ", m.baseId = y) : n += " var " + g + " = true; ", T && (n += " if (" + g + " && " + x + ") { " + h + " = false; " + A + " = [" + A + ", " + T + "]; } else { ", d += "}"), n += " if (" + g + ") { " + h + " = " + x + " = true; " + A + " = " + T + "; }";
  return e.compositeRule = m.compositeRule = b, n += "" + d + "if (!" + h + ") {   var err =   ", e.createErrors !== false ? (n += " { keyword: 'oneOf' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(u) + " , params: { passingSchemas: " + A + " } ", e.opts.messages !== false && (n += " , message: 'should match exactly one schema in oneOf' "), e.opts.verbose && (n += " , schema: validate.schema" + i + " , parentSchema: validate.schema" + e.schemaPath + " , data: " + f + " "), n += " } ") : n += " {} ", n += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", !e.compositeRule && c && (e.async ? n += " throw new ValidationError(vErrors); " : n += " validate.errors = vErrors; return false; "), n += "} else {  errors = " + p + "; if (vErrors !== null) { if (" + p + ") vErrors.length = " + p + "; else vErrors = null; }", e.opts.allErrors && (n += " } "), n;
};
var sI = function(e, r, s) {
  var n = " ", a = e.level, o = e.dataLevel, l = e.schema[r], i = e.schemaPath + e.util.getProperty(r), u = e.errSchemaPath + "/" + r, c = !e.opts.allErrors, f = "data" + (o || ""), h = e.opts.$data && l && l.$data, p;
  h ? (n += " var schema" + a + " = " + e.util.getData(l.$data, o, e.dataPathArr) + "; ", p = "schema" + a) : p = l;
  var m = h ? "(new RegExp(" + p + "))" : e.usePattern(l);
  n += "if ( ", h && (n += " (" + p + " !== undefined && typeof " + p + " != 'string') || "), n += " !" + m + ".test(" + f + ") ) {   ";
  var d = d || [];
  d.push(n), n = "", e.createErrors !== false ? (n += " { keyword: 'pattern' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(u) + " , params: { pattern:  ", h ? n += "" + p : n += "" + e.util.toQuotedString(l), n += "  } ", e.opts.messages !== false && (n += ` , message: 'should match pattern "`, h ? n += "' + " + p + " + '" : n += "" + e.util.escapeQuotes(l), n += `"' `), e.opts.verbose && (n += " , schema:  ", h ? n += "validate.schema" + i : n += "" + e.util.toQuotedString(l), n += "         , parentSchema: validate.schema" + e.schemaPath + " , data: " + f + " "), n += " } ") : n += " {} ";
  var g = n;
  return n = d.pop(), !e.compositeRule && c ? e.async ? n += " throw new ValidationError([" + g + "]); " : n += " validate.errors = [" + g + "]; return false; " : n += " var err = " + g + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", n += "} ", c && (n += " else { "), n;
};
var aI = function(e, r, s) {
  var n = " ", a = e.level, o = e.dataLevel, l = e.schema[r], i = e.schemaPath + e.util.getProperty(r), u = e.errSchemaPath + "/" + r, c = !e.opts.allErrors, f = "data" + (o || ""), h = "errs__" + a, p = e.util.copy(e), m = "";
  p.level++;
  var d = "valid" + p.level, g = "key" + a, y = "idx" + a, x = p.dataLevel = e.dataLevel + 1, A = "data" + x, b = "dataProperties" + a, v = Object.keys(l || {}).filter(z), C = e.schema.patternProperties || {}, T = Object.keys(C).filter(z), w = e.schema.additionalProperties, B = v.length || T.length, I = w === false, _ = typeof w == "object" && Object.keys(w).length, S = e.opts.removeAdditional, F = I || _ || S, N = e.opts.ownProperties, k = e.baseId, j = e.schema.required;
  if (j && !(e.opts.$data && j.$data) && j.length < e.opts.loopRequired)
    var O = e.util.toHash(j);
  function z(Er) {
    return Er !== "__proto__";
  }
  if (n += "var " + h + " = errors;var " + d + " = true;", N && (n += " var " + b + " = undefined;"), F) {
    if (N ? n += " " + b + " = " + b + " || Object.keys(" + f + "); for (var " + y + "=0; " + y + "<" + b + ".length; " + y + "++) { var " + g + " = " + b + "[" + y + "]; " : n += " for (var " + g + " in " + f + ") { ", B) {
      if (n += " var isAdditional" + a + " = !(false ", v.length)
        if (v.length > 8)
          n += " || validate.schema" + i + ".hasOwnProperty(" + g + ") ";
        else {
          var te = v;
          if (te)
            for (var se, ye = -1, Se = te.length - 1; ye < Se; )
              se = te[ye += 1], n += " || " + g + " == " + e.util.toQuotedString(se) + " ";
        }
      if (T.length) {
        var xe = T;
        if (xe)
          for (var Ae, _e = -1, H = xe.length - 1; _e < H; )
            Ae = xe[_e += 1], n += " || " + e.usePattern(Ae) + ".test(" + g + ") ";
      }
      n += " ); if (isAdditional" + a + ") { ";
    }
    if (S == "all")
      n += " delete " + f + "[" + g + "]; ";
    else {
      var Q = e.errorPath, ge = "' + " + g + " + '";
      if (e.opts._errorDataPathProperty && (e.errorPath = e.util.getPathExpr(e.errorPath, g, e.opts.jsonPointers)), I)
        if (S)
          n += " delete " + f + "[" + g + "]; ";
        else {
          n += " " + d + " = false; ";
          var ae = u;
          u = e.errSchemaPath + "/additionalProperties";
          var ee = ee || [];
          ee.push(n), n = "", e.createErrors !== false ? (n += " { keyword: 'additionalProperties' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(u) + " , params: { additionalProperty: '" + ge + "' } ", e.opts.messages !== false && (n += " , message: '", e.opts._errorDataPathProperty ? n += "is an invalid additional property" : n += "should NOT have additional properties", n += "' "), e.opts.verbose && (n += " , schema: false , parentSchema: validate.schema" + e.schemaPath + " , data: " + f + " "), n += " } ") : n += " {} ";
          var he = n;
          n = ee.pop(), !e.compositeRule && c ? e.async ? n += " throw new ValidationError([" + he + "]); " : n += " validate.errors = [" + he + "]; return false; " : n += " var err = " + he + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", u = ae, c && (n += " break; ");
        }
      else if (_)
        if (S == "failing") {
          n += " var " + h + " = errors;  ";
          var R = e.compositeRule;
          e.compositeRule = p.compositeRule = true, p.schema = w, p.schemaPath = e.schemaPath + ".additionalProperties", p.errSchemaPath = e.errSchemaPath + "/additionalProperties", p.errorPath = e.opts._errorDataPathProperty ? e.errorPath : e.util.getPathExpr(e.errorPath, g, e.opts.jsonPointers);
          var D = f + "[" + g + "]";
          p.dataPathArr[x] = g;
          var U = e.validate(p);
          p.baseId = k, e.util.varOccurences(U, A) < 2 ? n += " " + e.util.varReplace(U, A, D) + " " : n += " var " + A + " = " + D + "; " + U + " ", n += " if (!" + d + ") { errors = " + h + "; if (validate.errors !== null) { if (errors) validate.errors.length = errors; else validate.errors = null; } delete " + f + "[" + g + "]; }  ", e.compositeRule = p.compositeRule = R;
        } else {
          p.schema = w, p.schemaPath = e.schemaPath + ".additionalProperties", p.errSchemaPath = e.errSchemaPath + "/additionalProperties", p.errorPath = e.opts._errorDataPathProperty ? e.errorPath : e.util.getPathExpr(e.errorPath, g, e.opts.jsonPointers);
          var D = f + "[" + g + "]";
          p.dataPathArr[x] = g;
          var U = e.validate(p);
          p.baseId = k, e.util.varOccurences(U, A) < 2 ? n += " " + e.util.varReplace(U, A, D) + " " : n += " var " + A + " = " + D + "; " + U + " ", c && (n += " if (!" + d + ") break; ");
        }
      e.errorPath = Q;
    }
    B && (n += " } "), n += " }  ", c && (n += " if (" + d + ") { ", m += "}");
  }
  var ne = e.opts.useDefaults && !e.compositeRule;
  if (v.length) {
    var pe = v;
    if (pe)
      for (var se, Ee = -1, Re = pe.length - 1; Ee < Re; ) {
        se = pe[Ee += 1];
        var We = l[se];
        if (e.opts.strictKeywords ? typeof We == "object" && Object.keys(We).length > 0 || We === false : e.util.schemaHasRules(We, e.RULES.all)) {
          var wt = e.util.getProperty(se), D = f + wt, Lt = ne && We.default !== void 0;
          p.schema = We, p.schemaPath = i + wt, p.errSchemaPath = u + "/" + e.util.escapeFragment(se), p.errorPath = e.util.getPath(e.errorPath, se, e.opts.jsonPointers), p.dataPathArr[x] = e.util.toQuotedString(se);
          var U = e.validate(p);
          if (p.baseId = k, e.util.varOccurences(U, A) < 2) {
            U = e.util.varReplace(U, A, D);
            var et = D;
          } else {
            var et = A;
            n += " var " + A + " = " + D + "; ";
          }
          if (Lt)
            n += " " + U + " ";
          else {
            if (O && O[se]) {
              n += " if ( " + et + " === undefined ", N && (n += " || ! Object.prototype.hasOwnProperty.call(" + f + ", '" + e.util.escapeQuotes(se) + "') "), n += ") { " + d + " = false; ";
              var Q = e.errorPath, ae = u, Ge = e.util.escapeQuotes(se);
              e.opts._errorDataPathProperty && (e.errorPath = e.util.getPath(Q, se, e.opts.jsonPointers)), u = e.errSchemaPath + "/required";
              var ee = ee || [];
              ee.push(n), n = "", e.createErrors !== false ? (n += " { keyword: 'required' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(u) + " , params: { missingProperty: '" + Ge + "' } ", e.opts.messages !== false && (n += " , message: '", e.opts._errorDataPathProperty ? n += "is a required property" : n += "should have required property \\'" + Ge + "\\'", n += "' "), e.opts.verbose && (n += " , schema: validate.schema" + i + " , parentSchema: validate.schema" + e.schemaPath + " , data: " + f + " "), n += " } ") : n += " {} ";
              var he = n;
              n = ee.pop(), !e.compositeRule && c ? e.async ? n += " throw new ValidationError([" + he + "]); " : n += " validate.errors = [" + he + "]; return false; " : n += " var err = " + he + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", u = ae, e.errorPath = Q, n += " } else { ";
            } else
              c ? (n += " if ( " + et + " === undefined ", N && (n += " || ! Object.prototype.hasOwnProperty.call(" + f + ", '" + e.util.escapeQuotes(se) + "') "), n += ") { " + d + " = true; } else { ") : (n += " if (" + et + " !== undefined ", N && (n += " &&   Object.prototype.hasOwnProperty.call(" + f + ", '" + e.util.escapeQuotes(se) + "') "), n += " ) { ");
            n += " " + U + " } ";
          }
        }
        c && (n += " if (" + d + ") { ", m += "}");
      }
  }
  if (T.length) {
    var mt = T;
    if (mt)
      for (var Ae, tr = -1, vr = mt.length - 1; tr < vr; ) {
        Ae = mt[tr += 1];
        var We = C[Ae];
        if (e.opts.strictKeywords ? typeof We == "object" && Object.keys(We).length > 0 || We === false : e.util.schemaHasRules(We, e.RULES.all)) {
          p.schema = We, p.schemaPath = e.schemaPath + ".patternProperties" + e.util.getProperty(Ae), p.errSchemaPath = e.errSchemaPath + "/patternProperties/" + e.util.escapeFragment(Ae), N ? n += " " + b + " = " + b + " || Object.keys(" + f + "); for (var " + y + "=0; " + y + "<" + b + ".length; " + y + "++) { var " + g + " = " + b + "[" + y + "]; " : n += " for (var " + g + " in " + f + ") { ", n += " if (" + e.usePattern(Ae) + ".test(" + g + ")) { ", p.errorPath = e.util.getPathExpr(e.errorPath, g, e.opts.jsonPointers);
          var D = f + "[" + g + "]";
          p.dataPathArr[x] = g;
          var U = e.validate(p);
          p.baseId = k, e.util.varOccurences(U, A) < 2 ? n += " " + e.util.varReplace(U, A, D) + " " : n += " var " + A + " = " + D + "; " + U + " ", c && (n += " if (!" + d + ") break; "), n += " } ", c && (n += " else " + d + " = true; "), n += " }  ", c && (n += " if (" + d + ") { ", m += "}");
        }
      }
  }
  return c && (n += " " + m + " if (" + h + " == errors) {"), n;
};
var iI = function(e, r, s) {
  var n = " ", a = e.level, o = e.dataLevel, l = e.schema[r], i = e.schemaPath + e.util.getProperty(r), u = e.errSchemaPath + "/" + r, c = !e.opts.allErrors, f = "data" + (o || ""), h = "errs__" + a, p = e.util.copy(e), m = "";
  p.level++;
  var d = "valid" + p.level;
  if (n += "var " + h + " = errors;", e.opts.strictKeywords ? typeof l == "object" && Object.keys(l).length > 0 || l === false : e.util.schemaHasRules(l, e.RULES.all)) {
    p.schema = l, p.schemaPath = i, p.errSchemaPath = u;
    var g = "key" + a, y = "idx" + a, x = "i" + a, A = "' + " + g + " + '", b = p.dataLevel = e.dataLevel + 1, v = "data" + b, C = "dataProperties" + a, T = e.opts.ownProperties, w = e.baseId;
    T && (n += " var " + C + " = undefined; "), T ? n += " " + C + " = " + C + " || Object.keys(" + f + "); for (var " + y + "=0; " + y + "<" + C + ".length; " + y + "++) { var " + g + " = " + C + "[" + y + "]; " : n += " for (var " + g + " in " + f + ") { ", n += " var startErrs" + a + " = errors; ";
    var B = g, I = e.compositeRule;
    e.compositeRule = p.compositeRule = true;
    var _ = e.validate(p);
    p.baseId = w, e.util.varOccurences(_, v) < 2 ? n += " " + e.util.varReplace(_, v, B) + " " : n += " var " + v + " = " + B + "; " + _ + " ", e.compositeRule = p.compositeRule = I, n += " if (!" + d + ") { for (var " + x + "=startErrs" + a + "; " + x + "<errors; " + x + "++) { vErrors[" + x + "].propertyName = " + g + "; }   var err =   ", e.createErrors !== false ? (n += " { keyword: 'propertyNames' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(u) + " , params: { propertyName: '" + A + "' } ", e.opts.messages !== false && (n += " , message: 'property name \\'" + A + "\\' is invalid' "), e.opts.verbose && (n += " , schema: validate.schema" + i + " , parentSchema: validate.schema" + e.schemaPath + " , data: " + f + " "), n += " } ") : n += " {} ", n += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", !e.compositeRule && c && (e.async ? n += " throw new ValidationError(vErrors); " : n += " validate.errors = vErrors; return false; "), c && (n += " break; "), n += " } }";
  }
  return c && (n += " " + m + " if (" + h + " == errors) {"), n;
};
var oI = function(e, r, s) {
  var n = " ", a = e.level, o = e.dataLevel, l = e.schema[r], i = e.schemaPath + e.util.getProperty(r), u = e.errSchemaPath + "/" + r, c = !e.opts.allErrors, f = "data" + (o || ""), h = "valid" + a, p = e.opts.$data && l && l.$data;
  p && (n += " var schema" + a + " = " + e.util.getData(l.$data, o, e.dataPathArr) + "; ");
  var m = "schema" + a;
  if (!p)
    if (l.length < e.opts.loopRequired && e.schema.properties && Object.keys(e.schema.properties).length) {
      var d = [], g = l;
      if (g)
        for (var y, x = -1, A = g.length - 1; x < A; ) {
          y = g[x += 1];
          var b = e.schema.properties[y];
          b && (e.opts.strictKeywords ? typeof b == "object" && Object.keys(b).length > 0 || b === false : e.util.schemaHasRules(b, e.RULES.all)) || (d[d.length] = y);
        }
    } else
      var d = l;
  if (p || d.length) {
    var v = e.errorPath, C = p || d.length >= e.opts.loopRequired, T = e.opts.ownProperties;
    if (c)
      if (n += " var missing" + a + "; ", C) {
        p || (n += " var " + m + " = validate.schema" + i + "; ");
        var w = "i" + a, B = "schema" + a + "[" + w + "]", I = "' + " + B + " + '";
        e.opts._errorDataPathProperty && (e.errorPath = e.util.getPathExpr(v, B, e.opts.jsonPointers)), n += " var " + h + " = true; ", p && (n += " if (schema" + a + " === undefined) " + h + " = true; else if (!Array.isArray(schema" + a + ")) " + h + " = false; else {"), n += " for (var " + w + " = 0; " + w + " < " + m + ".length; " + w + "++) { " + h + " = " + f + "[" + m + "[" + w + "]] !== undefined ", T && (n += " &&   Object.prototype.hasOwnProperty.call(" + f + ", " + m + "[" + w + "]) "), n += "; if (!" + h + ") break; } ", p && (n += "  }  "), n += "  if (!" + h + ") {   ";
        var _ = _ || [];
        _.push(n), n = "", e.createErrors !== false ? (n += " { keyword: 'required' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(u) + " , params: { missingProperty: '" + I + "' } ", e.opts.messages !== false && (n += " , message: '", e.opts._errorDataPathProperty ? n += "is a required property" : n += "should have required property \\'" + I + "\\'", n += "' "), e.opts.verbose && (n += " , schema: validate.schema" + i + " , parentSchema: validate.schema" + e.schemaPath + " , data: " + f + " "), n += " } ") : n += " {} ";
        var S = n;
        n = _.pop(), !e.compositeRule && c ? e.async ? n += " throw new ValidationError([" + S + "]); " : n += " validate.errors = [" + S + "]; return false; " : n += " var err = " + S + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", n += " } else { ";
      } else {
        n += " if ( ";
        var F = d;
        if (F)
          for (var N, w = -1, k = F.length - 1; w < k; ) {
            N = F[w += 1], w && (n += " || ");
            var j = e.util.getProperty(N), O = f + j;
            n += " ( ( " + O + " === undefined ", T && (n += " || ! Object.prototype.hasOwnProperty.call(" + f + ", '" + e.util.escapeQuotes(N) + "') "), n += ") && (missing" + a + " = " + e.util.toQuotedString(e.opts.jsonPointers ? N : j) + ") ) ";
          }
        n += ") {  ";
        var B = "missing" + a, I = "' + " + B + " + '";
        e.opts._errorDataPathProperty && (e.errorPath = e.opts.jsonPointers ? e.util.getPathExpr(v, B, true) : v + " + " + B);
        var _ = _ || [];
        _.push(n), n = "", e.createErrors !== false ? (n += " { keyword: 'required' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(u) + " , params: { missingProperty: '" + I + "' } ", e.opts.messages !== false && (n += " , message: '", e.opts._errorDataPathProperty ? n += "is a required property" : n += "should have required property \\'" + I + "\\'", n += "' "), e.opts.verbose && (n += " , schema: validate.schema" + i + " , parentSchema: validate.schema" + e.schemaPath + " , data: " + f + " "), n += " } ") : n += " {} ";
        var S = n;
        n = _.pop(), !e.compositeRule && c ? e.async ? n += " throw new ValidationError([" + S + "]); " : n += " validate.errors = [" + S + "]; return false; " : n += " var err = " + S + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", n += " } else { ";
      }
    else if (C) {
      p || (n += " var " + m + " = validate.schema" + i + "; ");
      var w = "i" + a, B = "schema" + a + "[" + w + "]", I = "' + " + B + " + '";
      e.opts._errorDataPathProperty && (e.errorPath = e.util.getPathExpr(v, B, e.opts.jsonPointers)), p && (n += " if (" + m + " && !Array.isArray(" + m + ")) {  var err =   ", e.createErrors !== false ? (n += " { keyword: 'required' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(u) + " , params: { missingProperty: '" + I + "' } ", e.opts.messages !== false && (n += " , message: '", e.opts._errorDataPathProperty ? n += "is a required property" : n += "should have required property \\'" + I + "\\'", n += "' "), e.opts.verbose && (n += " , schema: validate.schema" + i + " , parentSchema: validate.schema" + e.schemaPath + " , data: " + f + " "), n += " } ") : n += " {} ", n += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } else if (" + m + " !== undefined) { "), n += " for (var " + w + " = 0; " + w + " < " + m + ".length; " + w + "++) { if (" + f + "[" + m + "[" + w + "]] === undefined ", T && (n += " || ! Object.prototype.hasOwnProperty.call(" + f + ", " + m + "[" + w + "]) "), n += ") {  var err =   ", e.createErrors !== false ? (n += " { keyword: 'required' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(u) + " , params: { missingProperty: '" + I + "' } ", e.opts.messages !== false && (n += " , message: '", e.opts._errorDataPathProperty ? n += "is a required property" : n += "should have required property \\'" + I + "\\'", n += "' "), e.opts.verbose && (n += " , schema: validate.schema" + i + " , parentSchema: validate.schema" + e.schemaPath + " , data: " + f + " "), n += " } ") : n += " {} ", n += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } } ", p && (n += "  }  ");
    } else {
      var z = d;
      if (z)
        for (var N, te = -1, se = z.length - 1; te < se; ) {
          N = z[te += 1];
          var j = e.util.getProperty(N), I = e.util.escapeQuotes(N), O = f + j;
          e.opts._errorDataPathProperty && (e.errorPath = e.util.getPath(v, N, e.opts.jsonPointers)), n += " if ( " + O + " === undefined ", T && (n += " || ! Object.prototype.hasOwnProperty.call(" + f + ", '" + e.util.escapeQuotes(N) + "') "), n += ") {  var err =   ", e.createErrors !== false ? (n += " { keyword: 'required' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(u) + " , params: { missingProperty: '" + I + "' } ", e.opts.messages !== false && (n += " , message: '", e.opts._errorDataPathProperty ? n += "is a required property" : n += "should have required property \\'" + I + "\\'", n += "' "), e.opts.verbose && (n += " , schema: validate.schema" + i + " , parentSchema: validate.schema" + e.schemaPath + " , data: " + f + " "), n += " } ") : n += " {} ", n += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } ";
        }
    }
    e.errorPath = v;
  } else
    c && (n += " if (true) {");
  return n;
};
var lI = function(e, r, s) {
  var n = " ", a = e.level, o = e.dataLevel, l = e.schema[r], i = e.schemaPath + e.util.getProperty(r), u = e.errSchemaPath + "/" + r, c = !e.opts.allErrors, f = "data" + (o || ""), h = "valid" + a, p = e.opts.$data && l && l.$data, m;
  if (p ? (n += " var schema" + a + " = " + e.util.getData(l.$data, o, e.dataPathArr) + "; ", m = "schema" + a) : m = l, (l || p) && e.opts.uniqueItems !== false) {
    p && (n += " var " + h + "; if (" + m + " === false || " + m + " === undefined) " + h + " = true; else if (typeof " + m + " != 'boolean') " + h + " = false; else { "), n += " var i = " + f + ".length , " + h + " = true , j; if (i > 1) { ";
    var d = e.schema.items && e.schema.items.type, g = Array.isArray(d);
    if (!d || d == "object" || d == "array" || g && (d.indexOf("object") >= 0 || d.indexOf("array") >= 0))
      n += " outer: for (;i--;) { for (j = i; j--;) { if (equal(" + f + "[i], " + f + "[j])) { " + h + " = false; break outer; } } } ";
    else {
      n += " var itemIndices = {}, item; for (;i--;) { var item = " + f + "[i]; ";
      var y = "checkDataType" + (g ? "s" : "");
      n += " if (" + e.util[y](d, "item", e.opts.strictNumbers, true) + ") continue; ", g && (n += ` if (typeof item == 'string') item = '"' + item; `), n += " if (typeof itemIndices[item] == 'number') { " + h + " = false; j = itemIndices[item]; break; } itemIndices[item] = i; } ";
    }
    n += " } ", p && (n += "  }  "), n += " if (!" + h + ") {   ";
    var x = x || [];
    x.push(n), n = "", e.createErrors !== false ? (n += " { keyword: 'uniqueItems' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(u) + " , params: { i: i, j: j } ", e.opts.messages !== false && (n += " , message: 'should NOT have duplicate items (items ## ' + j + ' and ' + i + ' are identical)' "), e.opts.verbose && (n += " , schema:  ", p ? n += "validate.schema" + i : n += "" + l, n += "         , parentSchema: validate.schema" + e.schemaPath + " , data: " + f + " "), n += " } ") : n += " {} ";
    var A = n;
    n = x.pop(), !e.compositeRule && c ? e.async ? n += " throw new ValidationError([" + A + "]); " : n += " validate.errors = [" + A + "]; return false; " : n += " var err = " + A + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", n += " } ", c && (n += " else { ");
  } else
    c && (n += " if (true) { ");
  return n;
};
var uI = {
  $ref: WP,
  allOf: zP,
  anyOf: GP,
  $comment: HP,
  const: KP,
  contains: JP,
  dependencies: XP,
  enum: QP,
  format: YP,
  if: ZP,
  items: eI,
  maximum: tg,
  minimum: tg,
  maxItems: rg,
  minItems: rg,
  maxLength: ng,
  minLength: ng,
  maxProperties: sg,
  minProperties: sg,
  multipleOf: tI,
  not: rI,
  oneOf: nI,
  pattern: sI,
  properties: aI,
  propertyNames: iI,
  required: oI,
  uniqueItems: lI,
  validate: Av
};
var ag = uI;
var oo = cs.toHash;
var cI = function() {
  var e = [
    {
      type: "number",
      rules: [
        { maximum: ["exclusiveMaximum"] },
        { minimum: ["exclusiveMinimum"] },
        "multipleOf",
        "format"
      ]
    },
    {
      type: "string",
      rules: ["maxLength", "minLength", "pattern", "format"]
    },
    {
      type: "array",
      rules: ["maxItems", "minItems", "items", "contains", "uniqueItems"]
    },
    {
      type: "object",
      rules: [
        "maxProperties",
        "minProperties",
        "required",
        "dependencies",
        "propertyNames",
        { properties: ["additionalProperties", "patternProperties"] }
      ]
    },
    { rules: ["$ref", "const", "enum", "not", "anyOf", "oneOf", "allOf", "if"] }
  ], r = ["type", "$comment"], s = [
    "$schema",
    "$id",
    "id",
    "$data",
    "$async",
    "title",
    "description",
    "default",
    "definitions",
    "examples",
    "readOnly",
    "writeOnly",
    "contentMediaType",
    "contentEncoding",
    "additionalItems",
    "then",
    "else"
  ], n = ["number", "integer", "string", "array", "object", "boolean", "null"];
  return e.all = oo(r), e.types = oo(n), e.forEach(function(a) {
    a.rules = a.rules.map(function(o) {
      var l;
      if (typeof o == "object") {
        var i = Object.keys(o)[0];
        l = o[i], o = i, l.forEach(function(c) {
          r.push(c), e.all[c] = true;
        });
      }
      r.push(o);
      var u = e.all[o] = {
        keyword: o,
        code: ag[o],
        implements: l
      };
      return u;
    }), e.all.$comment = {
      keyword: "$comment",
      code: ag.$comment
    }, a.type && (e.types[a.type] = a);
  }), e.keywords = oo(r.concat(s)), e.custom = {}, e;
};
var ig = [
  "multipleOf",
  "maximum",
  "exclusiveMaximum",
  "minimum",
  "exclusiveMinimum",
  "maxLength",
  "minLength",
  "pattern",
  "additionalItems",
  "maxItems",
  "minItems",
  "uniqueItems",
  "maxProperties",
  "minProperties",
  "required",
  "additionalProperties",
  "enum",
  "format",
  "const"
];
var pI = function(t4, e) {
  for (var r = 0; r < e.length; r++) {
    t4 = JSON.parse(JSON.stringify(t4));
    var s = e[r].split("/"), n = t4, a;
    for (a = 1; a < s.length; a++)
      n = n[s[a]];
    for (a = 0; a < ig.length; a++) {
      var o = ig[a], l = n[o];
      l && (n[o] = {
        anyOf: [
          l,
          { $ref: "https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#" }
        ]
      });
    }
  }
  return t4;
};
var fI = Tu.MissingRef;
var hI = jv;
function jv(t4, e, r) {
  var s = this;
  if (typeof this._opts.loadSchema != "function")
    throw new Error("options.loadSchema should be a function");
  typeof e == "function" && (r = e, e = void 0);
  var n = a(t4).then(function() {
    var l = s._addSchema(t4, void 0, e);
    return l.validate || o(l);
  });
  return r && n.then(
    function(l) {
      r(null, l);
    },
    r
  ), n;
  function a(l) {
    var i = l.$schema;
    return i && !s.getSchema(i) ? jv.call(s, { $ref: i }, true) : Promise.resolve();
  }
  function o(l) {
    try {
      return s._compile(l);
    } catch (u) {
      if (u instanceof fI)
        return i(u);
      throw u;
    }
    function i(u) {
      var c = u.missingSchema;
      if (p(c))
        throw new Error("Schema " + c + " is loaded but " + u.missingRef + " cannot be resolved");
      var f = s._loadingSchemas[c];
      return f || (f = s._loadingSchemas[c] = s._opts.loadSchema(c), f.then(h, h)), f.then(function(m) {
        if (!p(c))
          return a(m).then(function() {
            p(c) || s.addSchema(m, c, void 0, e);
          });
      }).then(function() {
        return o(l);
      });
      function h() {
        delete s._loadingSchemas[c];
      }
      function p(m) {
        return s._refs[m] || s._schemas[m];
      }
    }
  }
}
var mI = function(e, r, s) {
  var n = " ", a = e.level, o = e.dataLevel, l = e.schema[r], i = e.schemaPath + e.util.getProperty(r), u = e.errSchemaPath + "/" + r, c = !e.opts.allErrors, f, h = "data" + (o || ""), p = "valid" + a, m = "errs__" + a, d = e.opts.$data && l && l.$data, g;
  d ? (n += " var schema" + a + " = " + e.util.getData(l.$data, o, e.dataPathArr) + "; ", g = "schema" + a) : g = l;
  var y = this, x = "definition" + a, A = y.definition, b = "", v, C, T, w, B;
  if (d && A.$data) {
    B = "keywordValidate" + a;
    var I = A.validateSchema;
    n += " var " + x + " = RULES.custom['" + r + "'].definition; var " + B + " = " + x + ".validate;";
  } else {
    if (w = e.useCustomRule(y, l, e.schema, e), !w)
      return;
    g = "validate.schema" + i, B = w.code, v = A.compile, C = A.inline, T = A.macro;
  }
  var _ = B + ".errors", S = "i" + a, F = "ruleErr" + a, N = A.async;
  if (N && !e.async)
    throw new Error("async keyword in sync schema");
  if (C || T || (n += "" + _ + " = null;"), n += "var " + m + " = errors;var " + p + ";", d && A.$data && (b += "}", n += " if (" + g + " === undefined) { " + p + " = true; } else { ", I && (b += "}", n += " " + p + " = " + x + ".validateSchema(" + g + "); if (" + p + ") { ")), C)
    A.statements ? n += " " + w.validate + " " : n += " " + p + " = " + w.validate + "; ";
  else if (T) {
    var k = e.util.copy(e), b = "";
    k.level++;
    var j = "valid" + k.level;
    k.schema = w.validate, k.schemaPath = "";
    var O = e.compositeRule;
    e.compositeRule = k.compositeRule = true;
    var z = e.validate(k).replace(/validate\.schema/g, B);
    e.compositeRule = k.compositeRule = O, n += " " + z;
  } else {
    var te = te || [];
    te.push(n), n = "", n += "  " + B + ".call( ", e.opts.passContext ? n += "this" : n += "self", v || A.schema === false ? n += " , " + h + " " : n += " , " + g + " , " + h + " , validate.schema" + e.schemaPath + " ", n += " , (dataPath || '')", e.errorPath != '""' && (n += " + " + e.errorPath);
    var se = o ? "data" + (o - 1 || "") : "parentData", ye = o ? e.dataPathArr[o] : "parentDataProperty";
    n += " , " + se + " , " + ye + " , rootData )  ";
    var Se = n;
    n = te.pop(), A.errors === false ? (n += " " + p + " = ", N && (n += "await "), n += "" + Se + "; ") : N ? (_ = "customErrors" + a, n += " var " + _ + " = null; try { " + p + " = await " + Se + "; } catch (e) { " + p + " = false; if (e instanceof ValidationError) " + _ + " = e.errors; else throw e; } ") : n += " " + _ + " = null; " + p + " = " + Se + "; ";
  }
  if (A.modifying && (n += " if (" + se + ") " + h + " = " + se + "[" + ye + "];"), n += "" + b, A.valid)
    c && (n += " if (true) { ");
  else {
    n += " if ( ", A.valid === void 0 ? (n += " !", T ? n += "" + j : n += "" + p) : n += " " + !A.valid + " ", n += ") { ", f = y.keyword;
    var te = te || [];
    te.push(n), n = "";
    var te = te || [];
    te.push(n), n = "", e.createErrors !== false ? (n += " { keyword: '" + (f || "custom") + "' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(u) + " , params: { keyword: '" + y.keyword + "' } ", e.opts.messages !== false && (n += ` , message: 'should pass "` + y.keyword + `" keyword validation' `), e.opts.verbose && (n += " , schema: validate.schema" + i + " , parentSchema: validate.schema" + e.schemaPath + " , data: " + h + " "), n += " } ") : n += " {} ";
    var xe = n;
    n = te.pop(), !e.compositeRule && c ? e.async ? n += " throw new ValidationError([" + xe + "]); " : n += " validate.errors = [" + xe + "]; return false; " : n += " var err = " + xe + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
    var Ae = n;
    n = te.pop(), C ? A.errors ? A.errors != "full" && (n += "  for (var " + S + "=" + m + "; " + S + "<errors; " + S + "++) { var " + F + " = vErrors[" + S + "]; if (" + F + ".dataPath === undefined) " + F + ".dataPath = (dataPath || '') + " + e.errorPath + "; if (" + F + ".schemaPath === undefined) { " + F + '.schemaPath = "' + u + '"; } ', e.opts.verbose && (n += " " + F + ".schema = " + g + "; " + F + ".data = " + h + "; "), n += " } ") : A.errors === false ? n += " " + Ae + " " : (n += " if (" + m + " == errors) { " + Ae + " } else {  for (var " + S + "=" + m + "; " + S + "<errors; " + S + "++) { var " + F + " = vErrors[" + S + "]; if (" + F + ".dataPath === undefined) " + F + ".dataPath = (dataPath || '') + " + e.errorPath + "; if (" + F + ".schemaPath === undefined) { " + F + '.schemaPath = "' + u + '"; } ', e.opts.verbose && (n += " " + F + ".schema = " + g + "; " + F + ".data = " + h + "; "), n += " } } ") : T ? (n += "   var err =   ", e.createErrors !== false ? (n += " { keyword: '" + (f || "custom") + "' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(u) + " , params: { keyword: '" + y.keyword + "' } ", e.opts.messages !== false && (n += ` , message: 'should pass "` + y.keyword + `" keyword validation' `), e.opts.verbose && (n += " , schema: validate.schema" + i + " , parentSchema: validate.schema" + e.schemaPath + " , data: " + h + " "), n += " } ") : n += " {} ", n += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", !e.compositeRule && c && (e.async ? n += " throw new ValidationError(vErrors); " : n += " validate.errors = vErrors; return false; ")) : A.errors === false ? n += " " + Ae + " " : (n += " if (Array.isArray(" + _ + ")) { if (vErrors === null) vErrors = " + _ + "; else vErrors = vErrors.concat(" + _ + "); errors = vErrors.length;  for (var " + S + "=" + m + "; " + S + "<errors; " + S + "++) { var " + F + " = vErrors[" + S + "]; if (" + F + ".dataPath === undefined) " + F + ".dataPath = (dataPath || '') + " + e.errorPath + ";  " + F + '.schemaPath = "' + u + '";  ', e.opts.verbose && (n += " " + F + ".schema = " + g + "; " + F + ".data = " + h + "; "), n += " } } else { " + Ae + " } "), n += " } ", c && (n += " else { ");
  }
  return n;
};
var dI = "http://json-schema.org/draft-07/schema#";
var gI = "http://json-schema.org/draft-07/schema#";
var yI = "Core schema meta-schema";
var xI = {
  schemaArray: {
    type: "array",
    minItems: 1,
    items: {
      $ref: "#"
    }
  },
  nonNegativeInteger: {
    type: "integer",
    minimum: 0
  },
  nonNegativeIntegerDefault0: {
    allOf: [
      {
        $ref: "#/definitions/nonNegativeInteger"
      },
      {
        default: 0
      }
    ]
  },
  simpleTypes: {
    enum: [
      "array",
      "boolean",
      "integer",
      "null",
      "number",
      "object",
      "string"
    ]
  },
  stringArray: {
    type: "array",
    items: {
      type: "string"
    },
    uniqueItems: true,
    default: []
  }
};
var vI = [
  "object",
  "boolean"
];
var EI = {
  $id: {
    type: "string",
    format: "uri-reference"
  },
  $schema: {
    type: "string",
    format: "uri"
  },
  $ref: {
    type: "string",
    format: "uri-reference"
  },
  $comment: {
    type: "string"
  },
  title: {
    type: "string"
  },
  description: {
    type: "string"
  },
  default: true,
  readOnly: {
    type: "boolean",
    default: false
  },
  examples: {
    type: "array",
    items: true
  },
  multipleOf: {
    type: "number",
    exclusiveMinimum: 0
  },
  maximum: {
    type: "number"
  },
  exclusiveMaximum: {
    type: "number"
  },
  minimum: {
    type: "number"
  },
  exclusiveMinimum: {
    type: "number"
  },
  maxLength: {
    $ref: "#/definitions/nonNegativeInteger"
  },
  minLength: {
    $ref: "#/definitions/nonNegativeIntegerDefault0"
  },
  pattern: {
    type: "string",
    format: "regex"
  },
  additionalItems: {
    $ref: "#"
  },
  items: {
    anyOf: [
      {
        $ref: "#"
      },
      {
        $ref: "#/definitions/schemaArray"
      }
    ],
    default: true
  },
  maxItems: {
    $ref: "#/definitions/nonNegativeInteger"
  },
  minItems: {
    $ref: "#/definitions/nonNegativeIntegerDefault0"
  },
  uniqueItems: {
    type: "boolean",
    default: false
  },
  contains: {
    $ref: "#"
  },
  maxProperties: {
    $ref: "#/definitions/nonNegativeInteger"
  },
  minProperties: {
    $ref: "#/definitions/nonNegativeIntegerDefault0"
  },
  required: {
    $ref: "#/definitions/stringArray"
  },
  additionalProperties: {
    $ref: "#"
  },
  definitions: {
    type: "object",
    additionalProperties: {
      $ref: "#"
    },
    default: {}
  },
  properties: {
    type: "object",
    additionalProperties: {
      $ref: "#"
    },
    default: {}
  },
  patternProperties: {
    type: "object",
    additionalProperties: {
      $ref: "#"
    },
    propertyNames: {
      format: "regex"
    },
    default: {}
  },
  dependencies: {
    type: "object",
    additionalProperties: {
      anyOf: [
        {
          $ref: "#"
        },
        {
          $ref: "#/definitions/stringArray"
        }
      ]
    }
  },
  propertyNames: {
    $ref: "#"
  },
  const: true,
  enum: {
    type: "array",
    items: true,
    minItems: 1,
    uniqueItems: true
  },
  type: {
    anyOf: [
      {
        $ref: "#/definitions/simpleTypes"
      },
      {
        type: "array",
        items: {
          $ref: "#/definitions/simpleTypes"
        },
        minItems: 1,
        uniqueItems: true
      }
    ]
  },
  format: {
    type: "string"
  },
  contentMediaType: {
    type: "string"
  },
  contentEncoding: {
    type: "string"
  },
  if: {
    $ref: "#"
  },
  then: {
    $ref: "#"
  },
  else: {
    $ref: "#"
  },
  allOf: {
    $ref: "#/definitions/schemaArray"
  },
  anyOf: {
    $ref: "#/definitions/schemaArray"
  },
  oneOf: {
    $ref: "#/definitions/schemaArray"
  },
  not: {
    $ref: "#"
  }
};
var Mv = {
  $schema: dI,
  $id: gI,
  title: yI,
  definitions: xI,
  type: vI,
  properties: EI,
  default: true
};
var og = Mv;
var bI = {
  $id: "https://github.com/ajv-validator/ajv/blob/master/lib/definition_schema.js",
  definitions: {
    simpleTypes: og.definitions.simpleTypes
  },
  type: "object",
  dependencies: {
    schema: ["validate"],
    $data: ["validate"],
    statements: ["inline"],
    valid: { not: { required: ["macro"] } }
  },
  properties: {
    type: og.properties.type,
    schema: { type: "boolean" },
    statements: { type: "boolean" },
    dependencies: {
      type: "array",
      items: { type: "string" }
    },
    metaSchema: { type: "object" },
    modifying: { type: "boolean" },
    valid: { type: "boolean" },
    $data: { type: "boolean" },
    async: { type: "boolean" },
    errors: {
      anyOf: [
        { type: "boolean" },
        { const: "full" }
      ]
    }
  }
};
var CI = /^[a-z_$][a-z0-9_$-]*$/i;
var SI = mI;
var AI = bI;
var DI = {
  add: wI,
  get: kI,
  remove: TI,
  validate: El
};
function wI(t4, e) {
  var r = this.RULES;
  if (r.keywords[t4])
    throw new Error("Keyword " + t4 + " is already defined");
  if (!CI.test(t4))
    throw new Error("Keyword " + t4 + " is not a valid identifier");
  if (e) {
    this.validateKeyword(e, true);
    var s = e.type;
    if (Array.isArray(s))
      for (var n = 0; n < s.length; n++)
        o(t4, s[n], e);
    else
      o(t4, s, e);
    var a = e.metaSchema;
    a && (e.$data && this._opts.$data && (a = {
      anyOf: [
        a,
        { $ref: "https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#" }
      ]
    }), e.validateSchema = this.compile(a, true));
  }
  r.keywords[t4] = r.all[t4] = true;
  function o(l, i, u) {
    for (var c, f = 0; f < r.length; f++) {
      var h = r[f];
      if (h.type == i) {
        c = h;
        break;
      }
    }
    c || (c = { type: i, rules: [] }, r.push(c));
    var p = {
      keyword: l,
      definition: u,
      custom: true,
      code: SI,
      implements: u.implements
    };
    c.rules.push(p), r.custom[l] = p;
  }
  return this;
}
function kI(t4) {
  var e = this.RULES.custom[t4];
  return e ? e.definition : this.RULES.keywords[t4] || false;
}
function TI(t4) {
  var e = this.RULES;
  delete e.keywords[t4], delete e.all[t4], delete e.custom[t4];
  for (var r = 0; r < e.length; r++)
    for (var s = e[r].rules, n = 0; n < s.length; n++)
      if (s[n].keyword == t4) {
        s.splice(n, 1);
        break;
      }
  return this;
}
function El(t4, e) {
  El.errors = null;
  var r = this._validateKeyword = this._validateKeyword || this.compile(AI, true);
  if (r(t4))
    return true;
  if (El.errors = r.errors, e)
    throw new Error("custom keyword definition is invalid: " + this.errorsText(r.errors));
  return false;
}
var FI = "http://json-schema.org/draft-07/schema#";
var PI = "https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#";
var II = "Meta-schema for $data reference (JSON Schema extension proposal)";
var _I = "object";
var BI = [
  "$data"
];
var OI = {
  $data: {
    type: "string",
    anyOf: [
      {
        format: "relative-json-pointer"
      },
      {
        format: "json-pointer"
      }
    ]
  }
};
var LI = false;
var RI = {
  $schema: FI,
  $id: PI,
  description: II,
  type: _I,
  required: BI,
  properties: OI,
  additionalProperties: LI
};
var $v = AP;
var wn = ku;
var NI = kv.exports;
var Vv = vv;
var jI = Sv;
var MI = NP;
var $I = cI;
var Uv = pI;
var qv = cs;
var VI = yt;
yt.prototype.validate = qI;
yt.prototype.compile = WI;
yt.prototype.addSchema = zI;
yt.prototype.addMetaSchema = GI;
yt.prototype.validateSchema = HI;
yt.prototype.getSchema = JI;
yt.prototype.removeSchema = QI;
yt.prototype.addFormat = a_;
yt.prototype.errorsText = s_;
yt.prototype._addSchema = YI;
yt.prototype._compile = ZI;
yt.prototype.compileAsync = hI;
var Fi = DI;
yt.prototype.addKeyword = Fi.add;
yt.prototype.getKeyword = Fi.get;
yt.prototype.removeKeyword = Fi.remove;
yt.prototype.validateKeyword = Fi.validate;
var Wv = Tu;
yt.ValidationError = Wv.Validation;
yt.MissingRefError = Wv.MissingRef;
yt.$dataMetaSchema = Uv;
var Qa = "http://json-schema.org/draft-07/schema";
var lg = ["removeAdditional", "useDefaults", "coerceTypes", "strictDefaults"];
var UI = ["/properties"];
function yt(t4) {
  if (!(this instanceof yt))
    return new yt(t4);
  t4 = this._opts = qv.copy(t4) || {}, p_(this), this._schemas = {}, this._refs = {}, this._fragments = {}, this._formats = MI(t4.format), this._cache = t4.cache || new NI(), this._loadingSchemas = {}, this._compilations = [], this.RULES = $I(), this._getId = e_(t4), t4.loopRequired = t4.loopRequired || 1 / 0, t4.errorDataPath == "property" && (t4._errorDataPathProperty = true), t4.serialize === void 0 && (t4.serialize = jI), this._metaOpts = c_(this), t4.formats && l_(this), t4.keywords && u_(this), i_(this), typeof t4.meta == "object" && this.addMetaSchema(t4.meta), t4.nullable && this.addKeyword("nullable", { metaSchema: { type: "boolean" } }), o_(this);
}
function qI(t4, e) {
  var r;
  if (typeof t4 == "string") {
    if (r = this.getSchema(t4), !r)
      throw new Error('no schema with key or ref "' + t4 + '"');
  } else {
    var s = this._addSchema(t4);
    r = s.validate || this._compile(s);
  }
  var n = r(e);
  return r.$async !== true && (this.errors = r.errors), n;
}
function WI(t4, e) {
  var r = this._addSchema(t4, void 0, e);
  return r.validate || this._compile(r);
}
function zI(t4, e, r, s) {
  if (Array.isArray(t4)) {
    for (var n = 0; n < t4.length; n++)
      this.addSchema(t4[n], void 0, r, s);
    return this;
  }
  var a = this._getId(t4);
  if (a !== void 0 && typeof a != "string")
    throw new Error("schema id must be string");
  return e = wn.normalizeId(e || a), Gv(this, e), this._schemas[e] = this._addSchema(t4, r, s, true), this;
}
function GI(t4, e, r) {
  return this.addSchema(t4, e, r, true), this;
}
function HI(t4, e) {
  var r = t4.$schema;
  if (r !== void 0 && typeof r != "string")
    throw new Error("$schema must be a string");
  if (r = r || this._opts.defaultMeta || KI(this), !r)
    return this.logger.warn("meta-schema not available"), this.errors = null, true;
  var s = this.validate(r, t4);
  if (!s && e) {
    var n = "schema is invalid: " + this.errorsText();
    if (this._opts.validateSchema == "log")
      this.logger.error(n);
    else
      throw new Error(n);
  }
  return s;
}
function KI(t4) {
  var e = t4._opts.meta;
  return t4._opts.defaultMeta = typeof e == "object" ? t4._getId(e) || e : t4.getSchema(Qa) ? Qa : void 0, t4._opts.defaultMeta;
}
function JI(t4) {
  var e = zv(this, t4);
  switch (typeof e) {
    case "object":
      return e.validate || this._compile(e);
    case "string":
      return this.getSchema(e);
    case "undefined":
      return XI(this, t4);
  }
}
function XI(t4, e) {
  var r = wn.schema.call(t4, { schema: {} }, e);
  if (r) {
    var s = r.schema, n = r.root, a = r.baseId, o = $v.call(t4, s, n, void 0, a);
    return t4._fragments[e] = new Vv({
      ref: e,
      fragment: true,
      schema: s,
      root: n,
      baseId: a,
      validate: o
    }), o;
  }
}
function zv(t4, e) {
  return e = wn.normalizeId(e), t4._schemas[e] || t4._refs[e] || t4._fragments[e];
}
function QI(t4) {
  if (t4 instanceof RegExp)
    return ca(this, this._schemas, t4), ca(this, this._refs, t4), this;
  switch (typeof t4) {
    case "undefined":
      return ca(this, this._schemas), ca(this, this._refs), this._cache.clear(), this;
    case "string":
      var e = zv(this, t4);
      return e && this._cache.del(e.cacheKey), delete this._schemas[t4], delete this._refs[t4], this;
    case "object":
      var r = this._opts.serialize, s = r ? r(t4) : t4;
      this._cache.del(s);
      var n = this._getId(t4);
      n && (n = wn.normalizeId(n), delete this._schemas[n], delete this._refs[n]);
  }
  return this;
}
function ca(t4, e, r) {
  for (var s in e) {
    var n = e[s];
    !n.meta && (!r || r.test(s)) && (t4._cache.del(n.cacheKey), delete e[s]);
  }
}
function YI(t4, e, r, s) {
  if (typeof t4 != "object" && typeof t4 != "boolean")
    throw new Error("schema should be object or boolean");
  var n = this._opts.serialize, a = n ? n(t4) : t4, o = this._cache.get(a);
  if (o)
    return o;
  s = s || this._opts.addUsedSchema !== false;
  var l = wn.normalizeId(this._getId(t4));
  l && s && Gv(this, l);
  var i = this._opts.validateSchema !== false && !e, u;
  i && !(u = l && l == wn.normalizeId(t4.$schema)) && this.validateSchema(t4, true);
  var c = wn.ids.call(this, t4), f = new Vv({
    id: l,
    schema: t4,
    localRefs: c,
    cacheKey: a,
    meta: r
  });
  return l[0] != "#" && s && (this._refs[l] = f), this._cache.put(a, f), i && u && this.validateSchema(t4, true), f;
}
function ZI(t4, e) {
  if (t4.compiling)
    return t4.validate = n, n.schema = t4.schema, n.errors = null, n.root = e || n, t4.schema.$async === true && (n.$async = true), n;
  t4.compiling = true;
  var r;
  t4.meta && (r = this._opts, this._opts = this._metaOpts);
  var s;
  try {
    s = $v.call(this, t4.schema, e, t4.localRefs);
  } catch (a) {
    throw delete t4.validate, a;
  } finally {
    t4.compiling = false, t4.meta && (this._opts = r);
  }
  return t4.validate = s, t4.refs = s.refs, t4.refVal = s.refVal, t4.root = s.root, s;
  function n() {
    var a = t4.validate, o = a.apply(this, arguments);
    return n.errors = a.errors, o;
  }
}
function e_(t4) {
  switch (t4.schemaId) {
    case "auto":
      return n_;
    case "id":
      return t_;
    default:
      return r_;
  }
}
function t_(t4) {
  return t4.$id && this.logger.warn("schema $id ignored", t4.$id), t4.id;
}
function r_(t4) {
  return t4.id && this.logger.warn("schema id ignored", t4.id), t4.$id;
}
function n_(t4) {
  if (t4.$id && t4.id && t4.$id != t4.id)
    throw new Error("schema $id is different from id");
  return t4.$id || t4.id;
}
function s_(t4, e) {
  if (t4 = t4 || this.errors, !t4)
    return "No errors";
  e = e || {};
  for (var r = e.separator === void 0 ? ", " : e.separator, s = e.dataVar === void 0 ? "data" : e.dataVar, n = "", a = 0; a < t4.length; a++) {
    var o = t4[a];
    o && (n += s + o.dataPath + " " + o.message + r);
  }
  return n.slice(0, -r.length);
}
function a_(t4, e) {
  return typeof e == "string" && (e = new RegExp(e)), this._formats[t4] = e, this;
}
function i_(t4) {
  var e;
  if (t4._opts.$data && (e = RI, t4.addMetaSchema(e, e.$id, true)), t4._opts.meta !== false) {
    var r = Mv;
    t4._opts.$data && (r = Uv(r, UI)), t4.addMetaSchema(r, Qa, true), t4._refs["http://json-schema.org/schema"] = Qa;
  }
}
function o_(t4) {
  var e = t4._opts.schemas;
  if (e)
    if (Array.isArray(e))
      t4.addSchema(e);
    else
      for (var r in e)
        t4.addSchema(e[r], r);
}
function l_(t4) {
  for (var e in t4._opts.formats) {
    var r = t4._opts.formats[e];
    t4.addFormat(e, r);
  }
}
function u_(t4) {
  for (var e in t4._opts.keywords) {
    var r = t4._opts.keywords[e];
    t4.addKeyword(e, r);
  }
}
function Gv(t4, e) {
  if (t4._schemas[e] || t4._refs[e])
    throw new Error('schema with key or id "' + e + '" already exists');
}
function c_(t4) {
  for (var e = qv.copy(t4._opts), r = 0; r < lg.length; r++)
    delete e[lg[r]];
  return e;
}
function p_(t4) {
  var e = t4._opts.logger;
  if (e === false)
    t4.logger = { log: lo, warn: lo, error: lo };
  else {
    if (e === void 0 && (e = console), !(typeof e == "object" && e.log && e.warn && e.error))
      throw new Error("logger must implement log, warn and error methods");
    t4.logger = e;
  }
}
function lo() {
}
var f_ = "http://json-schema.org/draft-04/schema#";
var h_ = "http://json-schema.org/draft-04/schema#";
var m_ = "Core schema meta-schema";
var d_ = {
  schemaArray: {
    type: "array",
    minItems: 1,
    items: {
      $ref: "#"
    }
  },
  positiveInteger: {
    type: "integer",
    minimum: 0
  },
  positiveIntegerDefault0: {
    allOf: [
      {
        $ref: "#/definitions/positiveInteger"
      },
      {
        default: 0
      }
    ]
  },
  simpleTypes: {
    enum: [
      "array",
      "boolean",
      "integer",
      "null",
      "number",
      "object",
      "string"
    ]
  },
  stringArray: {
    type: "array",
    items: {
      type: "string"
    },
    minItems: 1,
    uniqueItems: true
  }
};
var g_ = "object";
var y_ = {
  id: {
    type: "string"
  },
  $schema: {
    type: "string"
  },
  title: {
    type: "string"
  },
  description: {
    type: "string"
  },
  default: {},
  multipleOf: {
    type: "number",
    minimum: 0,
    exclusiveMinimum: true
  },
  maximum: {
    type: "number"
  },
  exclusiveMaximum: {
    type: "boolean",
    default: false
  },
  minimum: {
    type: "number"
  },
  exclusiveMinimum: {
    type: "boolean",
    default: false
  },
  maxLength: {
    $ref: "#/definitions/positiveInteger"
  },
  minLength: {
    $ref: "#/definitions/positiveIntegerDefault0"
  },
  pattern: {
    type: "string",
    format: "regex"
  },
  additionalItems: {
    anyOf: [
      {
        type: "boolean"
      },
      {
        $ref: "#"
      }
    ],
    default: {}
  },
  items: {
    anyOf: [
      {
        $ref: "#"
      },
      {
        $ref: "#/definitions/schemaArray"
      }
    ],
    default: {}
  },
  maxItems: {
    $ref: "#/definitions/positiveInteger"
  },
  minItems: {
    $ref: "#/definitions/positiveIntegerDefault0"
  },
  uniqueItems: {
    type: "boolean",
    default: false
  },
  maxProperties: {
    $ref: "#/definitions/positiveInteger"
  },
  minProperties: {
    $ref: "#/definitions/positiveIntegerDefault0"
  },
  required: {
    $ref: "#/definitions/stringArray"
  },
  additionalProperties: {
    anyOf: [
      {
        type: "boolean"
      },
      {
        $ref: "#"
      }
    ],
    default: {}
  },
  definitions: {
    type: "object",
    additionalProperties: {
      $ref: "#"
    },
    default: {}
  },
  properties: {
    type: "object",
    additionalProperties: {
      $ref: "#"
    },
    default: {}
  },
  patternProperties: {
    type: "object",
    additionalProperties: {
      $ref: "#"
    },
    default: {}
  },
  dependencies: {
    type: "object",
    additionalProperties: {
      anyOf: [
        {
          $ref: "#"
        },
        {
          $ref: "#/definitions/stringArray"
        }
      ]
    }
  },
  enum: {
    type: "array",
    minItems: 1,
    uniqueItems: true
  },
  type: {
    anyOf: [
      {
        $ref: "#/definitions/simpleTypes"
      },
      {
        type: "array",
        items: {
          $ref: "#/definitions/simpleTypes"
        },
        minItems: 1,
        uniqueItems: true
      }
    ]
  },
  format: {
    type: "string"
  },
  allOf: {
    $ref: "#/definitions/schemaArray"
  },
  anyOf: {
    $ref: "#/definitions/schemaArray"
  },
  oneOf: {
    $ref: "#/definitions/schemaArray"
  },
  not: {
    $ref: "#"
  }
};
var x_ = {
  exclusiveMaximum: [
    "maximum"
  ],
  exclusiveMinimum: [
    "minimum"
  ]
};
var v_ = {
  id: f_,
  $schema: h_,
  description: m_,
  definitions: d_,
  type: g_,
  properties: y_,
  dependencies: x_,
  default: {}
};
var E_ = VI;
var ug = v_;
var b_ = (t4 = {}) => {
  const e = new E_({
    meta: false,
    useDefaults: true,
    validateSchema: false,
    missingRefs: "ignore",
    verbose: true,
    schemaId: "auto",
    ...t4
  });
  return e.addMetaSchema(ug), e._opts.defaultMeta = ug.id, e;
};
var C_ = Zx;
var S_ = VF;
var A_ = Kx;
var D_ = Eu.exports;
var { emitDeprecationWarning: w_ } = zF;
var cg = b_();
var uo = /* @__PURE__ */ new WeakMap();
var pg = Function.prototype;
var pa;
var k_ = {
  error: 2,
  warn: 1,
  off: 0
};
var fg = /* @__PURE__ */ new WeakSet();
var T_ = class {
  constructor({ builtInRules: e = /* @__PURE__ */ new Map() } = {}) {
    this.builtInRules = e;
  }
  /**
   * Gets a complete options schema for a rule.
   * @param {{create: Function, schema: (Array|null)}} rule A new-style rule object
   * @returns {Object} JSON Schema for the rule's options.
   */
  getRuleOptionsSchema(e) {
    if (!e)
      return null;
    const r = e.schema || e.meta && e.meta.schema;
    return Array.isArray(r) ? r.length ? {
      type: "array",
      items: r,
      minItems: 0,
      maxItems: r.length
    } : {
      type: "array",
      minItems: 0,
      maxItems: 0
    } : r || null;
  }
  /**
   * Validates a rule's severity and returns the severity value. Throws an error if the severity is invalid.
   * @param {options} options The given options for the rule.
   * @returns {number|string} The rule's severity value
   */
  validateRuleSeverity(e) {
    const r = Array.isArray(e) ? e[0] : e, s = typeof r == "string" ? k_[r.toLowerCase()] : r;
    if (s === 0 || s === 1 || s === 2)
      return s;
    throw new Error(`	Severity should be one of the following: 0 = off, 1 = warn, 2 = error (you passed '${C_.inspect(r).replace(/'/gu, '"').replace(/\n/gu, "")}').
`);
  }
  /**
   * Validates the non-severity options passed to a rule, based on its schema.
   * @param {{create: Function}} rule The rule to validate
   * @param {Array} localOptions The options for the rule, excluding severity
   * @returns {void}
   */
  validateRuleSchema(e, r) {
    if (!uo.has(e)) {
      const n = this.getRuleOptionsSchema(e);
      n && uo.set(e, cg.compile(n));
    }
    const s = uo.get(e);
    if (s && (s(r), s.errors))
      throw new Error(s.errors.map(
        (n) => `	Value ${JSON.stringify(n.data)} ${n.message}.
`
      ).join(""));
  }
  /**
   * Validates a rule's options against its schema.
   * @param {{create: Function}|null} rule The rule that the config is being validated for
   * @param {string} ruleId The rule's unique name.
   * @param {Array|number} options The given options for the rule.
   * @param {string|null} source The name of the configuration source to report in any errors. If null or undefined,
   * no source is prepended to the message.
   * @returns {void}
   */
  validateRuleOptions(e, r, s, n = null) {
    try {
      this.validateRuleSeverity(s) !== 0 && this.validateRuleSchema(e, Array.isArray(s) ? s.slice(1) : []);
    } catch (a) {
      const o = `Configuration for rule "${r}" is invalid:
${a.message}`;
      throw typeof n == "string" ? new Error(`${n}:
	${o}`) : new Error(o);
    }
  }
  /**
   * Validates an environment object
   * @param {Object} environment The environment config object to validate.
   * @param {string} source The name of the configuration source to report in any errors.
   * @param {function(envId:string): Object} [getAdditionalEnv] A map from strings to loaded environments.
   * @returns {void}
   */
  validateEnvironment(e, r, s = pg) {
    e && Object.keys(e).forEach((n) => {
      if (!(s(n) || A_.get(n) || null)) {
        const o = `${r}:
	Environment key "${n}" is unknown
`;
        throw new Error(o);
      }
    });
  }
  /**
   * Validates a rules config object
   * @param {Object} rulesConfig The rules config object to validate.
   * @param {string} source The name of the configuration source to report in any errors.
   * @param {function(ruleId:string): Object} getAdditionalRule A map from strings to loaded rules
   * @returns {void}
   */
  validateRules(e, r, s = pg) {
    e && Object.keys(e).forEach((n) => {
      const a = s(n) || this.builtInRules.get(n) || null;
      this.validateRuleOptions(a, n, e[n], r);
    });
  }
  /**
   * Validates a `globals` section of a config file
   * @param {Object} globalsConfig The `globals` section
   * @param {string|null} source The name of the configuration source to report in the event of an error.
   * @returns {void}
   */
  validateGlobals(e, r = null) {
    e && Object.entries(e).forEach(([s, n]) => {
      try {
        D_.normalizeConfigGlobal(n);
      } catch (a) {
        throw new Error(`ESLint configuration of global '${s}' in ${r} is invalid:
${a.message}`);
      }
    });
  }
  /**
   * Validate `processor` configuration.
   * @param {string|undefined} processorName The processor name.
   * @param {string} source The name of config file.
   * @param {function(id:string): Processor} getProcessor The getter of defined processors.
   * @returns {void}
   */
  validateProcessor(e, r, s) {
    if (e && !s(e))
      throw new Error(`ESLint configuration of processor in '${r}' is invalid: '${e}' was not found.`);
  }
  /**
   * Formats an array of schema validation errors.
   * @param {Array} errors An array of error messages to format.
   * @returns {string} Formatted error message
   */
  formatErrors(e) {
    return e.map((r) => {
      if (r.keyword === "additionalProperties")
        return `Unexpected top-level property "${r.dataPath.length ? `${r.dataPath.slice(1)}.${r.params.additionalProperty}` : r.params.additionalProperty}"`;
      if (r.keyword === "type") {
        const n = r.dataPath.slice(1), a = Array.isArray(r.schema) ? r.schema.join("/") : r.schema, o = JSON.stringify(r.data);
        return `Property "${n}" is the wrong type (expected ${a} but got \`${o}\`)`;
      }
      return `"${r.dataPath[0] === "." ? r.dataPath.slice(1) : r.dataPath}" ${r.message}. Value: ${JSON.stringify(r.data)}`;
    }).map((r) => `	- ${r}.
`).join("");
  }
  /**
   * Validates the top level properties of the config object.
   * @param {Object} config The config object to validate.
   * @param {string} source The name of the configuration source to report in any errors.
   * @returns {void}
   */
  validateConfigSchema(e, r = null) {
    if (pa = pa || cg.compile(S_), !pa(e))
      throw new Error(`ESLint configuration in ${r} is invalid:
${this.formatErrors(pa.errors)}`);
    Object.hasOwnProperty.call(e, "ecmaFeatures") && w_(r, "ESLINT_LEGACY_ECMAFEATURES");
  }
  /**
   * Validates an entire config object.
   * @param {Object} config The config object to validate.
   * @param {string} source The name of the configuration source to report in any errors.
   * @param {function(ruleId:string): Object} [getAdditionalRule] A map from strings to loaded rules.
   * @param {function(envId:string): Object} [getAdditionalEnv] A map from strings to loaded envs.
   * @returns {void}
   */
  validate(e, r, s, n) {
    this.validateConfigSchema(e, r), this.validateRules(e.rules, r, s), this.validateEnvironment(e.env, r, n), this.validateGlobals(e.globals, r);
    for (const a of e.overrides || [])
      this.validateRules(a.rules, r, s), this.validateEnvironment(a.env, r, n), this.validateGlobals(e.globals, r);
  }
  /**
   * Validate config array object.
   * @param {ConfigArray} configArray The config array to validate.
   * @returns {void}
   */
  validateConfigArray(e) {
    const r = Map.prototype.get.bind(e.pluginEnvironments), s = Map.prototype.get.bind(e.pluginProcessors), n = Map.prototype.get.bind(e.pluginRules);
    for (const a of e)
      fg.has(a) || (fg.add(a), this.validateEnvironment(a.env, a.name, r), this.validateGlobals(a.globals, a.name), this.validateProcessor(a.processor, a.name, s), this.validateRules(a.rules, a.name, n));
  }
};
function Pu(t4, e) {
  const r = e.range[0];
  let s = t4, n = false;
  do {
    n = false;
    for (const a of s.childScopes) {
      const o = a.block.range;
      if (o[0] <= r && r < o[1]) {
        s = a, n = true;
        break;
      }
    }
  } while (n);
  return s;
}
function Yn(t4, e) {
  let r = "", s = t4;
  for (typeof e == "string" ? r = e : (r = e.name, s = Pu(s, e)); s != null; ) {
    const n = s.set.get(r);
    if (n != null)
      return n;
    s = s.upper;
  }
  return null;
}
function F_(t4) {
  return !this(t4);
}
function xr(t4) {
  return F_.bind(t4);
}
function Pi(t4) {
  return t4.value === "=>" && t4.type === "Punctuator";
}
function Iu(t4) {
  return t4.value === "," && t4.type === "Punctuator";
}
function _u(t4) {
  return t4.value === ";" && t4.type === "Punctuator";
}
function Bu(t4) {
  return t4.value === ":" && t4.type === "Punctuator";
}
function an(t4) {
  return t4.value === "(" && t4.type === "Punctuator";
}
function Ii(t4) {
  return t4.value === ")" && t4.type === "Punctuator";
}
function Ou(t4) {
  return t4.value === "[" && t4.type === "Punctuator";
}
function Lu(t4) {
  return t4.value === "]" && t4.type === "Punctuator";
}
function Ru(t4) {
  return t4.value === "{" && t4.type === "Punctuator";
}
function Nu(t4) {
  return t4.value === "}" && t4.type === "Punctuator";
}
function ju(t4) {
  return t4.type === "Line" || t4.type === "Block" || t4.type === "Shebang";
}
var Hv = xr(Pi);
var Kv = xr(Iu);
var Jv = xr(_u);
var Xv = xr(Bu);
var Qv = xr(an);
var Yv = xr(Ii);
var Zv = xr(Ou);
var eE = xr(Lu);
var tE = xr(Ru);
var rE = xr(Nu);
var nE = xr(ju);
function hg(t4, e) {
  return t4.id ? e.getTokenAfter(t4.id, an) : e.getFirstToken(t4, an);
}
function sE(t4, e) {
  const r = t4.parent;
  let s = null, n = null;
  if (t4.type === "ArrowFunctionExpression") {
    const a = e.getTokenBefore(t4.body, Pi);
    s = a.loc.start, n = a.loc.end;
  } else
    r.type === "Property" || r.type === "MethodDefinition" ? (s = r.loc.start, n = hg(t4, e).loc.start) : (s = t4.loc.start, n = hg(t4, e).loc.start);
  return {
    start: Object.assign({}, s),
    end: Object.assign({}, n)
  };
}
var mg = typeof globalThis < "u" ? globalThis : typeof self < "u" ? self : typeof window < "u" ? window : typeof global < "u" ? global : {};
var P_ = Object.freeze(
  /* @__PURE__ */ new Set([
    "Array",
    "ArrayBuffer",
    "BigInt",
    "BigInt64Array",
    "BigUint64Array",
    "Boolean",
    "DataView",
    "Date",
    "decodeURI",
    "decodeURIComponent",
    "encodeURI",
    "encodeURIComponent",
    "escape",
    "Float32Array",
    "Float64Array",
    "Function",
    "Infinity",
    "Int16Array",
    "Int32Array",
    "Int8Array",
    "isFinite",
    "isNaN",
    "isPrototypeOf",
    "JSON",
    "Map",
    "Math",
    "NaN",
    "Number",
    "Object",
    "parseFloat",
    "parseInt",
    "Promise",
    "Proxy",
    "Reflect",
    "RegExp",
    "Set",
    "String",
    "Symbol",
    "Uint16Array",
    "Uint32Array",
    "Uint8Array",
    "Uint8ClampedArray",
    "undefined",
    "unescape",
    "WeakMap",
    "WeakSet"
  ])
);
var co = new Set(
  [
    Array.isArray,
    typeof BigInt == "function" ? BigInt : void 0,
    Boolean,
    Date,
    Date.parse,
    decodeURI,
    decodeURIComponent,
    encodeURI,
    encodeURIComponent,
    escape,
    isFinite,
    isNaN,
    isPrototypeOf,
    ...Object.getOwnPropertyNames(Math).map((t4) => Math[t4]).filter((t4) => typeof t4 == "function"),
    Number,
    Number.isFinite,
    Number.isNaN,
    Number.parseFloat,
    Number.parseInt,
    Object,
    Object.entries,
    Object.is,
    Object.isExtensible,
    Object.isFrozen,
    Object.isSealed,
    Object.keys,
    Object.values,
    parseFloat,
    parseInt,
    RegExp,
    String,
    String.fromCharCode,
    String.fromCodePoint,
    String.raw,
    Symbol,
    Symbol.for,
    Symbol.keyFor,
    unescape
  ].filter((t4) => typeof t4 == "function")
);
var dg = /* @__PURE__ */ new Set([
  Object.freeze,
  Object.preventExtensions,
  Object.seal
]);
function I_(t4, e) {
  let r = t4;
  for (; (typeof r == "object" || typeof r == "function") && r !== null; ) {
    const s = Object.getOwnPropertyDescriptor(r, e);
    if (s)
      return s;
    r = Object.getPrototypeOf(r);
  }
  return null;
}
function __(t4, e) {
  const r = I_(t4, e);
  return r != null && r.get != null;
}
function ds(t4, e) {
  const r = [];
  for (let s = 0; s < t4.length; ++s) {
    const n = t4[s];
    if (n == null)
      r.length = s + 1;
    else if (n.type === "SpreadElement") {
      const a = it(n.argument, e);
      if (a == null)
        return null;
      r.push(...a.value);
    } else {
      const a = it(n, e);
      if (a == null)
        return null;
      r.push(a.value);
    }
  }
  return r;
}
var gg = Object.freeze({
  ArrayExpression(t4, e) {
    const r = ds(t4.elements, e);
    return r != null ? { value: r } : null;
  },
  AssignmentExpression(t4, e) {
    return t4.operator === "=" ? it(t4.right, e) : null;
  },
  //eslint-disable-next-line complexity
  BinaryExpression(t4, e) {
    if (t4.operator === "in" || t4.operator === "instanceof")
      return null;
    const r = it(t4.left, e), s = it(t4.right, e);
    if (r != null && s != null)
      switch (t4.operator) {
        case "==":
          return { value: r.value == s.value };
        case "!=":
          return { value: r.value != s.value };
        case "===":
          return { value: r.value === s.value };
        case "!==":
          return { value: r.value !== s.value };
        case "<":
          return { value: r.value < s.value };
        case "<=":
          return { value: r.value <= s.value };
        case ">":
          return { value: r.value > s.value };
        case ">=":
          return { value: r.value >= s.value };
        case "<<":
          return { value: r.value << s.value };
        case ">>":
          return { value: r.value >> s.value };
        case ">>>":
          return { value: r.value >>> s.value };
        case "+":
          return { value: r.value + s.value };
        case "-":
          return { value: r.value - s.value };
        case "*":
          return { value: r.value * s.value };
        case "/":
          return { value: r.value / s.value };
        case "%":
          return { value: r.value % s.value };
        case "**":
          return { value: Math.pow(r.value, s.value) };
        case "|":
          return { value: r.value | s.value };
        case "^":
          return { value: r.value ^ s.value };
        case "&":
          return { value: r.value & s.value };
      }
    return null;
  },
  CallExpression(t4, e) {
    const r = t4.callee, s = ds(t4.arguments, e);
    if (s != null)
      if (r.type === "MemberExpression") {
        const n = it(r.object, e);
        if (n != null) {
          if (n.value == null && (n.optional || t4.optional))
            return { value: void 0, optional: true };
          const a = r.computed ? it(r.property, e) : { value: r.property.name };
          if (a != null) {
            const o = n.value, l = a.value;
            if (co.has(o[l]))
              return { value: o[l](...s) };
            if (dg.has(o[l]))
              return { value: s[0] };
          }
        }
      } else {
        const n = it(r, e);
        if (n != null) {
          if (n.value == null && t4.optional)
            return { value: void 0, optional: true };
          const a = n.value;
          if (co.has(a))
            return { value: a(...s) };
          if (dg.has(a))
            return { value: s[0] };
        }
      }
    return null;
  },
  ConditionalExpression(t4, e) {
    const r = it(t4.test, e);
    return r != null ? r.value ? it(t4.consequent, e) : it(t4.alternate, e) : null;
  },
  ExpressionStatement(t4, e) {
    return it(t4.expression, e);
  },
  Identifier(t4, e) {
    if (e != null) {
      const r = Yn(e, t4);
      if (r != null && r.defs.length === 0 && P_.has(r.name) && r.name in mg)
        return { value: mg[r.name] };
      if (r != null && r.defs.length === 1) {
        const s = r.defs[0];
        if (s.parent && s.parent.kind === "const" && // TODO(mysticatea): don't support destructuring here.
        s.node.id.type === "Identifier")
          return it(s.node.init, e);
      }
    }
    return null;
  },
  Literal(t4) {
    return (t4.regex != null || t4.bigint != null) && t4.value == null ? null : { value: t4.value };
  },
  LogicalExpression(t4, e) {
    const r = it(t4.left, e);
    if (r != null) {
      if (t4.operator === "||" && r.value || t4.operator === "&&" && !r.value || t4.operator === "??" && r.value != null)
        return r;
      const s = it(t4.right, e);
      if (s != null)
        return s;
    }
    return null;
  },
  MemberExpression(t4, e) {
    const r = it(t4.object, e);
    if (r != null) {
      if (r.value == null && (r.optional || t4.optional))
        return { value: void 0, optional: true };
      const s = t4.computed ? it(t4.property, e) : { value: t4.property.name };
      if (s != null && !__(r.value, s.value))
        return { value: r.value[s.value] };
    }
    return null;
  },
  ChainExpression(t4, e) {
    const r = it(t4.expression, e);
    return r != null ? { value: r.value } : null;
  },
  NewExpression(t4, e) {
    const r = it(t4.callee, e), s = ds(t4.arguments, e);
    if (r != null && s != null) {
      const n = r.value;
      if (co.has(n))
        return { value: new n(...s) };
    }
    return null;
  },
  ObjectExpression(t4, e) {
    const r = {};
    for (const s of t4.properties)
      if (s.type === "Property") {
        if (s.kind !== "init")
          return null;
        const n = s.computed ? it(s.key, e) : { value: s.key.name }, a = it(s.value, e);
        if (n == null || a == null)
          return null;
        r[n.value] = a.value;
      } else if (s.type === "SpreadElement" || s.type === "ExperimentalSpreadProperty") {
        const n = it(
          s.argument,
          e
        );
        if (n == null)
          return null;
        Object.assign(r, n.value);
      } else
        return null;
    return { value: r };
  },
  SequenceExpression(t4, e) {
    const r = t4.expressions[t4.expressions.length - 1];
    return it(r, e);
  },
  TaggedTemplateExpression(t4, e) {
    const r = it(t4.tag, e), s = ds(
      t4.quasi.expressions,
      e
    );
    if (r != null && s != null) {
      const n = r.value, a = t4.quasi.quasis.map((o) => o.value.cooked);
      if (a.raw = t4.quasi.quasis.map((o) => o.value.raw), n === String.raw)
        return { value: n(a, ...s) };
    }
    return null;
  },
  TemplateLiteral(t4, e) {
    const r = ds(t4.expressions, e);
    if (r != null) {
      let s = t4.quasis[0].value.cooked;
      for (let n = 0; n < r.length; ++n)
        s += r[n], s += t4.quasis[n + 1].value.cooked;
      return { value: s };
    }
    return null;
  },
  UnaryExpression(t4, e) {
    if (t4.operator === "delete")
      return null;
    if (t4.operator === "void")
      return { value: void 0 };
    const r = it(t4.argument, e);
    if (r != null)
      switch (t4.operator) {
        case "-":
          return { value: -r.value };
        case "+":
          return { value: +r.value };
        case "!":
          return { value: !r.value };
        case "~":
          return { value: ~r.value };
        case "typeof":
          return { value: typeof r.value };
      }
    return null;
  }
});
function it(t4, e) {
  return t4 != null && Object.hasOwnProperty.call(gg, t4.type) ? gg[t4.type](t4, e) : null;
}
function Mu(t4, e = null) {
  try {
    return it(t4, e);
  } catch {
    return null;
  }
}
function $s(t4, e = null) {
  if (t4 && t4.type === "Literal" && t4.value === null) {
    if (t4.regex)
      return `/${t4.regex.pattern}/${t4.regex.flags}`;
    if (t4.bigint)
      return t4.bigint;
  }
  const r = Mu(t4, e);
  return r && String(r.value);
}
function Vs(t4, e) {
  switch (t4.type) {
    case "MemberExpression":
      return t4.computed ? $s(t4.property, e) : t4.property.name;
    case "Property":
    case "MethodDefinition":
      return t4.computed ? $s(t4.key, e) : t4.key.type === "Literal" ? String(t4.key.value) : t4.key.name;
  }
  return null;
}
function aE(t4) {
  const e = t4.parent, r = [];
  if (e.type === "MethodDefinition" && e.static && r.push("static"), t4.async && r.push("async"), t4.generator && r.push("generator"), t4.type === "ArrowFunctionExpression")
    r.push("arrow", "function");
  else if (e.type === "Property" || e.type === "MethodDefinition") {
    if (e.kind === "constructor")
      return "constructor";
    e.kind === "get" ? r.push("getter") : e.kind === "set" ? r.push("setter") : r.push("method");
  } else
    r.push("function");
  if (t4.id)
    r.push(`'${t4.id.name}'`);
  else {
    const s = Vs(e);
    s && r.push(`'${s}'`);
  }
  return t4.type === "ArrowFunctionExpression" && (e.type === "VariableDeclarator" && e.id && e.id.type === "Identifier" && r.push(`'${e.id.name}'`), e.type === "AssignmentExpression" && e.left && e.left.type === "Identifier" && r.push(`'${e.left.name}'`)), r.join(" ");
}
var B_ = Object.freeze(
  /* @__PURE__ */ new Set([
    "==",
    "!=",
    "<",
    "<=",
    ">",
    ">=",
    "<<",
    ">>",
    ">>>",
    "+",
    "-",
    "*",
    "/",
    "%",
    "|",
    "^",
    "&",
    "in"
  ])
);
var O_ = Object.freeze(/* @__PURE__ */ new Set(["-", "+", "!", "~"]));
function yg(t4) {
  return t4 !== null && typeof t4 == "object" && typeof t4.type == "string";
}
var L_ = Object.freeze(
  Object.assign(/* @__PURE__ */ Object.create(null), {
    $visit(t4, e, r) {
      const { type: s } = t4;
      return typeof this[s] == "function" ? this[s](t4, e, r) : this.$visitChildren(t4, e, r);
    },
    $visitChildren(t4, e, r) {
      const { type: s } = t4;
      for (const n of r[s] || du.getKeys(t4)) {
        const a = t4[n];
        if (Array.isArray(a)) {
          for (const o of a)
            if (yg(o) && this.$visit(o, e, r))
              return true;
        } else if (yg(a) && this.$visit(a, e, r))
          return true;
      }
      return false;
    },
    ArrowFunctionExpression() {
      return false;
    },
    AssignmentExpression() {
      return true;
    },
    AwaitExpression() {
      return true;
    },
    BinaryExpression(t4, e, r) {
      return e.considerImplicitTypeConversion && B_.has(t4.operator) && (t4.left.type !== "Literal" || t4.right.type !== "Literal") ? true : this.$visitChildren(t4, e, r);
    },
    CallExpression() {
      return true;
    },
    FunctionExpression() {
      return false;
    },
    ImportExpression() {
      return true;
    },
    MemberExpression(t4, e, r) {
      return e.considerGetters || e.considerImplicitTypeConversion && t4.computed && t4.property.type !== "Literal" ? true : this.$visitChildren(t4, e, r);
    },
    MethodDefinition(t4, e, r) {
      return e.considerImplicitTypeConversion && t4.computed && t4.key.type !== "Literal" ? true : this.$visitChildren(t4, e, r);
    },
    NewExpression() {
      return true;
    },
    Property(t4, e, r) {
      return e.considerImplicitTypeConversion && t4.computed && t4.key.type !== "Literal" ? true : this.$visitChildren(t4, e, r);
    },
    UnaryExpression(t4, e, r) {
      return t4.operator === "delete" || e.considerImplicitTypeConversion && O_.has(t4.operator) && t4.argument.type !== "Literal" ? true : this.$visitChildren(t4, e, r);
    },
    UpdateExpression() {
      return true;
    },
    YieldExpression() {
      return true;
    }
  })
);
function iE(t4, e, { considerGetters: r = false, considerImplicitTypeConversion: s = false } = {}) {
  return L_.$visit(
    t4,
    { considerGetters: r, considerImplicitTypeConversion: s },
    e.visitorKeys || du.KEYS
  );
}
function R_(t4, e) {
  const r = t4.parent;
  switch (r.type) {
    case "CallExpression":
    case "NewExpression":
      return r.arguments.length === 1 && r.arguments[0] === t4 ? e.getTokenAfter(
        r.callee,
        an
      ) : null;
    case "DoWhileStatement":
      return r.test === t4 ? e.getTokenAfter(
        r.body,
        an
      ) : null;
    case "IfStatement":
    case "WhileStatement":
      return r.test === t4 ? e.getFirstToken(r, 1) : null;
    case "ImportExpression":
      return r.source === t4 ? e.getFirstToken(r, 1) : null;
    case "SwitchStatement":
      return r.discriminant === t4 ? e.getFirstToken(r, 1) : null;
    case "WithStatement":
      return r.object === t4 ? e.getFirstToken(r, 1) : null;
    default:
      return null;
  }
}
function oE(t4, e, r) {
  let s, n, a, o, l;
  if (typeof t4 == "number") {
    if (s = t4 | 0, n = e, a = r, !(s >= 1))
      throw new TypeError("'times' should be a positive integer.");
  } else
    s = 1, n = t4, a = e;
  if (n == null)
    return false;
  o = l = n;
  do
    o = a.getTokenBefore(o), l = a.getTokenAfter(l);
  while (o != null && l != null && an(o) && Ii(l) && // Avoid false positive such as `if (a) {}`
  o !== R_(n, a) && --s > 0);
  return s === 0;
}
var N_ = /\$(?:[$&`']|[1-9][0-9]?)/gu;
var xg = /* @__PURE__ */ new WeakMap();
function j_(t4, e) {
  let r = false;
  for (let s = e - 1; s >= 0 && t4.charCodeAt(s) === 92; --s)
    r = !r;
  return r;
}
function M_(t4, e, r) {
  const s = [];
  let n = 0, a = null;
  function o(l) {
    switch (l) {
      case "$$":
        return "$";
      case "$&":
        return a[0];
      case "$`":
        return e.slice(0, a.index);
      case "$'":
        return e.slice(a.index + a[0].length);
      default: {
        const i = l.slice(1);
        return i in a ? a[i] : l;
      }
    }
  }
  for (a of t4.execAll(e))
    s.push(e.slice(n, a.index)), s.push(r.replace(N_, o)), n = a.index + a[0].length;
  return s.push(e.slice(n)), s.join("");
}
function $_(t4, e, r) {
  const s = [];
  let n = 0;
  for (const a of t4.execAll(e))
    s.push(e.slice(n, a.index)), s.push(String(r(...a, a.index, a.input))), n = a.index + a[0].length;
  return s.push(e.slice(n)), s.join("");
}
var lE = class {
  /**
   * Initialize this matcher.
   * @param {RegExp} pattern The pattern to match.
   * @param {{escaped:boolean}} options The options.
   */
  constructor(e, { escaped: r = false } = {}) {
    if (!(e instanceof RegExp))
      throw new TypeError("'pattern' should be a RegExp instance.");
    if (!e.flags.includes("g"))
      throw new Error("'pattern' should contains 'g' flag.");
    xg.set(this, {
      pattern: new RegExp(e.source, e.flags),
      escaped: !!r
    });
  }
  /**
   * Find the pattern in a given string.
   * @param {string} str The string to find.
   * @returns {IterableIterator<RegExpExecArray>} The iterator which iterate the matched information.
   */
  *execAll(e) {
    const { pattern: r, escaped: s } = xg.get(this);
    let n = null, a = 0;
    for (r.lastIndex = 0; (n = r.exec(e)) != null; )
      (s || !j_(e, n.index)) && (a = r.lastIndex, yield n, r.lastIndex = a);
  }
  /**
   * Check whether the pattern is found in a given string.
   * @param {string} str The string to check.
   * @returns {boolean} `true` if the pattern was found in the string.
   */
  test(e) {
    return !this.execAll(e).next().done;
  }
  /**
   * Replace a given string.
   * @param {string} str The string to be replaced.
   * @param {(string|((...strs:string[])=>string))} replacer The string or function to replace. This is the same as the 2nd argument of `String.prototype.replace`.
   * @returns {string} The replaced string.
   */
  [Symbol.replace](e, r) {
    return typeof r == "function" ? $_(this, String(e), r) : M_(this, String(e), String(r));
  }
};
var V_ = /^(?:Import|Export(?:All|Default|Named))Declaration$/u;
var gn = Function.call.bind(Object.hasOwnProperty);
var rt = Symbol("read");
var kn = Symbol("call");
var Zn = Symbol("construct");
var _i = Symbol("esm");
var U_ = { require: { [kn]: true } };
function vg(t4) {
  return t4 == null || t4.defs.length !== 0 || t4.references.some((e) => e.isWrite());
}
function q_(t4) {
  const e = t4.parent;
  switch (e && e.type) {
    case "ConditionalExpression":
      return e.consequent === t4 || e.alternate === t4;
    case "LogicalExpression":
      return true;
    case "SequenceExpression":
      return e.expressions[e.expressions.length - 1] === t4;
    case "ChainExpression":
      return true;
    default:
      return false;
  }
}
var ps = class {
  /**
   * Initialize this tracker.
   * @param {Scope} globalScope The global scope.
   * @param {object} [options] The options.
   * @param {"legacy"|"strict"} [options.mode="strict"] The mode to determine the ImportDeclaration's behavior for CJS modules.
   * @param {string[]} [options.globalObjectNames=["global","globalThis","self","window"]] The variable names for Global Object.
   */
  constructor(e, {
    mode: r = "strict",
    globalObjectNames: s = ["global", "globalThis", "self", "window"]
  } = {}) {
    this.variableStack = [], this.globalScope = e, this.mode = r, this.globalObjectNames = s.slice(0);
  }
  /**
   * Iterate the references of global variables.
   * @param {object} traceMap The trace map.
   * @returns {IterableIterator<{node:Node,path:string[],type:symbol,info:any}>} The iterator to iterate references.
   */
  *iterateGlobalReferences(e) {
    for (const r of Object.keys(e)) {
      const s = e[r], n = [r], a = this.globalScope.set.get(r);
      vg(a) || (yield* this._iterateVariableReferences(
        a,
        n,
        s,
        true
      ));
    }
    for (const r of this.globalObjectNames) {
      const s = [], n = this.globalScope.set.get(r);
      vg(n) || (yield* this._iterateVariableReferences(
        n,
        s,
        e,
        false
      ));
    }
  }
  /**
   * Iterate the references of CommonJS modules.
   * @param {object} traceMap The trace map.
   * @returns {IterableIterator<{node:Node,path:string[],type:symbol,info:any}>} The iterator to iterate references.
   */
  *iterateCjsReferences(e) {
    for (const { node: r } of this.iterateGlobalReferences(U_)) {
      const s = $s(r.arguments[0]);
      if (s == null || !gn(e, s))
        continue;
      const n = e[s], a = [s];
      n[rt] && (yield {
        node: r,
        path: a,
        type: rt,
        info: n[rt]
      }), yield* this._iteratePropertyReferences(r, a, n);
    }
  }
  /**
   * Iterate the references of ES modules.
   * @param {object} traceMap The trace map.
   * @returns {IterableIterator<{node:Node,path:string[],type:symbol,info:any}>} The iterator to iterate references.
   */
  *iterateEsmReferences(e) {
    const r = this.globalScope.block;
    for (const s of r.body) {
      if (!V_.test(s.type) || s.source == null)
        continue;
      const n = s.source.value;
      if (!gn(e, n))
        continue;
      const a = e[n], o = [n];
      if (a[rt] && (yield { node: s, path: o, type: rt, info: a[rt] }), s.type === "ExportAllDeclaration")
        for (const l of Object.keys(a)) {
          const i = a[l];
          i[rt] && (yield {
            node: s,
            path: o.concat(l),
            type: rt,
            info: i[rt]
          });
        }
      else
        for (const l of s.specifiers) {
          const i = gn(a, _i), u = this._iterateImportReferences(
            l,
            o,
            i ? a : this.mode === "legacy" ? Object.assign(
              { default: a },
              a
            ) : { default: a }
          );
          if (i)
            yield* u;
          else
            for (const c of u)
              c.path = c.path.filter(W_), (c.path.length >= 2 || c.type !== rt) && (yield c);
        }
    }
  }
  /**
   * Iterate the references for a given variable.
   * @param {Variable} variable The variable to iterate that references.
   * @param {string[]} path The current path.
   * @param {object} traceMap The trace map.
   * @param {boolean} shouldReport = The flag to report those references.
   * @returns {IterableIterator<{node:Node,path:string[],type:symbol,info:any}>} The iterator to iterate references.
   */
  *_iterateVariableReferences(e, r, s, n) {
    if (!this.variableStack.includes(e)) {
      this.variableStack.push(e);
      try {
        for (const a of e.references) {
          if (!a.isRead())
            continue;
          const o = a.identifier;
          n && s[rt] && (yield { node: o, path: r, type: rt, info: s[rt] }), yield* this._iteratePropertyReferences(o, r, s);
        }
      } finally {
        this.variableStack.pop();
      }
    }
  }
  /**
   * Iterate the references for a given AST node.
   * @param rootNode The AST node to iterate references.
   * @param {string[]} path The current path.
   * @param {object} traceMap The trace map.
   * @returns {IterableIterator<{node:Node,path:string[],type:symbol,info:any}>} The iterator to iterate references.
   */
  //eslint-disable-next-line complexity
  *_iteratePropertyReferences(e, r, s) {
    let n = e;
    for (; q_(n); )
      n = n.parent;
    const a = n.parent;
    if (a.type === "MemberExpression") {
      if (a.object === n) {
        const o = Vs(a);
        if (o == null || !gn(s, o))
          return;
        r = r.concat(o);
        const l = s[o];
        l[rt] && (yield {
          node: a,
          path: r,
          type: rt,
          info: l[rt]
        }), yield* this._iteratePropertyReferences(
          a,
          r,
          l
        );
      }
      return;
    }
    if (a.type === "CallExpression") {
      a.callee === n && s[kn] && (yield { node: a, path: r, type: kn, info: s[kn] });
      return;
    }
    if (a.type === "NewExpression") {
      a.callee === n && s[Zn] && (yield {
        node: a,
        path: r,
        type: Zn,
        info: s[Zn]
      });
      return;
    }
    if (a.type === "AssignmentExpression") {
      a.right === n && (yield* this._iterateLhsReferences(a.left, r, s), yield* this._iteratePropertyReferences(a, r, s));
      return;
    }
    if (a.type === "AssignmentPattern") {
      a.right === n && (yield* this._iterateLhsReferences(a.left, r, s));
      return;
    }
    a.type === "VariableDeclarator" && a.init === n && (yield* this._iterateLhsReferences(a.id, r, s));
  }
  /**
   * Iterate the references for a given Pattern node.
   * @param {Node} patternNode The Pattern node to iterate references.
   * @param {string[]} path The current path.
   * @param {object} traceMap The trace map.
   * @returns {IterableIterator<{node:Node,path:string[],type:symbol,info:any}>} The iterator to iterate references.
   */
  *_iterateLhsReferences(e, r, s) {
    if (e.type === "Identifier") {
      const n = Yn(this.globalScope, e);
      n != null && (yield* this._iterateVariableReferences(
        n,
        r,
        s,
        false
      ));
      return;
    }
    if (e.type === "ObjectPattern") {
      for (const n of e.properties) {
        const a = Vs(n);
        if (a == null || !gn(s, a))
          continue;
        const o = r.concat(a), l = s[a];
        l[rt] && (yield {
          node: n,
          path: o,
          type: rt,
          info: l[rt]
        }), yield* this._iterateLhsReferences(
          n.value,
          o,
          l
        );
      }
      return;
    }
    e.type === "AssignmentPattern" && (yield* this._iterateLhsReferences(e.left, r, s));
  }
  /**
   * Iterate the references for a given ModuleSpecifier node.
   * @param {Node} specifierNode The ModuleSpecifier node to iterate references.
   * @param {string[]} path The current path.
   * @param {object} traceMap The trace map.
   * @returns {IterableIterator<{node:Node,path:string[],type:symbol,info:any}>} The iterator to iterate references.
   */
  *_iterateImportReferences(e, r, s) {
    const n = e.type;
    if (n === "ImportSpecifier" || n === "ImportDefaultSpecifier") {
      const a = n === "ImportDefaultSpecifier" ? "default" : e.imported.name;
      if (!gn(s, a))
        return;
      r = r.concat(a);
      const o = s[a];
      o[rt] && (yield {
        node: e,
        path: r,
        type: rt,
        info: o[rt]
      }), yield* this._iterateVariableReferences(
        Yn(this.globalScope, e.local),
        r,
        o,
        false
      );
      return;
    }
    if (n === "ImportNamespaceSpecifier") {
      yield* this._iterateVariableReferences(
        Yn(this.globalScope, e.local),
        r,
        s,
        false
      );
      return;
    }
    if (n === "ExportSpecifier") {
      const a = e.local.name;
      if (!gn(s, a))
        return;
      r = r.concat(a);
      const o = s[a];
      o[rt] && (yield {
        node: e,
        path: r,
        type: rt,
        info: o[rt]
      });
    }
  }
};
ps.READ = rt;
ps.CALL = kn;
ps.CONSTRUCT = Zn;
ps.ESM = _i;
function W_(t4, e) {
  return !(e === 1 && t4 === "default");
}
var z_ = {
  CALL: kn,
  CONSTRUCT: Zn,
  ESM: _i,
  findVariable: Yn,
  getFunctionHeadLocation: sE,
  getFunctionNameWithKind: aE,
  getInnermostScope: Pu,
  getPropertyName: Vs,
  getStaticValue: Mu,
  getStringIfConstant: $s,
  hasSideEffect: iE,
  isArrowToken: Pi,
  isClosingBraceToken: Nu,
  isClosingBracketToken: Lu,
  isClosingParenToken: Ii,
  isColonToken: Bu,
  isCommaToken: Iu,
  isCommentToken: ju,
  isNotArrowToken: Hv,
  isNotClosingBraceToken: rE,
  isNotClosingBracketToken: eE,
  isNotClosingParenToken: Yv,
  isNotColonToken: Xv,
  isNotCommaToken: Kv,
  isNotCommentToken: nE,
  isNotOpeningBraceToken: tE,
  isNotOpeningBracketToken: Zv,
  isNotOpeningParenToken: Qv,
  isNotSemicolonToken: Jv,
  isOpeningBraceToken: Ru,
  isOpeningBracketToken: Ou,
  isOpeningParenToken: an,
  isParenthesized: oE,
  isSemicolonToken: _u,
  PatternMatcher: lE,
  READ: rt,
  ReferenceTracker: ps
};
var G_ = Object.freeze({
  __proto__: null,
  default: z_,
  CALL: kn,
  CONSTRUCT: Zn,
  ESM: _i,
  PatternMatcher: lE,
  READ: rt,
  ReferenceTracker: ps,
  findVariable: Yn,
  getFunctionHeadLocation: sE,
  getFunctionNameWithKind: aE,
  getInnermostScope: Pu,
  getPropertyName: Vs,
  getStaticValue: Mu,
  getStringIfConstant: $s,
  hasSideEffect: iE,
  isArrowToken: Pi,
  isClosingBraceToken: Nu,
  isClosingBracketToken: Lu,
  isClosingParenToken: Ii,
  isColonToken: Bu,
  isCommaToken: Iu,
  isCommentToken: ju,
  isNotArrowToken: Hv,
  isNotClosingBraceToken: rE,
  isNotClosingBracketToken: eE,
  isNotClosingParenToken: Yv,
  isNotColonToken: Xv,
  isNotCommaToken: Kv,
  isNotCommentToken: nE,
  isNotOpeningBraceToken: tE,
  isNotOpeningBracketToken: Zv,
  isNotOpeningParenToken: Qv,
  isNotSemicolonToken: Jv,
  isOpeningBraceToken: Ru,
  isOpeningBracketToken: Ou,
  isOpeningParenToken: an,
  isParenthesized: oE,
  isSemicolonToken: _u
});
var uE = Fn(G_);
var cE = { exports: {} };
var po = { exports: {} };
var fo;
var Eg;
function H_() {
  if (Eg)
    return fo;
  Eg = 1;
  var t4, e, r, s, n, a, o = {}.toString;
  t4 = l(function(i, u) {
    return i.apply(null, u);
  }), e = function(i) {
    return l(i);
  }, r = l(function(i, u, c) {
    return i(c, u);
  }), s = function(i) {
    return /* @__PURE__ */ function(u) {
      return function() {
        return i(u(u)).apply(null, arguments);
      };
    }(function(u) {
      return function() {
        return i(u(u)).apply(null, arguments);
      };
    });
  }, n = l(function(i, u, c, f) {
    return i(u(c), u(f));
  }), a = function(i) {
    var u;
    return u = {}, function() {
      var c, f, h, p, m, d;
      for (f = [], h = 0, p = arguments.length; h < p; ++h)
        f.push(arguments[h]);
      return c = f, m = function() {
        var g, y, x, A = [];
        for (g = 0, x = (y = c).length; g < x; ++g)
          d = y[g], A.push(d + o.call(d).slice(8, -1));
        return A;
      }().join(""), u[m] = m in u ? u[m] : i.apply(null, c);
    };
  }, fo = {
    curry: e,
    flip: r,
    fix: s,
    apply: t4,
    over: n,
    memoize: a
  };
  function l(i, u) {
    var c, f = function(h) {
      return i.length > 1 ? function() {
        var p = h ? h.concat() : [];
        return c = u ? c || this : this, p.push.apply(p, arguments) < i.length && arguments.length ? f.call(c, p) : i.apply(c, p);
      } : i;
    };
    return f();
  }
  return fo;
}
var ho;
var bg;
function K_() {
  if (bg)
    return ho;
  bg = 1;
  var t4, e, r, s, n, a, o, l, i, u, c, f, h, p, m, d, g, y, x, A, b, v, C, T, w, B, I, _, S, F, N, k, j, O, z, te, se, ye, Se, xe, Ae, _e, H, Q, ge, ae, ee, he, R, D, U, ne, pe, Ee, Re, We, wt, Lt, et, Ge, mt, tr, vr, Er, hr, P, It, St, rr, Te, qe = {}.toString;
  t4 = Be(function(Z, W) {
    var G, J, le;
    for (G = 0, J = W.length; G < J; ++G)
      le = W[G], Z(le);
    return W;
  }), e = Be(function(Z, W) {
    var G, J, le, ce = [];
    for (G = 0, J = W.length; G < J; ++G)
      le = W[G], ce.push(Z(le));
    return ce;
  }), r = function(Z) {
    var W, G, J, le = [];
    for (W = 0, G = Z.length; W < G; ++W)
      J = Z[W], J && le.push(J);
    return le;
  }, s = Be(function(Z, W) {
    var G, J, le, ce = [];
    for (G = 0, J = W.length; G < J; ++G)
      le = W[G], Z(le) && ce.push(le);
    return ce;
  }), n = Be(function(Z, W) {
    var G, J, le, ce = [];
    for (G = 0, J = W.length; G < J; ++G)
      le = W[G], Z(le) || ce.push(le);
    return ce;
  }), a = Be(function(Z, W) {
    var G, J;
    return G = It(Z, W), J = W.slice(), G != null && J.splice(G, 1), J;
  }), o = Be(function(Z, W) {
    var G, J, le, ce, Fe;
    for (G = [], J = [], le = 0, ce = W.length; le < ce; ++le)
      Fe = W[le], (Z(Fe) ? G : J).push(Fe);
    return [G, J];
  }), l = Be(function(Z, W) {
    var G, J, le;
    for (G = 0, J = W.length; G < J; ++G)
      if (le = W[G], Z(le))
        return le;
  }), i = u = function(Z) {
    return Z[0];
  }, c = function(Z) {
    if (Z.length)
      return Z.slice(1);
  }, f = function(Z) {
    return Z[Z.length - 1];
  }, h = function(Z) {
    if (Z.length)
      return Z.slice(0, -1);
  }, p = function(Z) {
    return !Z.length;
  }, m = function(Z) {
    return Z.concat().reverse();
  }, d = function(Z) {
    var W, G, J, le;
    for (W = [], G = 0, J = Z.length; G < J; ++G)
      le = Z[G], At(le, W) || W.push(le);
    return W;
  }, g = Be(function(Z, W) {
    var G, J, le, ce, Fe, Ve = [];
    for (G = [], J = 0, le = W.length; J < le; ++J)
      ce = W[J], Fe = Z(ce), !At(Fe, G) && (G.push(Fe), Ve.push(ce));
    return Ve;
  }), y = x = Be(function(Z, W, G) {
    var J, le, ce;
    for (J = 0, le = G.length; J < le; ++J)
      ce = G[J], W = Z(W, ce);
    return W;
  }), A = b = Be(function(Z, W) {
    return y(Z, W[0], W.slice(1));
  }), v = Be(function(Z, W, G) {
    var J, le;
    for (J = G.length - 1; J >= 0; --J)
      le = G[J], W = Z(le, W);
    return W;
  }), C = Be(function(Z, W) {
    return v(Z, W[W.length - 1], W.slice(0, -1));
  }), T = Be(function(Z, W) {
    var G, J, le;
    for (G = [], J = W; (le = Z(J)) != null; )
      G.push(le[0]), J = le[1];
    return G;
  }), w = function(Z) {
    return [].concat.apply([], Z);
  }, B = Be(function(Z, W) {
    var G;
    return [].concat.apply([], function() {
      var J, le, ce, Fe = [];
      for (J = 0, ce = (le = W).length; J < ce; ++J)
        G = le[J], Fe.push(Z(G));
      return Fe;
    }());
  }), I = function(Z) {
    var W;
    return [].concat.apply([], function() {
      var G, J, le, ce = [];
      for (G = 0, le = (J = Z).length; G < le; ++G)
        W = J[G], qe.call(W).slice(8, -1) === "Array" ? ce.push(I(W)) : ce.push(W);
      return ce;
    }());
  }, _ = function(Z) {
    var W, G, J, le, ce, Fe, Ve, Ye, lt, xt;
    for (G = [], J = 1, le = arguments.length; J < le; ++J)
      G.push(arguments[J]);
    W = G, ce = [];
    e:
      for (J = 0, Fe = Z.length; J < Fe; ++J) {
        for (Ve = Z[J], Ye = 0, lt = W.length; Ye < lt; ++Ye)
          if (xt = W[Ye], At(Ve, xt))
            continue e;
        ce.push(Ve);
      }
    return ce;
  }, S = function(Z) {
    var W, G, J, le, ce, Fe, Ve, Ye, lt, xt;
    for (G = [], J = 1, le = arguments.length; J < le; ++J)
      G.push(arguments[J]);
    W = G, ce = [];
    e:
      for (J = 0, Fe = Z.length; J < Fe; ++J) {
        for (Ve = Z[J], Ye = 0, lt = W.length; Ye < lt; ++Ye)
          if (xt = W[Ye], !At(Ve, xt))
            continue e;
        ce.push(Ve);
      }
    return ce;
  }, F = function() {
    var Z, W, G, J, le, ce, Fe, Ve, Ye, lt;
    for (W = [], G = 0, J = arguments.length; G < J; ++G)
      W.push(arguments[G]);
    for (Z = W, le = [], G = 0, ce = Z.length; G < ce; ++G)
      for (Fe = Z[G], Ve = 0, Ye = Fe.length; Ve < Ye; ++Ve)
        lt = Fe[Ve], At(lt, le) || le.push(lt);
    return le;
  }, N = Be(function(Z, W) {
    var G, J, le, ce, Fe;
    for (G = {}, J = 0, le = W.length; J < le; ++J)
      ce = W[J], Fe = Z(ce), Fe in G ? G[Fe] += 1 : G[Fe] = 1;
    return G;
  }), k = Be(function(Z, W) {
    var G, J, le, ce, Fe;
    for (G = {}, J = 0, le = W.length; J < le; ++J)
      ce = W[J], Fe = Z(ce), Fe in G ? G[Fe].push(ce) : G[Fe] = [ce];
    return G;
  }), j = function(Z) {
    var W, G, J;
    for (W = 0, G = Z.length; W < G; ++W)
      if (J = Z[W], !J)
        return false;
    return true;
  }, O = function(Z) {
    var W, G, J;
    for (W = 0, G = Z.length; W < G; ++W)
      if (J = Z[W], J)
        return true;
    return false;
  }, z = Be(function(Z, W) {
    var G, J, le;
    for (G = 0, J = W.length; G < J; ++G)
      if (le = W[G], Z(le))
        return true;
    return false;
  }), te = Be(function(Z, W) {
    var G, J, le;
    for (G = 0, J = W.length; G < J; ++G)
      if (le = W[G], !Z(le))
        return false;
    return true;
  }), se = function(Z) {
    return Z.concat().sort(function(W, G) {
      return W > G ? 1 : W < G ? -1 : 0;
    });
  }, ye = Be(function(Z, W) {
    return W.concat().sort(Z);
  }), Se = Be(function(Z, W) {
    return W.concat().sort(function(G, J) {
      return Z(G) > Z(J) ? 1 : Z(G) < Z(J) ? -1 : 0;
    });
  }), xe = function(Z) {
    var W, G, J, le;
    for (W = 0, G = 0, J = Z.length; G < J; ++G)
      le = Z[G], W += le;
    return W;
  }, Ae = function(Z) {
    var W, G, J, le;
    for (W = 1, G = 0, J = Z.length; G < J; ++G)
      le = Z[G], W *= le;
    return W;
  }, _e = H = function(Z) {
    var W, G, J, le;
    for (W = 0, G = 0, J = Z.length; G < J; ++G)
      le = Z[G], W += le;
    return W / Z.length;
  }, Q = function(Z) {
    var W, G, J, le, ce;
    for (W = Z[0], G = 0, le = (J = Z.slice(1)).length; G < le; ++G)
      ce = J[G], ce > W && (W = ce);
    return W;
  }, ge = function(Z) {
    var W, G, J, le, ce;
    for (W = Z[0], G = 0, le = (J = Z.slice(1)).length; G < le; ++G)
      ce = J[G], ce < W && (W = ce);
    return W;
  }, ae = Be(function(Z, W) {
    var G, J, le, ce, Fe;
    for (G = W[0], J = 0, ce = (le = W.slice(1)).length; J < ce; ++J)
      Fe = le[J], Z(Fe) > Z(G) && (G = Fe);
    return G;
  }), ee = Be(function(Z, W) {
    var G, J, le, ce, Fe;
    for (G = W[0], J = 0, ce = (le = W.slice(1)).length; J < ce; ++J)
      Fe = le[J], Z(Fe) < Z(G) && (G = Fe);
    return G;
  }), he = R = Be(function(Z, W, G) {
    var J, le;
    return J = W, [W].concat(function() {
      var ce, Fe, Ve, Ye = [];
      for (ce = 0, Ve = (Fe = G).length; ce < Ve; ++ce)
        le = Fe[ce], Ye.push(J = Z(J, le));
      return Ye;
    }());
  }), D = U = Be(function(Z, W) {
    if (W.length)
      return he(Z, W[0], W.slice(1));
  }), ne = Be(function(Z, W, G) {
    return G = G.concat().reverse(), he(Z, W, G).reverse();
  }), pe = Be(function(Z, W) {
    if (W.length)
      return W = W.concat().reverse(), he(Z, W[0], W.slice(1)).reverse();
  }), Ee = Be(function(Z, W, G) {
    return G.slice(Z, W);
  }), Re = Be(function(Z, W) {
    return Z <= 0 ? W.slice(0, 0) : W.slice(0, Z);
  }), We = Be(function(Z, W) {
    return Z <= 0 ? W : W.slice(Z);
  }), wt = Be(function(Z, W) {
    return [Re(Z, W), We(Z, W)];
  }), Lt = Be(function(Z, W) {
    var G, J;
    if (G = W.length, !G)
      return W;
    for (J = 0; J < G && Z(W[J]); )
      J += 1;
    return W.slice(0, J);
  }), et = Be(function(Z, W) {
    var G, J;
    if (G = W.length, !G)
      return W;
    for (J = 0; J < G && Z(W[J]); )
      J += 1;
    return W.slice(J);
  }), Ge = Be(function(Z, W) {
    return [Lt(Z, W), et(Z, W)];
  }), mt = Be(function(Z, W) {
    return Ge(bt(Z, Ce), W);
  }), tr = Be(function(Z, W) {
    var G, J, le, ce, Fe, Ve;
    for (G = [], J = W.length, le = 0, ce = Z.length; le < ce && (Fe = le, Ve = Z[le], Fe !== J); ++le)
      G.push([Ve, W[Fe]]);
    return G;
  }), vr = Be(function(Z, W, G) {
    var J, le, ce, Fe, Ve, Ye;
    for (J = [], le = G.length, ce = 0, Fe = W.length; ce < Fe && (Ve = ce, Ye = W[ce], Ve !== le); ++ce)
      J.push(Z(Ye, G[Ve]));
    return J;
  }), Er = function() {
    var Z, W, G, J, le, ce, Fe, Ve, Ye, lt, xt, oe = [];
    for (W = [], G = 0, J = arguments.length; G < J; ++G)
      W.push(arguments[G]);
    for (Z = W, le = void 0, G = 0, ce = Z.length; G < ce; ++G)
      Fe = Z[G], le <= (Ve = Fe.length) || (le = Ve);
    for (G = 0; G < le; ++G) {
      for (Ye = G, lt = [], xt = 0, ce = Z.length; xt < ce; ++xt)
        Fe = Z[xt], lt.push(Fe[Ye]);
      oe.push(lt);
    }
    return oe;
  }, hr = function(Z) {
    var W, G, J, le, ce, Fe, Ve, Ye, lt, xt = [];
    for (G = [], J = 1, le = arguments.length; J < le; ++J)
      G.push(arguments[J]);
    for (W = G, ce = void 0, J = 0, Fe = W.length; J < Fe; ++J)
      Ve = W[J], ce <= (Ye = Ve.length) || (ce = Ye);
    for (J = 0; J < ce; ++J)
      lt = J, xt.push(Z.apply(null, oe()));
    return xt;
    function oe() {
      var be, ke, re, M = [];
      for (be = 0, re = (ke = W).length; be < re; ++be)
        Ve = ke[be], M.push(Ve[lt]);
      return M;
    }
  }, P = Be(function(Z, W) {
    return Z < 0 ? W[W.length + Z] : W[Z];
  }), It = Be(function(Z, W) {
    var G, J, le, ce;
    for (G = 0, J = W.length; G < J; ++G)
      if (le = G, ce = W[G], ce === Z)
        return le;
  }), St = Be(function(Z, W) {
    var G, J, le, ce, Fe = [];
    for (G = 0, J = W.length; G < J; ++G)
      le = G, ce = W[G], ce === Z && Fe.push(le);
    return Fe;
  }), rr = Be(function(Z, W) {
    var G, J, le, ce;
    for (G = 0, J = W.length; G < J; ++G)
      if (le = G, ce = W[G], Z(ce))
        return le;
  }), Te = Be(function(Z, W) {
    var G, J, le, ce, Fe = [];
    for (G = 0, J = W.length; G < J; ++G)
      le = G, ce = W[G], Z(ce) && Fe.push(le);
    return Fe;
  }), ho = {
    each: t4,
    map: e,
    filter: s,
    compact: r,
    reject: n,
    remove: a,
    partition: o,
    find: l,
    head: i,
    first: u,
    tail: c,
    last: f,
    initial: h,
    empty: p,
    reverse: m,
    difference: _,
    intersection: S,
    union: F,
    countBy: N,
    groupBy: k,
    fold: y,
    fold1: A,
    foldl: x,
    foldl1: b,
    foldr: v,
    foldr1: C,
    unfoldr: T,
    andList: j,
    orList: O,
    any: z,
    all: te,
    unique: d,
    uniqueBy: g,
    sort: se,
    sortWith: ye,
    sortBy: Se,
    sum: xe,
    product: Ae,
    mean: _e,
    average: H,
    concat: w,
    concatMap: B,
    flatten: I,
    maximum: Q,
    minimum: ge,
    maximumBy: ae,
    minimumBy: ee,
    scan: he,
    scan1: D,
    scanl: R,
    scanl1: U,
    scanr: ne,
    scanr1: pe,
    slice: Ee,
    take: Re,
    drop: We,
    splitAt: wt,
    takeWhile: Lt,
    dropWhile: et,
    span: Ge,
    breakList: mt,
    zip: tr,
    zipWith: vr,
    zipAll: Er,
    zipAllWith: hr,
    at: P,
    elemIndex: It,
    elemIndices: St,
    findIndex: rr,
    findIndices: Te
  };
  function Be(Z, W) {
    var G, J = function(le) {
      return Z.length > 1 ? function() {
        var ce = le ? le.concat() : [];
        return G = W ? G || this : this, ce.push.apply(ce, arguments) < Z.length && arguments.length ? J.call(G, ce) : Z.apply(G, ce);
      } : Z;
    };
    return J();
  }
  function At(Z, W) {
    for (var G = -1, J = W.length >>> 0; ++G < J; )
      if (Z === W[G])
        return true;
    return false;
  }
  function bt() {
    var Z = arguments;
    return function() {
      var W, G;
      for (G = Z[0].apply(this, arguments), W = 1; W < Z.length; ++W)
        G = Z[W](G);
      return G;
    };
  }
  function Ce(Z) {
    return !Z;
  }
  return ho;
}
var mo;
var Cg;
function J_() {
  if (Cg)
    return mo;
  Cg = 1;
  var t4, e, r, s, n, a, o, l, i, u, c, f, h, p;
  t4 = function(d) {
    var g, y, x = [];
    for (g in d)
      y = d[g], x.push(y);
    return x;
  }, e = function(d) {
    var g, y = [];
    for (g in d)
      y.push(g);
    return y;
  }, r = function(d) {
    var g, y, x, A = {};
    for (g = 0, y = d.length; g < y; ++g)
      x = d[g], A[x[0]] = x[1];
    return A;
  }, s = function(d) {
    var g, y, x = [];
    for (g in d)
      y = d[g], x.push([g, y]);
    return x;
  }, n = m(function(d, g) {
    var y, x, A, b, v = {};
    for (y = 0, x = d.length; y < x; ++y)
      A = y, b = d[y], v[b] = g[A];
    return v;
  }), a = function(d) {
    var g, y, x, A;
    g = [], y = [];
    for (x in d)
      A = d[x], g.push(x), y.push(A);
    return [g, y];
  }, o = function(d) {
    var g;
    for (g in d)
      return false;
    return true;
  }, l = m(function(d, g) {
    var y, x;
    for (y in g)
      x = g[y], d(x);
    return g;
  }), i = m(function(d, g) {
    var y, x, A = {};
    for (y in g)
      x = g[y], A[y] = d(x);
    return A;
  }), u = function(d) {
    var g, y, x = {};
    for (g in d)
      y = d[g], y && (x[g] = y);
    return x;
  }, c = m(function(d, g) {
    var y, x, A = {};
    for (y in g)
      x = g[y], d(x) && (A[y] = x);
    return A;
  }), f = m(function(d, g) {
    var y, x, A = {};
    for (y in g)
      x = g[y], d(x) || (A[y] = x);
    return A;
  }), h = m(function(d, g) {
    var y, x, A, b;
    y = {}, x = {};
    for (A in g)
      b = g[A], (d(b) ? y : x)[A] = b;
    return [y, x];
  }), p = m(function(d, g) {
    var y, x;
    for (y in g)
      if (x = g[y], d(x))
        return x;
  }), mo = {
    values: t4,
    keys: e,
    pairsToObj: r,
    objToPairs: s,
    listsToObj: n,
    objToLists: a,
    empty: o,
    each: l,
    map: i,
    filter: c,
    compact: u,
    reject: f,
    partition: h,
    find: p
  };
  function m(d, g) {
    var y, x = function(A) {
      return d.length > 1 ? function() {
        var b = A ? A.concat() : [];
        return y = g ? y || this : this, b.push.apply(b, arguments) < d.length && arguments.length ? x.call(y, b) : d.apply(y, b);
      } : d;
    };
    return x();
  }
  return mo;
}
var go;
var Sg;
function X_() {
  if (Sg)
    return go;
  Sg = 1;
  var t4, e, r, s, n, a, o, l, i, u, c, f, h;
  t4 = p(function(m, d) {
    return d.split(m);
  }), e = p(function(m, d) {
    return d.join(m);
  }), r = function(m) {
    return m.length ? m.split(`
`) : [];
  }, s = function(m) {
    return m.join(`
`);
  }, n = function(m) {
    return m.length ? m.split(/[ ]+/) : [];
  }, a = function(m) {
    return m.join(" ");
  }, o = function(m) {
    return m.split("");
  }, l = function(m) {
    return m.join("");
  }, i = function(m) {
    return m.split("").reverse().join("");
  }, u = p(function(m, d) {
    var g, y;
    for (g = "", y = 0; y < m; ++y)
      g += d;
    return g;
  }), c = function(m) {
    return m.charAt(0).toUpperCase() + m.slice(1);
  }, f = function(m) {
    return m.replace(/[-_]+(.)?/g, function(d, g) {
      return (g ?? "").toUpperCase();
    });
  }, h = function(m) {
    return m.replace(/([^-A-Z])([A-Z]+)/g, function(d, g, y) {
      return g + "-" + (y.length > 1 ? y : y.toLowerCase());
    }).replace(/^([A-Z]+)/, function(d, g) {
      return g.length > 1 ? g + "-" : g.toLowerCase();
    });
  }, go = {
    split: t4,
    join: e,
    lines: r,
    unlines: s,
    words: n,
    unwords: a,
    chars: o,
    unchars: l,
    reverse: i,
    repeat: u,
    capitalize: c,
    camelize: f,
    dasherize: h
  };
  function p(m, d) {
    var g, y = function(x) {
      return m.length > 1 ? function() {
        var A = x ? x.concat() : [];
        return g = d ? g || this : this, A.push.apply(A, arguments) < m.length && arguments.length ? y.call(g, A) : m.apply(g, A);
      } : m;
    };
    return y();
  }
  return go;
}
var yo;
var Ag;
function Q_() {
  if (Ag)
    return yo;
  Ag = 1;
  var t4, e, r, s, n, a, o, l, i, u, c, f, h, p, m, d, g, y, x, A, b, v, C, T, w, B, I, _, S, F, N, k;
  t4 = j(function(O, z) {
    return O > z ? O : z;
  }), e = j(function(O, z) {
    return O < z ? O : z;
  }), r = function(O) {
    return -O;
  }, s = Math.abs, n = function(O) {
    return O < 0 ? -1 : O > 0 ? 1 : 0;
  }, a = j(function(O, z) {
    return ~~(O / z);
  }), o = j(function(O, z) {
    return O % z;
  }), l = j(function(O, z) {
    return Math.floor(O / z);
  }), i = j(function(O, z) {
    var te;
    return (O % (te = z) + te) % te;
  }), u = function(O) {
    return 1 / O;
  }, c = Math.PI, f = c * 2, h = Math.exp, p = Math.sqrt, m = Math.log, d = j(function(O, z) {
    return Math.pow(O, z);
  }), g = Math.sin, y = Math.tan, x = Math.cos, A = Math.asin, b = Math.acos, v = Math.atan, C = j(function(O, z) {
    return Math.atan2(O, z);
  }), T = function(O) {
    return ~~O;
  }, w = Math.round, B = Math.ceil, I = Math.floor, _ = function(O) {
    return O !== O;
  }, S = function(O) {
    return O % 2 === 0;
  }, F = function(O) {
    return O % 2 !== 0;
  }, N = j(function(O, z) {
    var te;
    for (O = Math.abs(O), z = Math.abs(z); z !== 0; )
      te = O % z, O = z, z = te;
    return O;
  }), k = j(function(O, z) {
    return Math.abs(Math.floor(O / N(O, z) * z));
  }), yo = {
    max: t4,
    min: e,
    negate: r,
    abs: s,
    signum: n,
    quot: a,
    rem: o,
    div: l,
    mod: i,
    recip: u,
    pi: c,
    tau: f,
    exp: h,
    sqrt: p,
    ln: m,
    pow: d,
    sin: g,
    tan: y,
    cos: x,
    acos: b,
    asin: A,
    atan: v,
    atan2: C,
    truncate: T,
    round: w,
    ceiling: B,
    floor: I,
    isItNaN: _,
    even: S,
    odd: F,
    gcd: N,
    lcm: k
  };
  function j(O, z) {
    var te, se = function(ye) {
      return O.length > 1 ? function() {
        var Se = ye ? ye.concat() : [];
        return te = z ? te || this : this, Se.push.apply(Se, arguments) < O.length && arguments.length ? se.call(te, Se) : O.apply(te, Se);
      } : O;
    };
    return se();
  }
  return yo;
}
var xo;
var Dg;
function pE() {
  if (Dg)
    return xo;
  Dg = 1;
  var t4, e, r, s, n, a, o, l, i, u = {}.toString;
  t4 = H_(), e = K_(), r = J_(), s = X_(), n = Q_(), a = function(f) {
    return f;
  }, o = c(function(f, h) {
    return u.call(h).slice(8, -1) === f;
  }), l = c(function(f, h) {
    var p, m = [];
    for (p = 0; p < f; ++p)
      m.push(h);
    return m;
  }), s.empty = e.empty, s.slice = e.slice, s.take = e.take, s.drop = e.drop, s.splitAt = e.splitAt, s.takeWhile = e.takeWhile, s.dropWhile = e.dropWhile, s.span = e.span, s.breakStr = e.breakList, i = {
    Func: t4,
    List: e,
    Obj: r,
    Str: s,
    Num: n,
    id: a,
    isType: o,
    replicate: l
  }, i.each = e.each, i.map = e.map, i.filter = e.filter, i.compact = e.compact, i.reject = e.reject, i.partition = e.partition, i.find = e.find, i.head = e.head, i.first = e.first, i.tail = e.tail, i.last = e.last, i.initial = e.initial, i.empty = e.empty, i.reverse = e.reverse, i.difference = e.difference, i.intersection = e.intersection, i.union = e.union, i.countBy = e.countBy, i.groupBy = e.groupBy, i.fold = e.fold, i.foldl = e.foldl, i.fold1 = e.fold1, i.foldl1 = e.foldl1, i.foldr = e.foldr, i.foldr1 = e.foldr1, i.unfoldr = e.unfoldr, i.andList = e.andList, i.orList = e.orList, i.any = e.any, i.all = e.all, i.unique = e.unique, i.uniqueBy = e.uniqueBy, i.sort = e.sort, i.sortWith = e.sortWith, i.sortBy = e.sortBy, i.sum = e.sum, i.product = e.product, i.mean = e.mean, i.average = e.average, i.concat = e.concat, i.concatMap = e.concatMap, i.flatten = e.flatten, i.maximum = e.maximum, i.minimum = e.minimum, i.maximumBy = e.maximumBy, i.minimumBy = e.minimumBy, i.scan = e.scan, i.scanl = e.scanl, i.scan1 = e.scan1, i.scanl1 = e.scanl1, i.scanr = e.scanr, i.scanr1 = e.scanr1, i.slice = e.slice, i.take = e.take, i.drop = e.drop, i.splitAt = e.splitAt, i.takeWhile = e.takeWhile, i.dropWhile = e.dropWhile, i.span = e.span, i.breakList = e.breakList, i.zip = e.zip, i.zipWith = e.zipWith, i.zipAll = e.zipAll, i.zipAllWith = e.zipAllWith, i.at = e.at, i.elemIndex = e.elemIndex, i.elemIndices = e.elemIndices, i.findIndex = e.findIndex, i.findIndices = e.findIndices, i.apply = t4.apply, i.curry = t4.curry, i.flip = t4.flip, i.fix = t4.fix, i.over = t4.over, i.split = s.split, i.join = s.join, i.lines = s.lines, i.unlines = s.unlines, i.words = s.words, i.unwords = s.unwords, i.chars = s.chars, i.unchars = s.unchars, i.repeat = s.repeat, i.capitalize = s.capitalize, i.camelize = s.camelize, i.dasherize = s.dasherize, i.values = r.values, i.keys = r.keys, i.pairsToObj = r.pairsToObj, i.objToPairs = r.objToPairs, i.listsToObj = r.listsToObj, i.objToLists = r.objToLists, i.max = n.max, i.min = n.min, i.negate = n.negate, i.abs = n.abs, i.signum = n.signum, i.quot = n.quot, i.rem = n.rem, i.div = n.div, i.mod = n.mod, i.recip = n.recip, i.pi = n.pi, i.tau = n.tau, i.exp = n.exp, i.sqrt = n.sqrt, i.ln = n.ln, i.pow = n.pow, i.sin = n.sin, i.tan = n.tan, i.cos = n.cos, i.acos = n.acos, i.asin = n.asin, i.atan = n.atan, i.atan2 = n.atan2, i.truncate = n.truncate, i.round = n.round, i.ceiling = n.ceiling, i.floor = n.floor, i.isItNaN = n.isItNaN, i.even = n.even, i.odd = n.odd, i.gcd = n.gcd, i.lcm = n.lcm, i.VERSION = "1.2.1", xo = i;
  function c(f, h) {
    var p, m = function(d) {
      return f.length > 1 ? function() {
        var g = d ? d.concat() : [];
        return p = h ? p || this : this, g.push.apply(g, arguments) < f.length && arguments.length ? m.call(p, g) : f.apply(p, g);
      } : f;
    };
    return m();
  }
  return xo;
}
var wg;
function Y_() {
  return wg || (wg = 1, (function() {
    var t4, e, r;
    t4 = pE().reject;
    function s(p, m) {
      if (p[0] === m)
        return p.shift();
      throw new Error("Expected '" + m + "', but got '" + p[0] + "' instead in " + JSON.stringify(p) + ".");
    }
    function n(p, m) {
      if (p[0] === m)
        return p.shift();
    }
    function a(p, m, d) {
      var g, y, x, A;
      for (g = m[0], y = m[1], d && s(p, g), x = [], A = "," + (d ? y : ""); p.length && d && p[0] !== y; )
        x.push(c(p, A)), n(p, ",");
      return d && s(p, y), x;
    }
    function o(p, m) {
      return a(p, ["[", "]"], m);
    }
    function l(p, m) {
      return a(p, ["(", ")"], m);
    }
    function i(p, m) {
      var d, g, y;
      for (m && s(p, "{"), d = {}, g = "," + (m ? "}" : ""); p.length && (!m || p[0] !== "}"); )
        y = u(p, ":"), s(p, ":"), d[y] = c(p, g), n(p, ",");
      return m && s(p, "}"), d;
    }
    function u(p, m) {
      var d;
      for (m == null && (m = ""), d = ""; p.length && m.indexOf(p[0]) === -1; )
        d += p.shift();
      return d;
    }
    function c(p, m) {
      switch (p[0]) {
        case "[":
          return o(p, true);
        case "(":
          return l(p, true);
        case "{":
          return i(p, true);
        default:
          return u(p, m);
      }
    }
    function f(p, m, d) {
      var g, y, x, A, b, v, C, T;
      return g = m[0], y = g.type, x = g.structure, A = p.concat(), !d.explicit && m.length === 1 && (!y && x || y === "Array" || y === "Object") ? (b = x === "array" || y === "Array" ? o(p, p[0] === "[") : x === "tuple" ? l(p, p[0] === "(") : i(p, p[0] === "{"), v = p.length ? c(x === "array" || y === "Array" ? (C = A, C.unshift("["), C.push("]"), C) : (T = A, T.unshift("("), T.push(")"), T)) : b) : v = c(p), v;
    }
    e = /\[\]\(\)}{:,/.source, r = RegExp(`("(?:\\\\"|[^"])*")|('(?:\\\\'|[^'])*')|(/(?:\\\\/|[^/])*/[a-zA-Z]*)|(#.*#)|([` + e + "])|([^\\s" + e + "](?:\\s*[^\\s" + e + "]+)*)|\\s*"), po.exports = function(p, m, d) {
      var g, y;
      if (d == null && (d = {}), !d.explicit && p.length === 1 && p[0].type === "String")
        return m;
      if (g = t4(h, m.split(r)), y = f(g, p, d), !y)
        throw new Error("Error parsing '" + m + "'.");
      return y;
    };
    function h(p) {
      return !p;
    }
  }).call(mr)), po.exports;
}
var vo = { exports: {} };
var Eo = { exports: {} };
var bo = { exports: {} };
var kg;
function Z_() {
  return kg || (kg = 1, (function() {
    var t4, e;
    t4 = /[\$\w]+/;
    function r(m) {
      var d;
      if (d = m[0], d == null)
        throw new Error("Unexpected end of input.");
      return d;
    }
    function s(m) {
      var d;
      if (d = r(m), !t4.test(d))
        throw new Error("Expected text, got '" + d + "' instead.");
      return m.shift();
    }
    function n(m, d) {
      var g;
      if (g = r(m), g !== d)
        throw new Error("Expected '" + d + "', got '" + g + "' instead.");
      return m.shift();
    }
    function a(m, d) {
      var g;
      return g = m[0], g === d ? m.shift() : null;
    }
    function o(m) {
      var d;
      if (n(m, "["), r(m) === "]")
        throw new Error("Must specify type of Array - eg. [Type], got [] instead.");
      return d = h(m), n(m, "]"), {
        structure: "array",
        of: d
      };
    }
    function l(m) {
      var d;
      if (d = [], n(m, "("), r(m) === ")")
        throw new Error("Tuple must be of at least length 1 - eg. (Type), got () instead.");
      for (; d.push(h(m)), a(m, ","), r(m) !== ")"; )
        ;
      return n(m, ")"), {
        structure: "tuple",
        of: d
      };
    }
    function i(m) {
      var d, g, y, x, A;
      for (d = {}, n(m, "{"), g = false; ; ) {
        if (a(m, "...")) {
          g = true;
          break;
        }
        if (y = u(m), x = y[0], A = y[1], d[x] = A, a(m, ","), r(m) === "}")
          break;
      }
      return n(m, "}"), {
        structure: "fields",
        of: d,
        subset: g
      };
    }
    function u(m) {
      var d, g;
      return d = s(m), n(m, ":"), g = h(m), [d, g];
    }
    function c(m) {
      switch (m[0]) {
        case "[":
          return o(m);
        case "(":
          return l(m);
        case "{":
          return i(m);
      }
    }
    function f(m) {
      var d, g, y, x;
      if (d = r(m), g = d === "*", g || t4.test(d))
        return y = g ? n(m, "*") : s(m), x = c(m), x ? (x.type = y, x) : {
          type: y
        };
      if (x = c(m), !x)
        throw new Error("Unexpected character: " + d);
      return x;
    }
    function h(m) {
      var d, g, y, x, A, b;
      if (r(m) === "::")
        throw new Error("No comment before comment separator '::' found.");
      for (d = m[1], d != null && d === "::" && (m.shift(), m.shift()), g = [], y = {}, r(m) === "Maybe" && (m.shift(), g = [
        {
          type: "Undefined"
        },
        {
          type: "Null"
        }
      ], y = {
        Undefined: true,
        Null: true
      }); x = f(m), A = x.type, b = x.structure, y[A] || g.push(x), b == null && (y[A] = true), !!a(m, "|"); )
        ;
      return g;
    }
    e = RegExp("\\.\\.\\.|::|->|" + t4.source + "|\\S", "g"), bo.exports = function(m) {
      var d, g;
      if (!m.length)
        throw new Error("No type specified.");
      if (d = m.match(e) || [], p("->", d))
        throw new Error("Function types are not supported. To validate that something is a function, you may use 'Function'.");
      try {
        return h(d);
      } catch (y) {
        throw g = y, new Error(g.message + " - Remaining tokens: " + JSON.stringify(d) + " - Initial input: '" + m + "'");
      }
    };
    function p(m, d) {
      for (var g = -1, y = d.length >>> 0; ++g < y; )
        if (m === d[g])
          return true;
      return false;
    }
  }).call(mr)), bo.exports;
}
var Co = { exports: {} };
var Tg;
function e2() {
  return Tg || (Tg = 1, (function() {
    var t4, e, r, s, n, a, o = {}.toString;
    t4 = pE(), e = t4.any, r = t4.all, s = t4.isItNaN, n = {
      Number: {
        typeOf: "Number",
        validate: function(p) {
          return !s(p);
        }
      },
      NaN: {
        typeOf: "Number",
        validate: s
      },
      Int: {
        typeOf: "Number",
        validate: function(p) {
          return !s(p) && p % 1 === 0;
        }
      },
      Float: {
        typeOf: "Number",
        validate: function(p) {
          return !s(p);
        }
      },
      Date: {
        typeOf: "Date",
        validate: function(p) {
          return !s(p.getTime());
        }
      }
    }, a = {
      array: "Array",
      tuple: "Array"
    };
    function l(p, m, d) {
      return r(function(g) {
        return h(g, m.of, d);
      }, p);
    }
    function i(p, m, d) {
      var g, y, x, A, b;
      for (g = 0, y = 0, A = (x = m.of).length; y < A; ++y) {
        if (b = x[y], !h(p[g], b, d))
          return false;
        g++;
      }
      return p.length <= g;
    }
    function u(p, m, d) {
      var g, y, x, A, b, v, C;
      g = {}, y = 0;
      for (x in p)
        g[x] = true, y++;
      A = 0;
      for (b in v = m.of) {
        if (C = v[b], !h(p[b], C, d))
          return false;
        g[b] && A++;
      }
      return m.subset || y === A;
    }
    function c(p, m, d) {
      if (!(p instanceof Object))
        return false;
      switch (m.structure) {
        case "fields":
          return u(p, m, d);
        case "array":
          return l(p, m, d);
        case "tuple":
          return i(p, m, d);
      }
    }
    function f(p, m, d) {
      var g, y, x, A;
      if (g = m.type, y = m.structure, g)
        return g === "*" ? true : (x = d.customTypes[g] || n[g], x ? (x.typeOf === void 0 || x.typeOf === o.call(p).slice(8, -1)) && x.validate(p) : g === o.call(p).slice(8, -1) && (!y || c(p, m, d)));
      if (y)
        return (A = a[y]) && A !== o.call(p).slice(8, -1) ? false : c(p, m, d);
      throw new Error("No type defined. Input: " + p + ".");
    }
    function h(p, m, d) {
      if (o.call(m).slice(8, -1) !== "Array")
        throw new Error("Types must be in an array. Input: " + p + ".");
      return e(function(g) {
        return f(p, g, d);
      }, m);
    }
    Co.exports = function(p, m, d) {
      return d == null && (d = {}), d.customTypes == null && (d.customTypes = {}), h(m, p, d);
    };
  }).call(mr)), Co.exports;
}
var Fg;
function fE() {
  return Fg || (Fg = 1, (function() {
    var t4, e, r, s;
    t4 = "0.4.0", e = Z_(), r = e2(), s = function(n, a, o) {
      return r(e(n), a, o);
    }, Eo.exports = {
      VERSION: t4,
      typeCheck: s,
      parsedTypeCheck: r,
      parseType: e
    };
  }).call(mr)), Eo.exports;
}
var Pg;
function t2() {
  return Pg || (Pg = 1, (function() {
    var t4, e, r = {}.toString;
    t4 = fE().parsedTypeCheck, e = {
      "*": function(i, u) {
        switch (r.call(i).slice(8, -1)) {
          case "Array":
            return o(i, {
              type: "Array"
            }, u);
          case "Object":
            return o(i, {
              type: "Object"
            }, u);
          default:
            return {
              type: "Just",
              value: l(i, [
                {
                  type: "Undefined"
                },
                {
                  type: "Null"
                },
                {
                  type: "NaN"
                },
                {
                  type: "Boolean"
                },
                {
                  type: "Number"
                },
                {
                  type: "Date"
                },
                {
                  type: "RegExp"
                },
                {
                  type: "Array"
                },
                {
                  type: "Object"
                },
                {
                  type: "String"
                }
              ], (u.explicit = true, u))
            };
        }
      },
      Undefined: function(i) {
        return i === "undefined" || i === void 0 ? {
          type: "Just",
          value: void 0
        } : {
          type: "Nothing"
        };
      },
      Null: function(i) {
        return i === "null" ? {
          type: "Just",
          value: null
        } : {
          type: "Nothing"
        };
      },
      NaN: function(i) {
        return i === "NaN" ? {
          type: "Just",
          value: NaN
        } : {
          type: "Nothing"
        };
      },
      Boolean: function(i) {
        return i === "true" ? {
          type: "Just",
          value: true
        } : i === "false" ? {
          type: "Just",
          value: false
        } : {
          type: "Nothing"
        };
      },
      Number: function(i) {
        return {
          type: "Just",
          value: +i
        };
      },
      Int: function(i) {
        return {
          type: "Just",
          value: +i
        };
      },
      Float: function(i) {
        return {
          type: "Just",
          value: +i
        };
      },
      Date: function(i, u) {
        var c;
        return (c = /^\#([\s\S]*)\#$/.exec(i)) ? {
          type: "Just",
          value: new Date(+c[1] || c[1])
        } : u.explicit ? {
          type: "Nothing"
        } : {
          type: "Just",
          value: new Date(+i || i)
        };
      },
      RegExp: function(i, u) {
        var c;
        return (c = /^\/([\s\S]*)\/([gimy]*)$/.exec(i)) ? {
          type: "Just",
          value: new RegExp(c[1], c[2])
        } : u.explicit ? {
          type: "Nothing"
        } : {
          type: "Just",
          value: new RegExp(i)
        };
      },
      Array: function(i, u) {
        return s(i, {
          of: [{
            type: "*"
          }]
        }, u);
      },
      Object: function(i, u) {
        return a(i, {
          of: {}
        }, u);
      },
      String: function(i) {
        var u, c;
        return r.call(i).slice(8, -1) !== "String" ? {
          type: "Nothing"
        } : (u = function(f, h) {
          return f.replace(/\\([^u]|u[0-9a-fA-F]{4})/g, function(p, m) {
            switch (m[0]) {
              case h:
                return h;
              case "\\":
                return "\\";
              case "b":
                return "\b";
              case "f":
                return "\f";
              case "n":
                return `
`;
              case "r":
                return "\r";
              case "t":
                return "	";
              case "u":
                return JSON.parse('"' + p + '"');
              default:
                return m;
            }
          });
        }, (c = i.match(/^'([\s\S]*)'$/)) ? {
          type: "Just",
          value: u(c[1], "'")
        } : (c = i.match(/^"([\s\S]*)"$/)) ? {
          type: "Just",
          value: u(c[1], '"')
        } : {
          type: "Just",
          value: i
        });
      }
    };
    function s(i, u, c) {
      var f, h;
      return r.call(i).slice(8, -1) !== "Array" ? {
        type: "Nothing"
      } : (f = u.of, {
        type: "Just",
        value: function() {
          var p, m, d, g = [];
          for (p = 0, d = (m = i).length; p < d; ++p)
            h = m[p], g.push(l(h, f, c));
          return g;
        }()
      });
    }
    function n(i, u, c) {
      var f, h, p, m, d, g, y;
      if (r.call(i).slice(8, -1) !== "Array")
        return {
          type: "Nothing"
        };
      for (f = [], h = 0, p = 0, d = (m = u.of).length; p < d; ++p)
        g = m[p], y = l(i[h], g, c), r.call(y).slice(8, -1) !== "Undefined" && f.push(y), h++;
      return i.length <= h ? {
        type: "Just",
        value: f
      } : {
        type: "Nothing"
      };
    }
    function a(i, u, c) {
      var f, h, p;
      return r.call(i).slice(8, -1) !== "Object" ? {
        type: "Nothing"
      } : (f = u.of, {
        type: "Just",
        value: function() {
          var m, d = {};
          for (h in m = i)
            p = m[h], d[l(h, [{
              type: "String"
            }], c)] = l(p, f[h] || [{
              type: "*"
            }], c);
          return d;
        }()
      });
    }
    function o(i, u, c) {
      var f, h, p, m;
      if (f = u.type, h = u.structure, f) {
        if (p = ((m = c.customTypes[f]) != null ? m.cast : void 0) || e[f], !p)
          throw new Error("Type not defined: " + f + ".");
        return p(i, c, l);
      } else
        switch (h) {
          case "array":
            return s(i, u, c);
          case "tuple":
            return n(i, u, c);
          case "fields":
            return a(i, u, c);
        }
    }
    function l(i, u, c) {
      var f, h, p, m, d, g;
      for (f = 0, h = u.length; f < h; ++f)
        if (p = u[f], m = o(i, p, c), d = m.type, g = m.value, d !== "Nothing" && t4([p], g, {
          customTypes: c.customTypes
        }))
          return g;
      throw new Error("Value " + JSON.stringify(i) + " does not type check against " + JSON.stringify(u) + ".");
    }
    vo.exports = function(i, u, c) {
      return !c.explicit && u.length === 1 && u[0].type === "String" ? i : l(i, u, c);
    };
  }).call(mr)), vo.exports;
}
(function() {
  var t4, e, r, s, n, a;
  t4 = Y_(), e = t2(), r = fE().parseType, s = "0.4.1", n = function(o, l, i) {
    return i == null && (i = {}), i.explicit == null && (i.explicit = false), i.customTypes == null && (i.customTypes = {}), e(t4(o, l, i), o, i);
  }, a = function(o, l, i) {
    return n(r(o), l, i);
  }, cE.exports = {
    VERSION: s,
    parse: a,
    parsedTypeParse: n
  };
}).call(mr);
function es(t4) {
  return (es = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(e) {
    return typeof e;
  } : function(e) {
    return e && typeof Symbol == "function" && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
  })(t4);
}
function Bi(t4, e) {
  return function(r) {
    if (Array.isArray(r))
      return r;
  }(t4) || function(r, s) {
    if (!(typeof Symbol > "u" || !(Symbol.iterator in Object(r)))) {
      var n = [], a = true, o = false, l = void 0;
      try {
        for (var i, u = r[Symbol.iterator](); !(a = (i = u.next()).done) && (n.push(i.value), !s || n.length !== s); a = true)
          ;
      } catch (c) {
        o = true, l = c;
      } finally {
        try {
          a || u.return == null || u.return();
        } finally {
          if (o)
            throw l;
        }
      }
      return n;
    }
  }(t4, e) || $u(t4, e) || function() {
    throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
  }();
}
function r2(t4) {
  return function(e) {
    if (Array.isArray(e))
      return bl(e);
  }(t4) || function(e) {
    if (typeof Symbol < "u" && Symbol.iterator in Object(e))
      return Array.from(e);
  }(t4) || $u(t4) || function() {
    throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
  }();
}
function $u(t4, e) {
  if (t4) {
    if (typeof t4 == "string")
      return bl(t4, e);
    var r = Object.prototype.toString.call(t4).slice(8, -1);
    return r === "Object" && t4.constructor && (r = t4.constructor.name), r === "Map" || r === "Set" ? Array.from(t4) : r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? bl(t4, e) : void 0;
  }
}
function bl(t4, e) {
  (e == null || e > t4.length) && (e = t4.length);
  for (var r = 0, s = new Array(e); r < e; r++)
    s[r] = t4[r];
  return s;
}
function Nr(t4, e) {
  var r;
  if (typeof Symbol > "u" || t4[Symbol.iterator] == null) {
    if (Array.isArray(t4) || (r = $u(t4)) || e && t4 && typeof t4.length == "number") {
      r && (t4 = r);
      var s = 0, n = function() {
      };
      return { s: n, n: function() {
        return s >= t4.length ? { done: true } : { done: false, value: t4[s++] };
      }, e: function(i) {
        throw i;
      }, f: n };
    }
    throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
  }
  var a, o = true, l = false;
  return { s: function() {
    r = t4[Symbol.iterator]();
  }, n: function() {
    var i = r.next();
    return o = i.done, i;
  }, e: function(i) {
    l = true, a = i;
  }, f: function() {
    try {
      o || r.return == null || r.return();
    } finally {
      if (l)
        throw a;
    }
  } };
}
function hE(t4, e) {
  return t4(e = { exports: {} }, e.exports), e.exports;
}
var Ya = hE(function(t4, e) {
  (function r(s) {
    var n, a, o, l, i, u;
    function c(A) {
      var b, v, C = {};
      for (b in A)
        A.hasOwnProperty(b) && (v = A[b], C[b] = typeof v == "object" && v !== null ? c(v) : v);
      return C;
    }
    function f(A, b) {
      this.parent = A, this.key = b;
    }
    function h(A, b, v, C) {
      this.node = A, this.path = b, this.wrap = v, this.ref = C;
    }
    function p() {
    }
    function m(A) {
      return A != null && typeof A == "object" && typeof A.type == "string";
    }
    function d(A, b) {
      return (A === n.ObjectExpression || A === n.ObjectPattern) && b === "properties";
    }
    function g(A, b) {
      for (var v = A.length - 1; v >= 0; --v)
        if (A[v].node === b)
          return true;
      return false;
    }
    function y(A, b) {
      return new p().traverse(A, b);
    }
    function x(A, b) {
      var v;
      return v = function(C, T) {
        var w, B, I, _;
        for (B = C.length, I = 0; B; )
          T(C[_ = I + (w = B >>> 1)]) ? B = w : (I = _ + 1, B -= w + 1);
        return I;
      }(b, function(C) {
        return C.range[0] > A.range[0];
      }), A.extendedRange = [A.range[0], A.range[1]], v !== b.length && (A.extendedRange[1] = b[v].range[0]), (v -= 1) >= 0 && (A.extendedRange[0] = b[v].range[1]), A;
    }
    return n = { AssignmentExpression: "AssignmentExpression", AssignmentPattern: "AssignmentPattern", ArrayExpression: "ArrayExpression", ArrayPattern: "ArrayPattern", ArrowFunctionExpression: "ArrowFunctionExpression", AwaitExpression: "AwaitExpression", BlockStatement: "BlockStatement", BinaryExpression: "BinaryExpression", BreakStatement: "BreakStatement", CallExpression: "CallExpression", CatchClause: "CatchClause", ChainExpression: "ChainExpression", ClassBody: "ClassBody", ClassDeclaration: "ClassDeclaration", ClassExpression: "ClassExpression", ComprehensionBlock: "ComprehensionBlock", ComprehensionExpression: "ComprehensionExpression", ConditionalExpression: "ConditionalExpression", ContinueStatement: "ContinueStatement", DebuggerStatement: "DebuggerStatement", DirectiveStatement: "DirectiveStatement", DoWhileStatement: "DoWhileStatement", EmptyStatement: "EmptyStatement", ExportAllDeclaration: "ExportAllDeclaration", ExportDefaultDeclaration: "ExportDefaultDeclaration", ExportNamedDeclaration: "ExportNamedDeclaration", ExportSpecifier: "ExportSpecifier", ExpressionStatement: "ExpressionStatement", ForStatement: "ForStatement", ForInStatement: "ForInStatement", ForOfStatement: "ForOfStatement", FunctionDeclaration: "FunctionDeclaration", FunctionExpression: "FunctionExpression", GeneratorExpression: "GeneratorExpression", Identifier: "Identifier", IfStatement: "IfStatement", ImportExpression: "ImportExpression", ImportDeclaration: "ImportDeclaration", ImportDefaultSpecifier: "ImportDefaultSpecifier", ImportNamespaceSpecifier: "ImportNamespaceSpecifier", ImportSpecifier: "ImportSpecifier", Literal: "Literal", LabeledStatement: "LabeledStatement", LogicalExpression: "LogicalExpression", MemberExpression: "MemberExpression", MetaProperty: "MetaProperty", MethodDefinition: "MethodDefinition", ModuleSpecifier: "ModuleSpecifier", NewExpression: "NewExpression", ObjectExpression: "ObjectExpression", ObjectPattern: "ObjectPattern", Program: "Program", Property: "Property", RestElement: "RestElement", ReturnStatement: "ReturnStatement", SequenceExpression: "SequenceExpression", SpreadElement: "SpreadElement", Super: "Super", SwitchStatement: "SwitchStatement", SwitchCase: "SwitchCase", TaggedTemplateExpression: "TaggedTemplateExpression", TemplateElement: "TemplateElement", TemplateLiteral: "TemplateLiteral", ThisExpression: "ThisExpression", ThrowStatement: "ThrowStatement", TryStatement: "TryStatement", UnaryExpression: "UnaryExpression", UpdateExpression: "UpdateExpression", VariableDeclaration: "VariableDeclaration", VariableDeclarator: "VariableDeclarator", WhileStatement: "WhileStatement", WithStatement: "WithStatement", YieldExpression: "YieldExpression" }, o = { AssignmentExpression: ["left", "right"], AssignmentPattern: ["left", "right"], ArrayExpression: ["elements"], ArrayPattern: ["elements"], ArrowFunctionExpression: ["params", "body"], AwaitExpression: ["argument"], BlockStatement: ["body"], BinaryExpression: ["left", "right"], BreakStatement: ["label"], CallExpression: ["callee", "arguments"], CatchClause: ["param", "body"], ChainExpression: ["expression"], ClassBody: ["body"], ClassDeclaration: ["id", "superClass", "body"], ClassExpression: ["id", "superClass", "body"], ComprehensionBlock: ["left", "right"], ComprehensionExpression: ["blocks", "filter", "body"], ConditionalExpression: ["test", "consequent", "alternate"], ContinueStatement: ["label"], DebuggerStatement: [], DirectiveStatement: [], DoWhileStatement: ["body", "test"], EmptyStatement: [], ExportAllDeclaration: ["source"], ExportDefaultDeclaration: ["declaration"], ExportNamedDeclaration: ["declaration", "specifiers", "source"], ExportSpecifier: ["exported", "local"], ExpressionStatement: ["expression"], ForStatement: ["init", "test", "update", "body"], ForInStatement: ["left", "right", "body"], ForOfStatement: ["left", "right", "body"], FunctionDeclaration: ["id", "params", "body"], FunctionExpression: ["id", "params", "body"], GeneratorExpression: ["blocks", "filter", "body"], Identifier: [], IfStatement: ["test", "consequent", "alternate"], ImportExpression: ["source"], ImportDeclaration: ["specifiers", "source"], ImportDefaultSpecifier: ["local"], ImportNamespaceSpecifier: ["local"], ImportSpecifier: ["imported", "local"], Literal: [], LabeledStatement: ["label", "body"], LogicalExpression: ["left", "right"], MemberExpression: ["object", "property"], MetaProperty: ["meta", "property"], MethodDefinition: ["key", "value"], ModuleSpecifier: [], NewExpression: ["callee", "arguments"], ObjectExpression: ["properties"], ObjectPattern: ["properties"], Program: ["body"], Property: ["key", "value"], RestElement: ["argument"], ReturnStatement: ["argument"], SequenceExpression: ["expressions"], SpreadElement: ["argument"], Super: [], SwitchStatement: ["discriminant", "cases"], SwitchCase: ["test", "consequent"], TaggedTemplateExpression: ["tag", "quasi"], TemplateElement: [], TemplateLiteral: ["quasis", "expressions"], ThisExpression: [], ThrowStatement: ["argument"], TryStatement: ["block", "handler", "finalizer"], UnaryExpression: ["argument"], UpdateExpression: ["argument"], VariableDeclaration: ["declarations"], VariableDeclarator: ["id", "init"], WhileStatement: ["test", "body"], WithStatement: ["object", "body"], YieldExpression: ["argument"] }, a = { Break: l = {}, Skip: i = {}, Remove: u = {} }, f.prototype.replace = function(A) {
      this.parent[this.key] = A;
    }, f.prototype.remove = function() {
      return Array.isArray(this.parent) ? (this.parent.splice(this.key, 1), true) : (this.replace(null), false);
    }, p.prototype.path = function() {
      var A, b, v, C, T;
      function w(B, I) {
        if (Array.isArray(I))
          for (v = 0, C = I.length; v < C; ++v)
            B.push(I[v]);
        else
          B.push(I);
      }
      if (!this.__current.path)
        return null;
      for (T = [], A = 2, b = this.__leavelist.length; A < b; ++A)
        w(T, this.__leavelist[A].path);
      return w(T, this.__current.path), T;
    }, p.prototype.type = function() {
      return this.current().type || this.__current.wrap;
    }, p.prototype.parents = function() {
      var A, b, v;
      for (v = [], A = 1, b = this.__leavelist.length; A < b; ++A)
        v.push(this.__leavelist[A].node);
      return v;
    }, p.prototype.current = function() {
      return this.__current.node;
    }, p.prototype.__execute = function(A, b) {
      var v, C;
      return C = void 0, v = this.__current, this.__current = b, this.__state = null, A && (C = A.call(this, b.node, this.__leavelist[this.__leavelist.length - 1].node)), this.__current = v, C;
    }, p.prototype.notify = function(A) {
      this.__state = A;
    }, p.prototype.skip = function() {
      this.notify(i);
    }, p.prototype.break = function() {
      this.notify(l);
    }, p.prototype.remove = function() {
      this.notify(u);
    }, p.prototype.__initialize = function(A, b) {
      this.visitor = b, this.root = A, this.__worklist = [], this.__leavelist = [], this.__current = null, this.__state = null, this.__fallback = null, b.fallback === "iteration" ? this.__fallback = Object.keys : typeof b.fallback == "function" && (this.__fallback = b.fallback), this.__keys = o, b.keys && (this.__keys = Object.assign(Object.create(this.__keys), b.keys));
    }, p.prototype.traverse = function(A, b) {
      var v, C, T, w, B, I, _, S, F, N, k, j;
      for (this.__initialize(A, b), j = {}, v = this.__worklist, C = this.__leavelist, v.push(new h(A, null, null, null)), C.push(new h(null, null, null, null)); v.length; )
        if ((T = v.pop()) !== j) {
          if (T.node) {
            if (I = this.__execute(b.enter, T), this.__state === l || I === l)
              return;
            if (v.push(j), C.push(T), this.__state === i || I === i)
              continue;
            if (B = (w = T.node).type || T.wrap, !(N = this.__keys[B])) {
              if (!this.__fallback)
                throw new Error("Unknown node type " + B + ".");
              N = this.__fallback(w);
            }
            for (S = N.length; (S -= 1) >= 0; )
              if (k = w[_ = N[S]]) {
                if (Array.isArray(k)) {
                  for (F = k.length; (F -= 1) >= 0; )
                    if (k[F] && !g(C, k[F])) {
                      if (d(B, N[S]))
                        T = new h(k[F], [_, F], "Property", null);
                      else {
                        if (!m(k[F]))
                          continue;
                        T = new h(k[F], [_, F], null, null);
                      }
                      v.push(T);
                    }
                } else if (m(k)) {
                  if (g(C, k))
                    continue;
                  v.push(new h(k, _, null, null));
                }
              }
          }
        } else if (T = C.pop(), I = this.__execute(b.leave, T), this.__state === l || I === l)
          return;
    }, p.prototype.replace = function(A, b) {
      var v, C, T, w, B, I, _, S, F, N, k, j, O;
      function z(te) {
        var se, ye, Se, xe;
        if (te.ref.remove()) {
          for (ye = te.ref.key, xe = te.ref.parent, se = v.length; se--; )
            if ((Se = v[se]).ref && Se.ref.parent === xe) {
              if (Se.ref.key < ye)
                break;
              --Se.ref.key;
            }
        }
      }
      for (this.__initialize(A, b), k = {}, v = this.__worklist, C = this.__leavelist, I = new h(A, null, null, new f(j = { root: A }, "root")), v.push(I), C.push(I); v.length; )
        if ((I = v.pop()) !== k) {
          if ((B = this.__execute(b.enter, I)) !== void 0 && B !== l && B !== i && B !== u && (I.ref.replace(B), I.node = B), this.__state !== u && B !== u || (z(I), I.node = null), this.__state === l || B === l)
            return j.root;
          if ((T = I.node) && (v.push(k), C.push(I), this.__state !== i && B !== i)) {
            if (w = T.type || I.wrap, !(F = this.__keys[w])) {
              if (!this.__fallback)
                throw new Error("Unknown node type " + w + ".");
              F = this.__fallback(T);
            }
            for (_ = F.length; (_ -= 1) >= 0; )
              if (N = T[O = F[_]])
                if (Array.isArray(N)) {
                  for (S = N.length; (S -= 1) >= 0; )
                    if (N[S]) {
                      if (d(w, F[_]))
                        I = new h(N[S], [O, S], "Property", new f(N, S));
                      else {
                        if (!m(N[S]))
                          continue;
                        I = new h(N[S], [O, S], null, new f(N, S));
                      }
                      v.push(I);
                    }
                } else
                  m(N) && v.push(new h(N, O, null, new f(T, O)));
          }
        } else if (I = C.pop(), (B = this.__execute(b.leave, I)) !== void 0 && B !== l && B !== i && B !== u && I.ref.replace(B), this.__state !== u && B !== u || z(I), this.__state === l || B === l)
          return j.root;
      return j.root;
    }, s.Syntax = n, s.traverse = y, s.replace = function(A, b) {
      return new p().replace(A, b);
    }, s.attachComments = function(A, b, v) {
      var C, T, w, B, I = [];
      if (!A.range)
        throw new Error("attachComments needs range information");
      if (!v.length) {
        if (b.length) {
          for (w = 0, T = b.length; w < T; w += 1)
            (C = c(b[w])).extendedRange = [0, A.range[0]], I.push(C);
          A.leadingComments = I;
        }
        return A;
      }
      for (w = 0, T = b.length; w < T; w += 1)
        I.push(x(c(b[w]), v));
      return B = 0, y(A, { enter: function(_) {
        for (var S; B < I.length && !((S = I[B]).extendedRange[1] > _.range[0]); )
          S.extendedRange[1] === _.range[0] ? (_.leadingComments || (_.leadingComments = []), _.leadingComments.push(S), I.splice(B, 1)) : B += 1;
        return B === I.length ? a.Break : I[B].extendedRange[0] > _.range[1] ? a.Skip : void 0;
      } }), B = 0, y(A, { leave: function(_) {
        for (var S; B < I.length && (S = I[B], !(_.range[1] < S.extendedRange[0])); )
          _.range[1] === S.extendedRange[0] ? (_.trailingComments || (_.trailingComments = []), _.trailingComments.push(S), I.splice(B, 1)) : B += 1;
        return B === I.length ? a.Break : I[B].extendedRange[0] > _.range[1] ? a.Skip : void 0;
      } }), A;
    }, s.VisitorKeys = o, s.VisitorOption = a, s.Controller = p, s.cloneEnvironment = function() {
      return r({});
    }, s;
  })(e);
});
var n2 = hE(function(t4) {
  t4.exports && (t4.exports = function() {
    function e(r, s, n, a) {
      this.message = r, this.expected = s, this.found = n, this.location = a, this.name = "SyntaxError", typeof Error.captureStackTrace == "function" && Error.captureStackTrace(this, e);
    }
    return function(r, s) {
      function n() {
        this.constructor = r;
      }
      n.prototype = s.prototype, r.prototype = new n();
    }(e, Error), e.buildMessage = function(r, s) {
      var n = { literal: function(i) {
        return '"' + o(i.text) + '"';
      }, class: function(i) {
        var u, c = "";
        for (u = 0; u < i.parts.length; u++)
          c += i.parts[u] instanceof Array ? l(i.parts[u][0]) + "-" + l(i.parts[u][1]) : l(i.parts[u]);
        return "[" + (i.inverted ? "^" : "") + c + "]";
      }, any: function(i) {
        return "any character";
      }, end: function(i) {
        return "end of input";
      }, other: function(i) {
        return i.description;
      } };
      function a(i) {
        return i.charCodeAt(0).toString(16).toUpperCase();
      }
      function o(i) {
        return i.replace(/\\/g, "\\\\").replace(/"/g, '\\"').replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function(u) {
          return "\\x0" + a(u);
        }).replace(/[\x10-\x1F\x7F-\x9F]/g, function(u) {
          return "\\x" + a(u);
        });
      }
      function l(i) {
        return i.replace(/\\/g, "\\\\").replace(/\]/g, "\\]").replace(/\^/g, "\\^").replace(/-/g, "\\-").replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function(u) {
          return "\\x0" + a(u);
        }).replace(/[\x10-\x1F\x7F-\x9F]/g, function(u) {
          return "\\x" + a(u);
        });
      }
      return "Expected " + function(i) {
        var u, c, f, h = new Array(i.length);
        for (u = 0; u < i.length; u++)
          h[u] = (f = i[u], n[f.type](f));
        if (h.sort(), h.length > 0) {
          for (u = 1, c = 1; u < h.length; u++)
            h[u - 1] !== h[u] && (h[c] = h[u], c++);
          h.length = c;
        }
        switch (h.length) {
          case 1:
            return h[0];
          case 2:
            return h[0] + " or " + h[1];
          default:
            return h.slice(0, -1).join(", ") + ", or " + h[h.length - 1];
        }
      }(r) + " but " + function(i) {
        return i ? '"' + o(i) + '"' : "end of input";
      }(s) + " found.";
    }, { SyntaxError: e, parse: function(r, s) {
      s = s !== void 0 ? s : {};
      var n, a, o, l, i = {}, u = { start: Z }, c = Z, f = qe(" ", false), h = /^[^ [\],():#!=><~+.]/, p = Be([" ", "[", "]", ",", "(", ")", ":", "#", "!", "=", ">", "<", "~", "+", "."], true, false), m = qe(">", false), d = qe("~", false), g = qe("+", false), y = qe(",", false), x = qe("!", false), A = qe("*", false), b = qe("#", false), v = qe("[", false), C = qe("]", false), T = /^[><!]/, w = Be([">", "<", "!"], false, false), B = qe("=", false), I = function(oe) {
        return (oe || "") + "=";
      }, _ = /^[><]/, S = Be([">", "<"], false, false), F = qe(".", false), N = function(oe, be, ke) {
        return { type: "attribute", name: oe, operator: be, value: ke };
      }, k = qe('"', false), j = /^[^\\"]/, O = Be(["\\", '"'], true, false), z = qe("\\", false), te = { type: "any" }, se = function(oe, be) {
        return oe + be;
      }, ye = function(oe) {
        return { type: "literal", value: (be = oe.join(""), be.replace(/\\(.)/g, function(ke, re) {
          switch (re) {
            case "b":
              return "\b";
            case "f":
              return "\f";
            case "n":
              return `
`;
            case "r":
              return "\r";
            case "t":
              return "	";
            case "v":
              return "\v";
            default:
              return re;
          }
        })) };
        var be;
      }, Se = qe("'", false), xe = /^[^\\']/, Ae = Be(["\\", "'"], true, false), _e = /^[0-9]/, H = Be([["0", "9"]], false, false), Q = qe("type(", false), ge = /^[^ )]/, ae = Be([" ", ")"], true, false), ee = qe(")", false), he = /^[imsu]/, R = Be(["i", "m", "s", "u"], false, false), D = qe("/", false), U = /^[^\/]/, ne = Be(["/"], true, false), pe = qe(":not(", false), Ee = qe(":matches(", false), Re = qe(":has(", false), We = qe(":first-child", false), wt = qe(":last-child", false), Lt = qe(":nth-child(", false), et = qe(":nth-last-child(", false), Ge = qe(":", false), mt = qe("statement", true), tr = qe("expression", true), vr = qe("declaration", true), Er = qe("function", true), hr = qe("pattern", true), P = 0, It = [{ line: 1, column: 1 }], St = 0, rr = [], Te = {};
      if ("startRule" in s) {
        if (!(s.startRule in u))
          throw new Error(`Can't start parsing from rule "` + s.startRule + '".');
        c = u[s.startRule];
      }
      function qe(oe, be) {
        return { type: "literal", text: oe, ignoreCase: be };
      }
      function Be(oe, be, ke) {
        return { type: "class", parts: oe, inverted: be, ignoreCase: ke };
      }
      function At(oe) {
        var be, ke = It[oe];
        if (ke)
          return ke;
        for (be = oe - 1; !It[be]; )
          be--;
        for (ke = { line: (ke = It[be]).line, column: ke.column }; be < oe; )
          r.charCodeAt(be) === 10 ? (ke.line++, ke.column = 1) : ke.column++, be++;
        return It[oe] = ke, ke;
      }
      function bt(oe, be) {
        var ke = At(oe), re = At(be);
        return { start: { offset: oe, line: ke.line, column: ke.column }, end: { offset: be, line: re.line, column: re.column } };
      }
      function Ce(oe) {
        P < St || (P > St && (St = P, rr = []), rr.push(oe));
      }
      function Z() {
        var oe, be, ke, re, M = 30 * P + 0, L = Te[M];
        return L ? (P = L.nextPos, L.result) : (oe = P, (be = W()) !== i && (ke = le()) !== i && W() !== i ? oe = be = (re = ke).length === 1 ? re[0] : { type: "matches", selectors: re } : (P = oe, oe = i), oe === i && (oe = P, (be = W()) !== i && (be = void 0), oe = be), Te[M] = { nextPos: P, result: oe }, oe);
      }
      function W() {
        var oe, be, ke = 30 * P + 1, re = Te[ke];
        if (re)
          return P = re.nextPos, re.result;
        for (oe = [], r.charCodeAt(P) === 32 ? (be = " ", P++) : (be = i, Ce(f)); be !== i; )
          oe.push(be), r.charCodeAt(P) === 32 ? (be = " ", P++) : (be = i, Ce(f));
        return Te[ke] = { nextPos: P, result: oe }, oe;
      }
      function G() {
        var oe, be, ke, re = 30 * P + 2, M = Te[re];
        if (M)
          return P = M.nextPos, M.result;
        if (be = [], h.test(r.charAt(P)) ? (ke = r.charAt(P), P++) : (ke = i, Ce(p)), ke !== i)
          for (; ke !== i; )
            be.push(ke), h.test(r.charAt(P)) ? (ke = r.charAt(P), P++) : (ke = i, Ce(p));
        else
          be = i;
        return be !== i && (be = be.join("")), oe = be, Te[re] = { nextPos: P, result: oe }, oe;
      }
      function J() {
        var oe, be, ke, re = 30 * P + 3, M = Te[re];
        return M ? (P = M.nextPos, M.result) : (oe = P, (be = W()) !== i ? (r.charCodeAt(P) === 62 ? (ke = ">", P++) : (ke = i, Ce(m)), ke !== i && W() !== i ? oe = be = "child" : (P = oe, oe = i)) : (P = oe, oe = i), oe === i && (oe = P, (be = W()) !== i ? (r.charCodeAt(P) === 126 ? (ke = "~", P++) : (ke = i, Ce(d)), ke !== i && W() !== i ? oe = be = "sibling" : (P = oe, oe = i)) : (P = oe, oe = i), oe === i && (oe = P, (be = W()) !== i ? (r.charCodeAt(P) === 43 ? (ke = "+", P++) : (ke = i, Ce(g)), ke !== i && W() !== i ? oe = be = "adjacent" : (P = oe, oe = i)) : (P = oe, oe = i), oe === i && (oe = P, r.charCodeAt(P) === 32 ? (be = " ", P++) : (be = i, Ce(f)), be !== i && (ke = W()) !== i ? oe = be = "descendant" : (P = oe, oe = i)))), Te[re] = { nextPos: P, result: oe }, oe);
      }
      function le() {
        var oe, be, ke, re, M, L, V, K, X = 30 * P + 4, de = Te[X];
        if (de)
          return P = de.nextPos, de.result;
        if (oe = P, (be = ce()) !== i) {
          for (ke = [], re = P, (M = W()) !== i ? (r.charCodeAt(P) === 44 ? (L = ",", P++) : (L = i, Ce(y)), L !== i && (V = W()) !== i && (K = ce()) !== i ? re = M = [M, L, V, K] : (P = re, re = i)) : (P = re, re = i); re !== i; )
            ke.push(re), re = P, (M = W()) !== i ? (r.charCodeAt(P) === 44 ? (L = ",", P++) : (L = i, Ce(y)), L !== i && (V = W()) !== i && (K = ce()) !== i ? re = M = [M, L, V, K] : (P = re, re = i)) : (P = re, re = i);
          ke !== i ? oe = be = [be].concat(ke.map(function(we) {
            return we[3];
          })) : (P = oe, oe = i);
        } else
          P = oe, oe = i;
        return Te[X] = { nextPos: P, result: oe }, oe;
      }
      function ce() {
        var oe, be, ke, re, M, L, V, K = 30 * P + 5, X = Te[K];
        if (X)
          return P = X.nextPos, X.result;
        if (oe = P, (be = Fe()) !== i) {
          for (ke = [], re = P, (M = J()) !== i && (L = Fe()) !== i ? re = M = [M, L] : (P = re, re = i); re !== i; )
            ke.push(re), re = P, (M = J()) !== i && (L = Fe()) !== i ? re = M = [M, L] : (P = re, re = i);
          ke !== i ? (V = be, oe = be = ke.reduce(function(de, we) {
            return { type: we[0], left: de, right: we[1] };
          }, V)) : (P = oe, oe = i);
        } else
          P = oe, oe = i;
        return Te[K] = { nextPos: P, result: oe }, oe;
      }
      function Fe() {
        var oe, be, ke, re, M, L, V, K = 30 * P + 6, X = Te[K];
        if (X)
          return P = X.nextPos, X.result;
        if (oe = P, r.charCodeAt(P) === 33 ? (be = "!", P++) : (be = i, Ce(x)), be === i && (be = null), be !== i) {
          if (ke = [], (re = Ve()) !== i)
            for (; re !== i; )
              ke.push(re), re = Ve();
          else
            ke = i;
          ke !== i ? (M = be, V = (L = ke).length === 1 ? L[0] : { type: "compound", selectors: L }, M && (V.subject = true), oe = be = V) : (P = oe, oe = i);
        } else
          P = oe, oe = i;
        return Te[K] = { nextPos: P, result: oe }, oe;
      }
      function Ve() {
        var oe, be = 30 * P + 7, ke = Te[be];
        return ke ? (P = ke.nextPos, ke.result) : ((oe = function() {
          var re, M, L = 30 * P + 8, V = Te[L];
          return V ? (P = V.nextPos, V.result) : (r.charCodeAt(P) === 42 ? (M = "*", P++) : (M = i, Ce(A)), M !== i && (M = { type: "wildcard", value: M }), re = M, Te[L] = { nextPos: P, result: re }, re);
        }()) === i && (oe = function() {
          var re, M, L, V = 30 * P + 9, K = Te[V];
          return K ? (P = K.nextPos, K.result) : (re = P, r.charCodeAt(P) === 35 ? (M = "#", P++) : (M = i, Ce(b)), M === i && (M = null), M !== i && (L = G()) !== i ? re = M = { type: "identifier", value: L } : (P = re, re = i), Te[V] = { nextPos: P, result: re }, re);
        }()) === i && (oe = function() {
          var re, M, L, V, K = 30 * P + 10, X = Te[K];
          return X ? (P = X.nextPos, X.result) : (re = P, r.charCodeAt(P) === 91 ? (M = "[", P++) : (M = i, Ce(v)), M !== i && W() !== i && (L = function() {
            var de, we, Me, Ne, tt = 30 * P + 14, je = Te[tt];
            return je ? (P = je.nextPos, je.result) : (de = P, (we = Ye()) !== i && W() !== i && (Me = function() {
              var fe, De, ve, ue = 30 * P + 12, Pe = Te[ue];
              return Pe ? (P = Pe.nextPos, Pe.result) : (fe = P, r.charCodeAt(P) === 33 ? (De = "!", P++) : (De = i, Ce(x)), De === i && (De = null), De !== i ? (r.charCodeAt(P) === 61 ? (ve = "=", P++) : (ve = i, Ce(B)), ve !== i ? (De = I(De), fe = De) : (P = fe, fe = i)) : (P = fe, fe = i), Te[ue] = { nextPos: P, result: fe }, fe);
            }()) !== i && W() !== i ? ((Ne = function() {
              var fe, De, ve, ue, Pe, Oe = 30 * P + 18, at = Te[Oe];
              if (at)
                return P = at.nextPos, at.result;
              if (fe = P, r.substr(P, 5) === "type(" ? (De = "type(", P += 5) : (De = i, Ce(Q)), De !== i)
                if (W() !== i) {
                  if (ve = [], ge.test(r.charAt(P)) ? (ue = r.charAt(P), P++) : (ue = i, Ce(ae)), ue !== i)
                    for (; ue !== i; )
                      ve.push(ue), ge.test(r.charAt(P)) ? (ue = r.charAt(P), P++) : (ue = i, Ce(ae));
                  else
                    ve = i;
                  ve !== i && (ue = W()) !== i ? (r.charCodeAt(P) === 41 ? (Pe = ")", P++) : (Pe = i, Ce(ee)), Pe !== i ? (De = { type: "type", value: ve.join("") }, fe = De) : (P = fe, fe = i)) : (P = fe, fe = i);
                } else
                  P = fe, fe = i;
              else
                P = fe, fe = i;
              return Te[Oe] = { nextPos: P, result: fe }, fe;
            }()) === i && (Ne = function() {
              var fe, De, ve, ue, Pe, Oe, at = 30 * P + 20, ut = Te[at];
              if (ut)
                return P = ut.nextPos, ut.result;
              if (fe = P, r.charCodeAt(P) === 47 ? (De = "/", P++) : (De = i, Ce(D)), De !== i) {
                if (ve = [], U.test(r.charAt(P)) ? (ue = r.charAt(P), P++) : (ue = i, Ce(ne)), ue !== i)
                  for (; ue !== i; )
                    ve.push(ue), U.test(r.charAt(P)) ? (ue = r.charAt(P), P++) : (ue = i, Ce(ne));
                else
                  ve = i;
                ve !== i ? (r.charCodeAt(P) === 47 ? (ue = "/", P++) : (ue = i, Ce(D)), ue !== i ? ((Pe = function() {
                  var dt, Dt, zt = 30 * P + 19, kt = Te[zt];
                  if (kt)
                    return P = kt.nextPos, kt.result;
                  if (dt = [], he.test(r.charAt(P)) ? (Dt = r.charAt(P), P++) : (Dt = i, Ce(R)), Dt !== i)
                    for (; Dt !== i; )
                      dt.push(Dt), he.test(r.charAt(P)) ? (Dt = r.charAt(P), P++) : (Dt = i, Ce(R));
                  else
                    dt = i;
                  return Te[zt] = { nextPos: P, result: dt }, dt;
                }()) === i && (Pe = null), Pe !== i ? (Oe = Pe, De = { type: "regexp", value: new RegExp(ve.join(""), Oe ? Oe.join("") : "") }, fe = De) : (P = fe, fe = i)) : (P = fe, fe = i)) : (P = fe, fe = i);
              } else
                P = fe, fe = i;
              return Te[at] = { nextPos: P, result: fe }, fe;
            }()), Ne !== i ? (we = N(we, Me, Ne), de = we) : (P = de, de = i)) : (P = de, de = i), de === i && (de = P, (we = Ye()) !== i && W() !== i && (Me = function() {
              var fe, De, ve, ue = 30 * P + 11, Pe = Te[ue];
              return Pe ? (P = Pe.nextPos, Pe.result) : (fe = P, T.test(r.charAt(P)) ? (De = r.charAt(P), P++) : (De = i, Ce(w)), De === i && (De = null), De !== i ? (r.charCodeAt(P) === 61 ? (ve = "=", P++) : (ve = i, Ce(B)), ve !== i ? (De = I(De), fe = De) : (P = fe, fe = i)) : (P = fe, fe = i), fe === i && (_.test(r.charAt(P)) ? (fe = r.charAt(P), P++) : (fe = i, Ce(S))), Te[ue] = { nextPos: P, result: fe }, fe);
            }()) !== i && W() !== i ? ((Ne = function() {
              var fe, De, ve, ue, Pe, Oe, at = 30 * P + 15, ut = Te[at];
              if (ut)
                return P = ut.nextPos, ut.result;
              if (fe = P, r.charCodeAt(P) === 34 ? (De = '"', P++) : (De = i, Ce(k)), De !== i) {
                for (ve = [], j.test(r.charAt(P)) ? (ue = r.charAt(P), P++) : (ue = i, Ce(O)), ue === i && (ue = P, r.charCodeAt(P) === 92 ? (Pe = "\\", P++) : (Pe = i, Ce(z)), Pe !== i ? (r.length > P ? (Oe = r.charAt(P), P++) : (Oe = i, Ce(te)), Oe !== i ? (Pe = se(Pe, Oe), ue = Pe) : (P = ue, ue = i)) : (P = ue, ue = i)); ue !== i; )
                  ve.push(ue), j.test(r.charAt(P)) ? (ue = r.charAt(P), P++) : (ue = i, Ce(O)), ue === i && (ue = P, r.charCodeAt(P) === 92 ? (Pe = "\\", P++) : (Pe = i, Ce(z)), Pe !== i ? (r.length > P ? (Oe = r.charAt(P), P++) : (Oe = i, Ce(te)), Oe !== i ? (Pe = se(Pe, Oe), ue = Pe) : (P = ue, ue = i)) : (P = ue, ue = i));
                ve !== i ? (r.charCodeAt(P) === 34 ? (ue = '"', P++) : (ue = i, Ce(k)), ue !== i ? (De = ye(ve), fe = De) : (P = fe, fe = i)) : (P = fe, fe = i);
              } else
                P = fe, fe = i;
              if (fe === i)
                if (fe = P, r.charCodeAt(P) === 39 ? (De = "'", P++) : (De = i, Ce(Se)), De !== i) {
                  for (ve = [], xe.test(r.charAt(P)) ? (ue = r.charAt(P), P++) : (ue = i, Ce(Ae)), ue === i && (ue = P, r.charCodeAt(P) === 92 ? (Pe = "\\", P++) : (Pe = i, Ce(z)), Pe !== i ? (r.length > P ? (Oe = r.charAt(P), P++) : (Oe = i, Ce(te)), Oe !== i ? (Pe = se(Pe, Oe), ue = Pe) : (P = ue, ue = i)) : (P = ue, ue = i)); ue !== i; )
                    ve.push(ue), xe.test(r.charAt(P)) ? (ue = r.charAt(P), P++) : (ue = i, Ce(Ae)), ue === i && (ue = P, r.charCodeAt(P) === 92 ? (Pe = "\\", P++) : (Pe = i, Ce(z)), Pe !== i ? (r.length > P ? (Oe = r.charAt(P), P++) : (Oe = i, Ce(te)), Oe !== i ? (Pe = se(Pe, Oe), ue = Pe) : (P = ue, ue = i)) : (P = ue, ue = i));
                  ve !== i ? (r.charCodeAt(P) === 39 ? (ue = "'", P++) : (ue = i, Ce(Se)), ue !== i ? (De = ye(ve), fe = De) : (P = fe, fe = i)) : (P = fe, fe = i);
                } else
                  P = fe, fe = i;
              return Te[at] = { nextPos: P, result: fe }, fe;
            }()) === i && (Ne = function() {
              var fe, De, ve, ue, Pe, Oe, at, ut = 30 * P + 16, dt = Te[ut];
              if (dt)
                return P = dt.nextPos, dt.result;
              for (fe = P, De = P, ve = [], _e.test(r.charAt(P)) ? (ue = r.charAt(P), P++) : (ue = i, Ce(H)); ue !== i; )
                ve.push(ue), _e.test(r.charAt(P)) ? (ue = r.charAt(P), P++) : (ue = i, Ce(H));
              if (ve !== i ? (r.charCodeAt(P) === 46 ? (ue = ".", P++) : (ue = i, Ce(F)), ue !== i ? De = ve = [ve, ue] : (P = De, De = i)) : (P = De, De = i), De === i && (De = null), De !== i) {
                if (ve = [], _e.test(r.charAt(P)) ? (ue = r.charAt(P), P++) : (ue = i, Ce(H)), ue !== i)
                  for (; ue !== i; )
                    ve.push(ue), _e.test(r.charAt(P)) ? (ue = r.charAt(P), P++) : (ue = i, Ce(H));
                else
                  ve = i;
                ve !== i ? (Oe = ve, at = (Pe = De) ? [].concat.apply([], Pe).join("") : "", De = { type: "literal", value: parseFloat(at + Oe.join("")) }, fe = De) : (P = fe, fe = i);
              } else
                P = fe, fe = i;
              return Te[ut] = { nextPos: P, result: fe }, fe;
            }()) === i && (Ne = function() {
              var fe, De, ve = 30 * P + 17, ue = Te[ve];
              return ue ? (P = ue.nextPos, ue.result) : ((De = G()) !== i && (De = { type: "literal", value: De }), fe = De, Te[ve] = { nextPos: P, result: fe }, fe);
            }()), Ne !== i ? (we = N(we, Me, Ne), de = we) : (P = de, de = i)) : (P = de, de = i), de === i && (de = P, (we = Ye()) !== i && (we = { type: "attribute", name: we }), de = we)), Te[tt] = { nextPos: P, result: de }, de);
          }()) !== i && W() !== i ? (r.charCodeAt(P) === 93 ? (V = "]", P++) : (V = i, Ce(C)), V !== i ? re = M = L : (P = re, re = i)) : (P = re, re = i), Te[K] = { nextPos: P, result: re }, re);
        }()) === i && (oe = function() {
          var re, M, L, V, K, X, de, we, Me = 30 * P + 21, Ne = Te[Me];
          if (Ne)
            return P = Ne.nextPos, Ne.result;
          if (re = P, r.charCodeAt(P) === 46 ? (M = ".", P++) : (M = i, Ce(F)), M !== i)
            if ((L = G()) !== i) {
              for (V = [], K = P, r.charCodeAt(P) === 46 ? (X = ".", P++) : (X = i, Ce(F)), X !== i && (de = G()) !== i ? K = X = [X, de] : (P = K, K = i); K !== i; )
                V.push(K), K = P, r.charCodeAt(P) === 46 ? (X = ".", P++) : (X = i, Ce(F)), X !== i && (de = G()) !== i ? K = X = [X, de] : (P = K, K = i);
              V !== i ? (we = L, M = { type: "field", name: V.reduce(function(tt, je) {
                return tt + je[0] + je[1];
              }, we) }, re = M) : (P = re, re = i);
            } else
              P = re, re = i;
          else
            P = re, re = i;
          return Te[Me] = { nextPos: P, result: re }, re;
        }()) === i && (oe = function() {
          var re, M, L, V, K = 30 * P + 22, X = Te[K];
          return X ? (P = X.nextPos, X.result) : (re = P, r.substr(P, 5) === ":not(" ? (M = ":not(", P += 5) : (M = i, Ce(pe)), M !== i && W() !== i && (L = le()) !== i && W() !== i ? (r.charCodeAt(P) === 41 ? (V = ")", P++) : (V = i, Ce(ee)), V !== i ? re = M = { type: "not", selectors: L } : (P = re, re = i)) : (P = re, re = i), Te[K] = { nextPos: P, result: re }, re);
        }()) === i && (oe = function() {
          var re, M, L, V, K = 30 * P + 23, X = Te[K];
          return X ? (P = X.nextPos, X.result) : (re = P, r.substr(P, 9) === ":matches(" ? (M = ":matches(", P += 9) : (M = i, Ce(Ee)), M !== i && W() !== i && (L = le()) !== i && W() !== i ? (r.charCodeAt(P) === 41 ? (V = ")", P++) : (V = i, Ce(ee)), V !== i ? re = M = { type: "matches", selectors: L } : (P = re, re = i)) : (P = re, re = i), Te[K] = { nextPos: P, result: re }, re);
        }()) === i && (oe = function() {
          var re, M, L, V, K = 30 * P + 24, X = Te[K];
          return X ? (P = X.nextPos, X.result) : (re = P, r.substr(P, 5) === ":has(" ? (M = ":has(", P += 5) : (M = i, Ce(Re)), M !== i && W() !== i && (L = le()) !== i && W() !== i ? (r.charCodeAt(P) === 41 ? (V = ")", P++) : (V = i, Ce(ee)), V !== i ? re = M = { type: "has", selectors: L } : (P = re, re = i)) : (P = re, re = i), Te[K] = { nextPos: P, result: re }, re);
        }()) === i && (oe = function() {
          var re, M, L = 30 * P + 25, V = Te[L];
          return V ? (P = V.nextPos, V.result) : (r.substr(P, 12) === ":first-child" ? (M = ":first-child", P += 12) : (M = i, Ce(We)), M !== i && (M = lt(1)), re = M, Te[L] = { nextPos: P, result: re }, re);
        }()) === i && (oe = function() {
          var re, M, L = 30 * P + 26, V = Te[L];
          return V ? (P = V.nextPos, V.result) : (r.substr(P, 11) === ":last-child" ? (M = ":last-child", P += 11) : (M = i, Ce(wt)), M !== i && (M = xt(1)), re = M, Te[L] = { nextPos: P, result: re }, re);
        }()) === i && (oe = function() {
          var re, M, L, V, K, X = 30 * P + 27, de = Te[X];
          if (de)
            return P = de.nextPos, de.result;
          if (re = P, r.substr(P, 11) === ":nth-child(" ? (M = ":nth-child(", P += 11) : (M = i, Ce(Lt)), M !== i)
            if (W() !== i) {
              if (L = [], _e.test(r.charAt(P)) ? (V = r.charAt(P), P++) : (V = i, Ce(H)), V !== i)
                for (; V !== i; )
                  L.push(V), _e.test(r.charAt(P)) ? (V = r.charAt(P), P++) : (V = i, Ce(H));
              else
                L = i;
              L !== i && (V = W()) !== i ? (r.charCodeAt(P) === 41 ? (K = ")", P++) : (K = i, Ce(ee)), K !== i ? (M = lt(parseInt(L.join(""), 10)), re = M) : (P = re, re = i)) : (P = re, re = i);
            } else
              P = re, re = i;
          else
            P = re, re = i;
          return Te[X] = { nextPos: P, result: re }, re;
        }()) === i && (oe = function() {
          var re, M, L, V, K, X = 30 * P + 28, de = Te[X];
          if (de)
            return P = de.nextPos, de.result;
          if (re = P, r.substr(P, 16) === ":nth-last-child(" ? (M = ":nth-last-child(", P += 16) : (M = i, Ce(et)), M !== i)
            if (W() !== i) {
              if (L = [], _e.test(r.charAt(P)) ? (V = r.charAt(P), P++) : (V = i, Ce(H)), V !== i)
                for (; V !== i; )
                  L.push(V), _e.test(r.charAt(P)) ? (V = r.charAt(P), P++) : (V = i, Ce(H));
              else
                L = i;
              L !== i && (V = W()) !== i ? (r.charCodeAt(P) === 41 ? (K = ")", P++) : (K = i, Ce(ee)), K !== i ? (M = xt(parseInt(L.join(""), 10)), re = M) : (P = re, re = i)) : (P = re, re = i);
            } else
              P = re, re = i;
          else
            P = re, re = i;
          return Te[X] = { nextPos: P, result: re }, re;
        }()) === i && (oe = function() {
          var re, M, L, V = 30 * P + 29, K = Te[V];
          return K ? (P = K.nextPos, K.result) : (re = P, r.charCodeAt(P) === 58 ? (M = ":", P++) : (M = i, Ce(Ge)), M !== i ? (r.substr(P, 9).toLowerCase() === "statement" ? (L = r.substr(P, 9), P += 9) : (L = i, Ce(mt)), L === i && (r.substr(P, 10).toLowerCase() === "expression" ? (L = r.substr(P, 10), P += 10) : (L = i, Ce(tr)), L === i && (r.substr(P, 11).toLowerCase() === "declaration" ? (L = r.substr(P, 11), P += 11) : (L = i, Ce(vr)), L === i && (r.substr(P, 8).toLowerCase() === "function" ? (L = r.substr(P, 8), P += 8) : (L = i, Ce(Er)), L === i && (r.substr(P, 7).toLowerCase() === "pattern" ? (L = r.substr(P, 7), P += 7) : (L = i, Ce(hr)))))), L !== i ? re = M = { type: "class", name: L } : (P = re, re = i)) : (P = re, re = i), Te[V] = { nextPos: P, result: re }, re);
        }()), Te[be] = { nextPos: P, result: oe }, oe);
      }
      function Ye() {
        var oe, be, ke, re, M, L, V, K, X = 30 * P + 13, de = Te[X];
        if (de)
          return P = de.nextPos, de.result;
        if (oe = P, (be = G()) !== i) {
          for (ke = [], re = P, r.charCodeAt(P) === 46 ? (M = ".", P++) : (M = i, Ce(F)), M !== i && (L = G()) !== i ? re = M = [M, L] : (P = re, re = i); re !== i; )
            ke.push(re), re = P, r.charCodeAt(P) === 46 ? (M = ".", P++) : (M = i, Ce(F)), M !== i && (L = G()) !== i ? re = M = [M, L] : (P = re, re = i);
          ke !== i ? (V = be, K = ke, oe = be = [].concat.apply([V], K).join("")) : (P = oe, oe = i);
        } else
          P = oe, oe = i;
        return Te[X] = { nextPos: P, result: oe }, oe;
      }
      function lt(oe) {
        return { type: "nth-child", index: { type: "literal", value: oe } };
      }
      function xt(oe) {
        return { type: "nth-last-child", index: { type: "literal", value: oe } };
      }
      if ((n = c()) !== i && P === r.length)
        return n;
      throw n !== i && P < r.length && Ce({ type: "end" }), a = rr, o = St < r.length ? r.charAt(St) : null, l = St < r.length ? bt(St, St + 1) : bt(St, St), new e(e.buildMessage(a, o), a, o, l);
    } };
  }());
});
function Et(t4, e, r, s) {
  if (!e)
    return true;
  if (!t4)
    return false;
  switch (r || (r = []), e.type) {
    case "wildcard":
      return true;
    case "identifier":
      return e.value.toLowerCase() === t4.type.toLowerCase();
    case "field":
      var n = e.name.split("."), a = r[n.length - 1];
      return function A(b, v, C) {
        if (C.length === 0)
          return b === v;
        if (v == null)
          return false;
        var T = v[C[0]], w = C.slice(1);
        if (Array.isArray(T)) {
          var B, I = Nr(T);
          try {
            for (I.s(); !(B = I.n()).done; )
              if (A(b, B.value, w))
                return true;
          } catch (_) {
            I.e(_);
          } finally {
            I.f();
          }
          return false;
        }
        return A(b, T, w);
      }(t4, a, n);
    case "matches":
      var o, l = Nr(e.selectors);
      try {
        for (l.s(); !(o = l.n()).done; ) {
          var i = o.value;
          if (Et(t4, i, r, s))
            return true;
        }
      } catch (A) {
        l.e(A);
      } finally {
        l.f();
      }
      return false;
    case "compound":
      var u, c = Nr(e.selectors);
      try {
        for (c.s(); !(u = c.n()).done; ) {
          var f = u.value;
          if (!Et(t4, f, r, s))
            return false;
        }
      } catch (A) {
        c.e(A);
      } finally {
        c.f();
      }
      return true;
    case "not":
      var h, p = Nr(e.selectors);
      try {
        for (p.s(); !(h = p.n()).done; ) {
          var m = h.value;
          if (Et(t4, m, r, s))
            return false;
        }
      } catch (A) {
        p.e(A);
      } finally {
        p.f();
      }
      return true;
    case "has":
      var d = function() {
        var A, b = [], v = Nr(e.selectors);
        try {
          var C = function() {
            var T = A.value, w = [];
            Ya.traverse(t4, { enter: function(B, I) {
              I != null && w.unshift(I), Et(B, T, w, s) && b.push(B);
            }, leave: function() {
              w.shift();
            }, keys: s && s.visitorKeys, fallback: s && s.fallback || "iteration" });
          };
          for (v.s(); !(A = v.n()).done; )
            C();
        } catch (T) {
          v.e(T);
        } finally {
          v.f();
        }
        return { v: b.length !== 0 };
      }();
      if (es(d) === "object")
        return d.v;
    case "child":
      return !!Et(t4, e.right, r, s) && Et(r[0], e.left, r.slice(1), s);
    case "descendant":
      if (Et(t4, e.right, r, s)) {
        for (var g = 0, y = r.length; g < y; ++g)
          if (Et(r[g], e.left, r.slice(g + 1), s))
            return true;
      }
      return false;
    case "attribute":
      var x = function(A, b) {
        var v, C = Nr(b.split("."));
        try {
          for (C.s(); !(v = C.n()).done; ) {
            var T = v.value;
            if (A == null)
              return A;
            A = A[T];
          }
        } catch (w) {
          C.e(w);
        } finally {
          C.f();
        }
        return A;
      }(t4, e.name);
      switch (e.operator) {
        case void 0:
          return x != null;
        case "=":
          switch (e.value.type) {
            case "regexp":
              return typeof x == "string" && e.value.value.test(x);
            case "literal":
              return "".concat(e.value.value) === "".concat(x);
            case "type":
              return e.value.value === es(x);
          }
          throw new Error("Unknown selector value type: ".concat(e.value.type));
        case "!=":
          switch (e.value.type) {
            case "regexp":
              return !e.value.value.test(x);
            case "literal":
              return "".concat(e.value.value) !== "".concat(x);
            case "type":
              return e.value.value !== es(x);
          }
          throw new Error("Unknown selector value type: ".concat(e.value.type));
        case "<=":
          return x <= e.value.value;
        case "<":
          return x < e.value.value;
        case ">":
          return x > e.value.value;
        case ">=":
          return x >= e.value.value;
      }
      throw new Error("Unknown operator: ".concat(e.operator));
    case "sibling":
      return Et(t4, e.right, r, s) && Ig(t4, e.left, r, "LEFT_SIDE", s) || e.left.subject && Et(t4, e.left, r, s) && Ig(t4, e.right, r, "RIGHT_SIDE", s);
    case "adjacent":
      return Et(t4, e.right, r, s) && _g(t4, e.left, r, "LEFT_SIDE", s) || e.right.subject && Et(t4, e.left, r, s) && _g(t4, e.right, r, "RIGHT_SIDE", s);
    case "nth-child":
      return Et(t4, e.right, r, s) && Bg(t4, r, function() {
        return e.index.value - 1;
      }, s);
    case "nth-last-child":
      return Et(t4, e.right, r, s) && Bg(t4, r, function(A) {
        return A - e.index.value;
      }, s);
    case "class":
      switch (e.name.toLowerCase()) {
        case "statement":
          if (t4.type.slice(-9) === "Statement")
            return true;
        case "declaration":
          return t4.type.slice(-11) === "Declaration";
        case "pattern":
          if (t4.type.slice(-7) === "Pattern")
            return true;
        case "expression":
          return t4.type.slice(-10) === "Expression" || t4.type.slice(-7) === "Literal" || t4.type === "Identifier" && (r.length === 0 || r[0].type !== "MetaProperty") || t4.type === "MetaProperty";
        case "function":
          return t4.type === "FunctionDeclaration" || t4.type === "FunctionExpression" || t4.type === "ArrowFunctionExpression";
      }
      throw new Error("Unknown class name: ".concat(e.name));
  }
  throw new Error("Unknown selector type: ".concat(e.type));
}
function Vu(t4, e) {
  var r = t4.type;
  return e && e.visitorKeys && e.visitorKeys[r] ? e.visitorKeys[r] : Ya.VisitorKeys[r] ? Ya.VisitorKeys[r] : e && typeof e.fallback == "function" ? e.fallback(t4) : Object.keys(t4).filter(function(s) {
    return s !== "type";
  });
}
function Cl(t4) {
  return t4 !== null && es(t4) === "object" && typeof t4.type == "string";
}
function Ig(t4, e, r, s, n) {
  var a = Bi(r, 1)[0];
  if (!a)
    return false;
  var o, l = Nr(Vu(a, n));
  try {
    for (l.s(); !(o = l.n()).done; ) {
      var i = a[o.value];
      if (Array.isArray(i)) {
        var u = i.indexOf(t4);
        if (u < 0)
          continue;
        var c = void 0, f = void 0;
        s === "LEFT_SIDE" ? (c = 0, f = u) : (c = u + 1, f = i.length);
        for (var h = c; h < f; ++h)
          if (Cl(i[h]) && Et(i[h], e, r, n))
            return true;
      }
    }
  } catch (p) {
    l.e(p);
  } finally {
    l.f();
  }
  return false;
}
function _g(t4, e, r, s, n) {
  var a = Bi(r, 1)[0];
  if (!a)
    return false;
  var o, l = Nr(Vu(a, n));
  try {
    for (l.s(); !(o = l.n()).done; ) {
      var i = a[o.value];
      if (Array.isArray(i)) {
        var u = i.indexOf(t4);
        if (u < 0)
          continue;
        if (s === "LEFT_SIDE" && u > 0 && Cl(i[u - 1]) && Et(i[u - 1], e, r, n) || s === "RIGHT_SIDE" && u < i.length - 1 && Cl(i[u + 1]) && Et(i[u + 1], e, r, n))
          return true;
      }
    }
  } catch (c) {
    l.e(c);
  } finally {
    l.f();
  }
  return false;
}
function Bg(t4, e, r, s) {
  var n = Bi(e, 1)[0];
  if (!n)
    return false;
  var a, o = Nr(Vu(n, s));
  try {
    for (o.s(); !(a = o.n()).done; ) {
      var l = n[a.value];
      if (Array.isArray(l)) {
        var i = l.indexOf(t4);
        if (i >= 0 && i === r(l.length))
          return true;
      }
    }
  } catch (u) {
    o.e(u);
  } finally {
    o.f();
  }
  return false;
}
function mE(t4, e) {
  if (t4 == null || es(t4) != "object")
    return [];
  e == null && (e = t4);
  for (var r = t4.subject ? [e] : [], s = 0, n = function(i) {
    for (var u = [], c = Object.keys(i), f = 0; f < c.length; f++)
      u.push([c[f], i[c[f]]]);
    return u;
  }(t4); s < n.length; s++) {
    var a = Bi(n[s], 2), o = a[0], l = a[1];
    r.push.apply(r, r2(mE(l, o === "left" ? l : e)));
  }
  return r;
}
function dE(t4, e, r, s) {
  if (e) {
    var n = [], a = mE(e);
    Ya.traverse(t4, { enter: function(o, l) {
      if (l != null && n.unshift(l), Et(o, e, n, s))
        if (a.length)
          for (var i = 0, u = a.length; i < u; ++i) {
            Et(o, a[i], n, s) && r(o, l, n);
            for (var c = 0, f = n.length; c < f; ++c) {
              var h = n.slice(c + 1);
              Et(n[c], a[i], h, s) && r(n[c], l, h);
            }
          }
        else
          r(o, l, n);
    }, leave: function() {
      n.shift();
    }, keys: s && s.visitorKeys, fallback: s && s.fallback || "iteration" });
  }
}
function gE(t4, e, r) {
  var s = [];
  return dE(t4, e, function(n) {
    s.push(n);
  }, r), s;
}
function yE(t4) {
  return n2.parse(t4);
}
function xn(t4, e, r) {
  return gE(t4, yE(e), r);
}
xn.parse = yE, xn.match = gE, xn.traverse = dE, xn.matches = Et, xn.query = xn;
var s2 = B0;
var a2 = cA;
var i2 = gx;
var o2 = Wr;
var l2 = fl.exports;
var u2 = Kx;
var Xt = us;
var c2 = Eu.exports;
var p2 = T_;
var f2 = uE;
var h2 = os;
var m2 = yu.exports;
var d2 = cE.exports;
var g2 = xn;
function er(t4) {
  return t4 && typeof t4 == "object" && "default" in t4 ? t4 : {
    default: t4
  };
}
var Is = er(s2);
var xE = er(a2);
var vE = er(i2);
var Za = er(o2);
var Og = er(l2);
var y2 = er(u2);
var Oi = er(c2);
var x2 = er(p2);
var EE = er(f2);
var qt = er(h2);
var Li = er(m2);
var v2 = er(d2);
var bE = er(g2);
var CE = {
  "@babel/highlight": "7.14.5"
};
var SE = {
  type: "range",
  registry: true,
  raw: "eslint@^7.0.0",
  name: "eslint",
  escapedName: "eslint",
  rawSpec: "^7.0.0",
  saveSpec: null,
  fetchSpec: "^7.0.0"
};
var AE = ["#DEV:/"];
var DE = {
  name: "Nicholas C. Zakas",
  email: "nicholas+npm@nczconsulting.com"
};
var wE = {
  eslint: "bin/eslint.js"
};
var kE = {
  url: "https://github.com/eslint/eslint/issues/"
};
var TE = {
  "@babel/code-frame": "7.12.11",
  "@eslint/eslintrc": "^0.4.3",
  "@humanwhocodes/config-array": "^0.5.0",
  ajv: "^6.10.0",
  chalk: "^4.0.0",
  "cross-spawn": "^7.0.2",
  debug: "^4.0.1",
  doctrine: "^3.0.0",
  enquirer: "^2.3.5",
  "escape-string-regexp": "^4.0.0",
  "eslint-scope": "^5.1.1",
  "eslint-utils": "^2.1.0",
  "eslint-visitor-keys": "^2.0.0",
  espree: "^7.3.1",
  esquery: "^1.4.0",
  esutils: "^2.0.2",
  "fast-deep-equal": "^3.1.3",
  "file-entry-cache": "^6.0.1",
  "functional-red-black-tree": "^1.0.1",
  "glob-parent": "^5.1.2",
  globals: "^13.6.0",
  ignore: "^4.0.6",
  "import-fresh": "^3.0.0",
  imurmurhash: "^0.1.4",
  "is-glob": "^4.0.0",
  "js-yaml": "^3.13.1",
  "json-stable-stringify-without-jsonify": "^1.0.1",
  levn: "^0.4.1",
  "lodash.merge": "^4.6.2",
  minimatch: "^3.0.4",
  "natural-compare": "^1.4.0",
  optionator: "^0.9.1",
  progress: "^2.0.0",
  regexpp: "^3.1.0",
  semver: "^7.2.1",
  "strip-ansi": "^6.0.0",
  "strip-json-comments": "^3.1.0",
  table: "^6.0.9",
  "text-table": "^0.2.0",
  "v8-compile-cache": "^2.0.3"
};
var FE = {
  "@babel/core": "^7.4.3",
  "@babel/preset-env": "^7.4.3",
  "babel-loader": "^8.0.5",
  chai: "^4.0.1",
  cheerio: "^0.22.0",
  "common-tags": "^1.8.0",
  "core-js": "^3.1.3",
  dateformat: "^3.0.3",
  ejs: "^3.0.2",
  eslint: "file:.",
  "eslint-config-eslint": "file:packages/eslint-config-eslint",
  "eslint-plugin-eslint-plugin": "^3.5.3",
  "eslint-plugin-internal-rules": "file:tools/internal-rules",
  "eslint-plugin-jsdoc": "^25.4.3",
  "eslint-plugin-node": "^11.1.0",
  "eslint-release": "^2.0.0",
  eslump: "^3.0.0",
  esprima: "^4.0.1",
  "fs-teardown": "0.1.1",
  glob: "^7.1.6",
  jsdoc: "^3.5.5",
  karma: "^6.1.1",
  "karma-chrome-launcher": "^3.1.0",
  "karma-mocha": "^2.0.1",
  "karma-mocha-reporter": "^2.2.5",
  "karma-webpack": "^5.0.0",
  "lint-staged": "^10.1.2",
  "load-perf": "^0.2.0",
  markdownlint: "^0.19.0",
  "markdownlint-cli": "^0.22.0",
  memfs: "^3.0.1",
  mocha: "^8.3.2",
  "mocha-junit-reporter": "^2.0.0",
  "node-polyfill-webpack-plugin": "^1.0.3",
  "npm-license": "^0.3.3",
  nyc: "^15.0.1",
  proxyquire: "^2.0.1",
  puppeteer: "^7.1.0",
  recast: "^0.19.0",
  "regenerator-runtime": "^0.13.2",
  shelljs: "^0.8.2",
  sinon: "^9.0.1",
  temp: "^0.9.0",
  webpack: "^5.23.0",
  "webpack-cli": "^4.5.0",
  yorkie: "^2.0.0"
};
var PE = {
  node: "^10.12.0 || >=12.0.0"
};
var IE = ["LICENSE", "README.md", "bin", "conf", "lib", "messages"];
var _E = {
  "pre-commit": "lint-staged"
};
var BE = ["ast", "lint", "javascript", "ecmascript", "espree"];
var OE = {
  type: "git",
  url: "git+https://github.com/eslint/eslint.git"
};
var LE = {
  docs: "node Makefile.js docs",
  fix: "node Makefile.js lint -- fix",
  fuzz: "node Makefile.js fuzz",
  "generate-alpharelease": "node Makefile.js generatePrerelease -- alpha",
  "generate-betarelease": "node Makefile.js generatePrerelease -- beta",
  "generate-rcrelease": "node Makefile.js generatePrerelease -- rc",
  "generate-release": "node Makefile.js generateRelease",
  gensite: "node Makefile.js gensite",
  lint: "node Makefile.js lint",
  perf: "node Makefile.js perf",
  "publish-release": "node Makefile.js publishRelease",
  test: "node Makefile.js test",
  "test:cli": "mocha",
  webpack: "node Makefile.js webpack"
};
var E2 = {
  _from: "eslint@^7.0.0",
  _id: "eslint@7.32.0",
  _inBundle: false,
  _integrity: "sha512-VHZ8gX+EDfz+97jGcgyGCyRia/dPOd6Xh9yPv8Bl1+SoaIwD+a/vlrOmGRUyOYu7MwUhc7CxqeaDZU13S4+EpA==",
  _location: "/eslint",
  _phantomChildren: CE,
  _requested: SE,
  _requiredBy: AE,
  _resolved: "https://registry.npmjs.org/eslint/-/eslint-7.32.0.tgz",
  _shasum: "c6d328a14be3fb08c8d1d21e12c02fdb7a2a812d",
  _spec: "eslint@^7.0.0",
  _where: "/home/runner/work/eslint4b/eslint4b",
  author: DE,
  bin: wE,
  bugs: kE,
  bundleDependencies: false,
  dependencies: TE,
  deprecated: false,
  description: "An AST-based pattern checker for JavaScript.",
  devDependencies: FE,
  engines: PE,
  files: IE,
  funding: "https://opencollective.com/eslint",
  gitHooks: _E,
  homepage: "https://eslint.org",
  keywords: BE,
  license: "MIT",
  "lint-staged": {
    "*.js": "eslint --fix",
    "*.md": "markdownlint"
  },
  main: "./lib/api.js",
  name: "eslint",
  repository: OE,
  scripts: LE,
  version: "7.32.0"
};
var b2 = Object.freeze({
  __proto__: null,
  _from: "eslint@^7.0.0",
  _id: "eslint@7.32.0",
  _inBundle: false,
  _integrity: "sha512-VHZ8gX+EDfz+97jGcgyGCyRia/dPOd6Xh9yPv8Bl1+SoaIwD+a/vlrOmGRUyOYu7MwUhc7CxqeaDZU13S4+EpA==",
  _location: "/eslint",
  _phantomChildren: CE,
  _requested: SE,
  _requiredBy: AE,
  _resolved: "https://registry.npmjs.org/eslint/-/eslint-7.32.0.tgz",
  _shasum: "c6d328a14be3fb08c8d1d21e12c02fdb7a2a812d",
  _spec: "eslint@^7.0.0",
  _where: "/home/runner/work/eslint4b/eslint4b",
  author: DE,
  bin: wE,
  bugs: kE,
  bundleDependencies: false,
  dependencies: TE,
  deprecated: false,
  description: "An AST-based pattern checker for JavaScript.",
  devDependencies: FE,
  engines: PE,
  files: IE,
  funding: "https://opencollective.com/eslint",
  gitHooks: _E,
  homepage: "https://eslint.org",
  keywords: BE,
  license: "MIT",
  main: "./lib/api.js",
  name: "eslint",
  repository: OE,
  scripts: LE,
  version: "7.32.0",
  default: E2
});
var Js = class {
  constructor() {
    this.current = null;
  }
  getOneToken() {
    return this.moveNext() ? this.current : null;
  }
  getAllTokens() {
    const t4 = [];
    for (; this.moveNext(); )
      t4.push(this.current);
    return t4;
  }
  moveNext() {
    throw new Error("Not implemented.");
  }
};
function C2(t4) {
  return t4.range[0];
}
var S2 = function(t4, e) {
  const r = t4.findIndex((s) => e <= C2(s));
  return r === -1 ? t4.length : r;
};
var A2 = function(t4, e, r) {
  if (r in e)
    return e[r];
  if (r - 1 in e) {
    const s = e[r - 1], n = s >= 0 && s < t4.length ? t4[s] : null;
    return n && n.range[0] >= r ? s : s + 1;
  }
  return 0;
};
var D2 = function(t4, e, r) {
  if (r in e)
    return e[r] - 1;
  if (r - 1 in e) {
    const s = e[r - 1], n = s >= 0 && s < t4.length ? t4[s] : null;
    return n && n.range[1] > r ? s - 1 : s;
  }
  return t4.length - 1;
};
var qr = {
  search: S2,
  getFirstIndex: A2,
  getLastIndex: D2
};
var w2 = class extends Js {
  constructor(t4, e, r, s, n) {
    super(), this.tokens = t4, this.comments = e, this.tokenIndex = qr.getLastIndex(t4, r, n), this.commentIndex = qr.search(e, n) - 1, this.border = s;
  }
  moveNext() {
    const t4 = this.tokenIndex >= 0 ? this.tokens[this.tokenIndex] : null, e = this.commentIndex >= 0 ? this.comments[this.commentIndex] : null;
    return t4 && (!e || t4.range[1] > e.range[1]) ? (this.current = t4, this.tokenIndex -= 1) : e ? (this.current = e, this.commentIndex -= 1) : this.current = null, !!this.current && (this.border === -1 || this.current.range[0] >= this.border);
  }
};
var k2 = class extends Js {
  constructor(t4, e, r, s, n) {
    super(), this.tokens = t4, this.index = qr.getLastIndex(t4, r, n), this.indexEnd = qr.getFirstIndex(t4, r, s);
  }
  moveNext() {
    return this.index >= this.indexEnd ? (this.current = this.tokens[this.index], this.index -= 1, true) : false;
  }
  getOneToken() {
    return this.index >= this.indexEnd ? this.tokens[this.index] : null;
  }
};
var Uu = class extends Js {
  constructor(t4) {
    super(), this.cursor = t4;
  }
  moveNext() {
    const t4 = this.cursor.moveNext();
    return this.current = this.cursor.current, t4;
  }
};
var T2 = class extends Uu {
  constructor(t4, e) {
    super(t4), this.predicate = e;
  }
  moveNext() {
    const t4 = this.predicate;
    for (; super.moveNext(); )
      if (t4(this.current))
        return true;
    return false;
  }
};
var F2 = class extends Js {
  constructor(t4, e, r, s, n) {
    super(), this.tokens = t4, this.comments = e, this.tokenIndex = qr.getFirstIndex(t4, r, s), this.commentIndex = qr.search(e, s), this.border = n;
  }
  moveNext() {
    const t4 = this.tokenIndex < this.tokens.length ? this.tokens[this.tokenIndex] : null, e = this.commentIndex < this.comments.length ? this.comments[this.commentIndex] : null;
    return t4 && (!e || t4.range[0] < e.range[0]) ? (this.current = t4, this.tokenIndex += 1) : e ? (this.current = e, this.commentIndex += 1) : this.current = null, !!this.current && (this.border === -1 || this.current.range[1] <= this.border);
  }
};
var qu = class extends Js {
  constructor(t4, e, r, s, n) {
    super(), this.tokens = t4, this.index = qr.getFirstIndex(t4, r, s), this.indexEnd = qr.getLastIndex(t4, r, n);
  }
  moveNext() {
    return this.index <= this.indexEnd ? (this.current = this.tokens[this.index], this.index += 1, true) : false;
  }
  getOneToken() {
    return this.index <= this.indexEnd ? this.tokens[this.index] : null;
  }
  getAllTokens() {
    return this.tokens.slice(this.index, this.indexEnd + 1);
  }
};
var P2 = class extends Uu {
  constructor(t4, e) {
    super(t4), this.count = e;
  }
  moveNext() {
    return this.count > 0 ? (this.count -= 1, super.moveNext()) : false;
  }
};
var I2 = class extends Uu {
  constructor(t4, e) {
    super(t4), this.count = e;
  }
  moveNext() {
    for (; this.count > 0; )
      if (this.count -= 1, !super.moveNext())
        return false;
    return super.moveNext();
  }
};
var RE = class {
  constructor(e, r) {
    this.TokenCursor = e, this.TokenCommentCursor = r;
  }
  createBaseCursor(e, r, s, n, a, o) {
    const l = o ? this.TokenCommentCursor : this.TokenCursor;
    return new l(e, r, s, n, a);
  }
  createCursor(e, r, s, n, a, o, l, i, u) {
    let c = this.createBaseCursor(e, r, s, n, a, o);
    return l && (c = new T2(c, l)), i >= 1 && (c = new I2(c, i)), u >= 0 && (c = new P2(c, u)), c;
  }
};
var _2 = new RE(qu, F2);
var B2 = new RE(k2, w2);
var Bt = {
  forward: _2,
  backward: B2
};
var O2 = class extends qu {
  constructor(t4, e, r, s, n, a, o) {
    super(t4, e, r, s, n), this.index = Math.max(0, this.index - a), this.indexEnd = Math.min(t4.length - 1, this.indexEnd + o);
  }
};
var {
  isCommentToken: NE
} = EE.default;
var Tt = Symbol("tokens");
var vt = Symbol("comments");
var Ft = Symbol("indexMap");
function L2(t4, e) {
  const r = /* @__PURE__ */ Object.create(null);
  let s = 0, n = 0, a = 0, o = null;
  for (; s < t4.length || n < e.length; ) {
    for (a = n < e.length ? e[n].range[0] : Number.MAX_SAFE_INTEGER; s < t4.length && (o = t4[s].range)[0] < a; )
      r[o[0]] = s, r[o[1] - 1] = s, s += 1;
    for (a = s < t4.length ? t4[s].range[0] : Number.MAX_SAFE_INTEGER; n < e.length && (o = e[n].range)[0] < a; )
      r[o[0]] = s, r[o[1] - 1] = s, n += 1;
  }
  return r;
}
function Nn(t4, e, r, s, n, a, o) {
  let l = false, i = 0, u = null;
  return typeof o == "number" ? i = o | 0 : typeof o == "function" ? u = o : o && (l = !!o.includeComments, i = o.skip | 0, u = o.filter || null), qt.default(i >= 0, "options.skip should be zero or a positive integer."), qt.default(!u || typeof u == "function", "options.filter should be a function."), t4.createCursor(e, r, s, n, a, l, u, i, -1);
}
function Or(t4, e, r, s, n, a, o) {
  let l = false, i = 0, u = false, c = null;
  return typeof o == "number" ? (i = o | 0, u = true) : typeof o == "function" ? c = o : o && (l = !!o.includeComments, i = o.count | 0, u = typeof o.count == "number", c = o.filter || null), qt.default(i >= 0, "options.count should be zero or a positive integer."), qt.default(!c || typeof c == "function", "options.filter should be a function."), t4.createCursor(e, r, s, n, a, l, c, 0, u ? i : -1);
}
function Lg(t4, e, r, s, n, a, o) {
  return typeof a > "u" && typeof o > "u" ? new qu(t4, e, r, s, n) : typeof a == "number" || typeof a > "u" ? new O2(t4, e, r, s, n, a | 0, o | 0) : Or(Bt.forward, t4, e, r, s, n, a);
}
function Rg(t4) {
  const e = [];
  let r = t4.getOneToken();
  for (; r && NE(r); )
    e.push(r), r = t4.getOneToken();
  return e;
}
var R2 = class {
  constructor(t4, e) {
    this[Tt] = t4, this[vt] = e, this[Ft] = L2(t4, e);
  }
  getTokenByRangeStart(t4, e) {
    const r = e && e.includeComments, s = Bt.forward.createBaseCursor(this[Tt], this[vt], this[Ft], t4, -1, r).getOneToken();
    return s && s.range[0] === t4 ? s : null;
  }
  getFirstToken(t4, e) {
    return Nn(Bt.forward, this[Tt], this[vt], this[Ft], t4.range[0], t4.range[1], e).getOneToken();
  }
  getLastToken(t4, e) {
    return Nn(Bt.backward, this[Tt], this[vt], this[Ft], t4.range[0], t4.range[1], e).getOneToken();
  }
  getTokenBefore(t4, e) {
    return Nn(Bt.backward, this[Tt], this[vt], this[Ft], -1, t4.range[0], e).getOneToken();
  }
  getTokenAfter(t4, e) {
    return Nn(Bt.forward, this[Tt], this[vt], this[Ft], t4.range[1], -1, e).getOneToken();
  }
  getFirstTokenBetween(t4, e, r) {
    return Nn(Bt.forward, this[Tt], this[vt], this[Ft], t4.range[1], e.range[0], r).getOneToken();
  }
  getLastTokenBetween(t4, e, r) {
    return Nn(Bt.backward, this[Tt], this[vt], this[Ft], t4.range[1], e.range[0], r).getOneToken();
  }
  getTokenOrCommentBefore(t4, e) {
    return this.getTokenBefore(t4, {
      includeComments: true,
      skip: e
    });
  }
  getTokenOrCommentAfter(t4, e) {
    return this.getTokenAfter(t4, {
      includeComments: true,
      skip: e
    });
  }
  getFirstTokens(t4, e) {
    return Or(Bt.forward, this[Tt], this[vt], this[Ft], t4.range[0], t4.range[1], e).getAllTokens();
  }
  getLastTokens(t4, e) {
    return Or(Bt.backward, this[Tt], this[vt], this[Ft], t4.range[0], t4.range[1], e).getAllTokens().reverse();
  }
  getTokensBefore(t4, e) {
    return Or(Bt.backward, this[Tt], this[vt], this[Ft], -1, t4.range[0], e).getAllTokens().reverse();
  }
  getTokensAfter(t4, e) {
    return Or(Bt.forward, this[Tt], this[vt], this[Ft], t4.range[1], -1, e).getAllTokens();
  }
  getFirstTokensBetween(t4, e, r) {
    return Or(Bt.forward, this[Tt], this[vt], this[Ft], t4.range[1], e.range[0], r).getAllTokens();
  }
  getLastTokensBetween(t4, e, r) {
    return Or(Bt.backward, this[Tt], this[vt], this[Ft], t4.range[1], e.range[0], r).getAllTokens().reverse();
  }
  getTokens(t4, e, r) {
    return Lg(this[Tt], this[vt], this[Ft], t4.range[0], t4.range[1], e, r).getAllTokens();
  }
  getTokensBetween(t4, e, r) {
    return Lg(this[Tt], this[vt], this[Ft], t4.range[1], e.range[0], r, r).getAllTokens();
  }
  commentsExistBetween(t4, e) {
    const r = qr.search(this[vt], t4.range[1]);
    return r < this[vt].length && this[vt][r].range[1] <= e.range[0];
  }
  getCommentsBefore(t4) {
    const e = Or(Bt.backward, this[Tt], this[vt], this[Ft], -1, t4.range[0], {
      includeComments: true
    });
    return Rg(e).reverse();
  }
  getCommentsAfter(t4) {
    const e = Or(Bt.forward, this[Tt], this[vt], this[Ft], t4.range[1], -1, {
      includeComments: true
    });
    return Rg(e);
  }
  getCommentsInside(t4) {
    return this.getTokens(t4, {
      includeComments: true,
      filter: NE
    });
  }
};
var {
  isCommentToken: fa
} = EE.default;
function N2(t4) {
  if (!t4.tokens)
    throw new Error("AST is missing the tokens array.");
  if (!t4.comments)
    throw new Error("AST is missing the comments array.");
  if (!t4.loc)
    throw new Error("AST is missing location information.");
  if (!t4.range)
    throw new Error("AST is missing range information");
}
function j2(t4) {
  return t4.type === "ExportDefaultDeclaration" || t4.type === "ExportNamedDeclaration" || t4.type === "ExportAllDeclaration" || t4.type === "ExportSpecifier";
}
function M2(t4, e) {
  const r = [];
  let s = 0, n = 0;
  for (; s < t4.length || n < e.length; )
    n >= e.length || s < t4.length && t4[s].range[0] < e[n].range[0] ? r.push(t4[s++]) : r.push(e[n++]);
  return r;
}
function $2(t4, e) {
  return t4.range[0] <= e.range[0] && t4.range[1] >= e.range[0] || e.range[0] <= t4.range[0] && e.range[1] >= t4.range[0];
}
function Ng(t4, e, r, s) {
  if ($2(e, r))
    return false;
  const [n, a] = e.range[1] <= r.range[0] ? [e, r] : [r, e], o = t4.getLastToken(n) || n, l = t4.getFirstToken(a) || a;
  let i = o;
  for (; i !== l; ) {
    const u = t4.getTokenAfter(i, {
      includeComments: true
    });
    if (i.range[1] !== u.range[0] || s && u !== l && u.type === "JSXText" && /\s/u.test(u.value))
      return true;
    i = u;
  }
  return false;
}
var V2 = class extends R2 {
  constructor(e, r) {
    let s, n, a, o, l;
    typeof e == "string" ? (s = e, n = r) : typeof e == "object" && e !== null && (s = e.text, n = e.ast, a = e.parserServices, o = e.scopeManager, l = e.visitorKeys), N2(n), super(n.tokens, n.comments), this.hasBOM = s.charCodeAt(0) === 65279, this.text = this.hasBOM ? s.slice(1) : s, this.ast = n, this.parserServices = a || {}, this.scopeManager = o || null, this.visitorKeys = l || Xt.traverser.DEFAULT_VISITOR_KEYS;
    const i = this.text.match(Xt.astUtils.shebangPattern);
    i && n.comments.length && n.comments[0].value === i[1] && (n.comments[0].type = "Shebang"), this.tokensAndComments = M2(n.tokens, n.comments), this.lines = [], this.lineStartIndices = [0];
    const c = Xt.astUtils.createGlobalLinebreakMatcher();
    let f;
    for (; f = c.exec(this.text); )
      this.lines.push(this.text.slice(this.lineStartIndices[this.lineStartIndices.length - 1], f.index)), this.lineStartIndices.push(f.index + f[0].length);
    this.lines.push(this.text.slice(this.lineStartIndices[this.lineStartIndices.length - 1])), this._commentCache = /* @__PURE__ */ new WeakMap(), Object.freeze(this), Object.freeze(this.lines);
  }
  static splitLines(e) {
    return e.split(Xt.astUtils.createGlobalLinebreakMatcher());
  }
  getText(e, r, s) {
    return e ? this.text.slice(Math.max(e.range[0] - (r || 0), 0), e.range[1] + (s || 0)) : this.text;
  }
  getLines() {
    return this.lines;
  }
  getAllComments() {
    return this.ast.comments;
  }
  getComments(e) {
    if (this._commentCache.has(e))
      return this._commentCache.get(e);
    const r = {
      leading: [],
      trailing: []
    };
    if (e.type === "Program")
      e.body.length === 0 && (r.leading = e.comments);
    else {
      ((e.type === "BlockStatement" || e.type === "ClassBody") && e.body.length === 0 || e.type === "ObjectExpression" && e.properties.length === 0 || e.type === "ArrayExpression" && e.elements.length === 0 || e.type === "SwitchStatement" && e.cases.length === 0) && (r.trailing = this.getTokens(e, {
        includeComments: true,
        filter: fa
      }));
      let s = this.getTokenBefore(e, {
        includeComments: true
      });
      for (; s && fa(s) && !(e.parent && e.parent.type !== "Program" && s.start < e.parent.start); )
        r.leading.push(s), s = this.getTokenBefore(s, {
          includeComments: true
        });
      for (r.leading.reverse(), s = this.getTokenAfter(e, {
        includeComments: true
      }); s && fa(s) && !(e.parent && e.parent.type !== "Program" && s.end > e.parent.end); )
        r.trailing.push(s), s = this.getTokenAfter(s, {
          includeComments: true
        });
    }
    return this._commentCache.set(e, r), r;
  }
  getJSDocComment(e) {
    const r = (n) => {
      const a = this.getTokenBefore(n, {
        includeComments: true
      });
      return a && fa(a) && a.type === "Block" && a.value.charAt(0) === "*" && n.loc.start.line - a.loc.end.line <= 1 ? a : null;
    };
    let s = e.parent;
    switch (e.type) {
      case "ClassDeclaration":
      case "FunctionDeclaration":
        return r(j2(s) ? s : e);
      case "ClassExpression":
        return r(s.parent);
      case "ArrowFunctionExpression":
      case "FunctionExpression":
        if (s.type !== "CallExpression" && s.type !== "NewExpression") {
          for (; !this.getCommentsBefore(s).length && !/Function/u.test(s.type) && s.type !== "MethodDefinition" && s.type !== "Property" && (s = s.parent, !!s); )
            ;
          if (s && s.type !== "FunctionDeclaration" && s.type !== "Program")
            return r(s);
        }
        return r(e);
      default:
        return null;
    }
  }
  getNodeByRangeIndex(e) {
    let r = null;
    return Xt.traverser.traverse(this.ast, {
      visitorKeys: this.visitorKeys,
      enter(s) {
        s.range[0] <= e && e < s.range[1] ? r = s : this.skip();
      },
      leave(s) {
        s === r && this.break();
      }
    }), r;
  }
  isSpaceBetween(e, r) {
    return Ng(this, e, r, false);
  }
  isSpaceBetweenTokens(e, r) {
    return Ng(this, e, r, true);
  }
  getLocFromIndex(e) {
    if (typeof e != "number")
      throw new TypeError("Expected `index` to be a number.");
    if (e < 0 || e > this.text.length)
      throw new RangeError(`Index out of range (requested index ${e}, but source text has length ${this.text.length}).`);
    if (e === this.text.length)
      return {
        line: this.lines.length,
        column: this.lines[this.lines.length - 1].length
      };
    const r = e >= this.lineStartIndices[this.lineStartIndices.length - 1] ? this.lineStartIndices.length : this.lineStartIndices.findIndex((s) => e < s);
    return {
      line: r,
      column: e - this.lineStartIndices[r - 1]
    };
  }
  getIndexFromLoc(e) {
    if (typeof e != "object" || typeof e.line != "number" || typeof e.column != "number")
      throw new TypeError("Expected `loc` to be an object with numeric `line` and `column` properties.");
    if (e.line <= 0)
      throw new RangeError(`Line number out of range (line ${e.line} requested). Line numbers should be 1-based.`);
    if (e.line > this.lineStartIndices.length)
      throw new RangeError(`Line number out of range (line ${e.line} requested, but only ${this.lineStartIndices.length} lines present).`);
    const r = this.lineStartIndices[e.line - 1], s = e.line === this.lineStartIndices.length ? this.text.length : this.lineStartIndices[e.line], n = r + e.column;
    if (e.line === this.lineStartIndices.length && n > s || e.line < this.lineStartIndices.length && n >= s)
      throw new RangeError(`Column number out of range (column ${e.column} requested, but the length of line ${e.line} is ${s - r}).`);
    return n;
  }
};
var U2 = V2;
var q2 = {
  SourceCode: U2
};
var Hr = Li.default("eslint:code-path");
function W2(t4) {
  return t4.id + (t4.reachable ? "" : "!");
}
function ha(t4, e) {
  const r = e ? `:${e}` : "";
  switch (t4.type) {
    case "Identifier":
      return `${t4.type}${r} (${t4.name})`;
    case "Literal":
      return `${t4.type}${r} (${t4.value})`;
    default:
      return `${t4.type}${r}`;
  }
}
var _t = {
  enabled: Hr.enabled,
  dump: Hr,
  dumpState: Hr.enabled ? function(t4, e, r) {
    for (let s = 0; s < e.currentSegments.length; ++s) {
      const n = e.currentSegments[s].internal;
      if (r) {
        const a = n.nodes.length - 1;
        a >= 0 && n.nodes[a] === ha(t4, "enter") ? n.nodes[a] = ha(t4, void 0) : n.nodes.push(ha(t4, "exit"));
      } else
        n.nodes.push(ha(t4, "enter"));
    }
    Hr([`${e.currentSegments.map(W2).join(",")})`, `${t4.type}${r ? ":exit" : ""}`].join(" "));
  } : Hr,
  dumpDot: Hr.enabled ? function(t4) {
    let e = `
digraph {
node[shape=box,style="rounded,filled",fillcolor=white];
initial[label="",shape=circle,style=filled,fillcolor=black,width=0.25,height=0.25];
`;
    t4.returnedSegments.length > 0 && (e += `final[label="",shape=doublecircle,style=filled,fillcolor=black,width=0.25,height=0.25];
`), t4.thrownSegments.length > 0 && (e += `thrown[label="✘",shape=circle,width=0.3,height=0.3,fixedsize];
`);
    const r = /* @__PURE__ */ Object.create(null), s = this.makeDotArrows(t4, r);
    for (const n in r) {
      const a = r[n];
      e += `${n}[`, a.reachable ? e += 'label="' : e += 'style="rounded,dashed,filled",fillcolor="#FF9800",label="<<unreachable>>\\n', a.internal.nodes.length > 0 ? e += a.internal.nodes.join("\\n") : e += "????", e += `"];
`;
    }
    e += `${s}
`, e += "}", Hr("DOT", e);
  } : Hr,
  makeDotArrows(t4, e) {
    const r = [[t4.initialSegment, 0]], s = e || /* @__PURE__ */ Object.create(null);
    let n = t4.initialSegment.id, a = `initial->${t4.initialSegment.id}`;
    for (; r.length > 0; ) {
      const o = r.pop(), l = o[0], i = o[1];
      if (s[l.id] && i === 0)
        continue;
      s[l.id] = l;
      const u = l.allNextSegments[i];
      u && (n === l.id ? a += `->${u.id}` : a += `;
${l.id}->${u.id}`, n = u.id, r.unshift([l, 1 + i]), r.push([u, 0]));
    }
    return t4.returnedSegments.forEach((o) => {
      n === o.id ? a += "->final" : a += `;
${o.id}->final`, n = null;
    }), t4.thrownSegments.forEach((o) => {
      n === o.id ? a += "->thrown" : a += `;
${o.id}->thrown`, n = null;
    }), `${a};`;
  }
};
_t.enabled;
_t.dump;
_t.dumpState;
_t.dumpDot;
_t.makeDotArrows;
function So(t4) {
  return t4.reachable;
}
var Rr = class _Rr {
  constructor(e, r, s) {
    this.id = e, this.nextSegments = [], this.prevSegments = r.filter(So), this.allNextSegments = [], this.allPrevSegments = r, this.reachable = s, Object.defineProperty(this, "internal", {
      value: {
        used: false,
        loopedPrevSegments: []
      }
    }), _t.enabled && (this.internal.nodes = []);
  }
  isLoopedPrevSegment(e) {
    return this.internal.loopedPrevSegments.indexOf(e) !== -1;
  }
  static newRoot(e) {
    return new _Rr(e, [], true);
  }
  static newNext(e, r) {
    return new _Rr(e, _Rr.flattenUnusedSegments(r), r.some(So));
  }
  static newUnreachable(e, r) {
    const s = new _Rr(e, _Rr.flattenUnusedSegments(r), false);
    return _Rr.markUsed(s), s;
  }
  static newDisconnected(e, r) {
    return new _Rr(e, [], r.some(So));
  }
  static markUsed(e) {
    if (e.internal.used)
      return;
    e.internal.used = true;
    let r;
    if (e.reachable)
      for (r = 0; r < e.allPrevSegments.length; ++r) {
        const s = e.allPrevSegments[r];
        s.allNextSegments.push(e), s.nextSegments.push(e);
      }
    else
      for (r = 0; r < e.allPrevSegments.length; ++r)
        e.allPrevSegments[r].allNextSegments.push(e);
  }
  static markPrevSegmentAsLooped(e, r) {
    e.internal.loopedPrevSegments.push(r);
  }
  static flattenUnusedSegments(e) {
    const r = /* @__PURE__ */ Object.create(null), s = [];
    for (let n = 0; n < e.length; ++n) {
      const a = e[n];
      if (!r[a.id])
        if (a.internal.used)
          r[a.id] = true, s.push(a);
        else
          for (let o = 0; o < a.allPrevSegments.length; ++o) {
            const l = a.allPrevSegments[o];
            r[l.id] || (r[l.id] = true, s.push(l));
          }
    }
    return s;
  }
};
var wr = Rr;
function z2(t4) {
  return t4.reachable;
}
function Ao(t4, e, r, s) {
  const n = t4.segmentsList, a = e >= 0 ? e : n.length + e, o = r >= 0 ? r : n.length + r, l = [];
  for (let i = 0; i < t4.count; ++i) {
    const u = [];
    for (let c = a; c <= o; ++c)
      u.push(n[c][i]);
    l.push(s(t4.idGenerator.next(), u));
  }
  return l;
}
function jg(t4, e) {
  let r = e;
  for (; r.length > t4.count; ) {
    const s = [];
    for (let n = 0, a = r.length / 2 | 0; n < a; ++n)
      s.push(wr.newNext(t4.idGenerator.next(), [r[n], r[n + a]]));
    r = s;
  }
  return r;
}
var ei = class _ei {
  constructor(e, r, s) {
    this.idGenerator = e, this.upper = r, this.count = s, this.segmentsList = [];
  }
  get head() {
    const e = this.segmentsList;
    return e.length === 0 ? [] : e[e.length - 1];
  }
  get empty() {
    return this.segmentsList.length === 0;
  }
  get reachable() {
    const e = this.head;
    return e.length > 0 && e.some(z2);
  }
  makeNext(e, r) {
    return Ao(this, e, r, wr.newNext);
  }
  makeUnreachable(e, r) {
    return Ao(this, e, r, wr.newUnreachable);
  }
  makeDisconnected(e, r) {
    return Ao(this, e, r, wr.newDisconnected);
  }
  add(e) {
    qt.default(e.length >= this.count, `${e.length} >= ${this.count}`), this.segmentsList.push(jg(this, e));
  }
  replaceHead(e) {
    qt.default(e.length >= this.count, `${e.length} >= ${this.count}`), this.segmentsList.splice(-1, 1, jg(this, e));
  }
  addAll(e) {
    qt.default(e.count === this.count);
    const r = e.segmentsList;
    for (let s = 0; s < r.length; ++s)
      this.segmentsList.push(r[s]);
  }
  clear() {
    this.segmentsList = [];
  }
  static newRoot(e) {
    const r = new _ei(e, null, 1);
    return r.add([wr.newRoot(e.next())]), r;
  }
  static newEmpty(e, r) {
    return new _ei(e.idGenerator, e, (r ? 2 : 1) * e.count);
  }
};
var Kt = ei;
function Mg(t4, e, r, s) {
  for (let n = 0; n < s.length; ++n) {
    const a = s[n];
    t4.push(a), e.indexOf(a) === -1 && r.push(a);
  }
}
function G2(t4, e) {
  if (!e)
    return t4.loopContext;
  let r = t4.loopContext;
  for (; r; ) {
    if (r.label === e)
      return r;
    r = r.upper;
  }
  return null;
}
function H2(t4, e) {
  let r = t4.breakContext;
  for (; r; ) {
    if (e ? r.label === e : r.breakable)
      return r;
    r = r.upper;
  }
  return null;
}
function $g(t4) {
  let e = t4.tryContext;
  for (; e; ) {
    if (e.hasFinalizer && e.position !== "finally")
      return e;
    e = e.upper;
  }
  return t4;
}
function Do(t4) {
  let e = t4.tryContext;
  for (; e; ) {
    if (e.position === "try" || e.hasFinalizer && e.position === "catch")
      return e;
    e = e.upper;
  }
  return t4;
}
function ma(t4, e) {
  t4.splice(t4.indexOf(e), 1);
}
function K2(t4, e) {
  for (let r = 0; r < t4.length; ++r) {
    const s = t4[r], n = e[r];
    ma(s.nextSegments, n), ma(s.allNextSegments, n), ma(n.prevSegments, s), ma(n.allPrevSegments, s);
  }
}
function yn(t4, e, r) {
  const s = wr.flattenUnusedSegments(e), n = wr.flattenUnusedSegments(r), a = Math.min(s.length, n.length);
  for (let o = 0; o < a; ++o) {
    const l = s[o], i = n[o];
    i.reachable && l.nextSegments.push(i), l.reachable && i.prevSegments.push(l), l.allNextSegments.push(i), i.allPrevSegments.push(l), i.allPrevSegments.length >= 2 && wr.markPrevSegmentAsLooped(i, l), t4.notifyLooped(l, i);
  }
}
function Vg(t4, e, r) {
  e.processed || (e.trueForkContext.add(r), e.falseForkContext.add(r), e.qqForkContext.add(r)), t4.test !== true && t4.brokenForkContext.addAll(e.falseForkContext), t4.endOfTestSegments = e.trueForkContext.makeNext(0, -1);
}
var J2 = class {
  constructor(e, r) {
    this.idGenerator = e, this.notifyLooped = r, this.forkContext = Kt.newRoot(e), this.choiceContext = null, this.switchContext = null, this.tryContext = null, this.loopContext = null, this.breakContext = null, this.chainContext = null, this.currentSegments = [], this.initialSegment = this.forkContext.head[0];
    const s = this.finalSegments = [], n = this.returnedForkContext = [], a = this.thrownForkContext = [];
    n.add = Mg.bind(null, n, a, s), a.add = Mg.bind(null, a, n, s);
  }
  get headSegments() {
    return this.forkContext.head;
  }
  get parentForkContext() {
    const e = this.forkContext;
    return e && e.upper;
  }
  pushForkContext(e) {
    return this.forkContext = Kt.newEmpty(this.forkContext, e), this.forkContext;
  }
  popForkContext() {
    const e = this.forkContext;
    return this.forkContext = e.upper, this.forkContext.replaceHead(e.makeNext(0, -1)), e;
  }
  forkPath() {
    this.forkContext.add(this.parentForkContext.makeNext(-1, -1));
  }
  forkBypassPath() {
    this.forkContext.add(this.parentForkContext.head);
  }
  pushChoiceContext(e, r) {
    this.choiceContext = {
      upper: this.choiceContext,
      kind: e,
      isForkingAsResult: r,
      trueForkContext: Kt.newEmpty(this.forkContext),
      falseForkContext: Kt.newEmpty(this.forkContext),
      qqForkContext: Kt.newEmpty(this.forkContext),
      processed: false
    };
  }
  popChoiceContext() {
    const e = this.choiceContext;
    this.choiceContext = e.upper;
    const r = this.forkContext, s = r.head;
    switch (e.kind) {
      case "&&":
      case "||":
      case "??":
        if (e.processed || (e.trueForkContext.add(s), e.falseForkContext.add(s), e.qqForkContext.add(s)), e.isForkingAsResult) {
          const a = this.choiceContext;
          return a.trueForkContext.addAll(e.trueForkContext), a.falseForkContext.addAll(e.falseForkContext), a.qqForkContext.addAll(e.qqForkContext), a.processed = true, e;
        }
        break;
      case "test":
        e.processed ? (e.falseForkContext.clear(), e.falseForkContext.add(s)) : (e.trueForkContext.clear(), e.trueForkContext.add(s));
        break;
      case "loop":
        return e;
      default:
        throw new Error("unreachable");
    }
    const n = e.trueForkContext;
    return n.addAll(e.falseForkContext), r.replaceHead(n.makeNext(0, -1)), e;
  }
  makeLogicalRight() {
    const e = this.choiceContext, r = this.forkContext;
    if (e.processed) {
      let s;
      switch (e.kind) {
        case "&&":
          s = e.trueForkContext;
          break;
        case "||":
          s = e.falseForkContext;
          break;
        case "??":
          s = e.qqForkContext;
          break;
        default:
          throw new Error("unreachable");
      }
      r.replaceHead(s.makeNext(0, -1)), s.clear(), e.processed = false;
    } else {
      switch (e.kind) {
        case "&&":
          e.falseForkContext.add(r.head);
          break;
        case "||":
          e.trueForkContext.add(r.head);
          break;
        case "??":
          e.trueForkContext.add(r.head), e.falseForkContext.add(r.head);
          break;
        default:
          throw new Error("unreachable");
      }
      r.replaceHead(r.makeNext(-1, -1));
    }
  }
  makeIfConsequent() {
    const e = this.choiceContext, r = this.forkContext;
    e.processed || (e.trueForkContext.add(r.head), e.falseForkContext.add(r.head), e.qqForkContext.add(r.head)), e.processed = false, r.replaceHead(e.trueForkContext.makeNext(0, -1));
  }
  makeIfAlternate() {
    const e = this.choiceContext, r = this.forkContext;
    e.trueForkContext.clear(), e.trueForkContext.add(r.head), e.processed = true, r.replaceHead(e.falseForkContext.makeNext(0, -1));
  }
  pushChainContext() {
    this.chainContext = {
      upper: this.chainContext,
      countChoiceContexts: 0
    };
  }
  popChainContext() {
    const e = this.chainContext;
    this.chainContext = e.upper;
    for (let r = e.countChoiceContexts; r > 0; --r)
      this.popChoiceContext();
  }
  makeOptionalNode() {
    this.chainContext && (this.chainContext.countChoiceContexts += 1, this.pushChoiceContext("??", false));
  }
  makeOptionalRight() {
    this.chainContext && this.makeLogicalRight();
  }
  pushSwitchContext(e, r) {
    this.switchContext = {
      upper: this.switchContext,
      hasCase: e,
      defaultSegments: null,
      defaultBodySegments: null,
      foundDefault: false,
      lastIsDefault: false,
      countForks: 0
    }, this.pushBreakContext(true, r);
  }
  popSwitchContext() {
    const e = this.switchContext;
    this.switchContext = e.upper;
    const r = this.forkContext, s = this.popBreakContext().brokenForkContext;
    if (e.countForks === 0) {
      s.empty || (s.add(r.makeNext(-1, -1)), r.replaceHead(s.makeNext(0, -1)));
      return;
    }
    const n = r.head;
    this.forkBypassPath();
    const a = r.head;
    s.add(n), e.lastIsDefault || (e.defaultBodySegments ? (K2(e.defaultSegments, e.defaultBodySegments), yn(this, a, e.defaultBodySegments)) : s.add(a));
    for (let o = 0; o < e.countForks; ++o)
      this.forkContext = this.forkContext.upper;
    this.forkContext.replaceHead(s.makeNext(0, -1));
  }
  makeSwitchCaseBody(e, r) {
    const s = this.switchContext;
    if (!s.hasCase)
      return;
    const n = this.forkContext, a = this.pushForkContext();
    a.add(n.makeNext(0, -1)), r ? (s.defaultSegments = n.head, e ? s.foundDefault = true : s.defaultBodySegments = a.head) : !e && s.foundDefault && (s.foundDefault = false, s.defaultBodySegments = a.head), s.lastIsDefault = r, s.countForks += 1;
  }
  pushTryContext(e) {
    this.tryContext = {
      upper: this.tryContext,
      position: "try",
      hasFinalizer: e,
      returnedForkContext: e ? Kt.newEmpty(this.forkContext) : null,
      thrownForkContext: Kt.newEmpty(this.forkContext),
      lastOfTryIsReachable: false,
      lastOfCatchIsReachable: false
    };
  }
  popTryContext() {
    const e = this.tryContext;
    if (this.tryContext = e.upper, e.position === "catch") {
      this.popForkContext();
      return;
    }
    const r = e.returnedForkContext, s = e.thrownForkContext;
    if (r.empty && s.empty)
      return;
    const n = this.forkContext.head;
    this.forkContext = this.forkContext.upper;
    const a = n.slice(0, n.length / 2 | 0), o = n.slice(n.length / 2 | 0);
    r.empty || $g(this).returnedForkContext.add(o), s.empty || Do(this).thrownForkContext.add(o), this.forkContext.replaceHead(a), !e.lastOfTryIsReachable && !e.lastOfCatchIsReachable && this.forkContext.makeUnreachable();
  }
  makeCatchBlock() {
    const e = this.tryContext, r = this.forkContext, s = e.thrownForkContext;
    e.position = "catch", e.thrownForkContext = Kt.newEmpty(r), e.lastOfTryIsReachable = r.reachable, s.add(r.head);
    const n = s.makeNext(0, -1);
    this.pushForkContext(), this.forkBypassPath(), this.forkContext.add(n);
  }
  makeFinallyBlock() {
    const e = this.tryContext;
    let r = this.forkContext;
    const s = e.returnedForkContext, n = e.thrownForkContext, a = r.head;
    if (e.position === "catch" ? (this.popForkContext(), r = this.forkContext, e.lastOfCatchIsReachable = r.reachable) : e.lastOfTryIsReachable = r.reachable, e.position = "finally", s.empty && n.empty)
      return;
    const o = r.makeNext(-1, -1);
    for (let l = 0; l < r.count; ++l) {
      const i = [a[l]];
      for (let u = 0; u < s.segmentsList.length; ++u)
        i.push(s.segmentsList[u][l]);
      for (let u = 0; u < n.segmentsList.length; ++u)
        i.push(n.segmentsList[u][l]);
      o.push(wr.newNext(this.idGenerator.next(), i));
    }
    this.pushForkContext(true), this.forkContext.add(o);
  }
  makeFirstThrowablePathInTryBlock() {
    const e = this.forkContext;
    if (!e.reachable)
      return;
    const r = Do(this);
    r === this || r.position !== "try" || !r.thrownForkContext.empty || (r.thrownForkContext.add(e.head), e.replaceHead(e.makeNext(-1, -1)));
  }
  pushLoopContext(e, r) {
    const s = this.forkContext, n = this.pushBreakContext(true, r);
    switch (e) {
      case "WhileStatement":
        this.pushChoiceContext("loop", false), this.loopContext = {
          upper: this.loopContext,
          type: e,
          label: r,
          test: void 0,
          continueDestSegments: null,
          brokenForkContext: n.brokenForkContext
        };
        break;
      case "DoWhileStatement":
        this.pushChoiceContext("loop", false), this.loopContext = {
          upper: this.loopContext,
          type: e,
          label: r,
          test: void 0,
          entrySegments: null,
          continueForkContext: Kt.newEmpty(s),
          brokenForkContext: n.brokenForkContext
        };
        break;
      case "ForStatement":
        this.pushChoiceContext("loop", false), this.loopContext = {
          upper: this.loopContext,
          type: e,
          label: r,
          test: void 0,
          endOfInitSegments: null,
          testSegments: null,
          endOfTestSegments: null,
          updateSegments: null,
          endOfUpdateSegments: null,
          continueDestSegments: null,
          brokenForkContext: n.brokenForkContext
        };
        break;
      case "ForInStatement":
      case "ForOfStatement":
        this.loopContext = {
          upper: this.loopContext,
          type: e,
          label: r,
          prevSegments: null,
          leftSegments: null,
          endOfLeftSegments: null,
          continueDestSegments: null,
          brokenForkContext: n.brokenForkContext
        };
        break;
      default:
        throw new Error(`unknown type: "${e}"`);
    }
  }
  popLoopContext() {
    const e = this.loopContext;
    this.loopContext = e.upper;
    const r = this.forkContext, s = this.popBreakContext().brokenForkContext;
    switch (e.type) {
      case "WhileStatement":
      case "ForStatement":
        this.popChoiceContext(), yn(this, r.head, e.continueDestSegments);
        break;
      case "DoWhileStatement": {
        const n = this.popChoiceContext();
        n.processed || (n.trueForkContext.add(r.head), n.falseForkContext.add(r.head)), e.test !== true && s.addAll(n.falseForkContext);
        const a = n.trueForkContext.segmentsList;
        for (let o = 0; o < a.length; ++o)
          yn(this, a[o], e.entrySegments);
        break;
      }
      case "ForInStatement":
      case "ForOfStatement":
        s.add(r.head), yn(this, r.head, e.leftSegments);
        break;
      default:
        throw new Error("unreachable");
    }
    s.empty ? r.replaceHead(r.makeUnreachable(-1, -1)) : r.replaceHead(s.makeNext(0, -1));
  }
  makeWhileTest(e) {
    const r = this.loopContext, s = this.forkContext, n = s.makeNext(0, -1);
    r.test = e, r.continueDestSegments = n, s.replaceHead(n);
  }
  makeWhileBody() {
    const e = this.loopContext, r = this.choiceContext, s = this.forkContext;
    r.processed || (r.trueForkContext.add(s.head), r.falseForkContext.add(s.head)), e.test !== true && e.brokenForkContext.addAll(r.falseForkContext), s.replaceHead(r.trueForkContext.makeNext(0, -1));
  }
  makeDoWhileBody() {
    const e = this.loopContext, r = this.forkContext, s = r.makeNext(-1, -1);
    e.entrySegments = s, r.replaceHead(s);
  }
  makeDoWhileTest(e) {
    const r = this.loopContext, s = this.forkContext;
    if (r.test = e, !r.continueForkContext.empty) {
      r.continueForkContext.add(s.head);
      const n = r.continueForkContext.makeNext(0, -1);
      s.replaceHead(n);
    }
  }
  makeForTest(e) {
    const r = this.loopContext, s = this.forkContext, n = s.head, a = s.makeNext(-1, -1);
    r.test = e, r.endOfInitSegments = n, r.continueDestSegments = r.testSegments = a, s.replaceHead(a);
  }
  makeForUpdate() {
    const e = this.loopContext, r = this.choiceContext, s = this.forkContext;
    e.testSegments ? Vg(e, r, s.head) : e.endOfInitSegments = s.head;
    const n = s.makeDisconnected(-1, -1);
    e.continueDestSegments = e.updateSegments = n, s.replaceHead(n);
  }
  makeForBody() {
    const e = this.loopContext, r = this.choiceContext, s = this.forkContext;
    e.updateSegments ? (e.endOfUpdateSegments = s.head, e.testSegments && yn(this, e.endOfUpdateSegments, e.testSegments)) : e.testSegments ? Vg(e, r, s.head) : e.endOfInitSegments = s.head;
    let n = e.endOfTestSegments;
    if (!n) {
      const a = Kt.newEmpty(s);
      a.add(e.endOfInitSegments), e.endOfUpdateSegments && a.add(e.endOfUpdateSegments), n = a.makeNext(0, -1);
    }
    e.continueDestSegments = e.continueDestSegments || n, s.replaceHead(n);
  }
  makeForInOfLeft() {
    const e = this.loopContext, r = this.forkContext, s = r.makeDisconnected(-1, -1);
    e.prevSegments = r.head, e.leftSegments = e.continueDestSegments = s, r.replaceHead(s);
  }
  makeForInOfRight() {
    const e = this.loopContext, r = this.forkContext, s = Kt.newEmpty(r);
    s.add(e.prevSegments);
    const n = s.makeNext(-1, -1);
    e.endOfLeftSegments = r.head, r.replaceHead(n);
  }
  makeForInOfBody() {
    const e = this.loopContext, r = this.forkContext, s = Kt.newEmpty(r);
    s.add(e.endOfLeftSegments);
    const n = s.makeNext(-1, -1);
    yn(this, r.head, e.leftSegments), e.brokenForkContext.add(r.head), r.replaceHead(n);
  }
  pushBreakContext(e, r) {
    return this.breakContext = {
      upper: this.breakContext,
      breakable: e,
      label: r,
      brokenForkContext: Kt.newEmpty(this.forkContext)
    }, this.breakContext;
  }
  popBreakContext() {
    const e = this.breakContext, r = this.forkContext;
    if (this.breakContext = e.upper, !e.breakable) {
      const s = e.brokenForkContext;
      s.empty || (s.add(r.head), r.replaceHead(s.makeNext(0, -1)));
    }
    return e;
  }
  makeBreak(e) {
    const r = this.forkContext;
    if (!r.reachable)
      return;
    const s = H2(this, e);
    s && s.brokenForkContext.add(r.head), r.replaceHead(r.makeUnreachable(-1, -1));
  }
  makeContinue(e) {
    const r = this.forkContext;
    if (!r.reachable)
      return;
    const s = G2(this, e);
    s && (s.continueDestSegments ? (yn(this, r.head, s.continueDestSegments), (s.type === "ForInStatement" || s.type === "ForOfStatement") && s.brokenForkContext.add(r.head)) : s.continueForkContext.add(r.head)), r.replaceHead(r.makeUnreachable(-1, -1));
  }
  makeReturn() {
    const e = this.forkContext;
    e.reachable && ($g(this).returnedForkContext.add(e.head), e.replaceHead(e.makeUnreachable(-1, -1)));
  }
  makeThrow() {
    const e = this.forkContext;
    e.reachable && (Do(this).thrownForkContext.add(e.head), e.replaceHead(e.makeUnreachable(-1, -1)));
  }
  makeFinal() {
    const e = this.currentSegments;
    e.length > 0 && e[0].reachable && this.returnedForkContext.add(e);
  }
};
var X2 = J2;
var Q2 = class {
  constructor(e) {
    this.prefix = String(e), this.n = 0;
  }
  next() {
    return this.n = 1 + this.n | 0, this.n < 0 && (this.n = 1), this.prefix + this.n;
  }
};
var jE = Q2;
var Y2 = class {
  constructor(e, r, s) {
    this.id = e, this.upper = r, this.childCodePaths = [], Object.defineProperty(this, "internal", {
      value: new X2(new jE(`${e}_`), s)
    }), r && r.childCodePaths.push(this);
  }
  static getState(e) {
    return e.internal;
  }
  get initialSegment() {
    return this.internal.initialSegment;
  }
  get finalSegments() {
    return this.internal.finalSegments;
  }
  get returnedSegments() {
    return this.internal.returnedForkContext;
  }
  get thrownSegments() {
    return this.internal.thrownForkContext;
  }
  get currentSegments() {
    return this.internal.currentSegments;
  }
  traverseSegments(e, r) {
    let s, n;
    typeof e == "function" ? (n = e, s = {}) : (s = e || {}, n = r);
    const a = s.first || this.internal.initialSegment, o = s.last;
    let l = null, i = 0, u = 0, c = null;
    const f = /* @__PURE__ */ Object.create(null), h = [[a, 0]];
    let p = null, m = false;
    const d = {
      skip() {
        h.length <= 1 ? m = true : p = h[h.length - 2][0];
      },
      break() {
        m = true;
      }
    };
    function g(y) {
      return f[y.id] || c.isLoopedPrevSegment(y);
    }
    for (; h.length > 0; ) {
      if (l = h[h.length - 1], c = l[0], i = l[1], i === 0) {
        if (f[c.id]) {
          h.pop();
          continue;
        }
        if (c !== a && c.prevSegments.length > 0 && !c.prevSegments.every(g)) {
          h.pop();
          continue;
        }
        if (p && c.prevSegments.indexOf(p) !== -1 && (p = null), f[c.id] = true, !p && (n.call(this, c, d), c === o && d.skip(), m))
          break;
      }
      u = c.nextSegments.length - 1, i < u ? (l[1] += 1, h.push([c.nextSegments[i], 0])) : i === u ? (l[0] = c.nextSegments[i], l[1] = 0) : h.pop();
    }
  }
};
var kr = Y2;
var {
  breakableTypePattern: ME
} = Xt.astUtils;
function Z2(t4) {
  return !!t4.test;
}
function Ri(t4) {
  return t4 === "&&" || t4 === "||" || t4 === "??";
}
function Ni(t4) {
  return t4 === "&&=" || t4 === "||=" || t4 === "??=";
}
function Ug(t4) {
  return t4.parent.type === "LabeledStatement" ? t4.parent.label.name : null;
}
function qg(t4) {
  const e = t4.parent;
  switch (e.type) {
    case "ConditionalExpression":
    case "IfStatement":
    case "WhileStatement":
    case "DoWhileStatement":
    case "ForStatement":
      return e.test === t4;
    case "LogicalExpression":
      return Ri(e.operator);
    case "AssignmentExpression":
      return Ni(e.operator);
    default:
      return false;
  }
}
function wo(t4) {
  if (t4.type === "Literal")
    return !!t4.value;
}
function eB(t4) {
  const e = t4.parent;
  switch (e.type) {
    case "LabeledStatement":
    case "BreakStatement":
    case "ContinueStatement":
    case "ArrayPattern":
    case "RestElement":
    case "ImportSpecifier":
    case "ImportDefaultSpecifier":
    case "ImportNamespaceSpecifier":
    case "CatchClause":
      return false;
    case "FunctionDeclaration":
    case "FunctionExpression":
    case "ArrowFunctionExpression":
    case "ClassDeclaration":
    case "ClassExpression":
    case "VariableDeclarator":
      return e.id !== t4;
    case "Property":
    case "MethodDefinition":
      return e.key !== t4 || e.computed || e.shorthand;
    case "AssignmentPattern":
      return e.key !== t4;
    default:
      return true;
  }
}
function vn(t4, e) {
  const r = t4.codePath, s = kr.getState(r), n = s.currentSegments, a = s.headSegments, o = Math.max(n.length, a.length);
  let l, i, u;
  for (l = 0; l < o; ++l)
    i = n[l], u = a[l], i !== u && i && (_t.dump(`onCodePathSegmentEnd ${i.id}`), i.reachable && t4.emitter.emit("onCodePathSegmentEnd", i, e));
  for (s.currentSegments = a, l = 0; l < o; ++l)
    i = n[l], u = a[l], i !== u && u && (_t.dump(`onCodePathSegmentStart ${u.id}`), wr.markUsed(u), u.reachable && t4.emitter.emit("onCodePathSegmentStart", u, e));
}
function tB(t4, e) {
  const r = kr.getState(t4.codePath), s = r.currentSegments;
  for (let n = 0; n < s.length; ++n) {
    const a = s[n];
    _t.dump(`onCodePathSegmentEnd ${a.id}`), a.reachable && t4.emitter.emit("onCodePathSegmentEnd", a, e);
  }
  r.currentSegments = [];
}
function rB(t4, e) {
  const r = t4.codePath, s = kr.getState(r), n = e.parent;
  switch (n.type) {
    case "CallExpression":
      n.optional === true && n.arguments.length >= 1 && n.arguments[0] === e && s.makeOptionalRight();
      break;
    case "MemberExpression":
      n.optional === true && n.property === e && s.makeOptionalRight();
      break;
    case "LogicalExpression":
      n.right === e && Ri(n.operator) && s.makeLogicalRight();
      break;
    case "AssignmentExpression":
      n.right === e && Ni(n.operator) && s.makeLogicalRight();
      break;
    case "ConditionalExpression":
    case "IfStatement":
      n.consequent === e ? s.makeIfConsequent() : n.alternate === e && s.makeIfAlternate();
      break;
    case "SwitchCase":
      n.consequent[0] === e && s.makeSwitchCaseBody(false, !n.test);
      break;
    case "TryStatement":
      n.handler === e ? s.makeCatchBlock() : n.finalizer === e && s.makeFinallyBlock();
      break;
    case "WhileStatement":
      n.test === e ? s.makeWhileTest(wo(e)) : (qt.default(n.body === e), s.makeWhileBody());
      break;
    case "DoWhileStatement":
      n.body === e ? s.makeDoWhileBody() : (qt.default(n.test === e), s.makeDoWhileTest(wo(e)));
      break;
    case "ForStatement":
      n.test === e ? s.makeForTest(wo(e)) : n.update === e ? s.makeForUpdate() : n.body === e && s.makeForBody();
      break;
    case "ForInStatement":
    case "ForOfStatement":
      n.left === e ? s.makeForInOfLeft() : n.right === e ? s.makeForInOfRight() : (qt.default(n.body === e), s.makeForInOfBody());
      break;
    case "AssignmentPattern":
      n.right === e && (s.pushForkContext(), s.forkBypassPath(), s.forkPath());
      break;
  }
}
function nB(t4, e) {
  let r = t4.codePath, s = r && kr.getState(r);
  const n = e.parent;
  switch (e.type) {
    case "Program":
    case "FunctionDeclaration":
    case "FunctionExpression":
    case "ArrowFunctionExpression":
      r && (vn(t4, e), _t.dumpState(e, s, false)), r = t4.codePath = new kr(t4.idGenerator.next(), r, t4.onLooped), s = kr.getState(r), _t.dump(`onCodePathStart ${r.id}`), t4.emitter.emit("onCodePathStart", r, e);
      break;
    case "ChainExpression":
      s.pushChainContext();
      break;
    case "CallExpression":
      e.optional === true && s.makeOptionalNode();
      break;
    case "MemberExpression":
      e.optional === true && s.makeOptionalNode();
      break;
    case "LogicalExpression":
      Ri(e.operator) && s.pushChoiceContext(e.operator, qg(e));
      break;
    case "AssignmentExpression":
      Ni(e.operator) && s.pushChoiceContext(e.operator.slice(0, -1), qg(e));
      break;
    case "ConditionalExpression":
    case "IfStatement":
      s.pushChoiceContext("test", false);
      break;
    case "SwitchStatement":
      s.pushSwitchContext(e.cases.some(Z2), Ug(e));
      break;
    case "TryStatement":
      s.pushTryContext(!!e.finalizer);
      break;
    case "SwitchCase":
      n.discriminant !== e && n.cases[0] !== e && s.forkPath();
      break;
    case "WhileStatement":
    case "DoWhileStatement":
    case "ForStatement":
    case "ForInStatement":
    case "ForOfStatement":
      s.pushLoopContext(e.type, Ug(e));
      break;
    case "LabeledStatement":
      ME.test(e.body.type) || s.pushBreakContext(false, e.label.name);
      break;
  }
  vn(t4, e), _t.dumpState(e, s, false);
}
function sB(t4, e) {
  const r = t4.codePath, s = kr.getState(r);
  let n = false;
  switch (e.type) {
    case "ChainExpression":
      s.popChainContext();
      break;
    case "IfStatement":
    case "ConditionalExpression":
      s.popChoiceContext();
      break;
    case "LogicalExpression":
      Ri(e.operator) && s.popChoiceContext();
      break;
    case "AssignmentExpression":
      Ni(e.operator) && s.popChoiceContext();
      break;
    case "SwitchStatement":
      s.popSwitchContext();
      break;
    case "SwitchCase":
      e.consequent.length === 0 && s.makeSwitchCaseBody(true, !e.test), s.forkContext.reachable && (n = true);
      break;
    case "TryStatement":
      s.popTryContext();
      break;
    case "BreakStatement":
      vn(t4, e), s.makeBreak(e.label && e.label.name), n = true;
      break;
    case "ContinueStatement":
      vn(t4, e), s.makeContinue(e.label && e.label.name), n = true;
      break;
    case "ReturnStatement":
      vn(t4, e), s.makeReturn(), n = true;
      break;
    case "ThrowStatement":
      vn(t4, e), s.makeThrow(), n = true;
      break;
    case "Identifier":
      eB(e) && (s.makeFirstThrowablePathInTryBlock(), n = true);
      break;
    case "CallExpression":
    case "ImportExpression":
    case "MemberExpression":
    case "NewExpression":
    case "YieldExpression":
      s.makeFirstThrowablePathInTryBlock();
      break;
    case "WhileStatement":
    case "DoWhileStatement":
    case "ForStatement":
    case "ForInStatement":
    case "ForOfStatement":
      s.popLoopContext();
      break;
    case "AssignmentPattern":
      s.popForkContext();
      break;
    case "LabeledStatement":
      ME.test(e.body.type) || s.popBreakContext();
      break;
  }
  n || vn(t4, e), _t.dumpState(e, s, true);
}
function aB(t4, e) {
  switch (e.type) {
    case "Program":
    case "FunctionDeclaration":
    case "FunctionExpression":
    case "ArrowFunctionExpression": {
      let r = t4.codePath;
      kr.getState(r).makeFinal(), tB(t4, e), _t.dump(`onCodePathEnd ${r.id}`), t4.emitter.emit("onCodePathEnd", r, e), _t.dumpDot(r), r = t4.codePath = t4.codePath.upper, r && _t.dumpState(e, kr.getState(r), true);
      break;
    }
    case "CallExpression":
      e.optional === true && e.arguments.length === 0 && kr.getState(t4.codePath).makeOptionalRight();
      break;
  }
}
var iB = class {
  constructor(e) {
    this.original = e, this.emitter = e.emitter, this.codePath = null, this.idGenerator = new jE("s"), this.currentNode = null, this.onLooped = this.onLooped.bind(this);
  }
  enterNode(e) {
    this.currentNode = e, e.parent && rB(this, e), nB(this, e), this.original.enterNode(e), this.currentNode = null;
  }
  leaveNode(e) {
    this.currentNode = e, sB(this, e), this.original.leaveNode(e), aB(this, e), this.currentNode = null;
  }
  onLooped(e, r) {
    e.reachable && r.reachable && (_t.dump(`onCodePathSegmentLoop ${e.id} -> ${r.id}`), this.emitter.emit("onCodePathSegmentLoop", e, r, this.currentNode));
  }
};
var oB = iB;
function Fa(t4, e) {
  return t4.line - e.line || t4.column - e.column;
}
function Wg(t4) {
  const e = [];
  let r = 0, s = null;
  const n = /* @__PURE__ */ new Map(), a = /* @__PURE__ */ new Set(), o = /* @__PURE__ */ new Set();
  for (const i of t4.problems) {
    for (; r < t4.directives.length && Fa(t4.directives[r], i) <= 0; ) {
      const u = t4.directives[r++];
      switch (u.type) {
        case "disable":
          u.ruleId === null ? (s = u, n.clear(), a.clear()) : (s && a.delete(u.ruleId), n.set(u.ruleId, u));
          break;
        case "enable":
          u.ruleId === null ? (s = null, n.clear()) : (s && a.add(u.ruleId), n.delete(u.ruleId));
          break;
      }
    }
    n.has(i.ruleId) ? o.add(n.get(i.ruleId)) : s && !a.has(i.ruleId) ? o.add(s) : e.push(i);
  }
  const l = t4.directives.filter((i) => i.type === "disable" && !o.has(i)).map((i) => ({
    ruleId: null,
    message: i.ruleId ? `Unused eslint-disable directive (no problems were reported from '${i.ruleId}').` : "Unused eslint-disable directive (no problems were reported).",
    line: i.unprocessedDirective.line,
    column: i.unprocessedDirective.column,
    severity: t4.reportUnusedDisableDirectives === "warn" ? 1 : 2,
    nodeType: null
  }));
  return {
    problems: e,
    unusedDisableDirectives: l
  };
}
var lB = ({
  directives: t4,
  problems: e,
  reportUnusedDisableDirectives: r = "off"
}) => {
  const s = t4.filter((l) => l.type === "disable" || l.type === "enable").map((l) => Object.assign({}, l, {
    unprocessedDirective: l
  })).sort(Fa), n = function(l, i) {
    const u = l.map(i);
    return [].concat(...u);
  }(t4, (l) => {
    switch (l.type) {
      case "disable":
      case "enable":
        return [];
      case "disable-line":
        return [{
          type: "disable",
          line: l.line,
          column: 1,
          ruleId: l.ruleId,
          unprocessedDirective: l
        }, {
          type: "enable",
          line: l.line + 1,
          column: 0,
          ruleId: l.ruleId,
          unprocessedDirective: l
        }];
      case "disable-next-line":
        return [{
          type: "disable",
          line: l.line + 1,
          column: 1,
          ruleId: l.ruleId,
          unprocessedDirective: l
        }, {
          type: "enable",
          line: l.line + 2,
          column: 0,
          ruleId: l.ruleId,
          unprocessedDirective: l
        }];
      default:
        throw new TypeError(`Unrecognized directive type '${l.type}'`);
    }
  }).sort(Fa), a = Wg({
    problems: e,
    directives: s,
    reportUnusedDisableDirectives: r
  }), o = Wg({
    problems: a.problems,
    directives: n,
    reportUnusedDisableDirectives: r
  });
  return r !== "off" ? o.problems.concat(a.unusedDisableDirectives).concat(o.unusedDisableDirectives).sort(Fa) : o.problems;
};
var gs = Li.default("eslint:config-comment-parser");
var uB = class {
  parseStringConfig(t4, e) {
    gs("Parsing String config");
    const r = {};
    return t4.replace(/\s*([:,])\s*/gu, "$1").split(/\s|,+/u).forEach((n) => {
      if (!n)
        return;
      const [a, o = null] = n.split(":");
      r[a] = {
        value: o,
        comment: e
      };
    }), r;
  }
  parseJsonConfig(t4, e) {
    gs("Parsing JSON config");
    let r = {};
    try {
      if (r = v2.default.parse("Object", t4) || {}, Oi.default.isEverySeverityValid(r))
        return {
          success: true,
          config: r
        };
    } catch {
      gs("Levn parsing failed; falling back to manual parsing.");
    }
    r = {};
    const s = t4.replace(/([-a-zA-Z0-9/]+):/gu, '"$1":').replace(/(\]|[0-9])\s+(?=")/u, "$1,");
    try {
      r = JSON.parse(`{${s}}`);
    } catch (n) {
      return gs("Manual parsing failed."), {
        success: false,
        error: {
          ruleId: null,
          fatal: true,
          severity: 2,
          message: `Failed to parse JSON from '${s}': ${n.message}`,
          line: e.start.line,
          column: e.start.column + 1
        }
      };
    }
    return {
      success: true,
      config: r
    };
  }
  parseListConfig(t4) {
    gs("Parsing list config");
    const e = {};
    return t4.replace(/\s*,\s*/gu, ",").split(/,+/u).forEach((r) => {
      const s = r.trim();
      s && (e[s] = true);
    }), e;
  }
};
function cB(...t4) {
  return [...new Set([].concat(...t4))];
}
function pB(...t4) {
  if (t4.length === 0)
    return [];
  let e = [...new Set(t4[0])];
  for (const r of t4.slice(1))
    e = e.filter((s) => r.includes(s));
  return e;
}
function Pa(t4) {
  switch (t4.type) {
    case "identifier":
      return [t4.value];
    case "matches": {
      const e = t4.selectors.map(Pa);
      return e.every(Boolean) ? cB(...e) : null;
    }
    case "compound": {
      const e = t4.selectors.map(Pa).filter((r) => r);
      return e.length ? pB(...e) : null;
    }
    case "child":
    case "descendant":
    case "sibling":
    case "adjacent":
      return Pa(t4.right);
    default:
      return null;
  }
}
function Ia(t4) {
  switch (t4.type) {
    case "child":
    case "descendant":
    case "sibling":
    case "adjacent":
      return Ia(t4.left) + Ia(t4.right);
    case "compound":
    case "not":
    case "matches":
      return t4.selectors.reduce((e, r) => e + Ia(r), 0);
    case "attribute":
    case "field":
    case "nth-child":
    case "nth-last-child":
      return 1;
    default:
      return 0;
  }
}
function _a(t4) {
  switch (t4.type) {
    case "child":
    case "descendant":
    case "sibling":
    case "adjacent":
      return _a(t4.left) + _a(t4.right);
    case "compound":
    case "not":
    case "matches":
      return t4.selectors.reduce((e, r) => e + _a(r), 0);
    case "identifier":
      return 1;
    default:
      return 0;
  }
}
function ys(t4, e) {
  return t4.attributeCount - e.attributeCount || t4.identifierCount - e.identifierCount || (t4.rawSelector <= e.rawSelector ? -1 : 1);
}
function fB(t4) {
  try {
    return bE.default.parse(t4.replace(/:exit$/u, ""));
  } catch (e) {
    throw e.location && e.location.start && typeof e.location.start.offset == "number" ? new SyntaxError(`Syntax error in selector "${t4}" at position ${e.location.start.offset}: ${e.message}`) : e;
  }
}
var ko = /* @__PURE__ */ new Map();
function hB(t4) {
  if (ko.has(t4))
    return ko.get(t4);
  const e = fB(t4), r = {
    rawSelector: t4,
    isExit: t4.endsWith(":exit"),
    parsedSelector: e,
    listenerTypes: Pa(e),
    attributeCount: Ia(e),
    identifierCount: _a(e)
  };
  return ko.set(t4, r), r;
}
var mB = class {
  constructor(e, r) {
    this.emitter = e, this.esqueryOptions = r, this.currentAncestry = [], this.enterSelectorsByNodeType = /* @__PURE__ */ new Map(), this.exitSelectorsByNodeType = /* @__PURE__ */ new Map(), this.anyTypeEnterSelectors = [], this.anyTypeExitSelectors = [], e.eventNames().forEach((s) => {
      const n = hB(s);
      if (n.listenerTypes) {
        const o = n.isExit ? this.exitSelectorsByNodeType : this.enterSelectorsByNodeType;
        n.listenerTypes.forEach((l) => {
          o.has(l) || o.set(l, []), o.get(l).push(n);
        });
        return;
      }
      (n.isExit ? this.anyTypeExitSelectors : this.anyTypeEnterSelectors).push(n);
    }), this.anyTypeEnterSelectors.sort(ys), this.anyTypeExitSelectors.sort(ys), this.enterSelectorsByNodeType.forEach((s) => s.sort(ys)), this.exitSelectorsByNodeType.forEach((s) => s.sort(ys));
  }
  applySelector(e, r) {
    bE.default.matches(e, r.parsedSelector, this.currentAncestry, this.esqueryOptions) && this.emitter.emit(r.rawSelector, e);
  }
  applySelectors(e, r) {
    const s = (r ? this.exitSelectorsByNodeType : this.enterSelectorsByNodeType).get(e.type) || [], n = r ? this.anyTypeExitSelectors : this.anyTypeEnterSelectors;
    let a = 0, o = 0;
    for (; a < s.length || o < n.length; )
      a >= s.length || o < n.length && ys(n[o], s[a]) < 0 ? this.applySelector(e, n[o++]) : this.applySelector(e, s[a++]);
  }
  enterNode(e) {
    e.parent && this.currentAncestry.unshift(e.parent), this.applySelectors(e, false);
  }
  leaveNode(e) {
    this.applySelectors(e, true), this.currentAncestry.shift();
  }
};
var zg = mB;
function Gg(t4, e) {
  return {
    range: [t4, t4],
    text: e
  };
}
var dB = Object.freeze({
  insertTextAfter(t4, e) {
    return this.insertTextAfterRange(t4.range, e);
  },
  insertTextAfterRange(t4, e) {
    return Gg(t4[1], e);
  },
  insertTextBefore(t4, e) {
    return this.insertTextBeforeRange(t4.range, e);
  },
  insertTextBeforeRange(t4, e) {
    return Gg(t4[0], e);
  },
  replaceText(t4, e) {
    return this.replaceTextRange(t4.range, e);
  },
  replaceTextRange(t4, e) {
    return {
      range: t4,
      text: e
    };
  },
  remove(t4) {
    return this.removeRange(t4.range);
  },
  removeRange(t4) {
    return {
      range: t4,
      text: ""
    };
  }
});
var gB = dB;
var Wu = (t4, e) => e ? t4.replace(/\{\{([^{}]+?)\}\}/gu, (r, s) => {
  const n = s.trim();
  return n in e ? e[n] : r;
}) : t4;
function yB(...t4) {
  return t4.length === 1 ? Object.assign({}, t4[0]) : typeof t4[1] == "string" ? {
    node: t4[0],
    message: t4[1],
    data: t4[2],
    fix: t4[3]
  } : {
    node: t4[0],
    loc: t4[1],
    message: t4[2],
    data: t4[3],
    fix: t4[4]
  };
}
function xB(t4) {
  t4.node ? qt.default(typeof t4.node == "object", "Node must be an object") : qt.default(t4.loc, "Node must be provided when reporting error if location is not provided");
}
function vB(t4) {
  return t4.loc ? t4.loc.start ? t4.loc : {
    start: t4.loc,
    end: null
  } : t4.node.loc;
}
function $E(t4) {
  t4 && qt.default(t4.range && typeof t4.range[0] == "number" && typeof t4.range[1] == "number", `Fix has invalid range: ${JSON.stringify(t4, null, 2)}`);
}
function EB(t4, e) {
  return t4.range[0] - e.range[0] || t4.range[1] - e.range[1];
}
function bB(t4, e) {
  for (const l of t4)
    $E(l);
  if (t4.length === 0)
    return null;
  if (t4.length === 1)
    return t4[0];
  t4.sort(EB);
  const r = e.text, s = t4[0].range[0], n = t4[t4.length - 1].range[1];
  let a = "", o = Number.MIN_SAFE_INTEGER;
  for (const l of t4)
    qt.default(l.range[0] >= o, "Fix objects must not be overlapped in a report."), l.range[0] >= 0 && (a += r.slice(Math.max(0, s, o), l.range[0])), a += l.text, o = l.range[1];
  return a += r.slice(Math.max(0, s, o), n), {
    range: [s, n],
    text: a
  };
}
function VE(t4, e) {
  if (typeof t4.fix != "function")
    return null;
  const r = t4.fix(gB);
  return r && Symbol.iterator in r ? bB(Array.from(r), e) : ($E(r), r);
}
function CB(t4, e, r) {
  return !t4.suggest || !Array.isArray(t4.suggest) ? [] : t4.suggest.map((s) => {
    const n = s.desc || r[s.messageId];
    return {
      ...s,
      desc: Wu(n, s.data),
      fix: VE(s, e)
    };
  }).filter(({
    fix: s
  }) => s);
}
function SB(t4) {
  const e = {
    ruleId: t4.ruleId,
    severity: t4.severity,
    message: t4.message,
    line: t4.loc.start.line,
    column: t4.loc.start.column + 1,
    nodeType: t4.node && t4.node.type || null
  };
  return t4.messageId && (e.messageId = t4.messageId), t4.loc.end && (e.endLine = t4.loc.end.line, e.endColumn = t4.loc.end.column + 1), t4.fix && (e.fix = t4.fix), t4.suggestions && t4.suggestions.length > 0 && (e.suggestions = t4.suggestions), e;
}
function AB(t4, e) {
  t4 && Array.isArray(t4) && t4.forEach((r) => {
    if (r.messageId) {
      const {
        messageId: s
      } = r;
      if (!e)
        throw new TypeError(`context.report() called with a suggest option with a messageId '${s}', but no messages were present in the rule metadata.`);
      if (!e[s])
        throw new TypeError(`context.report() called with a suggest option with a messageId '${s}' which is not present in the 'messages' config: ${JSON.stringify(e, null, 2)}`);
      if (r.desc)
        throw new TypeError("context.report() called with a suggest option that defines both a 'messageId' and an 'desc'. Please only pass one.");
    } else if (!r.desc)
      throw new TypeError("context.report() called with a suggest option that doesn't have either a `desc` or `messageId`");
    if (typeof r.fix != "function")
      throw new TypeError(`context.report() called with a suggest option without a fix function. See: ${r}`);
  });
}
var DB = function(t4) {
  return (...e) => {
    const r = yB(...e), s = t4.messageIds;
    xB(r);
    let n;
    if (r.messageId) {
      if (!s)
        throw new TypeError("context.report() called with a messageId, but no messages were present in the rule metadata.");
      const a = r.messageId;
      if (r.message)
        throw new TypeError("context.report() called with a message and a messageId. Please only pass one.");
      if (!s || !Object.prototype.hasOwnProperty.call(s, a))
        throw new TypeError(`context.report() called with a messageId of '${a}' which is not present in the 'messages' config: ${JSON.stringify(s, null, 2)}`);
      n = s[a];
    } else if (r.message)
      n = r.message;
    else
      throw new TypeError("Missing `message` property in report() call; add a message that describes the linting problem.");
    return AB(r.suggest, s), SB({
      ruleId: t4.ruleId,
      severity: t4.severity,
      node: r.node,
      message: Wu(n, r.data),
      messageId: r.messageId,
      loc: vB(r),
      fix: t4.disableFixes ? null : VE(r, t4.sourceCode),
      suggestions: t4.disableFixes ? [] : CB(r, t4.sourceCode, s)
    });
  };
};
var To = /* @__PURE__ */ new Map();
function wB(t4) {
  return typeof t4 == "function" ? Object.assign({
    create: t4
  }, t4) : t4;
}
var kB = class {
  constructor() {
    this._rules = /* @__PURE__ */ Object.create(null);
  }
  define(e, r) {
    this._rules[e] = wB(r);
  }
  get(e) {
    return typeof this._rules[e] == "string" && this.define(e, null), this._rules[e] ? this._rules[e] : To.has(e) ? To.get(e) : null;
  }
  *[Symbol.iterator]() {
    yield* To;
    for (const e of Object.keys(this._rules))
      yield [e, this.get(e)];
  }
};
var UE = kB;
var TB = () => {
  const t4 = /* @__PURE__ */ Object.create(null);
  return Object.freeze({
    on(e, r) {
      e in t4 ? t4[e].push(r) : t4[e] = [r];
    },
    emit(e, ...r) {
      e in t4 && t4[e].forEach((s) => s(...r));
    },
    eventNames() {
      return Object.keys(t4);
    }
  });
};
var da = Li.default("eslint:source-code-fixer");
var Fo = "\uFEFF";
function FB(t4, e) {
  return t4.fix.range[0] - e.fix.range[0] || t4.fix.range[1] - e.fix.range[1];
}
function PB(t4, e) {
  return t4.line - e.line || t4.column - e.column;
}
function qE() {
  Object.freeze(this);
}
qE.applyFixes = function(t4, e, r) {
  if (da("Applying fixes"), r === false)
    return da("shouldFix parameter was false, not attempting fixes"), {
      fixed: false,
      messages: e,
      output: t4
    };
  const s = [], n = [], a = t4.startsWith(Fo) ? Fo : "", o = a ? t4.slice(1) : t4;
  let l = Number.NEGATIVE_INFINITY, i = a;
  function u(c) {
    const f = c.fix, h = f.range[0], p = f.range[1];
    return l >= h || h > p ? (s.push(c), false) : ((h < 0 && p >= 0 || h === 0 && f.text.startsWith(Fo)) && (i = ""), i += o.slice(Math.max(0, l), Math.max(0, h)), i += f.text, l = p, true);
  }
  if (e.forEach((c) => {
    Object.prototype.hasOwnProperty.call(c, "fix") ? n.push(c) : s.push(c);
  }), n.length) {
    da("Found fixes to apply");
    let c = false;
    for (const f of n.sort(FB))
      typeof r != "function" || r(f) ? (u(f), c = true) : s.push(f);
    return i += o.slice(Math.max(0, l)), {
      fixed: c,
      messages: s.sort(PB),
      output: i
    };
  }
  return da("No fixes to apply"), {
    fixed: false,
    messages: e,
    output: a + o
  };
};
var WE = qE;
var zE = {
  "generator-star": ["generator-star-spacing"],
  "global-strict": ["strict"],
  "no-arrow-condition": ["no-confusing-arrow", "no-constant-condition"],
  "no-comma-dangle": ["comma-dangle"],
  "no-empty-class": ["no-empty-character-class"],
  "no-empty-label": ["no-labels"],
  "no-extra-strict": ["strict"],
  "no-reserved-keys": ["quote-props"],
  "no-space-before-semi": ["semi-spacing"],
  "no-wrap-func": ["no-extra-parens"],
  "space-after-function-name": ["space-before-function-paren"],
  "space-after-keywords": ["keyword-spacing"],
  "space-before-function-parentheses": ["space-before-function-paren"],
  "space-before-keywords": ["keyword-spacing"],
  "space-in-brackets": ["object-curly-spacing", "array-bracket-spacing", "computed-property-spacing"],
  "space-return-throw-case": ["keyword-spacing"],
  "space-unary-word-ops": ["space-unary-ops"],
  "spaced-line-comment": ["spaced-comment"]
};
var IB = {
  rules: zE
};
var _B = Object.freeze({
  __proto__: null,
  rules: zE,
  default: IB
});
var Hg = Xt.getCjsExportFromNamespace(b2);
var Kg = Xt.getCjsExportFromNamespace(_B);
var {
  SourceCode: GE
} = q2;
var Rt = Li.default("eslint:linter");
var BB = 10;
var OB = "espree";
var LB = 5;
var _s = new uB();
var RB = {
  start: {
    line: 1,
    column: 0
  },
  end: {
    line: 1,
    column: 1
  }
};
var NB = Symbol.for("eslint.RuleTester.parser");
function jB(t4, e, {
  exportedVariables: r,
  enabledGlobals: s
}) {
  for (const n of /* @__PURE__ */ new Set([...Object.keys(e), ...Object.keys(s)])) {
    const a = e[n] === void 0 ? void 0 : Oi.default.normalizeConfigGlobal(e[n]), l = s[n] && s[n].value || a, i = s[n] && s[n].comments;
    if (l === "off")
      continue;
    let u = t4.set.get(n);
    u || (u = new xE.default.Variable(n, t4), t4.variables.push(u), t4.set.set(n, u)), u.eslintImplicitGlobalSetting = a, u.eslintExplicitGlobal = i !== void 0, u.eslintExplicitGlobalComments = i, u.writeable = l === "writable";
  }
  Object.keys(r).forEach((n) => {
    const a = t4.set.get(n);
    a && (a.eslintUsed = true);
  }), t4.through = t4.through.filter((n) => {
    const a = n.identifier.name, o = t4.set.get(a);
    return o ? (n.resolved = o, o.references.push(n), false) : true;
  });
}
function MB(t4) {
  return Object.prototype.hasOwnProperty.call(Kg.rules, t4) ? `Rule '${t4}' was removed and replaced by: ${Kg.rules[t4].join(", ")}` : `Definition for rule '${t4}' was not found.`;
}
function En(t4) {
  const {
    ruleId: e = null,
    loc: r = RB,
    message: s = MB(t4.ruleId),
    severity: n = 2
  } = t4;
  return {
    ruleId: e,
    message: s,
    line: r.start.line,
    column: r.start.column + 1,
    endLine: r.end.line,
    endColumn: r.end.column + 1,
    severity: n,
    nodeType: null
  };
}
function $B(t4) {
  const {
    type: e,
    loc: r,
    value: s,
    ruleMapper: n
  } = t4, a = Object.keys(_s.parseListConfig(s)), o = a.length ? a : [null], l = {
    directives: [],
    directiveProblems: []
  };
  for (const i of o)
    i === null || n(i) !== null ? l.directives.push({
      type: e,
      line: r.start.line,
      column: r.start.column + 1,
      ruleId: i
    }) : l.directiveProblems.push(En({
      ruleId: i,
      loc: r
    }));
  return l;
}
function HE(t4) {
  return t4.split(/\s-{2,}\s/u)[0].trim();
}
function VB(t4, e, r, s) {
  const n = {}, a = /* @__PURE__ */ Object.create(null), o = {}, l = [], i = [], u = new x2.default({
    builtInRules: UE
  });
  return e.comments.filter((c) => c.type !== "Shebang").forEach((c) => {
    const f = HE(c.value), h = /^(eslint(?:-env|-enable|-disable(?:(?:-next)?-line)?)?|exported|globals?)(?:\s|$)/u.exec(f);
    if (!h)
      return;
    const p = h[1], m = /^eslint-disable-(next-)?line$/u.test(p);
    if (c.type === "Line" && !m)
      return;
    if (s) {
      const g = c.type === "Block" ? `/*${p}*/` : `//${p}`;
      l.push(En({
        ruleId: null,
        message: `'${g}' has no effect because you have 'noInlineConfig' setting in ${s}.`,
        loc: c.loc,
        severity: 1
      }));
      return;
    }
    if (m && c.loc.start.line !== c.loc.end.line) {
      l.push(En({
        ruleId: null,
        message: `${p} comment should not span multiple lines.`,
        loc: c.loc
      }));
      return;
    }
    const d = f.slice(h.index + p.length);
    switch (p) {
      case "eslint-disable":
      case "eslint-enable":
      case "eslint-disable-next-line":
      case "eslint-disable-line": {
        const y = {
          type: p.slice(7),
          loc: c.loc,
          value: d,
          ruleMapper: r
        }, {
          directives: x,
          directiveProblems: A
        } = $B(y);
        i.push(...x), l.push(...A);
        break;
      }
      case "exported":
        Object.assign(o, _s.parseStringConfig(d, c));
        break;
      case "globals":
      case "global":
        for (const [g, {
          value: y
        }] of Object.entries(_s.parseStringConfig(d, c))) {
          let x;
          try {
            x = Oi.default.normalizeConfigGlobal(y);
          } catch (A) {
            l.push(En({
              ruleId: null,
              loc: c.loc,
              message: A.message
            }));
            continue;
          }
          a[g] ? (a[g].comments.push(c), a[g].value = x) : a[g] = {
            comments: [c],
            value: x
          };
        }
        break;
      case "eslint": {
        const g = _s.parseJsonConfig(d, c.loc);
        g.success ? Object.keys(g.config).forEach((y) => {
          const x = r(y), A = g.config[y];
          if (x === null) {
            l.push(En({
              ruleId: y,
              loc: c.loc
            }));
            return;
          }
          try {
            u.validateRuleOptions(x, y, A);
          } catch (b) {
            l.push(En({
              ruleId: y,
              message: b.message,
              loc: c.loc
            }));
            return;
          }
          n[y] = A;
        }) : l.push(g.error);
        break;
      }
    }
  }), {
    configuredRules: n,
    enabledGlobals: a,
    exportedVariables: o,
    problems: l,
    disableDirectives: i
  };
}
function UB(t4, e) {
  return (t4[NB] || t4) === Za.default && e === "latest" ? Za.default.latestEcmaVersion : e >= 2015 ? e - 2009 : e;
}
var Jg = /\/\*\s*eslint-env\s(.+?)\*\//gsu;
function qB(t4) {
  let e, r;
  for (Jg.lastIndex = 0; (e = Jg.exec(t4)) !== null; )
    r = Object.assign(r || {}, _s.parseListConfig(HE(e[1])));
  return r;
}
function KE(t4) {
  const e = t4.split(Is.default.sep), r = e.lastIndexOf("<text>");
  return r === -1 ? t4 : e.slice(r).join(Is.default.sep);
}
function WB(t4, e) {
  const r = e.noInlineConfig === true, s = t4.allowInlineConfig === false, n = e.configNameOfNoInlineConfig ? ` (${e.configNameOfNoInlineConfig})` : "";
  let a = t4.reportUnusedDisableDirectives;
  return typeof a == "boolean" && (a = a ? "error" : "off"), typeof a != "string" && (a = e.reportUnusedDisableDirectives ? "warn" : "off"), {
    filename: KE(t4.filename || "<input>"),
    allowInlineConfig: !s,
    warnInlineConfig: r && !s ? `your config${n}` : null,
    reportUnusedDisableDirectives: a,
    disableFixes: !!t4.disableFixes
  };
}
function zB(t4, e, r) {
  const s = r.filter((o) => o.parserOptions).reduce((o, l) => Og.default(o, l.parserOptions), {}), n = Og.default(s, e || {});
  return n.sourceType === "module" && (n.ecmaFeatures = Object.assign({}, n.ecmaFeatures, {
    globalReturn: false
  })), n.ecmaVersion = UB(t4, n.ecmaVersion), n;
}
function GB(t4, e) {
  return Object.assign({}, ...e.filter((r) => r.globals).map((r) => r.globals), t4);
}
function HB(t4) {
  return t4.charCodeAt(0) === 65279 ? t4.slice(1) : t4;
}
function KB(t4) {
  return Array.isArray(t4) ? t4.slice(1) : [];
}
function JE(t4, e, r) {
  const s = e.ecmaFeatures || {}, n = e.ecmaVersion || LB;
  return xE.default.analyze(t4, {
    ignoreEval: true,
    nodejsScope: s.globalReturn,
    impliedStrict: s.impliedStrict,
    ecmaVersion: n,
    sourceType: e.sourceType || "script",
    childVisitorKeys: r || vE.default.KEYS,
    fallback: Xt.traverser.getKeys
  });
}
function JB(t4, e, r, s) {
  const n = HB(t4).replace(Xt.astUtils.shebangPattern, (o, l) => `//${l}`), a = Object.assign({}, r, {
    loc: true,
    range: true,
    raw: true,
    tokens: true,
    comment: true,
    eslintVisitorKeys: true,
    eslintScopeManager: true,
    filePath: s
  });
  try {
    const o = typeof e.parseForESLint == "function" ? e.parseForESLint(n, a) : {
      ast: e.parse(n, a)
    }, l = o.ast, i = o.services || {}, u = o.visitorKeys || vE.default.KEYS, c = o.scopeManager || JE(l, a, u);
    return {
      success: true,
      sourceCode: new GE({
        text: t4,
        ast: l,
        parserServices: i,
        scopeManager: c,
        visitorKeys: u
      })
    };
  } catch (o) {
    const l = `Parsing error: ${o.message.replace(/^line \d+:/iu, "").trim()}`;
    return Rt(`%s
%s`, l, o.stack), {
      success: false,
      error: {
        ruleId: null,
        fatal: true,
        severity: 2,
        message: l,
        line: o.lineNumber,
        column: o.column
      }
    };
  }
}
function XE(t4, e) {
  const r = e.type !== "Program";
  for (let s = e; s; s = s.parent) {
    const n = t4.acquire(s, r);
    if (n)
      return n.type === "function-expression-name" ? n.childScopes[0] : n;
  }
  return t4.scopes[0];
}
function XB(t4, e, r, s) {
  const a = r.ecmaFeatures && r.ecmaFeatures.globalReturn || r.sourceType === "module", o = XE(t4, e), l = o.type === "global" && a ? o.childScopes[0] : o;
  for (let i = l; i; i = i.upper) {
    const u = i.variables.find((c) => c.name === s);
    if (u)
      return u.eslintUsed = true, true;
  }
  return false;
}
function QB(t4, e) {
  try {
    return t4.create(e);
  } catch (r) {
    throw r.message = `Error while loading rule '${e.id}': ${r.message}`, r;
  }
}
function YB(t4) {
  const e = [];
  for (let r = t4.parent; r; r = r.parent)
    e.push(r);
  return e.reverse();
}
var Xg = {
  getSource: "getText",
  getSourceLines: "getLines",
  getAllComments: "getAllComments",
  getNodeByRangeIndex: "getNodeByRangeIndex",
  getComments: "getComments",
  getCommentsBefore: "getCommentsBefore",
  getCommentsAfter: "getCommentsAfter",
  getCommentsInside: "getCommentsInside",
  getJSDocComment: "getJSDocComment",
  getFirstToken: "getFirstToken",
  getFirstTokens: "getFirstTokens",
  getLastToken: "getLastToken",
  getLastTokens: "getLastTokens",
  getTokenAfter: "getTokenAfter",
  getTokenBefore: "getTokenBefore",
  getTokenByRangeStart: "getTokenByRangeStart",
  getTokens: "getTokens",
  getTokensAfter: "getTokensAfter",
  getTokensBefore: "getTokensBefore",
  getTokensBetween: "getTokensBetween"
};
var ZB = Object.freeze(Object.keys(Xg).reduce((t4, e) => Object.assign(t4, {
  [e](...r) {
    return this.getSourceCode()[Xg[e]](...r);
  }
}), {}));
function eO(t4, e, r, s, n, a, o, l, i, u) {
  const c = TB(), f = [];
  let h = t4.ast;
  Xt.traverser.traverse(t4.ast, {
    enter(g, y) {
      g.parent = y, f.push({
        isEntering: true,
        node: g
      });
    },
    leave(g) {
      f.push({
        isEntering: false,
        node: g
      });
    },
    visitorKeys: t4.visitorKeys
  });
  const p = Object.freeze(Object.assign(Object.create(ZB), {
    getAncestors: () => YB(h),
    getDeclaredVariables: t4.scopeManager.getDeclaredVariables.bind(t4.scopeManager),
    getCwd: () => i,
    getFilename: () => o,
    getPhysicalFilename: () => u || o,
    getScope: () => XE(t4.scopeManager, h),
    getSourceCode: () => t4,
    markVariableAsUsed: (g) => XB(t4.scopeManager, h, s, g),
    parserOptions: s,
    parserPath: n,
    parserServices: t4.parserServices,
    settings: a
  })), m = [];
  Object.keys(e).forEach((g) => {
    const y = Oi.default.getRuleSeverity(e[g]);
    if (y === 0)
      return;
    const x = r(g);
    if (x === null) {
      m.push(En({
        ruleId: g
      }));
      return;
    }
    const A = x.meta && x.meta.messages;
    let b = null;
    const v = Object.freeze(Object.assign(Object.create(p), {
      id: g,
      options: KB(e[g]),
      report(...T) {
        b === null && (b = DB({
          ruleId: g,
          severity: y,
          sourceCode: t4,
          messageIds: A,
          disableFixes: l
        }));
        const w = b(...T);
        if (w.fix && x.meta && !x.meta.fixable)
          throw new Error("Fixable rules should export a `meta.fixable` property.");
        m.push(w);
      }
    })), C = QB(x, v);
    Object.keys(C).forEach((T) => {
      c.on(T, C[T]);
    });
  });
  const d = f[0].node.type === "Program" ? new oB(new zg(c, {
    visitorKeys: t4.visitorKeys,
    fallback: Xt.traverser.getKeys
  })) : new zg(c, {
    visitorKeys: t4.visitorKeys,
    fallback: Xt.traverser.getKeys
  });
  return f.forEach((g) => {
    h = g.node;
    try {
      g.isEntering ? d.enterNode(h) : d.leaveNode(h);
    } catch (y) {
      throw y.currentNode = h, y;
    }
  }), m;
}
function tO(t4) {
  if (typeof t4 == "object") {
    const {
      hasBOM: e,
      text: r
    } = t4;
    return (e ? "\uFEFF" : "") + r;
  }
  return String(t4);
}
function rO(t4, e) {
  return t4.lastConfigArray && t4.lastConfigArray.pluginEnvironments.get(e) || y2.default.get(e) || null;
}
function Qg(t4, e) {
  return t4.lastConfigArray && t4.lastConfigArray.pluginRules.get(e) || t4.ruleMap.get(e);
}
function nO(t4) {
  if (t4)
    return t4;
  if (typeof Ze == "object")
    return Ze.cwd();
}
var Yr = /* @__PURE__ */ new WeakMap();
var sO = class {
  constructor({
    cwd: e
  } = {}) {
    Yr.set(this, {
      cwd: nO(e),
      lastConfigArray: null,
      lastSourceCode: null,
      parserMap: /* @__PURE__ */ new Map([["espree", Za.default]]),
      ruleMap: new UE()
    }), this.version = Hg.version;
  }
  static get version() {
    return Hg.version;
  }
  _verifyWithoutProcessors(e, r, s) {
    const n = Yr.get(this), a = r || {}, o = WB(s, a);
    let l;
    typeof e == "string" ? (n.lastSourceCode = null, l = e) : (n.lastSourceCode = e, l = e.text);
    let i = OB, u = Za.default;
    if (typeof a.parser == "object" && a.parser !== null)
      i = a.parser.filePath, u = a.parser.definition;
    else if (typeof a.parser == "string") {
      if (!n.parserMap.has(a.parser))
        return [{
          ruleId: null,
          fatal: true,
          severity: 2,
          message: `Configured parser '${a.parser}' was not found.`,
          line: 0,
          column: 0
        }];
      i = a.parser, u = n.parserMap.get(a.parser);
    }
    const c = o.allowInlineConfig && !o.warnInlineConfig ? qB(l) : {}, f = Object.assign({
      builtin: true
    }, a.env, c), h = Object.keys(f).filter((b) => f[b]).map((b) => rO(n, b)).filter((b) => b), p = zB(u, a.parserOptions || {}, h), m = GB(a.globals || {}, h), d = a.settings || {};
    if (n.lastSourceCode)
      n.lastSourceCode.scopeManager || (n.lastSourceCode = new GE({
        text: n.lastSourceCode.text,
        ast: n.lastSourceCode.ast,
        parserServices: n.lastSourceCode.parserServices,
        visitorKeys: n.lastSourceCode.visitorKeys,
        scopeManager: JE(n.lastSourceCode.ast, p)
      }));
    else {
      const b = JB(l, u, p, o.filename);
      if (!b.success)
        return [b.error];
      n.lastSourceCode = b.sourceCode;
    }
    const g = n.lastSourceCode, y = o.allowInlineConfig ? VB(o.filename, g.ast, (b) => Qg(n, b), o.warnInlineConfig) : {
      configuredRules: {},
      enabledGlobals: {},
      exportedVariables: {},
      problems: [],
      disableDirectives: []
    };
    jB(g.scopeManager.scopes[0], m, {
      exportedVariables: y.exportedVariables,
      enabledGlobals: y.enabledGlobals
    });
    const x = Object.assign({}, a.rules, y.configuredRules);
    let A;
    try {
      A = eO(g, x, (b) => Qg(n, b), p, i, d, o.filename, o.disableFixes, n.cwd, s.physicalFilename);
    } catch (b) {
      if (b.message += `
Occurred while linting ${o.filename}`, Rt("An error occurred while traversing"), Rt("Filename:", o.filename), b.currentNode) {
        const {
          line: v
        } = b.currentNode.loc.start;
        Rt("Line:", v), b.message += `:${v}`;
      }
      throw Rt("Parser Options:", p), Rt("Parser Path:", i), Rt("Settings:", d), b;
    }
    return lB({
      directives: y.disableDirectives,
      problems: A.concat(y.problems).sort((b, v) => b.line - v.line || b.column - v.column),
      reportUnusedDisableDirectives: o.reportUnusedDisableDirectives
    });
  }
  verify(e, r, s) {
    Rt("Verify");
    const n = typeof s == "string" ? {
      filename: s
    } : s || {};
    return r && typeof r.extractConfig == "function" ? this._verifyWithConfigArray(e, r, n) : n.preprocess || n.postprocess ? this._verifyWithProcessor(e, r, n) : this._verifyWithoutProcessors(e, r, n);
  }
  _verifyWithConfigArray(e, r, s) {
    Rt("With ConfigArray: %s", s.filename), Yr.get(this).lastConfigArray = r;
    const n = r.extractConfig(s.filename), a = n.processor && r.pluginProcessors.get(n.processor);
    if (a) {
      Rt("Apply the processor: %o", n.processor);
      const {
        preprocess: o,
        postprocess: l,
        supportsAutofix: i
      } = a, u = s.disableFixes || !i;
      return this._verifyWithProcessor(e, n, {
        ...s,
        disableFixes: u,
        postprocess: l,
        preprocess: o
      }, r);
    }
    return this._verifyWithoutProcessors(e, n, s);
  }
  _verifyWithProcessor(e, r, s, n) {
    const a = s.filename || "<input>", o = KE(a), l = s.physicalFilename || o, i = tO(e), u = s.preprocess || ((m) => [m]), c = s.postprocess || ((m) => [].concat(...m)), f = s.filterCodeBlock || ((m) => m.endsWith(".js")), h = Is.default.extname(a), p = u(i, o).map((m, d) => {
      if (Rt("A code block was found: %o", m.filename || "(unnamed)"), typeof m == "string")
        return this._verifyWithoutProcessors(m, r, s);
      const g = m.text, y = Is.default.join(a, `${d}_${m.filename}`);
      return f(y, g) ? n && (i !== g || Is.default.extname(y) !== h) ? (Rt("Resolving configuration again because the file content or extension was changed."), this._verifyWithConfigArray(g, n, {
        ...s,
        filename: y,
        physicalFilename: l
      })) : this._verifyWithoutProcessors(g, r, {
        ...s,
        filename: y,
        physicalFilename: l
      }) : (Rt("This code block was skipped."), []);
    });
    return c(p, o);
  }
  getSourceCode() {
    return Yr.get(this).lastSourceCode;
  }
  defineRule(e, r) {
    Yr.get(this).ruleMap.define(e, r);
  }
  defineRules(e) {
    Object.getOwnPropertyNames(e).forEach((r) => {
      this.defineRule(r, e[r]);
    });
  }
  getRules() {
    const {
      lastConfigArray: e,
      ruleMap: r
    } = Yr.get(this);
    return new Map(function* () {
      yield* r, e && (yield* e.pluginRules);
    }());
  }
  defineParser(e, r) {
    Yr.get(this).parserMap.set(e, r);
  }
  verifyAndFix(e, r, s) {
    let n = [], a, o = false, l = 0, i = e;
    const u = s && s.filename || `${e.slice(0, 10)}...`, c = s && typeof s.fix < "u" ? s.fix : true;
    do {
      if (l++, Rt(`Linting code for ${u} (pass ${l})`), n = this.verify(i, r, s), Rt(`Generating fixed text for ${u} (pass ${l})`), a = WE.applyFixes(i, n, c), n.length === 1 && n[0].fatal)
        break;
      o = o || a.fixed, i = a.output;
    } while (a.fixed && l < BB);
    return a.fixed && (a.messages = this.verify(i, r, s)), a.fixed = o, a.output = i, a;
  }
};
var aO = {
  Linter: sO,
  getLinterInternalSlots(t4) {
    return Yr.get(t4);
  }
};
var {
  Linter: iO
} = aO;
var oO = {
  Linter: iO,
  SourceCodeFixer: WE,
  interpolate: Wu
};
var lO = oO.Linter;
A0.linter_1 = lO;
var ts = {};
var QE = { exports: {} };
(function() {
  function t4(o) {
    if (o == null)
      return false;
    switch (o.type) {
      case "ArrayExpression":
      case "AssignmentExpression":
      case "BinaryExpression":
      case "CallExpression":
      case "ConditionalExpression":
      case "FunctionExpression":
      case "Identifier":
      case "Literal":
      case "LogicalExpression":
      case "MemberExpression":
      case "NewExpression":
      case "ObjectExpression":
      case "SequenceExpression":
      case "ThisExpression":
      case "UnaryExpression":
      case "UpdateExpression":
        return true;
    }
    return false;
  }
  function e(o) {
    if (o == null)
      return false;
    switch (o.type) {
      case "DoWhileStatement":
      case "ForInStatement":
      case "ForStatement":
      case "WhileStatement":
        return true;
    }
    return false;
  }
  function r(o) {
    if (o == null)
      return false;
    switch (o.type) {
      case "BlockStatement":
      case "BreakStatement":
      case "ContinueStatement":
      case "DebuggerStatement":
      case "DoWhileStatement":
      case "EmptyStatement":
      case "ExpressionStatement":
      case "ForInStatement":
      case "ForStatement":
      case "IfStatement":
      case "LabeledStatement":
      case "ReturnStatement":
      case "SwitchStatement":
      case "ThrowStatement":
      case "TryStatement":
      case "VariableDeclaration":
      case "WhileStatement":
      case "WithStatement":
        return true;
    }
    return false;
  }
  function s(o) {
    return r(o) || o != null && o.type === "FunctionDeclaration";
  }
  function n(o) {
    switch (o.type) {
      case "IfStatement":
        return o.alternate != null ? o.alternate : o.consequent;
      case "LabeledStatement":
      case "ForStatement":
      case "ForInStatement":
      case "WhileStatement":
      case "WithStatement":
        return o.body;
    }
    return null;
  }
  function a(o) {
    var l;
    if (o.type !== "IfStatement" || o.alternate == null)
      return false;
    l = o.consequent;
    do {
      if (l.type === "IfStatement" && l.alternate == null)
        return true;
      l = n(l);
    } while (l);
    return false;
  }
  QE.exports = {
    isExpression: t4,
    isStatement: r,
    isIterationStatement: e,
    isSourceElement: s,
    isProblematicIfStatement: a,
    trailingStatement: n
  };
})();
var zu = { exports: {} };
(function() {
  var t4, e, r, s, n, a;
  e = {
    // ECMAScript 5.1/Unicode v9.0.0 NonAsciiIdentifierStart:
    NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/,
    // ECMAScript 5.1/Unicode v9.0.0 NonAsciiIdentifierPart:
    NonAsciiIdentifierPart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B4\u08B6-\u08BD\u08D4-\u08E1\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D54-\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFB-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/
  }, t4 = {
    // ECMAScript 6/Unicode v9.0.0 NonAsciiIdentifierStart:
    NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F\uDFE0]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]/,
    // ECMAScript 6/Unicode v9.0.0 NonAsciiIdentifierPart:
    NonAsciiIdentifierPart: /[\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B4\u08B6-\u08BD\u08D4-\u08E1\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D54-\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFB-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE3E\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC00-\uDC4A\uDC50-\uDC59\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC36\uDC38-\uDC40\uDC50-\uDC59\uDC72-\uDC8F\uDC92-\uDCA7\uDCA9-\uDCB6]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F\uDFE0]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6\uDD00-\uDD4A\uDD50-\uDD59]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/
  };
  function o(g) {
    return 48 <= g && g <= 57;
  }
  function l(g) {
    return 48 <= g && g <= 57 || // 0..9
    97 <= g && g <= 102 || // a..f
    65 <= g && g <= 70;
  }
  function i(g) {
    return g >= 48 && g <= 55;
  }
  r = [
    5760,
    8192,
    8193,
    8194,
    8195,
    8196,
    8197,
    8198,
    8199,
    8200,
    8201,
    8202,
    8239,
    8287,
    12288,
    65279
  ];
  function u(g) {
    return g === 32 || g === 9 || g === 11 || g === 12 || g === 160 || g >= 5760 && r.indexOf(g) >= 0;
  }
  function c(g) {
    return g === 10 || g === 13 || g === 8232 || g === 8233;
  }
  function f(g) {
    if (g <= 65535)
      return String.fromCharCode(g);
    var y = String.fromCharCode(Math.floor((g - 65536) / 1024) + 55296), x = String.fromCharCode((g - 65536) % 1024 + 56320);
    return y + x;
  }
  for (s = new Array(128), a = 0; a < 128; ++a)
    s[a] = a >= 97 && a <= 122 || // a..z
    a >= 65 && a <= 90 || // A..Z
    a === 36 || a === 95;
  for (n = new Array(128), a = 0; a < 128; ++a)
    n[a] = a >= 97 && a <= 122 || // a..z
    a >= 65 && a <= 90 || // A..Z
    a >= 48 && a <= 57 || // 0..9
    a === 36 || a === 95;
  function h(g) {
    return g < 128 ? s[g] : e.NonAsciiIdentifierStart.test(f(g));
  }
  function p(g) {
    return g < 128 ? n[g] : e.NonAsciiIdentifierPart.test(f(g));
  }
  function m(g) {
    return g < 128 ? s[g] : t4.NonAsciiIdentifierStart.test(f(g));
  }
  function d(g) {
    return g < 128 ? n[g] : t4.NonAsciiIdentifierPart.test(f(g));
  }
  zu.exports = {
    isDecimalDigit: o,
    isHexDigit: l,
    isOctalDigit: i,
    isWhiteSpace: u,
    isLineTerminator: c,
    isIdentifierStartES5: h,
    isIdentifierPartES5: p,
    isIdentifierStartES6: m,
    isIdentifierPartES6: d
  };
})();
var YE = { exports: {} };
(function() {
  var t4 = zu.exports;
  function e(h) {
    switch (h) {
      case "implements":
      case "interface":
      case "package":
      case "private":
      case "protected":
      case "public":
      case "static":
      case "let":
        return true;
      default:
        return false;
    }
  }
  function r(h, p) {
    return !p && h === "yield" ? false : s(h, p);
  }
  function s(h, p) {
    if (p && e(h))
      return true;
    switch (h.length) {
      case 2:
        return h === "if" || h === "in" || h === "do";
      case 3:
        return h === "var" || h === "for" || h === "new" || h === "try";
      case 4:
        return h === "this" || h === "else" || h === "case" || h === "void" || h === "with" || h === "enum";
      case 5:
        return h === "while" || h === "break" || h === "catch" || h === "throw" || h === "const" || h === "yield" || h === "class" || h === "super";
      case 6:
        return h === "return" || h === "typeof" || h === "delete" || h === "switch" || h === "export" || h === "import";
      case 7:
        return h === "default" || h === "finally" || h === "extends";
      case 8:
        return h === "function" || h === "continue" || h === "debugger";
      case 10:
        return h === "instanceof";
      default:
        return false;
    }
  }
  function n(h, p) {
    return h === "null" || h === "true" || h === "false" || r(h, p);
  }
  function a(h, p) {
    return h === "null" || h === "true" || h === "false" || s(h, p);
  }
  function o(h) {
    return h === "eval" || h === "arguments";
  }
  function l(h) {
    var p, m, d;
    if (h.length === 0 || (d = h.charCodeAt(0), !t4.isIdentifierStartES5(d)))
      return false;
    for (p = 1, m = h.length; p < m; ++p)
      if (d = h.charCodeAt(p), !t4.isIdentifierPartES5(d))
        return false;
    return true;
  }
  function i(h, p) {
    return (h - 55296) * 1024 + (p - 56320) + 65536;
  }
  function u(h) {
    var p, m, d, g, y;
    if (h.length === 0)
      return false;
    for (y = t4.isIdentifierStartES6, p = 0, m = h.length; p < m; ++p) {
      if (d = h.charCodeAt(p), 55296 <= d && d <= 56319) {
        if (++p, p >= m || (g = h.charCodeAt(p), !(56320 <= g && g <= 57343)))
          return false;
        d = i(d, g);
      }
      if (!y(d))
        return false;
      y = t4.isIdentifierPartES6;
    }
    return true;
  }
  function c(h, p) {
    return l(h) && !n(h, p);
  }
  function f(h, p) {
    return u(h) && !a(h, p);
  }
  YE.exports = {
    isKeywordES5: r,
    isKeywordES6: s,
    isReservedWordES5: n,
    isReservedWordES6: a,
    isRestrictedWord: o,
    isIdentifierNameES5: l,
    isIdentifierNameES6: u,
    isIdentifierES5: c,
    isIdentifierES6: f
  };
})();
(function() {
  ts.ast = QE.exports, ts.code = zu.exports, ts.keyword = YE.exports;
})();
var uO = (t4) => {
  if (typeof t4 != "string")
    throw new TypeError("Expected a string");
  return t4.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d");
};
var cO = hO;
var ot = 0;
var Qe = 1;
function Qt(t4, e, r, s, n, a) {
  this._color = t4, this.key = e, this.value = r, this.left = s, this.right = n, this._count = a;
}
function br(t4) {
  return new Qt(t4._color, t4.key, t4.value, t4.left, t4.right, t4._count);
}
function tn(t4, e) {
  return new Qt(t4, e.key, e.value, e.left, e.right, e._count);
}
function ft(t4) {
  t4._count = 1 + (t4.left ? t4.left._count : 0) + (t4.right ? t4.right._count : 0);
}
function rn(t4, e) {
  this._compare = t4, this.root = e;
}
var $t = rn.prototype;
Object.defineProperty($t, "keys", {
  get: function() {
    var t4 = [];
    return this.forEach(function(e, r) {
      t4.push(e);
    }), t4;
  }
});
Object.defineProperty($t, "values", {
  get: function() {
    var t4 = [];
    return this.forEach(function(e, r) {
      t4.push(r);
    }), t4;
  }
});
Object.defineProperty($t, "length", {
  get: function() {
    return this.root ? this.root._count : 0;
  }
});
$t.insert = function(t4, e) {
  for (var r = this._compare, s = this.root, n = [], a = []; s; ) {
    var o = r(t4, s.key);
    n.push(s), a.push(o), o <= 0 ? s = s.left : s = s.right;
  }
  n.push(new Qt(ot, t4, e, null, null, 1));
  for (var l = n.length - 2; l >= 0; --l) {
    var s = n[l];
    a[l] <= 0 ? n[l] = new Qt(s._color, s.key, s.value, n[l + 1], s.right, s._count + 1) : n[l] = new Qt(s._color, s.key, s.value, s.left, n[l + 1], s._count + 1);
  }
  for (var l = n.length - 1; l > 1; --l) {
    var i = n[l - 1], s = n[l];
    if (i._color === Qe || s._color === Qe)
      break;
    var u = n[l - 2];
    if (u.left === i)
      if (i.left === s) {
        var c = u.right;
        if (c && c._color === ot)
          i._color = Qe, u.right = tn(Qe, c), u._color = ot, l -= 1;
        else {
          if (u._color = ot, u.left = i.right, i._color = Qe, i.right = u, n[l - 2] = i, n[l - 1] = s, ft(u), ft(i), l >= 3) {
            var f = n[l - 3];
            f.left === u ? f.left = i : f.right = i;
          }
          break;
        }
      } else {
        var c = u.right;
        if (c && c._color === ot)
          i._color = Qe, u.right = tn(Qe, c), u._color = ot, l -= 1;
        else {
          if (i.right = s.left, u._color = ot, u.left = s.right, s._color = Qe, s.left = i, s.right = u, n[l - 2] = s, n[l - 1] = i, ft(u), ft(i), ft(s), l >= 3) {
            var f = n[l - 3];
            f.left === u ? f.left = s : f.right = s;
          }
          break;
        }
      }
    else if (i.right === s) {
      var c = u.left;
      if (c && c._color === ot)
        i._color = Qe, u.left = tn(Qe, c), u._color = ot, l -= 1;
      else {
        if (u._color = ot, u.right = i.left, i._color = Qe, i.left = u, n[l - 2] = i, n[l - 1] = s, ft(u), ft(i), l >= 3) {
          var f = n[l - 3];
          f.right === u ? f.right = i : f.left = i;
        }
        break;
      }
    } else {
      var c = u.left;
      if (c && c._color === ot)
        i._color = Qe, u.left = tn(Qe, c), u._color = ot, l -= 1;
      else {
        if (i.left = s.right, u._color = ot, u.right = s.left, s._color = Qe, s.right = i, s.left = u, n[l - 2] = s, n[l - 1] = i, ft(u), ft(i), ft(s), l >= 3) {
          var f = n[l - 3];
          f.right === u ? f.right = s : f.left = s;
        }
        break;
      }
    }
  }
  return n[0]._color = Qe, new rn(r, n[0]);
};
function Sl(t4, e) {
  if (e.left) {
    var r = Sl(t4, e.left);
    if (r)
      return r;
  }
  var r = t4(e.key, e.value);
  if (r)
    return r;
  if (e.right)
    return Sl(t4, e.right);
}
function Al(t4, e, r, s) {
  var n = e(t4, s.key);
  if (n <= 0) {
    if (s.left) {
      var a = Al(t4, e, r, s.left);
      if (a)
        return a;
    }
    var a = r(s.key, s.value);
    if (a)
      return a;
  }
  if (s.right)
    return Al(t4, e, r, s.right);
}
function Dl(t4, e, r, s, n) {
  var a = r(t4, n.key), o = r(e, n.key), l;
  if (a <= 0 && (n.left && (l = Dl(t4, e, r, s, n.left), l) || o > 0 && (l = s(n.key, n.value), l)))
    return l;
  if (o > 0 && n.right)
    return Dl(t4, e, r, s, n.right);
}
$t.forEach = function(e, r, s) {
  if (this.root)
    switch (arguments.length) {
      case 1:
        return Sl(e, this.root);
      case 2:
        return Al(r, this._compare, e, this.root);
      case 3:
        return this._compare(r, s) >= 0 ? void 0 : Dl(r, s, this._compare, e, this.root);
    }
};
Object.defineProperty($t, "begin", {
  get: function() {
    for (var t4 = [], e = this.root; e; )
      t4.push(e), e = e.left;
    return new Yt(this, t4);
  }
});
Object.defineProperty($t, "end", {
  get: function() {
    for (var t4 = [], e = this.root; e; )
      t4.push(e), e = e.right;
    return new Yt(this, t4);
  }
});
$t.at = function(t4) {
  if (t4 < 0)
    return new Yt(this, []);
  for (var e = this.root, r = []; ; ) {
    if (r.push(e), e.left) {
      if (t4 < e.left._count) {
        e = e.left;
        continue;
      }
      t4 -= e.left._count;
    }
    if (!t4)
      return new Yt(this, r);
    if (t4 -= 1, e.right) {
      if (t4 >= e.right._count)
        break;
      e = e.right;
    } else
      break;
  }
  return new Yt(this, []);
};
$t.ge = function(t4) {
  for (var e = this._compare, r = this.root, s = [], n = 0; r; ) {
    var a = e(t4, r.key);
    s.push(r), a <= 0 && (n = s.length), a <= 0 ? r = r.left : r = r.right;
  }
  return s.length = n, new Yt(this, s);
};
$t.gt = function(t4) {
  for (var e = this._compare, r = this.root, s = [], n = 0; r; ) {
    var a = e(t4, r.key);
    s.push(r), a < 0 && (n = s.length), a < 0 ? r = r.left : r = r.right;
  }
  return s.length = n, new Yt(this, s);
};
$t.lt = function(t4) {
  for (var e = this._compare, r = this.root, s = [], n = 0; r; ) {
    var a = e(t4, r.key);
    s.push(r), a > 0 && (n = s.length), a <= 0 ? r = r.left : r = r.right;
  }
  return s.length = n, new Yt(this, s);
};
$t.le = function(t4) {
  for (var e = this._compare, r = this.root, s = [], n = 0; r; ) {
    var a = e(t4, r.key);
    s.push(r), a >= 0 && (n = s.length), a < 0 ? r = r.left : r = r.right;
  }
  return s.length = n, new Yt(this, s);
};
$t.find = function(t4) {
  for (var e = this._compare, r = this.root, s = []; r; ) {
    var n = e(t4, r.key);
    if (s.push(r), n === 0)
      return new Yt(this, s);
    n <= 0 ? r = r.left : r = r.right;
  }
  return new Yt(this, []);
};
$t.remove = function(t4) {
  var e = this.find(t4);
  return e ? e.remove() : this;
};
$t.get = function(t4) {
  for (var e = this._compare, r = this.root; r; ) {
    var s = e(t4, r.key);
    if (s === 0)
      return r.value;
    s <= 0 ? r = r.left : r = r.right;
  }
};
function Yt(t4, e) {
  this.tree = t4, this._stack = e;
}
var fr = Yt.prototype;
Object.defineProperty(fr, "valid", {
  get: function() {
    return this._stack.length > 0;
  }
});
Object.defineProperty(fr, "node", {
  get: function() {
    return this._stack.length > 0 ? this._stack[this._stack.length - 1] : null;
  },
  enumerable: true
});
fr.clone = function() {
  return new Yt(this.tree, this._stack.slice());
};
function Yg(t4, e) {
  t4.key = e.key, t4.value = e.value, t4.left = e.left, t4.right = e.right, t4._color = e._color, t4._count = e._count;
}
function pO(t4) {
  for (var e, r, s, n, a = t4.length - 1; a >= 0; --a) {
    if (e = t4[a], a === 0) {
      e._color = Qe;
      return;
    }
    if (r = t4[a - 1], r.left === e) {
      if (s = r.right, s.right && s.right._color === ot) {
        if (s = r.right = br(s), n = s.right = br(s.right), r.right = s.left, s.left = r, s.right = n, s._color = r._color, e._color = Qe, r._color = Qe, n._color = Qe, ft(r), ft(s), a > 1) {
          var o = t4[a - 2];
          o.left === r ? o.left = s : o.right = s;
        }
        t4[a - 1] = s;
        return;
      } else if (s.left && s.left._color === ot) {
        if (s = r.right = br(s), n = s.left = br(s.left), r.right = n.left, s.left = n.right, n.left = r, n.right = s, n._color = r._color, r._color = Qe, s._color = Qe, e._color = Qe, ft(r), ft(s), ft(n), a > 1) {
          var o = t4[a - 2];
          o.left === r ? o.left = n : o.right = n;
        }
        t4[a - 1] = n;
        return;
      }
      if (s._color === Qe)
        if (r._color === ot) {
          r._color = Qe, r.right = tn(ot, s);
          return;
        } else {
          r.right = tn(ot, s);
          continue;
        }
      else {
        if (s = br(s), r.right = s.left, s.left = r, s._color = r._color, r._color = ot, ft(r), ft(s), a > 1) {
          var o = t4[a - 2];
          o.left === r ? o.left = s : o.right = s;
        }
        t4[a - 1] = s, t4[a] = r, a + 1 < t4.length ? t4[a + 1] = e : t4.push(e), a = a + 2;
      }
    } else {
      if (s = r.left, s.left && s.left._color === ot) {
        if (s = r.left = br(s), n = s.left = br(s.left), r.left = s.right, s.right = r, s.left = n, s._color = r._color, e._color = Qe, r._color = Qe, n._color = Qe, ft(r), ft(s), a > 1) {
          var o = t4[a - 2];
          o.right === r ? o.right = s : o.left = s;
        }
        t4[a - 1] = s;
        return;
      } else if (s.right && s.right._color === ot) {
        if (s = r.left = br(s), n = s.right = br(s.right), r.left = n.right, s.right = n.left, n.right = r, n.left = s, n._color = r._color, r._color = Qe, s._color = Qe, e._color = Qe, ft(r), ft(s), ft(n), a > 1) {
          var o = t4[a - 2];
          o.right === r ? o.right = n : o.left = n;
        }
        t4[a - 1] = n;
        return;
      }
      if (s._color === Qe)
        if (r._color === ot) {
          r._color = Qe, r.left = tn(ot, s);
          return;
        } else {
          r.left = tn(ot, s);
          continue;
        }
      else {
        if (s = br(s), r.left = s.right, s.right = r, s._color = r._color, r._color = ot, ft(r), ft(s), a > 1) {
          var o = t4[a - 2];
          o.right === r ? o.right = s : o.left = s;
        }
        t4[a - 1] = s, t4[a] = r, a + 1 < t4.length ? t4[a + 1] = e : t4.push(e), a = a + 2;
      }
    }
  }
}
fr.remove = function() {
  var t4 = this._stack;
  if (t4.length === 0)
    return this.tree;
  var e = new Array(t4.length), r = t4[t4.length - 1];
  e[e.length - 1] = new Qt(r._color, r.key, r.value, r.left, r.right, r._count);
  for (var s = t4.length - 2; s >= 0; --s) {
    var r = t4[s];
    r.left === t4[s + 1] ? e[s] = new Qt(r._color, r.key, r.value, e[s + 1], r.right, r._count) : e[s] = new Qt(r._color, r.key, r.value, r.left, e[s + 1], r._count);
  }
  if (r = e[e.length - 1], r.left && r.right) {
    var n = e.length;
    for (r = r.left; r.right; )
      e.push(r), r = r.right;
    var a = e[n - 1];
    e.push(new Qt(r._color, a.key, a.value, r.left, r.right, r._count)), e[n - 1].key = r.key, e[n - 1].value = r.value;
    for (var s = e.length - 2; s >= n; --s)
      r = e[s], e[s] = new Qt(r._color, r.key, r.value, r.left, e[s + 1], r._count);
    e[n - 1].left = e[n];
  }
  if (r = e[e.length - 1], r._color === ot) {
    var o = e[e.length - 2];
    o.left === r ? o.left = null : o.right === r && (o.right = null), e.pop();
    for (var s = 0; s < e.length; ++s)
      e[s]._count--;
    return new rn(this.tree._compare, e[0]);
  } else if (r.left || r.right) {
    r.left ? Yg(r, r.left) : r.right && Yg(r, r.right), r._color = Qe;
    for (var s = 0; s < e.length - 1; ++s)
      e[s]._count--;
    return new rn(this.tree._compare, e[0]);
  } else {
    if (e.length === 1)
      return new rn(this.tree._compare, null);
    for (var s = 0; s < e.length; ++s)
      e[s]._count--;
    var l = e[e.length - 2];
    pO(e), l.left === r ? l.left = null : l.right = null;
  }
  return new rn(this.tree._compare, e[0]);
};
Object.defineProperty(fr, "key", {
  get: function() {
    if (this._stack.length > 0)
      return this._stack[this._stack.length - 1].key;
  },
  enumerable: true
});
Object.defineProperty(fr, "value", {
  get: function() {
    if (this._stack.length > 0)
      return this._stack[this._stack.length - 1].value;
  },
  enumerable: true
});
Object.defineProperty(fr, "index", {
  get: function() {
    var t4 = 0, e = this._stack;
    if (e.length === 0) {
      var r = this.tree.root;
      return r ? r._count : 0;
    } else
      e[e.length - 1].left && (t4 = e[e.length - 1].left._count);
    for (var s = e.length - 2; s >= 0; --s)
      e[s + 1] === e[s].right && (++t4, e[s].left && (t4 += e[s].left._count));
    return t4;
  },
  enumerable: true
});
fr.next = function() {
  var t4 = this._stack;
  if (t4.length !== 0) {
    var e = t4[t4.length - 1];
    if (e.right)
      for (e = e.right; e; )
        t4.push(e), e = e.left;
    else
      for (t4.pop(); t4.length > 0 && t4[t4.length - 1].right === e; )
        e = t4[t4.length - 1], t4.pop();
  }
};
Object.defineProperty(fr, "hasNext", {
  get: function() {
    var t4 = this._stack;
    if (t4.length === 0)
      return false;
    if (t4[t4.length - 1].right)
      return true;
    for (var e = t4.length - 1; e > 0; --e)
      if (t4[e - 1].left === t4[e])
        return true;
    return false;
  }
});
fr.update = function(t4) {
  var e = this._stack;
  if (e.length === 0)
    throw new Error("Can't update empty node!");
  var r = new Array(e.length), s = e[e.length - 1];
  r[r.length - 1] = new Qt(s._color, s.key, t4, s.left, s.right, s._count);
  for (var n = e.length - 2; n >= 0; --n)
    s = e[n], s.left === e[n + 1] ? r[n] = new Qt(s._color, s.key, s.value, r[n + 1], s.right, s._count) : r[n] = new Qt(s._color, s.key, s.value, s.left, r[n + 1], s._count);
  return new rn(this.tree._compare, r[0]);
};
fr.prev = function() {
  var t4 = this._stack;
  if (t4.length !== 0) {
    var e = t4[t4.length - 1];
    if (e.left)
      for (e = e.left; e; )
        t4.push(e), e = e.right;
    else
      for (t4.pop(); t4.length > 0 && t4[t4.length - 1].left === e; )
        e = t4[t4.length - 1], t4.pop();
  }
};
Object.defineProperty(fr, "hasPrev", {
  get: function() {
    var t4 = this._stack;
    if (t4.length === 0)
      return false;
    if (t4[t4.length - 1].left)
      return true;
    for (var e = t4.length - 1; e > 0; --e)
      if (t4[e - 1].right === t4[e])
        return true;
    return false;
  }
});
function fO(t4, e) {
  return t4 < e ? -1 : t4 > e ? 1 : 0;
}
function hO(t4) {
  return new rn(t4 || fO, null);
}
var cn = {};
Object.defineProperty(cn, "__esModule", { value: true });
var mO = Object.freeze({});
var Zg;
var ey;
function dO(t4) {
  return t4 < 65 ? false : t4 < 91 ? true : t4 < 97 ? false : t4 < 123 ? true : eb(t4);
}
function ZE(t4) {
  return t4 < 48 ? false : t4 < 58 ? true : t4 < 65 ? false : t4 < 91 || t4 === 95 ? true : t4 < 97 ? false : t4 < 123 ? true : eb(t4) || gO(t4);
}
function eb(t4) {
  return tb(t4, Zg || (Zg = yO()));
}
function gO(t4) {
  return tb(t4, ey || (ey = xO()));
}
function yO() {
  return rb("4q 0 b 0 5 0 6 m 2 u 2 cp 5 b f 4 8 0 2 0 3m 4 2 1 3 3 2 0 7 0 2 2 2 0 2 j 2 2a 2 3u 9 4l 2 11 3 0 7 14 20 q 5 3 1a 16 10 1 2 2q 2 0 g 1 8 1 b 2 3 0 h 0 2 t u 2g c 0 p w a 1 5 0 6 l 5 0 a 0 4 0 o o 8 a 1i k 2 h 1p 1h 4 0 j 0 8 9 g f 5 7 3 1 3 l 2 6 2 0 4 3 4 0 h 0 e 1 2 2 f 1 b 0 9 5 5 1 3 l 2 6 2 1 2 1 2 1 w 3 2 0 k 2 h 8 2 2 2 l 2 6 2 1 2 4 4 0 j 0 g 1 o 0 c 7 3 1 3 l 2 6 2 1 2 4 4 0 v 1 2 2 g 0 i 0 2 5 4 2 2 3 4 1 2 0 2 1 4 1 4 2 4 b n 0 1h 7 2 2 2 m 2 f 4 0 r 2 6 1 v 0 5 7 2 2 2 m 2 9 2 4 4 0 x 0 2 1 g 1 i 8 2 2 2 14 3 0 h 0 6 2 9 2 p 5 6 h 4 n 2 8 2 0 3 6 1n 1b 2 1 d 6 1n 1 2 0 2 4 2 n 2 0 2 9 2 1 a 0 3 4 2 0 m 3 x 0 1s 7 2 z s 4 38 16 l 0 h 5 5 3 4 0 4 1 8 2 5 c d 0 i 11 2 0 6 0 3 16 2 98 2 3 3 6 2 0 2 3 3 14 2 3 3 w 2 3 3 6 2 0 2 3 3 e 2 1k 2 3 3 1u 12 f h 2d 3 5 4 h7 3 g 2 p 6 22 4 a 8 c 2 3 f h f h f c 2 2 g 1f 10 0 5 0 1w 2g 8 14 2 0 6 1x b u 1e t 3 4 c 17 5 p 1j m a 1g 2b 0 2m 1a i 6 1k t e 1 b 17 r z 16 2 b z 3 8 8 16 3 2 16 3 2 5 2 1 4 0 6 5b 1t 7p 3 5 3 11 3 5 3 7 2 0 2 0 2 0 2 u 3 1g 2 6 2 0 4 2 2 6 4 3 3 5 5 c 6 2 2 6 39 0 e 0 h c 2u 0 5 0 3 9 2 0 3 5 7 0 2 0 2 0 2 f 3 3 6 4 5 0 i 14 22g 1a 2 1a 2 3o 7 3 4 1 d 11 2 0 6 0 3 1j 8 0 h m a 6 2 6 2 6 2 6 2 6 2 6 2 6 2 6 fb 2 q 8 8 4 3 4 5 2d 5 4 2 2h 2 3 6 16 2 2l i v 1d f e9 533 1t g70 4 wc 1w 19 3 7g 4 f b 1 l 1a h u 3 27 14 8 3 2u 3 1g 3 8 17 c 2 2 2 3 2 m u 1f f 1d 1r 5 4 0 2 1 c r b m q s 8 1a t 0 h 4 2 9 b 4 2 14 o 2 2 7 l m 4 0 4 1d 2 0 4 1 3 4 3 0 2 0 p 2 3 a 8 2 d 5 3 5 3 5 a 6 2 6 2 16 2 d 7 36 u 8mb d m 5 1c 6it a5 3 2x 13 6 d 4 6 0 2 9 2 c 2 4 2 0 2 1 2 1 2 2z y a2 j 1r 3 1h 15 b 39 4 2 3q 11 p 7 p c 2g 4 5 3 5 3 5 3 2 10 b 2 p 2 i 2 1 2 e 3 d z 3e 1y 1g 7g s 4 1c 1c v e t 6 11 b t 3 z 5 7 2 4 17 4d j z 5 z 5 13 9 1f 4d 8m a l b 7 49 5 3 0 2 17 2 1 4 0 3 m b m a u 1u i 2 1 b l b p 1z 1j 7 1 1t 0 g 3 2 2 2 s 17 s 4 s 10 7 2 r s 1h b l b i e h 33 20 1k 1e e 1e e z 9p 15 7 1 27 s b 0 9 l 2z k s m d 1g 24 18 x o r z u 0 3 0 9 y 4 0 d 1b f 3 m 0 2 0 10 h 2 o 2d 6 2 0 2 3 2 e 2 9 8 1a 13 7 3 1 3 l 2 6 2 1 2 4 4 0 j 0 d 4 4f 1g j 3 l 2 v 1b l 1 2 0 55 1a 16 3 11 1b l 0 1o 16 e 0 20 q 6e 17 39 1r w 7 3 0 3 7 2 1 2 n g 0 2 0 2n 7 3 12 h 0 2 0 t 0 b 13 8 0 m 0 c 19 k 0 z 1k 7c 8 2 10 i 0 1e t 35 6 2 1 2 11 m 0 q 5 2 1 2 v f 0 94 i 5a 0 28 pl 2v 32 i 5f 24d tq 34i g6 6nu fs 8 u 36 t j 1b h 3 w k 6 i j5 1r 3l 22 6 0 1v c 1t 1 2 0 t 4qf 9 yd 17 8 6wo 7y 1e 2 i 3 9 az 1s5 2y 6 c 4 8 8 9 4mf 2c 2 1y 2 1 3 0 3 1 3 3 2 b 2 0 2 6 2 1s 2 3 3 7 2 6 2 r 2 3 2 4 2 0 4 6 2 9f 3 o 2 o 2 u 2 o 2 u 2 o 2 u 2 o 2 u 2 o 2 7 1th 18 b 6 h 0 aa 17 105 5g 1o 1v 8 0 xh 3 2 q 2 1 2 0 3 0 2 9 2 3 2 0 2 0 7 0 5 0 2 0 2 0 2 2 2 1 2 0 3 0 2 0 2 0 2 0 2 0 2 1 2 0 3 3 2 6 2 3 2 3 2 0 2 9 2 g 6 2 2 4 2 g 3et wyl z 378 c 65 3 4g1 f 5rk 2e8 f1 15v 3t6");
}
function xO() {
  return rb("53 0 g9 33 o 0 70 4 7e 18 2 0 2 1 2 1 2 0 21 a 1d u 7 0 2u 6 3 5 3 1 2 3 3 9 o 0 v q 2k a g 9 y 8 a 0 p 3 2 8 2 2 2 4 18 2 3c e 2 w 1j 2 2 h 2 6 b 1 3 9 i 2 1l 0 2 6 3 1 3 2 a 0 b 1 3 9 f 0 3 2 1l 0 2 4 5 1 3 2 4 0 l b 4 0 c 2 1l 0 2 7 2 2 2 2 l 1 3 9 b 5 2 2 1l 0 2 6 3 1 3 2 8 2 b 1 3 9 j 0 1o 4 4 2 2 3 a 0 f 9 h 4 1m 6 2 2 2 3 8 1 c 1 3 9 i 2 1l 0 2 6 2 2 2 3 8 1 c 1 3 9 h 3 1k 1 2 6 2 2 2 3 a 0 b 1 3 9 i 2 1z 0 5 5 2 0 2 7 7 9 3 1 1q 0 3 6 d 7 2 9 2g 0 3 8 c 5 3 9 1r 1 7 9 c 0 2 0 2 0 5 1 1e j 2 1 6 a 2 z a 0 2t j 2 9 d 3 5 2 2 2 3 6 4 3 e b 2 e jk 2 a 8 pt 2 u 2 u 1 v 1 1t v a 0 3 9 y 2 3 9 40 0 3b b 5 b b 9 3l a 1p 4 1m 9 2 s 3 a 7 9 n d 2 1 1s 4 1c g c 9 i 8 d 2 v c 3 9 19 d 1d j 9 9 7 9 3b 2 2 k 5 0 7 0 3 2 5j 1l 2 4 g0 1 k 0 3g c 5 0 4 b 2db 2 3y 0 2p v ff 5 2y 1 n7q 9 1y 0 5 9 x 1 29 1 7l 0 4 0 5 0 o 4 5 0 2c 1 1f h b 9 7 h e a t 7 q c 19 3 1c d g 9 c 0 b 9 1c d d 0 9 1 3 9 y 2 1f 0 2 2 3 1 6 1 2 0 16 4 6 1 6l 7 2 1 3 9 fmt 0 ki f h f 4 1 p 2 5d 9 12 0 ji 0 6b 0 46 4 86 9 120 2 2 1 6 3 15 2 5 0 4m 1 fy 3 9 9 aa 1 4a a 4w 2 1i e w 9 g 3 1a a 1i 9 7 2 11 d 2 9 6 1 19 0 d 2 1d d 9 3 2 b 2b b 7 0 4h b 6 9 7 3 1k 1 2 6 3 1 3 2 a 0 b 1 3 6 4 4 5d h a 9 5 0 2a j d 9 5y 6 3 8 s 1 2b g g 9 2a c 9 9 2c e 5 9 6r e 4m 9 1z 5 2 1 3 3 2 0 2 1 d 9 3c 6 3 6 4 0 t 9 15 6 2 3 9 0 a a 1b f ba 7 2 7 h 9 1l l 2 d 3f 5 4 0 2 1 2 6 2 0 9 9 1d 4 2 1 2 4 9 9 96 3 ewa 9 3r 4 1o 6 q 9 s6 0 2 1i 8 3 2a 0 c 1 f58 1 43r 4 4 5 9 7 3 6 v 3 45 2 13e 1d e9 1i 5 1d 9 0 f 0 n 4 2 e 11t 6 2 g 3 6 2 1 2 4 7a 6 a 9 bn d 15j 6 32 6 6 9 3o7 9 gvt3 6n");
}
function tb(t4, e) {
  let r = 0, s = e.length / 2 | 0, n = 0, a = 0, o = 0;
  for (; r < s; )
    if (n = (r + s) / 2 | 0, a = e[2 * n], o = e[2 * n + 1], t4 < a)
      s = n;
    else if (t4 > o)
      r = n + 1;
    else
      return true;
  return false;
}
function rb(t4) {
  let e = 0;
  return t4.split(" ").map((r) => e += parseInt(r, 36) | 0);
}
var Gu = class {
  constructor(e, r, s, n) {
    this._raw2018 = e, this._raw2019 = r, this._raw2020 = s, this._raw2021 = n;
  }
  get es2018() {
    return this._set2018 || (this._set2018 = new Set(this._raw2018.split(" ")));
  }
  get es2019() {
    return this._set2019 || (this._set2019 = new Set(this._raw2019.split(" ")));
  }
  get es2020() {
    return this._set2020 || (this._set2020 = new Set(this._raw2020.split(" ")));
  }
  get es2021() {
    return this._set2021 || (this._set2021 = new Set(this._raw2021.split(" ")));
  }
};
var vO = /* @__PURE__ */ new Set(["General_Category", "gc"]);
var EO = /* @__PURE__ */ new Set(["Script", "Script_Extensions", "sc", "scx"]);
var bO = new Gu("C Cased_Letter Cc Cf Close_Punctuation Cn Co Combining_Mark Connector_Punctuation Control Cs Currency_Symbol Dash_Punctuation Decimal_Number Enclosing_Mark Final_Punctuation Format Initial_Punctuation L LC Letter Letter_Number Line_Separator Ll Lm Lo Lowercase_Letter Lt Lu M Mark Math_Symbol Mc Me Mn Modifier_Letter Modifier_Symbol N Nd Nl No Nonspacing_Mark Number Open_Punctuation Other Other_Letter Other_Number Other_Punctuation Other_Symbol P Paragraph_Separator Pc Pd Pe Pf Pi Po Private_Use Ps Punctuation S Sc Separator Sk Sm So Space_Separator Spacing_Mark Surrogate Symbol Titlecase_Letter Unassigned Uppercase_Letter Z Zl Zp Zs cntrl digit punct", "", "", "");
var ga = new Gu("Adlam Adlm Aghb Ahom Anatolian_Hieroglyphs Arab Arabic Armenian Armi Armn Avestan Avst Bali Balinese Bamu Bamum Bass Bassa_Vah Batak Batk Beng Bengali Bhaiksuki Bhks Bopo Bopomofo Brah Brahmi Brai Braille Bugi Buginese Buhd Buhid Cakm Canadian_Aboriginal Cans Cari Carian Caucasian_Albanian Chakma Cham Cher Cherokee Common Copt Coptic Cprt Cuneiform Cypriot Cyrillic Cyrl Deseret Deva Devanagari Dsrt Dupl Duployan Egyp Egyptian_Hieroglyphs Elba Elbasan Ethi Ethiopic Geor Georgian Glag Glagolitic Gonm Goth Gothic Gran Grantha Greek Grek Gujarati Gujr Gurmukhi Guru Han Hang Hangul Hani Hano Hanunoo Hatr Hatran Hebr Hebrew Hira Hiragana Hluw Hmng Hung Imperial_Aramaic Inherited Inscriptional_Pahlavi Inscriptional_Parthian Ital Java Javanese Kaithi Kali Kana Kannada Katakana Kayah_Li Khar Kharoshthi Khmer Khmr Khoj Khojki Khudawadi Knda Kthi Lana Lao Laoo Latin Latn Lepc Lepcha Limb Limbu Lina Linb Linear_A Linear_B Lisu Lyci Lycian Lydi Lydian Mahajani Mahj Malayalam Mand Mandaic Mani Manichaean Marc Marchen Masaram_Gondi Meetei_Mayek Mend Mende_Kikakui Merc Mero Meroitic_Cursive Meroitic_Hieroglyphs Miao Mlym Modi Mong Mongolian Mro Mroo Mtei Mult Multani Myanmar Mymr Nabataean Narb Nbat New_Tai_Lue Newa Nko Nkoo Nshu Nushu Ogam Ogham Ol_Chiki Olck Old_Hungarian Old_Italic Old_North_Arabian Old_Permic Old_Persian Old_South_Arabian Old_Turkic Oriya Orkh Orya Osage Osge Osma Osmanya Pahawh_Hmong Palm Palmyrene Pau_Cin_Hau Pauc Perm Phag Phags_Pa Phli Phlp Phnx Phoenician Plrd Prti Psalter_Pahlavi Qaac Qaai Rejang Rjng Runic Runr Samaritan Samr Sarb Saur Saurashtra Sgnw Sharada Shavian Shaw Shrd Sidd Siddham SignWriting Sind Sinh Sinhala Sora Sora_Sompeng Soyo Soyombo Sund Sundanese Sylo Syloti_Nagri Syrc Syriac Tagalog Tagb Tagbanwa Tai_Le Tai_Tham Tai_Viet Takr Takri Tale Talu Tamil Taml Tang Tangut Tavt Telu Telugu Tfng Tglg Thaa Thaana Thai Tibetan Tibt Tifinagh Tirh Tirhuta Ugar Ugaritic Vai Vaii Wara Warang_Citi Xpeo Xsux Yi Yiii Zanabazar_Square Zanb Zinh Zyyy", "Dogr Dogra Gong Gunjala_Gondi Hanifi_Rohingya Maka Makasar Medefaidrin Medf Old_Sogdian Rohg Sogd Sogdian Sogo", "Elym Elymaic Hmnp Nand Nandinagari Nyiakeng_Puachue_Hmong Wancho Wcho", "Chorasmian Chrs Diak Dives_Akuru Khitan_Small_Script Kits Yezi Yezidi");
var Po = new Gu("AHex ASCII ASCII_Hex_Digit Alpha Alphabetic Any Assigned Bidi_C Bidi_Control Bidi_M Bidi_Mirrored CI CWCF CWCM CWKCF CWL CWT CWU Case_Ignorable Cased Changes_When_Casefolded Changes_When_Casemapped Changes_When_Lowercased Changes_When_NFKC_Casefolded Changes_When_Titlecased Changes_When_Uppercased DI Dash Default_Ignorable_Code_Point Dep Deprecated Dia Diacritic Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Ext Extender Gr_Base Gr_Ext Grapheme_Base Grapheme_Extend Hex Hex_Digit IDC IDS IDSB IDST IDS_Binary_Operator IDS_Trinary_Operator ID_Continue ID_Start Ideo Ideographic Join_C Join_Control LOE Logical_Order_Exception Lower Lowercase Math NChar Noncharacter_Code_Point Pat_Syn Pat_WS Pattern_Syntax Pattern_White_Space QMark Quotation_Mark RI Radical Regional_Indicator SD STerm Sentence_Terminal Soft_Dotted Term Terminal_Punctuation UIdeo Unified_Ideograph Upper Uppercase VS Variation_Selector White_Space XIDC XIDS XID_Continue XID_Start space", "Extended_Pictographic", "", "EBase EComp EMod EPres ExtPict");
function ty(t4, e, r) {
  return vO.has(e) ? t4 >= 2018 && bO.es2018.has(r) : EO.has(e) ? t4 >= 2018 && ga.es2018.has(r) || t4 >= 2019 && ga.es2019.has(r) || t4 >= 2020 && ga.es2020.has(r) || t4 >= 2021 && ga.es2021.has(r) : false;
}
function CO(t4, e) {
  return t4 >= 2018 && Po.es2018.has(e) || t4 >= 2019 && Po.es2019.has(e) || t4 >= 2021 && Po.es2021.has(e);
}
var SO = 8;
var AO = 9;
var nb = 10;
var DO = 11;
var wO = 12;
var sb = 13;
var ry = 33;
var Us = 36;
var Wn = 40;
var zn = 41;
var Ba = 42;
var wl = 43;
var kO = 44;
var Cs = 45;
var kl = 46;
var ya = 47;
var nn = 48;
var TO = 49;
var FO = 55;
var ti = 57;
var PO = 58;
var Io = 60;
var _o = 61;
var IO = 62;
var Lr = 63;
var ri = 65;
var _O = 66;
var BO = 68;
var ab = 70;
var OO = 80;
var LO = 83;
var RO = 87;
var NO = 90;
var ji = 95;
var ni = 97;
var ny = 98;
var jn = 99;
var sy = 100;
var Hu = 102;
var jO = 103;
var MO = 105;
var ay = 107;
var $O = 109;
var VO = 110;
var UO = 112;
var qO = 114;
var iy = 115;
var WO = 116;
var Bo = 117;
var zO = 118;
var GO = 119;
var HO = 120;
var KO = 121;
var JO = 122;
var Ss = 91;
var Ot = 92;
var Gn = 93;
var Oa = 94;
var As = 123;
var Tl = 124;
var Ds = 125;
var XO = 8204;
var QO = 8205;
var YO = 8232;
var ZO = 8233;
var eL = 0;
var tL = 1114111;
function ib(t4) {
  return t4 >= ri && t4 <= NO || t4 >= ni && t4 <= JO;
}
function La(t4) {
  return t4 >= nn && t4 <= ti;
}
function rL(t4) {
  return t4 >= nn && t4 <= FO;
}
function oy(t4) {
  return t4 >= nn && t4 <= ti || t4 >= ri && t4 <= ab || t4 >= ni && t4 <= Hu;
}
function nL(t4) {
  return t4 === nb || t4 === sb || t4 === YO || t4 === ZO;
}
function sL(t4) {
  return t4 >= eL && t4 <= tL;
}
function Oo(t4) {
  return t4 >= ni && t4 <= Hu ? t4 - ni + 10 : t4 >= ri && t4 <= ab ? t4 - ri + 10 : t4 - nn;
}
function Lo(t4) {
  return t4 >= 55296 && t4 <= 56319;
}
function Ro(t4) {
  return t4 >= 56320 && t4 <= 57343;
}
function No(t4, e) {
  return (t4 - 55296) * 1024 + (e - 56320) + 65536;
}
var ly = {
  at(t4, e, r) {
    return r < e ? t4.charCodeAt(r) : -1;
  },
  width(t4) {
    return 1;
  }
};
var aL = {
  at(t4, e, r) {
    return r < e ? t4.codePointAt(r) : -1;
  },
  width(t4) {
    return t4 > 65535 ? 2 : 1;
  }
};
var iL = class {
  constructor() {
    this._impl = ly, this._s = "", this._i = 0, this._end = 0, this._cp1 = -1, this._w1 = 1, this._cp2 = -1, this._w2 = 1, this._cp3 = -1, this._w3 = 1, this._cp4 = -1;
  }
  get source() {
    return this._s;
  }
  get index() {
    return this._i;
  }
  get currentCodePoint() {
    return this._cp1;
  }
  get nextCodePoint() {
    return this._cp2;
  }
  get nextCodePoint2() {
    return this._cp3;
  }
  get nextCodePoint3() {
    return this._cp4;
  }
  reset(e, r, s, n) {
    this._impl = n ? aL : ly, this._s = e, this._end = s, this.rewind(r);
  }
  rewind(e) {
    const r = this._impl;
    this._i = e, this._cp1 = r.at(this._s, this._end, e), this._w1 = r.width(this._cp1), this._cp2 = r.at(this._s, this._end, e + this._w1), this._w2 = r.width(this._cp2), this._cp3 = r.at(this._s, this._end, e + this._w1 + this._w2), this._w3 = r.width(this._cp3), this._cp4 = r.at(this._s, this._end, e + this._w1 + this._w2 + this._w3);
  }
  advance() {
    if (this._cp1 !== -1) {
      const e = this._impl;
      this._i += this._w1, this._cp1 = this._cp2, this._w1 = this._w2, this._cp2 = this._cp3, this._w2 = e.width(this._cp2), this._cp3 = this._cp4, this._w3 = e.width(this._cp3), this._cp4 = e.at(this._s, this._end, this._i + this._w1 + this._w2 + this._w3);
    }
  }
  eat(e) {
    return this._cp1 === e ? (this.advance(), true) : false;
  }
  eat2(e, r) {
    return this._cp1 === e && this._cp2 === r ? (this.advance(), this.advance(), true) : false;
  }
  eat3(e, r, s) {
    return this._cp1 === e && this._cp2 === r && this._cp3 === s ? (this.advance(), this.advance(), this.advance(), true) : false;
  }
};
var oL = class extends SyntaxError {
  constructor(e, r, s, n) {
    e && (e.startsWith("/") || (e = `/${e}/${r ? "u" : ""}`), e = `: ${e}`), super(`Invalid regular expression${e}: ${n}`), this.index = s;
  }
};
function uy(t4) {
  return t4 === Oa || t4 === Us || t4 === Ot || t4 === kl || t4 === Ba || t4 === wl || t4 === Lr || t4 === Wn || t4 === zn || t4 === Ss || t4 === Gn || t4 === As || t4 === Ds || t4 === Tl;
}
function lL(t4) {
  return dO(t4) || t4 === Us || t4 === ji;
}
function uL(t4) {
  return ZE(t4) || t4 === Us || t4 === ji || t4 === XO || t4 === QO;
}
function ob(t4) {
  return ib(t4) || t4 === ji;
}
function cL(t4) {
  return ob(t4) || La(t4);
}
var Ku = class {
  constructor(e) {
    this._reader = new iL(), this._uFlag = false, this._nFlag = false, this._lastIntValue = 0, this._lastMinValue = 0, this._lastMaxValue = 0, this._lastStrValue = "", this._lastKeyValue = "", this._lastValValue = "", this._lastAssertionIsQuantifiable = false, this._numCapturingParens = 0, this._groupNames = /* @__PURE__ */ new Set(), this._backreferenceNames = /* @__PURE__ */ new Set(), this._options = e || {};
  }
  validateLiteral(e, r = 0, s = e.length) {
    if (this._uFlag = this._nFlag = false, this.reset(e, r, s), this.onLiteralEnter(r), this.eat(ya) && this.eatRegExpBody() && this.eat(ya)) {
      const n = this.index, a = e.includes("u", n);
      this.validateFlags(e, n, s), this.validatePattern(e, r + 1, n - 1, a);
    } else if (r >= s)
      this.raise("Empty");
    else {
      const n = String.fromCodePoint(this.currentCodePoint);
      this.raise(`Unexpected character '${n}'`);
    }
    this.onLiteralLeave(r, s);
  }
  validateFlags(e, r = 0, s = e.length) {
    const n = /* @__PURE__ */ new Set();
    let a = false, o = false, l = false, i = false, u = false, c = false, f = false;
    for (let h = r; h < s; ++h) {
      const p = e.charCodeAt(h);
      n.has(p) && this.raise(`Duplicated flag '${e[h]}'`), n.add(p), p === jO ? a = true : p === MO ? o = true : p === $O ? l = true : p === Bo && this.ecmaVersion >= 2015 ? u = true : p === KO && this.ecmaVersion >= 2015 ? i = true : p === iy && this.ecmaVersion >= 2018 ? c = true : p === sy && this.ecmaVersion >= 2022 ? f = true : this.raise(`Invalid flag '${e[h]}'`);
    }
    this.onFlags(r, s, a, o, l, u, i, c, f);
  }
  validatePattern(e, r = 0, s = e.length, n = false) {
    this._uFlag = n && this.ecmaVersion >= 2015, this._nFlag = n && this.ecmaVersion >= 2018, this.reset(e, r, s), this.consumePattern(), !this._nFlag && this.ecmaVersion >= 2018 && this._groupNames.size > 0 && (this._nFlag = true, this.rewind(r), this.consumePattern());
  }
  get strict() {
    return !!(this._options.strict || this._uFlag);
  }
  get ecmaVersion() {
    return this._options.ecmaVersion || 2022;
  }
  onLiteralEnter(e) {
    this._options.onLiteralEnter && this._options.onLiteralEnter(e);
  }
  onLiteralLeave(e, r) {
    this._options.onLiteralLeave && this._options.onLiteralLeave(e, r);
  }
  onFlags(e, r, s, n, a, o, l, i, u) {
    this._options.onFlags && this._options.onFlags(e, r, s, n, a, o, l, i, u);
  }
  onPatternEnter(e) {
    this._options.onPatternEnter && this._options.onPatternEnter(e);
  }
  onPatternLeave(e, r) {
    this._options.onPatternLeave && this._options.onPatternLeave(e, r);
  }
  onDisjunctionEnter(e) {
    this._options.onDisjunctionEnter && this._options.onDisjunctionEnter(e);
  }
  onDisjunctionLeave(e, r) {
    this._options.onDisjunctionLeave && this._options.onDisjunctionLeave(e, r);
  }
  onAlternativeEnter(e, r) {
    this._options.onAlternativeEnter && this._options.onAlternativeEnter(e, r);
  }
  onAlternativeLeave(e, r, s) {
    this._options.onAlternativeLeave && this._options.onAlternativeLeave(e, r, s);
  }
  onGroupEnter(e) {
    this._options.onGroupEnter && this._options.onGroupEnter(e);
  }
  onGroupLeave(e, r) {
    this._options.onGroupLeave && this._options.onGroupLeave(e, r);
  }
  onCapturingGroupEnter(e, r) {
    this._options.onCapturingGroupEnter && this._options.onCapturingGroupEnter(e, r);
  }
  onCapturingGroupLeave(e, r, s) {
    this._options.onCapturingGroupLeave && this._options.onCapturingGroupLeave(e, r, s);
  }
  onQuantifier(e, r, s, n, a) {
    this._options.onQuantifier && this._options.onQuantifier(e, r, s, n, a);
  }
  onLookaroundAssertionEnter(e, r, s) {
    this._options.onLookaroundAssertionEnter && this._options.onLookaroundAssertionEnter(e, r, s);
  }
  onLookaroundAssertionLeave(e, r, s, n) {
    this._options.onLookaroundAssertionLeave && this._options.onLookaroundAssertionLeave(e, r, s, n);
  }
  onEdgeAssertion(e, r, s) {
    this._options.onEdgeAssertion && this._options.onEdgeAssertion(e, r, s);
  }
  onWordBoundaryAssertion(e, r, s, n) {
    this._options.onWordBoundaryAssertion && this._options.onWordBoundaryAssertion(e, r, s, n);
  }
  onAnyCharacterSet(e, r, s) {
    this._options.onAnyCharacterSet && this._options.onAnyCharacterSet(e, r, s);
  }
  onEscapeCharacterSet(e, r, s, n) {
    this._options.onEscapeCharacterSet && this._options.onEscapeCharacterSet(e, r, s, n);
  }
  onUnicodePropertyCharacterSet(e, r, s, n, a, o) {
    this._options.onUnicodePropertyCharacterSet && this._options.onUnicodePropertyCharacterSet(e, r, s, n, a, o);
  }
  onCharacter(e, r, s) {
    this._options.onCharacter && this._options.onCharacter(e, r, s);
  }
  onBackreference(e, r, s) {
    this._options.onBackreference && this._options.onBackreference(e, r, s);
  }
  onCharacterClassEnter(e, r) {
    this._options.onCharacterClassEnter && this._options.onCharacterClassEnter(e, r);
  }
  onCharacterClassLeave(e, r, s) {
    this._options.onCharacterClassLeave && this._options.onCharacterClassLeave(e, r, s);
  }
  onCharacterClassRange(e, r, s, n) {
    this._options.onCharacterClassRange && this._options.onCharacterClassRange(e, r, s, n);
  }
  get source() {
    return this._reader.source;
  }
  get index() {
    return this._reader.index;
  }
  get currentCodePoint() {
    return this._reader.currentCodePoint;
  }
  get nextCodePoint() {
    return this._reader.nextCodePoint;
  }
  get nextCodePoint2() {
    return this._reader.nextCodePoint2;
  }
  get nextCodePoint3() {
    return this._reader.nextCodePoint3;
  }
  reset(e, r, s) {
    this._reader.reset(e, r, s, this._uFlag);
  }
  rewind(e) {
    this._reader.rewind(e);
  }
  advance() {
    this._reader.advance();
  }
  eat(e) {
    return this._reader.eat(e);
  }
  eat2(e, r) {
    return this._reader.eat2(e, r);
  }
  eat3(e, r, s) {
    return this._reader.eat3(e, r, s);
  }
  raise(e) {
    throw new oL(this.source, this._uFlag, this.index, e);
  }
  eatRegExpBody() {
    const e = this.index;
    let r = false, s = false;
    for (; ; ) {
      const n = this.currentCodePoint;
      if (n === -1 || nL(n)) {
        const a = r ? "character class" : "regular expression";
        this.raise(`Unterminated ${a}`);
      }
      if (s)
        s = false;
      else if (n === Ot)
        s = true;
      else if (n === Ss)
        r = true;
      else if (n === Gn)
        r = false;
      else if (n === ya && !r || n === Ba && this.index === e)
        break;
      this.advance();
    }
    return this.index !== e;
  }
  consumePattern() {
    const e = this.index;
    this._numCapturingParens = this.countCapturingParens(), this._groupNames.clear(), this._backreferenceNames.clear(), this.onPatternEnter(e), this.consumeDisjunction();
    const r = this.currentCodePoint;
    if (this.currentCodePoint !== -1) {
      r === zn && this.raise("Unmatched ')'"), r === Ot && this.raise("\\ at end of pattern"), (r === Gn || r === Ds) && this.raise("Lone quantifier brackets");
      const s = String.fromCodePoint(r);
      this.raise(`Unexpected character '${s}'`);
    }
    for (const s of this._backreferenceNames)
      this._groupNames.has(s) || this.raise("Invalid named capture referenced");
    this.onPatternLeave(e, this.index);
  }
  countCapturingParens() {
    const e = this.index;
    let r = false, s = false, n = 0, a = 0;
    for (; (a = this.currentCodePoint) !== -1; )
      s ? s = false : a === Ot ? s = true : a === Ss ? r = true : a === Gn ? r = false : a === Wn && !r && (this.nextCodePoint !== Lr || this.nextCodePoint2 === Io && this.nextCodePoint3 !== _o && this.nextCodePoint3 !== ry) && (n += 1), this.advance();
    return this.rewind(e), n;
  }
  consumeDisjunction() {
    const e = this.index;
    let r = 0;
    this.onDisjunctionEnter(e);
    do
      this.consumeAlternative(r++);
    while (this.eat(Tl));
    this.consumeQuantifier(true) && this.raise("Nothing to repeat"), this.eat(As) && this.raise("Lone quantifier brackets"), this.onDisjunctionLeave(e, this.index);
  }
  consumeAlternative(e) {
    const r = this.index;
    for (this.onAlternativeEnter(r, e); this.currentCodePoint !== -1 && this.consumeTerm(); )
      ;
    this.onAlternativeLeave(r, this.index, e);
  }
  consumeTerm() {
    return this._uFlag || this.strict ? this.consumeAssertion() || this.consumeAtom() && this.consumeOptionalQuantifier() : this.consumeAssertion() && (!this._lastAssertionIsQuantifiable || this.consumeOptionalQuantifier()) || this.consumeExtendedAtom() && this.consumeOptionalQuantifier();
  }
  consumeOptionalQuantifier() {
    return this.consumeQuantifier(), true;
  }
  consumeAssertion() {
    const e = this.index;
    if (this._lastAssertionIsQuantifiable = false, this.eat(Oa))
      return this.onEdgeAssertion(e, this.index, "start"), true;
    if (this.eat(Us))
      return this.onEdgeAssertion(e, this.index, "end"), true;
    if (this.eat2(Ot, _O))
      return this.onWordBoundaryAssertion(e, this.index, "word", true), true;
    if (this.eat2(Ot, ny))
      return this.onWordBoundaryAssertion(e, this.index, "word", false), true;
    if (this.eat2(Wn, Lr)) {
      const r = this.ecmaVersion >= 2018 && this.eat(Io);
      let s = false;
      if (this.eat(_o) || (s = this.eat(ry))) {
        const n = r ? "lookbehind" : "lookahead";
        return this.onLookaroundAssertionEnter(e, n, s), this.consumeDisjunction(), this.eat(zn) || this.raise("Unterminated group"), this._lastAssertionIsQuantifiable = !r && !this.strict, this.onLookaroundAssertionLeave(e, this.index, n, s), true;
      }
      this.rewind(e);
    }
    return false;
  }
  consumeQuantifier(e = false) {
    const r = this.index;
    let s = 0, n = 0, a = false;
    if (this.eat(Ba))
      s = 0, n = Number.POSITIVE_INFINITY;
    else if (this.eat(wl))
      s = 1, n = Number.POSITIVE_INFINITY;
    else if (this.eat(Lr))
      s = 0, n = 1;
    else if (this.eatBracedQuantifier(e))
      s = this._lastMinValue, n = this._lastMaxValue;
    else
      return false;
    return a = !this.eat(Lr), e || this.onQuantifier(r, this.index, s, n, a), true;
  }
  eatBracedQuantifier(e) {
    const r = this.index;
    if (this.eat(As)) {
      if (this._lastMinValue = 0, this._lastMaxValue = Number.POSITIVE_INFINITY, this.eatDecimalDigits() && (this._lastMinValue = this._lastMaxValue = this._lastIntValue, this.eat(kO) && (this._lastMaxValue = this.eatDecimalDigits() ? this._lastIntValue : Number.POSITIVE_INFINITY), this.eat(Ds)))
        return !e && this._lastMaxValue < this._lastMinValue && this.raise("numbers out of order in {} quantifier"), true;
      !e && (this._uFlag || this.strict) && this.raise("Incomplete quantifier"), this.rewind(r);
    }
    return false;
  }
  consumeAtom() {
    return this.consumePatternCharacter() || this.consumeDot() || this.consumeReverseSolidusAtomEscape() || this.consumeCharacterClass() || this.consumeUncapturingGroup() || this.consumeCapturingGroup();
  }
  consumeDot() {
    return this.eat(kl) ? (this.onAnyCharacterSet(this.index - 1, this.index, "any"), true) : false;
  }
  consumeReverseSolidusAtomEscape() {
    const e = this.index;
    if (this.eat(Ot)) {
      if (this.consumeAtomEscape())
        return true;
      this.rewind(e);
    }
    return false;
  }
  consumeUncapturingGroup() {
    const e = this.index;
    return this.eat3(Wn, Lr, PO) ? (this.onGroupEnter(e), this.consumeDisjunction(), this.eat(zn) || this.raise("Unterminated group"), this.onGroupLeave(e, this.index), true) : false;
  }
  consumeCapturingGroup() {
    const e = this.index;
    if (this.eat(Wn)) {
      let r = null;
      return this.ecmaVersion >= 2018 ? this.consumeGroupSpecifier() && (r = this._lastStrValue) : this.currentCodePoint === Lr && this.raise("Invalid group"), this.onCapturingGroupEnter(e, r), this.consumeDisjunction(), this.eat(zn) || this.raise("Unterminated group"), this.onCapturingGroupLeave(e, this.index, r), true;
    }
    return false;
  }
  consumeExtendedAtom() {
    return this.consumeDot() || this.consumeReverseSolidusAtomEscape() || this.consumeReverseSolidusFollowedByC() || this.consumeCharacterClass() || this.consumeUncapturingGroup() || this.consumeCapturingGroup() || this.consumeInvalidBracedQuantifier() || this.consumeExtendedPatternCharacter();
  }
  consumeReverseSolidusFollowedByC() {
    const e = this.index;
    return this.currentCodePoint === Ot && this.nextCodePoint === jn ? (this._lastIntValue = this.currentCodePoint, this.advance(), this.onCharacter(e, this.index, Ot), true) : false;
  }
  consumeInvalidBracedQuantifier() {
    return this.eatBracedQuantifier(true) && this.raise("Nothing to repeat"), false;
  }
  consumePatternCharacter() {
    const e = this.index, r = this.currentCodePoint;
    return r !== -1 && !uy(r) ? (this.advance(), this.onCharacter(e, this.index, r), true) : false;
  }
  consumeExtendedPatternCharacter() {
    const e = this.index, r = this.currentCodePoint;
    return r !== -1 && r !== Oa && r !== Us && r !== Ot && r !== kl && r !== Ba && r !== wl && r !== Lr && r !== Wn && r !== zn && r !== Ss && r !== Tl ? (this.advance(), this.onCharacter(e, this.index, r), true) : false;
  }
  consumeGroupSpecifier() {
    if (this.eat(Lr)) {
      if (this.eatGroupName()) {
        if (!this._groupNames.has(this._lastStrValue))
          return this._groupNames.add(this._lastStrValue), true;
        this.raise("Duplicate capture group name");
      }
      this.raise("Invalid group");
    }
    return false;
  }
  consumeAtomEscape() {
    return this.consumeBackreference() || this.consumeCharacterClassEscape() || this.consumeCharacterEscape() || this._nFlag && this.consumeKGroupName() ? true : ((this.strict || this._uFlag) && this.raise("Invalid escape"), false);
  }
  consumeBackreference() {
    const e = this.index;
    if (this.eatDecimalEscape()) {
      const r = this._lastIntValue;
      if (r <= this._numCapturingParens)
        return this.onBackreference(e - 1, this.index, r), true;
      (this.strict || this._uFlag) && this.raise("Invalid escape"), this.rewind(e);
    }
    return false;
  }
  consumeCharacterClassEscape() {
    const e = this.index;
    if (this.eat(sy))
      return this._lastIntValue = -1, this.onEscapeCharacterSet(e - 1, this.index, "digit", false), true;
    if (this.eat(BO))
      return this._lastIntValue = -1, this.onEscapeCharacterSet(e - 1, this.index, "digit", true), true;
    if (this.eat(iy))
      return this._lastIntValue = -1, this.onEscapeCharacterSet(e - 1, this.index, "space", false), true;
    if (this.eat(LO))
      return this._lastIntValue = -1, this.onEscapeCharacterSet(e - 1, this.index, "space", true), true;
    if (this.eat(GO))
      return this._lastIntValue = -1, this.onEscapeCharacterSet(e - 1, this.index, "word", false), true;
    if (this.eat(RO))
      return this._lastIntValue = -1, this.onEscapeCharacterSet(e - 1, this.index, "word", true), true;
    let r = false;
    if (this._uFlag && this.ecmaVersion >= 2018 && (this.eat(UO) || (r = this.eat(OO)))) {
      if (this._lastIntValue = -1, this.eat(As) && this.eatUnicodePropertyValueExpression() && this.eat(Ds))
        return this.onUnicodePropertyCharacterSet(e - 1, this.index, "property", this._lastKeyValue, this._lastValValue || null, r), true;
      this.raise("Invalid property name");
    }
    return false;
  }
  consumeCharacterEscape() {
    const e = this.index;
    return this.eatControlEscape() || this.eatCControlLetter() || this.eatZero() || this.eatHexEscapeSequence() || this.eatRegExpUnicodeEscapeSequence() || !this.strict && !this._uFlag && this.eatLegacyOctalEscapeSequence() || this.eatIdentityEscape() ? (this.onCharacter(e - 1, this.index, this._lastIntValue), true) : false;
  }
  consumeKGroupName() {
    const e = this.index;
    if (this.eat(ay)) {
      if (this.eatGroupName()) {
        const r = this._lastStrValue;
        return this._backreferenceNames.add(r), this.onBackreference(e - 1, this.index, r), true;
      }
      this.raise("Invalid named reference");
    }
    return false;
  }
  consumeCharacterClass() {
    const e = this.index;
    if (this.eat(Ss)) {
      const r = this.eat(Oa);
      return this.onCharacterClassEnter(e, r), this.consumeClassRanges(), this.eat(Gn) || this.raise("Unterminated character class"), this.onCharacterClassLeave(e, this.index, r), true;
    }
    return false;
  }
  consumeClassRanges() {
    const e = this.strict || this._uFlag;
    for (; ; ) {
      const r = this.index;
      if (!this.consumeClassAtom())
        break;
      const s = this._lastIntValue;
      if (!this.eat(Cs))
        continue;
      if (this.onCharacter(this.index - 1, this.index, Cs), !this.consumeClassAtom())
        break;
      const n = this._lastIntValue;
      if (s === -1 || n === -1) {
        e && this.raise("Invalid character class");
        continue;
      }
      s > n && this.raise("Range out of order in character class"), this.onCharacterClassRange(r, this.index, s, n);
    }
  }
  consumeClassAtom() {
    const e = this.index, r = this.currentCodePoint;
    if (r !== -1 && r !== Ot && r !== Gn)
      return this.advance(), this._lastIntValue = r, this.onCharacter(e, this.index, this._lastIntValue), true;
    if (this.eat(Ot)) {
      if (this.consumeClassEscape())
        return true;
      if (!this.strict && this.currentCodePoint === jn)
        return this._lastIntValue = Ot, this.onCharacter(e, this.index, this._lastIntValue), true;
      (this.strict || this._uFlag) && this.raise("Invalid escape"), this.rewind(e);
    }
    return false;
  }
  consumeClassEscape() {
    const e = this.index;
    if (this.eat(ny))
      return this._lastIntValue = SO, this.onCharacter(e - 1, this.index, this._lastIntValue), true;
    if (this._uFlag && this.eat(Cs))
      return this._lastIntValue = Cs, this.onCharacter(e - 1, this.index, this._lastIntValue), true;
    let r = 0;
    return !this.strict && !this._uFlag && this.currentCodePoint === jn && (La(r = this.nextCodePoint) || r === ji) ? (this.advance(), this.advance(), this._lastIntValue = r % 32, this.onCharacter(e - 1, this.index, this._lastIntValue), true) : this.consumeCharacterClassEscape() || this.consumeCharacterEscape();
  }
  eatGroupName() {
    if (this.eat(Io)) {
      if (this.eatRegExpIdentifierName() && this.eat(IO))
        return true;
      this.raise("Invalid capture group name");
    }
    return false;
  }
  eatRegExpIdentifierName() {
    if (this.eatRegExpIdentifierStart()) {
      for (this._lastStrValue = String.fromCodePoint(this._lastIntValue); this.eatRegExpIdentifierPart(); )
        this._lastStrValue += String.fromCodePoint(this._lastIntValue);
      return true;
    }
    return false;
  }
  eatRegExpIdentifierStart() {
    const e = this.index, r = !this._uFlag && this.ecmaVersion >= 2020;
    let s = this.currentCodePoint;
    return this.advance(), s === Ot && this.eatRegExpUnicodeEscapeSequence(r) ? s = this._lastIntValue : r && Lo(s) && Ro(this.currentCodePoint) && (s = No(s, this.currentCodePoint), this.advance()), lL(s) ? (this._lastIntValue = s, true) : (this.index !== e && this.rewind(e), false);
  }
  eatRegExpIdentifierPart() {
    const e = this.index, r = !this._uFlag && this.ecmaVersion >= 2020;
    let s = this.currentCodePoint;
    return this.advance(), s === Ot && this.eatRegExpUnicodeEscapeSequence(r) ? s = this._lastIntValue : r && Lo(s) && Ro(this.currentCodePoint) && (s = No(s, this.currentCodePoint), this.advance()), uL(s) ? (this._lastIntValue = s, true) : (this.index !== e && this.rewind(e), false);
  }
  eatCControlLetter() {
    const e = this.index;
    if (this.eat(jn)) {
      if (this.eatControlLetter())
        return true;
      this.rewind(e);
    }
    return false;
  }
  eatZero() {
    return this.currentCodePoint === nn && !La(this.nextCodePoint) ? (this._lastIntValue = 0, this.advance(), true) : false;
  }
  eatControlEscape() {
    return this.eat(Hu) ? (this._lastIntValue = wO, true) : this.eat(VO) ? (this._lastIntValue = nb, true) : this.eat(qO) ? (this._lastIntValue = sb, true) : this.eat(WO) ? (this._lastIntValue = AO, true) : this.eat(zO) ? (this._lastIntValue = DO, true) : false;
  }
  eatControlLetter() {
    const e = this.currentCodePoint;
    return ib(e) ? (this.advance(), this._lastIntValue = e % 32, true) : false;
  }
  eatRegExpUnicodeEscapeSequence(e = false) {
    const r = this.index, s = e || this._uFlag;
    if (this.eat(Bo)) {
      if (s && this.eatRegExpUnicodeSurrogatePairEscape() || this.eatFixedHexDigits(4) || s && this.eatRegExpUnicodeCodePointEscape())
        return true;
      (this.strict || s) && this.raise("Invalid unicode escape"), this.rewind(r);
    }
    return false;
  }
  eatRegExpUnicodeSurrogatePairEscape() {
    const e = this.index;
    if (this.eatFixedHexDigits(4)) {
      const r = this._lastIntValue;
      if (Lo(r) && this.eat(Ot) && this.eat(Bo) && this.eatFixedHexDigits(4)) {
        const s = this._lastIntValue;
        if (Ro(s))
          return this._lastIntValue = No(r, s), true;
      }
      this.rewind(e);
    }
    return false;
  }
  eatRegExpUnicodeCodePointEscape() {
    const e = this.index;
    return this.eat(As) && this.eatHexDigits() && this.eat(Ds) && sL(this._lastIntValue) ? true : (this.rewind(e), false);
  }
  eatIdentityEscape() {
    const e = this.currentCodePoint;
    return this.isValidIdentityEscape(e) ? (this._lastIntValue = e, this.advance(), true) : false;
  }
  isValidIdentityEscape(e) {
    return e === -1 ? false : this._uFlag ? uy(e) || e === ya : this.strict ? !ZE(e) : this._nFlag ? !(e === jn || e === ay) : e !== jn;
  }
  eatDecimalEscape() {
    this._lastIntValue = 0;
    let e = this.currentCodePoint;
    if (e >= TO && e <= ti) {
      do
        this._lastIntValue = 10 * this._lastIntValue + (e - nn), this.advance();
      while ((e = this.currentCodePoint) >= nn && e <= ti);
      return true;
    }
    return false;
  }
  eatUnicodePropertyValueExpression() {
    const e = this.index;
    if (this.eatUnicodePropertyName() && this.eat(_o) && (this._lastKeyValue = this._lastStrValue, this.eatUnicodePropertyValue())) {
      if (this._lastValValue = this._lastStrValue, ty(this.ecmaVersion, this._lastKeyValue, this._lastValValue))
        return true;
      this.raise("Invalid property name");
    }
    if (this.rewind(e), this.eatLoneUnicodePropertyNameOrValue()) {
      const r = this._lastStrValue;
      if (ty(this.ecmaVersion, "General_Category", r))
        return this._lastKeyValue = "General_Category", this._lastValValue = r, true;
      if (CO(this.ecmaVersion, r))
        return this._lastKeyValue = r, this._lastValValue = "", true;
      this.raise("Invalid property name");
    }
    return false;
  }
  eatUnicodePropertyName() {
    for (this._lastStrValue = ""; ob(this.currentCodePoint); )
      this._lastStrValue += String.fromCodePoint(this.currentCodePoint), this.advance();
    return this._lastStrValue !== "";
  }
  eatUnicodePropertyValue() {
    for (this._lastStrValue = ""; cL(this.currentCodePoint); )
      this._lastStrValue += String.fromCodePoint(this.currentCodePoint), this.advance();
    return this._lastStrValue !== "";
  }
  eatLoneUnicodePropertyNameOrValue() {
    return this.eatUnicodePropertyValue();
  }
  eatHexEscapeSequence() {
    const e = this.index;
    if (this.eat(HO)) {
      if (this.eatFixedHexDigits(2))
        return true;
      (this._uFlag || this.strict) && this.raise("Invalid escape"), this.rewind(e);
    }
    return false;
  }
  eatDecimalDigits() {
    const e = this.index;
    for (this._lastIntValue = 0; La(this.currentCodePoint); )
      this._lastIntValue = 10 * this._lastIntValue + Oo(this.currentCodePoint), this.advance();
    return this.index !== e;
  }
  eatHexDigits() {
    const e = this.index;
    for (this._lastIntValue = 0; oy(this.currentCodePoint); )
      this._lastIntValue = 16 * this._lastIntValue + Oo(this.currentCodePoint), this.advance();
    return this.index !== e;
  }
  eatLegacyOctalEscapeSequence() {
    if (this.eatOctalDigit()) {
      const e = this._lastIntValue;
      if (this.eatOctalDigit()) {
        const r = this._lastIntValue;
        e <= 3 && this.eatOctalDigit() ? this._lastIntValue = e * 64 + r * 8 + this._lastIntValue : this._lastIntValue = e * 8 + r;
      } else
        this._lastIntValue = e;
      return true;
    }
    return false;
  }
  eatOctalDigit() {
    const e = this.currentCodePoint;
    return rL(e) ? (this.advance(), this._lastIntValue = e - nn, true) : (this._lastIntValue = 0, false);
  }
  eatFixedHexDigits(e) {
    const r = this.index;
    this._lastIntValue = 0;
    for (let s = 0; s < e; ++s) {
      const n = this.currentCodePoint;
      if (!oy(n))
        return this.rewind(r), false;
      this._lastIntValue = 16 * this._lastIntValue + Oo(n), this.advance();
    }
    return true;
  }
};
var pL = {};
var fL = {};
var hL = {};
var mL = class {
  constructor(e) {
    this._node = pL, this._flags = fL, this._backreferences = [], this._capturingGroups = [], this.source = "", this.strict = !!(e && e.strict), this.ecmaVersion = e && e.ecmaVersion || 2022;
  }
  get pattern() {
    if (this._node.type !== "Pattern")
      throw new Error("UnknownError");
    return this._node;
  }
  get flags() {
    if (this._flags.type !== "Flags")
      throw new Error("UnknownError");
    return this._flags;
  }
  onFlags(e, r, s, n, a, o, l, i, u) {
    this._flags = {
      type: "Flags",
      parent: null,
      start: e,
      end: r,
      raw: this.source.slice(e, r),
      global: s,
      ignoreCase: n,
      multiline: a,
      unicode: o,
      sticky: l,
      dotAll: i,
      hasIndices: u
    };
  }
  onPatternEnter(e) {
    this._node = {
      type: "Pattern",
      parent: null,
      start: e,
      end: e,
      raw: "",
      alternatives: []
    }, this._backreferences.length = 0, this._capturingGroups.length = 0;
  }
  onPatternLeave(e, r) {
    this._node.end = r, this._node.raw = this.source.slice(e, r);
    for (const s of this._backreferences) {
      const n = s.ref, a = typeof n == "number" ? this._capturingGroups[n - 1] : this._capturingGroups.find((o) => o.name === n);
      s.resolved = a, a.references.push(s);
    }
  }
  onAlternativeEnter(e) {
    const r = this._node;
    if (r.type !== "Assertion" && r.type !== "CapturingGroup" && r.type !== "Group" && r.type !== "Pattern")
      throw new Error("UnknownError");
    this._node = {
      type: "Alternative",
      parent: r,
      start: e,
      end: e,
      raw: "",
      elements: []
    }, r.alternatives.push(this._node);
  }
  onAlternativeLeave(e, r) {
    const s = this._node;
    if (s.type !== "Alternative")
      throw new Error("UnknownError");
    s.end = r, s.raw = this.source.slice(e, r), this._node = s.parent;
  }
  onGroupEnter(e) {
    const r = this._node;
    if (r.type !== "Alternative")
      throw new Error("UnknownError");
    this._node = {
      type: "Group",
      parent: r,
      start: e,
      end: e,
      raw: "",
      alternatives: []
    }, r.elements.push(this._node);
  }
  onGroupLeave(e, r) {
    const s = this._node;
    if (s.type !== "Group" || s.parent.type !== "Alternative")
      throw new Error("UnknownError");
    s.end = r, s.raw = this.source.slice(e, r), this._node = s.parent;
  }
  onCapturingGroupEnter(e, r) {
    const s = this._node;
    if (s.type !== "Alternative")
      throw new Error("UnknownError");
    this._node = {
      type: "CapturingGroup",
      parent: s,
      start: e,
      end: e,
      raw: "",
      name: r,
      alternatives: [],
      references: []
    }, s.elements.push(this._node), this._capturingGroups.push(this._node);
  }
  onCapturingGroupLeave(e, r) {
    const s = this._node;
    if (s.type !== "CapturingGroup" || s.parent.type !== "Alternative")
      throw new Error("UnknownError");
    s.end = r, s.raw = this.source.slice(e, r), this._node = s.parent;
  }
  onQuantifier(e, r, s, n, a) {
    const o = this._node;
    if (o.type !== "Alternative")
      throw new Error("UnknownError");
    const l = o.elements.pop();
    if (l == null || l.type === "Quantifier" || l.type === "Assertion" && l.kind !== "lookahead")
      throw new Error("UnknownError");
    const i = {
      type: "Quantifier",
      parent: o,
      start: l.start,
      end: r,
      raw: this.source.slice(l.start, r),
      min: s,
      max: n,
      greedy: a,
      element: l
    };
    o.elements.push(i), l.parent = i;
  }
  onLookaroundAssertionEnter(e, r, s) {
    const n = this._node;
    if (n.type !== "Alternative")
      throw new Error("UnknownError");
    const a = this._node = {
      type: "Assertion",
      parent: n,
      start: e,
      end: e,
      raw: "",
      kind: r,
      negate: s,
      alternatives: []
    };
    n.elements.push(a);
  }
  onLookaroundAssertionLeave(e, r) {
    const s = this._node;
    if (s.type !== "Assertion" || s.parent.type !== "Alternative")
      throw new Error("UnknownError");
    s.end = r, s.raw = this.source.slice(e, r), this._node = s.parent;
  }
  onEdgeAssertion(e, r, s) {
    const n = this._node;
    if (n.type !== "Alternative")
      throw new Error("UnknownError");
    n.elements.push({
      type: "Assertion",
      parent: n,
      start: e,
      end: r,
      raw: this.source.slice(e, r),
      kind: s
    });
  }
  onWordBoundaryAssertion(e, r, s, n) {
    const a = this._node;
    if (a.type !== "Alternative")
      throw new Error("UnknownError");
    a.elements.push({
      type: "Assertion",
      parent: a,
      start: e,
      end: r,
      raw: this.source.slice(e, r),
      kind: s,
      negate: n
    });
  }
  onAnyCharacterSet(e, r, s) {
    const n = this._node;
    if (n.type !== "Alternative")
      throw new Error("UnknownError");
    n.elements.push({
      type: "CharacterSet",
      parent: n,
      start: e,
      end: r,
      raw: this.source.slice(e, r),
      kind: s
    });
  }
  onEscapeCharacterSet(e, r, s, n) {
    const a = this._node;
    if (a.type !== "Alternative" && a.type !== "CharacterClass")
      throw new Error("UnknownError");
    a.elements.push({
      type: "CharacterSet",
      parent: a,
      start: e,
      end: r,
      raw: this.source.slice(e, r),
      kind: s,
      negate: n
    });
  }
  onUnicodePropertyCharacterSet(e, r, s, n, a, o) {
    const l = this._node;
    if (l.type !== "Alternative" && l.type !== "CharacterClass")
      throw new Error("UnknownError");
    l.elements.push({
      type: "CharacterSet",
      parent: l,
      start: e,
      end: r,
      raw: this.source.slice(e, r),
      kind: s,
      key: n,
      value: a,
      negate: o
    });
  }
  onCharacter(e, r, s) {
    const n = this._node;
    if (n.type !== "Alternative" && n.type !== "CharacterClass")
      throw new Error("UnknownError");
    n.elements.push({
      type: "Character",
      parent: n,
      start: e,
      end: r,
      raw: this.source.slice(e, r),
      value: s
    });
  }
  onBackreference(e, r, s) {
    const n = this._node;
    if (n.type !== "Alternative")
      throw new Error("UnknownError");
    const a = {
      type: "Backreference",
      parent: n,
      start: e,
      end: r,
      raw: this.source.slice(e, r),
      ref: s,
      resolved: hL
    };
    n.elements.push(a), this._backreferences.push(a);
  }
  onCharacterClassEnter(e, r) {
    const s = this._node;
    if (s.type !== "Alternative")
      throw new Error("UnknownError");
    this._node = {
      type: "CharacterClass",
      parent: s,
      start: e,
      end: e,
      raw: "",
      negate: r,
      elements: []
    }, s.elements.push(this._node);
  }
  onCharacterClassLeave(e, r) {
    const s = this._node;
    if (s.type !== "CharacterClass" || s.parent.type !== "Alternative")
      throw new Error("UnknownError");
    s.end = r, s.raw = this.source.slice(e, r), this._node = s.parent;
  }
  onCharacterClassRange(e, r) {
    const s = this._node;
    if (s.type !== "CharacterClass")
      throw new Error("UnknownError");
    const n = s.elements, a = n.pop(), o = n.pop(), l = n.pop();
    if (!l || !a || !o || l.type !== "Character" || a.type !== "Character" || o.type !== "Character" || o.value !== Cs)
      throw new Error("UnknownError");
    const i = {
      type: "CharacterClassRange",
      parent: s,
      start: e,
      end: r,
      raw: this.source.slice(e, r),
      min: l,
      max: a
    };
    l.parent = i, a.parent = i, n.push(i);
  }
};
var lb = class {
  constructor(e) {
    this._state = new mL(e), this._validator = new Ku(this._state);
  }
  parseLiteral(e, r = 0, s = e.length) {
    this._state.source = e, this._validator.validateLiteral(e, r, s);
    const n = this._state.pattern, a = this._state.flags, o = {
      type: "RegExpLiteral",
      parent: null,
      start: r,
      end: s,
      raw: e,
      pattern: n,
      flags: a
    };
    return n.parent = o, a.parent = o, o;
  }
  parseFlags(e, r = 0, s = e.length) {
    return this._state.source = e, this._validator.validateFlags(e, r, s), this._state.flags;
  }
  parsePattern(e, r = 0, s = e.length, n = false) {
    return this._state.source = e, this._validator.validatePattern(e, r, s, n), this._state.pattern;
  }
};
var dL = class {
  constructor(e) {
    this._handlers = e;
  }
  visit(e) {
    switch (e.type) {
      case "Alternative":
        this.visitAlternative(e);
        break;
      case "Assertion":
        this.visitAssertion(e);
        break;
      case "Backreference":
        this.visitBackreference(e);
        break;
      case "CapturingGroup":
        this.visitCapturingGroup(e);
        break;
      case "Character":
        this.visitCharacter(e);
        break;
      case "CharacterClass":
        this.visitCharacterClass(e);
        break;
      case "CharacterClassRange":
        this.visitCharacterClassRange(e);
        break;
      case "CharacterSet":
        this.visitCharacterSet(e);
        break;
      case "Flags":
        this.visitFlags(e);
        break;
      case "Group":
        this.visitGroup(e);
        break;
      case "Pattern":
        this.visitPattern(e);
        break;
      case "Quantifier":
        this.visitQuantifier(e);
        break;
      case "RegExpLiteral":
        this.visitRegExpLiteral(e);
        break;
      default:
        throw new Error(`Unknown type: ${e.type}`);
    }
  }
  visitAlternative(e) {
    this._handlers.onAlternativeEnter && this._handlers.onAlternativeEnter(e), e.elements.forEach(this.visit, this), this._handlers.onAlternativeLeave && this._handlers.onAlternativeLeave(e);
  }
  visitAssertion(e) {
    this._handlers.onAssertionEnter && this._handlers.onAssertionEnter(e), (e.kind === "lookahead" || e.kind === "lookbehind") && e.alternatives.forEach(this.visit, this), this._handlers.onAssertionLeave && this._handlers.onAssertionLeave(e);
  }
  visitBackreference(e) {
    this._handlers.onBackreferenceEnter && this._handlers.onBackreferenceEnter(e), this._handlers.onBackreferenceLeave && this._handlers.onBackreferenceLeave(e);
  }
  visitCapturingGroup(e) {
    this._handlers.onCapturingGroupEnter && this._handlers.onCapturingGroupEnter(e), e.alternatives.forEach(this.visit, this), this._handlers.onCapturingGroupLeave && this._handlers.onCapturingGroupLeave(e);
  }
  visitCharacter(e) {
    this._handlers.onCharacterEnter && this._handlers.onCharacterEnter(e), this._handlers.onCharacterLeave && this._handlers.onCharacterLeave(e);
  }
  visitCharacterClass(e) {
    this._handlers.onCharacterClassEnter && this._handlers.onCharacterClassEnter(e), e.elements.forEach(this.visit, this), this._handlers.onCharacterClassLeave && this._handlers.onCharacterClassLeave(e);
  }
  visitCharacterClassRange(e) {
    this._handlers.onCharacterClassRangeEnter && this._handlers.onCharacterClassRangeEnter(e), this.visitCharacter(e.min), this.visitCharacter(e.max), this._handlers.onCharacterClassRangeLeave && this._handlers.onCharacterClassRangeLeave(e);
  }
  visitCharacterSet(e) {
    this._handlers.onCharacterSetEnter && this._handlers.onCharacterSetEnter(e), this._handlers.onCharacterSetLeave && this._handlers.onCharacterSetLeave(e);
  }
  visitFlags(e) {
    this._handlers.onFlagsEnter && this._handlers.onFlagsEnter(e), this._handlers.onFlagsLeave && this._handlers.onFlagsLeave(e);
  }
  visitGroup(e) {
    this._handlers.onGroupEnter && this._handlers.onGroupEnter(e), e.alternatives.forEach(this.visit, this), this._handlers.onGroupLeave && this._handlers.onGroupLeave(e);
  }
  visitPattern(e) {
    this._handlers.onPatternEnter && this._handlers.onPatternEnter(e), e.alternatives.forEach(this.visit, this), this._handlers.onPatternLeave && this._handlers.onPatternLeave(e);
  }
  visitQuantifier(e) {
    this._handlers.onQuantifierEnter && this._handlers.onQuantifierEnter(e), this.visit(e.element), this._handlers.onQuantifierLeave && this._handlers.onQuantifierLeave(e);
  }
  visitRegExpLiteral(e) {
    this._handlers.onRegExpLiteralEnter && this._handlers.onRegExpLiteralEnter(e), this.visitPattern(e.pattern), this.visitFlags(e.flags), this._handlers.onRegExpLiteralLeave && this._handlers.onRegExpLiteralLeave(e);
  }
};
function gL(t4, e) {
  return new lb(e).parseLiteral(String(t4));
}
function yL(t4, e) {
  return new Ku(e).validateLiteral(t4);
}
function xL(t4, e) {
  new dL(e).visit(t4);
}
cn.AST = mO;
cn.RegExpParser = lb;
cn.RegExpValidator = Ku;
cn.parseRegExpLiteral = gL;
cn.validateRegExpLiteral = yL;
cn.visitRegExpAST = xL;
function cy(t4) {
  return Array.isArray(t4) ? t4 : [t4];
}
var vL = /^\s+$/;
var EL = /^\\!/;
var bL = /^\\#/;
var jo = "/";
var py = typeof Symbol < "u" ? Symbol.for("node-ignore") : "node-ignore";
var CL = (t4, e, r) => Object.defineProperty(t4, e, { value: r });
var SL = /([0-z])-([0-z])/g;
var AL = (t4) => t4.replace(
  SL,
  (e, r, s) => r.charCodeAt(0) <= s.charCodeAt(0) ? e : ""
);
var ub = [
  // > Trailing spaces are ignored unless they are quoted with backslash ("\")
  [
    // (a\ ) -> (a )
    // (a  ) -> (a)
    // (a \ ) -> (a  )
    /\\?\s+$/,
    (t4) => t4.indexOf("\\") === 0 ? " " : ""
  ],
  // replace (\ ) with ' '
  [
    /\\\s/g,
    () => " "
  ],
  // Escape metacharacters
  // which is written down by users but means special for regular expressions.
  // > There are 12 characters with special meanings:
  // > - the backslash \,
  // > - the caret ^,
  // > - the dollar sign $,
  // > - the period or dot .,
  // > - the vertical bar or pipe symbol |,
  // > - the question mark ?,
  // > - the asterisk or star *,
  // > - the plus sign +,
  // > - the opening parenthesis (,
  // > - the closing parenthesis ),
  // > - and the opening square bracket [,
  // > - the opening curly brace {,
  // > These special characters are often called "metacharacters".
  [
    /[\\^$.|*+(){]/g,
    (t4) => `\\${t4}`
  ],
  [
    // > [abc] matches any character inside the brackets
    // >    (in this case a, b, or c);
    /\[([^\]/]*)($|\])/g,
    (t4, e, r) => r === "]" ? `[${AL(e)}]` : `\\${t4}`
  ],
  [
    // > a question mark (?) matches a single character
    /(?!\\)\?/g,
    () => "[^/]"
  ],
  // leading slash
  [
    // > A leading slash matches the beginning of the pathname.
    // > For example, "/*.c" matches "cat-file.c" but not "mozilla-sha1/sha1.c".
    // A leading slash matches the beginning of the pathname
    /^\//,
    () => "^"
  ],
  // replace special metacharacter slash after the leading slash
  [
    /\//g,
    () => "\\/"
  ],
  [
    // > A leading "**" followed by a slash means match in all directories.
    // > For example, "**/foo" matches file or directory "foo" anywhere,
    // > the same as pattern "foo".
    // > "**/foo/bar" matches file or directory "bar" anywhere that is directly
    // >   under directory "foo".
    // Notice that the '*'s have been replaced as '\\*'
    /^\^*\\\*\\\*\\\//,
    // '**/foo' <-> 'foo'
    () => "^(?:.*\\/)?"
  ]
];
var cb = [
  // starting
  [
    // there will be no leading '/'
    //   (which has been replaced by section "leading slash")
    // If starts with '**', adding a '^' to the regular expression also works
    /^(?=[^^])/,
    function() {
      return /\/(?!$)/.test(this) ? "^" : "(?:^|\\/)";
    }
  ],
  // two globstars
  [
    // Use lookahead assertions so that we could match more than one `'/**'`
    /\\\/\\\*\\\*(?=\\\/|$)/g,
    // Zero, one or several directories
    // should not use '*', or it will be replaced by the next replacer
    // Check if it is not the last `'/**'`
    (t4, e, r) => e + 6 < r.length ? "(?:\\/[^\\/]+)*" : "\\/.+"
  ],
  // intermediate wildcards
  [
    // Never replace escaped '*'
    // ignore rule '\*' will match the path '*'
    // 'abc.*/' -> go
    // 'abc.*'  -> skip this rule
    /(^|[^\\]+)\\\*(?=.+)/g,
    // '*.js' matches '.js'
    // '*.js' doesn't match 'abc'
    (t4, e) => `${e}[^\\/]*`
  ],
  // trailing wildcard
  [
    /(\^|\\\/)?\\\*$/,
    (t4, e) => `${e ? `${e}[^/]+` : "[^/]*"}(?=$|\\/$)`
  ],
  [
    // unescape
    /\\\\\\/g,
    () => "\\"
  ]
];
var DL = [
  ...ub,
  // 'f'
  // matches
  // - /f(end)
  // - /f/
  // - (start)f(end)
  // - (start)f/
  // doesn't match
  // - oof
  // - foo
  // pseudo:
  // -> (^|/)f(/|$)
  // ending
  [
    // 'js' will not match 'js.'
    // 'ab' will not match 'abc'
    /(?:[^*/])$/,
    // 'js*' will not match 'a.js'
    // 'js/' will not match 'a.js'
    // 'js' will match 'a.js' and 'a.js/'
    (t4) => `${t4}(?=$|\\/)`
  ],
  ...cb
];
var wL = [
  ...ub,
  // #24, #38
  // The MISSING rule of [gitignore docs](https://git-scm.com/docs/gitignore)
  // A negative pattern without a trailing wildcard should not
  // re-include the things inside that directory.
  // eg:
  // ['node_modules/*', '!node_modules']
  // should ignore `node_modules/a.js`
  [
    /(?:[^*])$/,
    (t4) => `${t4}(?=$|\\/$)`
  ],
  ...cb
];
var fy = /* @__PURE__ */ Object.create(null);
var kL = (t4, e, r) => {
  const s = fy[t4];
  if (s)
    return s;
  const a = (e ? wL : DL).reduce(
    (o, l) => o.replace(l[0], l[1].bind(t4)),
    t4
  );
  return fy[t4] = r ? new RegExp(a, "i") : new RegExp(a);
};
var TL = (t4) => t4 && typeof t4 == "string" && !vL.test(t4) && t4.indexOf("#") !== 0;
var FL = (t4, e) => {
  const r = t4;
  let s = false;
  t4.indexOf("!") === 0 && (s = true, t4 = t4.substr(1)), t4 = t4.replace(EL, "!").replace(bL, "#");
  const n = kL(t4, s, e);
  return {
    origin: r,
    pattern: t4,
    negative: s,
    regex: n
  };
};
var Fl = class {
  constructor({
    ignorecase: e = true
  } = {}) {
    this._rules = [], this._ignorecase = e, CL(this, py, true), this._initCache();
  }
  _initCache() {
    this._cache = /* @__PURE__ */ Object.create(null);
  }
  // @param {Array.<string>|string|Ignore} pattern
  add(e) {
    return this._added = false, typeof e == "string" && (e = e.split(/\r?\n/g)), cy(e).forEach(this._addPattern, this), this._added && this._initCache(), this;
  }
  // legacy
  addPattern(e) {
    return this.add(e);
  }
  _addPattern(e) {
    if (e && e[py]) {
      this._rules = this._rules.concat(e._rules), this._added = true;
      return;
    }
    if (TL(e)) {
      const r = FL(e, this._ignorecase);
      this._added = true, this._rules.push(r);
    }
  }
  filter(e) {
    return cy(e).filter((r) => this._filter(r));
  }
  createFilter() {
    return (e) => this._filter(e);
  }
  ignores(e) {
    return !this._filter(e);
  }
  // @returns `Boolean` true if the `path` is NOT ignored
  _filter(e, r) {
    return e ? e in this._cache ? this._cache[e] : (r || (r = e.split(jo)), r.pop(), this._cache[e] = r.length ? this._filter(r.join(jo) + jo, r) && this._test(e) : this._test(e)) : false;
  }
  // @returns {Boolean} true if a file is NOT ignored
  _test(e) {
    let r = 0;
    return this._rules.forEach((s) => {
      r ^ s.negative || (r = s.negative ^ s.regex.test(e));
    }), !r;
  }
};
if (
  // Detect `process` so that it can run in browsers.
  typeof Ze < "u" && (Ze.env && Ze.env.IGNORE_TEST_WIN32 || Ze.platform === "win32")
) {
  const t4 = Fl.prototype._filter, e = (r) => /^\\\\\?\\/.test(r) || /[^\x00-\x80]+/.test(r) ? r : r.replace(/\\/g, "/");
  Fl.prototype._filter = function(s, n) {
    return s = e(s), t4.call(this, s, n);
  };
}
var PL = (t4) => new Fl(t4);
var pb = { exports: {} };
var hy = function(t4, e) {
  var r, s, n = 1, a = 0, o = 0, l = String.alphabet;
  function i(u, c, f) {
    if (f) {
      for (r = c; f = i(u, r), f < 76 && f > 65; )
        ++r;
      return +u.slice(c - 1, r);
    }
    return f = l && l.indexOf(u.charAt(c)), f > -1 ? f + 76 : (f = u.charCodeAt(c) || 0, f < 45 || f > 127 ? f : f < 46 ? 65 : f < 48 ? f - 1 : f < 58 ? f + 18 : f < 65 ? f - 11 : f < 91 ? f + 11 : f < 97 ? f - 37 : f < 123 ? f + 5 : f - 63);
  }
  if ((t4 += "") != (e += "")) {
    for (; n; )
      if (s = i(t4, a++), n = i(e, o++), s < 76 && n < 76 && s > 66 && n > 66 && (s = i(t4, a, a), n = i(e, o, a = r), o = r), s != n)
        return s < n ? -1 : 1;
  }
  return 0;
};
try {
  pb.exports = hy;
} catch {
  String.naturalCompare = hy;
}
var fb = {};
var ws = {};
var Kn = {};
var IL = "doctrine";
var _L = "JSDoc parser";
var BL = "https://github.com/eslint/doctrine";
var OL = "lib/doctrine.js";
var LL = "3.0.0";
var RL = {
  node: ">=6.0.0"
};
var NL = {
  lib: "./lib"
};
var jL = [
  "lib"
];
var ML = [
  {
    name: "Nicholas C. Zakas",
    email: "nicholas+npm@nczconsulting.com",
    web: "https://www.nczonline.net"
  },
  {
    name: "Yusuke Suzuki",
    email: "utatane.tea@gmail.com",
    web: "https://github.com/Constellation"
  }
];
var $L = "eslint/doctrine";
var VL = {
  coveralls: "^3.0.1",
  dateformat: "^1.0.11",
  eslint: "^1.10.3",
  "eslint-release": "^1.0.0",
  linefix: "^0.1.1",
  mocha: "^3.4.2",
  "npm-license": "^0.3.1",
  nyc: "^10.3.2",
  semver: "^5.0.3",
  shelljs: "^0.5.3",
  "shelljs-nodecli": "^0.1.1",
  should: "^5.0.1"
};
var UL = "Apache-2.0";
var qL = {
  pretest: "npm run lint",
  test: "nyc mocha",
  coveralls: "nyc report --reporter=text-lcov | coveralls",
  lint: "eslint lib/",
  "generate-release": "eslint-generate-release",
  "generate-alpharelease": "eslint-generate-prerelease alpha",
  "generate-betarelease": "eslint-generate-prerelease beta",
  "generate-rcrelease": "eslint-generate-prerelease rc",
  "publish-release": "eslint-publish-release"
};
var WL = {
  esutils: "^2.0.2"
};
var zL = {
  name: IL,
  description: _L,
  homepage: BL,
  main: OL,
  version: LL,
  engines: RL,
  directories: NL,
  files: jL,
  maintainers: ML,
  repository: $L,
  devDependencies: VL,
  license: UL,
  scripts: qL,
  dependencies: WL
};
(function() {
  var t4;
  t4 = zL.version, Kn.VERSION = t4;
  function e(s) {
    this.name = "DoctrineError", this.message = s;
  }
  e.prototype = function() {
    var s = function() {
    };
    return s.prototype = Error.prototype, new s();
  }(), e.prototype.constructor = e, Kn.DoctrineError = e;
  function r(s) {
    throw new e(s);
  }
  Kn.throwError = r, Kn.assert = os;
})();
(function() {
  var t4, e, r, s, n, a, o, l, i, u, c, f;
  i = ts, u = Kn, t4 = {
    NullableLiteral: "NullableLiteral",
    AllLiteral: "AllLiteral",
    NullLiteral: "NullLiteral",
    UndefinedLiteral: "UndefinedLiteral",
    VoidLiteral: "VoidLiteral",
    UnionType: "UnionType",
    ArrayType: "ArrayType",
    RecordType: "RecordType",
    FieldType: "FieldType",
    FunctionType: "FunctionType",
    ParameterType: "ParameterType",
    RestType: "RestType",
    NonNullableType: "NonNullableType",
    OptionalType: "OptionalType",
    NullableType: "NullableType",
    NameExpression: "NameExpression",
    TypeApplication: "TypeApplication",
    StringLiteralType: "StringLiteralType",
    NumericLiteralType: "NumericLiteralType",
    BooleanLiteralType: "BooleanLiteralType"
  }, e = {
    ILLEGAL: 0,
    // ILLEGAL
    DOT_LT: 1,
    // .<
    REST: 2,
    // ...
    LT: 3,
    // <
    GT: 4,
    // >
    LPAREN: 5,
    // (
    RPAREN: 6,
    // )
    LBRACE: 7,
    // {
    RBRACE: 8,
    // }
    LBRACK: 9,
    // [
    RBRACK: 10,
    // ]
    COMMA: 11,
    // ,
    COLON: 12,
    // :
    STAR: 13,
    // *
    PIPE: 14,
    // |
    QUESTION: 15,
    // ?
    BANG: 16,
    // !
    EQUAL: 17,
    // =
    NAME: 18,
    // name token
    STRING: 19,
    // string
    NUMBER: 20,
    // number
    EOF: 21
  };
  function h(H) {
    return "><(){}[],:*|?!=".indexOf(String.fromCharCode(H)) === -1 && !i.code.isWhiteSpace(H) && !i.code.isLineTerminator(H);
  }
  function p(H, Q, ge, ae) {
    this._previous = H, this._index = Q, this._token = ge, this._value = ae;
  }
  p.prototype.restore = function() {
    a = this._previous, n = this._index, o = this._token, l = this._value;
  }, p.save = function() {
    return new p(a, n, o, l);
  };
  function m(H, Q) {
    return f && (H.range = [Q[0] + c, Q[1] + c]), H;
  }
  function d() {
    var H = r.charAt(n);
    return n += 1, H;
  }
  function g(H) {
    var Q, ge, ae, ee = 0;
    for (ge = H === "u" ? 4 : 2, Q = 0; Q < ge; ++Q)
      if (n < s && i.code.isHexDigit(r.charCodeAt(n)))
        ae = d(), ee = ee * 16 + "0123456789abcdef".indexOf(ae.toLowerCase());
      else
        return "";
    return String.fromCharCode(ee);
  }
  function y() {
    var H = "", Q, ge, ae, ee, he;
    for (Q = r.charAt(n), ++n; n < s; )
      if (ge = d(), ge === Q) {
        Q = "";
        break;
      } else if (ge === "\\")
        if (ge = d(), i.code.isLineTerminator(ge.charCodeAt(0)))
          ge === "\r" && r.charCodeAt(n) === 10 && ++n;
        else
          switch (ge) {
            case "n":
              H += `
`;
              break;
            case "r":
              H += "\r";
              break;
            case "t":
              H += "	";
              break;
            case "u":
            case "x":
              he = n, ee = g(ge), ee ? H += ee : (n = he, H += ge);
              break;
            case "b":
              H += "\b";
              break;
            case "f":
              H += "\f";
              break;
            case "v":
              H += "\v";
              break;
            default:
              i.code.isOctalDigit(ge.charCodeAt(0)) ? (ae = "01234567".indexOf(ge), n < s && i.code.isOctalDigit(r.charCodeAt(n)) && (ae = ae * 8 + "01234567".indexOf(d()), "0123".indexOf(ge) >= 0 && n < s && i.code.isOctalDigit(r.charCodeAt(n)) && (ae = ae * 8 + "01234567".indexOf(d()))), H += String.fromCharCode(ae)) : H += ge;
              break;
          }
      else {
        if (i.code.isLineTerminator(ge.charCodeAt(0)))
          break;
        H += ge;
      }
    return Q !== "" && u.throwError("unexpected quote"), l = H, e.STRING;
  }
  function x() {
    var H, Q;
    if (H = "", Q = r.charCodeAt(n), Q !== 46) {
      if (H = d(), Q = r.charCodeAt(n), H === "0") {
        if (Q === 120 || Q === 88) {
          for (H += d(); n < s && (Q = r.charCodeAt(n), !!i.code.isHexDigit(Q)); )
            H += d();
          return H.length <= 2 && u.throwError("unexpected token"), n < s && (Q = r.charCodeAt(n), i.code.isIdentifierStartES5(Q) && u.throwError("unexpected token")), l = parseInt(H, 16), e.NUMBER;
        }
        if (i.code.isOctalDigit(Q)) {
          for (H += d(); n < s && (Q = r.charCodeAt(n), !!i.code.isOctalDigit(Q)); )
            H += d();
          return n < s && (Q = r.charCodeAt(n), (i.code.isIdentifierStartES5(Q) || i.code.isDecimalDigit(Q)) && u.throwError("unexpected token")), l = parseInt(H, 8), e.NUMBER;
        }
        i.code.isDecimalDigit(Q) && u.throwError("unexpected token");
      }
      for (; n < s && (Q = r.charCodeAt(n), !!i.code.isDecimalDigit(Q)); )
        H += d();
    }
    if (Q === 46)
      for (H += d(); n < s && (Q = r.charCodeAt(n), !!i.code.isDecimalDigit(Q)); )
        H += d();
    if (Q === 101 || Q === 69)
      if (H += d(), Q = r.charCodeAt(n), (Q === 43 || Q === 45) && (H += d()), Q = r.charCodeAt(n), i.code.isDecimalDigit(Q))
        for (H += d(); n < s && (Q = r.charCodeAt(n), !!i.code.isDecimalDigit(Q)); )
          H += d();
      else
        u.throwError("unexpected token");
    return n < s && (Q = r.charCodeAt(n), i.code.isIdentifierStartES5(Q) && u.throwError("unexpected token")), l = parseFloat(H), e.NUMBER;
  }
  function A() {
    var H, Q;
    for (l = d(); n < s && h(r.charCodeAt(n)); ) {
      if (H = r.charCodeAt(n), H === 46) {
        if (n + 1 >= s)
          return e.ILLEGAL;
        if (Q = r.charCodeAt(n + 1), Q === 60)
          break;
      }
      l += d();
    }
    return e.NAME;
  }
  function b() {
    var H;
    for (a = n; n < s && i.code.isWhiteSpace(r.charCodeAt(n)); )
      d();
    if (n >= s)
      return o = e.EOF, o;
    switch (H = r.charCodeAt(n), H) {
      case 39:
      case 34:
        return o = y(), o;
      case 58:
        return d(), o = e.COLON, o;
      case 44:
        return d(), o = e.COMMA, o;
      case 40:
        return d(), o = e.LPAREN, o;
      case 41:
        return d(), o = e.RPAREN, o;
      case 91:
        return d(), o = e.LBRACK, o;
      case 93:
        return d(), o = e.RBRACK, o;
      case 123:
        return d(), o = e.LBRACE, o;
      case 125:
        return d(), o = e.RBRACE, o;
      case 46:
        if (n + 1 < s) {
          if (H = r.charCodeAt(n + 1), H === 60)
            return d(), d(), o = e.DOT_LT, o;
          if (H === 46 && n + 2 < s && r.charCodeAt(n + 2) === 46)
            return d(), d(), d(), o = e.REST, o;
          if (i.code.isDecimalDigit(H))
            return o = x(), o;
        }
        return o = e.ILLEGAL, o;
      case 60:
        return d(), o = e.LT, o;
      case 62:
        return d(), o = e.GT, o;
      case 42:
        return d(), o = e.STAR, o;
      case 124:
        return d(), o = e.PIPE, o;
      case 63:
        return d(), o = e.QUESTION, o;
      case 33:
        return d(), o = e.BANG, o;
      case 61:
        return d(), o = e.EQUAL, o;
      case 45:
        return o = x(), o;
      default:
        return i.code.isDecimalDigit(H) ? (o = x(), o) : (u.assert(h(H)), o = A(), o);
    }
  }
  function v(H, Q) {
    u.assert(o === H, Q || "consumed token not matched"), b();
  }
  function C(H, Q) {
    o !== H && u.throwError(Q || "unexpected token"), b();
  }
  function T() {
    var H, Q = n - 1;
    if (v(e.LPAREN, "UnionType should start with ("), H = [], o !== e.RPAREN)
      for (; H.push(te()), o !== e.RPAREN; )
        C(e.PIPE);
    return v(e.RPAREN, "UnionType should end with )"), m({
      type: t4.UnionType,
      elements: H
    }, [Q, a]);
  }
  function w() {
    var H, Q = n - 1, ge;
    for (v(e.LBRACK, "ArrayType should start with ["), H = []; o !== e.RBRACK; ) {
      if (o === e.REST) {
        ge = n - 3, v(e.REST), H.push(m({
          type: t4.RestType,
          expression: te()
        }, [ge, a]));
        break;
      } else
        H.push(te());
      o !== e.RBRACK && C(e.COMMA);
    }
    return C(e.RBRACK), m({
      type: t4.ArrayType,
      elements: H
    }, [Q, a]);
  }
  function B() {
    var H = l;
    if (o === e.NAME || o === e.STRING)
      return b(), H;
    if (o === e.NUMBER)
      return v(e.NUMBER), String(H);
    u.throwError("unexpected token");
  }
  function I() {
    var H, Q = a;
    return H = B(), o === e.COLON ? (v(e.COLON), m({
      type: t4.FieldType,
      key: H,
      value: te()
    }, [Q, a])) : m({
      type: t4.FieldType,
      key: H,
      value: null
    }, [Q, a]);
  }
  function _() {
    var H, Q = n - 1, ge;
    if (v(e.LBRACE, "RecordType should start with {"), H = [], o === e.COMMA)
      v(e.COMMA);
    else
      for (; o !== e.RBRACE; )
        H.push(I()), o !== e.RBRACE && C(e.COMMA);
    return ge = n, C(e.RBRACE), m({
      type: t4.RecordType,
      fields: H
    }, [Q, ge]);
  }
  function S() {
    var H = l, Q = n - H.length;
    return C(e.NAME), o === e.COLON && (H === "module" || H === "external" || H === "event") && (v(e.COLON), H += ":" + l, C(e.NAME)), m({
      type: t4.NameExpression,
      name: H
    }, [Q, a]);
  }
  function F() {
    var H = [];
    for (H.push(se()); o === e.COMMA; )
      v(e.COMMA), H.push(se());
    return H;
  }
  function N() {
    var H, Q, ge = n - l.length;
    return H = S(), o === e.DOT_LT || o === e.LT ? (b(), Q = F(), C(e.GT), m({
      type: t4.TypeApplication,
      expression: H,
      applications: Q
    }, [ge, a])) : H;
  }
  function k() {
    return v(e.COLON, "ResultType should start with :"), o === e.NAME && l === "void" ? (v(e.NAME), {
      type: t4.VoidLiteral
    }) : te();
  }
  function j() {
    for (var H = [], Q = false, ge, ae = false, ee, he = n - 3, R; o !== e.RPAREN; )
      o === e.REST && (v(e.REST), ae = true), ee = a, ge = te(), ge.type === t4.NameExpression && o === e.COLON && (R = a - ge.name.length, v(e.COLON), ge = m({
        type: t4.ParameterType,
        name: ge.name,
        expression: te()
      }, [R, a])), o === e.EQUAL ? (v(e.EQUAL), ge = m({
        type: t4.OptionalType,
        expression: ge
      }, [ee, a]), Q = true) : Q && u.throwError("unexpected token"), ae && (ge = m({
        type: t4.RestType,
        expression: ge
      }, [he, a])), H.push(ge), o !== e.RPAREN && C(e.COMMA);
    return H;
  }
  function O() {
    var H, Q, ge, ae, ee, he = n - l.length;
    return u.assert(o === e.NAME && l === "function", "FunctionType should start with 'function'"), v(e.NAME), C(e.LPAREN), H = false, ge = [], Q = null, o !== e.RPAREN && (o === e.NAME && (l === "this" || l === "new") ? (H = l === "new", v(e.NAME), C(e.COLON), Q = N(), o === e.COMMA && (v(e.COMMA), ge = j())) : ge = j()), C(e.RPAREN), ae = null, o === e.COLON && (ae = k()), ee = m({
      type: t4.FunctionType,
      params: ge,
      result: ae
    }, [he, a]), Q && (ee.this = Q, H && (ee.new = true)), ee;
  }
  function z() {
    var H, Q;
    switch (o) {
      case e.STAR:
        return v(e.STAR), m({
          type: t4.AllLiteral
        }, [a - 1, a]);
      case e.LPAREN:
        return T();
      case e.LBRACK:
        return w();
      case e.LBRACE:
        return _();
      case e.NAME:
        if (Q = n - l.length, l === "null")
          return v(e.NAME), m({
            type: t4.NullLiteral
          }, [Q, a]);
        if (l === "undefined")
          return v(e.NAME), m({
            type: t4.UndefinedLiteral
          }, [Q, a]);
        if (l === "true" || l === "false")
          return v(e.NAME), m({
            type: t4.BooleanLiteralType,
            value: l === "true"
          }, [Q, a]);
        if (H = p.save(), l === "function")
          try {
            return O();
          } catch {
            H.restore();
          }
        return N();
      case e.STRING:
        return b(), m({
          type: t4.StringLiteralType,
          value: l
        }, [a - l.length - 2, a]);
      case e.NUMBER:
        return b(), m({
          type: t4.NumericLiteralType,
          value: l
        }, [a - String(l).length, a]);
      default:
        u.throwError("unexpected token");
    }
  }
  function te() {
    var H, Q;
    return o === e.QUESTION ? (Q = n - 1, v(e.QUESTION), o === e.COMMA || o === e.EQUAL || o === e.RBRACE || o === e.RPAREN || o === e.PIPE || o === e.EOF || o === e.RBRACK || o === e.GT ? m({
      type: t4.NullableLiteral
    }, [Q, a]) : m({
      type: t4.NullableType,
      expression: z(),
      prefix: true
    }, [Q, a])) : o === e.BANG ? (Q = n - 1, v(e.BANG), m({
      type: t4.NonNullableType,
      expression: z(),
      prefix: true
    }, [Q, a])) : (Q = a, H = z(), o === e.BANG ? (v(e.BANG), m({
      type: t4.NonNullableType,
      expression: H,
      prefix: false
    }, [Q, a])) : o === e.QUESTION ? (v(e.QUESTION), m({
      type: t4.NullableType,
      expression: H,
      prefix: false
    }, [Q, a])) : o === e.LBRACK ? (v(e.LBRACK), C(e.RBRACK, "expected an array-style type declaration (" + l + "[])"), m({
      type: t4.TypeApplication,
      expression: m({
        type: t4.NameExpression,
        name: "Array"
      }, [Q, a]),
      applications: [H]
    }, [Q, a])) : H);
  }
  function se() {
    var H, Q;
    if (H = te(), o !== e.PIPE)
      return H;
    for (Q = [H], v(e.PIPE); Q.push(te()), o === e.PIPE; )
      v(e.PIPE);
    return m({
      type: t4.UnionType,
      elements: Q
    }, [0, n]);
  }
  function ye() {
    var H;
    return o === e.REST ? (v(e.REST), m({
      type: t4.RestType,
      expression: se()
    }, [0, n])) : (H = se(), o === e.EQUAL ? (v(e.EQUAL), m({
      type: t4.OptionalType,
      expression: H
    }, [0, n])) : H);
  }
  function Se(H, Q) {
    var ge;
    return r = H, s = r.length, n = 0, a = 0, f = Q && Q.range, c = Q && Q.startIndex || 0, b(), ge = se(), Q && Q.midstream ? {
      expression: ge,
      index: a
    } : (o !== e.EOF && u.throwError("not reach to EOF"), ge);
  }
  function xe(H, Q) {
    var ge;
    return r = H, s = r.length, n = 0, a = 0, f = Q && Q.range, c = Q && Q.startIndex || 0, b(), ge = ye(), Q && Q.midstream ? {
      expression: ge,
      index: a
    } : (o !== e.EOF && u.throwError("not reach to EOF"), ge);
  }
  function Ae(H, Q, ge) {
    var ae, ee, he;
    switch (H.type) {
      case t4.NullableLiteral:
        ae = "?";
        break;
      case t4.AllLiteral:
        ae = "*";
        break;
      case t4.NullLiteral:
        ae = "null";
        break;
      case t4.UndefinedLiteral:
        ae = "undefined";
        break;
      case t4.VoidLiteral:
        ae = "void";
        break;
      case t4.UnionType:
        for (ge ? ae = "" : ae = "(", ee = 0, he = H.elements.length; ee < he; ++ee)
          ae += Ae(H.elements[ee], Q), ee + 1 !== he && (ae += Q ? "|" : " | ");
        ge || (ae += ")");
        break;
      case t4.ArrayType:
        for (ae = "[", ee = 0, he = H.elements.length; ee < he; ++ee)
          ae += Ae(H.elements[ee], Q), ee + 1 !== he && (ae += Q ? "," : ", ");
        ae += "]";
        break;
      case t4.RecordType:
        for (ae = "{", ee = 0, he = H.fields.length; ee < he; ++ee)
          ae += Ae(H.fields[ee], Q), ee + 1 !== he && (ae += Q ? "," : ", ");
        ae += "}";
        break;
      case t4.FieldType:
        H.value ? ae = H.key + (Q ? ":" : ": ") + Ae(H.value, Q) : ae = H.key;
        break;
      case t4.FunctionType:
        for (ae = Q ? "function(" : "function (", H.this && (H.new ? ae += Q ? "new:" : "new: " : ae += Q ? "this:" : "this: ", ae += Ae(H.this, Q), H.params.length !== 0 && (ae += Q ? "," : ", ")), ee = 0, he = H.params.length; ee < he; ++ee)
          ae += Ae(H.params[ee], Q), ee + 1 !== he && (ae += Q ? "," : ", ");
        ae += ")", H.result && (ae += (Q ? ":" : ": ") + Ae(H.result, Q));
        break;
      case t4.ParameterType:
        ae = H.name + (Q ? ":" : ": ") + Ae(H.expression, Q);
        break;
      case t4.RestType:
        ae = "...", H.expression && (ae += Ae(H.expression, Q));
        break;
      case t4.NonNullableType:
        H.prefix ? ae = "!" + Ae(H.expression, Q) : ae = Ae(H.expression, Q) + "!";
        break;
      case t4.OptionalType:
        ae = Ae(H.expression, Q) + "=";
        break;
      case t4.NullableType:
        H.prefix ? ae = "?" + Ae(H.expression, Q) : ae = Ae(H.expression, Q) + "?";
        break;
      case t4.NameExpression:
        ae = H.name;
        break;
      case t4.TypeApplication:
        for (ae = Ae(H.expression, Q) + ".<", ee = 0, he = H.applications.length; ee < he; ++ee)
          ae += Ae(H.applications[ee], Q), ee + 1 !== he && (ae += Q ? "," : ", ");
        ae += ">";
        break;
      case t4.StringLiteralType:
        ae = '"' + H.value + '"';
        break;
      case t4.NumericLiteralType:
        ae = String(H.value);
        break;
      case t4.BooleanLiteralType:
        ae = String(H.value);
        break;
      default:
        u.throwError("Unknown type " + H.type);
    }
    return ae;
  }
  function _e(H, Q) {
    return Q == null && (Q = {}), Ae(H, Q.compact, Q.topLevel);
  }
  ws.parseType = Se, ws.parseParamType = xe, ws.stringify = _e, ws.Syntax = t4;
})();
(function(t4) {
  (function() {
    var e, r, s, n, a;
    n = ts, e = ws, r = Kn;
    function o(C, T, w) {
      return C.slice(T, w);
    }
    a = /* @__PURE__ */ function() {
      var C = Object.prototype.hasOwnProperty;
      return function(w, B) {
        return C.call(w, B);
      };
    }();
    function l(C) {
      var T = {}, w;
      for (w in C)
        C.hasOwnProperty(w) && (T[w] = C[w]);
      return T;
    }
    function i(C) {
      return C >= 97 && C <= 122 || C >= 65 && C <= 90 || C >= 48 && C <= 57;
    }
    function u(C) {
      return C === "param" || C === "argument" || C === "arg";
    }
    function c(C) {
      return C === "return" || C === "returns";
    }
    function f(C) {
      return C === "property" || C === "prop";
    }
    function h(C) {
      return u(C) || f(C) || C === "alias" || C === "this" || C === "mixes" || C === "requires";
    }
    function p(C) {
      return h(C) || C === "const" || C === "constant";
    }
    function m(C) {
      return f(C) || u(C);
    }
    function d(C) {
      return f(C) || u(C);
    }
    function g(C) {
      return u(C) || c(C) || C === "define" || C === "enum" || C === "implements" || C === "this" || C === "type" || C === "typedef" || f(C);
    }
    function y(C) {
      return g(C) || C === "throws" || C === "const" || C === "constant" || C === "namespace" || C === "member" || C === "var" || C === "module" || C === "constructor" || C === "class" || C === "extends" || C === "augments" || C === "public" || C === "private" || C === "protected";
    }
    var x = "[ \\f\\t\\v\\u00a0\\u1680\\u180e\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]", A = "(" + x + "*(?:\\*" + x + `?)?)(.+|[\r
\u2028\u2029])`;
    function b(C) {
      return C.replace(/^\/\*\*?/, "").replace(/\*\/$/, "").replace(new RegExp(A, "g"), "$2").replace(/\s*$/, "");
    }
    function v(C, T) {
      for (var w = C.replace(/^\/\*\*?/, ""), B = 0, I = new RegExp(A, "g"), _; _ = I.exec(w); )
        if (B += _[1].length, _.index + _[0].length > T + B)
          return T + B + C.length - w.length;
      return C.replace(/\*\/$/, "").replace(/\s*$/, "").length;
    }
    (function(C) {
      var T, w, B, I, _, S, F, N, k;
      function j() {
        var ae = _.charCodeAt(w);
        return w += 1, n.code.isLineTerminator(ae) && !(ae === 13 && _.charCodeAt(w) === 10) && (B += 1), String.fromCharCode(ae);
      }
      function O() {
        var ae = "";
        for (j(); w < I && i(_.charCodeAt(w)); )
          ae += j();
        return ae;
      }
      function z() {
        var ae, ee, he = w;
        for (ee = false; he < I; ) {
          if (ae = _.charCodeAt(he), n.code.isLineTerminator(ae) && !(ae === 13 && _.charCodeAt(he + 1) === 10))
            ee = true;
          else if (ee) {
            if (ae === 64)
              break;
            n.code.isWhiteSpace(ae) || (ee = false);
          }
          he += 1;
        }
        return he;
      }
      function te(ae, ee, he) {
        for (var R, D, U, ne, pe = false; w < ee; )
          if (R = _.charCodeAt(w), n.code.isWhiteSpace(R))
            j();
          else if (R === 123) {
            j();
            break;
          } else {
            pe = true;
            break;
          }
        if (pe)
          return null;
        for (D = 1, U = ""; w < ee; )
          if (R = _.charCodeAt(w), n.code.isLineTerminator(R))
            j();
          else {
            if (R === 125) {
              if (D -= 1, D === 0) {
                j();
                break;
              }
            } else
              R === 123 && (D += 1);
            U === "" && (ne = w), U += j();
          }
        return D !== 0 ? r.throwError("Braces are not balanced") : d(ae) ? e.parseParamType(U, { startIndex: Ae(ne), range: he }) : e.parseType(U, { startIndex: Ae(ne), range: he });
      }
      function se(ae) {
        var ee;
        if (!n.code.isIdentifierStartES5(_.charCodeAt(w)) && !_[w].match(/[0-9]/))
          return null;
        for (ee = j(); w < ae && n.code.isIdentifierPartES5(_.charCodeAt(w)); )
          ee += j();
        return ee;
      }
      function ye(ae) {
        for (; w < ae && (n.code.isWhiteSpace(_.charCodeAt(w)) || n.code.isLineTerminator(_.charCodeAt(w))); )
          j();
      }
      function Se(ae, ee, he) {
        var R = "", D, U;
        if (ye(ae), w >= ae)
          return null;
        if (_.charCodeAt(w) === 91)
          if (ee)
            D = true, R = j();
          else
            return null;
        if (R += se(ae), he)
          for (_.charCodeAt(w) === 58 && (R === "module" || R === "external" || R === "event") && (R += j(), R += se(ae)), _.charCodeAt(w) === 91 && _.charCodeAt(w + 1) === 93 && (R += j(), R += j()); _.charCodeAt(w) === 46 || _.charCodeAt(w) === 47 || _.charCodeAt(w) === 35 || _.charCodeAt(w) === 45 || _.charCodeAt(w) === 126; )
            R += j(), R += se(ae);
        if (D) {
          if (ye(ae), _.charCodeAt(w) === 61) {
            R += j(), ye(ae);
            for (var ne, pe = 1; w < ae; ) {
              if (ne = _.charCodeAt(w), n.code.isWhiteSpace(ne) && (U || (ye(ae), ne = _.charCodeAt(w))), ne === 39 && (U ? U === "'" && (U = "") : U = "'"), ne === 34 && (U ? U === '"' && (U = "") : U = '"'), ne === 91)
                pe++;
              else if (ne === 93 && --pe === 0)
                break;
              R += j();
            }
          }
          if (ye(ae), w >= ae || _.charCodeAt(w) !== 93)
            return null;
          R += j();
        }
        return R;
      }
      function xe() {
        for (; w < I && _.charCodeAt(w) !== 64; )
          j();
        return w >= I ? false : (r.assert(
          _.charCodeAt(w) === 64
          /* '@' */
        ), true);
      }
      function Ae(ae) {
        return _ === S ? ae : v(S, ae);
      }
      function _e(ae, ee) {
        this._options = ae, this._title = ee.toLowerCase(), this._tag = {
          title: ee,
          description: null
        }, this._options.lineNumbers && (this._tag.lineNumber = B), this._first = w - ee.length - 1, this._last = 0, this._extra = {};
      }
      _e.prototype.addError = function(ee) {
        var he = Array.prototype.slice.call(arguments, 1), R = ee.replace(
          /%(\d)/g,
          function(D, U) {
            return r.assert(U < he.length, "Message reference must be in range"), he[U];
          }
        );
        return this._tag.errors || (this._tag.errors = []), k && r.throwError(R), this._tag.errors.push(R), F;
      }, _e.prototype.parseType = function() {
        if (g(this._title))
          try {
            if (this._tag.type = te(this._title, this._last, this._options.range), !this._tag.type && !u(this._title) && !c(this._title) && !this.addError("Missing or invalid tag type"))
              return false;
          } catch (ae) {
            if (this._tag.type = null, !this.addError(ae.message))
              return false;
          }
        else if (y(this._title))
          try {
            this._tag.type = te(this._title, this._last, this._options.range);
          } catch {
          }
        return true;
      }, _e.prototype._parseNamePath = function(ae) {
        var ee;
        return ee = Se(this._last, N && d(this._title), true), !ee && !ae && !this.addError("Missing or invalid tag name") ? false : (this._tag.name = ee, true);
      }, _e.prototype.parseNamePath = function() {
        return this._parseNamePath(false);
      }, _e.prototype.parseNamePathOptional = function() {
        return this._parseNamePath(true);
      }, _e.prototype.parseName = function() {
        var ae, ee;
        if (p(this._title))
          if (this._tag.name = Se(this._last, N && d(this._title), m(this._title)), this._tag.name)
            ee = this._tag.name, ee.charAt(0) === "[" && ee.charAt(ee.length - 1) === "]" && (ae = ee.substring(1, ee.length - 1).split("="), ae.length > 1 && (this._tag.default = ae.slice(1).join("=")), this._tag.name = ae[0], this._tag.type && this._tag.type.type !== "OptionalType" && (this._tag.type = {
              type: "OptionalType",
              expression: this._tag.type
            }));
          else {
            if (!h(this._title))
              return true;
            if (u(this._title) && this._tag.type && this._tag.type.name)
              this._extra.name = this._tag.type, this._tag.name = this._tag.type.name, this._tag.type = null;
            else if (!this.addError("Missing or invalid tag name"))
              return false;
          }
        return true;
      }, _e.prototype.parseDescription = function() {
        var ee = o(_, w, this._last).trim();
        return ee && (/^-\s+/.test(ee) && (ee = ee.substring(2)), this._tag.description = ee), true;
      }, _e.prototype.parseCaption = function() {
        var ee = o(_, w, this._last).trim(), he = "<caption>", R = "</caption>", D = ee.indexOf(he), U = ee.indexOf(R);
        return D >= 0 && U >= 0 ? (this._tag.caption = ee.substring(
          D + he.length,
          U
        ).trim(), this._tag.description = ee.substring(U + R.length).trim()) : this._tag.description = ee, true;
      }, _e.prototype.parseKind = function() {
        var ee, he;
        return he = {
          class: true,
          constant: true,
          event: true,
          external: true,
          file: true,
          function: true,
          member: true,
          mixin: true,
          module: true,
          namespace: true,
          typedef: true
        }, ee = o(_, w, this._last).trim(), this._tag.kind = ee, !(!a(he, ee) && !this.addError("Invalid kind name '%0'", ee));
      }, _e.prototype.parseAccess = function() {
        var ee;
        return ee = o(_, w, this._last).trim(), this._tag.access = ee, !(ee !== "private" && ee !== "protected" && ee !== "public" && !this.addError("Invalid access name '%0'", ee));
      }, _e.prototype.parseThis = function() {
        var ee = o(_, w, this._last).trim();
        if (ee && ee.charAt(0) === "{") {
          var he = this.parseType();
          return he && this._tag.type.type === "NameExpression" || this._tag.type.type === "UnionType" ? (this._tag.name = this._tag.type.name, true) : this.addError("Invalid name for this");
        } else
          return this.parseNamePath();
      }, _e.prototype.parseVariation = function() {
        var ee, he;
        return he = o(_, w, this._last).trim(), ee = parseFloat(he, 10), this._tag.variation = ee, !(isNaN(ee) && !this.addError("Invalid variation '%0'", he));
      }, _e.prototype.ensureEnd = function() {
        var ae = o(_, w, this._last).trim();
        return !(ae && !this.addError("Unknown content '%0'", ae));
      }, _e.prototype.epilogue = function() {
        var ee;
        return ee = this._tag.description, !(d(this._title) && !this._tag.type && ee && ee.charAt(0) === "[" && (this._tag.type = this._extra.name, this._tag.name || (this._tag.name = void 0), !N && !this.addError("Missing or invalid tag name")));
      }, T = {
        // http://usejsdoc.org/tags-access.html
        access: ["parseAccess"],
        // http://usejsdoc.org/tags-alias.html
        alias: ["parseNamePath", "ensureEnd"],
        // http://usejsdoc.org/tags-augments.html
        augments: ["parseType", "parseNamePathOptional", "ensureEnd"],
        // http://usejsdoc.org/tags-constructor.html
        constructor: ["parseType", "parseNamePathOptional", "ensureEnd"],
        // Synonym: http://usejsdoc.org/tags-constructor.html
        class: ["parseType", "parseNamePathOptional", "ensureEnd"],
        // Synonym: http://usejsdoc.org/tags-extends.html
        extends: ["parseType", "parseNamePathOptional", "ensureEnd"],
        // http://usejsdoc.org/tags-example.html
        example: ["parseCaption"],
        // http://usejsdoc.org/tags-deprecated.html
        deprecated: ["parseDescription"],
        // http://usejsdoc.org/tags-global.html
        global: ["ensureEnd"],
        // http://usejsdoc.org/tags-inner.html
        inner: ["ensureEnd"],
        // http://usejsdoc.org/tags-instance.html
        instance: ["ensureEnd"],
        // http://usejsdoc.org/tags-kind.html
        kind: ["parseKind"],
        // http://usejsdoc.org/tags-mixes.html
        mixes: ["parseNamePath", "ensureEnd"],
        // http://usejsdoc.org/tags-mixin.html
        mixin: ["parseNamePathOptional", "ensureEnd"],
        // http://usejsdoc.org/tags-member.html
        member: ["parseType", "parseNamePathOptional", "ensureEnd"],
        // http://usejsdoc.org/tags-method.html
        method: ["parseNamePathOptional", "ensureEnd"],
        // http://usejsdoc.org/tags-module.html
        module: ["parseType", "parseNamePathOptional", "ensureEnd"],
        // Synonym: http://usejsdoc.org/tags-method.html
        func: ["parseNamePathOptional", "ensureEnd"],
        // Synonym: http://usejsdoc.org/tags-method.html
        function: ["parseNamePathOptional", "ensureEnd"],
        // Synonym: http://usejsdoc.org/tags-member.html
        var: ["parseType", "parseNamePathOptional", "ensureEnd"],
        // http://usejsdoc.org/tags-name.html
        name: ["parseNamePath", "ensureEnd"],
        // http://usejsdoc.org/tags-namespace.html
        namespace: ["parseType", "parseNamePathOptional", "ensureEnd"],
        // http://usejsdoc.org/tags-private.html
        private: ["parseType", "parseDescription"],
        // http://usejsdoc.org/tags-protected.html
        protected: ["parseType", "parseDescription"],
        // http://usejsdoc.org/tags-public.html
        public: ["parseType", "parseDescription"],
        // http://usejsdoc.org/tags-readonly.html
        readonly: ["ensureEnd"],
        // http://usejsdoc.org/tags-requires.html
        requires: ["parseNamePath", "ensureEnd"],
        // http://usejsdoc.org/tags-since.html
        since: ["parseDescription"],
        // http://usejsdoc.org/tags-static.html
        static: ["ensureEnd"],
        // http://usejsdoc.org/tags-summary.html
        summary: ["parseDescription"],
        // http://usejsdoc.org/tags-this.html
        this: ["parseThis", "ensureEnd"],
        // http://usejsdoc.org/tags-todo.html
        todo: ["parseDescription"],
        // http://usejsdoc.org/tags-typedef.html
        typedef: ["parseType", "parseNamePathOptional"],
        // http://usejsdoc.org/tags-variation.html
        variation: ["parseVariation"],
        // http://usejsdoc.org/tags-version.html
        version: ["parseDescription"]
      }, _e.prototype.parse = function() {
        var ee, he, R, D;
        if (!this._title && !this.addError("Missing or invalid title"))
          return null;
        for (this._last = z(this._title), this._options.range && (this._tag.range = [this._first, _.slice(0, this._last).replace(/\s*$/, "").length].map(Ae)), a(T, this._title) ? R = T[this._title] : R = ["parseType", "parseName", "parseDescription", "epilogue"], ee = 0, he = R.length; ee < he; ++ee)
          if (D = R[ee], !this[D]())
            return null;
        return this._tag;
      };
      function H(ae) {
        var ee, he, R;
        if (!xe())
          return null;
        for (ee = O(), he = new _e(ae, ee), R = he.parse(); w < he._last; )
          j();
        return R;
      }
      function Q(ae) {
        var ee = "", he, R;
        for (R = true; w < I && (he = _.charCodeAt(w), !(R && he === 64)); )
          n.code.isLineTerminator(he) ? R = true : R && !n.code.isWhiteSpace(he) && (R = false), ee += j();
        return ae ? ee : ee.trim();
      }
      function ge(ae, ee) {
        var he = [], R, D, U, ne, pe;
        if (ee === void 0 && (ee = {}), typeof ee.unwrap == "boolean" && ee.unwrap ? _ = b(ae) : _ = ae, S = ae, ee.tags)
          if (Array.isArray(ee.tags))
            for (U = {}, ne = 0, pe = ee.tags.length; ne < pe; ne++)
              typeof ee.tags[ne] == "string" ? U[ee.tags[ne]] = true : r.throwError('Invalid "tags" parameter: ' + ee.tags);
          else
            r.throwError('Invalid "tags" parameter: ' + ee.tags);
        for (I = _.length, w = 0, B = 0, F = ee.recoverable, N = ee.sloppy, k = ee.strict, D = Q(ee.preserveWhitespace); R = H(ee), !!R; )
          (!U || U.hasOwnProperty(R.title)) && he.push(R);
        return {
          description: D,
          tags: he
        };
      }
      C.parse = ge;
    })(s = {}), t4.version = r.VERSION, t4.parse = s.parse, t4.parseType = e.parseType, t4.parseParamType = e.parseParamType, t4.unwrapComment = b, t4.Syntax = l(e.Syntax), t4.Error = r.DoctrineError, t4.type = {
      Syntax: t4.Syntax,
      parseType: e.parseType,
      parseParamType: e.parseParamType,
      stringify: e.stringify
    };
  })();
})(fb);
var Pl = us;
var GL = ts;
var HL = Wr;
var KL = uO;
var JL = cO;
var XL = cn;
var QL = gu.exports;
var YL = uE;
var ZL = PL;
var eR = pb.exports;
var tR = fb;
function Pr(t4) {
  return t4 && typeof t4 == "object" && "default" in t4 ? t4 : {
    default: t4
  };
}
var Il = Pr(GL);
var Bs = Pr(HL);
var Ju = Pr(KL);
var rR = Pr(JL);
var pn = Pr(XL);
var nR = Pr(QL);
var Vt = Pr(YL);
var _l = Pr(ZL);
var my = Pr(eR);
var sR = Pr(tR);
var E = Pl.createCommonjsModule(function(t4) {
  const {
    breakableTypePattern: e,
    createGlobalLinebreakMatcher: r,
    lineBreakPattern: s,
    shebangPattern: n
  } = Pl.astUtils, a = /^(?:Function(?:Declaration|Expression)|ArrowFunctionExpression)$/u, o = /^[\s*]*@this/mu, l = /* @__PURE__ */ new Set([`\r
`, "\r", `
`, "\u2028", "\u2029"]), i = /* @__PURE__ */ new Set(["Program", "BlockStatement", "SwitchCase"]), u = /^(?:0|0[0-7]*[89]\d*|[1-9](?:_?\d)*)$/u, c = /* @__PURE__ */ new Set(["&&=", "||=", "??="]);
  function f(R, D, U) {
    const ne = R.identifier, pe = D === 0 || U[D - 1].identifier !== ne;
    return ne && R.init === false && R.isWrite() && pe;
  }
  function h(R) {
    return R[0] !== R[0].toLocaleLowerCase();
  }
  function p(R) {
    return R.id && h(R.id.name);
  }
  function m(R) {
    for (let D = R; D; D = D.parent)
      if (a.test(D.type))
        return D;
    return null;
  }
  function d(R) {
    return !!(R && a.test(R.type));
  }
  function g(R) {
    return !!(R && /^(?:DoWhile|For|ForIn|ForOf|While)Statement$/u.test(R.type));
  }
  function y(R) {
    return R.type === "Literal" && R.value === null && !R.regex && !R.bigint;
  }
  function x(R) {
    return y(R) || R.type === "Identifier" && R.name === "undefined" || R.type === "UnaryExpression" && R.operator === "void";
  }
  function A(R) {
    return R.parent.type === "CallExpression" && R.parent.callee === R;
  }
  function b(R) {
    switch (R.type) {
      case "Literal":
        if (R.value === null) {
          if (y(R))
            return String(R.value);
          if (R.regex)
            return `/${R.regex.pattern}/${R.regex.flags}`;
          if (R.bigint)
            return R.bigint;
        } else
          return String(R.value);
        break;
      case "TemplateLiteral":
        if (R.expressions.length === 0 && R.quasis.length === 1)
          return R.quasis[0].value.cooked;
        break;
    }
    return null;
  }
  function v(R) {
    let D;
    switch (R && R.type) {
      case "ChainExpression":
        return v(R.expression);
      case "Property":
      case "MethodDefinition":
        D = R.key;
        break;
      case "MemberExpression":
        D = R.property;
        break;
    }
    return D ? D.type === "Identifier" && !R.computed ? D.name : b(D) : null;
  }
  function C(R) {
    return R && R.type === "ChainExpression" ? R.expression : R;
  }
  function T(R, D) {
    return typeof D == "string" ? R === D : D.test(R);
  }
  function w(R, D) {
    return R.type === "Identifier" && T(R.name, D);
  }
  function B(R, D, U) {
    const ne = C(R);
    if (ne.type !== "MemberExpression" || D && !w(ne.object, D))
      return false;
    if (U) {
      const pe = v(ne);
      if (typeof pe != "string" || !T(pe, U))
        return false;
    }
    return true;
  }
  function I(R, D) {
    return R.regex || D.regex ? !!(R.regex && D.regex && R.regex.pattern === D.regex.pattern && R.regex.flags === D.regex.flags) : R.bigint || D.bigint ? R.bigint === D.bigint : R.value === D.value;
  }
  function _(R, D, U = false) {
    if (R.type !== D.type)
      return R.type === "ChainExpression" ? _(R.expression, D, U) : D.type === "ChainExpression" ? _(R, D.expression, U) : false;
    switch (R.type) {
      case "Super":
      case "ThisExpression":
        return true;
      case "Identifier":
        return R.name === D.name;
      case "Literal":
        return I(R, D);
      case "ChainExpression":
        return _(R.expression, D.expression, U);
      case "MemberExpression": {
        if (!U) {
          const ne = v(R);
          if (ne !== null)
            return _(R.object, D.object, U) && ne === v(D);
        }
        return R.computed === D.computed && _(R.object, D.object, U) && _(R.property, D.property, U);
      }
      default:
        return false;
    }
  }
  function S(R) {
    return B(R, "Reflect", "apply");
  }
  function F(R) {
    return B(R, /Array$/u, "from");
  }
  function N(R) {
    return B(R, null, /^(?:every|filter|find|findIndex|forEach|map|some)$/u);
  }
  function k(R) {
    return (D) => !R(D);
  }
  function j(R, D) {
    const U = D.getJSDocComment(R);
    return U && o.test(U.value) ? true : D.getCommentsBefore(R).some((ne) => o.test(ne.value));
  }
  function O(R) {
    return R.value === "=>" && R.type === "Punctuator";
  }
  function z(R) {
    return R.value === "," && R.type === "Punctuator";
  }
  function te(R) {
    return R.value === "." && R.type === "Punctuator";
  }
  function se(R) {
    return R.value === "?." && R.type === "Punctuator";
  }
  function ye(R) {
    return R.value === ";" && R.type === "Punctuator";
  }
  function Se(R) {
    return R.value === ":" && R.type === "Punctuator";
  }
  function xe(R) {
    return R.value === "(" && R.type === "Punctuator";
  }
  function Ae(R) {
    return R.value === ")" && R.type === "Punctuator";
  }
  function _e(R) {
    return R.value === "[" && R.type === "Punctuator";
  }
  function H(R) {
    return R.value === "]" && R.type === "Punctuator";
  }
  function Q(R) {
    return R.value === "{" && R.type === "Punctuator";
  }
  function ge(R) {
    return R.value === "}" && R.type === "Punctuator";
  }
  function ae(R, D) {
    return R.id ? D.getTokenAfter(R.id, xe) : D.getFirstToken(R, xe);
  }
  function ee(R) {
    return R.type === "LogicalExpression" && (R.operator === "&&" || R.operator === "||");
  }
  function he(R) {
    return R.type === "LogicalExpression" && R.operator === "??";
  }
  t4.exports = {
    COMMENTS_IGNORE_PATTERN: /^\s*(?:eslint|jshint\s+|jslint\s+|istanbul\s+|globals?\s+|exported\s+|jscs)/u,
    LINEBREAKS: l,
    LINEBREAK_MATCHER: s,
    SHEBANG_MATCHER: n,
    STATEMENT_LIST_PARENTS: i,
    isTokenOnSameLine(R, D) {
      return R.loc.end.line === D.loc.start.line;
    },
    isNullOrUndefined: x,
    isCallee: A,
    isES5Constructor: p,
    getUpperFunction: m,
    isFunction: d,
    isLoop: g,
    isInLoop: function(R) {
      for (let D = R; D && !d(D); D = D.parent)
        if (g(D))
          return true;
      return false;
    },
    isArrayFromMethod: F,
    isParenthesised: function(R, D) {
      const U = R.getTokenBefore(D), ne = R.getTokenAfter(D);
      return !!(U && ne) && U.value === "(" && U.range[1] <= D.range[0] && ne.value === ")" && ne.range[0] >= D.range[1];
    },
    createGlobalLinebreakMatcher: r,
    equalTokens: function(R, D, U) {
      const ne = U.getTokens(R), pe = U.getTokens(D);
      if (ne.length !== pe.length)
        return false;
      for (let Ee = 0; Ee < ne.length; ++Ee)
        if (ne[Ee].type !== pe[Ee].type || ne[Ee].value !== pe[Ee].value)
          return false;
      return true;
    },
    isArrowToken: O,
    isClosingBraceToken: ge,
    isClosingBracketToken: H,
    isClosingParenToken: Ae,
    isColonToken: Se,
    isCommaToken: z,
    isCommentToken: function(R) {
      return R.type === "Line" || R.type === "Block" || R.type === "Shebang";
    },
    isDotToken: te,
    isQuestionDotToken: se,
    isKeywordToken: function(R) {
      return R.type === "Keyword";
    },
    isNotClosingBraceToken: k(ge),
    isNotClosingBracketToken: k(H),
    isNotClosingParenToken: k(Ae),
    isNotColonToken: k(Se),
    isNotCommaToken: k(z),
    isNotDotToken: k(te),
    isNotQuestionDotToken: k(se),
    isNotOpeningBraceToken: k(Q),
    isNotOpeningBracketToken: k(_e),
    isNotOpeningParenToken: k(xe),
    isNotSemicolonToken: k(ye),
    isOpeningBraceToken: Q,
    isOpeningBracketToken: _e,
    isOpeningParenToken: xe,
    isSemicolonToken: ye,
    isStringLiteral(R) {
      return R.type === "Literal" && typeof R.value == "string" || R.type === "TemplateLiteral";
    },
    isBreakableStatement(R) {
      return e.test(R.type);
    },
    getModifyingReferences(R) {
      return R.filter(f);
    },
    isSurroundedBy(R, D) {
      return R[0] === D && R[R.length - 1] === D;
    },
    isDirectiveComment(R) {
      const D = R.value.trim();
      return R.type === "Line" && D.indexOf("eslint-") === 0 || R.type === "Block" && (D.indexOf("global ") === 0 || D.indexOf("eslint ") === 0 || D.indexOf("eslint-") === 0);
    },
    getTrailingStatement: Il.default.ast.trailingStatement,
    getVariableByName(R, D) {
      let U = R;
      for (; U; ) {
        const ne = U.set.get(D);
        if (ne)
          return ne;
        U = U.upper;
      }
      return null;
    },
    isDefaultThisBinding(R, D, {
      capIsConstructor: U = true
    } = {}) {
      if (U && p(R) || j(R, D))
        return false;
      const ne = R.id === null;
      let pe = R;
      for (; pe; ) {
        const Ee = pe.parent;
        switch (Ee.type) {
          case "LogicalExpression":
          case "ConditionalExpression":
          case "ChainExpression":
            pe = Ee;
            break;
          case "ReturnStatement": {
            const Re = m(Ee);
            if (Re === null || !A(Re))
              return true;
            pe = Re.parent;
            break;
          }
          case "ArrowFunctionExpression":
            if (pe !== Ee.body || !A(Ee))
              return true;
            pe = Ee.parent;
            break;
          case "Property":
          case "MethodDefinition":
            return Ee.value !== pe;
          case "AssignmentExpression":
          case "AssignmentPattern":
            return !(Ee.left.type === "MemberExpression" || U && ne && Ee.left.type === "Identifier" && h(Ee.left.name));
          case "VariableDeclarator":
            return !(U && ne && Ee.init === pe && Ee.id.type === "Identifier" && h(Ee.id.name));
          case "MemberExpression":
            if (Ee.object === pe && B(Ee, null, /^(?:bind|call|apply)$/u)) {
              const Re = Ee.parent.type === "ChainExpression" ? Ee.parent : Ee;
              return !(A(Re) && Re.parent.arguments.length >= 1 && !x(Re.parent.arguments[0]));
            }
            return true;
          case "CallExpression":
            return S(Ee.callee) ? Ee.arguments.length !== 3 || Ee.arguments[0] !== pe || x(Ee.arguments[1]) : F(Ee.callee) ? Ee.arguments.length !== 3 || Ee.arguments[1] !== pe || x(Ee.arguments[2]) : N(Ee.callee) ? Ee.arguments.length !== 2 || Ee.arguments[0] !== pe || x(Ee.arguments[1]) : true;
          default:
            return true;
        }
      }
      return true;
    },
    getPrecedence(R) {
      switch (R.type) {
        case "SequenceExpression":
          return 0;
        case "AssignmentExpression":
        case "ArrowFunctionExpression":
        case "YieldExpression":
          return 1;
        case "ConditionalExpression":
          return 3;
        case "LogicalExpression":
          switch (R.operator) {
            case "||":
            case "??":
              return 4;
            case "&&":
              return 5;
          }
        case "BinaryExpression":
          switch (R.operator) {
            case "|":
              return 6;
            case "^":
              return 7;
            case "&":
              return 8;
            case "==":
            case "!=":
            case "===":
            case "!==":
              return 9;
            case "<":
            case "<=":
            case ">":
            case ">=":
            case "in":
            case "instanceof":
              return 10;
            case "<<":
            case ">>":
            case ">>>":
              return 11;
            case "+":
            case "-":
              return 12;
            case "*":
            case "/":
            case "%":
              return 13;
            case "**":
              return 15;
          }
        case "UnaryExpression":
        case "AwaitExpression":
          return 16;
        case "UpdateExpression":
          return 17;
        case "CallExpression":
        case "ChainExpression":
        case "ImportExpression":
          return 18;
        case "NewExpression":
          return 19;
        default:
          return 20;
      }
    },
    isEmptyBlock(R) {
      return !!(R && R.type === "BlockStatement" && R.body.length === 0);
    },
    isEmptyFunction(R) {
      return d(R) && t4.exports.isEmptyBlock(R.body);
    },
    getDirectivePrologue(R) {
      const D = [];
      if (R.type === "Program" || R.type === "FunctionDeclaration" || R.type === "FunctionExpression" || R.type === "ArrowFunctionExpression" && R.body.type === "BlockStatement") {
        const U = R.type === "Program" ? R.body : R.body.body;
        for (const ne of U)
          if (ne.type === "ExpressionStatement" && ne.expression.type === "Literal")
            D.push(ne);
          else
            break;
      }
      return D;
    },
    isDecimalInteger(R) {
      return R.type === "Literal" && typeof R.value == "number" && u.test(R.raw);
    },
    isDecimalIntegerNumericToken(R) {
      return R.type === "Numeric" && u.test(R.value);
    },
    getFunctionNameWithKind(R) {
      const D = R.parent, U = [];
      if (D.type === "MethodDefinition" && D.static && U.push("static"), R.async && U.push("async"), R.generator && U.push("generator"), R.type === "ArrowFunctionExpression")
        U.push("arrow", "function");
      else if (D.type === "Property" || D.type === "MethodDefinition") {
        if (D.kind === "constructor")
          return "constructor";
        D.kind === "get" ? U.push("getter") : D.kind === "set" ? U.push("setter") : U.push("method");
      } else
        U.push("function");
      if (R.id)
        U.push(`'${R.id.name}'`);
      else {
        const ne = v(D);
        ne !== null && U.push(`'${ne}'`);
      }
      return U.join(" ");
    },
    getFunctionHeadLoc(R, D) {
      const U = R.parent;
      let ne = null, pe = null;
      if (R.type === "ArrowFunctionExpression") {
        const Ee = D.getTokenBefore(R.body, O);
        ne = Ee.loc.start, pe = Ee.loc.end;
      } else
        U.type === "Property" || U.type === "MethodDefinition" ? (ne = U.loc.start, pe = ae(R, D).loc.start) : (ne = R.loc.start, pe = ae(R, D).loc.start);
      return {
        start: Object.assign({}, ne),
        end: Object.assign({}, pe)
      };
    },
    getNextLocation(R, {
      line: D,
      column: U
    }) {
      return U < R.lines[D - 1].length ? {
        line: D,
        column: U + 1
      } : D < R.lines.length ? {
        line: D + 1,
        column: 0
      } : null;
    },
    getParenthesisedText(R, D) {
      let U = R.getFirstToken(D), ne = R.getLastToken(D);
      for (; R.getTokenBefore(U) && R.getTokenBefore(U).type === "Punctuator" && R.getTokenBefore(U).value === "(" && R.getTokenAfter(ne) && R.getTokenAfter(ne).type === "Punctuator" && R.getTokenAfter(ne).value === ")"; )
        U = R.getTokenBefore(U), ne = R.getTokenAfter(ne);
      return R.getText().slice(U.range[0], ne.range[1]);
    },
    couldBeError(R) {
      switch (R.type) {
        case "Identifier":
        case "CallExpression":
        case "NewExpression":
        case "MemberExpression":
        case "TaggedTemplateExpression":
        case "YieldExpression":
        case "AwaitExpression":
        case "ChainExpression":
          return true;
        case "AssignmentExpression":
          return ["=", "&&="].includes(R.operator) ? t4.exports.couldBeError(R.right) : ["||=", "??="].includes(R.operator) ? t4.exports.couldBeError(R.left) || t4.exports.couldBeError(R.right) : false;
        case "SequenceExpression": {
          const D = R.expressions;
          return D.length !== 0 && t4.exports.couldBeError(D[D.length - 1]);
        }
        case "LogicalExpression":
          return R.operator === "&&" ? t4.exports.couldBeError(R.right) : t4.exports.couldBeError(R.left) || t4.exports.couldBeError(R.right);
        case "ConditionalExpression":
          return t4.exports.couldBeError(R.consequent) || t4.exports.couldBeError(R.alternate);
        default:
          return false;
      }
    },
    isNumericLiteral(R) {
      return R.type === "Literal" && (typeof R.value == "number" || !!R.bigint);
    },
    canTokensBeAdjacent(R, D) {
      const U = {
        ecmaVersion: Bs.default.latestEcmaVersion,
        comment: true,
        range: true
      };
      let ne;
      if (typeof R == "string") {
        let Ee;
        try {
          Ee = Bs.default.tokenize(R, U);
        } catch {
          return false;
        }
        const Re = Ee.comments;
        if (ne = Ee[Ee.length - 1], Re.length) {
          const We = Re[Re.length - 1];
          We.range[0] > ne.range[0] && (ne = We);
        }
      } else
        ne = R;
      if (ne.type === "Shebang")
        return false;
      let pe;
      if (typeof D == "string") {
        let Ee;
        try {
          Ee = Bs.default.tokenize(D, U);
        } catch {
          return false;
        }
        const Re = Ee.comments;
        if (pe = Ee[0], Re.length) {
          const We = Re[0];
          We.range[0] < pe.range[0] && (pe = We);
        }
      } else
        pe = D;
      if (ne.type === "Punctuator" || pe.type === "Punctuator") {
        if (ne.type === "Punctuator" && pe.type === "Punctuator") {
          const Ee = /* @__PURE__ */ new Set(["+", "++"]), Re = /* @__PURE__ */ new Set(["-", "--"]);
          return !(Ee.has(ne.value) && Ee.has(pe.value) || Re.has(ne.value) && Re.has(pe.value));
        }
        return ne.type === "Punctuator" && ne.value === "/" ? !["Block", "Line", "RegularExpression"].includes(pe.type) : true;
      }
      return !!(ne.type === "String" || pe.type === "String" || ne.type === "Template" || pe.type === "Template" || ne.type !== "Numeric" && pe.type === "Numeric" && pe.value.startsWith(".") || ne.type === "Block" || pe.type === "Block" || pe.type === "Line");
    },
    getNameLocationInGlobalDirectiveComment(R, D, U) {
      const ne = new RegExp(`[\\s,]${Ju.default(U)}(?:$|[\\s,:])`, "gu");
      ne.lastIndex = D.value.indexOf("global") + 6;
      const pe = ne.exec(D.value), Ee = R.getLocFromIndex(D.range[0] + 2 + (pe ? pe.index + 1 : 0)), Re = {
        line: Ee.line,
        column: Ee.column + (pe ? U.length : 1)
      };
      return {
        start: Ee,
        end: Re
      };
    },
    hasOctalOrNonOctalDecimalEscapeSequence(R) {
      return /^(?:[^\\]|\\.)*\\(?:[1-9]|0[0-9])/su.test(R);
    },
    isLogicalExpression: ee,
    isCoalesceExpression: he,
    isMixedLogicalAndCoalesceExpressions: function(R, D) {
      return ee(R) && he(D) || he(R) && ee(D);
    },
    isNullLiteral: y,
    getStaticStringValue: b,
    getStaticPropertyName: v,
    skipChainExpression: C,
    isSpecificId: w,
    isSpecificMemberAccess: B,
    equalLiteralValue: I,
    isSameReference: _,
    isLogicalAssignmentOperator: function(R) {
      return c.has(R);
    }
  };
});
E.COMMENTS_IGNORE_PATTERN;
E.LINEBREAKS;
E.LINEBREAK_MATCHER;
E.SHEBANG_MATCHER;
E.STATEMENT_LIST_PARENTS;
E.isTokenOnSameLine;
E.isNullOrUndefined;
E.isCallee;
E.isES5Constructor;
E.getUpperFunction;
E.isFunction;
E.isLoop;
E.isInLoop;
E.isArrayFromMethod;
E.isParenthesised;
E.createGlobalLinebreakMatcher;
E.equalTokens;
E.isArrowToken;
E.isClosingBraceToken;
E.isClosingBracketToken;
E.isClosingParenToken;
E.isColonToken;
E.isCommaToken;
E.isCommentToken;
E.isDotToken;
E.isQuestionDotToken;
E.isKeywordToken;
E.isNotClosingBraceToken;
E.isNotClosingBracketToken;
E.isNotClosingParenToken;
E.isNotColonToken;
E.isNotCommaToken;
E.isNotDotToken;
E.isNotQuestionDotToken;
E.isNotOpeningBraceToken;
E.isNotOpeningBracketToken;
E.isNotOpeningParenToken;
E.isNotSemicolonToken;
E.isOpeningBraceToken;
E.isOpeningBracketToken;
E.isOpeningParenToken;
E.isSemicolonToken;
E.isStringLiteral;
E.isBreakableStatement;
E.getModifyingReferences;
E.isSurroundedBy;
E.isDirectiveComment;
E.getTrailingStatement;
E.getVariableByName;
E.isDefaultThisBinding;
E.getPrecedence;
E.isEmptyBlock;
E.isEmptyFunction;
E.getDirectivePrologue;
E.isDecimalInteger;
E.isDecimalIntegerNumericToken;
E.getFunctionNameWithKind;
E.getFunctionHeadLoc;
E.getNextLocation;
E.getParenthesisedText;
E.couldBeError;
E.isNumericLiteral;
E.canTokensBeAdjacent;
E.getNameLocationInGlobalDirectiveComment;
E.hasOctalOrNonOctalDecimalEscapeSequence;
E.isLogicalExpression;
E.isCoalesceExpression;
E.isMixedLogicalAndCoalesceExpressions;
E.isNullLiteral;
E.getStaticStringValue;
E.getStaticPropertyName;
E.skipChainExpression;
E.isSpecificId;
E.isSpecificMemberAccess;
E.equalLiteralValue;
E.isSameReference;
E.isLogicalAssignmentOperator;
function aR(t4, e) {
  if (t4.length !== e.length)
    return false;
  for (let r = 0; r < t4.length; r++) {
    const s = t4[r], n = e[r];
    if (s.type !== n.type || s.value !== n.value)
      return false;
  }
  return true;
}
function iR(t4, e) {
  return typeof t4 == "string" && typeof e == "string" ? t4 === e : Array.isArray(t4) && Array.isArray(e) ? aR(t4, e) : false;
}
function oR(t4) {
  return t4.kind === "get" || t4.kind === "set";
}
function xa(t4, e, r, s) {
  const n = t4.parent;
  return n.type === "CallExpression" && E.isSpecificMemberAccess(n.callee, r, s) && n.arguments[e] === t4;
}
function lR(t4) {
  if (xa(t4, 2, "Object", "defineProperty") || xa(t4, 2, "Reflect", "defineProperty"))
    return true;
  const e = t4.parent.parent;
  return e.type === "ObjectExpression" && (xa(e, 1, "Object", "create") || xa(e, 1, "Object", "defineProperties"));
}
var Xu = {
  meta: {
    type: "suggestion",
    docs: {
      description: "enforce getter and setter pairs in objects and classes",
      category: "Best Practices",
      recommended: false,
      url: "https://eslint.org/docs/rules/accessor-pairs"
    },
    schema: [{
      type: "object",
      properties: {
        getWithoutSet: {
          type: "boolean",
          default: false
        },
        setWithoutGet: {
          type: "boolean",
          default: true
        },
        enforceForClassMembers: {
          type: "boolean",
          default: true
        }
      },
      additionalProperties: false
    }],
    messages: {
      missingGetterInPropertyDescriptor: "Getter is not present in property descriptor.",
      missingSetterInPropertyDescriptor: "Setter is not present in property descriptor.",
      missingGetterInObjectLiteral: "Getter is not present for {{ name }}.",
      missingSetterInObjectLiteral: "Setter is not present for {{ name }}.",
      missingGetterInClass: "Getter is not present for class {{ name }}.",
      missingSetterInClass: "Setter is not present for class {{ name }}."
    }
  },
  create(t4) {
    const e = t4.options[0] || {}, r = e.getWithoutSet === true, s = e.setWithoutGet !== false, n = e.enforceForClassMembers !== false, a = t4.getSourceCode();
    function o(g, y) {
      g.type === "Property" ? t4.report({
        node: g,
        messageId: `${y}InObjectLiteral`,
        loc: E.getFunctionHeadLoc(g.value, a),
        data: {
          name: E.getFunctionNameWithKind(g.value)
        }
      }) : g.type === "MethodDefinition" ? t4.report({
        node: g,
        messageId: `${y}InClass`,
        loc: E.getFunctionHeadLoc(g.value, a),
        data: {
          name: E.getFunctionNameWithKind(g.value)
        }
      }) : t4.report({
        node: g,
        messageId: `${y}InPropertyDescriptor`
      });
    }
    function l(g, y) {
      for (const x of g)
        o(x, y);
    }
    function i(g) {
      const y = E.getStaticPropertyName(g);
      return {
        key: y !== null ? y : a.getTokens(g.key),
        getters: g.kind === "get" ? [g] : [],
        setters: g.kind === "set" ? [g] : []
      };
    }
    function u(g, y) {
      const x = g.find((A) => iR(A.key, y.key));
      return x ? (x.getters.push(...y.getters), x.setters.push(...y.setters)) : g.push(y), g;
    }
    function c(g) {
      const y = g.filter(oR).map(i).reduce(u, []);
      for (const {
        getters: x,
        setters: A
      } of y)
        s && A.length && !x.length && l(A, "missingGetter"), r && x.length && !A.length && l(x, "missingSetter");
    }
    function f(g) {
      c(g.properties.filter((y) => y.type === "Property"));
    }
    function h(g) {
      const y = g.properties.filter((b) => b.type === "Property" && b.kind === "init" && !b.computed).map(({
        key: b
      }) => b.name), x = y.includes("get"), A = y.includes("set");
      s && A && !x && o(g, "missingGetter"), r && x && !A && o(g, "missingSetter");
    }
    function p(g) {
      f(g), lR(g) && h(g);
    }
    function m(g) {
      const y = g.body.filter((x) => x.type === "MethodDefinition");
      c(y.filter((x) => x.static)), c(y.filter((x) => !x.static));
    }
    const d = {};
    return (s || r) && (d.ObjectExpression = p, n && (d.ClassBody = m)), d;
  }
};
Xu.meta;
Xu.create;
var Qu = {
  meta: {
    type: "layout",
    docs: {
      description: "enforce linebreaks after opening and before closing array brackets",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/array-bracket-newline"
    },
    fixable: "whitespace",
    schema: [{
      oneOf: [{
        enum: ["always", "never", "consistent"]
      }, {
        type: "object",
        properties: {
          multiline: {
            type: "boolean"
          },
          minItems: {
            type: ["integer", "null"],
            minimum: 0
          }
        },
        additionalProperties: false
      }]
    }],
    messages: {
      unexpectedOpeningLinebreak: "There should be no linebreak after '['.",
      unexpectedClosingLinebreak: "There should be no linebreak before ']'.",
      missingOpeningLinebreak: "A linebreak is required after '['.",
      missingClosingLinebreak: "A linebreak is required before ']'."
    }
  },
  create(t4) {
    const e = t4.getSourceCode();
    function r(u) {
      let c = false, f = false, h = 0;
      return u ? u === "consistent" ? (c = true, h = Number.POSITIVE_INFINITY) : u === "always" || u.minItems === 0 ? h = 0 : u === "never" ? h = Number.POSITIVE_INFINITY : (f = !!u.multiline, h = u.minItems || Number.POSITIVE_INFINITY) : (c = false, f = true, h = Number.POSITIVE_INFINITY), {
        consistent: c,
        multiline: f,
        minItems: h
      };
    }
    function s(u) {
      const c = r(u);
      return {
        ArrayExpression: c,
        ArrayPattern: c
      };
    }
    function n(u, c) {
      t4.report({
        node: u,
        loc: c.loc,
        messageId: "unexpectedOpeningLinebreak",
        fix(f) {
          const h = e.getTokenAfter(c, {
            includeComments: true
          });
          return E.isCommentToken(h) ? null : f.removeRange([c.range[1], h.range[0]]);
        }
      });
    }
    function a(u, c) {
      t4.report({
        node: u,
        loc: c.loc,
        messageId: "unexpectedClosingLinebreak",
        fix(f) {
          const h = e.getTokenBefore(c, {
            includeComments: true
          });
          return E.isCommentToken(h) ? null : f.removeRange([h.range[1], c.range[0]]);
        }
      });
    }
    function o(u, c) {
      t4.report({
        node: u,
        loc: c.loc,
        messageId: "missingOpeningLinebreak",
        fix(f) {
          return f.insertTextAfter(c, `
`);
        }
      });
    }
    function l(u, c) {
      t4.report({
        node: u,
        loc: c.loc,
        messageId: "missingClosingLinebreak",
        fix(f) {
          return f.insertTextBefore(c, `
`);
        }
      });
    }
    function i(u) {
      const c = u.elements, h = s(t4.options[0])[u.type], p = e.getFirstToken(u), m = e.getLastToken(u), d = e.getTokenAfter(p, {
        includeComments: true
      }), g = e.getTokenBefore(m, {
        includeComments: true
      }), y = e.getTokenAfter(p), x = e.getTokenBefore(m);
      c.length >= h.minItems || h.multiline && c.length > 0 && d.loc.start.line !== g.loc.end.line || c.length === 0 && d.type === "Block" && d.loc.start.line !== g.loc.end.line && d === g || h.consistent && p.loc.end.line !== y.loc.start.line ? (E.isTokenOnSameLine(p, y) && o(u, p), E.isTokenOnSameLine(x, m) && l(u, m)) : (E.isTokenOnSameLine(p, y) || n(u, p), E.isTokenOnSameLine(x, m) || a(u, m));
    }
    return {
      ArrayPattern: i,
      ArrayExpression: i
    };
  }
};
Qu.meta;
Qu.create;
var Yu = {
  meta: {
    type: "layout",
    docs: {
      description: "enforce consistent spacing inside array brackets",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/array-bracket-spacing"
    },
    fixable: "whitespace",
    schema: [{
      enum: ["always", "never"]
    }, {
      type: "object",
      properties: {
        singleValue: {
          type: "boolean"
        },
        objectsInArrays: {
          type: "boolean"
        },
        arraysInArrays: {
          type: "boolean"
        }
      },
      additionalProperties: false
    }],
    messages: {
      unexpectedSpaceAfter: "There should be no space after '{{tokenValue}}'.",
      unexpectedSpaceBefore: "There should be no space before '{{tokenValue}}'.",
      missingSpaceAfter: "A space is required after '{{tokenValue}}'.",
      missingSpaceBefore: "A space is required before '{{tokenValue}}'."
    }
  },
  create(t4) {
    const e = t4.options[0] === "always", r = t4.getSourceCode();
    function s(h) {
      return t4.options[1] ? t4.options[1][h] === !e : false;
    }
    const n = {
      spaced: e,
      singleElementException: s("singleValue"),
      objectsInArraysException: s("objectsInArrays"),
      arraysInArraysException: s("arraysInArrays")
    };
    function a(h, p) {
      const m = r.getTokenAfter(p);
      t4.report({
        node: h,
        loc: {
          start: p.loc.end,
          end: m.loc.start
        },
        messageId: "unexpectedSpaceAfter",
        data: {
          tokenValue: p.value
        },
        fix(d) {
          return d.removeRange([p.range[1], m.range[0]]);
        }
      });
    }
    function o(h, p) {
      const m = r.getTokenBefore(p);
      t4.report({
        node: h,
        loc: {
          start: m.loc.end,
          end: p.loc.start
        },
        messageId: "unexpectedSpaceBefore",
        data: {
          tokenValue: p.value
        },
        fix(d) {
          return d.removeRange([m.range[1], p.range[0]]);
        }
      });
    }
    function l(h, p) {
      t4.report({
        node: h,
        loc: p.loc,
        messageId: "missingSpaceAfter",
        data: {
          tokenValue: p.value
        },
        fix(m) {
          return m.insertTextAfter(p, " ");
        }
      });
    }
    function i(h, p) {
      t4.report({
        node: h,
        loc: p.loc,
        messageId: "missingSpaceBefore",
        data: {
          tokenValue: p.value
        },
        fix(m) {
          return m.insertTextBefore(p, " ");
        }
      });
    }
    function u(h) {
      return h && (h.type === "ObjectExpression" || h.type === "ObjectPattern");
    }
    function c(h) {
      return h && (h.type === "ArrayExpression" || h.type === "ArrayPattern");
    }
    function f(h) {
      if (n.spaced && h.elements.length === 0)
        return;
      const p = r.getFirstToken(h), m = r.getFirstToken(h, 1), d = h.typeAnnotation ? r.getTokenBefore(h.typeAnnotation) : r.getLastToken(h), g = r.getTokenBefore(d), y = h.elements[0], x = h.elements[h.elements.length - 1], A = n.objectsInArraysException && u(y) || n.arraysInArraysException && c(y) || n.singleElementException && h.elements.length === 1 ? !n.spaced : n.spaced, b = n.objectsInArraysException && u(x) || n.arraysInArraysException && c(x) || n.singleElementException && h.elements.length === 1 ? !n.spaced : n.spaced;
      E.isTokenOnSameLine(p, m) && (A && !r.isSpaceBetweenTokens(p, m) && l(h, p), !A && r.isSpaceBetweenTokens(p, m) && a(h, p)), p !== g && E.isTokenOnSameLine(g, d) && (b && !r.isSpaceBetweenTokens(g, d) && i(h, d), !b && r.isSpaceBetweenTokens(g, d) && o(h, d));
    }
    return {
      ArrayPattern: f,
      ArrayExpression: f
    };
  }
};
Yu.meta;
Yu.create;
var uR = /^(?:Arrow)?FunctionExpression$/u;
var cR = /^(?:every|filter|find(?:Index)?|flatMap|forEach|map|reduce(?:Right)?|some|sort)$/u;
function pR(t4) {
  return t4.reachable;
}
function fR(t4) {
  return E.isSpecificMemberAccess(t4, null, cR);
}
function dy(t4) {
  return ["from", "of", "isArray"].includes(t4) ? "Array.".concat(t4) : "Array.prototype.".concat(t4);
}
function hR(t4) {
  let e = t4;
  for (; e; ) {
    const r = e.parent;
    switch (r.type) {
      case "LogicalExpression":
      case "ConditionalExpression":
      case "ChainExpression":
        e = r;
        break;
      case "ReturnStatement": {
        const s = E.getUpperFunction(r);
        if (s === null || !E.isCallee(s))
          return null;
        e = s.parent;
        break;
      }
      case "CallExpression":
        return E.isArrayFromMethod(r.callee) && r.arguments.length >= 2 && r.arguments[1] === e ? "from" : fR(r.callee) && r.arguments.length >= 1 && r.arguments[0] === e ? E.getStaticPropertyName(r.callee) : null;
      default:
        return null;
    }
  }
  return null;
}
var Zu = {
  meta: {
    type: "problem",
    docs: {
      description: "enforce `return` statements in callbacks of array methods",
      category: "Best Practices",
      recommended: false,
      url: "https://eslint.org/docs/rules/array-callback-return"
    },
    schema: [{
      type: "object",
      properties: {
        allowImplicit: {
          type: "boolean",
          default: false
        },
        checkForEach: {
          type: "boolean",
          default: false
        }
      },
      additionalProperties: false
    }],
    messages: {
      expectedAtEnd: "{{arrayMethodName}}() expects a value to be returned at the end of {{name}}.",
      expectedInside: "{{arrayMethodName}}() expects a return value from {{name}}.",
      expectedReturnValue: "{{arrayMethodName}}() expects a return value from {{name}}.",
      expectedNoReturnValue: "{{arrayMethodName}}() expects no useless return value from {{name}}."
    }
  },
  create(t4) {
    const e = t4.options[0] || {
      allowImplicit: false,
      checkForEach: false
    }, r = t4.getSourceCode();
    let s = {
      arrayMethodName: null,
      upper: null,
      codePath: null,
      hasReturn: false,
      shouldCheck: false,
      node: null
    };
    function n(a) {
      if (!s.shouldCheck)
        return;
      let o = null;
      if (s.arrayMethodName === "forEach" ? e.checkForEach && a.type === "ArrowFunctionExpression" && a.expression && (o = "expectedNoReturnValue") : a.body.type === "BlockStatement" && s.codePath.currentSegments.some(pR) && (o = s.hasReturn ? "expectedAtEnd" : "expectedInside"), o) {
        const l = E.getFunctionNameWithKind(a);
        t4.report({
          node: a,
          loc: E.getFunctionHeadLoc(a, r),
          messageId: o,
          data: {
            name: l,
            arrayMethodName: dy(s.arrayMethodName)
          }
        });
      }
    }
    return {
      onCodePathStart(a, o) {
        let l = null;
        uR.test(o.type) && (l = hR(o)), s = {
          arrayMethodName: l,
          upper: s,
          codePath: a,
          hasReturn: false,
          shouldCheck: l && !o.async && !o.generator,
          node: o
        };
      },
      onCodePathEnd() {
        s = s.upper;
      },
      ReturnStatement(a) {
        if (!s.shouldCheck)
          return;
        s.hasReturn = true;
        let o = null;
        s.arrayMethodName === "forEach" ? e.checkForEach && a.argument && (o = "expectedNoReturnValue") : !e.allowImplicit && !a.argument && (o = "expectedReturnValue"), o && t4.report({
          node: a,
          messageId: o,
          data: {
            name: E.getFunctionNameWithKind(s.node),
            arrayMethodName: dy(s.arrayMethodName)
          }
        });
      },
      "FunctionExpression:exit": n,
      "ArrowFunctionExpression:exit": n
    };
  }
};
Zu.meta;
Zu.create;
var ec = {
  meta: {
    type: "layout",
    docs: {
      description: "enforce line breaks after each array element",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/array-element-newline"
    },
    fixable: "whitespace",
    schema: {
      definitions: {
        basicConfig: {
          oneOf: [{
            enum: ["always", "never", "consistent"]
          }, {
            type: "object",
            properties: {
              multiline: {
                type: "boolean"
              },
              minItems: {
                type: ["integer", "null"],
                minimum: 0
              }
            },
            additionalProperties: false
          }]
        }
      },
      items: [{
        oneOf: [{
          $ref: "#/definitions/basicConfig"
        }, {
          type: "object",
          properties: {
            ArrayExpression: {
              $ref: "#/definitions/basicConfig"
            },
            ArrayPattern: {
              $ref: "#/definitions/basicConfig"
            }
          },
          additionalProperties: false,
          minProperties: 1
        }]
      }]
    },
    messages: {
      unexpectedLineBreak: "There should be no linebreak here.",
      missingLineBreak: "There should be a linebreak after this element."
    }
  },
  create(t4) {
    const e = t4.getSourceCode();
    function r(l) {
      let i = false, u = false, c;
      const f = l || "always";
      return !f || f === "always" || f.minItems === 0 ? c = 0 : f === "never" ? c = Number.POSITIVE_INFINITY : f === "consistent" ? (i = true, c = Number.POSITIVE_INFINITY) : (u = !!f.multiline, c = f.minItems || Number.POSITIVE_INFINITY), {
        consistent: i,
        multiline: u,
        minItems: c
      };
    }
    function s(l) {
      if (l && (l.ArrayExpression || l.ArrayPattern)) {
        let u, c;
        return l.ArrayExpression && (u = r(l.ArrayExpression)), l.ArrayPattern && (c = r(l.ArrayPattern)), {
          ArrayExpression: u,
          ArrayPattern: c
        };
      }
      const i = r(l);
      return {
        ArrayExpression: i,
        ArrayPattern: i
      };
    }
    function n(l) {
      const i = e.getTokenBefore(l, {
        includeComments: true
      });
      t4.report({
        loc: {
          start: i.loc.end,
          end: l.loc.start
        },
        messageId: "unexpectedLineBreak",
        fix(u) {
          if (E.isCommentToken(i))
            return null;
          if (!E.isTokenOnSameLine(i, l))
            return u.replaceTextRange([i.range[1], l.range[0]], " ");
          const c = e.getTokenBefore(i, {
            includeComments: true
          });
          return E.isCommentToken(c) ? null : u.replaceTextRange([c.range[1], i.range[0]], "");
        }
      });
    }
    function a(l) {
      const i = e.getTokenBefore(l, {
        includeComments: true
      });
      t4.report({
        loc: {
          start: i.loc.end,
          end: l.loc.start
        },
        messageId: "missingLineBreak",
        fix(u) {
          return u.replaceTextRange([i.range[1], l.range[0]], `
`);
        }
      });
    }
    function o(l) {
      const i = l.elements, c = s(t4.options[0])[l.type];
      if (!c)
        return;
      let f = false;
      c.multiline && (f = i.filter((m) => m !== null).some((m) => m.loc.start.line !== m.loc.end.line));
      const h = l.elements.map((m, d) => {
        const g = i[d - 1];
        if (d === 0 || m === null || g === null)
          return false;
        const y = e.getFirstTokenBetween(g, m, E.isCommaToken), x = e.getTokenBefore(y), A = e.getTokenAfter(y);
        return !E.isTokenOnSameLine(x, A);
      }).filter((m) => m === true).length, p = i.length >= c.minItems || c.multiline && f || c.consistent && h > 0 && h < l.elements.length;
      i.forEach((m, d) => {
        const g = i[d - 1];
        if (d === 0 || m === null || g === null)
          return;
        const y = e.getFirstTokenBetween(g, m, E.isCommaToken), x = e.getTokenBefore(y), A = e.getTokenAfter(y);
        p ? E.isTokenOnSameLine(x, A) && a(A) : E.isTokenOnSameLine(x, A) || n(A);
      });
    }
    return {
      ArrayPattern: o,
      ArrayExpression: o
    };
  }
};
ec.meta;
ec.create;
var tc = {
  meta: {
    type: "suggestion",
    docs: {
      description: "require braces around arrow function bodies",
      category: "ECMAScript 6",
      recommended: false,
      url: "https://eslint.org/docs/rules/arrow-body-style"
    },
    schema: {
      anyOf: [{
        type: "array",
        items: [{
          enum: ["always", "never"]
        }],
        minItems: 0,
        maxItems: 1
      }, {
        type: "array",
        items: [{
          enum: ["as-needed"]
        }, {
          type: "object",
          properties: {
            requireReturnForObjectLiteral: {
              type: "boolean"
            }
          },
          additionalProperties: false
        }],
        minItems: 0,
        maxItems: 2
      }]
    },
    fixable: "code",
    messages: {
      unexpectedOtherBlock: "Unexpected block statement surrounding arrow body.",
      unexpectedEmptyBlock: "Unexpected block statement surrounding arrow body; put a value of `undefined` immediately after the `=>`.",
      unexpectedObjectBlock: "Unexpected block statement surrounding arrow body; parenthesize the returned value and move it immediately after the `=>`.",
      unexpectedSingleBlock: "Unexpected block statement surrounding arrow body; move the returned value immediately after the `=>`.",
      expectedBlock: "Expected block statement surrounding arrow body."
    }
  },
  create(t4) {
    const e = t4.options, r = e[0] === "always", s = !e[0] || e[0] === "as-needed", n = e[0] === "never", a = e[1] && e[1].requireReturnForObjectLiteral, o = t4.getSourceCode();
    let l = null;
    function i(h) {
      return h && h.type === "Punctuator" && /^[([/`+-]/u.test(h.value);
    }
    function u(h) {
      let p = h;
      for (; !E.isParenthesised(o, p); )
        p = p.parent;
      return o.getTokenAfter(p);
    }
    function c(h) {
      return h && h.parent ? h.parent.type === "ForStatement" && h.parent.init === h ? true : c(h.parent) : false;
    }
    function f(h) {
      const p = h.body;
      if (p.type === "BlockStatement") {
        const m = p.body;
        if (m.length !== 1 && !n || s && a && m[0].type === "ReturnStatement" && m[0].argument && m[0].argument.type === "ObjectExpression")
          return;
        if (n || s && m[0].type === "ReturnStatement") {
          let d;
          m.length === 0 ? d = "unexpectedEmptyBlock" : m.length > 1 ? d = "unexpectedOtherBlock" : m[0].argument === null ? d = "unexpectedSingleBlock" : E.isOpeningBraceToken(o.getFirstToken(m[0], {
            skip: 1
          })) ? d = "unexpectedObjectBlock" : d = "unexpectedSingleBlock", t4.report({
            node: h,
            loc: p.loc,
            messageId: d,
            fix(g) {
              const y = [];
              if (m.length !== 1 || m[0].type !== "ReturnStatement" || !m[0].argument || i(o.getTokenAfter(p)))
                return y;
              const x = o.getFirstToken(p), A = o.getLastToken(p), b = o.getFirstToken(m[0], 1), v = o.getLastToken(m[0]);
              return o.commentsExistBetween(x, b) || o.commentsExistBetween(v, A) ? y.push(g.remove(x), g.remove(A), g.remove(o.getTokenAfter(x))) : y.push(g.removeRange([x.range[0], b.range[0]]), g.removeRange([v.range[1], A.range[1]])), (E.isOpeningBraceToken(b) || m[0].argument.type === "SequenceExpression" || l.hasInOperator && c(h)) && (E.isParenthesised(o, m[0].argument) || y.push(g.insertTextBefore(b, "("), g.insertTextAfter(v, ")"))), E.isSemicolonToken(v) && y.push(g.remove(v)), y;
            }
          });
        }
      } else
        (r || s && a && p.type === "ObjectExpression") && t4.report({
          node: h,
          loc: p.loc,
          messageId: "expectedBlock",
          fix(m) {
            const d = [], g = o.getTokenBefore(p, E.isArrowToken), [y, x] = o.getTokensAfter(g, {
              count: 2
            }), A = o.getLastToken(h);
            let b = null;
            if (E.isOpeningParenToken(y) && E.isOpeningBraceToken(x)) {
              const v = o.getNodeByRangeIndex(x.range[0]);
              v.type === "ObjectExpression" && (b = v);
            }
            if (b) {
              const v = y, C = x;
              E.isTokenOnSameLine(v, C) ? d.push(m.replaceText(v, "{return ")) : d.push(m.replaceText(v, "{"), m.insertTextBefore(C, "return ")), d.push(m.remove(u(b))), d.push(m.insertTextAfter(A, "}"));
            } else
              d.push(m.insertTextBefore(y, "{return ")), d.push(m.insertTextAfter(A, "}"));
            return d;
          }
        });
    }
    return {
      "BinaryExpression[operator='in']"() {
        let h = l;
        for (; h; )
          h.hasInOperator = true, h = h.upper;
      },
      ArrowFunctionExpression() {
        l = {
          upper: l,
          hasInOperator: false
        };
      },
      "ArrowFunctionExpression:exit"(h) {
        f(h), l = l.upper;
      }
    };
  }
};
tc.meta;
tc.create;
function mR(t4) {
  return t4.body.type === "BlockStatement";
}
var rc = {
  meta: {
    type: "layout",
    docs: {
      description: "require parentheses around arrow function arguments",
      category: "ECMAScript 6",
      recommended: false,
      url: "https://eslint.org/docs/rules/arrow-parens"
    },
    fixable: "code",
    schema: [{
      enum: ["always", "as-needed"]
    }, {
      type: "object",
      properties: {
        requireForBlockBody: {
          type: "boolean",
          default: false
        }
      },
      additionalProperties: false
    }],
    messages: {
      unexpectedParens: "Unexpected parentheses around single function argument.",
      expectedParens: "Expected parentheses around arrow function argument.",
      unexpectedParensInline: "Unexpected parentheses around single function argument having a body with no curly braces.",
      expectedParensBlock: "Expected parentheses around arrow function argument having a body with curly braces."
    }
  },
  create(t4) {
    const e = t4.options[0] === "as-needed", r = e && t4.options[1] && t4.options[1].requireForBlockBody === true, s = t4.getSourceCode();
    function n(i) {
      const u = s.getTokenBefore(i.params[0]);
      return u && E.isOpeningParenToken(u) && i.range[0] <= u.range[0] ? u : null;
    }
    function a(i) {
      return s.getTokenAfter(i.params[0], E.isClosingParenToken);
    }
    function o(i, u) {
      return s.commentsExistBetween(u, a(i));
    }
    function l(i, u) {
      const c = i.async ? 1 : 0;
      return s.getFirstToken(i, {
        skip: c
      }) !== u;
    }
    return {
      "ArrowFunctionExpression[params.length=1]"(i) {
        const u = !e || r && mR(i), c = n(i), f = c !== null, [h] = i.params;
        u && !f && t4.report({
          node: i,
          messageId: r ? "expectedParensBlock" : "expectedParens",
          loc: h.loc,
          *fix(p) {
            yield p.insertTextBefore(h, "("), yield p.insertTextAfter(h, ")");
          }
        }), !u && f && h.type === "Identifier" && !h.typeAnnotation && !i.returnType && !o(i, c) && !l(i, c) && t4.report({
          node: i,
          messageId: r ? "unexpectedParensInline" : "unexpectedParens",
          loc: h.loc,
          *fix(p) {
            const m = s.getTokenBefore(c), d = a(i);
            m && m.range[1] === c.range[0] && !E.canTokensBeAdjacent(m, s.getFirstToken(h)) && (yield p.insertTextBefore(c, " ")), yield p.removeRange([c.range[0], h.range[0]]), yield p.removeRange([h.range[1], d.range[1]]);
          }
        });
      }
    };
  }
};
rc.meta;
rc.create;
var nc = {
  meta: {
    type: "layout",
    docs: {
      description: "enforce consistent spacing before and after the arrow in arrow functions",
      category: "ECMAScript 6",
      recommended: false,
      url: "https://eslint.org/docs/rules/arrow-spacing"
    },
    fixable: "whitespace",
    schema: [{
      type: "object",
      properties: {
        before: {
          type: "boolean",
          default: true
        },
        after: {
          type: "boolean",
          default: true
        }
      },
      additionalProperties: false
    }],
    messages: {
      expectedBefore: "Missing space before =>.",
      unexpectedBefore: "Unexpected space before =>.",
      expectedAfter: "Missing space after =>.",
      unexpectedAfter: "Unexpected space after =>."
    }
  },
  create(t4) {
    const e = Object.assign({}, t4.options[0]);
    e.before = e.before !== false, e.after = e.after !== false;
    const r = t4.getSourceCode();
    function s(a) {
      const o = r.getTokenBefore(a.body, E.isArrowToken);
      return {
        before: r.getTokenBefore(o),
        arrow: o,
        after: r.getTokenAfter(o)
      };
    }
    function n(a) {
      const o = a.arrow.range[0] - a.before.range[1], l = a.after.range[0] - a.arrow.range[1];
      return {
        before: o,
        after: l
      };
    }
    return {
      ArrowFunctionExpression: function(a) {
        const o = s(a), l = n(o);
        e.before ? l.before === 0 && t4.report({
          node: o.before,
          messageId: "expectedBefore",
          fix(i) {
            return i.insertTextBefore(o.arrow, " ");
          }
        }) : l.before > 0 && t4.report({
          node: o.before,
          messageId: "unexpectedBefore",
          fix(i) {
            return i.removeRange([o.before.range[1], o.arrow.range[0]]);
          }
        }), e.after ? l.after === 0 && t4.report({
          node: o.after,
          messageId: "expectedAfter",
          fix(i) {
            return i.insertTextAfter(o.arrow, " ");
          }
        }) : l.after > 0 && t4.report({
          node: o.after,
          messageId: "unexpectedAfter",
          fix(i) {
            return i.removeRange([o.arrow.range[1], o.after.range[0]]);
          }
        });
      }
    };
  }
};
nc.meta;
nc.create;
var sc = {
  meta: {
    type: "suggestion",
    docs: {
      description: "enforce the use of variables within the scope they are defined",
      category: "Best Practices",
      recommended: false,
      url: "https://eslint.org/docs/rules/block-scoped-var"
    },
    schema: [],
    messages: {
      outOfScope: "'{{name}}' used outside of binding context."
    }
  },
  create(t4) {
    let e = [];
    function r(o) {
      e.push(o.range);
    }
    function s() {
      e.pop();
    }
    function n(o) {
      const l = o.identifier;
      t4.report({
        node: l,
        messageId: "outOfScope",
        data: {
          name: l.name
        }
      });
    }
    function a(o) {
      if (o.kind !== "var")
        return;
      const l = e[e.length - 1];
      function i(c) {
        const f = c.identifier.range;
        return f[0] < l[0] || f[1] > l[1];
      }
      const u = t4.getDeclaredVariables(o);
      for (let c = 0; c < u.length; ++c)
        u[c].references.filter(i).forEach(n);
    }
    return {
      Program(o) {
        e = [o.range];
      },
      BlockStatement: r,
      "BlockStatement:exit": s,
      ForStatement: r,
      "ForStatement:exit": s,
      ForInStatement: r,
      "ForInStatement:exit": s,
      ForOfStatement: r,
      "ForOfStatement:exit": s,
      SwitchStatement: r,
      "SwitchStatement:exit": s,
      CatchClause: r,
      "CatchClause:exit": s,
      VariableDeclaration: a
    };
  }
};
sc.meta;
sc.create;
var ac = {
  meta: {
    type: "layout",
    docs: {
      description: "disallow or enforce spaces inside of blocks after opening block and before closing block",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/block-spacing"
    },
    fixable: "whitespace",
    schema: [{
      enum: ["always", "never"]
    }],
    messages: {
      missing: "Requires a space {{location}} '{{token}}'.",
      extra: "Unexpected space(s) {{location}} '{{token}}'."
    }
  },
  create(t4) {
    const e = t4.options[0] !== "never", r = e ? "missing" : "extra", s = t4.getSourceCode();
    function n(l) {
      return l.type === "SwitchStatement" ? l.cases.length > 0 ? s.getTokenBefore(l.cases[0]) : s.getLastToken(l, 1) : s.getFirstToken(l);
    }
    function a(l, i) {
      return !E.isTokenOnSameLine(l, i) || s.isSpaceBetweenTokens(l, i) === e;
    }
    function o(l) {
      const i = n(l), u = s.getLastToken(l), c = s.getTokenAfter(i, {
        includeComments: true
      }), f = s.getTokenBefore(u, {
        includeComments: true
      });
      if (!(i.type !== "Punctuator" || i.value !== "{" || u.type !== "Punctuator" || u.value !== "}" || c === u) && !(!e && c.type === "Line")) {
        if (!a(i, c)) {
          let h = i.loc;
          r === "extra" && (h = {
            start: i.loc.end,
            end: c.loc.start
          }), t4.report({
            node: l,
            loc: h,
            messageId: r,
            data: {
              location: "after",
              token: i.value
            },
            fix(p) {
              return e ? p.insertTextBefore(c, " ") : p.removeRange([i.range[1], c.range[0]]);
            }
          });
        }
        if (!a(f, u)) {
          let h = u.loc;
          r === "extra" && (h = {
            start: f.loc.end,
            end: u.loc.start
          }), t4.report({
            node: l,
            loc: h,
            messageId: r,
            data: {
              location: "before",
              token: u.value
            },
            fix(p) {
              return e ? p.insertTextAfter(f, " ") : p.removeRange([f.range[1], u.range[0]]);
            }
          });
        }
      }
    }
    return {
      BlockStatement: o,
      SwitchStatement: o
    };
  }
};
ac.meta;
ac.create;
var ic = {
  meta: {
    type: "layout",
    docs: {
      description: "enforce consistent brace style for blocks",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/brace-style"
    },
    schema: [{
      enum: ["1tbs", "stroustrup", "allman"]
    }, {
      type: "object",
      properties: {
        allowSingleLine: {
          type: "boolean",
          default: false
        }
      },
      additionalProperties: false
    }],
    fixable: "whitespace",
    messages: {
      nextLineOpen: "Opening curly brace does not appear on the same line as controlling statement.",
      sameLineOpen: "Opening curly brace appears on the same line as controlling statement.",
      blockSameLine: "Statement inside of curly braces should be on next line.",
      nextLineClose: "Closing curly brace does not appear on the same line as the subsequent block.",
      singleLineClose: "Closing curly brace should be on the same line as opening curly brace or on the line after the previous block.",
      sameLineClose: "Closing curly brace appears on the same line as the subsequent block."
    }
  },
  create(t4) {
    const e = t4.options[0] || "1tbs", r = t4.options[1] || {}, s = t4.getSourceCode();
    function n(l, i) {
      const u = [l.range[1], i.range[0]];
      return s.text.slice(u[0], u[1]).trim() ? null : (f) => f.replaceTextRange(u, " ");
    }
    function a(l, i) {
      const u = s.getTokenBefore(l), c = s.getTokenAfter(l), f = s.getTokenBefore(i), h = r.allowSingleLine && E.isTokenOnSameLine(l, i);
      e !== "allman" && !E.isTokenOnSameLine(u, l) && t4.report({
        node: l,
        messageId: "nextLineOpen",
        fix: n(u, l)
      }), e === "allman" && E.isTokenOnSameLine(u, l) && !h && t4.report({
        node: l,
        messageId: "sameLineOpen",
        fix: (p) => p.insertTextBefore(l, `
`)
      }), E.isTokenOnSameLine(l, c) && c !== i && !h && t4.report({
        node: l,
        messageId: "blockSameLine",
        fix: (p) => p.insertTextAfter(l, `
`)
      }), f !== l && !h && E.isTokenOnSameLine(f, i) && t4.report({
        node: i,
        messageId: "singleLineClose",
        fix: (p) => p.insertTextBefore(i, `
`)
      });
    }
    function o(l) {
      const i = s.getTokenAfter(l);
      e === "1tbs" && !E.isTokenOnSameLine(l, i) && t4.report({
        node: l,
        messageId: "nextLineClose",
        fix: n(l, i)
      }), e !== "1tbs" && E.isTokenOnSameLine(l, i) && t4.report({
        node: l,
        messageId: "sameLineClose",
        fix: (u) => u.insertTextAfter(l, `
`)
      });
    }
    return {
      BlockStatement(l) {
        E.STATEMENT_LIST_PARENTS.has(l.parent.type) || a(s.getFirstToken(l), s.getLastToken(l));
      },
      ClassBody(l) {
        a(s.getFirstToken(l), s.getLastToken(l));
      },
      SwitchStatement(l) {
        const i = s.getLastToken(l), u = s.getTokenBefore(l.cases.length ? l.cases[0] : i);
        a(u, i);
      },
      IfStatement(l) {
        l.consequent.type === "BlockStatement" && l.alternate && o(s.getLastToken(l.consequent));
      },
      TryStatement(l) {
        o(s.getLastToken(l.block)), l.handler && l.finalizer && o(s.getLastToken(l.handler.body));
      }
    };
  }
};
ic.meta;
ic.create;
var oc = {
  meta: {
    deprecated: true,
    replacedBy: [],
    type: "suggestion",
    docs: {
      description: "require `return` statements after callbacks",
      category: "Node.js and CommonJS",
      recommended: false,
      url: "https://eslint.org/docs/rules/callback-return"
    },
    schema: [{
      type: "array",
      items: {
        type: "string"
      }
    }],
    messages: {
      missingReturn: "Expected return with your callback function."
    }
  },
  create(t4) {
    const e = t4.options[0] || ["callback", "cb", "next"], r = t4.getSourceCode();
    function s(l, i) {
      return l.parent ? i.indexOf(l.parent.type) === -1 ? s(l.parent, i) : l.parent : null;
    }
    function n(l) {
      if (l.type === "Identifier")
        return true;
      if (l.type === "MemberExpression") {
        if (l.object.type === "Identifier")
          return true;
        if (l.object.type === "MemberExpression")
          return n(l.object);
      }
      return false;
    }
    function a(l) {
      return n(l.callee) && e.indexOf(r.getText(l.callee)) > -1;
    }
    function o(l, i) {
      return !i || i.type !== "ExpressionStatement" ? false : i.expression === l || (i.expression.type === "BinaryExpression" || i.expression.type === "LogicalExpression") && i.expression.right === l;
    }
    return {
      CallExpression(l) {
        if (!a(l))
          return;
        const i = s(l, ["BlockStatement", "ReturnStatement", "ArrowFunctionExpression"]) || {};
        if (i.type !== "ReturnStatement" && i.type !== "ArrowFunctionExpression") {
          if (i.type === "BlockStatement") {
            const u = i.body[i.body.length - 1];
            if (o(l, u)) {
              const c = i.parent.type;
              if (c === "FunctionExpression" || c === "FunctionDeclaration" || c === "ArrowFunctionExpression")
                return;
            }
            if (u.type === "ReturnStatement" && o(l, i.body[i.body.length - 2]))
              return;
          }
          s(l, ["FunctionDeclaration", "FunctionExpression", "ArrowFunctionExpression"]) && t4.report({
            node: l,
            messageId: "missingReturn"
          });
        }
      }
    };
  }
};
oc.meta;
oc.create;
var lc = {
  meta: {
    type: "suggestion",
    docs: {
      description: "enforce camelcase naming convention",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/camelcase"
    },
    schema: [{
      type: "object",
      properties: {
        ignoreDestructuring: {
          type: "boolean",
          default: false
        },
        ignoreImports: {
          type: "boolean",
          default: false
        },
        ignoreGlobals: {
          type: "boolean",
          default: false
        },
        properties: {
          enum: ["always", "never"]
        },
        allow: {
          type: "array",
          items: [{
            type: "string"
          }],
          minItems: 0,
          uniqueItems: true
        }
      },
      additionalProperties: false
    }],
    messages: {
      notCamelCase: "Identifier '{{name}}' is not in camel case."
    }
  },
  create(t4) {
    const e = t4.options[0] || {};
    let r = e.properties || "";
    const s = e.ignoreDestructuring, n = e.ignoreImports, a = e.ignoreGlobals, o = e.allow || [];
    let l;
    r !== "always" && r !== "never" && (r = "always");
    const i = [], u = /* @__PURE__ */ new Set(["CallExpression", "NewExpression"]);
    function c(y) {
      return y.includes("_") && y !== y.toUpperCase();
    }
    function f(y) {
      return o.some((x) => y === x || y.match(new RegExp(x, "u")));
    }
    function h(y) {
      let x = y;
      for (; x; ) {
        const A = x.parent;
        if (A && A.type === "Property" && A.computed && A.key === x)
          return false;
        if (x.type === "ObjectPattern")
          return true;
        x = A;
      }
      return false;
    }
    function p(y) {
      if (y.parent.type === "MemberExpression" && y.parent.property === y && !y.parent.computed) {
        const x = y.parent.parent;
        return x.type === "Property" && x.value === y.parent && x.parent.type === "ObjectPattern" || x.type === "ArrayPattern" || x.type === "RestElement" || x.type === "AssignmentPattern" && x.left === y.parent;
      }
      return false;
    }
    function m(y) {
      const x = l.set.get(y.name);
      return x && x.defs.length === 0 && x.references.some((A) => A.identifier === y);
    }
    function d(y) {
      const x = y.parent;
      return x.type === "Property" && x.parent.type === "ObjectExpression" && !x.computed && x.key === y;
    }
    function g(y) {
      i.includes(y) || (i.push(y), t4.report({
        node: y,
        messageId: "notCamelCase",
        data: {
          name: y.name
        }
      }));
    }
    return {
      Program() {
        l = t4.getScope();
      },
      Identifier(y) {
        const x = y.name, A = c(x.replace(/^_+|_+$/gu, "")), b = y.parent.type === "MemberExpression" ? y.parent.parent : y.parent;
        if (!f(x) && !(a && m(y) && !d(y)))
          if (y.parent.type === "MemberExpression") {
            if (r === "never")
              return;
            (y.parent.object.type === "Identifier" && y.parent.object.name === y.name && A || b.type === "AssignmentExpression" && A && (b.right.type !== "MemberExpression" || b.left.type === "MemberExpression" && b.left.property.name === y.name) || p(y) && A) && g(y);
          } else if (y.parent.type === "Property" || y.parent.type === "AssignmentPattern") {
            if (y.parent.parent && y.parent.parent.type === "ObjectPattern") {
              y.parent.shorthand && y.parent.value.left && A && g(y);
              const v = y.parent.key.name === y.parent.value.name;
              if (A && y.parent.computed && g(y), y.parent.key === y && y.parent.value !== y)
                return;
              y.parent.value.name && A && !(v && s) && g(y);
            }
            if (r === "never" || s && h(y))
              return;
            A && !u.has(b.type) && y.parent.right !== y && g(y);
          } else if (["ImportSpecifier", "ImportNamespaceSpecifier", "ImportDefaultSpecifier"].includes(y.parent.type)) {
            if (y.parent.type === "ImportSpecifier" && n)
              return;
            y.parent.local && y.parent.local.name === y.name && A && g(y);
          } else
            A && !u.has(b.type) && g(y);
      }
    };
  }
};
lc.meta;
lc.create;
var gy = /[A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B2\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC00-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDE00-\uDE11\uDE13-\uDE2B\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF5D-\uDF61]|\uD805[\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDE00-\uDE2F\uDE44\uDE80-\uDEAA]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF98]|[\uD80C\uD840-\uD868\uD86A-\uD86C][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D]|\uD87E[\uDC00-\uDE1D]/u;
var dR = E.COMMENTS_IGNORE_PATTERN;
var gR = /\s/gu;
var yR = /^\s*[^:/?#\s]+:\/\/[^?#]/u;
var Mo = {
  type: "object",
  properties: {
    ignorePattern: {
      type: "string"
    },
    ignoreInlineComments: {
      type: "boolean"
    },
    ignoreConsecutiveComments: {
      type: "boolean"
    }
  },
  additionalProperties: false
};
var xR = {
  ignorePattern: "",
  ignoreInlineComments: false,
  ignoreConsecutiveComments: false
};
function yy(t4, e) {
  return Object.assign({}, xR, t4[e] || t4);
}
function vR(t4 = {}) {
  return {
    Line: yy(t4, "line"),
    Block: yy(t4, "block")
  };
}
function ER(t4) {
  Object.keys(t4).forEach((e) => {
    const r = t4[e].ignorePattern;
    if (r) {
      const s = RegExp(`^\\s*(?:${r})`, "u");
      t4[e].ignorePatternRegExp = s;
    }
  });
}
var uc = {
  meta: {
    type: "suggestion",
    docs: {
      description: "enforce or disallow capitalization of the first letter of a comment",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/capitalized-comments"
    },
    fixable: "code",
    schema: [{
      enum: ["always", "never"]
    }, {
      oneOf: [Mo, {
        type: "object",
        properties: {
          line: Mo,
          block: Mo
        },
        additionalProperties: false
      }]
    }],
    messages: {
      unexpectedLowercaseComment: "Comments should not begin with a lowercase character.",
      unexpectedUppercaseComment: "Comments should not begin with an uppercase character."
    }
  },
  create(t4) {
    const e = t4.options[0] || "always", r = vR(t4.options[1]), s = t4.getSourceCode();
    ER(r);
    function n(i) {
      const u = s.getTokenBefore(i, {
        includeComments: true
      }), c = s.getTokenAfter(i, {
        includeComments: true
      });
      return !!(u && c && i.loc.start.line === u.loc.end.line && i.loc.end.line === c.loc.start.line);
    }
    function a(i) {
      const u = s.getTokenBefore(i, {
        includeComments: true
      });
      return !!(u && ["Block", "Line"].indexOf(u.type) !== -1);
    }
    function o(i, u) {
      if (dR.test(i.value))
        return true;
      const c = i.value.replace(/\*/gu, "");
      if (u.ignorePatternRegExp && u.ignorePatternRegExp.test(c) || u.ignoreInlineComments && n(i) || u.ignoreConsecutiveComments && a(i) || yR.test(c))
        return true;
      const f = c.replace(gR, "");
      if (f.length === 0)
        return true;
      const h = f[0];
      if (!gy.test(h))
        return true;
      const p = h !== h.toLocaleLowerCase(), m = h !== h.toLocaleUpperCase();
      return !(e === "always" && m || e === "never" && p);
    }
    function l(i) {
      const u = r[i.type];
      if (!o(i, u)) {
        const f = e === "always" ? "unexpectedLowercaseComment" : "unexpectedUppercaseComment";
        t4.report({
          node: null,
          loc: i.loc,
          messageId: f,
          fix(h) {
            const p = i.value.match(gy);
            return h.replaceTextRange([i.range[0] + p.index + 2, i.range[0] + p.index + 3], e === "always" ? p[0].toLocaleUpperCase() : p[0].toLocaleLowerCase());
          }
        });
      }
    }
    return {
      Program() {
        s.getAllComments().filter((u) => u.type !== "Shebang").forEach(l);
      }
    };
  }
};
uc.meta;
uc.create;
var cc = {
  meta: {
    type: "suggestion",
    docs: {
      description: "enforce that class methods utilize `this`",
      category: "Best Practices",
      recommended: false,
      url: "https://eslint.org/docs/rules/class-methods-use-this"
    },
    schema: [{
      type: "object",
      properties: {
        exceptMethods: {
          type: "array",
          items: {
            type: "string"
          }
        }
      },
      additionalProperties: false
    }],
    messages: {
      missingThis: "Expected 'this' to be used by class {{name}}."
    }
  },
  create(t4) {
    const e = Object.assign({}, t4.options[0]), r = new Set(e.exceptMethods || []), s = [];
    function n() {
      s.push(false);
    }
    function a(u) {
      return !u.static && u.kind !== "constructor" && u.type === "MethodDefinition";
    }
    function o(u) {
      return a(u) && (u.computed || !r.has(u.key.name));
    }
    function l(u) {
      const c = s.pop();
      o(u.parent) && !c && t4.report({
        node: u,
        messageId: "missingThis",
        data: {
          name: E.getFunctionNameWithKind(u)
        }
      });
    }
    function i() {
      s.length && (s[s.length - 1] = true);
    }
    return {
      FunctionDeclaration: n,
      "FunctionDeclaration:exit": l,
      FunctionExpression: n,
      "FunctionExpression:exit": l,
      ThisExpression: i,
      Super: i
    };
  }
};
cc.meta;
cc.create;
var Mn = Object.freeze({
  arrays: "never",
  objects: "never",
  imports: "never",
  exports: "never",
  functions: "never"
});
function bR(t4) {
  return !(t4.type === "RestElement" || t4.type === "RestProperty" || t4.type === "ExperimentalRestProperty");
}
function CR(t4, e) {
  return typeof t4 == "string" ? {
    arrays: t4,
    objects: t4,
    imports: t4,
    exports: t4,
    functions: !e || e < 8 ? "ignore" : t4
  } : typeof t4 == "object" && t4 !== null ? {
    arrays: t4.arrays || Mn.arrays,
    objects: t4.objects || Mn.objects,
    imports: t4.imports || Mn.imports,
    exports: t4.exports || Mn.exports,
    functions: t4.functions || Mn.functions
  } : Mn;
}
var pc = {
  meta: {
    type: "layout",
    docs: {
      description: "require or disallow trailing commas",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/comma-dangle"
    },
    fixable: "code",
    schema: {
      definitions: {
        value: {
          enum: ["always-multiline", "always", "never", "only-multiline"]
        },
        valueWithIgnore: {
          enum: ["always-multiline", "always", "ignore", "never", "only-multiline"]
        }
      },
      type: "array",
      items: [{
        oneOf: [{
          $ref: "#/definitions/value"
        }, {
          type: "object",
          properties: {
            arrays: {
              $ref: "#/definitions/valueWithIgnore"
            },
            objects: {
              $ref: "#/definitions/valueWithIgnore"
            },
            imports: {
              $ref: "#/definitions/valueWithIgnore"
            },
            exports: {
              $ref: "#/definitions/valueWithIgnore"
            },
            functions: {
              $ref: "#/definitions/valueWithIgnore"
            }
          },
          additionalProperties: false
        }]
      }]
    },
    messages: {
      unexpected: "Unexpected trailing comma.",
      missing: "Missing trailing comma."
    }
  },
  create(t4) {
    const e = CR(t4.options[0], t4.parserOptions.ecmaVersion), r = t4.getSourceCode();
    function s(u) {
      function c(f) {
        return f[f.length - 1];
      }
      switch (u.type) {
        case "ObjectExpression":
        case "ObjectPattern":
          return c(u.properties);
        case "ArrayExpression":
        case "ArrayPattern":
          return c(u.elements);
        case "ImportDeclaration":
        case "ExportNamedDeclaration":
          return c(u.specifiers);
        case "FunctionDeclaration":
        case "FunctionExpression":
        case "ArrowFunctionExpression":
          return c(u.params);
        case "CallExpression":
        case "NewExpression":
          return c(u.arguments);
        default:
          return null;
      }
    }
    function n(u, c) {
      switch (u.type) {
        case "ObjectExpression":
        case "ArrayExpression":
        case "CallExpression":
        case "NewExpression":
          return r.getLastToken(u, 1);
        default: {
          const f = r.getTokenAfter(c);
          return E.isCommaToken(f) ? f : r.getLastToken(c);
        }
      }
    }
    function a(u) {
      const c = s(u);
      if (!c)
        return false;
      const f = n(u, c);
      return r.getTokenAfter(f).loc.end.line !== f.loc.end.line;
    }
    function o(u) {
      const c = s(u);
      if (!c || u.type === "ImportDeclaration" && c.type !== "ImportSpecifier")
        return;
      const f = n(u, c);
      E.isCommaToken(f) && t4.report({
        node: c,
        loc: f.loc,
        messageId: "unexpected",
        fix(h) {
          return h.remove(f);
        }
      });
    }
    function l(u) {
      const c = s(u);
      if (!c || u.type === "ImportDeclaration" && c.type !== "ImportSpecifier")
        return;
      if (!bR(c)) {
        o(u);
        return;
      }
      const f = n(u, c);
      f.value !== "," && t4.report({
        node: c,
        loc: {
          start: f.loc.end,
          end: E.getNextLocation(r, f.loc.end)
        },
        messageId: "missing",
        fix(h) {
          return h.insertTextAfter(f, ",");
        }
      });
    }
    const i = {
      always: l,
      "always-multiline": function(u) {
        a(u) ? l(u) : o(u);
      },
      "only-multiline": function(u) {
        a(u) || o(u);
      },
      never: o,
      ignore: () => {
      }
    };
    return {
      ObjectExpression: i[e.objects],
      ObjectPattern: i[e.objects],
      ArrayExpression: i[e.arrays],
      ArrayPattern: i[e.arrays],
      ImportDeclaration: i[e.imports],
      ExportNamedDeclaration: i[e.exports],
      FunctionDeclaration: i[e.functions],
      FunctionExpression: i[e.functions],
      ArrowFunctionExpression: i[e.functions],
      CallExpression: i[e.functions],
      NewExpression: i[e.functions]
    };
  }
};
pc.meta;
pc.create;
var fc = {
  meta: {
    type: "layout",
    docs: {
      description: "enforce consistent spacing before and after commas",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/comma-spacing"
    },
    fixable: "whitespace",
    schema: [{
      type: "object",
      properties: {
        before: {
          type: "boolean",
          default: false
        },
        after: {
          type: "boolean",
          default: true
        }
      },
      additionalProperties: false
    }],
    messages: {
      missing: "A space is required {{loc}} ','.",
      unexpected: "There should be no space {{loc}} ','."
    }
  },
  create(t4) {
    const e = t4.getSourceCode(), r = e.tokensAndComments, s = {
      before: t4.options[0] ? t4.options[0].before : false,
      after: t4.options[0] ? t4.options[0].after : true
    }, n = [];
    function a(i, u, c) {
      t4.report({
        node: i,
        fix(f) {
          if (s[u])
            return u === "before" ? f.insertTextBefore(i, " ") : f.insertTextAfter(i, " ");
          let h, p;
          return u === "before" ? (h = c.range[1], p = i.range[0]) : (h = i.range[1], p = c.range[0]), f.replaceTextRange([h, p], "");
        },
        messageId: s[u] ? "missing" : "unexpected",
        data: {
          loc: u
        }
      });
    }
    function o(i, u) {
      i.left && E.isTokenOnSameLine(i.left, i.comma) && s.before !== e.isSpaceBetweenTokens(i.left, i.comma) && a(u, "before", i.left), !(i.right && E.isClosingParenToken(i.right)) && (i.right && !s.after && i.right.type === "Line" || i.right && E.isTokenOnSameLine(i.comma, i.right) && s.after !== e.isSpaceBetweenTokens(i.comma, i.right) && a(u, "after", i.right));
    }
    function l(i) {
      let u = e.getFirstToken(i);
      i.elements.forEach((c) => {
        let f;
        c === null ? (f = e.getTokenAfter(u), E.isCommaToken(f) && n.push(f)) : f = e.getTokenAfter(c), u = f;
      });
    }
    return {
      "Program:exit"() {
        r.forEach((i, u) => {
          if (!E.isCommaToken(i) || i && i.type === "JSXText")
            return;
          const c = r[u - 1], f = r[u + 1];
          o({
            comma: i,
            left: E.isCommaToken(c) || n.includes(i) ? null : c,
            right: E.isCommaToken(f) ? null : f
          }, i);
        });
      },
      ArrayExpression: l,
      ArrayPattern: l
    };
  }
};
fc.meta;
fc.create;
var hc = {
  meta: {
    type: "layout",
    docs: {
      description: "enforce consistent comma style",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/comma-style"
    },
    fixable: "code",
    schema: [{
      enum: ["first", "last"]
    }, {
      type: "object",
      properties: {
        exceptions: {
          type: "object",
          additionalProperties: {
            type: "boolean"
          }
        }
      },
      additionalProperties: false
    }],
    messages: {
      unexpectedLineBeforeAndAfterComma: "Bad line breaking before and after ','.",
      expectedCommaFirst: "',' should be placed first.",
      expectedCommaLast: "',' should be placed last."
    }
  },
  create(t4) {
    const e = t4.options[0] || "last", r = t4.getSourceCode(), s = {
      ArrayPattern: true,
      ArrowFunctionExpression: true,
      CallExpression: true,
      FunctionDeclaration: true,
      FunctionExpression: true,
      ImportDeclaration: true,
      ObjectPattern: true,
      NewExpression: true
    };
    if (t4.options.length === 2 && Object.prototype.hasOwnProperty.call(t4.options[1], "exceptions")) {
      const u = Object.keys(t4.options[1].exceptions);
      for (let c = 0; c < u.length; c++)
        s[u[c]] = t4.options[1].exceptions[u[c]];
    }
    function n(u, c) {
      switch (u) {
        case "between":
          return `,${c.replace(E.LINEBREAK_MATCHER, "")}`;
        case "first":
          return `${c},`;
        case "last":
          return `,${c}`;
        default:
          return "";
      }
    }
    function a(u, c, f, h) {
      const p = r.text.slice(c.range[1], f.range[0]) + r.text.slice(f.range[1], h.range[0]), m = [c.range[1], h.range[0]];
      return function(d) {
        return d.replaceTextRange(m, n(u, p));
      };
    }
    function o(u, c, f, h) {
      if (!(E.isTokenOnSameLine(c, f) && E.isTokenOnSameLine(u, c)))
        if (!E.isTokenOnSameLine(c, f) && !E.isTokenOnSameLine(u, c)) {
          const p = r.getCommentsAfter(c)[0], m = p && p.type === "Block" && E.isTokenOnSameLine(c, p) ? e : "between";
          t4.report({
            node: h,
            loc: c.loc,
            messageId: "unexpectedLineBeforeAndAfterComma",
            fix: a(m, u, c, f)
          });
        } else
          e === "first" && !E.isTokenOnSameLine(c, f) ? t4.report({
            node: h,
            loc: c.loc,
            messageId: "expectedCommaFirst",
            fix: a(e, u, c, f)
          }) : e === "last" && E.isTokenOnSameLine(c, f) && t4.report({
            node: h,
            loc: c.loc,
            messageId: "expectedCommaLast",
            fix: a(e, u, c, f)
          });
    }
    function l(u, c) {
      const f = u[c], h = u.type === "ArrayExpression" || u.type === "ArrayPattern";
      if (f.length > 1 || h) {
        let p = r.getFirstToken(u);
        if (f.forEach((m) => {
          const d = m ? r.getTokenBefore(m) : p, g = m ? r.getFirstToken(m) : r.getTokenAfter(d);
          if (E.isCommaToken(d) && o(p, d, g, m || g), m) {
            const y = r.getTokenAfter(m, E.isNotClosingParenToken);
            p = y ? r.getTokenBefore(y) : r.ast.tokens[r.ast.tokens.length - 1];
          } else
            p = g;
        }), h) {
          const m = r.getLastToken(u), d = r.getTokenBefore(m);
          E.isCommaToken(d) && o(r.getTokenBefore(d), d, m, m);
        }
      }
    }
    const i = {};
    return s.VariableDeclaration || (i.VariableDeclaration = function(u) {
      l(u, "declarations");
    }), s.ObjectExpression || (i.ObjectExpression = function(u) {
      l(u, "properties");
    }), s.ObjectPattern || (i.ObjectPattern = function(u) {
      l(u, "properties");
    }), s.ArrayExpression || (i.ArrayExpression = function(u) {
      l(u, "elements");
    }), s.ArrayPattern || (i.ArrayPattern = function(u) {
      l(u, "elements");
    }), s.FunctionDeclaration || (i.FunctionDeclaration = function(u) {
      l(u, "params");
    }), s.FunctionExpression || (i.FunctionExpression = function(u) {
      l(u, "params");
    }), s.ArrowFunctionExpression || (i.ArrowFunctionExpression = function(u) {
      l(u, "params");
    }), s.CallExpression || (i.CallExpression = function(u) {
      l(u, "arguments");
    }), s.ImportDeclaration || (i.ImportDeclaration = function(u) {
      l(u, "specifiers");
    }), s.NewExpression || (i.NewExpression = function(u) {
      l(u, "arguments");
    }), i;
  }
};
hc.meta;
hc.create;
function SR(t4) {
  return t4.length <= 1 ? t4.toUpperCase() : t4[0].toUpperCase() + t4.slice(1);
}
var Xs = {
  upperCaseFirst: SR
};
var {
  upperCaseFirst: AR
} = Xs;
var mc = {
  meta: {
    type: "suggestion",
    docs: {
      description: "enforce a maximum cyclomatic complexity allowed in a program",
      category: "Best Practices",
      recommended: false,
      url: "https://eslint.org/docs/rules/complexity"
    },
    schema: [{
      oneOf: [{
        type: "integer",
        minimum: 0
      }, {
        type: "object",
        properties: {
          maximum: {
            type: "integer",
            minimum: 0
          },
          max: {
            type: "integer",
            minimum: 0
          }
        },
        additionalProperties: false
      }]
    }],
    messages: {
      complex: "{{name}} has a complexity of {{complexity}}. Maximum allowed is {{max}}."
    }
  },
  create(t4) {
    const e = t4.options[0];
    let r = 20;
    typeof e == "object" && (Object.prototype.hasOwnProperty.call(e, "maximum") || Object.prototype.hasOwnProperty.call(e, "max")) ? r = e.maximum || e.max : typeof e == "number" && (r = e);
    const s = [];
    function n() {
      s.push(1);
    }
    function a(l) {
      const i = AR(E.getFunctionNameWithKind(l)), u = s.pop();
      u > r && t4.report({
        node: l,
        messageId: "complex",
        data: {
          name: i,
          complexity: u,
          max: r
        }
      });
    }
    function o() {
      s.length && s[s.length - 1]++;
    }
    return {
      FunctionDeclaration: n,
      FunctionExpression: n,
      ArrowFunctionExpression: n,
      "FunctionDeclaration:exit": a,
      "FunctionExpression:exit": a,
      "ArrowFunctionExpression:exit": a,
      CatchClause: o,
      ConditionalExpression: o,
      LogicalExpression: o,
      ForStatement: o,
      ForInStatement: o,
      ForOfStatement: o,
      IfStatement: o,
      SwitchCase: function(l) {
        l.test && o();
      },
      WhileStatement: o,
      DoWhileStatement: o,
      AssignmentExpression(l) {
        E.isLogicalAssignmentOperator(l.operator) && o();
      }
    };
  }
};
mc.meta;
mc.create;
var dc = {
  meta: {
    type: "layout",
    docs: {
      description: "enforce consistent spacing inside computed property brackets",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/computed-property-spacing"
    },
    fixable: "whitespace",
    schema: [{
      enum: ["always", "never"]
    }, {
      type: "object",
      properties: {
        enforceForClassMembers: {
          type: "boolean",
          default: true
        }
      },
      additionalProperties: false
    }],
    messages: {
      unexpectedSpaceBefore: "There should be no space before '{{tokenValue}}'.",
      unexpectedSpaceAfter: "There should be no space after '{{tokenValue}}'.",
      missingSpaceBefore: "A space is required before '{{tokenValue}}'.",
      missingSpaceAfter: "A space is required after '{{tokenValue}}'."
    }
  },
  create(t4) {
    const e = t4.getSourceCode(), r = t4.options[0] === "always", s = !t4.options[1] || t4.options[1].enforceForClassMembers;
    function n(c, f, h) {
      t4.report({
        node: c,
        loc: {
          start: f.loc.end,
          end: h.loc.start
        },
        messageId: "unexpectedSpaceAfter",
        data: {
          tokenValue: f.value
        },
        fix(p) {
          return p.removeRange([f.range[1], h.range[0]]);
        }
      });
    }
    function a(c, f, h) {
      t4.report({
        node: c,
        loc: {
          start: h.loc.end,
          end: f.loc.start
        },
        messageId: "unexpectedSpaceBefore",
        data: {
          tokenValue: f.value
        },
        fix(p) {
          return p.removeRange([h.range[1], f.range[0]]);
        }
      });
    }
    function o(c, f) {
      t4.report({
        node: c,
        loc: f.loc,
        messageId: "missingSpaceAfter",
        data: {
          tokenValue: f.value
        },
        fix(h) {
          return h.insertTextAfter(f, " ");
        }
      });
    }
    function l(c, f) {
      t4.report({
        node: c,
        loc: f.loc,
        messageId: "missingSpaceBefore",
        data: {
          tokenValue: f.value
        },
        fix(h) {
          return h.insertTextBefore(f, " ");
        }
      });
    }
    function i(c) {
      return function(f) {
        if (!f.computed)
          return;
        const h = f[c], p = e.getTokenBefore(h, E.isOpeningBracketToken), m = e.getTokenAfter(p, {
          includeComments: true
        }), d = e.getTokenAfter(h, E.isClosingBracketToken), g = e.getTokenBefore(d, {
          includeComments: true
        });
        E.isTokenOnSameLine(p, m) && (r ? !e.isSpaceBetweenTokens(p, m) && E.isTokenOnSameLine(p, m) && o(f, p) : e.isSpaceBetweenTokens(p, m) && n(f, p, m)), E.isTokenOnSameLine(g, d) && (r ? !e.isSpaceBetweenTokens(g, d) && E.isTokenOnSameLine(g, d) && l(f, d) : e.isSpaceBetweenTokens(g, d) && a(f, d, g));
      };
    }
    const u = {
      Property: i("key"),
      MemberExpression: i("property")
    };
    return s && (u.MethodDefinition = i("key")), u;
  }
};
dc.meta;
dc.create;
var {
  upperCaseFirst: DR
} = Xs;
function wR(t4) {
  return !t4.reachable;
}
function kR(t4) {
  return t4.type === "FunctionExpression" && t4.parent && t4.parent.type === "MethodDefinition" && t4.parent.kind === "constructor";
}
var gc = {
  meta: {
    type: "suggestion",
    docs: {
      description: "require `return` statements to either always or never specify values",
      category: "Best Practices",
      recommended: false,
      url: "https://eslint.org/docs/rules/consistent-return"
    },
    schema: [{
      type: "object",
      properties: {
        treatUndefinedAsUnspecified: {
          type: "boolean",
          default: false
        }
      },
      additionalProperties: false
    }],
    messages: {
      missingReturn: "Expected to return a value at the end of {{name}}.",
      missingReturnValue: "{{name}} expected a return value.",
      unexpectedReturnValue: "{{name}} expected no return value."
    }
  },
  create(t4) {
    const r = (t4.options[0] || {}).treatUndefinedAsUnspecified === true;
    let s = null;
    function n(a) {
      let o, l;
      !s.hasReturnValue || s.codePath.currentSegments.every(wR) || E.isES5Constructor(a) || kR(a) || (a.type === "Program" ? (o = {
        line: 1,
        column: 0
      }, l = "program") : a.type === "ArrowFunctionExpression" ? o = t4.getSourceCode().getTokenBefore(a.body, E.isArrowToken).loc : a.parent.type === "MethodDefinition" || a.parent.type === "Property" && a.parent.method ? o = a.parent.key.loc : o = (a.id || t4.getSourceCode().getFirstToken(a)).loc, l || (l = E.getFunctionNameWithKind(a)), t4.report({
        node: a,
        loc: o,
        messageId: "missingReturn",
        data: {
          name: l
        }
      }));
    }
    return {
      onCodePathStart(a, o) {
        s = {
          upper: s,
          codePath: a,
          hasReturn: false,
          hasReturnValue: false,
          messageId: "",
          node: o
        };
      },
      onCodePathEnd() {
        s = s.upper;
      },
      ReturnStatement(a) {
        const o = a.argument;
        let l = !!o;
        r && l && (l = !E.isSpecificId(o, "undefined") && o.operator !== "void"), s.hasReturn ? s.hasReturnValue !== l && t4.report({
          node: a,
          messageId: s.messageId,
          data: s.data
        }) : (s.hasReturn = true, s.hasReturnValue = l, s.messageId = l ? "missingReturnValue" : "unexpectedReturnValue", s.data = {
          name: s.node.type === "Program" ? "Program" : DR(E.getFunctionNameWithKind(s.node))
        });
      },
      "Program:exit": n,
      "FunctionDeclaration:exit": n,
      "FunctionExpression:exit": n,
      "ArrowFunctionExpression:exit": n
    };
  }
};
gc.meta;
gc.create;
var yc = {
  meta: {
    type: "suggestion",
    docs: {
      description: "enforce consistent naming when capturing the current execution context",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/consistent-this"
    },
    schema: {
      type: "array",
      items: {
        type: "string",
        minLength: 1
      },
      uniqueItems: true
    },
    messages: {
      aliasNotAssignedToThis: "Designated alias '{{name}}' is not assigned to 'this'.",
      unexpectedAlias: "Unexpected alias '{{name}}' for 'this'."
    }
  },
  create(t4) {
    let e = [];
    t4.options.length === 0 ? e.push("that") : e = t4.options;
    function r(o, l) {
      t4.report({
        node: o,
        messageId: "aliasNotAssignedToThis",
        data: {
          name: l
        }
      });
    }
    function s(o, l, i) {
      const u = i.type === "ThisExpression";
      e.indexOf(l) !== -1 ? (!u || o.operator && o.operator !== "=") && r(o, l) : u && t4.report({
        node: o,
        messageId: "unexpectedAlias",
        data: {
          name: l
        }
      });
    }
    function n(o, l) {
      const i = l.set.get(o);
      i && (i.defs.some((u) => u.node.type === "VariableDeclarator" && u.node.init !== null) || i.references.some((u) => {
        const c = u.writeExpr;
        return u.from === l && c && c.type === "ThisExpression" && c.parent.operator === "=";
      }) || i.defs.map((u) => u.node).forEach((u) => {
        r(u, o);
      }));
    }
    function a() {
      const o = t4.getScope();
      e.forEach((l) => {
        n(l, o);
      });
    }
    return {
      "Program:exit": a,
      "FunctionExpression:exit": a,
      "FunctionDeclaration:exit": a,
      VariableDeclarator(o) {
        const l = o.id, i = l.type === "ArrayPattern" || l.type === "ObjectPattern";
        o.init !== null && !i && s(o, l.name, o.init);
      },
      AssignmentExpression(o) {
        o.left.type === "Identifier" && s(o, o.left.name, o.right);
      }
    };
  }
};
yc.meta;
yc.create;
function TR(t4) {
  return t4.reachable;
}
function FR(t4) {
  return t4.type === "FunctionExpression" && t4.parent.type === "MethodDefinition" && t4.parent.kind === "constructor";
}
function Sr(t4) {
  if (!t4)
    return false;
  switch (t4.type) {
    case "ClassExpression":
    case "FunctionExpression":
    case "ThisExpression":
    case "MemberExpression":
    case "CallExpression":
    case "NewExpression":
    case "ChainExpression":
    case "YieldExpression":
    case "TaggedTemplateExpression":
    case "MetaProperty":
      return true;
    case "Identifier":
      return t4.name !== "undefined";
    case "AssignmentExpression":
      return ["=", "&&="].includes(t4.operator) ? Sr(t4.right) : ["||=", "??="].includes(t4.operator) ? Sr(t4.left) || Sr(t4.right) : false;
    case "LogicalExpression":
      return t4.operator === "&&" ? Sr(t4.right) : Sr(t4.left) || Sr(t4.right);
    case "ConditionalExpression":
      return Sr(t4.alternate) || Sr(t4.consequent);
    case "SequenceExpression": {
      const e = t4.expressions[t4.expressions.length - 1];
      return Sr(e);
    }
    default:
      return false;
  }
}
var xc = {
  meta: {
    type: "problem",
    docs: {
      description: "require `super()` calls in constructors",
      category: "ECMAScript 6",
      recommended: true,
      url: "https://eslint.org/docs/rules/constructor-super"
    },
    schema: [],
    messages: {
      missingSome: "Lacked a call of 'super()' in some code paths.",
      missingAll: "Expected to call 'super()'.",
      duplicate: "Unexpected duplicate 'super()'.",
      badSuper: "Unexpected 'super()' because 'super' is not a constructor.",
      unexpected: "Unexpected 'super()'."
    }
  },
  create(t4) {
    let e = null, r = /* @__PURE__ */ Object.create(null);
    function s(a) {
      return a.reachable && r[a.id].calledInSomePaths;
    }
    function n(a) {
      return a.nextSegments.length === 1 && a.nextSegments[0].isLoopedPrevSegment(a) ? true : a.reachable && r[a.id].calledInEveryPaths;
    }
    return {
      onCodePathStart(a, o) {
        if (FR(o)) {
          const i = o.parent.parent.parent.superClass;
          e = {
            upper: e,
            isConstructor: true,
            hasExtends: !!i,
            superIsConstructor: Sr(i),
            codePath: a
          };
        } else
          e = {
            upper: e,
            isConstructor: false,
            hasExtends: false,
            superIsConstructor: false,
            codePath: a
          };
      },
      onCodePathEnd(a, o) {
        const l = e.hasExtends;
        if (e = e.upper, !l)
          return;
        const i = a.returnedSegments, u = i.every(n), c = i.some(s);
        u || t4.report({
          messageId: c ? "missingSome" : "missingAll",
          node: o.parent
        });
      },
      onCodePathSegmentStart(a) {
        if (!(e && e.isConstructor && e.hasExtends))
          return;
        const o = r[a.id] = {
          calledInSomePaths: false,
          calledInEveryPaths: false,
          validNodes: []
        }, l = a.prevSegments;
        l.length > 0 && (o.calledInSomePaths = l.some(s), o.calledInEveryPaths = l.every(n));
      },
      onCodePathSegmentLoop(a, o) {
        if (!(e && e.isConstructor && e.hasExtends))
          return;
        const l = o.prevSegments.length >= 2;
        e.codePath.traverseSegments({
          first: o,
          last: a
        }, (i) => {
          const u = r[i.id], c = i.prevSegments;
          if (u.calledInSomePaths = c.some(s), u.calledInEveryPaths = c.every(n), u.calledInSomePaths || l) {
            const f = u.validNodes;
            u.validNodes = [];
            for (let h = 0; h < f.length; ++h) {
              const p = f[h];
              t4.report({
                messageId: "duplicate",
                node: p
              });
            }
          }
        });
      },
      "CallExpression:exit"(a) {
        if (e && e.isConstructor && a.callee.type === "Super")
          if (e.hasExtends) {
            const o = e.codePath.currentSegments;
            let l = false, i = null;
            for (let u = 0; u < o.length; ++u) {
              const c = o[u];
              c.reachable && (i = r[c.id], l = l || i.calledInSomePaths, i.calledInSomePaths = i.calledInEveryPaths = true);
            }
            i && (l ? t4.report({
              messageId: "duplicate",
              node: a
            }) : e.superIsConstructor ? i.validNodes.push(a) : t4.report({
              messageId: "badSuper",
              node: a
            }));
          } else
            e.codePath.currentSegments.some(TR) && t4.report({
              messageId: "unexpected",
              node: a
            });
      },
      ReturnStatement(a) {
        if (!(e && e.isConstructor && e.hasExtends) || !a.argument)
          return;
        const o = e.codePath.currentSegments;
        for (let l = 0; l < o.length; ++l) {
          const i = o[l];
          if (i.reachable) {
            const u = r[i.id];
            u.calledInSomePaths = u.calledInEveryPaths = true;
          }
        }
      },
      "Program:exit"() {
        r = /* @__PURE__ */ Object.create(null);
      }
    };
  }
};
xc.meta;
xc.create;
var vc = {
  meta: {
    type: "suggestion",
    docs: {
      description: "enforce consistent brace style for all control statements",
      category: "Best Practices",
      recommended: false,
      url: "https://eslint.org/docs/rules/curly"
    },
    schema: {
      anyOf: [{
        type: "array",
        items: [{
          enum: ["all"]
        }],
        minItems: 0,
        maxItems: 1
      }, {
        type: "array",
        items: [{
          enum: ["multi", "multi-line", "multi-or-nest"]
        }, {
          enum: ["consistent"]
        }],
        minItems: 0,
        maxItems: 2
      }]
    },
    fixable: "code",
    messages: {
      missingCurlyAfter: "Expected { after '{{name}}'.",
      missingCurlyAfterCondition: "Expected { after '{{name}}' condition.",
      unexpectedCurlyAfter: "Unnecessary { after '{{name}}'.",
      unexpectedCurlyAfterCondition: "Unnecessary { after '{{name}}' condition."
    }
  },
  create(t4) {
    const e = t4.options[0] === "multi", r = t4.options[0] === "multi-line", s = t4.options[0] === "multi-or-nest", n = t4.options[1] === "consistent", a = t4.getSourceCode();
    function o(g) {
      const y = a.getTokenBefore(g), x = a.getLastToken(g), A = E.isSemicolonToken(x) ? a.getTokenBefore(x) : x;
      return y.loc.start.line === A.loc.end.line;
    }
    function l(g) {
      if (g.type === "EmptyStatement")
        return true;
      const y = a.getFirstToken(g), x = a.getLastToken(g), A = E.isSemicolonToken(x) ? a.getTokenBefore(x) : x;
      return y.loc.start.line === A.loc.end.line;
    }
    function i(g) {
      return g.type === "VariableDeclaration" ? g.kind === "const" || g.kind === "let" : g.type === "FunctionDeclaration" || g.type === "ClassDeclaration";
    }
    function u(g) {
      return g.value === "else" && g.type === "Keyword";
    }
    function c(g) {
      const y = a.getTokenAfter(g);
      return !!y && u(y);
    }
    function f(g) {
      const y = a.getTokenBefore(g), x = a.getTokenAfter(g), A = a.getNodeByRangeIndex(y.range[0]);
      return E.isSemicolonToken(y) || !x || A.type === "BlockStatement" && A.parent.type !== "FunctionExpression" && A.parent.type !== "ArrowFunctionExpression" ? false : !!(y.loc.end.line === x.loc.start.line || /^[([/`+-]/u.test(x.value) || y.type === "Punctuator" && (y.value === "++" || y.value === "--"));
    }
    function h(g) {
      switch (g.type) {
        case "IfStatement":
          return g.alternate ? h(g.alternate) : true;
        case "ForStatement":
        case "ForInStatement":
        case "ForOfStatement":
        case "LabeledStatement":
        case "WithStatement":
        case "WhileStatement":
          return h(g.body);
        default:
          return false;
      }
    }
    function p(g) {
      const y = g.body[0];
      return i(y) || h(y) && c(g);
    }
    function m(g, y, x, A) {
      const b = y.type === "BlockStatement";
      let v = null;
      if (b && (y.body.length !== 1 || p(y)))
        v = true;
      else if (e)
        v = false;
      else if (r)
        o(y) || (v = true);
      else if (s)
        if (b) {
          const C = y.body[0], T = a.getCommentsBefore(C);
          v = !l(C) || T.length > 0;
        } else
          v = !l(y);
      else
        v = true;
      return {
        actual: b,
        expected: v,
        check() {
          this.expected !== null && this.expected !== this.actual && (this.expected ? t4.report({
            node: g,
            loc: y.loc,
            messageId: A && A.condition ? "missingCurlyAfterCondition" : "missingCurlyAfter",
            data: {
              name: x
            },
            fix: (C) => C.replaceText(y, `{${a.getText(y)}}`)
          }) : t4.report({
            node: g,
            loc: y.loc,
            messageId: A && A.condition ? "unexpectedCurlyAfterCondition" : "unexpectedCurlyAfter",
            data: {
              name: x
            },
            fix(C) {
              const T = g.type === "DoWhileStatement" && a.getTokenBefore(y).range[1] === y.range[0] && !E.canTokensBeAdjacent("do", a.getFirstToken(y, {
                skip: 1
              })), w = a.getFirstToken(y), B = a.getLastToken(y), I = a.getTokenBefore(B);
              if (f(B))
                return null;
              const _ = a.getText().slice(w.range[1], I.range[0]) + a.getText(I) + a.getText().slice(I.range[1], B.range[0]);
              return C.replaceText(y, (T ? " " : "") + _);
            }
          }));
        }
      };
    }
    function d(g) {
      const y = [];
      for (let x = g; x; x = x.alternate)
        if (y.push(m(x, x.consequent, "if", {
          condition: true
        })), x.alternate && x.alternate.type !== "IfStatement") {
          y.push(m(x, x.alternate, "else"));
          break;
        }
      if (n) {
        const x = y.some((A) => A.expected !== null ? A.expected : A.actual);
        y.forEach((A) => {
          A.expected = x;
        });
      }
      return y;
    }
    return {
      IfStatement(g) {
        const y = g.parent;
        y.type === "IfStatement" && y.alternate === g || d(g).forEach((A) => {
          A.check();
        });
      },
      WhileStatement(g) {
        m(g, g.body, "while", {
          condition: true
        }).check();
      },
      DoWhileStatement(g) {
        m(g, g.body, "do").check();
      },
      ForStatement(g) {
        m(g, g.body, "for", {
          condition: true
        }).check();
      },
      ForInStatement(g) {
        m(g, g.body, "for-in").check();
      },
      ForOfStatement(g) {
        m(g, g.body, "for-of").check();
      }
    };
  }
};
vc.meta;
vc.create;
var Ec = {
  meta: {
    type: "suggestion",
    docs: {
      description: "enforce default clauses in switch statements to be last",
      category: "Best Practices",
      recommended: false,
      url: "https://eslint.org/docs/rules/default-case-last"
    },
    schema: [],
    messages: {
      notLast: "Default clause should be the last clause."
    }
  },
  create(t4) {
    return {
      SwitchStatement(e) {
        const r = e.cases, s = r.findIndex((n) => n.test === null);
        if (s !== -1 && s !== r.length - 1) {
          const n = r[s];
          t4.report({
            node: n,
            messageId: "notLast"
          });
        }
      }
    };
  }
};
Ec.meta;
Ec.create;
var PR = /^no default$/iu;
var bc = {
  meta: {
    type: "suggestion",
    docs: {
      description: "require `default` cases in `switch` statements",
      category: "Best Practices",
      recommended: false,
      url: "https://eslint.org/docs/rules/default-case"
    },
    schema: [{
      type: "object",
      properties: {
        commentPattern: {
          type: "string"
        }
      },
      additionalProperties: false
    }],
    messages: {
      missingDefaultCase: "Expected a default case."
    }
  },
  create(t4) {
    const e = t4.options[0] || {}, r = e.commentPattern ? new RegExp(e.commentPattern, "u") : PR, s = t4.getSourceCode();
    function n(a) {
      return a[a.length - 1];
    }
    return {
      SwitchStatement(a) {
        if (!a.cases.length)
          return;
        if (!a.cases.some((l) => l.test === null)) {
          let l;
          const i = n(a.cases), u = s.getCommentsAfter(i);
          u.length && (l = n(u)), (!l || !r.test(l.value.trim())) && t4.report({
            node: a,
            messageId: "missingDefaultCase"
          });
        }
      }
    };
  }
};
bc.meta;
bc.create;
var Cc = {
  meta: {
    type: "suggestion",
    docs: {
      description: "enforce default parameters to be last",
      category: "Best Practices",
      recommended: false,
      url: "https://eslint.org/docs/rules/default-param-last"
    },
    schema: [],
    messages: {
      shouldBeLast: "Default parameters should be last."
    }
  },
  create(t4) {
    function e(r) {
      let s = false;
      for (let n = r.params.length - 1; n >= 0; n -= 1) {
        const a = r.params[n];
        if (a.type !== "AssignmentPattern" && a.type !== "RestElement") {
          s = true;
          continue;
        }
        s && a.type === "AssignmentPattern" && t4.report({
          node: a,
          messageId: "shouldBeLast"
        });
      }
    }
    return {
      FunctionDeclaration: e,
      FunctionExpression: e,
      ArrowFunctionExpression: e
    };
  }
};
Cc.meta;
Cc.create;
var Sc = {
  meta: {
    type: "layout",
    docs: {
      description: "enforce consistent newlines before and after dots",
      category: "Best Practices",
      recommended: false,
      url: "https://eslint.org/docs/rules/dot-location"
    },
    schema: [{
      enum: ["object", "property"]
    }],
    fixable: "code",
    messages: {
      expectedDotAfterObject: "Expected dot to be on same line as object.",
      expectedDotBeforeProperty: "Expected dot to be on same line as property."
    }
  },
  create(t4) {
    const e = t4.options[0], r = t4.getSourceCode();
    function s(n) {
      const a = n.property, o = r.getTokenBefore(a);
      if (e === "object" || !e) {
        const l = r.getTokenBefore(o);
        E.isTokenOnSameLine(l, o) || t4.report({
          node: n,
          loc: o.loc,
          messageId: "expectedDotAfterObject",
          *fix(i) {
            o.value.startsWith(".") && E.isDecimalIntegerNumericToken(l) ? yield i.insertTextAfter(l, ` ${o.value}`) : yield i.insertTextAfter(l, o.value), yield i.remove(o);
          }
        });
      } else
        E.isTokenOnSameLine(o, a) || t4.report({
          node: n,
          loc: o.loc,
          messageId: "expectedDotBeforeProperty",
          *fix(l) {
            yield l.remove(o), yield l.insertTextBefore(a, o.value);
          }
        });
    }
    return {
      MemberExpression: function(n) {
        n.computed || s(n);
      }
    };
  }
};
Sc.meta;
Sc.create;
var si = ["abstract", "boolean", "break", "byte", "case", "catch", "char", "class", "const", "continue", "debugger", "default", "delete", "do", "double", "else", "enum", "export", "extends", "false", "final", "finally", "float", "for", "function", "goto", "if", "implements", "import", "in", "instanceof", "int", "interface", "long", "native", "new", "null", "package", "private", "protected", "public", "return", "short", "static", "super", "switch", "synchronized", "this", "throw", "throws", "transient", "true", "try", "typeof", "var", "void", "volatile", "while", "with"];
var IR = /^[a-zA-Z_$][a-zA-Z0-9_$]*$/u;
var _R = /* @__PURE__ */ new Set(["string", "boolean"]);
var Ac = {
  meta: {
    type: "suggestion",
    docs: {
      description: "enforce dot notation whenever possible",
      category: "Best Practices",
      recommended: false,
      url: "https://eslint.org/docs/rules/dot-notation"
    },
    schema: [{
      type: "object",
      properties: {
        allowKeywords: {
          type: "boolean",
          default: true
        },
        allowPattern: {
          type: "string",
          default: ""
        }
      },
      additionalProperties: false
    }],
    fixable: "code",
    messages: {
      useDot: "[{{key}}] is better written in dot notation.",
      useBrackets: ".{{key}} is a syntax error."
    }
  },
  create(t4) {
    const e = t4.options[0] || {}, r = e.allowKeywords === void 0 || e.allowKeywords, s = t4.getSourceCode();
    let n;
    e.allowPattern && (n = new RegExp(e.allowPattern, "u"));
    function a(o, l) {
      if (IR.test(l) && (r || si.indexOf(String(l)) === -1) && !(n && n.test(l))) {
        const i = o.property.type === "Literal" ? JSON.stringify(l) : `\`${l}\``;
        t4.report({
          node: o.property,
          messageId: "useDot",
          data: {
            key: i
          },
          *fix(u) {
            const c = s.getTokenAfter(o.object, E.isOpeningBracketToken), f = s.getLastToken(o), h = s.getTokenAfter(o);
            s.commentsExistBetween(c, f) || (o.optional || (yield u.insertTextBefore(c, E.isDecimalInteger(o.object) ? " ." : ".")), yield u.replaceTextRange([c.range[0], f.range[1]], l), h && f.range[1] === h.range[0] && !E.canTokensBeAdjacent(String(l), h) && (yield u.insertTextAfter(o, " ")));
          }
        });
      }
    }
    return {
      MemberExpression(o) {
        o.computed && o.property.type === "Literal" && (_R.has(typeof o.property.value) || E.isNullLiteral(o.property)) && a(o, o.property.value), o.computed && o.property.type === "TemplateLiteral" && o.property.expressions.length === 0 && a(o, o.property.quasis[0].value.cooked), !r && !o.computed && si.indexOf(String(o.property.name)) !== -1 && t4.report({
          node: o.property,
          messageId: "useBrackets",
          data: {
            key: o.property.name
          },
          *fix(l) {
            const i = s.getTokenBefore(o.property);
            o.object.type === "Identifier" && o.object.name === "let" && !o.optional || s.commentsExistBetween(i, o.property) || (o.optional || (yield l.remove(i)), yield l.replaceText(o.property, `["${o.property.name}"]`));
          }
        });
      }
    };
  }
};
Ac.meta;
Ac.create;
var Dc = {
  meta: {
    type: "layout",
    docs: {
      description: "require or disallow newline at the end of files",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/eol-last"
    },
    fixable: "whitespace",
    schema: [{
      enum: ["always", "never", "unix", "windows"]
    }],
    messages: {
      missing: "Newline required at end of file but not found.",
      unexpected: "Newline not allowed at end of file."
    }
  },
  create(t4) {
    return {
      Program: function(e) {
        const r = t4.getSourceCode(), s = r.getText(), n = r.lines[r.lines.length - 1], a = {
          column: n.length,
          line: r.lines.length
        }, o = s.endsWith(`
`);
        if (!s.length)
          return;
        let l = t4.options[0] || "always", i = false;
        l === "unix" && (l = "always"), l === "windows" && (l = "always", i = true), l === "always" && !o ? t4.report({
          node: e,
          loc: a,
          messageId: "missing",
          fix(u) {
            return u.insertTextAfterRange([0, s.length], i ? `\r
` : `
`);
          }
        }) : l === "never" && o && t4.report({
          node: e,
          loc: a,
          messageId: "unexpected",
          fix(u) {
            const c = /(?:\r?\n)+$/u.exec(r.text), f = c.index, h = r.text.length;
            return u.replaceTextRange([f, h], "");
          }
        });
      }
    };
  }
};
Dc.meta;
Dc.create;
var wc = {
  meta: {
    type: "suggestion",
    docs: {
      description: "require the use of `===` and `!==`",
      category: "Best Practices",
      recommended: false,
      url: "https://eslint.org/docs/rules/eqeqeq"
    },
    schema: {
      anyOf: [{
        type: "array",
        items: [{
          enum: ["always"]
        }, {
          type: "object",
          properties: {
            null: {
              enum: ["always", "never", "ignore"]
            }
          },
          additionalProperties: false
        }],
        additionalItems: false
      }, {
        type: "array",
        items: [{
          enum: ["smart", "allow-null"]
        }],
        additionalItems: false
      }]
    },
    fixable: "code",
    messages: {
      unexpected: "Expected '{{expectedOperator}}' and instead saw '{{actualOperator}}'."
    }
  },
  create(t4) {
    const e = t4.options[0] || "always", r = t4.options[1] || {}, s = t4.getSourceCode(), n = e === "always" ? r.null || "always" : "ignore";
    function a(c) {
      return c.type === "UnaryExpression" && c.operator === "typeof";
    }
    function o(c) {
      return a(c.left) || a(c.right);
    }
    function l(c) {
      return c.left.type === "Literal" && c.right.type === "Literal" && typeof c.left.value == typeof c.right.value;
    }
    function i(c) {
      return E.isNullLiteral(c.right) || E.isNullLiteral(c.left);
    }
    function u(c, f) {
      const h = s.getFirstTokenBetween(c.left, c.right, (p) => p.value === c.operator);
      t4.report({
        node: c,
        loc: h.loc,
        messageId: "unexpected",
        data: {
          expectedOperator: f,
          actualOperator: c.operator
        },
        fix(p) {
          return o(c) || l(c) ? p.replaceText(h, f) : null;
        }
      });
    }
    return {
      BinaryExpression(c) {
        const f = i(c);
        if (c.operator !== "==" && c.operator !== "!=") {
          n === "never" && f && u(c, c.operator.slice(0, -1));
          return;
        }
        e === "smart" && (o(c) || l(c) || f) || n !== "always" && f || u(c, `${c.operator}=`);
      }
    };
  }
};
wc.meta;
wc.create;
var kc = {
  meta: {
    type: "problem",
    docs: {
      description: 'enforce "for" loop update clause moving the counter in the right direction.',
      category: "Possible Errors",
      recommended: true,
      url: "https://eslint.org/docs/rules/for-direction"
    },
    fixable: null,
    schema: [],
    messages: {
      incorrectDirection: "The update clause in this loop moves the variable in the wrong direction."
    }
  },
  create(t4) {
    function e(a) {
      t4.report({
        node: a,
        messageId: "incorrectDirection"
      });
    }
    function r(a, o) {
      if (a.right.type === "UnaryExpression") {
        if (a.right.operator === "-")
          return -o;
      } else if (a.right.type === "Identifier")
        return 0;
      return o;
    }
    function s(a, o) {
      if (a.argument.type === "Identifier" && a.argument.name === o) {
        if (a.operator === "++")
          return 1;
        if (a.operator === "--")
          return -1;
      }
      return 0;
    }
    function n(a, o) {
      if (a.left.name === o) {
        if (a.operator === "+=")
          return r(a, 1);
        if (a.operator === "-=")
          return r(a, -1);
      }
      return 0;
    }
    return {
      ForStatement(a) {
        if (a.test && a.test.type === "BinaryExpression" && a.test.left.type === "Identifier" && a.update) {
          const o = a.test.left.name, l = a.test.operator, i = a.update;
          let u;
          if (l === "<" || l === "<=")
            u = -1;
          else if (l === ">" || l === ">=")
            u = 1;
          else
            return;
          i.type === "UpdateExpression" ? s(i, o) === u && e(a) : i.type === "AssignmentExpression" && n(i, o) === u && e(a);
        }
      }
    };
  }
};
kc.meta;
kc.create;
var Tc = {
  meta: {
    type: "layout",
    docs: {
      description: "require or disallow spacing between function identifiers and their invocations",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/func-call-spacing"
    },
    fixable: "whitespace",
    schema: {
      anyOf: [{
        type: "array",
        items: [{
          enum: ["never"]
        }],
        minItems: 0,
        maxItems: 1
      }, {
        type: "array",
        items: [{
          enum: ["always"]
        }, {
          type: "object",
          properties: {
            allowNewlines: {
              type: "boolean"
            }
          },
          additionalProperties: false
        }],
        minItems: 0,
        maxItems: 2
      }]
    },
    messages: {
      unexpectedWhitespace: "Unexpected whitespace between function name and paren.",
      unexpectedNewline: "Unexpected newline between function name and paren.",
      missing: "Missing space between function name and paren."
    }
  },
  create(t4) {
    const e = t4.options[0] !== "always", r = !e && t4.options[1] && t4.options[1].allowNewlines, s = t4.getSourceCode(), n = s.getText();
    function a(o, l, i) {
      const u = n.slice(l.range[1], i.range[0]).replace(/\/\*.*?\*\//gu, ""), c = /\s/u.test(u), f = c && E.LINEBREAK_MATCHER.test(u);
      e && c ? t4.report({
        node: o,
        loc: {
          start: l.loc.end,
          end: {
            line: i.loc.start.line,
            column: i.loc.start.column - 1
          }
        },
        messageId: "unexpectedWhitespace",
        fix(h) {
          return s.commentsExistBetween(l, i) ? null : o.optional ? h.replaceTextRange([l.range[1], i.range[0]], "?.") : f ? null : h.removeRange([l.range[1], i.range[0]]);
        }
      }) : !e && !c ? t4.report({
        node: o,
        loc: {
          start: {
            line: l.loc.end.line,
            column: l.loc.end.column - 1
          },
          end: i.loc.start
        },
        messageId: "missing",
        fix(h) {
          return o.optional ? null : h.insertTextBefore(i, " ");
        }
      }) : !e && !r && f && t4.report({
        node: o,
        loc: {
          start: l.loc.end,
          end: i.loc.start
        },
        messageId: "unexpectedNewline",
        fix(h) {
          if (!o.optional || s.commentsExistBetween(l, i))
            return null;
          const p = [l.range[1], i.range[0]], m = s.getTokenAfter(l);
          return m.range[0] === l.range[1] ? h.replaceTextRange(p, "?. ") : m.range[1] === i.range[0] ? h.replaceTextRange(p, " ?.") : h.replaceTextRange(p, " ?. ");
        }
      });
    }
    return {
      "CallExpression, NewExpression"(o) {
        const l = s.getLastToken(o), i = s.getLastToken(o.callee), u = s.getFirstTokenBetween(i, l, E.isOpeningParenToken), c = u && s.getTokenBefore(u, E.isNotQuestionDotToken);
        u && u.range[1] < o.range[1] && a(o, c, u);
      },
      ImportExpression(o) {
        const l = s.getFirstToken(o), i = s.getTokenAfter(l);
        a(o, l, i);
      }
    };
  }
};
Tc.meta;
Tc.create;
function BR(t4) {
  return t4.type === "MemberExpression" && t4.object.type === "Identifier" && t4.object.name === "module" && (t4.property.type === "Identifier" && t4.property.name === "exports" || t4.property.type === "Literal" && t4.property.value === "exports");
}
function xy(t4, e) {
  return e >= 6 ? Il.default.keyword.isIdentifierES6(t4) : Il.default.keyword.isIdentifierES5(t4);
}
var OR = {
  enum: ["always", "never"]
};
var vy = {
  type: "object",
  properties: {
    considerPropertyDescriptor: {
      type: "boolean"
    },
    includeCommonJSModuleExports: {
      type: "boolean"
    }
  },
  additionalProperties: false
};
var Fc = {
  meta: {
    type: "suggestion",
    docs: {
      description: "require function names to match the name of the variable or property to which they are assigned",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/func-name-matching"
    },
    schema: {
      anyOf: [{
        type: "array",
        additionalItems: false,
        items: [OR, vy]
      }, {
        type: "array",
        additionalItems: false,
        items: [vy]
      }]
    },
    messages: {
      matchProperty: "Function name `{{funcName}}` should match property name `{{name}}`.",
      matchVariable: "Function name `{{funcName}}` should match variable name `{{name}}`.",
      notMatchProperty: "Function name `{{funcName}}` should not match property name `{{name}}`.",
      notMatchVariable: "Function name `{{funcName}}` should not match variable name `{{name}}`."
    }
  },
  create(t4) {
    const e = (typeof t4.options[0] == "object" ? t4.options[0] : t4.options[1]) || {}, r = typeof t4.options[0] == "string" ? t4.options[0] : "always", s = e.considerPropertyDescriptor, n = e.includeCommonJSModuleExports, a = t4.parserOptions && t4.parserOptions.ecmaVersion ? t4.parserOptions.ecmaVersion : 5;
    function o(c, f, h) {
      return h ? h.type === "CallExpression" && E.isSpecificMemberAccess(h.callee, c, f) : false;
    }
    function l(c, f) {
      return r === "always" && c !== f || r === "never" && c === f;
    }
    function i(c, f, h, p) {
      let m;
      r === "always" && p ? m = "matchProperty" : r === "always" ? m = "matchVariable" : p ? m = "notMatchProperty" : m = "notMatchVariable", t4.report({
        node: c,
        messageId: m,
        data: {
          name: f,
          funcName: h
        }
      });
    }
    function u(c) {
      return c.type === "Literal" && typeof c.value == "string";
    }
    return {
      VariableDeclarator(c) {
        !c.init || c.init.type !== "FunctionExpression" || c.id.type !== "Identifier" || c.init.id && l(c.id.name, c.init.id.name) && i(c, c.id.name, c.init.id.name, false);
      },
      AssignmentExpression(c) {
        if (c.right.type !== "FunctionExpression" || c.left.computed && c.left.property.type !== "Literal" || !n && BR(c.left) || c.left.type !== "Identifier" && c.left.type !== "MemberExpression")
          return;
        const f = c.left.type === "MemberExpression", h = f ? E.getStaticPropertyName(c.left) : c.left.name;
        c.right.id && xy(h) && l(h, c.right.id.name) && i(c, h, c.right.id.name, f);
      },
      Property(c) {
        if (!(c.value.type !== "FunctionExpression" || !c.value.id || c.computed && !u(c.key))) {
          if (c.key.type === "Identifier") {
            const f = c.value.id.name;
            let h = c.key.name;
            if (s && h === "value")
              if (o("Object", "defineProperty", c.parent.parent) || o("Reflect", "defineProperty", c.parent.parent)) {
                const p = c.parent.parent.arguments[1];
                u(p) && l(p.value, f) && i(c, p.value, f, true);
              } else
                o("Object", "defineProperties", c.parent.parent.parent.parent) || o("Object", "create", c.parent.parent.parent.parent) ? (h = c.parent.parent.key.name, !c.parent.parent.computed && l(h, f) && i(c, h, f, true)) : l(h, f) && i(c, h, f, true);
            else
              l(h, f) && i(c, h, f, true);
            return;
          }
          u(c.key) && xy(c.key.value, a) && l(c.key.value, c.value.id.name) && i(c, c.key.value, c.value.id.name, true);
        }
      }
    };
  }
};
Fc.meta;
Fc.create;
function LR(t4) {
  return t4 && t4.defs[0].type === "FunctionName";
}
var Pc = {
  meta: {
    type: "suggestion",
    docs: {
      description: "require or disallow named `function` expressions",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/func-names"
    },
    schema: {
      definitions: {
        value: {
          enum: ["always", "as-needed", "never"]
        }
      },
      items: [{
        $ref: "#/definitions/value"
      }, {
        type: "object",
        properties: {
          generators: {
            $ref: "#/definitions/value"
          }
        },
        additionalProperties: false
      }]
    },
    messages: {
      unnamed: "Unexpected unnamed {{name}}.",
      named: "Unexpected named {{name}}."
    }
  },
  create(t4) {
    const e = t4.getSourceCode();
    function r(i) {
      return i.generator && t4.options.length > 1 && t4.options[1].generators ? t4.options[1].generators : t4.options[0] || "always";
    }
    function s(i) {
      const u = i.parent;
      return u.type === "MethodDefinition" || u.type === "Property" && (u.method || u.kind === "get" || u.kind === "set");
    }
    function n(i) {
      const u = i.parent;
      return s(i) || u.type === "VariableDeclarator" && u.id.type === "Identifier" && u.init === i || u.type === "Property" && u.value === i || u.type === "AssignmentExpression" && u.left.type === "Identifier" && u.right === i || u.type === "AssignmentPattern" && u.left.type === "Identifier" && u.right === i;
    }
    function a(i) {
      t4.report({
        node: i,
        messageId: "unnamed",
        loc: E.getFunctionHeadLoc(i, e),
        data: {
          name: E.getFunctionNameWithKind(i)
        }
      });
    }
    function o(i) {
      t4.report({
        node: i,
        messageId: "named",
        loc: E.getFunctionHeadLoc(i, e),
        data: {
          name: E.getFunctionNameWithKind(i)
        }
      });
    }
    function l(i) {
      const u = t4.getDeclaredVariables(i)[0];
      if (LR(u) && u.references.length > 0)
        return;
      const c = !!(i.id && i.id.name), f = r(i);
      f === "never" ? c && i.type !== "FunctionDeclaration" && o(i) : f === "as-needed" ? !c && !n(i) && a(i) : !c && !s(i) && a(i);
    }
    return {
      "FunctionExpression:exit": l,
      "ExportDefaultDeclaration > FunctionDeclaration": l
    };
  }
};
Pc.meta;
Pc.create;
var Ic = {
  meta: {
    type: "suggestion",
    docs: {
      description: "enforce the consistent use of either `function` declarations or expressions",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/func-style"
    },
    schema: [{
      enum: ["declaration", "expression"]
    }, {
      type: "object",
      properties: {
        allowArrowFunctions: {
          type: "boolean",
          default: false
        }
      },
      additionalProperties: false
    }],
    messages: {
      expression: "Expected a function expression.",
      declaration: "Expected a function declaration."
    }
  },
  create(t4) {
    const e = t4.options[0], r = t4.options[1] && t4.options[1].allowArrowFunctions, s = e === "declaration", n = [], a = {
      FunctionDeclaration(o) {
        n.push(false), !s && o.parent.type !== "ExportDefaultDeclaration" && t4.report({
          node: o,
          messageId: "expression"
        });
      },
      "FunctionDeclaration:exit"() {
        n.pop();
      },
      FunctionExpression(o) {
        n.push(false), s && o.parent.type === "VariableDeclarator" && t4.report({
          node: o.parent,
          messageId: "declaration"
        });
      },
      "FunctionExpression:exit"() {
        n.pop();
      },
      ThisExpression() {
        n.length > 0 && (n[n.length - 1] = true);
      }
    };
    return r || (a.ArrowFunctionExpression = function() {
      n.push(false);
    }, a["ArrowFunctionExpression:exit"] = function(o) {
      const l = n.pop();
      s && !l && o.parent.type === "VariableDeclarator" && t4.report({
        node: o.parent,
        messageId: "declaration"
      });
    }), a;
  }
};
Ic.meta;
Ic.create;
var _c = {
  meta: {
    type: "layout",
    docs: {
      description: "enforce line breaks between arguments of a function call",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/function-call-argument-newline"
    },
    fixable: "whitespace",
    schema: [{
      enum: ["always", "never", "consistent"]
    }],
    messages: {
      unexpectedLineBreak: "There should be no line break here.",
      missingLineBreak: "There should be a line break after this argument."
    }
  },
  create(t4) {
    const e = t4.getSourceCode(), r = {
      unexpected: {
        messageId: "unexpectedLineBreak",
        check: (a, o) => a.loc.end.line !== o.loc.start.line,
        createFix: (a, o) => (l) => l.replaceTextRange([o.range[1], a.range[0]], " ")
      },
      missing: {
        messageId: "missingLineBreak",
        check: (a, o) => a.loc.end.line === o.loc.start.line,
        createFix: (a, o) => (l) => l.replaceTextRange([o.range[1], a.range[0]], `
`)
      }
    };
    function s(a, o) {
      for (let l = 1; l < a.arguments.length; l++) {
        const i = e.getLastToken(a.arguments[l - 1]), u = e.getFirstToken(a.arguments[l]);
        if (o.check(i, u)) {
          const c = e.getTokenBefore(u, {
            includeComments: true
          }), f = c.type === "Line";
          t4.report({
            node: a,
            loc: {
              start: c.loc.end,
              end: u.loc.start
            },
            messageId: o.messageId,
            fix: f ? null : o.createFix(u, c)
          });
        }
      }
    }
    function n(a) {
      if (a.arguments.length < 2)
        return;
      const o = t4.options[0] || "always";
      if (o === "never")
        s(a, r.unexpected);
      else if (o === "always")
        s(a, r.missing);
      else if (o === "consistent") {
        const l = e.getLastToken(a.arguments[0]), i = e.getFirstToken(a.arguments[1]);
        l.loc.end.line === i.loc.start.line ? s(a, r.unexpected) : s(a, r.missing);
      }
    }
    return {
      CallExpression: n,
      NewExpression: n
    };
  }
};
_c.meta;
_c.create;
var Bc = {
  meta: {
    type: "layout",
    docs: {
      description: "enforce consistent line breaks inside function parentheses",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/function-paren-newline"
    },
    fixable: "whitespace",
    schema: [{
      oneOf: [{
        enum: ["always", "never", "consistent", "multiline", "multiline-arguments"]
      }, {
        type: "object",
        properties: {
          minItems: {
            type: "integer",
            minimum: 0
          }
        },
        additionalProperties: false
      }]
    }],
    messages: {
      expectedBefore: "Expected newline before ')'.",
      expectedAfter: "Expected newline after '('.",
      expectedBetween: "Expected newline between arguments/params.",
      unexpectedBefore: "Unexpected newline before ')'.",
      unexpectedAfter: "Unexpected newline after '('."
    }
  },
  create(t4) {
    const e = t4.getSourceCode(), r = t4.options[0] || "multiline", s = r === "multiline-arguments";
    let n;
    typeof r == "object" ? n = r.minItems : r === "always" ? n = 0 : r === "never" ? n = 1 / 0 : n = null;
    function a(u, c) {
      return s && u.length === 1 ? c : r === "multiline" || s ? u.some((f, h) => h !== u.length - 1 && f.loc.end.line !== u[h + 1].loc.start.line) : r === "consistent" ? c : u.length >= n;
    }
    function o(u, c) {
      const f = u.leftParen, h = u.rightParen, p = e.getTokenAfter(f), m = e.getTokenBefore(h), d = !E.isTokenOnSameLine(f, p), g = !E.isTokenOnSameLine(m, h), y = a(c, d);
      d && !y ? t4.report({
        node: f,
        messageId: "unexpectedAfter",
        fix(x) {
          return e.getText().slice(f.range[1], p.range[0]).trim() ? null : x.removeRange([f.range[1], p.range[0]]);
        }
      }) : !d && y && t4.report({
        node: f,
        messageId: "expectedAfter",
        fix: (x) => x.insertTextAfter(f, `
`)
      }), g && !y ? t4.report({
        node: h,
        messageId: "unexpectedBefore",
        fix(x) {
          return e.getText().slice(m.range[1], h.range[0]).trim() ? null : x.removeRange([m.range[1], h.range[0]]);
        }
      }) : !g && y && t4.report({
        node: h,
        messageId: "expectedBefore",
        fix: (x) => x.insertTextBefore(h, `
`)
      });
    }
    function l(u, c) {
      const f = u.leftParen, h = e.getTokenAfter(f), p = !E.isTokenOnSameLine(f, h), m = a(c, p);
      for (let d = 0; d <= c.length - 2; d++) {
        const g = c[d], y = c[d + 1];
        !(g.loc.end.line !== y.loc.start.line) && m && t4.report({
          node: g,
          messageId: "expectedBetween",
          fix: (A) => A.insertTextBefore(y, `
`)
        });
      }
    }
    function i(u) {
      switch (u.type) {
        case "NewExpression":
          if (!u.arguments.length && !(E.isOpeningParenToken(e.getLastToken(u, {
            skip: 1
          })) && E.isClosingParenToken(e.getLastToken(u))))
            return null;
        case "CallExpression":
          return {
            leftParen: e.getTokenAfter(u.callee, E.isOpeningParenToken),
            rightParen: e.getLastToken(u)
          };
        case "FunctionDeclaration":
        case "FunctionExpression": {
          const c = e.getFirstToken(u, E.isOpeningParenToken), f = u.params.length ? e.getTokenAfter(u.params[u.params.length - 1], E.isClosingParenToken) : e.getTokenAfter(c);
          return {
            leftParen: c,
            rightParen: f
          };
        }
        case "ArrowFunctionExpression": {
          const c = e.getFirstToken(u, {
            skip: u.async ? 1 : 0
          });
          return E.isOpeningParenToken(c) ? {
            leftParen: c,
            rightParen: e.getTokenBefore(u.body, E.isClosingParenToken)
          } : null;
        }
        case "ImportExpression": {
          const c = e.getFirstToken(u, 1), f = e.getLastToken(u);
          return {
            leftParen: c,
            rightParen: f
          };
        }
        default:
          throw new TypeError(`unexpected node with type ${u.type}`);
      }
    }
    return {
      [["ArrowFunctionExpression", "CallExpression", "FunctionDeclaration", "FunctionExpression", "ImportExpression", "NewExpression"]](u) {
        const c = i(u);
        let f;
        u.type === "ImportExpression" ? f = [u.source] : E.isFunction(u) ? f = u.params : f = u.arguments, c && (o(c, f), s && l(c, f));
      }
    };
  }
};
Bc.meta;
Bc.create;
var $o = {
  oneOf: [{
    enum: ["before", "after", "both", "neither"]
  }, {
    type: "object",
    properties: {
      before: {
        type: "boolean"
      },
      after: {
        type: "boolean"
      }
    },
    additionalProperties: false
  }]
};
var Oc = {
  meta: {
    type: "layout",
    docs: {
      description: "enforce consistent spacing around `*` operators in generator functions",
      category: "ECMAScript 6",
      recommended: false,
      url: "https://eslint.org/docs/rules/generator-star-spacing"
    },
    fixable: "whitespace",
    schema: [{
      oneOf: [{
        enum: ["before", "after", "both", "neither"]
      }, {
        type: "object",
        properties: {
          before: {
            type: "boolean"
          },
          after: {
            type: "boolean"
          },
          named: $o,
          anonymous: $o,
          method: $o
        },
        additionalProperties: false
      }]
    }],
    messages: {
      missingBefore: "Missing space before *.",
      missingAfter: "Missing space after *.",
      unexpectedBefore: "Unexpected space before *.",
      unexpectedAfter: "Unexpected space after *."
    }
  },
  create(t4) {
    const e = {
      before: {
        before: true,
        after: false
      },
      after: {
        before: false,
        after: true
      },
      both: {
        before: true,
        after: true
      },
      neither: {
        before: false,
        after: false
      }
    };
    function r(c, f) {
      return c ? typeof c == "string" ? e[c] : Object.assign({}, f, c) : f;
    }
    const s = function(c) {
      const f = r(c, e.before);
      return {
        named: r(c.named, f),
        anonymous: r(c.anonymous, f),
        method: r(c.method, f)
      };
    }(t4.options[0] || {}), n = t4.getSourceCode();
    function a(c) {
      return c.value === "*" && c.type === "Punctuator";
    }
    function o(c) {
      return n.getFirstToken(c.parent.method || c.parent.type === "MethodDefinition" ? c.parent : c, a);
    }
    function l(c) {
      return c[0].toUpperCase() + c.slice(1);
    }
    function i(c, f, h, p) {
      if (!!(p.range[0] - h.range[1]) !== s[c][f]) {
        const m = h.value === "*", d = s[c][f], g = m ? h : p, y = `${d ? "missing" : "unexpected"}${l(f)}`;
        t4.report({
          node: g,
          messageId: y,
          fix(x) {
            return d ? m ? x.insertTextAfter(g, " ") : x.insertTextBefore(g, " ") : x.removeRange([h.range[1], p.range[0]]);
          }
        });
      }
    }
    function u(c) {
      if (!c.generator)
        return;
      const f = o(c), h = n.getTokenBefore(f), p = n.getTokenAfter(f);
      let m = "named";
      c.parent.type === "MethodDefinition" || c.parent.type === "Property" && c.parent.method ? m = "method" : c.id || (m = "anonymous"), m === "method" && f === n.getFirstToken(c.parent) || i(m, "before", h, f), i(m, "after", f, p);
    }
    return {
      FunctionDeclaration: u,
      FunctionExpression: u
    };
  }
};
Oc.meta;
Oc.create;
var RR = /^(?:Arrow)?FunctionExpression$/u;
function NR(t4) {
  return t4.reachable;
}
var Lc = {
  meta: {
    type: "problem",
    docs: {
      description: "enforce `return` statements in getters",
      category: "Possible Errors",
      recommended: true,
      url: "https://eslint.org/docs/rules/getter-return"
    },
    fixable: null,
    schema: [{
      type: "object",
      properties: {
        allowImplicit: {
          type: "boolean",
          default: false
        }
      },
      additionalProperties: false
    }],
    messages: {
      expected: "Expected to return a value in {{name}}.",
      expectedAlways: "Expected {{name}} to always return a value."
    }
  },
  create(t4) {
    const e = t4.options[0] || {
      allowImplicit: false
    }, r = t4.getSourceCode();
    let s = {
      upper: null,
      codePath: null,
      hasReturn: false,
      shouldCheck: false,
      node: null
    };
    function n(o) {
      s.shouldCheck && s.codePath.currentSegments.some(NR) && t4.report({
        node: o,
        loc: E.getFunctionHeadLoc(o, r),
        messageId: s.hasReturn ? "expectedAlways" : "expected",
        data: {
          name: E.getFunctionNameWithKind(s.node)
        }
      });
    }
    function a(o) {
      const l = o.parent;
      return !!(RR.test(o.type) && o.body.type === "BlockStatement" && (l.kind === "get" || l.type === "Property" && E.getStaticPropertyName(l) === "get" && l.parent.type === "ObjectExpression" && (l.parent.parent.type === "CallExpression" && E.getStaticPropertyName(l.parent.parent.callee) === "defineProperty" || l.parent.parent.type === "Property" && l.parent.parent.parent.type === "ObjectExpression" && l.parent.parent.parent.parent.type === "CallExpression" && E.getStaticPropertyName(l.parent.parent.parent.parent.callee) === "defineProperties")));
    }
    return {
      onCodePathStart(o, l) {
        s = {
          upper: s,
          codePath: o,
          hasReturn: false,
          shouldCheck: a(l),
          node: l
        };
      },
      onCodePathEnd() {
        s = s.upper;
      },
      ReturnStatement(o) {
        s.shouldCheck && (s.hasReturn = true, !e.allowImplicit && !o.argument && t4.report({
          node: o,
          messageId: "expected",
          data: {
            name: E.getFunctionNameWithKind(s.node)
          }
        }));
      },
      "FunctionExpression:exit": n,
      "ArrowFunctionExpression:exit": n
    };
  }
};
Lc.meta;
Lc.create;
var jR = ["AssignmentExpression", "VariableDeclarator", "MemberExpression", "ExpressionStatement", "CallExpression", "ConditionalExpression", "Program", "VariableDeclaration", "ChainExpression"];
function MR(t4, e) {
  const r = t4.references.filter((s) => s.identifier.range[0] === e.range[0] && s.identifier.range[1] === e.range[1]);
  return r.length === 1 ? r[0] : null;
}
function $R(t4, e) {
  const r = MR(t4, e);
  return r && r.resolved && r.resolved.defs.length > 0;
}
var Rc = {
  meta: {
    deprecated: true,
    replacedBy: [],
    type: "suggestion",
    docs: {
      description: "require `require()` calls to be placed at top-level module scope",
      category: "Node.js and CommonJS",
      recommended: false,
      url: "https://eslint.org/docs/rules/global-require"
    },
    schema: [],
    messages: {
      unexpected: "Unexpected require()."
    }
  },
  create(t4) {
    return {
      CallExpression(e) {
        const r = t4.getScope();
        e.callee.name === "require" && !$R(r, e.callee) && (t4.getAncestors().every((n) => jR.indexOf(n.type) > -1) || t4.report({
          node: e,
          messageId: "unexpected"
        }));
      }
    };
  }
};
Rc.meta;
Rc.create;
function VR(t4, e) {
  if (t4.length !== e.length)
    return false;
  for (let r = 0; r < t4.length; r++) {
    const s = t4[r], n = e[r];
    if (s.type !== n.type || s.value !== n.value)
      return false;
  }
  return true;
}
function UR(t4, e) {
  return typeof t4 == "string" && typeof e == "string" ? t4 === e : Array.isArray(t4) && Array.isArray(e) ? VR(t4, e) : false;
}
function qR(t4) {
  return t4.kind === "get" || t4.kind === "set";
}
var Nc = {
  meta: {
    type: "suggestion",
    docs: {
      description: "require grouped accessor pairs in object literals and classes",
      category: "Best Practices",
      recommended: false,
      url: "https://eslint.org/docs/rules/grouped-accessor-pairs"
    },
    schema: [{
      enum: ["anyOrder", "getBeforeSet", "setBeforeGet"]
    }],
    messages: {
      notGrouped: "Accessor pair {{ formerName }} and {{ latterName }} should be grouped.",
      invalidOrder: "Expected {{ latterName }} to be before {{ formerName }}."
    }
  },
  create(t4) {
    const e = t4.options[0] || "anyOrder", r = t4.getSourceCode();
    function s(l, i, u) {
      t4.report({
        node: u,
        messageId: l,
        loc: E.getFunctionHeadLoc(u.value, r),
        data: {
          formerName: E.getFunctionNameWithKind(i.value),
          latterName: E.getFunctionNameWithKind(u.value)
        }
      });
    }
    function n(l) {
      const i = E.getStaticPropertyName(l);
      return {
        key: i !== null ? i : r.getTokens(l.key),
        getters: l.kind === "get" ? [l] : [],
        setters: l.kind === "set" ? [l] : []
      };
    }
    function a(l, i) {
      const u = l.find((c) => UR(c.key, i.key));
      return u ? (u.getters.push(...i.getters), u.setters.push(...i.setters)) : l.push(i), l;
    }
    function o(l, i) {
      const u = l.filter(i).filter(qR).map(n).reduce(a, []);
      for (const {
        getters: c,
        setters: f
      } of u)
        if (c.length === 1 && f.length === 1) {
          const [h] = c, [p] = f, m = l.indexOf(h), d = l.indexOf(p), g = m < d ? h : p, y = m < d ? p : h;
          Math.abs(m - d) > 1 ? s("notGrouped", g, y) : (e === "getBeforeSet" && m > d || e === "setBeforeGet" && m < d) && s("invalidOrder", g, y);
        }
    }
    return {
      ObjectExpression(l) {
        o(l.properties, (i) => i.type === "Property");
      },
      ClassBody(l) {
        o(l.body, (i) => i.type === "MethodDefinition" && !i.static), o(l.body, (i) => i.type === "MethodDefinition" && i.static);
      }
    };
  }
};
Nc.meta;
Nc.create;
var jc = {
  meta: {
    type: "suggestion",
    docs: {
      description: "require `for-in` loops to include an `if` statement",
      category: "Best Practices",
      recommended: false,
      url: "https://eslint.org/docs/rules/guard-for-in"
    },
    schema: [],
    messages: {
      wrap: "The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype."
    }
  },
  create(t4) {
    return {
      ForInStatement(e) {
        const r = e.body;
        if (r.type !== "EmptyStatement" && r.type !== "IfStatement" && !(r.type === "BlockStatement" && r.body.length === 0) && !(r.type === "BlockStatement" && r.body.length === 1 && r.body[0].type === "IfStatement")) {
          if (r.type === "BlockStatement" && r.body.length >= 1 && r.body[0].type === "IfStatement") {
            const s = r.body[0];
            if (s.consequent.type === "ContinueStatement" || s.consequent.type === "BlockStatement" && s.consequent.body.length === 1 && s.consequent.body[0].type === "ContinueStatement")
              return;
          }
          t4.report({
            node: e,
            messageId: "wrap"
          });
        }
      }
    };
  }
};
jc.meta;
jc.create;
var Mc = {
  meta: {
    deprecated: true,
    replacedBy: [],
    type: "suggestion",
    docs: {
      description: "require error handling in callbacks",
      category: "Node.js and CommonJS",
      recommended: false,
      url: "https://eslint.org/docs/rules/handle-callback-err"
    },
    schema: [{
      type: "string"
    }],
    messages: {
      expected: "Expected error to be handled."
    }
  },
  create(t4) {
    const e = t4.options[0] || "err";
    function r(o) {
      return o[0] === "^";
    }
    function s(o) {
      return r(e) ? new RegExp(e, "u").test(o) : o === e;
    }
    function n(o) {
      return o.variables.filter((l) => l.defs[0] && l.defs[0].type === "Parameter");
    }
    function a(o) {
      const l = t4.getScope(), i = n(l), u = i[0];
      u && s(u.name) && u.references.length === 0 && t4.report({
        node: o,
        messageId: "expected"
      });
    }
    return {
      FunctionDeclaration: a,
      FunctionExpression: a,
      ArrowFunctionExpression: a
    };
  }
};
Mc.meta;
Mc.create;
function WR(t4) {
  const e = t4.parent;
  return e.type === "AssignmentExpression" && e.left === t4 || e.type === "ArrayPattern" || e.type === "RestElement" || e.type === "Property" && e.value === t4 && e.parent.type === "ObjectPattern" || e.type === "AssignmentPattern" && e.left === t4;
}
function zR(t4) {
  const e = t4.parent;
  return e.type === "ImportSpecifier" && e.imported !== e.local && e.imported === t4 || e.type === "ExportSpecifier" && e.parent.source && e.local !== e.exported && e.local === t4;
}
function GR(t4) {
  const e = t4.parent;
  return !e.computed && e.type === "Property" && e.parent.type === "ObjectPattern" && e.value !== t4 && e.key === t4;
}
function HR(t4) {
  const e = t4.parent;
  return e.type === "Property" && e.parent.type === "ObjectExpression" && e.shorthand;
}
var $c = {
  meta: {
    deprecated: true,
    replacedBy: ["id-denylist"],
    type: "suggestion",
    docs: {
      description: "disallow specified identifiers",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/id-blacklist"
    },
    schema: {
      type: "array",
      items: {
        type: "string"
      },
      uniqueItems: true
    },
    messages: {
      restricted: "Identifier '{{name}}' is restricted."
    }
  },
  create(t4) {
    const e = new Set(t4.options), r = /* @__PURE__ */ new Set();
    let s;
    function n(i) {
      return e.has(i);
    }
    function a(i) {
      const u = s.set.get(i.name);
      return u && u.defs.length === 0 && u.references.some((c) => c.identifier === i);
    }
    function o(i) {
      const u = i.parent;
      return u.type === "MemberExpression" && u.property === i && !u.computed ? WR(u) : u.type !== "CallExpression" && u.type !== "NewExpression" && !zR(i) && !GR(i) && !(a(i) && !HR(i));
    }
    function l(i) {
      r.has(i) || (t4.report({
        node: i,
        messageId: "restricted",
        data: {
          name: i.name
        }
      }), r.add(i));
    }
    return {
      Program() {
        s = t4.getScope();
      },
      Identifier(i) {
        n(i.name) && o(i) && l(i);
      }
    };
  }
};
$c.meta;
$c.create;
function KR(t4) {
  const e = t4.parent;
  return e.type === "AssignmentExpression" && e.left === t4 || e.type === "ArrayPattern" || e.type === "RestElement" || e.type === "Property" && e.value === t4 && e.parent.type === "ObjectPattern" || e.type === "AssignmentPattern" && e.left === t4;
}
function JR(t4) {
  const e = t4.parent;
  return e.type === "ImportSpecifier" && e.imported !== e.local && e.imported === t4 || e.type === "ExportSpecifier" && e.parent.source && e.local !== e.exported && e.local === t4;
}
function XR(t4) {
  const e = t4.parent;
  return !e.computed && e.type === "Property" && e.parent.type === "ObjectPattern" && e.value !== t4 && e.key === t4;
}
function QR(t4) {
  const e = t4.parent;
  return e.type === "Property" && e.parent.type === "ObjectExpression" && e.shorthand;
}
var Vc = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow specified identifiers",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/id-denylist"
    },
    schema: {
      type: "array",
      items: {
        type: "string"
      },
      uniqueItems: true
    },
    messages: {
      restricted: "Identifier '{{name}}' is restricted."
    }
  },
  create(t4) {
    const e = new Set(t4.options), r = /* @__PURE__ */ new Set();
    let s;
    function n(i) {
      return e.has(i);
    }
    function a(i) {
      const u = s.set.get(i.name);
      return u && u.defs.length === 0 && u.references.some((c) => c.identifier === i);
    }
    function o(i) {
      const u = i.parent;
      return u.type === "MemberExpression" && u.property === i && !u.computed ? KR(u) : u.type !== "CallExpression" && u.type !== "NewExpression" && !JR(i) && !XR(i) && !(a(i) && !QR(i));
    }
    function l(i) {
      r.has(i) || (t4.report({
        node: i,
        messageId: "restricted",
        data: {
          name: i.name
        }
      }), r.add(i));
    }
    return {
      Program() {
        s = t4.getScope();
      },
      Identifier(i) {
        n(i.name) && o(i) && l(i);
      }
    };
  }
};
Vc.meta;
Vc.create;
var Uc = {
  meta: {
    type: "suggestion",
    docs: {
      description: "enforce minimum and maximum identifier lengths",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/id-length"
    },
    schema: [{
      type: "object",
      properties: {
        min: {
          type: "integer",
          default: 2
        },
        max: {
          type: "integer"
        },
        exceptions: {
          type: "array",
          uniqueItems: true,
          items: {
            type: "string"
          }
        },
        exceptionPatterns: {
          type: "array",
          uniqueItems: true,
          items: {
            type: "string"
          }
        },
        properties: {
          enum: ["always", "never"]
        }
      },
      additionalProperties: false
    }],
    messages: {
      tooShort: "Identifier name '{{name}}' is too short (< {{min}}).",
      tooLong: "Identifier name '{{name}}' is too long (> {{max}})."
    }
  },
  create(t4) {
    const e = t4.options[0] || {}, r = typeof e.min < "u" ? e.min : 2, s = typeof e.max < "u" ? e.max : 1 / 0, n = e.properties !== "never", a = new Set(e.exceptions), o = (e.exceptionPatterns || []).map((c) => new RegExp(c, "u")), l = /* @__PURE__ */ new Set();
    function i(c) {
      return o.some((f) => f.test(c));
    }
    const u = {
      MemberExpression: n && function(c) {
        return !c.computed && (c.parent.left === c && c.parent.type === "AssignmentExpression" || c.parent.type === "Property" && c.parent.value === c && c.parent.parent.type === "ObjectPattern" && c.parent.parent.parent.left === c.parent.parent);
      },
      AssignmentPattern(c, f) {
        return c.left === f;
      },
      VariableDeclarator(c, f) {
        return c.id === f;
      },
      Property(c, f) {
        return c.parent.type === "ObjectPattern" ? c.value !== c.key && c.value === f || c.value === c.key && c.key === f && n : n && !c.computed && c.key === f;
      },
      ImportDefaultSpecifier: true,
      RestElement: true,
      FunctionExpression: true,
      ArrowFunctionExpression: true,
      ClassDeclaration: true,
      FunctionDeclaration: true,
      MethodDefinition: true,
      CatchClause: true,
      ArrayPattern: true
    };
    return {
      Identifier(c) {
        const f = c.name, h = c.parent, p = f.length < r, m = f.length > s;
        if (!(p || m) || a.has(f) || i(f))
          return;
        const d = u[h.type];
        d && !l.has(c) && (d === true || d(h, c)) && (l.add(c), t4.report({
          node: c,
          messageId: p ? "tooShort" : "tooLong",
          data: {
            name: f,
            min: r,
            max: s
          }
        }));
      }
    };
  }
};
Uc.meta;
Uc.create;
var qc = {
  meta: {
    type: "suggestion",
    docs: {
      description: "require identifiers to match a specified regular expression",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/id-match"
    },
    schema: [{
      type: "string"
    }, {
      type: "object",
      properties: {
        properties: {
          type: "boolean",
          default: false
        },
        onlyDeclarations: {
          type: "boolean",
          default: false
        },
        ignoreDestructuring: {
          type: "boolean",
          default: false
        }
      },
      additionalProperties: false
    }],
    messages: {
      notMatch: "Identifier '{{name}}' does not match the pattern '{{pattern}}'."
    }
  },
  create(t4) {
    const e = t4.options[0] || "^.+$", r = new RegExp(e, "u"), s = t4.options[1] || {}, n = !!s.properties, a = !!s.onlyDeclarations, o = !!s.ignoreDestructuring, l = /* @__PURE__ */ new Map(), i = /* @__PURE__ */ new Set(["CallExpression", "NewExpression"]), u = /* @__PURE__ */ new Set(["FunctionDeclaration", "VariableDeclarator"]), c = /* @__PURE__ */ new Set(["ImportSpecifier", "ImportNamespaceSpecifier", "ImportDefaultSpecifier"]);
    function f(d) {
      return !r.test(d);
    }
    function h(d) {
      let {
        parent: g
      } = d;
      for (; g; ) {
        if (g.type === "ObjectPattern")
          return true;
        g = g.parent;
      }
      return false;
    }
    function p(d, g) {
      return (!a || u.has(d.type)) && !i.has(d.type) && f(g);
    }
    function m(d) {
      l.has(d) || (t4.report({
        node: d,
        messageId: "notMatch",
        data: {
          name: d.name,
          pattern: e
        }
      }), l.set(d, true));
    }
    return {
      Identifier(d) {
        const g = d.name, y = d.parent, x = y.type === "MemberExpression" ? y.parent : y;
        if (y.type === "MemberExpression") {
          if (!n)
            return;
          y.object.type === "Identifier" && y.object.name === g || x.type === "AssignmentExpression" && x.left.type === "MemberExpression" && x.left.property.name === d.name ? f(g) && m(d) : x.type === "AssignmentExpression" && x.right.type !== "MemberExpression" && f(g) && m(d);
        } else if (y.type === "Property" || y.type === "AssignmentPattern") {
          if (y.parent && y.parent.type === "ObjectPattern") {
            y.shorthand && y.value.left && f(g) && m(d);
            const A = y.key.name === y.value.name;
            if (!A && y.key === d)
              return;
            y.value.name && f(g) && !(A && o) && m(d);
          }
          if (!n || o && h(d))
            return;
          y.right !== d && p(x, g) && m(d);
        } else
          c.has(y.type) ? y.local && y.local.name === d.name && f(g) && m(d) : p(x, g) && m(d);
      }
    };
  }
};
qc.meta;
qc.create;
var {
  isCommentToken: YR,
  isNotOpeningParenToken: ZR
} = E;
var Wc = {
  meta: {
    type: "layout",
    docs: {
      description: "enforce the location of arrow function bodies",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/implicit-arrow-linebreak"
    },
    fixable: "whitespace",
    schema: [{
      enum: ["beside", "below"]
    }],
    messages: {
      expected: "Expected a linebreak before this expression.",
      unexpected: "Expected no linebreak before this expression."
    }
  },
  create(t4) {
    const e = t4.getSourceCode(), r = t4.options[0] || "beside";
    function s(n) {
      if (n.body.type === "BlockStatement")
        return;
      const a = e.getTokenBefore(n.body, ZR), o = e.getTokenAfter(a);
      a.loc.end.line === o.loc.start.line && r === "below" ? t4.report({
        node: o,
        messageId: "expected",
        fix: (l) => l.insertTextBefore(o, `
`)
      }) : a.loc.end.line !== o.loc.start.line && r === "beside" && t4.report({
        node: o,
        messageId: "unexpected",
        fix(l) {
          return e.getFirstTokenBetween(a, o, {
            includeComments: true,
            filter: YR
          }) ? null : l.replaceTextRange([a.range[1], o.range[0]], " ");
        }
      });
    }
    return {
      ArrowFunctionExpression: (n) => s(n)
    };
  }
};
Wc.meta;
Wc.create;
var zc = {
  meta: {
    type: "layout",
    docs: {
      description: "enforce consistent indentation",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/indent-legacy"
    },
    deprecated: true,
    replacedBy: ["indent"],
    fixable: "whitespace",
    schema: [{
      oneOf: [{
        enum: ["tab"]
      }, {
        type: "integer",
        minimum: 0
      }]
    }, {
      type: "object",
      properties: {
        SwitchCase: {
          type: "integer",
          minimum: 0
        },
        VariableDeclarator: {
          oneOf: [{
            type: "integer",
            minimum: 0
          }, {
            type: "object",
            properties: {
              var: {
                type: "integer",
                minimum: 0
              },
              let: {
                type: "integer",
                minimum: 0
              },
              const: {
                type: "integer",
                minimum: 0
              }
            }
          }]
        },
        outerIIFEBody: {
          type: "integer",
          minimum: 0
        },
        MemberExpression: {
          type: "integer",
          minimum: 0
        },
        FunctionDeclaration: {
          type: "object",
          properties: {
            parameters: {
              oneOf: [{
                type: "integer",
                minimum: 0
              }, {
                enum: ["first"]
              }]
            },
            body: {
              type: "integer",
              minimum: 0
            }
          }
        },
        FunctionExpression: {
          type: "object",
          properties: {
            parameters: {
              oneOf: [{
                type: "integer",
                minimum: 0
              }, {
                enum: ["first"]
              }]
            },
            body: {
              type: "integer",
              minimum: 0
            }
          }
        },
        CallExpression: {
          type: "object",
          properties: {
            parameters: {
              oneOf: [{
                type: "integer",
                minimum: 0
              }, {
                enum: ["first"]
              }]
            }
          }
        },
        ArrayExpression: {
          oneOf: [{
            type: "integer",
            minimum: 0
          }, {
            enum: ["first"]
          }]
        },
        ObjectExpression: {
          oneOf: [{
            type: "integer",
            minimum: 0
          }, {
            enum: ["first"]
          }]
        }
      },
      additionalProperties: false
    }],
    messages: {
      expected: "Expected indentation of {{expected}} but found {{actual}}."
    }
  },
  create(t4) {
    let r = "space", s = 4;
    const n = {
      SwitchCase: 0,
      VariableDeclarator: {
        var: 1,
        let: 1,
        const: 1
      },
      outerIIFEBody: null,
      FunctionDeclaration: {
        parameters: null,
        body: 1
      },
      FunctionExpression: {
        parameters: null,
        body: 1
      },
      CallExpression: {
        arguments: null
      },
      ArrayExpression: 1,
      ObjectExpression: 1
    }, a = t4.getSourceCode();
    if (t4.options.length && (t4.options[0] === "tab" ? (s = 1, r = "tab") : typeof t4.options[0] == "number" && (s = t4.options[0], r = "space"), t4.options[1])) {
      const k = t4.options[1];
      n.SwitchCase = k.SwitchCase || 0;
      const j = k.VariableDeclarator;
      typeof j == "number" ? n.VariableDeclarator = {
        var: j,
        let: j,
        const: j
      } : typeof j == "object" && Object.assign(n.VariableDeclarator, j), typeof k.outerIIFEBody == "number" && (n.outerIIFEBody = k.outerIIFEBody), typeof k.MemberExpression == "number" && (n.MemberExpression = k.MemberExpression), typeof k.FunctionDeclaration == "object" && Object.assign(n.FunctionDeclaration, k.FunctionDeclaration), typeof k.FunctionExpression == "object" && Object.assign(n.FunctionExpression, k.FunctionExpression), typeof k.CallExpression == "object" && Object.assign(n.CallExpression, k.CallExpression), (typeof k.ArrayExpression == "number" || typeof k.ArrayExpression == "string") && (n.ArrayExpression = k.ArrayExpression), (typeof k.ObjectExpression == "number" || typeof k.ObjectExpression == "string") && (n.ObjectExpression = k.ObjectExpression);
    }
    const o = {};
    function l(k, j, O) {
      const z = `${k} ${r}${k === 1 ? "" : "s"}`, te = `space${j === 1 ? "" : "s"}`, se = `tab${O === 1 ? "" : "s"}`;
      let ye;
      return j > 0 && O > 0 ? ye = `${j} ${te} and ${O} ${se}` : j > 0 ? ye = r === "space" ? j : `${j} ${te}` : O > 0 ? ye = r === "tab" ? O : `${O} ${se}` : ye = "0", {
        expected: z,
        actual: ye
      };
    }
    function i(k, j, O, z, te, se) {
      if (O && z)
        return;
      const ye = (r === "space" ? " " : "	").repeat(j), Se = se ? [k.range[1] - k.loc.end.column, k.range[1] - k.loc.end.column + O + z] : [k.range[0] - k.loc.start.column, k.range[0] - k.loc.start.column + O + z];
      t4.report({
        node: k,
        loc: te,
        messageId: "expected",
        data: l(j, O, z),
        fix: (xe) => xe.replaceTextRange(Se, ye)
      });
    }
    function u(k, j) {
      const O = j ? a.getLastToken(k) : a.getFirstToken(k), z = a.getText(O, O.loc.start.column).split(""), te = z.slice(0, z.findIndex((Se) => Se !== " " && Se !== "	")), se = te.filter((Se) => Se === " ").length, ye = te.filter((Se) => Se === "	").length;
      return {
        space: se,
        tab: ye,
        goodChar: r === "space" ? se : ye,
        badChar: r === "space" ? ye : se
      };
    }
    function c(k, j) {
      const O = j === true ? a.getLastToken(k, 1) : a.getTokenBefore(k), z = j === true ? k.loc.end.line : k.loc.start.line, te = O ? O.loc.end.line : -1;
      return z !== te;
    }
    function f(k, j) {
      const O = u(k, false);
      if (k.type !== "ArrayExpression" && k.type !== "ObjectExpression" && (O.goodChar !== j || O.badChar !== 0) && c(k) && i(k, j, O.space, O.tab), k.type === "IfStatement" && k.alternate) {
        const z = a.getTokenBefore(k.alternate);
        f(z, j), c(k.alternate) || f(k.alternate, j);
      }
      if (k.type === "TryStatement" && k.handler) {
        const z = a.getFirstToken(k.handler);
        f(z, j);
      }
      if (k.type === "TryStatement" && k.finalizer) {
        const z = a.getTokenBefore(k.finalizer);
        f(z, j);
      }
      if (k.type === "DoWhileStatement") {
        const z = a.getTokenAfter(k.body);
        f(z, j);
      }
    }
    function h(k, j) {
      k.forEach((O) => f(O, j));
    }
    function p(k, j) {
      const O = a.getLastToken(k), z = u(O, true);
      (z.goodChar !== j || z.badChar !== 0) && c(k, true) && i(k, j, z.space, z.tab, {
        line: O.loc.start.line,
        column: O.loc.start.column
      }, true);
    }
    function m(k, j) {
      const O = a.getLastToken(k, E.isClosingParenToken);
      if (a.getText(O, O.loc.start.column).slice(0, -1).trim())
        return;
      const te = u(O, true);
      te.goodChar !== j && i(k, j, te.space, te.tab, {
        line: O.loc.start.line,
        column: O.loc.start.column
      }, true);
    }
    function d(k, j) {
      const O = u(k, false);
      (O.goodChar !== j || O.badChar !== 0) && c(k) && i(k, j, O.space, O.tab, {
        line: k.loc.start.line,
        column: k.loc.start.column
      });
    }
    function g(k, j, O) {
      let z = k.parent;
      const te = new Set(O || ["Program"]);
      for (; z.type !== j && !te.has(z.type) && z.type !== "Program"; )
        z = z.parent;
      return z.type === j ? z : null;
    }
    function y(k) {
      return g(k, "VariableDeclarator");
    }
    function x(k, j) {
      return j && j.parent.loc.start.line === k.loc.start.line && j.parent.declarations.length > 1;
    }
    function A(k) {
      const j = k.parent;
      return j.arguments.length >= 2 && j.arguments[1] === k ? j.arguments[0].loc.end.line > j.arguments[0].loc.start.line : false;
    }
    function b(k) {
      const j = k.parent;
      let O = j.parent;
      if (j.type !== "CallExpression" || j.callee !== k)
        return false;
      for (; O.type === "UnaryExpression" && (O.operator === "!" || O.operator === "~" || O.operator === "+" || O.operator === "-") || O.type === "AssignmentExpression" || O.type === "LogicalExpression" || O.type === "SequenceExpression" || O.type === "VariableDeclarator"; )
        O = O.parent;
      return (O.type === "ExpressionStatement" || O.type === "VariableDeclaration") && O.parent && O.parent.type === "Program";
    }
    function v(k) {
      const j = k.parent;
      let O;
      if (j.parent && (j.parent.type === "Property" || j.parent.type === "ArrayExpression") ? O = u(j, false).goodChar : O = u(j).goodChar, j.parent.type === "CallExpression") {
        const se = j.parent;
        j.type !== "FunctionExpression" && j.type !== "ArrowFunctionExpression" ? se && se.loc.start.line < k.loc.start.line && (O = u(se).goodChar) : A(j) && se.callee.loc.start.line === se.callee.loc.end.line && !c(j) && (O = u(se).goodChar);
      }
      let z = s;
      n.outerIIFEBody !== null && b(j) ? z = n.outerIIFEBody * s : j.type === "FunctionExpression" ? z = n.FunctionExpression.body * s : j.type === "FunctionDeclaration" && (z = n.FunctionDeclaration.body * s), O += z;
      const te = y(k);
      te && x(k, te) && (O += s * n.VariableDeclarator[te.parent.kind]), k.body.length > 0 && h(k.body, O), p(k, O - z);
    }
    function C(k) {
      const j = a.getLastToken(k), O = k.loc.start.line, z = j.loc.end.line;
      return O === z;
    }
    function T(k) {
      if (C(k))
        return;
      let j = k.type === "ArrayExpression" ? k.elements : k.properties;
      j = j.filter((se) => se !== null);
      let O, z;
      const te = y(k);
      if (c(k)) {
        const se = k.parent;
        if (O = u(se).goodChar, (!te || te.loc.start.line !== k.loc.start.line) && (se.type !== "VariableDeclarator" || te === te.parent.declarations[0]))
          if (se.type === "VariableDeclarator" && te.loc.start.line === se.loc.start.line)
            O += s * n.VariableDeclarator[te.parent.kind];
          else if (se.type === "ObjectExpression" || se.type === "ArrayExpression") {
            const ye = k.parent.type === "ObjectExpression" ? k.parent.properties : k.parent.elements;
            ye[0] && ye[0].loc.start.line === se.loc.start.line && ye[0].loc.end.line !== se.loc.start.line || (typeof n[se.type] == "number" ? O += n[se.type] * s : O = ye[0].loc.start.column);
          } else
            se.type === "CallExpression" || se.type === "NewExpression" ? typeof n.CallExpression.arguments == "number" ? O += n.CallExpression.arguments * s : n.CallExpression.arguments === "first" ? se.arguments.indexOf(k) !== -1 && (O = se.arguments[0].loc.start.column) : O += s : (se.type === "LogicalExpression" || se.type === "ArrowFunctionExpression") && (O += s);
        d(k, O);
      } else
        O = u(k).goodChar;
      n[k.type] === "first" ? z = j.length ? j[0].loc.start.column : 0 : z = O + s * n[k.type], x(k, te) && (z += s * n.VariableDeclarator[te.parent.kind]), h(j, z), !(j.length > 0 && j[j.length - 1].loc.end.line === k.loc.end.line) && p(k, O + (x(k, te) ? n.VariableDeclarator[te.parent.kind] * s : 0));
    }
    function w(k) {
      return k.type === "BlockStatement" || k.type === "ClassBody" || k.body && k.body.type === "BlockStatement" || k.consequent && k.consequent.type === "BlockStatement";
    }
    function B(k) {
      if (C(k))
        return;
      if (k.parent && (k.parent.type === "FunctionExpression" || k.parent.type === "FunctionDeclaration" || k.parent.type === "ArrowFunctionExpression")) {
        v(k);
        return;
      }
      let j, O = [];
      k.parent && ["IfStatement", "WhileStatement", "ForStatement", "ForInStatement", "ForOfStatement", "DoWhileStatement", "ClassDeclaration", "TryStatement"].indexOf(k.parent.type) !== -1 && w(k) ? j = u(k.parent).goodChar : k.parent && k.parent.type === "CatchClause" ? j = u(k.parent.parent).goodChar : j = u(k).goodChar, k.type === "IfStatement" && k.consequent.type !== "BlockStatement" ? O = [k.consequent] : Array.isArray(k.body) ? O = k.body : O = [k.body], O.length > 0 && h(O, j + s), k.type === "BlockStatement" && p(k, j);
    }
    function I(k) {
      return k.declarations.reduce((j, O) => {
        const z = j[j.length - 1];
        return (O.loc.start.line !== k.loc.start.line && !z || z && z.loc.start.line !== O.loc.start.line) && j.push(O), j;
      }, []);
    }
    function _(k) {
      const j = I(k), O = u(k).goodChar, z = j[j.length - 1], te = O + s * n.VariableDeclarator[k.kind];
      if (h(j, te), a.getLastToken(k).loc.end.line <= z.loc.end.line)
        return;
      const se = a.getTokenBefore(z);
      se.value === "," ? p(k, u(se).goodChar) : p(k, te - s);
    }
    function S(k) {
      k.body.type !== "BlockStatement" && B(k);
    }
    function F(k, j) {
      const O = k.type === "SwitchStatement" ? k : k.parent, z = typeof j > "u" ? u(O).goodChar : j;
      let te;
      return o[O.loc.start.line] ? o[O.loc.start.line] : (O.cases.length > 0 && n.SwitchCase === 0 ? te = z : te = z + s * n.SwitchCase, o[O.loc.start.line] = te, te);
    }
    function N(k) {
      const j = a.getText(k).replace(a.getText(k.argument), "");
      return /^return\s*?\(\s*?\);*?/u.test(j);
    }
    return {
      Program(k) {
        k.body.length > 0 && h(k.body, u(k).goodChar);
      },
      ClassBody: B,
      BlockStatement: B,
      WhileStatement: S,
      ForStatement: S,
      ForInStatement: S,
      ForOfStatement: S,
      DoWhileStatement: S,
      IfStatement(k) {
        k.consequent.type !== "BlockStatement" && k.consequent.loc.start.line > k.loc.start.line && B(k);
      },
      VariableDeclaration(k) {
        k.declarations[k.declarations.length - 1].loc.start.line > k.declarations[0].loc.start.line && _(k);
      },
      ObjectExpression(k) {
        T(k);
      },
      ArrayExpression(k) {
        T(k);
      },
      MemberExpression(k) {
        if (typeof n.MemberExpression > "u" || C(k) || g(k, "VariableDeclarator", ["FunctionExpression", "ArrowFunctionExpression"]) || g(k, "AssignmentExpression", ["FunctionExpression"]))
          return;
        const j = u(k).goodChar + s * n.MemberExpression, O = [k.property], z = a.getTokenBefore(k.property);
        z.type === "Punctuator" && z.value === "." && O.push(z), h(O, j);
      },
      SwitchStatement(k) {
        const j = u(k).goodChar, O = F(k, j);
        h(k.cases, O), p(k, j);
      },
      SwitchCase(k) {
        if (C(k))
          return;
        const j = F(k);
        h(k.consequent, j + s);
      },
      FunctionDeclaration(k) {
        C(k) || (n.FunctionDeclaration.parameters === "first" && k.params.length ? h(k.params.slice(1), k.params[0].loc.start.column) : n.FunctionDeclaration.parameters !== null && h(k.params, u(k).goodChar + s * n.FunctionDeclaration.parameters));
      },
      FunctionExpression(k) {
        C(k) || (n.FunctionExpression.parameters === "first" && k.params.length ? h(k.params.slice(1), k.params[0].loc.start.column) : n.FunctionExpression.parameters !== null && h(k.params, u(k).goodChar + s * n.FunctionExpression.parameters));
      },
      ReturnStatement(k) {
        if (C(k))
          return;
        const j = u(k).goodChar;
        N(k) ? m(k, j) : f(k, j);
      },
      CallExpression(k) {
        C(k) || (n.CallExpression.arguments === "first" && k.arguments.length ? h(k.arguments.slice(1), k.arguments[0].loc.start.column) : n.CallExpression.arguments !== null && h(k.arguments, u(k).goodChar + s * n.CallExpression.arguments));
      }
    };
  }
};
zc.meta;
zc.create;
var eN = /* @__PURE__ */ new Set(["AssignmentExpression", "AssignmentPattern", "ArrayExpression", "ArrayPattern", "ArrowFunctionExpression", "AwaitExpression", "BlockStatement", "BinaryExpression", "BreakStatement", "CallExpression", "CatchClause", "ChainExpression", "ClassBody", "ClassDeclaration", "ClassExpression", "ConditionalExpression", "ContinueStatement", "DoWhileStatement", "DebuggerStatement", "EmptyStatement", "ExperimentalRestProperty", "ExperimentalSpreadProperty", "ExpressionStatement", "ForStatement", "ForInStatement", "ForOfStatement", "FunctionDeclaration", "FunctionExpression", "Identifier", "IfStatement", "Literal", "LabeledStatement", "LogicalExpression", "MemberExpression", "MetaProperty", "MethodDefinition", "NewExpression", "ObjectExpression", "ObjectPattern", "Program", "Property", "RestElement", "ReturnStatement", "SequenceExpression", "SpreadElement", "Super", "SwitchCase", "SwitchStatement", "TaggedTemplateExpression", "TemplateElement", "TemplateLiteral", "ThisExpression", "ThrowStatement", "TryStatement", "UnaryExpression", "UpdateExpression", "VariableDeclaration", "VariableDeclarator", "WhileStatement", "WithStatement", "YieldExpression", "JSXFragment", "JSXOpeningFragment", "JSXClosingFragment", "JSXIdentifier", "JSXNamespacedName", "JSXMemberExpression", "JSXEmptyExpression", "JSXExpressionContainer", "JSXElement", "JSXClosingElement", "JSXOpeningElement", "JSXAttribute", "JSXSpreadAttribute", "JSXText", "ExportDefaultDeclaration", "ExportNamedDeclaration", "ExportAllDeclaration", "ExportSpecifier", "ImportDeclaration", "ImportSpecifier", "ImportDefaultSpecifier", "ImportNamespaceSpecifier", "ImportExpression"]);
var tN = class {
  constructor() {
    this._rbTree = rR.default();
  }
  insert(e, r) {
    const s = this._rbTree.find(e);
    s.valid ? this._rbTree = s.update(r) : this._rbTree = this._rbTree.insert(e, r);
  }
  findLe(e) {
    const r = this._rbTree.le(e);
    return r && {
      key: r.key,
      value: r.value
    };
  }
  deleteRange(e, r) {
    if (e === r)
      return;
    const s = this._rbTree.ge(e);
    for (; s.valid && s.key < r; )
      this._rbTree = this._rbTree.remove(s.key), s.next();
  }
};
var rN = class {
  constructor(e) {
    this.sourceCode = e, this.firstTokensByLineNumber = e.tokensAndComments.reduce((r, s) => (r.has(s.loc.start.line) || r.set(s.loc.start.line, s), !r.has(s.loc.end.line) && e.text.slice(s.range[1] - s.loc.end.column, s.range[1]).trim() && r.set(s.loc.end.line, s), r), /* @__PURE__ */ new Map());
  }
  getFirstTokenOfLine(e) {
    return this.firstTokensByLineNumber.get(e.loc.start.line);
  }
  isFirstTokenOfLine(e) {
    return this.getFirstTokenOfLine(e) === e;
  }
  getTokenIndent(e) {
    return this.sourceCode.text.slice(e.range[0] - e.loc.start.column, e.range[0]);
  }
};
var nN = class {
  constructor(e, r, s) {
    this._tokenInfo = e, this._indentSize = r, this._indentType = s, this._tree = new tN(), this._tree.insert(0, {
      offset: 0,
      from: null,
      force: false
    }), this._lockedFirstTokens = /* @__PURE__ */ new WeakMap(), this._desiredIndentCache = /* @__PURE__ */ new WeakMap(), this._ignoredTokens = /* @__PURE__ */ new WeakSet();
  }
  _getOffsetDescriptor(e) {
    return this._tree.findLe(e.range[0]).value;
  }
  matchOffsetOf(e, r) {
    this._lockedFirstTokens.set(r, e);
  }
  setDesiredOffset(e, r, s) {
    return this.setDesiredOffsets(e.range, r, s);
  }
  setDesiredOffsets(e, r, s, n) {
    const a = {
      offset: s,
      from: r,
      force: n
    }, o = this._tree.findLe(e[1]).value, l = r && r.range[0] >= e[0] && r.range[1] <= e[1], i = l && this._getOffsetDescriptor(r);
    this._tree.deleteRange(e[0] + 1, e[1]), this._tree.insert(e[0], a), l && (this._tree.insert(r.range[0], i), this._tree.insert(r.range[1], a)), this._tree.insert(e[1], o);
  }
  getDesiredIndent(e) {
    if (!this._desiredIndentCache.has(e))
      if (this._ignoredTokens.has(e))
        this._desiredIndentCache.set(e, this._tokenInfo.getTokenIndent(e));
      else if (this._lockedFirstTokens.has(e)) {
        const r = this._lockedFirstTokens.get(e);
        this._desiredIndentCache.set(e, this.getDesiredIndent(this._tokenInfo.getFirstTokenOfLine(r)) + this._indentType.repeat(r.loc.start.column - this._tokenInfo.getFirstTokenOfLine(r).loc.start.column));
      } else {
        const r = this._getOffsetDescriptor(e), s = r.from && r.from.loc.start.line === e.loc.start.line && !/^\s*?\n/u.test(e.value) && !r.force ? 0 : r.offset * this._indentSize;
        this._desiredIndentCache.set(e, (r.from ? this.getDesiredIndent(r.from) : "") + this._indentType.repeat(s));
      }
    return this._desiredIndentCache.get(e);
  }
  ignoreToken(e) {
    this._tokenInfo.isFirstTokenOfLine(e) && this._ignoredTokens.add(e);
  }
  getFirstDependency(e) {
    return this._getOffsetDescriptor(e).from;
  }
};
var Cr = {
  oneOf: [{
    type: "integer",
    minimum: 0
  }, {
    enum: ["first", "off"]
  }]
};
var Gc = {
  meta: {
    type: "layout",
    docs: {
      description: "enforce consistent indentation",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/indent"
    },
    fixable: "whitespace",
    schema: [{
      oneOf: [{
        enum: ["tab"]
      }, {
        type: "integer",
        minimum: 0
      }]
    }, {
      type: "object",
      properties: {
        SwitchCase: {
          type: "integer",
          minimum: 0,
          default: 0
        },
        VariableDeclarator: {
          oneOf: [Cr, {
            type: "object",
            properties: {
              var: Cr,
              let: Cr,
              const: Cr
            },
            additionalProperties: false
          }]
        },
        outerIIFEBody: {
          oneOf: [{
            type: "integer",
            minimum: 0
          }, {
            enum: ["off"]
          }]
        },
        MemberExpression: {
          oneOf: [{
            type: "integer",
            minimum: 0
          }, {
            enum: ["off"]
          }]
        },
        FunctionDeclaration: {
          type: "object",
          properties: {
            parameters: Cr,
            body: {
              type: "integer",
              minimum: 0
            }
          },
          additionalProperties: false
        },
        FunctionExpression: {
          type: "object",
          properties: {
            parameters: Cr,
            body: {
              type: "integer",
              minimum: 0
            }
          },
          additionalProperties: false
        },
        CallExpression: {
          type: "object",
          properties: {
            arguments: Cr
          },
          additionalProperties: false
        },
        ArrayExpression: Cr,
        ObjectExpression: Cr,
        ImportDeclaration: Cr,
        flatTernaryExpressions: {
          type: "boolean",
          default: false
        },
        offsetTernaryExpressions: {
          type: "boolean",
          default: false
        },
        ignoredNodes: {
          type: "array",
          items: {
            type: "string",
            not: {
              pattern: ":exit$"
            }
          }
        },
        ignoreComments: {
          type: "boolean",
          default: false
        }
      },
      additionalProperties: false
    }],
    messages: {
      wrongIndentation: "Expected indentation of {{expected}} but found {{actual}}."
    }
  },
  create(t4) {
    let r = "space", s = 4;
    const n = {
      SwitchCase: 0,
      VariableDeclarator: {
        var: 1,
        let: 1,
        const: 1
      },
      outerIIFEBody: 1,
      FunctionDeclaration: {
        parameters: 1,
        body: 1
      },
      FunctionExpression: {
        parameters: 1,
        body: 1
      },
      CallExpression: {
        arguments: 1
      },
      MemberExpression: 1,
      ArrayExpression: 1,
      ObjectExpression: 1,
      ImportDeclaration: 1,
      flatTernaryExpressions: false,
      ignoredNodes: [],
      ignoreComments: false
    };
    t4.options.length && (t4.options[0] === "tab" ? (s = 1, r = "tab") : (s = t4.options[0], r = "space"), t4.options[1] && (Object.assign(n, t4.options[1]), (typeof n.VariableDeclarator == "number" || n.VariableDeclarator === "first") && (n.VariableDeclarator = {
      var: n.VariableDeclarator,
      let: n.VariableDeclarator,
      const: n.VariableDeclarator
    })));
    const a = t4.getSourceCode(), o = new rN(a), l = new nN(o, s, r === "space" ? " " : "	"), i = /* @__PURE__ */ new WeakSet();
    function u(S, F, N) {
      const k = `${S} ${r}${S === 1 ? "" : "s"}`, j = `space${F === 1 ? "" : "s"}`, O = `tab${N === 1 ? "" : "s"}`;
      let z;
      return F > 0 ? z = r === "space" ? F : `${F} ${j}` : N > 0 ? z = r === "tab" ? N : `${N} ${O}` : z = "0", {
        expected: k,
        actual: z
      };
    }
    function c(S, F) {
      const N = Array.from(o.getTokenIndent(S)), k = N.filter((O) => O === " ").length, j = N.filter((O) => O === "	").length;
      t4.report({
        node: S,
        messageId: "wrongIndentation",
        data: u(F.length, k, j),
        loc: {
          start: {
            line: S.loc.start.line,
            column: 0
          },
          end: {
            line: S.loc.start.line,
            column: S.loc.start.column
          }
        },
        fix(O) {
          const z = [S.range[0] - S.loc.start.column, S.range[0]];
          return O.replaceTextRange(z, F);
        }
      });
    }
    function f(S, F) {
      const N = o.getTokenIndent(S);
      return N === F || N.includes(" ") && N.includes("	");
    }
    function h(S) {
      if (!S.parent || S.parent.type !== "CallExpression" || S.parent.callee !== S)
        return false;
      let F = S.parent && S.parent.parent;
      for (; F.type === "UnaryExpression" && ["!", "~", "+", "-"].indexOf(F.operator) > -1 || F.type === "AssignmentExpression" || F.type === "LogicalExpression" || F.type === "SequenceExpression" || F.type === "VariableDeclarator"; )
        F = F.parent;
      return (F.type === "ExpressionStatement" || F.type === "VariableDeclaration") && F.parent.type === "Program";
    }
    function p(S) {
      const N = S.match(/\s*$/u)[0].match(E.createGlobalLinebreakMatcher());
      return N === null ? 0 : N.length;
    }
    function m(S, F, N, k) {
      function j(O) {
        let z = a.getTokenBefore(O);
        for (; E.isOpeningParenToken(z) && z !== F; )
          z = a.getTokenBefore(z);
        return a.getTokenAfter(z);
      }
      l.setDesiredOffsets([F.range[1], N.range[0]], F, typeof k == "number" ? k : 1), l.setDesiredOffset(N, F, 0), !(k === "first" && S.length && !S[0]) && S.forEach((O, z) => {
        if (O && (k === "off" && l.ignoreToken(j(O)), z !== 0))
          if (k === "first" && o.isFirstTokenOfLine(j(O)))
            l.matchOffsetOf(j(S[0]), j(O));
          else {
            const te = S[z - 1], se = te && j(te), ye = te && a.getLastToken(te);
            te && ye.loc.end.line - p(ye.value) > F.loc.end.line && l.setDesiredOffsets([te.range[1], O.range[1]], se, 0);
          }
      });
    }
    function d(S) {
      if (S.type !== "BlockStatement") {
        const F = a.getTokenBefore(S, E.isNotOpeningParenToken);
        let N = a.getFirstToken(S), k = a.getLastToken(S);
        for (; E.isOpeningParenToken(a.getTokenBefore(N)) && E.isClosingParenToken(a.getTokenAfter(k)); )
          N = a.getTokenBefore(N), k = a.getTokenAfter(k);
        l.setDesiredOffsets([N.range[0], k.range[1]], F, 1);
        const j = a.getLastToken(S);
        S.type !== "EmptyStatement" && E.isSemicolonToken(j) && l.setDesiredOffset(j, F, 0);
      }
    }
    function g(S) {
      let F;
      S.arguments.length ? F = a.getFirstTokenBetween(S.callee, S.arguments[0], E.isOpeningParenToken) : F = a.getLastToken(S, 1);
      const N = a.getLastToken(S);
      if (i.add(F), i.add(N), S.optional) {
        const O = a.getTokenAfter(S.callee, E.isQuestionDotToken), z = a.getTokensBetween(S.callee, O, {
          filter: E.isClosingParenToken
        }).length, te = z ? a.getTokenBefore(S.callee, {
          skip: z - 1
        }) : a.getFirstToken(S.callee), se = a.getTokenBefore(O), ye = se.loc.end.line === F.loc.start.line ? se : te;
        l.setDesiredOffset(O, ye, 1);
      }
      const k = S.callee.type === "TaggedTemplateExpression" ? a.getFirstToken(S.callee.quasi) : F, j = a.getTokenBefore(k);
      l.setDesiredOffset(F, j, 0), m(S.arguments, F, N, n.CallExpression.arguments);
    }
    function y(S) {
      const F = [], N = [];
      S.forEach((k) => {
        E.isOpeningParenToken(k) ? F.push(k) : E.isClosingParenToken(k) && N.unshift({
          left: F.pop(),
          right: k
        });
      }), N.forEach((k) => {
        const j = k.left, O = k.right;
        if (!i.has(j) && !i.has(O)) {
          const z = new Set(a.getTokensBetween(j, O));
          z.forEach((te) => {
            z.has(l.getFirstDependency(te)) || l.setDesiredOffset(te, j, 1);
          });
        }
        l.setDesiredOffset(O, j, 0);
      });
    }
    function x(S) {
      const F = new Set(a.getTokens(S, {
        includeComments: true
      }));
      F.forEach((N) => {
        if (!F.has(l.getFirstDependency(N))) {
          const k = o.getFirstTokenOfLine(N);
          N === k ? l.ignoreToken(N) : l.setDesiredOffset(N, k, 0);
        }
      });
    }
    function A(S, F) {
      let N = F;
      for (; N.parent && !N.parent.type.endsWith("Statement") && !N.parent.type.endsWith("Declaration"); )
        N = N.parent;
      return N = N.parent, !N || N.loc.start.line === S.loc.start.line;
    }
    function b(S, F) {
      const N = S.loc.end.line, k = F.loc.start.line;
      if (N === k || N === k - 1)
        return false;
      for (let j = N + 1; j < k; ++j)
        if (!o.firstTokensByLineNumber.has(j))
          return true;
      return false;
    }
    const v = /* @__PURE__ */ new Set(), C = {
      "ArrayExpression, ArrayPattern"(S) {
        const F = a.getFirstToken(S), N = a.getTokenAfter([...S.elements].reverse().find((k) => k) || F, E.isClosingBracketToken);
        m(S.elements, F, N, n.ArrayExpression);
      },
      "ObjectExpression, ObjectPattern"(S) {
        const F = a.getFirstToken(S), N = a.getTokenAfter(S.properties.length ? S.properties[S.properties.length - 1] : F, E.isClosingBraceToken);
        m(S.properties, F, N, n.ObjectExpression);
      },
      ArrowFunctionExpression(S) {
        const F = a.getFirstToken(S, {
          skip: S.async ? 1 : 0
        });
        if (E.isOpeningParenToken(F)) {
          const N = F, k = a.getTokenBefore(S.body, E.isClosingParenToken);
          i.add(N), i.add(k), m(S.params, N, k, n.FunctionExpression.parameters);
        }
        d(S.body);
      },
      AssignmentExpression(S) {
        const F = a.getFirstTokenBetween(S.left, S.right, (N) => N.value === S.operator);
        l.setDesiredOffsets([F.range[0], S.range[1]], a.getLastToken(S.left), 1), l.ignoreToken(F), l.ignoreToken(a.getTokenAfter(F));
      },
      "BinaryExpression, LogicalExpression"(S) {
        const F = a.getFirstTokenBetween(S.left, S.right, (k) => k.value === S.operator), N = a.getTokenAfter(F);
        l.ignoreToken(F), l.ignoreToken(N), l.setDesiredOffset(N, F, 0);
      },
      "BlockStatement, ClassBody"(S) {
        let F;
        S.parent && h(S.parent) ? F = n.outerIIFEBody : S.parent && (S.parent.type === "FunctionExpression" || S.parent.type === "ArrowFunctionExpression") ? F = n.FunctionExpression.body : S.parent && S.parent.type === "FunctionDeclaration" ? F = n.FunctionDeclaration.body : F = 1, E.STATEMENT_LIST_PARENTS.has(S.parent.type) || l.setDesiredOffset(a.getFirstToken(S), a.getFirstToken(S.parent), 0), m(S.body, a.getFirstToken(S), a.getLastToken(S), F);
      },
      CallExpression: g,
      "ClassDeclaration[superClass], ClassExpression[superClass]"(S) {
        const F = a.getFirstToken(S), N = a.getTokenBefore(S.superClass, E.isNotOpeningParenToken);
        l.setDesiredOffsets([N.range[0], S.body.range[0]], F, 1);
      },
      ConditionalExpression(S) {
        const F = a.getFirstToken(S);
        if (!n.flatTernaryExpressions || !E.isTokenOnSameLine(S.test, S.consequent) || A(F, S)) {
          const N = a.getFirstTokenBetween(S.test, S.consequent, (te) => te.type === "Punctuator" && te.value === "?"), k = a.getFirstTokenBetween(S.consequent, S.alternate, (te) => te.type === "Punctuator" && te.value === ":"), j = a.getTokenAfter(N), O = a.getTokenBefore(k), z = a.getTokenAfter(k);
          l.setDesiredOffset(N, F, 1), l.setDesiredOffset(k, F, 1), l.setDesiredOffset(j, F, j.type === "Punctuator" && n.offsetTernaryExpressions ? 2 : 1), O.loc.end.line === z.loc.start.line ? l.setDesiredOffset(z, j, 0) : l.setDesiredOffset(z, F, z.type === "Punctuator" && n.offsetTernaryExpressions ? 2 : 1);
        }
      },
      "DoWhileStatement, WhileStatement, ForInStatement, ForOfStatement": (S) => d(S.body),
      ExportNamedDeclaration(S) {
        if (S.declaration === null) {
          const F = a.getLastToken(S, E.isClosingBraceToken);
          m(S.specifiers, a.getFirstToken(S, {
            skip: 1
          }), F, 1), S.source && l.setDesiredOffsets([F.range[1], S.range[1]], a.getFirstToken(S), 1);
        }
      },
      ForStatement(S) {
        const F = a.getFirstToken(S, 1);
        S.init && l.setDesiredOffsets(S.init.range, F, 1), S.test && l.setDesiredOffsets(S.test.range, F, 1), S.update && l.setDesiredOffsets(S.update.range, F, 1), d(S.body);
      },
      "FunctionDeclaration, FunctionExpression"(S) {
        const F = a.getTokenBefore(S.body), N = a.getTokenBefore(S.params.length ? S.params[0] : F);
        i.add(N), i.add(F), m(S.params, N, F, n[S.type].parameters);
      },
      IfStatement(S) {
        d(S.consequent), S.alternate && S.alternate.type !== "IfStatement" && d(S.alternate);
      },
      ImportDeclaration(S) {
        if (S.specifiers.some((j) => j.type === "ImportSpecifier")) {
          const j = a.getFirstToken(S, E.isOpeningBraceToken), O = a.getLastToken(S, E.isClosingBraceToken);
          m(S.specifiers.filter((z) => z.type === "ImportSpecifier"), j, O, n.ImportDeclaration);
        }
        const F = a.getLastToken(S, (j) => j.type === "Identifier" && j.value === "from"), N = a.getLastToken(S, (j) => j.type === "String"), k = a.getLastToken(S, (j) => j.type === "Punctuator" && j.value === ";");
        if (F) {
          const j = k && k.range[1] === N.range[1] ? S.range[1] : N.range[1];
          l.setDesiredOffsets([F.range[0], j], a.getFirstToken(S), 1);
        }
      },
      ImportExpression(S) {
        const F = a.getFirstToken(S, 1), N = a.getLastToken(S);
        i.add(F), i.add(N), l.setDesiredOffset(F, a.getTokenBefore(F), 0), m([S.source], F, N, n.CallExpression.arguments);
      },
      "MemberExpression, JSXMemberExpression, MetaProperty"(S) {
        const F = S.type === "MetaProperty" ? S.meta : S.object, N = a.getFirstTokenBetween(F, S.property, E.isNotClosingParenToken), k = a.getTokenAfter(N), j = a.getTokensBetween(F, S.property, {
          filter: E.isClosingParenToken
        }).length, O = j ? a.getTokenBefore(F, {
          skip: j - 1
        }) : a.getFirstToken(F), z = a.getTokenBefore(N), te = S.computed ? N : k;
        S.computed && (l.setDesiredOffset(a.getLastToken(S), N, 0), l.setDesiredOffsets(S.property.range, N, 1));
        const se = z.loc.end.line === te.loc.start.line ? z : O;
        typeof n.MemberExpression == "number" ? (l.setDesiredOffset(N, se, n.MemberExpression), l.setDesiredOffset(k, S.computed ? N : se, n.MemberExpression)) : (l.ignoreToken(N), l.ignoreToken(k), l.setDesiredOffset(N, se, 0), l.setDesiredOffset(k, N, 0));
      },
      NewExpression(S) {
        (S.arguments.length > 0 || E.isClosingParenToken(a.getLastToken(S)) && E.isOpeningParenToken(a.getLastToken(S, 1))) && g(S);
      },
      Property(S) {
        if (!S.shorthand && !S.method && S.kind === "init") {
          const F = a.getFirstTokenBetween(S.key, S.value, E.isColonToken);
          l.ignoreToken(a.getTokenAfter(F));
        }
      },
      SwitchStatement(S) {
        const F = a.getTokenAfter(S.discriminant, E.isOpeningBraceToken), N = a.getLastToken(S);
        l.setDesiredOffsets([F.range[1], N.range[0]], F, n.SwitchCase), S.cases.length && a.getTokensBetween(S.cases[S.cases.length - 1], N, {
          includeComments: true,
          filter: E.isCommentToken
        }).forEach((k) => l.ignoreToken(k));
      },
      SwitchCase(S) {
        if (!(S.consequent.length === 1 && S.consequent[0].type === "BlockStatement")) {
          const F = a.getFirstToken(S), N = a.getTokenAfter(S);
          l.setDesiredOffsets([F.range[1], N.range[0]], F, 1);
        }
      },
      TemplateLiteral(S) {
        S.expressions.forEach((F, N) => {
          const k = S.quasis[N], j = S.quasis[N + 1], O = k.loc.start.line === k.loc.end.line ? a.getFirstToken(k) : null;
          l.setDesiredOffsets([k.range[1], j.range[0]], O, 1), l.setDesiredOffset(a.getFirstToken(j), O, 0);
        });
      },
      VariableDeclaration(S) {
        let F = Object.prototype.hasOwnProperty.call(n.VariableDeclarator, S.kind) ? n.VariableDeclarator[S.kind] : 1;
        const N = a.getFirstToken(S), k = a.getLastToken(S);
        if (n.VariableDeclarator[S.kind] === "first") {
          if (S.declarations.length > 1) {
            m(S.declarations, N, k, "first");
            return;
          }
          F = 1;
        }
        S.declarations[S.declarations.length - 1].loc.start.line > S.loc.start.line ? l.setDesiredOffsets(S.range, N, F, true) : l.setDesiredOffsets(S.range, N, F), E.isSemicolonToken(k) && l.ignoreToken(k);
      },
      VariableDeclarator(S) {
        if (S.init) {
          const F = a.getTokenBefore(S.init, E.isNotOpeningParenToken), N = a.getTokenAfter(F);
          l.ignoreToken(F), l.ignoreToken(N), l.setDesiredOffsets([N.range[0], S.range[1]], F, 1), l.setDesiredOffset(F, a.getLastToken(S.id), 0);
        }
      },
      "JSXAttribute[value]"(S) {
        const F = a.getFirstTokenBetween(S.name, S.value, (N) => N.type === "Punctuator" && N.value === "=");
        l.setDesiredOffsets([F.range[0], S.value.range[1]], a.getFirstToken(S.name), 1);
      },
      JSXElement(S) {
        S.closingElement && m(S.children, a.getFirstToken(S.openingElement), a.getFirstToken(S.closingElement), 1);
      },
      JSXOpeningElement(S) {
        const F = a.getFirstToken(S);
        let N;
        S.selfClosing ? (N = a.getLastToken(S, {
          skip: 1
        }), l.setDesiredOffset(a.getLastToken(S), N, 0)) : N = a.getLastToken(S), l.setDesiredOffsets(S.name.range, a.getFirstToken(S)), m(S.attributes, F, N, 1);
      },
      JSXClosingElement(S) {
        const F = a.getFirstToken(S);
        l.setDesiredOffsets(S.name.range, F, 1);
      },
      JSXFragment(S) {
        const F = a.getFirstToken(S.openingFragment), N = a.getFirstToken(S.closingFragment);
        m(S.children, F, N, 1);
      },
      JSXOpeningFragment(S) {
        const F = a.getFirstToken(S), N = a.getLastToken(S);
        l.setDesiredOffsets(S.range, F, 1), l.matchOffsetOf(F, N);
      },
      JSXClosingFragment(S) {
        const F = a.getFirstToken(S), N = a.getLastToken(S, {
          skip: 1
        }), k = a.getLastToken(S), j = E.isTokenOnSameLine(N, k) ? N : k;
        l.setDesiredOffsets(S.range, F, 1), l.matchOffsetOf(F, j);
      },
      JSXExpressionContainer(S) {
        const F = a.getFirstToken(S), N = a.getLastToken(S);
        l.setDesiredOffsets([F.range[1], N.range[0]], F, 1);
      },
      JSXSpreadAttribute(S) {
        const F = a.getFirstToken(S), N = a.getLastToken(S);
        l.setDesiredOffsets([F.range[1], N.range[0]], F, 1);
      },
      "*"(S) {
        const F = a.getFirstToken(S);
        F && !v.has(F) && l.setDesiredOffsets(S.range, F, 0);
      }
    }, T = [], w = {};
    for (const [S, F] of Object.entries(C))
      w[S] = (N) => T.push({
        listener: F,
        node: N
      });
    const B = /* @__PURE__ */ new Set();
    function I(S) {
      B.add(S), v.add(a.getFirstToken(S));
    }
    const _ = n.ignoredNodes.reduce((S, F) => Object.assign(S, {
      [F]: I
    }), {});
    return Object.assign(w, _, {
      "*:exit"(S) {
        eN.has(S.type) || I(S);
      },
      "Program:exit"() {
        n.ignoreComments && a.getAllComments().forEach((F) => l.ignoreToken(F)), T.filter((F) => !B.has(F.node)).forEach((F) => F.listener(F.node)), B.forEach(x), y(a.ast.tokens);
        const S = a.ast.comments.reduce((F, N) => {
          const k = a.getTokenBefore(N, {
            includeComments: true
          });
          return F.set(N, F.has(k) ? F.get(k) : k);
        }, /* @__PURE__ */ new WeakMap());
        a.lines.forEach((F, N) => {
          const k = N + 1;
          if (!o.firstTokensByLineNumber.has(k))
            return;
          const j = o.firstTokensByLineNumber.get(k);
          if (j.loc.start.line === k) {
            if (E.isCommentToken(j)) {
              const O = S.get(j), z = O ? a.getTokenAfter(O) : a.ast.tokens[0], te = O && !b(O, j), se = z && !b(j, z);
              if (z && E.isSemicolonToken(z) && !E.isTokenOnSameLine(j, z) && l.setDesiredOffset(j, z, 0), te && f(j, l.getDesiredIndent(O)) || se && f(j, l.getDesiredIndent(z)))
                return;
            }
            f(j, l.getDesiredIndent(j)) || c(j, l.getDesiredIndent(j));
          }
        });
      }
    });
  }
};
Gc.meta;
Gc.create;
function hb(t4) {
  return t4.type === "ForInStatement" || t4.type === "ForOfStatement" || t4.type === "ForStatement";
}
function sN(t4) {
  const e = t4.parent, r = e.parent;
  return hb(r) ? r.type === "ForStatement" ? r.init === e : r.left === e : !!t4.init;
}
var Hc = {
  meta: {
    type: "suggestion",
    docs: {
      description: "require or disallow initialization in variable declarations",
      category: "Variables",
      recommended: false,
      url: "https://eslint.org/docs/rules/init-declarations"
    },
    schema: {
      anyOf: [{
        type: "array",
        items: [{
          enum: ["always"]
        }],
        minItems: 0,
        maxItems: 1
      }, {
        type: "array",
        items: [{
          enum: ["never"]
        }, {
          type: "object",
          properties: {
            ignoreForLoopInit: {
              type: "boolean"
            }
          },
          additionalProperties: false
        }],
        minItems: 0,
        maxItems: 2
      }]
    },
    messages: {
      initialized: "Variable '{{idName}}' should be initialized on declaration.",
      notInitialized: "Variable '{{idName}}' should not be initialized on declaration."
    }
  },
  create(t4) {
    const e = t4.options[0] || "always", r = t4.options[1] || {};
    return {
      "VariableDeclaration:exit"(s) {
        const n = s.kind, a = s.declarations;
        for (let o = 0; o < a.length; ++o) {
          const l = a[o], i = l.id, u = sN(l), c = r.ignoreForLoopInit && hb(s.parent);
          let f = "";
          e === "always" && !u ? f = "initialized" : e === "never" && n !== "const" && u && !c && (f = "notInitialized"), i.type === "Identifier" && f && t4.report({
            node: l,
            messageId: f,
            data: {
              idName: i.name
            }
          });
        }
      }
    };
  }
};
Hc.meta;
Hc.create;
var aN = {
  "prefer-double": {
    quote: '"',
    description: "singlequote",
    convert(t4) {
      return t4.replace(/'/gu, '"');
    }
  },
  "prefer-single": {
    quote: "'",
    description: "doublequote",
    convert(t4) {
      return t4.replace(/"/gu, "'");
    }
  }
};
var Kc = {
  meta: {
    type: "layout",
    docs: {
      description: "enforce the consistent use of either double or single quotes in JSX attributes",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/jsx-quotes"
    },
    fixable: "whitespace",
    schema: [{
      enum: ["prefer-single", "prefer-double"]
    }],
    messages: {
      unexpected: "Unexpected usage of {{description}}."
    }
  },
  create(t4) {
    const e = t4.options[0] || "prefer-double", r = aN[e];
    function s(n) {
      return n.value.indexOf(r.quote) !== -1 || E.isSurroundedBy(n.raw, r.quote);
    }
    return {
      JSXAttribute(n) {
        const a = n.value;
        a && E.isStringLiteral(a) && !s(a) && t4.report({
          node: a,
          messageId: "unexpected",
          data: {
            description: r.description
          },
          fix(o) {
            return o.replaceText(a, r.convert(a.raw));
          }
        });
      }
    };
  }
};
Kc.meta;
Kc.create;
function iN(t4) {
  return E.LINEBREAK_MATCHER.test(t4);
}
function Ra(t4) {
  return t4[t4.length - 1];
}
function Ey(t4) {
  return t4.loc.end.line === t4.loc.start.line;
}
function oN(t4) {
  const [e] = t4, r = Ra(t4);
  return e.loc.start.line === r.loc.end.line;
}
function xs(t4, e) {
  return t4.mode = e.mode || "strict", typeof e.beforeColon < "u" ? t4.beforeColon = +e.beforeColon : t4.beforeColon = 0, typeof e.afterColon < "u" ? t4.afterColon = +e.afterColon : t4.afterColon = 1, typeof e.align < "u" && (typeof e.align == "object" ? t4.align = e.align : t4.align = {
    on: e.align,
    mode: t4.mode,
    beforeColon: t4.beforeColon,
    afterColon: t4.afterColon
  }), t4;
}
function lN(t4, e) {
  return typeof e.align == "object" ? (t4.align = xs({}, e.align), t4.align.on = e.align.on || "colon", t4.align.mode = e.align.mode || "strict", t4.multiLine = xs({}, e.multiLine || e), t4.singleLine = xs({}, e.singleLine || e)) : (t4.multiLine = xs({}, e.multiLine || e), t4.singleLine = xs({}, e.singleLine || e), t4.multiLine.align && (t4.align = {
    on: t4.multiLine.align.on,
    mode: t4.multiLine.align.mode || t4.multiLine.mode,
    beforeColon: t4.multiLine.align.beforeColon,
    afterColon: t4.multiLine.align.afterColon
  })), t4;
}
var Jc = {
  meta: {
    type: "layout",
    docs: {
      description: "enforce consistent spacing between keys and values in object literal properties",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/key-spacing"
    },
    fixable: "whitespace",
    schema: [{
      anyOf: [{
        type: "object",
        properties: {
          align: {
            anyOf: [{
              enum: ["colon", "value"]
            }, {
              type: "object",
              properties: {
                mode: {
                  enum: ["strict", "minimum"]
                },
                on: {
                  enum: ["colon", "value"]
                },
                beforeColon: {
                  type: "boolean"
                },
                afterColon: {
                  type: "boolean"
                }
              },
              additionalProperties: false
            }]
          },
          mode: {
            enum: ["strict", "minimum"]
          },
          beforeColon: {
            type: "boolean"
          },
          afterColon: {
            type: "boolean"
          }
        },
        additionalProperties: false
      }, {
        type: "object",
        properties: {
          singleLine: {
            type: "object",
            properties: {
              mode: {
                enum: ["strict", "minimum"]
              },
              beforeColon: {
                type: "boolean"
              },
              afterColon: {
                type: "boolean"
              }
            },
            additionalProperties: false
          },
          multiLine: {
            type: "object",
            properties: {
              align: {
                anyOf: [{
                  enum: ["colon", "value"]
                }, {
                  type: "object",
                  properties: {
                    mode: {
                      enum: ["strict", "minimum"]
                    },
                    on: {
                      enum: ["colon", "value"]
                    },
                    beforeColon: {
                      type: "boolean"
                    },
                    afterColon: {
                      type: "boolean"
                    }
                  },
                  additionalProperties: false
                }]
              },
              mode: {
                enum: ["strict", "minimum"]
              },
              beforeColon: {
                type: "boolean"
              },
              afterColon: {
                type: "boolean"
              }
            },
            additionalProperties: false
          }
        },
        additionalProperties: false
      }, {
        type: "object",
        properties: {
          singleLine: {
            type: "object",
            properties: {
              mode: {
                enum: ["strict", "minimum"]
              },
              beforeColon: {
                type: "boolean"
              },
              afterColon: {
                type: "boolean"
              }
            },
            additionalProperties: false
          },
          multiLine: {
            type: "object",
            properties: {
              mode: {
                enum: ["strict", "minimum"]
              },
              beforeColon: {
                type: "boolean"
              },
              afterColon: {
                type: "boolean"
              }
            },
            additionalProperties: false
          },
          align: {
            type: "object",
            properties: {
              mode: {
                enum: ["strict", "minimum"]
              },
              on: {
                enum: ["colon", "value"]
              },
              beforeColon: {
                type: "boolean"
              },
              afterColon: {
                type: "boolean"
              }
            },
            additionalProperties: false
          }
        },
        additionalProperties: false
      }]
    }],
    messages: {
      extraKey: "Extra space after {{computed}}key '{{key}}'.",
      extraValue: "Extra space before value for {{computed}}key '{{key}}'.",
      missingKey: "Missing space after {{computed}}key '{{key}}'.",
      missingValue: "Missing space before value for {{computed}}key '{{key}}'."
    }
  },
  create(t4) {
    const e = t4.options[0] || {}, r = lN({}, e), s = r.multiLine, n = r.singleLine, a = r.align || null, o = t4.getSourceCode();
    function l(b, v) {
      const C = b.loc.start.line, T = v.loc.start.line;
      if (T - C <= 1)
        return true;
      const w = o.getCommentsBefore(v);
      if (w.length && w[0].loc.start.line - C <= 1 && T - Ra(w).loc.end.line <= 1) {
        for (let B = 1; B < w.length; B++)
          if (w[B].loc.start.line - w[B - 1].loc.end.line > 1)
            return false;
        return true;
      }
      return false;
    }
    function i(b) {
      return !(b.method || b.shorthand || b.kind !== "init" || b.type !== "Property");
    }
    function u(b) {
      const v = o.getTokenAfter(b, E.isColonToken);
      return o.getTokenBefore(v);
    }
    function c(b) {
      return o.getTokenAfter(b, E.isColonToken);
    }
    function f(b) {
      const v = b.key;
      return b.computed ? o.getText().slice(v.range[0], v.range[1]) : E.getStaticPropertyName(b);
    }
    function h(b, v, C, T, w) {
      const B = C.length - T, I = c(b.key), _ = o.getTokenBefore(I, {
        includeComments: true
      }), S = o.getTokenAfter(I, {
        includeComments: true
      }), F = v === "key", N = B > 0, k = Math.abs(B), j = Array(k + 1).join(" "), O = F ? _.loc.end : I.loc.start, z = F ? I.loc.start : S.loc.start, te = F ? _.loc : S.loc, se = N ? {
        start: O,
        end: z
      } : te;
      if ((B && w === "strict" || B < 0 && w === "minimum" || B > 0 && !T && w === "minimum") && !(T && iN(C))) {
        let ye;
        if (N) {
          let xe;
          F ? xe = [_.range[1], _.range[1] + k] : xe = [S.range[0] - k, S.range[0]], ye = function(Ae) {
            return Ae.removeRange(xe);
          };
        } else
          F ? ye = function(xe) {
            return xe.insertTextAfter(_, j);
          } : ye = function(xe) {
            return xe.insertTextBefore(S, j);
          };
        let Se = "";
        N ? Se = v === "key" ? "extraKey" : "extraValue" : Se = v === "key" ? "missingKey" : "missingValue", t4.report({
          node: b[v],
          loc: se,
          messageId: Se,
          data: {
            computed: b.computed ? "computed " : "",
            key: f(b)
          },
          fix: ye
        });
      }
    }
    function p(b) {
      const v = o.getFirstToken(b);
      return u(b.key).range[1] - v.range[0];
    }
    function m(b) {
      const v = /(\s*):(\s*)/u.exec(o.getText().slice(b.key.range[1], b.value.range[0]));
      return v ? {
        beforeColon: v[1],
        afterColon: v[2]
      } : null;
    }
    function d(b) {
      return b.properties.length === 1 ? [b.properties] : b.properties.reduce((v, C) => {
        const T = Ra(v), w = Ra(T);
        return !w || l(w, C) ? T.push(C) : v.push([C]), v;
      }, [[]]);
    }
    function g(b) {
      const v = b.length, C = b.map(p), T = a.on;
      let w = Math.max(...C), B, I, _;
      a && v > 1 ? (B = a.beforeColon, I = a.afterColon, _ = a.mode) : (B = s.beforeColon, I = s.afterColon, _ = a.mode), w += T === "colon" ? B : I;
      for (let S = 0; S < v; S++) {
        const F = b[S], N = m(F);
        if (N) {
          const k = C[S];
          T === "value" ? (h(F, "key", N.beforeColon, B, _), h(F, "value", N.afterColon, w - k, _)) : (h(F, "key", N.beforeColon, w - k, _), h(F, "value", N.afterColon, I, _));
        }
      }
    }
    function y(b, v) {
      const C = m(b);
      C && (h(b, "key", C.beforeColon, v.beforeColon, v.mode), h(b, "value", C.afterColon, v.afterColon, v.mode));
    }
    function x(b, v) {
      const C = b.length;
      for (let T = 0; T < C; T++)
        y(b[T], v);
    }
    function A(b) {
      d(b).forEach((v) => {
        const C = v.filter(i);
        C.length > 0 && oN(C) ? x(C, s) : g(C);
      });
    }
    return a ? {
      ObjectExpression(b) {
        Ey(b) ? x(b.properties.filter(i), n) : A(b);
      }
    } : {
      Property(b) {
        y(b, Ey(b.parent) ? n : s);
      }
    };
  }
};
Jc.meta;
Jc.create;
var uN = /^[)\]}>]$/u;
var cN = /^(?:[([{<~!]|\+\+?|--?)$/u;
var va = /^[)\]}>*]$/u;
var by = /^[{*]$/u;
var pN = /\$\{$/u;
var fN = /^\}/u;
var Ea = /^(?:JSXElement|RegularExpression|String|Template)$/u;
var Zr = si.concat(["as", "async", "await", "from", "get", "let", "of", "set", "yield"]);
(function() {
  Zr.sort();
  for (let t4 = 1; t4 < Zr.length; ++t4)
    if (Zr[t4] === Zr[t4 - 1])
      throw new Error(`Duplication was found in the keyword list: ${Zr[t4]}`);
})();
function Cy(t4) {
  return t4.type === "Template" && pN.test(t4.value);
}
function Sy(t4) {
  return t4.type === "Template" && fN.test(t4.value);
}
var Xc = {
  meta: {
    type: "layout",
    docs: {
      description: "enforce consistent spacing before and after keywords",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/keyword-spacing"
    },
    fixable: "whitespace",
    schema: [{
      type: "object",
      properties: {
        before: {
          type: "boolean",
          default: true
        },
        after: {
          type: "boolean",
          default: true
        },
        overrides: {
          type: "object",
          properties: Zr.reduce((t4, e) => (t4[e] = {
            type: "object",
            properties: {
              before: {
                type: "boolean"
              },
              after: {
                type: "boolean"
              }
            },
            additionalProperties: false
          }, t4), {}),
          additionalProperties: false
        }
      },
      additionalProperties: false
    }],
    messages: {
      expectedBefore: 'Expected space(s) before "{{value}}".',
      expectedAfter: 'Expected space(s) after "{{value}}".',
      unexpectedBefore: 'Unexpected space(s) before "{{value}}".',
      unexpectedAfter: 'Unexpected space(s) after "{{value}}".'
    }
  },
  create(t4) {
    const e = t4.getSourceCode();
    function r(x, A) {
      const b = e.getTokenBefore(x);
      b && (Ea.test(b.type) || A.test(b.value)) && !Cy(b) && E.isTokenOnSameLine(b, x) && !e.isSpaceBetweenTokens(b, x) && t4.report({
        loc: x.loc,
        messageId: "expectedBefore",
        data: x,
        fix(v) {
          return v.insertTextBefore(x, " ");
        }
      });
    }
    function s(x, A) {
      const b = e.getTokenBefore(x);
      b && (Ea.test(b.type) || A.test(b.value)) && !Cy(b) && E.isTokenOnSameLine(b, x) && e.isSpaceBetweenTokens(b, x) && t4.report({
        loc: {
          start: b.loc.end,
          end: x.loc.start
        },
        messageId: "unexpectedBefore",
        data: x,
        fix(v) {
          return v.removeRange([b.range[1], x.range[0]]);
        }
      });
    }
    function n(x, A) {
      const b = e.getTokenAfter(x);
      b && (Ea.test(b.type) || A.test(b.value)) && !Sy(b) && E.isTokenOnSameLine(x, b) && !e.isSpaceBetweenTokens(x, b) && t4.report({
        loc: x.loc,
        messageId: "expectedAfter",
        data: x,
        fix(v) {
          return v.insertTextAfter(x, " ");
        }
      });
    }
    function a(x, A) {
      const b = e.getTokenAfter(x);
      b && (Ea.test(b.type) || A.test(b.value)) && !Sy(b) && E.isTokenOnSameLine(x, b) && e.isSpaceBetweenTokens(x, b) && t4.report({
        loc: {
          start: x.loc.end,
          end: b.loc.start
        },
        messageId: "unexpectedAfter",
        data: x,
        fix(v) {
          return v.removeRange([x.range[1], b.range[0]]);
        }
      });
    }
    function o(x = {}) {
      const A = x.before !== false, b = x.after !== false, v = {
        before: A ? r : s,
        after: b ? n : a
      }, C = x && x.overrides || {}, T = /* @__PURE__ */ Object.create(null);
      for (let w = 0; w < Zr.length; ++w) {
        const B = Zr[w], I = C[B];
        if (I) {
          const _ = "before" in I ? I.before : A, S = "after" in I ? I.after : b;
          T[B] = {
            before: _ ? r : s,
            after: S ? n : a
          };
        } else
          T[B] = v;
      }
      return T;
    }
    const l = o(t4.options[0]);
    function i(x, A) {
      l[x.value].before(x, A || uN);
    }
    function u(x, A) {
      l[x.value].after(x, A || cN);
    }
    function c(x) {
      i(x), u(x);
    }
    function f(x) {
      const A = x && e.getFirstToken(x);
      A && A.type === "Keyword" && c(A);
    }
    function h(x) {
      const A = x && e.getFirstToken(x);
      A && A.type === "Keyword" && i(A);
    }
    function p(x) {
      if (x) {
        const A = e.getTokenBefore(x, E.isKeywordToken);
        c(A);
      }
    }
    function m(x) {
      const A = x && e.getFirstToken(x);
      A && (A.type === "Keyword" && A.value === "function" || A.value === "async") && i(A);
    }
    function d(x) {
      f(x), p(x.superClass);
    }
    function g(x) {
      const A = e.getFirstToken(x);
      if (i(A, va), u(A, by), x.type === "ExportDefaultDeclaration" && c(e.getTokenAfter(A)), x.type === "ExportAllDeclaration" && x.exported) {
        const b = e.getTokenBefore(x.exported);
        i(b, va);
      }
      if (x.source) {
        const b = e.getTokenBefore(x.source);
        i(b, va), u(b, by);
      }
    }
    function y(x) {
      if (x.static && f(x), x.kind === "get" || x.kind === "set" || (x.method || x.type === "MethodDefinition") && x.value.async) {
        const A = e.getTokenBefore(x.key, (b) => {
          switch (b.value) {
            case "get":
            case "set":
            case "async":
              return true;
            default:
              return false;
          }
        });
        if (!A)
          throw new Error("Failed to find token get, set, or async beside method name");
        c(A);
      }
    }
    return {
      DebuggerStatement: f,
      WithStatement: f,
      BreakStatement: f,
      ContinueStatement: f,
      ReturnStatement: f,
      ThrowStatement: f,
      TryStatement: function(x) {
        f(x), f(x.handler), p(x.finalizer);
      },
      IfStatement: function(x) {
        f(x), p(x.alternate);
      },
      SwitchStatement: f,
      SwitchCase: f,
      DoWhileStatement: function(x) {
        f(x), p(x.test);
      },
      ForInStatement: function(x) {
        f(x), p(x.right);
      },
      ForOfStatement: function(x) {
        x.await ? (i(e.getFirstToken(x, 0)), u(e.getFirstToken(x, 1))) : f(x), c(e.getTokenBefore(x.right, E.isNotOpeningParenToken));
      },
      ForStatement: f,
      WhileStatement: f,
      ClassDeclaration: d,
      ExportNamedDeclaration: g,
      ExportDefaultDeclaration: g,
      ExportAllDeclaration: g,
      FunctionDeclaration: m,
      ImportDeclaration: g,
      VariableDeclaration: f,
      ArrowFunctionExpression: m,
      AwaitExpression: function(x) {
        i(e.getFirstToken(x));
      },
      ClassExpression: d,
      FunctionExpression: m,
      NewExpression: h,
      Super: h,
      ThisExpression: h,
      UnaryExpression: h,
      YieldExpression: h,
      ImportNamespaceSpecifier: function(x) {
        const A = e.getFirstToken(x, 1);
        i(A, va);
      },
      MethodDefinition: y,
      Property: y
    };
  }
};
Xc.meta;
Xc.create;
var Qc = {
  meta: {
    type: "layout",
    docs: {
      description: "enforce position of line comments",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/line-comment-position"
    },
    schema: [{
      oneOf: [{
        enum: ["above", "beside"]
      }, {
        type: "object",
        properties: {
          position: {
            enum: ["above", "beside"]
          },
          ignorePattern: {
            type: "string"
          },
          applyDefaultPatterns: {
            type: "boolean"
          },
          applyDefaultIgnorePatterns: {
            type: "boolean"
          }
        },
        additionalProperties: false
      }]
    }],
    messages: {
      above: "Expected comment to be above code.",
      beside: "Expected comment to be beside code."
    }
  },
  create(t4) {
    const e = t4.options[0];
    let r, s, n = true;
    !e || typeof e == "string" ? r = !e || e === "above" : (r = !e.position || e.position === "above", s = e.ignorePattern, Object.prototype.hasOwnProperty.call(e, "applyDefaultIgnorePatterns") ? n = e.applyDefaultIgnorePatterns : n = e.applyDefaultPatterns !== false);
    const a = E.COMMENTS_IGNORE_PATTERN, o = new RegExp(s, "u"), l = t4.getSourceCode();
    return {
      Program() {
        l.getAllComments().filter((u) => u.type === "Line").forEach((u) => {
          if (n && (a.test(u.value) || /^\s*falls?\s?through/u.test(u.value)) || s && o.test(u.value))
            return;
          const c = l.getTokenBefore(u, {
            includeComments: true
          }), f = c && c.loc.end.line === u.loc.start.line;
          r ? f && t4.report({
            node: u,
            messageId: "above"
          }) : f || t4.report({
            node: u,
            messageId: "beside"
          });
        });
      }
    };
  }
};
Qc.meta;
Qc.create;
var Yc = {
  meta: {
    type: "layout",
    docs: {
      description: "enforce consistent linebreak style",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/linebreak-style"
    },
    fixable: "whitespace",
    schema: [{
      enum: ["unix", "windows"]
    }],
    messages: {
      expectedLF: "Expected linebreaks to be 'LF' but found 'CRLF'.",
      expectedCRLF: "Expected linebreaks to be 'CRLF' but found 'LF'."
    }
  },
  create(t4) {
    const e = t4.getSourceCode();
    function r(s, n) {
      return function(a) {
        return a.replaceTextRange(s, n);
      };
    }
    return {
      Program: function(s) {
        const n = t4.options[0] || "unix", a = n === "unix", o = a ? `
` : `\r
`, l = e.getText(), i = E.createGlobalLinebreakMatcher();
        let u, c = 0;
        for (; (u = i.exec(l)) !== null; ) {
          if (c++, u[0] === o)
            continue;
          const f = u.index, h = [f, f + u[0].length];
          t4.report({
            node: s,
            loc: {
              start: {
                line: c,
                column: e.lines[c - 1].length
              },
              end: {
                line: c + 1,
                column: 0
              }
            },
            messageId: a ? "expectedLF" : "expectedCRLF",
            fix: r(h, o)
          });
        }
      }
    };
  }
};
Yc.meta;
Yc.create;
function hN(t4) {
  return t4.map((r, s) => ({
    code: r.trim(),
    num: s + 1
  })).filter((r) => !r.code).map((r) => r.num);
}
function mN(t4) {
  const e = [];
  return t4.forEach((r) => {
    const s = r.loc.start.line, n = r.loc.end.line;
    e.push(s, n);
  }), e;
}
var Zc = {
  meta: {
    type: "layout",
    docs: {
      description: "require empty lines around comments",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/lines-around-comment"
    },
    fixable: "whitespace",
    schema: [{
      type: "object",
      properties: {
        beforeBlockComment: {
          type: "boolean",
          default: true
        },
        afterBlockComment: {
          type: "boolean",
          default: false
        },
        beforeLineComment: {
          type: "boolean",
          default: false
        },
        afterLineComment: {
          type: "boolean",
          default: false
        },
        allowBlockStart: {
          type: "boolean",
          default: false
        },
        allowBlockEnd: {
          type: "boolean",
          default: false
        },
        allowClassStart: {
          type: "boolean"
        },
        allowClassEnd: {
          type: "boolean"
        },
        allowObjectStart: {
          type: "boolean"
        },
        allowObjectEnd: {
          type: "boolean"
        },
        allowArrayStart: {
          type: "boolean"
        },
        allowArrayEnd: {
          type: "boolean"
        },
        ignorePattern: {
          type: "string"
        },
        applyDefaultIgnorePatterns: {
          type: "boolean"
        }
      },
      additionalProperties: false
    }],
    messages: {
      after: "Expected line after comment.",
      before: "Expected line before comment."
    }
  },
  create(t4) {
    const e = Object.assign({}, t4.options[0]), r = e.ignorePattern, s = E.COMMENTS_IGNORE_PATTERN, n = new RegExp(r, "u"), a = e.applyDefaultIgnorePatterns !== false;
    e.beforeBlockComment = typeof e.beforeBlockComment < "u" ? e.beforeBlockComment : true;
    const o = t4.getSourceCode(), l = o.lines, i = l.length + 1, u = o.getAllComments(), c = mN(u), f = hN(l), h = c.concat(f);
    function p(_) {
      let S = _;
      do
        S = o.getTokenBefore(S, {
          includeComments: true
        });
      while (S && E.isCommentToken(S));
      if (S && E.isTokenOnSameLine(S, _))
        return true;
      S = _;
      do
        S = o.getTokenAfter(S, {
          includeComments: true
        });
      while (S && E.isCommentToken(S));
      return !!(S && E.isTokenOnSameLine(_, S));
    }
    function m(_, S) {
      return _.type === S || _.body && _.body.type === S || _.consequent && _.consequent.type === S;
    }
    function d(_) {
      return o.getNodeByRangeIndex(_.range[0]);
    }
    function g(_, S) {
      const F = d(_);
      return F && m(F, S) && _.loc.start.line - F.loc.start.line === 1;
    }
    function y(_, S) {
      const F = d(_);
      return F && m(F, S) && F.loc.end.line - _.loc.end.line === 1;
    }
    function x(_) {
      return g(_, "ClassBody") || g(_, "BlockStatement") || g(_, "SwitchCase");
    }
    function A(_) {
      return y(_, "ClassBody") || y(_, "BlockStatement") || y(_, "SwitchCase") || y(_, "SwitchStatement");
    }
    function b(_) {
      return g(_, "ClassBody");
    }
    function v(_) {
      return y(_, "ClassBody");
    }
    function C(_) {
      return g(_, "ObjectExpression") || g(_, "ObjectPattern");
    }
    function T(_) {
      return y(_, "ObjectExpression") || y(_, "ObjectPattern");
    }
    function w(_) {
      return g(_, "ArrayExpression") || g(_, "ArrayPattern");
    }
    function B(_) {
      return y(_, "ArrayExpression") || y(_, "ArrayPattern");
    }
    function I(_, S) {
      if (a && s.test(_.value) || r && n.test(_.value))
        return;
      let F = S.after, N = S.before;
      const k = _.loc.start.line - 1, j = _.loc.end.line + 1, O = p(_), z = e.allowBlockStart && x(_) && !(e.allowClassStart === false && b(_)), te = e.allowBlockEnd && A(_) && !(e.allowClassEnd === false && v(_)), se = e.allowClassStart && b(_), ye = e.allowClassEnd && v(_), Se = e.allowObjectStart && C(_), xe = e.allowObjectEnd && T(_), Ae = e.allowArrayStart && w(_), _e = e.allowArrayEnd && B(_);
      if (k < 1 && (N = false), j >= i && (F = false), O)
        return;
      const H = o.getTokenBefore(_, {
        includeComments: true
      }), Q = o.getTokenAfter(_, {
        includeComments: true
      });
      if (!(z || se || Se || Ae) && N && !h.includes(k) && !(E.isCommentToken(H) && E.isTokenOnSameLine(H, _))) {
        const ge = _.range[0] - _.loc.start.column, ae = [ge, ge];
        t4.report({
          node: _,
          messageId: "before",
          fix(ee) {
            return ee.insertTextBeforeRange(ae, `
`);
          }
        });
      }
      !(te || ye || xe || _e) && F && !h.includes(j) && !(E.isCommentToken(Q) && E.isTokenOnSameLine(_, Q)) && t4.report({
        node: _,
        messageId: "after",
        fix(ge) {
          return ge.insertTextAfter(_, `
`);
        }
      });
    }
    return {
      Program() {
        u.forEach((_) => {
          _.type === "Line" ? (e.beforeLineComment || e.afterLineComment) && I(_, {
            after: e.afterLineComment,
            before: e.beforeLineComment
          }) : _.type === "Block" && (e.beforeBlockComment || e.afterBlockComment) && I(_, {
            after: e.afterBlockComment,
            before: e.beforeBlockComment
          });
        });
      }
    };
  }
};
Zc.meta;
Zc.create;
var ep = {
  meta: {
    type: "layout",
    docs: {
      description: "require or disallow newlines around directives",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/lines-around-directive"
    },
    schema: [{
      oneOf: [{
        enum: ["always", "never"]
      }, {
        type: "object",
        properties: {
          before: {
            enum: ["always", "never"]
          },
          after: {
            enum: ["always", "never"]
          }
        },
        additionalProperties: false,
        minProperties: 2
      }]
    }],
    fixable: "whitespace",
    messages: {
      expected: 'Expected newline {{location}} "{{value}}" directive.',
      unexpected: 'Unexpected newline {{location}} "{{value}}" directive.'
    },
    deprecated: true,
    replacedBy: ["padding-line-between-statements"]
  },
  create(t4) {
    const e = t4.getSourceCode(), r = t4.options[0] || "always", s = typeof r == "string" ? r : r.before, n = typeof r == "string" ? r : r.after;
    function a(c) {
      const f = e.getTokenBefore(c, {
        includeComments: true
      }), h = f ? f.loc.end.line : 0;
      return c.loc.start.line - h >= 2;
    }
    function o(c) {
      const f = e.getLastToken(c), h = e.getTokenBefore(f);
      return E.isSemicolonToken(f) && f.loc.start.line > h.loc.end.line ? h : f;
    }
    function l(c) {
      const f = o(c);
      return e.getTokenAfter(f, {
        includeComments: true
      }).loc.start.line - f.loc.end.line >= 2;
    }
    function i(c, f, h) {
      t4.report({
        node: c,
        messageId: h ? "expected" : "unexpected",
        data: {
          value: c.expression.value,
          location: f
        },
        fix(p) {
          const m = o(c);
          return h ? f === "before" ? p.insertTextBefore(c, `
`) : p.insertTextAfter(m, `
`) : p.removeRange(f === "before" ? [c.range[0] - 1, c.range[0]] : [m.range[1], m.range[1] + 1]);
        }
      });
    }
    function u(c) {
      const f = E.getDirectivePrologue(c);
      if (!f.length)
        return;
      const h = f[0], p = e.getCommentsBefore(h);
      p.length ? (s === "always" && !a(h) && i(h, "before", true), s === "never" && a(h) && i(h, "before", false)) : c.type === "Program" && s === "never" && !p.length && a(h) && i(h, "before", false);
      const m = f[f.length - 1], d = c.type === "Program" ? c.body : c.body.body;
      m === d[d.length - 1] && !m.trailingComments || (n === "always" && !l(m) && i(m, "after", true), n === "never" && l(m) && i(m, "after", false));
    }
    return {
      Program: u,
      FunctionDeclaration: u,
      FunctionExpression: u,
      ArrowFunctionExpression: u
    };
  }
};
ep.meta;
ep.create;
var tp = {
  meta: {
    type: "layout",
    docs: {
      description: "require or disallow an empty line between class members",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/lines-between-class-members"
    },
    fixable: "whitespace",
    schema: [{
      enum: ["always", "never"]
    }, {
      type: "object",
      properties: {
        exceptAfterSingleLine: {
          type: "boolean",
          default: false
        }
      },
      additionalProperties: false
    }],
    messages: {
      never: "Unexpected blank line between class members.",
      always: "Expected blank line between class members."
    }
  },
  create(t4) {
    const e = [];
    e[0] = t4.options[0] || "always", e[1] = t4.options[1] || {
      exceptAfterSingleLine: false
    };
    const r = t4.getSourceCode();
    function s(o, l, i) {
      const u = r.getTokenAfter(o, {
        includeComments: true
      });
      return u !== l && u.loc.start.line - o.loc.end.line <= i ? s(u, l, i) : o;
    }
    function n(o, l, i) {
      const u = r.getTokenBefore(o, {
        includeComments: true
      });
      return u !== l && o.loc.start.line - u.loc.end.line <= i ? n(u, l, i) : o;
    }
    function a(o, l) {
      return r.getTokensBetween(o, l, {
        includeComments: true
      }).length !== 0;
    }
    return {
      ClassBody(o) {
        const l = o.body;
        for (let i = 0; i < l.length - 1; i++) {
          const u = r.getFirstToken(l[i]), c = r.getLastToken(l[i]), f = r.getFirstToken(l[i + 1]), p = !!E.isTokenOnSameLine(u, c) && e[1].exceptAfterSingleLine, m = s(c, f, 1), d = n(f, c, 1), g = d.loc.start.line - m.loc.end.line > 1, y = a(m, d), x = s(c, f, 0);
          (e[0] === "always" && !p && !g || e[0] === "never" && g) && t4.report({
            node: l[i + 1],
            messageId: g ? "never" : "always",
            fix(A) {
              return y ? null : g ? A.replaceTextRange([m.range[1], d.range[0]], `
`) : A.insertTextAfter(x, `
`);
            }
          });
        }
      }
    };
  }
};
tp.meta;
tp.create;
var rp = {
  meta: {
    type: "suggestion",
    docs: {
      description: "enforce a maximum number of classes per file",
      category: "Best Practices",
      recommended: false,
      url: "https://eslint.org/docs/rules/max-classes-per-file"
    },
    schema: [{
      type: "integer",
      minimum: 1
    }],
    messages: {
      maximumExceeded: "File has too many classes ({{ classCount }}). Maximum allowed is {{ max }}."
    }
  },
  create(t4) {
    const e = t4.options[0] || 1;
    let r = 0;
    return {
      Program() {
        r = 0;
      },
      "Program:exit"(s) {
        r > e && t4.report({
          node: s,
          messageId: "maximumExceeded",
          data: {
            classCount: r,
            max: e
          }
        });
      },
      "ClassDeclaration, ClassExpression"() {
        r++;
      }
    };
  }
};
rp.meta;
rp.create;
var np = {
  meta: {
    type: "suggestion",
    docs: {
      description: "enforce a maximum depth that blocks can be nested",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/max-depth"
    },
    schema: [{
      oneOf: [{
        type: "integer",
        minimum: 0
      }, {
        type: "object",
        properties: {
          maximum: {
            type: "integer",
            minimum: 0
          },
          max: {
            type: "integer",
            minimum: 0
          }
        },
        additionalProperties: false
      }]
    }],
    messages: {
      tooDeeply: "Blocks are nested too deeply ({{depth}}). Maximum allowed is {{maxDepth}}."
    }
  },
  create(t4) {
    const e = [], r = t4.options[0];
    let s = 4;
    typeof r == "object" && (Object.prototype.hasOwnProperty.call(r, "maximum") || Object.prototype.hasOwnProperty.call(r, "max")) && (s = r.maximum || r.max), typeof r == "number" && (s = r);
    function n() {
      e.push(0);
    }
    function a() {
      e.pop();
    }
    function o(i) {
      const u = ++e[e.length - 1];
      u > s && t4.report({
        node: i,
        messageId: "tooDeeply",
        data: {
          depth: u,
          maxDepth: s
        }
      });
    }
    function l() {
      e[e.length - 1]--;
    }
    return {
      Program: n,
      FunctionDeclaration: n,
      FunctionExpression: n,
      ArrowFunctionExpression: n,
      IfStatement(i) {
        i.parent.type !== "IfStatement" && o(i);
      },
      SwitchStatement: o,
      TryStatement: o,
      DoWhileStatement: o,
      WhileStatement: o,
      WithStatement: o,
      ForStatement: o,
      ForInStatement: o,
      ForOfStatement: o,
      "IfStatement:exit": l,
      "SwitchStatement:exit": l,
      "TryStatement:exit": l,
      "DoWhileStatement:exit": l,
      "WhileStatement:exit": l,
      "WithStatement:exit": l,
      "ForStatement:exit": l,
      "ForInStatement:exit": l,
      "ForOfStatement:exit": l,
      "FunctionDeclaration:exit": a,
      "FunctionExpression:exit": a,
      "ArrowFunctionExpression:exit": a,
      "Program:exit": a
    };
  }
};
np.meta;
np.create;
var mb = {
  type: "object",
  properties: {
    code: {
      type: "integer",
      minimum: 0
    },
    comments: {
      type: "integer",
      minimum: 0
    },
    tabWidth: {
      type: "integer",
      minimum: 0
    },
    ignorePattern: {
      type: "string"
    },
    ignoreComments: {
      type: "boolean"
    },
    ignoreStrings: {
      type: "boolean"
    },
    ignoreUrls: {
      type: "boolean"
    },
    ignoreTemplateLiterals: {
      type: "boolean"
    },
    ignoreRegExpLiterals: {
      type: "boolean"
    },
    ignoreTrailingComments: {
      type: "boolean"
    }
  },
  additionalProperties: false
};
var Ay = {
  anyOf: [mb, {
    type: "integer",
    minimum: 0
  }]
};
var sp = {
  meta: {
    type: "layout",
    docs: {
      description: "enforce a maximum line length",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/max-len"
    },
    schema: [Ay, Ay, mb],
    messages: {
      max: "This line has a length of {{lineLength}}. Maximum allowed is {{maxLength}}.",
      maxComment: "This line has a comment length of {{lineLength}}. Maximum allowed is {{maxCommentLength}}."
    }
  },
  create(t4) {
    const e = t4.getSourceCode();
    function r(w, B) {
      let I = 0;
      return w.replace(/\t/gu, (_, S) => {
        const F = S + I, N = B ? F % B : 0;
        I += B - N - 1;
      }), Array.from(w).length + I;
    }
    const s = Object.assign({}, t4.options[t4.options.length - 1]);
    typeof t4.options[0] == "number" && (s.code = t4.options[0]), typeof t4.options[1] == "number" && (s.tabWidth = t4.options[1]);
    const n = typeof s.code == "number" ? s.code : 80, a = typeof s.tabWidth == "number" ? s.tabWidth : 4, o = !!s.ignoreComments, l = !!s.ignoreStrings, i = !!s.ignoreTemplateLiterals, u = !!s.ignoreRegExpLiterals, c = !!s.ignoreTrailingComments || !!s.ignoreComments, f = !!s.ignoreUrls, h = s.comments;
    let p = s.ignorePattern || null;
    p && (p = new RegExp(p, "u"));
    function m(w, B, I) {
      return I && I.loc.start.line === B && B <= I.loc.end.line && (I.loc.end.line > B || I.loc.end.column === w.length);
    }
    function d(w, B, I) {
      const _ = I.loc.start, S = I.loc.end, F = !w.slice(0, I.loc.start.column).trim();
      return I && (_.line < B || _.line === B && F) && (S.line > B || S.line === B && S.column === w.length);
    }
    function g(w) {
      if (!w || !w.parent || w.type !== "JSXEmptyExpression" || w.parent.type !== "JSXExpressionContainer")
        return false;
      const B = w.parent;
      return B.loc.start.line === B.loc.end.line;
    }
    function y(w, B) {
      return w.slice(0, B.loc.start.column).replace(/\s+$/u, "");
    }
    function x(w, B, I) {
      Array.isArray(w[B]) || (w[B] = []), w[B].push(I);
    }
    function A() {
      return e.ast.tokens.filter((w) => w.type === "String" || w.type === "JSXText" && e.getNodeByRangeIndex(w.range[0] - 1).type === "JSXAttribute");
    }
    function b() {
      return e.ast.tokens.filter((w) => w.type === "Template");
    }
    function v() {
      return e.ast.tokens.filter((w) => w.type === "RegularExpression");
    }
    function C(w, B) {
      for (let I = B.loc.start.line; I <= B.loc.end.line; ++I)
        x(w, I, B);
      return w;
    }
    function T() {
      const w = [];
      return e.getAllComments().forEach((B) => {
        const I = e.getNodeByRangeIndex(B.range[0]);
        g(I) ? w[w.length - 1] !== I.parent && w.push(I.parent) : w.push(B);
      }), w;
    }
    return {
      Program: function(w) {
        const B = e.lines, I = o || h || c ? T() : [];
        let _ = 0;
        const F = A().reduce(C, {}), k = b().reduce(C, {}), O = v().reduce(C, {});
        B.forEach((z, te) => {
          const se = te + 1;
          let ye = false, Se;
          if (_ < I.length) {
            let H = null;
            do
              H = I[++_];
            while (H && H.loc.start.line <= se);
            if (H = I[--_], d(z, se, H))
              ye = true, Se = z;
            else if (c && m(z, se, H)) {
              Se = y(z, H);
              let Q = _;
              for (; m(Se, se, I[--Q]); )
                Se = y(Se, I[Q]);
            } else
              Se = z;
          } else
            Se = z;
          if (p && p.test(Se) || f && /[^:/?#]:\/\/[^?#]/u.test(Se) || l && F[se] || i && k[se] || u && O[se])
            return;
          const xe = r(Se, a), Ae = ye && h;
          if (ye && o)
            return;
          const _e = {
            start: {
              line: se,
              column: 0
            },
            end: {
              line: se,
              column: Se.length
            }
          };
          Ae ? xe > h && t4.report({
            node: w,
            loc: _e,
            messageId: "maxComment",
            data: {
              lineLength: xe,
              maxCommentLength: h
            }
          }) : xe > n && t4.report({
            node: w,
            loc: _e,
            messageId: "max",
            data: {
              lineLength: xe,
              maxLength: n
            }
          });
        });
      }
    };
  }
};
sp.meta;
sp.create;
var {
  upperCaseFirst: dN
} = Xs;
var gN = {
  type: "object",
  properties: {
    max: {
      type: "integer",
      minimum: 0
    },
    skipComments: {
      type: "boolean"
    },
    skipBlankLines: {
      type: "boolean"
    },
    IIFEs: {
      type: "boolean"
    }
  },
  additionalProperties: false
};
var yN = {
  oneOf: [gN, {
    type: "integer",
    minimum: 1
  }]
};
function xN(t4) {
  const e = /* @__PURE__ */ new Map();
  return t4.forEach((r) => {
    for (let s = r.loc.start.line; s <= r.loc.end.line; s++)
      e.set(s, r);
  }), e;
}
var ap = {
  meta: {
    type: "suggestion",
    docs: {
      description: "enforce a maximum number of lines of code in a function",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/max-lines-per-function"
    },
    schema: [yN],
    messages: {
      exceed: "{{name}} has too many lines ({{lineCount}}). Maximum allowed is {{maxLines}}."
    }
  },
  create(t4) {
    const e = t4.getSourceCode(), r = e.lines, s = t4.options[0];
    let n = 50, a = false, o = false, l = false;
    typeof s == "object" ? (n = typeof s.max == "number" ? s.max : 50, a = !!s.skipComments, o = !!s.skipBlankLines, l = !!s.IIFEs) : typeof s == "number" && (n = s);
    const i = xN(e.getAllComments());
    function u(p, m, d) {
      const g = d.loc.start, y = d.loc.end, x = g.line === m && !p.slice(0, g.column).trim(), A = y.line === m && !p.slice(y.column).trim();
      return d && (g.line < m || x) && (y.line > m || A);
    }
    function c(p) {
      return (p.type === "FunctionExpression" || p.type === "ArrowFunctionExpression") && p.parent && p.parent.type === "CallExpression" && p.parent.callee === p;
    }
    function f(p) {
      return !p.parent || p !== p.parent.value ? false : p.parent.type === "MethodDefinition" ? true : p.parent.type === "Property" ? p.parent.method === true || p.parent.kind === "get" || p.parent.kind === "set" : false;
    }
    function h(p) {
      const m = f(p) ? p.parent : p;
      if (!l && c(m))
        return;
      let d = 0;
      for (let g = m.loc.start.line - 1; g < m.loc.end.line; ++g) {
        const y = r[g];
        a && i.has(g + 1) && u(y, g + 1, i.get(g + 1)) || o && y.match(/^\s*$/u) || d++;
      }
      if (d > n) {
        const g = dN(E.getFunctionNameWithKind(p));
        t4.report({
          node: m,
          messageId: "exceed",
          data: {
            name: g,
            lineCount: d,
            maxLines: n
          }
        });
      }
    }
    return {
      FunctionDeclaration: h,
      FunctionExpression: h,
      ArrowFunctionExpression: h
    };
  }
};
ap.meta;
ap.create;
function vN(t4, e) {
  return [...Array(e - t4).keys()].map((r) => r + t4);
}
var ip = {
  meta: {
    type: "suggestion",
    docs: {
      description: "enforce a maximum number of lines per file",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/max-lines"
    },
    schema: [{
      oneOf: [{
        type: "integer",
        minimum: 0
      }, {
        type: "object",
        properties: {
          max: {
            type: "integer",
            minimum: 0
          },
          skipComments: {
            type: "boolean"
          },
          skipBlankLines: {
            type: "boolean"
          }
        },
        additionalProperties: false
      }]
    }],
    messages: {
      exceed: "File has too many lines ({{actual}}). Maximum allowed is {{max}}."
    }
  },
  create(t4) {
    const e = t4.options[0];
    let r = 300;
    typeof e == "object" && Object.prototype.hasOwnProperty.call(e, "max") ? r = e.max : typeof e == "number" && (r = e);
    const s = e && e.skipComments, n = e && e.skipBlankLines, a = t4.getSourceCode();
    function o(u) {
      return u && (u.type === "Block" || u.type === "Line");
    }
    function l(u) {
      let c = u.loc.start.line, f = u.loc.end.line, h = u;
      do
        h = a.getTokenBefore(h, {
          includeComments: true
        });
      while (o(h));
      h && E.isTokenOnSameLine(h, u) && (c += 1), h = u;
      do
        h = a.getTokenAfter(h, {
          includeComments: true
        });
      while (o(h));
      return h && E.isTokenOnSameLine(u, h) && (f -= 1), c <= f ? vN(c, f + 1) : [];
    }
    function i(u, c) {
      const f = u.map(c);
      return [].concat(...f);
    }
    return {
      "Program:exit"() {
        let u = a.lines.map((c, f) => ({
          lineNumber: f + 1,
          text: c
        }));
        if (u.length > 1 && u[u.length - 1].text === "" && u.pop(), n && (u = u.filter((c) => c.text.trim() !== "")), s) {
          const c = a.getAllComments(), f = i(c, (h) => l(h));
          u = u.filter((h) => !f.includes(h.lineNumber));
        }
        if (u.length > r) {
          const c = {
            start: {
              line: u[r].lineNumber,
              column: 0
            },
            end: {
              line: a.lines.length,
              column: a.lines[a.lines.length - 1].length
            }
          };
          t4.report({
            loc: c,
            messageId: "exceed",
            data: {
              max: r,
              actual: u.length
            }
          });
        }
      }
    };
  }
};
ip.meta;
ip.create;
var op = {
  meta: {
    type: "suggestion",
    docs: {
      description: "enforce a maximum depth that callbacks can be nested",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/max-nested-callbacks"
    },
    schema: [{
      oneOf: [{
        type: "integer",
        minimum: 0
      }, {
        type: "object",
        properties: {
          maximum: {
            type: "integer",
            minimum: 0
          },
          max: {
            type: "integer",
            minimum: 0
          }
        },
        additionalProperties: false
      }]
    }],
    messages: {
      exceed: "Too many nested callbacks ({{num}}). Maximum allowed is {{max}}."
    }
  },
  create(t4) {
    const e = t4.options[0];
    let r = 10;
    typeof e == "object" && (Object.prototype.hasOwnProperty.call(e, "maximum") || Object.prototype.hasOwnProperty.call(e, "max")) ? r = e.maximum || e.max : typeof e == "number" && (r = e);
    const s = [];
    function n(o) {
      if (o.parent.type === "CallExpression" && s.push(o), s.length > r) {
        const i = {
          num: s.length,
          max: r
        };
        t4.report({
          node: o,
          messageId: "exceed",
          data: i
        });
      }
    }
    function a() {
      s.pop();
    }
    return {
      ArrowFunctionExpression: n,
      "ArrowFunctionExpression:exit": a,
      FunctionExpression: n,
      "FunctionExpression:exit": a
    };
  }
};
op.meta;
op.create;
var {
  upperCaseFirst: EN
} = Xs;
var lp = {
  meta: {
    type: "suggestion",
    docs: {
      description: "enforce a maximum number of parameters in function definitions",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/max-params"
    },
    schema: [{
      oneOf: [{
        type: "integer",
        minimum: 0
      }, {
        type: "object",
        properties: {
          maximum: {
            type: "integer",
            minimum: 0
          },
          max: {
            type: "integer",
            minimum: 0
          }
        },
        additionalProperties: false
      }]
    }],
    messages: {
      exceed: "{{name}} has too many parameters ({{count}}). Maximum allowed is {{max}}."
    }
  },
  create(t4) {
    const e = t4.getSourceCode(), r = t4.options[0];
    let s = 3;
    typeof r == "object" && (Object.prototype.hasOwnProperty.call(r, "maximum") || Object.prototype.hasOwnProperty.call(r, "max")) && (s = r.maximum || r.max), typeof r == "number" && (s = r);
    function n(a) {
      a.params.length > s && t4.report({
        loc: E.getFunctionHeadLoc(a, e),
        node: a,
        messageId: "exceed",
        data: {
          name: EN(E.getFunctionNameWithKind(a)),
          count: a.params.length,
          max: s
        }
      });
    }
    return {
      FunctionDeclaration: n,
      ArrowFunctionExpression: n,
      FunctionExpression: n
    };
  }
};
lp.meta;
lp.create;
var up = {
  meta: {
    type: "layout",
    docs: {
      description: "enforce a maximum number of statements allowed per line",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/max-statements-per-line"
    },
    schema: [{
      type: "object",
      properties: {
        max: {
          type: "integer",
          minimum: 1,
          default: 1
        }
      },
      additionalProperties: false
    }],
    messages: {
      exceed: "This line has {{numberOfStatementsOnThisLine}} {{statements}}. Maximum allowed is {{maxStatementsPerLine}}."
    }
  },
  create(t4) {
    const e = t4.getSourceCode(), r = t4.options[0] || {}, s = typeof r.max < "u" ? r.max : 1;
    let n = 0, a = 0, o;
    function l() {
      o && t4.report({
        node: o,
        messageId: "exceed",
        data: {
          numberOfStatementsOnThisLine: a,
          maxStatementsPerLine: s,
          statements: a === 1 ? "statement" : "statements"
        }
      }), o = null;
    }
    function i(f) {
      return e.getLastToken(f, E.isNotSemicolonToken);
    }
    function u(f) {
      const h = f.loc.start.line;
      /^(?:(?:DoWhile|For|ForIn|ForOf|If|Labeled|While)Statement|Export(?:Default|Named)Declaration)$/u.test(f.parent.type) && f.parent.alternate !== f || (h === n ? a += 1 : (l(), a = 1, n = h), a === s + 1 && (o = o || f));
    }
    function c(f) {
      const h = i(f).loc.end.line;
      h !== n && (l(), a = 1, n = h);
    }
    return {
      BreakStatement: u,
      ClassDeclaration: u,
      ContinueStatement: u,
      DebuggerStatement: u,
      DoWhileStatement: u,
      ExpressionStatement: u,
      ForInStatement: u,
      ForOfStatement: u,
      ForStatement: u,
      FunctionDeclaration: u,
      IfStatement: u,
      ImportDeclaration: u,
      LabeledStatement: u,
      ReturnStatement: u,
      SwitchStatement: u,
      ThrowStatement: u,
      TryStatement: u,
      VariableDeclaration: u,
      WhileStatement: u,
      WithStatement: u,
      ExportNamedDeclaration: u,
      ExportDefaultDeclaration: u,
      ExportAllDeclaration: u,
      "BreakStatement:exit": c,
      "ClassDeclaration:exit": c,
      "ContinueStatement:exit": c,
      "DebuggerStatement:exit": c,
      "DoWhileStatement:exit": c,
      "ExpressionStatement:exit": c,
      "ForInStatement:exit": c,
      "ForOfStatement:exit": c,
      "ForStatement:exit": c,
      "FunctionDeclaration:exit": c,
      "IfStatement:exit": c,
      "ImportDeclaration:exit": c,
      "LabeledStatement:exit": c,
      "ReturnStatement:exit": c,
      "SwitchStatement:exit": c,
      "ThrowStatement:exit": c,
      "TryStatement:exit": c,
      "VariableDeclaration:exit": c,
      "WhileStatement:exit": c,
      "WithStatement:exit": c,
      "ExportNamedDeclaration:exit": c,
      "ExportDefaultDeclaration:exit": c,
      "ExportAllDeclaration:exit": c,
      "Program:exit": l
    };
  }
};
up.meta;
up.create;
var {
  upperCaseFirst: bN
} = Xs;
var cp = {
  meta: {
    type: "suggestion",
    docs: {
      description: "enforce a maximum number of statements allowed in function blocks",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/max-statements"
    },
    schema: [{
      oneOf: [{
        type: "integer",
        minimum: 0
      }, {
        type: "object",
        properties: {
          maximum: {
            type: "integer",
            minimum: 0
          },
          max: {
            type: "integer",
            minimum: 0
          }
        },
        additionalProperties: false
      }]
    }, {
      type: "object",
      properties: {
        ignoreTopLevelFunctions: {
          type: "boolean"
        }
      },
      additionalProperties: false
    }],
    messages: {
      exceed: "{{name}} has too many statements ({{count}}). Maximum allowed is {{max}}."
    }
  },
  create(t4) {
    const e = [], r = t4.options[0], s = t4.options[1] && t4.options[1].ignoreTopLevelFunctions || false, n = [];
    let a = 10;
    typeof r == "object" && (Object.prototype.hasOwnProperty.call(r, "maximum") || Object.prototype.hasOwnProperty.call(r, "max")) ? a = r.maximum || r.max : typeof r == "number" && (a = r);
    function o(u, c, f) {
      if (c > f) {
        const h = bN(E.getFunctionNameWithKind(u));
        t4.report({
          node: u,
          messageId: "exceed",
          data: {
            name: h,
            count: c,
            max: f
          }
        });
      }
    }
    function l() {
      e.push(0);
    }
    function i(u) {
      const c = e.pop();
      s && e.length === 0 ? n.push({
        node: u,
        count: c
      }) : o(u, c, a);
    }
    return {
      FunctionDeclaration: l,
      FunctionExpression: l,
      ArrowFunctionExpression: l,
      BlockStatement: function(u) {
        e[e.length - 1] += u.body.length;
      },
      "FunctionDeclaration:exit": i,
      "FunctionExpression:exit": i,
      "ArrowFunctionExpression:exit": i,
      "Program:exit"() {
        n.length !== 1 && n.forEach((u) => {
          const c = u.count, f = u.node;
          o(f, c, a);
        });
      }
    };
  }
};
cp.meta;
cp.create;
var pp = {
  meta: {
    type: "suggestion",
    docs: {
      description: "enforce a particular style for multiline comments",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/multiline-comment-style"
    },
    fixable: "whitespace",
    schema: [{
      enum: ["starred-block", "separate-lines", "bare-block"]
    }],
    messages: {
      expectedBlock: "Expected a block comment instead of consecutive line comments.",
      expectedBareBlock: "Expected a block comment without padding stars.",
      startNewline: "Expected a linebreak after '/*'.",
      endNewline: "Expected a linebreak before '*/'.",
      missingStar: "Expected a '*' at the start of this line.",
      alignment: "Expected this line to be aligned with the start of the comment.",
      expectedLines: "Expected multiple line comments instead of a block comment."
    }
  },
  create(t4) {
    const e = t4.getSourceCode(), r = t4.options[0] || "starred-block";
    function s(d) {
      return /^\s*\*/u.test(d);
    }
    function n([d]) {
      if (d.type !== "Block")
        return false;
      const g = d.value.split(E.LINEBREAK_MATCHER);
      return g.length > 0 && g.every((y, x) => (x === 0 || x === g.length - 1 ? /^\s*$/u : /^\s*\*/u).test(y));
    }
    function a([d]) {
      if (d.type !== "Block")
        return false;
      const g = d.value.split(E.LINEBREAK_MATCHER);
      return /^\*\s*$/u.test(g[0]) && g.slice(1, -1).every((y) => /^\s* /u.test(y)) && /^\s*$/u.test(g[g.length - 1]);
    }
    function o(d) {
      const g = d.map(({
        value: y
      }) => y).filter((y) => y.trim().length).every((y) => y.startsWith(" "));
      return d.map(({
        value: y
      }) => g ? y.replace(/^ /u, "") : y);
    }
    function l(d) {
      const g = d.value.split(E.LINEBREAK_MATCHER).filter((x, A, b) => !(A === 0 || A === b.length - 1)).map((x) => x.replace(/^\s*$/u, "")), y = g.map((x) => x.replace(/\s*\*/u, "")).filter((x) => x.trim().length).every((x) => x.startsWith(" "));
      return g.map((x) => x.replace(y ? /\s*\* ?/u : /\s*\*/u, ""));
    }
    function i(d) {
      const g = d.value.split(E.LINEBREAK_MATCHER).map((A) => A.replace(/^\s*$/u, "")), y = `${e.text.slice(d.range[0] - d.loc.start.column, d.range[0])}   `;
      let x = "";
      for (const [A, b] of g.entries()) {
        if (!b.trim().length || A === 0)
          continue;
        const [, v] = b.match(/^(\s*\*?\s*)/u);
        if (v.length < y.length) {
          const C = y.slice(v.length - y.length);
          C.length > x.length && (x = C);
        }
      }
      return g.map((A) => {
        const b = A.match(/^(\s*\*?\s*)(.*)/u), [, v, C] = b;
        return v.length > y.length ? `${v.slice(y.length - (x.length + v.length))}${C}` : v.length < y.length ? `${v.slice(y.length)}${C}` : C;
      });
    }
    function u(d) {
      const [g] = d;
      return g.type === "Line" ? o(d) : n(d) ? l(g) : i(g);
    }
    function c(d) {
      return e.text.slice(d.range[0] - d.loc.start.column, d.range[0]);
    }
    function f(d, g) {
      const y = c(d);
      return `/*
${g.map((x) => `${y} * ${x}`).join(`
`)}
${y} */`;
    }
    function h(d, g) {
      return g.map((y) => `// ${y}`).join(`
${c(d)}`);
    }
    function p(d, g) {
      return `/* ${g.join(`
${c(d)}   `)} */`;
    }
    const m = {
      "starred-block"(d) {
        const [g] = d, y = u(d);
        if (!y.some((x) => x.includes("*/")))
          if (d.length > 1)
            t4.report({
              loc: {
                start: g.loc.start,
                end: d[d.length - 1].loc.end
              },
              messageId: "expectedBlock",
              fix(x) {
                const A = [g.range[0], d[d.length - 1].range[1]];
                return y.some((b) => b.startsWith("/")) ? null : x.replaceTextRange(A, f(g, y));
              }
            });
          else {
            const x = g.value.split(E.LINEBREAK_MATCHER), b = `${c(g)} *`;
            if (!/^\*?\s*$/u.test(x[0])) {
              const v = g.value.startsWith("*") ? g.range[0] + 1 : g.range[0];
              t4.report({
                loc: {
                  start: g.loc.start,
                  end: {
                    line: g.loc.start.line,
                    column: g.loc.start.column + 2
                  }
                },
                messageId: "startNewline",
                fix: (C) => C.insertTextAfterRange([v, v + 2], `
${b}`)
              });
            }
            /^\s*$/u.test(x[x.length - 1]) || t4.report({
              loc: {
                start: {
                  line: g.loc.end.line,
                  column: g.loc.end.column - 2
                },
                end: g.loc.end
              },
              messageId: "endNewline",
              fix: (v) => v.replaceTextRange([g.range[1] - 2, g.range[1]], `
${b}/`)
            });
            for (let v = g.loc.start.line + 1; v <= g.loc.end.line; v++) {
              const C = e.lines[v - 1], T = s(C) ? "alignment" : "missingStar";
              C.startsWith(b) || t4.report({
                loc: {
                  start: {
                    line: v,
                    column: 0
                  },
                  end: {
                    line: v,
                    column: C.length
                  }
                },
                messageId: T,
                fix(w) {
                  const B = e.getIndexFromLoc({
                    line: v,
                    column: 0
                  });
                  if (T === "alignment") {
                    const [, F = ""] = C.match(/^(\s*\*)/u) || [], N = B + F.length;
                    return w.replaceTextRange([B, N], b);
                  }
                  const [, I = ""] = C.match(/^(\s*)/u) || [], _ = B + I.length;
                  let S;
                  for (const [F, N] of x.entries()) {
                    if (!/\S+/u.test(N))
                      continue;
                    const k = e.lines[g.loc.start.line - 1 + F], [, j = "", O = ""] = k.match(/^(\s*(?:\/?\*)?(\s*))/u) || [];
                    S = `${I.slice(j.length)}${O}`, /^\s*\//u.test(C) && S.length === 0 && (S += " ");
                    break;
                  }
                  return w.replaceTextRange([B, _], `${b}${S}`);
                }
              });
            }
          }
      },
      "separate-lines"(d) {
        const [g] = d;
        if (g.type !== "Block" || a(d))
          return;
        const y = u(d), x = e.getTokenAfter(g, {
          includeComments: true
        });
        x && g.loc.end.line === x.loc.start.line || t4.report({
          loc: {
            start: g.loc.start,
            end: {
              line: g.loc.start.line,
              column: g.loc.start.column + 2
            }
          },
          messageId: "expectedLines",
          fix(A) {
            return A.replaceText(g, h(g, y));
          }
        });
      },
      "bare-block"(d) {
        if (a(d))
          return;
        const [g] = d, y = u(d);
        g.type === "Line" && y.length > 1 && !y.some((x) => x.includes("*/")) && t4.report({
          loc: {
            start: g.loc.start,
            end: d[d.length - 1].loc.end
          },
          messageId: "expectedBlock",
          fix(x) {
            return x.replaceTextRange([g.range[0], d[d.length - 1].range[1]], p(g, y));
          }
        }), n(d) && t4.report({
          loc: {
            start: g.loc.start,
            end: {
              line: g.loc.start.line,
              column: g.loc.start.column + 2
            }
          },
          messageId: "expectedBareBlock",
          fix(x) {
            return x.replaceText(g, p(g, y));
          }
        });
      }
    };
    return {
      Program() {
        return e.getAllComments().filter((d) => d.type !== "Shebang").filter((d) => !E.COMMENTS_IGNORE_PATTERN.test(d.value)).filter((d) => {
          const g = e.getTokenBefore(d, {
            includeComments: true
          });
          return !g || g.loc.end.line < d.loc.start.line;
        }).reduce((d, g, y, x) => {
          const A = e.getTokenBefore(g, {
            includeComments: true
          });
          return g.type === "Line" && y && x[y - 1].type === "Line" && A && A.loc.end.line === g.loc.start.line - 1 && A === x[y - 1] ? d[d.length - 1].push(g) : d.push([g]), d;
        }, []).filter((d) => !(d.length === 1 && d[0].loc.start.line === d[0].loc.end.line)).forEach(m[r]);
      }
    };
  }
};
pp.meta;
pp.create;
var fp = {
  meta: {
    type: "layout",
    docs: {
      description: "enforce newlines between operands of ternary expressions",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/multiline-ternary"
    },
    schema: [{
      enum: ["always", "always-multiline", "never"]
    }],
    messages: {
      expectedTestCons: "Expected newline between test and consequent of ternary expression.",
      expectedConsAlt: "Expected newline between consequent and alternate of ternary expression.",
      unexpectedTestCons: "Unexpected newline between test and consequent of ternary expression.",
      unexpectedConsAlt: "Unexpected newline between consequent and alternate of ternary expression."
    },
    fixable: "whitespace"
  },
  create(t4) {
    const e = t4.getSourceCode(), r = t4.options[0];
    return {
      ConditionalExpression(s) {
        const n = e.getTokenAfter(s.test, E.isNotClosingParenToken), a = e.getTokenAfter(s.consequent, E.isNotClosingParenToken), o = e.getFirstToken(s), l = e.getTokenBefore(n), i = e.getTokenAfter(n), u = e.getTokenBefore(a), c = e.getTokenAfter(a), f = E.isTokenOnSameLine(l, i), h = E.isTokenOnSameLine(u, c), p = !!e.getCommentsInside(s).length;
        if (r === "never")
          f || t4.report({
            node: s.test,
            loc: {
              start: o.loc.start,
              end: l.loc.end
            },
            messageId: "unexpectedTestCons",
            fix: (m) => {
              if (p)
                return null;
              const d = [], g = E.isTokenOnSameLine(l, n), y = E.isTokenOnSameLine(n, i);
              return g || d.push(m.removeRange([l.range[1], n.range[0]])), y || d.push(m.removeRange([n.range[1], i.range[0]])), d;
            }
          }), h || t4.report({
            node: s.consequent,
            loc: {
              start: i.loc.start,
              end: u.loc.end
            },
            messageId: "unexpectedConsAlt",
            fix: (m) => {
              if (p)
                return null;
              const d = [], g = E.isTokenOnSameLine(u, a), y = E.isTokenOnSameLine(a, c);
              return g || d.push(m.removeRange([u.range[1], a.range[0]])), y || d.push(m.removeRange([a.range[1], c.range[0]])), d;
            }
          });
        else {
          if (r === "always-multiline" && s.loc.start.line === s.loc.end.line)
            return;
          f && t4.report({
            node: s.test,
            loc: {
              start: o.loc.start,
              end: l.loc.end
            },
            messageId: "expectedTestCons",
            fix: (m) => p ? null : m.replaceTextRange([l.range[1], n.range[0]], `
`)
          }), h && t4.report({
            node: s.consequent,
            loc: {
              start: i.loc.start,
              end: u.loc.end
            },
            messageId: "expectedConsAlt",
            fix: (m) => p ? null : m.replaceTextRange([u.range[1], a.range[0]], `
`)
          });
        }
      }
    };
  }
};
fp.meta;
fp.create;
var Vo = ["Array", "Boolean", "Date", "Error", "Function", "Number", "Object", "RegExp", "String", "Symbol", "BigInt"];
function db(t4, e, r) {
  if (Object.prototype.hasOwnProperty.call(t4, e) && !Array.isArray(t4[e]))
    throw new TypeError(`${e}, if provided, must be an Array`);
  return t4[e] || r;
}
function gb(t4, e) {
  return t4[e] = true, t4;
}
function CN(t4) {
  let e = db(t4, "capIsNewExceptions", Vo);
  return e !== Vo && (e = e.concat(Vo)), e.reduce(gb, {});
}
var hp = {
  meta: {
    type: "suggestion",
    docs: {
      description: "require constructor names to begin with a capital letter",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/new-cap"
    },
    schema: [{
      type: "object",
      properties: {
        newIsCap: {
          type: "boolean",
          default: true
        },
        capIsNew: {
          type: "boolean",
          default: true
        },
        newIsCapExceptions: {
          type: "array",
          items: {
            type: "string"
          }
        },
        newIsCapExceptionPattern: {
          type: "string"
        },
        capIsNewExceptions: {
          type: "array",
          items: {
            type: "string"
          }
        },
        capIsNewExceptionPattern: {
          type: "string"
        },
        properties: {
          type: "boolean",
          default: true
        }
      },
      additionalProperties: false
    }],
    messages: {
      upper: "A function with a name starting with an uppercase letter should only be used as a constructor.",
      lower: "A constructor name should not start with a lowercase letter."
    }
  },
  create(t4) {
    const e = Object.assign({}, t4.options[0]);
    e.newIsCap = e.newIsCap !== false, e.capIsNew = e.capIsNew !== false;
    const r = e.properties === false, s = db(e, "newIsCapExceptions", []).reduce(gb, {}), n = e.newIsCapExceptionPattern ? new RegExp(e.newIsCapExceptionPattern, "u") : null, a = CN(e), o = e.capIsNewExceptionPattern ? new RegExp(e.capIsNewExceptionPattern, "u") : null, l = {}, i = t4.getSourceCode();
    function u(p) {
      return p.callee.type === "Identifier" ? p.callee.name : E.getStaticPropertyName(p.callee) || "";
    }
    function c(p) {
      const m = p.charAt(0), d = m.toLowerCase(), g = m.toUpperCase();
      return d === g ? "non-alpha" : m === d ? "lower" : "upper";
    }
    function f(p, m, d, g) {
      const y = i.getText(m.callee);
      if (p[d] || p[y] || g && g.test(y))
        return true;
      const x = E.skipChainExpression(m.callee);
      return d === "UTC" && x.type === "MemberExpression" ? x.object.type === "Identifier" && x.object.name === "Date" : r && x.type === "MemberExpression";
    }
    function h(p, m) {
      let d = E.skipChainExpression(p.callee);
      d.type === "MemberExpression" && (d = d.property), t4.report({
        node: p,
        loc: d.loc,
        messageId: m
      });
    }
    return e.newIsCap && (l.NewExpression = function(p) {
      const m = u(p);
      m && (c(m) !== "lower" || f(s, p, m, n) || h(p, "lower"));
    }), e.capIsNew && (l.CallExpression = function(p) {
      const m = u(p);
      m && (c(m) !== "upper" || f(a, p, m, o) || h(p, "upper"));
    }), l;
  }
};
hp.meta;
hp.create;
var mp = {
  meta: {
    type: "layout",
    docs: {
      description: "enforce or disallow parentheses when invoking a constructor with no arguments",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/new-parens"
    },
    fixable: "code",
    schema: {
      anyOf: [{
        type: "array",
        items: [{
          enum: ["always", "never"]
        }],
        minItems: 0,
        maxItems: 1
      }]
    },
    messages: {
      missing: "Missing '()' invoking a constructor.",
      unnecessary: "Unnecessary '()' invoking a constructor with no arguments."
    }
  },
  create(t4) {
    const r = t4.options[0] !== "never", s = t4.getSourceCode();
    return {
      NewExpression(n) {
        if (n.arguments.length !== 0)
          return;
        const a = s.getLastToken(n), l = a && E.isClosingParenToken(a) && E.isOpeningParenToken(s.getTokenBefore(a)) && n.callee.range[1] < n.range[1];
        r ? l || t4.report({
          node: n,
          messageId: "missing",
          fix: (i) => i.insertTextAfter(n, "()")
        }) : l && t4.report({
          node: n,
          messageId: "unnecessary",
          fix: (i) => [i.remove(s.getTokenBefore(a)), i.remove(a), i.insertTextBefore(n, "("), i.insertTextAfter(n, ")")]
        });
      }
    };
  }
};
mp.meta;
mp.create;
var dp = {
  meta: {
    type: "layout",
    docs: {
      description: "require or disallow an empty line after variable declarations",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/newline-after-var"
    },
    schema: [{
      enum: ["never", "always"]
    }],
    fixable: "whitespace",
    messages: {
      expected: "Expected blank line after variable declarations.",
      unexpected: "Unexpected blank line after variable declarations."
    },
    deprecated: true,
    replacedBy: ["padding-line-between-statements"]
  },
  create(t4) {
    const e = t4.getSourceCode(), r = t4.options[0] === "never" ? "never" : "always", s = e.getAllComments().reduce((f, h) => (f[h.loc.start.line] = h.loc.end.line, f), {});
    function n(f) {
      const h = e.getLastToken(f);
      if (h.type === "Punctuator" && h.value === ";") {
        const p = e.getTokenBefore(h);
        if (p.loc.end.line !== h.loc.start.line)
          return p;
      }
      return h;
    }
    function a(f) {
      return f === "var" || f === "let" || f === "const";
    }
    function o(f) {
      return f === "ForStatement" || f === "ForInStatement" || f === "ForOfStatement";
    }
    function l(f) {
      return f === "ExportNamedDeclaration" || f === "ExportSpecifier" || f === "ExportDefaultDeclaration" || f === "ExportAllDeclaration";
    }
    function i(f) {
      const h = e.getTokenAfter(f);
      return !h || h.type === "Punctuator" && h.value === "}";
    }
    function u(f) {
      const h = s[f];
      return s[h + 1] ? u(h + 1) : h;
    }
    function c(f, h) {
      return f.loc.start.line > u(h) + 1;
    }
    return {
      VariableDeclaration: function(f) {
        const h = n(f), p = h === e.getLastToken(f) ? e.getTokenAfter(f) : e.getLastToken(f), m = h.loc.end.line + 1;
        if (!p || o(f.parent.type) || l(f.parent.type) || p.type === "Keyword" && a(p.value) || i(f))
          return;
        const d = p.loc.start.line > m, g = typeof s[m] < "u";
        r === "never" && d && !g && t4.report({
          node: f,
          messageId: "unexpected",
          data: {
            identifier: f.name
          },
          fix(y) {
            const x = e.getText().slice(h.range[1], p.range[0]).split(E.LINEBREAK_MATCHER);
            return y.replaceTextRange([h.range[1], p.range[0]], `${x.slice(0, -1).join("")}
${x[x.length - 1]}`);
          }
        }), r === "always" && (!d || g && !c(p, m)) && t4.report({
          node: f,
          messageId: "expected",
          data: {
            identifier: f.name
          },
          fix(y) {
            return (d ? u(m) : h.loc.end.line) === p.loc.start.line ? y.insertTextBefore(p, `

`) : y.insertTextBeforeRange([p.range[0] - p.loc.start.column, p.range[1]], `
`);
          }
        });
      }
    };
  }
};
dp.meta;
dp.create;
var gp = {
  meta: {
    type: "layout",
    docs: {
      description: "require an empty line before `return` statements",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/newline-before-return"
    },
    fixable: "whitespace",
    schema: [],
    messages: {
      expected: "Expected newline before return statement."
    },
    deprecated: true,
    replacedBy: ["padding-line-between-statements"]
  },
  create(t4) {
    const e = t4.getSourceCode();
    function r(i, u) {
      const c = e.getTokenBefore(i);
      return u.some((f) => c.value === f);
    }
    function s(i) {
      const u = i.parent.type;
      return i.parent.body ? Array.isArray(i.parent.body) ? i.parent.body[0] === i : i.parent.body === i : u === "IfStatement" ? r(i, ["else", ")"]) : u === "DoWhileStatement" ? r(i, ["do"]) : u === "SwitchCase" ? r(i, [":"]) : r(i, [")"]);
    }
    function n(i, u) {
      const c = e.getCommentsBefore(i);
      let f = 0;
      return c.length && c.forEach((h) => {
        f++, h.type === "Block" && (f += h.loc.end.line - h.loc.start.line), h.loc.start.line === u && f--, h.loc.end.line === i.loc.start.line && f--;
      }), f;
    }
    function a(i) {
      const u = e.getTokenBefore(i);
      let c;
      return u ? c = u.loc.end.line : c = 0, c;
    }
    function o(i) {
      const u = i.loc.start.line, c = a(i), f = n(i, c);
      return u - c - f > 1;
    }
    function l(i) {
      const u = e.getCommentsBefore(i), c = u[u.length - 1], f = e.getTokenBefore(i);
      return u.length === 0 || c.loc.end.line === f.loc.end.line && c.loc.end.line !== i.loc.start.line;
    }
    return {
      ReturnStatement(i) {
        !s(i) && !o(i) && t4.report({
          node: i,
          messageId: "expected",
          fix(u) {
            if (l(i)) {
              const c = e.getTokenBefore(i), f = i.loc.start.line === c.loc.end.line ? `

` : `
`;
              return u.insertTextBefore(i, f);
            }
            return null;
          }
        });
      }
    };
  }
};
gp.meta;
gp.create;
var yp = {
  meta: {
    type: "layout",
    docs: {
      description: "require a newline after each call in a method chain",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/newline-per-chained-call"
    },
    fixable: "whitespace",
    schema: [{
      type: "object",
      properties: {
        ignoreChainWithDepth: {
          type: "integer",
          minimum: 1,
          maximum: 10,
          default: 2
        }
      },
      additionalProperties: false
    }],
    messages: {
      expected: "Expected line break before `{{callee}}`."
    }
  },
  create(t4) {
    const e = t4.options[0] || {}, r = e.ignoreChainWithDepth || 2, s = t4.getSourceCode();
    function n(o) {
      return o.computed ? o.optional ? "?.[" : "[" : o.optional ? "?." : ".";
    }
    function a(o) {
      const l = n(o), i = s.getText(o.property).split(E.LINEBREAK_MATCHER), u = o.computed && i.length === 1 ? "]" : "";
      return l + i[0] + u;
    }
    return {
      "CallExpression:exit"(o) {
        const l = E.skipChainExpression(o.callee);
        if (l.type !== "MemberExpression")
          return;
        let i = E.skipChainExpression(l.object), u = 1;
        for (; i && i.callee; )
          u += 1, i = E.skipChainExpression(E.skipChainExpression(i.callee).object);
        if (u > r && E.isTokenOnSameLine(l.object, l.property)) {
          const c = s.getTokenAfter(l.object, E.isNotClosingParenToken);
          t4.report({
            node: l.property,
            loc: {
              start: c.loc.start,
              end: l.loc.end
            },
            messageId: "expected",
            data: {
              callee: a(l)
            },
            fix(f) {
              return f.insertTextBefore(c, `
`);
            }
          });
        }
      }
    };
  }
};
yp.meta;
yp.create;
var {
  getStaticPropertyName: SN,
  getVariableByName: AN,
  skipChainExpression: DN
} = E;
function Dy(t4) {
  return /^(alert|confirm|prompt)$/u.test(t4);
}
function wN(t4, e) {
  const r = t4.references.filter((s) => s.identifier.range[0] === e.range[0] && s.identifier.range[1] === e.range[1]);
  return r.length === 1 ? r[0] : null;
}
function yb(t4, e) {
  const r = wN(t4, e);
  return r && r.resolved && r.resolved.defs.length > 0;
}
function kN(t4, e) {
  return t4.type === "global" && e.type === "ThisExpression" ? true : e.type === "Identifier" && (e.name === "window" || e.name === "globalThis" && AN(t4, "globalThis")) ? !yb(t4, e) : false;
}
var xp = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow the use of `alert`, `confirm`, and `prompt`",
      category: "Best Practices",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-alert"
    },
    schema: [],
    messages: {
      unexpected: "Unexpected {{name}}."
    }
  },
  create(t4) {
    return {
      CallExpression(e) {
        const r = DN(e.callee), s = t4.getScope();
        if (r.type === "Identifier") {
          const n = r.name;
          !yb(s, r) && Dy(r.name) && t4.report({
            node: e,
            messageId: "unexpected",
            data: {
              name: n
            }
          });
        } else if (r.type === "MemberExpression" && kN(s, r.object)) {
          const n = SN(r);
          Dy(n) && t4.report({
            node: e,
            messageId: "unexpected",
            data: {
              name: n
            }
          });
        }
      }
    };
  }
};
xp.meta;
xp.create;
var vp = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow `Array` constructors",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-array-constructor"
    },
    schema: [],
    messages: {
      preferLiteral: "The array literal notation [] is preferable."
    }
  },
  create(t4) {
    function e(r) {
      r.arguments.length !== 1 && r.callee.type === "Identifier" && r.callee.name === "Array" && t4.report({
        node: r,
        messageId: "preferLiteral"
      });
    }
    return {
      CallExpression: e,
      NewExpression: e
    };
  }
};
vp.meta;
vp.create;
var Ep = {
  meta: {
    type: "problem",
    docs: {
      description: "disallow using an async function as a Promise executor",
      category: "Possible Errors",
      recommended: true,
      url: "https://eslint.org/docs/rules/no-async-promise-executor"
    },
    fixable: null,
    schema: [],
    messages: {
      async: "Promise executor functions should not be async."
    }
  },
  create(t4) {
    return {
      "NewExpression[callee.name='Promise'][arguments.0.async=true]"(e) {
        t4.report({
          node: t4.getSourceCode().getFirstToken(e.arguments[0], (r) => r.value === "async"),
          messageId: "async"
        });
      }
    };
  }
};
Ep.meta;
Ep.create;
function TN(t4) {
  const e = t4.type;
  return e === "FunctionDeclaration" || e === "FunctionExpression" || e === "ArrowFunctionExpression" || e === "ForOfStatement" && t4.await === true;
}
function FN(t4, e) {
  switch (e.type) {
    case "ForStatement":
      return t4 === e.test || t4 === e.update || t4 === e.body;
    case "ForOfStatement":
    case "ForInStatement":
      return t4 === e.body;
    case "WhileStatement":
    case "DoWhileStatement":
      return t4 === e.test || t4 === e.body;
    default:
      return false;
  }
}
var bp = {
  meta: {
    type: "problem",
    docs: {
      description: "disallow `await` inside of loops",
      category: "Possible Errors",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-await-in-loop"
    },
    schema: [],
    messages: {
      unexpectedAwait: "Unexpected `await` inside a loop."
    }
  },
  create(t4) {
    function e(r) {
      if (r.type === "ForOfStatement" && !r.await)
        return;
      let s = r, n = s.parent;
      for (; n && !TN(n); ) {
        if (FN(s, n)) {
          t4.report({
            node: r,
            messageId: "unexpectedAwait"
          });
          return;
        }
        s = n, n = n.parent;
      }
    }
    return {
      AwaitExpression: e,
      ForOfStatement: e
    };
  }
};
bp.meta;
bp.create;
var wy = ["^", "|", "&", "<<", ">>", ">>>", "^=", "|=", "&=", "<<=", ">>=", ">>>=", "~"];
var Cp = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow bitwise operators",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-bitwise"
    },
    schema: [{
      type: "object",
      properties: {
        allow: {
          type: "array",
          items: {
            enum: wy
          },
          uniqueItems: true
        },
        int32Hint: {
          type: "boolean",
          default: false
        }
      },
      additionalProperties: false
    }],
    messages: {
      unexpected: "Unexpected use of '{{operator}}'."
    }
  },
  create(t4) {
    const e = t4.options[0] || {}, r = e.allow || [], s = e.int32Hint === true;
    function n(u) {
      t4.report({
        node: u,
        messageId: "unexpected",
        data: {
          operator: u.operator
        }
      });
    }
    function a(u) {
      return wy.indexOf(u.operator) !== -1;
    }
    function o(u) {
      return r.indexOf(u.operator) !== -1;
    }
    function l(u) {
      return s && u.operator === "|" && u.right && u.right.type === "Literal" && u.right.value === 0;
    }
    function i(u) {
      a(u) && !o(u) && !l(u) && n(u);
    }
    return {
      AssignmentExpression: i,
      BinaryExpression: i,
      UnaryExpression: i
    };
  }
};
Cp.meta;
Cp.create;
var Sp = {
  meta: {
    deprecated: true,
    replacedBy: [],
    type: "problem",
    docs: {
      description: "disallow use of the `Buffer()` constructor",
      category: "Node.js and CommonJS",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-buffer-constructor"
    },
    schema: [],
    messages: {
      deprecated: "{{expr}} is deprecated. Use Buffer.from(), Buffer.alloc(), or Buffer.allocUnsafe() instead."
    }
  },
  create(t4) {
    return {
      "CallExpression[callee.name='Buffer'], NewExpression[callee.name='Buffer']"(e) {
        t4.report({
          node: e,
          messageId: "deprecated",
          data: {
            expr: e.type === "CallExpression" ? "Buffer()" : "new Buffer()"
          }
        });
      }
    };
  }
};
Sp.meta;
Sp.create;
var Ap = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow the use of `arguments.caller` or `arguments.callee`",
      category: "Best Practices",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-caller"
    },
    schema: [],
    messages: {
      unexpected: "Avoid arguments.{{prop}}."
    }
  },
  create(t4) {
    return {
      MemberExpression(e) {
        const r = e.object.name, s = e.property.name;
        r === "arguments" && !e.computed && s && s.match(/^calle[er]$/u) && t4.report({
          node: e,
          messageId: "unexpected",
          data: {
            prop: s
          }
        });
      }
    };
  }
};
Ap.meta;
Ap.create;
var Dp = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow lexical declarations in case clauses",
      category: "Best Practices",
      recommended: true,
      url: "https://eslint.org/docs/rules/no-case-declarations"
    },
    schema: [],
    messages: {
      unexpected: "Unexpected lexical declaration in case block."
    }
  },
  create(t4) {
    function e(r) {
      switch (r.type) {
        case "FunctionDeclaration":
        case "ClassDeclaration":
          return true;
        case "VariableDeclaration":
          return r.kind !== "var";
        default:
          return false;
      }
    }
    return {
      SwitchCase(r) {
        for (let s = 0; s < r.consequent.length; s++) {
          const n = r.consequent[s];
          e(n) && t4.report({
            node: n,
            messageId: "unexpected"
          });
        }
      }
    };
  }
};
Dp.meta;
Dp.create;
var wp = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow `catch` clause parameters from shadowing variables in the outer scope",
      category: "Variables",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-catch-shadow"
    },
    replacedBy: ["no-shadow"],
    deprecated: true,
    schema: [],
    messages: {
      mutable: "Value of '{{name}}' may be overwritten in IE 8 and earlier."
    }
  },
  create(t4) {
    function e(r, s) {
      return E.getVariableByName(r, s) !== null;
    }
    return {
      "CatchClause[param!=null]"(r) {
        let s = t4.getScope();
        s.block === r && (s = s.upper), e(s, r.param.name) && t4.report({
          node: r,
          messageId: "mutable",
          data: {
            name: r.param.name
          }
        });
      }
    };
  }
};
wp.meta;
wp.create;
var kp = {
  meta: {
    type: "problem",
    docs: {
      description: "disallow reassigning class members",
      category: "ECMAScript 6",
      recommended: true,
      url: "https://eslint.org/docs/rules/no-class-assign"
    },
    schema: [],
    messages: {
      class: "'{{name}}' is a class."
    }
  },
  create(t4) {
    function e(s) {
      E.getModifyingReferences(s.references).forEach((n) => {
        t4.report({
          node: n.identifier,
          messageId: "class",
          data: {
            name: n.identifier.name
          }
        });
      });
    }
    function r(s) {
      t4.getDeclaredVariables(s).forEach(e);
    }
    return {
      ClassDeclaration: r,
      ClassExpression: r
    };
  }
};
kp.meta;
kp.create;
var Tp = {
  meta: {
    type: "problem",
    docs: {
      description: "disallow comparing against -0",
      category: "Possible Errors",
      recommended: true,
      url: "https://eslint.org/docs/rules/no-compare-neg-zero"
    },
    fixable: null,
    schema: [],
    messages: {
      unexpected: "Do not use the '{{operator}}' operator to compare against -0."
    }
  },
  create(t4) {
    function e(s) {
      return s.type === "UnaryExpression" && s.operator === "-" && s.argument.type === "Literal" && s.argument.value === 0;
    }
    const r = /* @__PURE__ */ new Set([">", ">=", "<", "<=", "==", "===", "!=", "!=="]);
    return {
      BinaryExpression(s) {
        r.has(s.operator) && (e(s.left) || e(s.right)) && t4.report({
          node: s,
          messageId: "unexpected",
          data: {
            operator: s.operator
          }
        });
      }
    };
  }
};
Tp.meta;
Tp.create;
var PN = /* @__PURE__ */ new Set(["IfStatement", "WhileStatement", "DoWhileStatement", "ForStatement", "ConditionalExpression"]);
var IN = {
  DoWhileStatement: "a 'do...while' statement",
  ForStatement: "a 'for' statement",
  IfStatement: "an 'if' statement",
  WhileStatement: "a 'while' statement"
};
var Fp = {
  meta: {
    type: "problem",
    docs: {
      description: "disallow assignment operators in conditional expressions",
      category: "Possible Errors",
      recommended: true,
      url: "https://eslint.org/docs/rules/no-cond-assign"
    },
    schema: [{
      enum: ["except-parens", "always"]
    }],
    messages: {
      unexpected: "Unexpected assignment within {{type}}.",
      missing: "Expected a conditional expression and instead saw an assignment."
    }
  },
  create(t4) {
    const e = t4.options[0] || "except-parens", r = t4.getSourceCode();
    function s(i) {
      return i.parent && PN.has(i.parent.type) && i === i.parent.test;
    }
    function n(i) {
      let u = i;
      do
        if (s(u))
          return u.parent;
      while ((u = u.parent) && !E.isFunction(u));
      return null;
    }
    function a(i) {
      const u = r.getTokenBefore(i, 1), c = r.getTokenAfter(i, 1);
      return E.isParenthesised(r, i) && u && E.isOpeningParenToken(u) && u.range[1] <= i.range[0] && E.isClosingParenToken(c) && c.range[0] >= i.range[1];
    }
    function o(i) {
      i.test && i.test.type === "AssignmentExpression" && (i.type === "ForStatement" ? !E.isParenthesised(r, i.test) : !a(i.test)) && t4.report({
        node: i.test,
        messageId: "missing"
      });
    }
    function l(i) {
      const u = n(i);
      u && t4.report({
        node: i,
        messageId: "unexpected",
        data: {
          type: IN[u.type] || u.type
        }
      });
    }
    return e === "always" ? {
      AssignmentExpression: l
    } : {
      DoWhileStatement: o,
      ForStatement: o,
      IfStatement: o,
      WhileStatement: o,
      ConditionalExpression: o
    };
  }
};
Fp.meta;
Fp.create;
function _N(t4) {
  return t4 && t4.type === "ConditionalExpression";
}
var Pp = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow arrow functions where they could be confused with comparisons",
      category: "ECMAScript 6",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-confusing-arrow"
    },
    fixable: "code",
    schema: [{
      type: "object",
      properties: {
        allowParens: {
          type: "boolean",
          default: true
        }
      },
      additionalProperties: false
    }],
    messages: {
      confusing: "Arrow function used ambiguously with a conditional expression."
    }
  },
  create(t4) {
    const e = t4.options[0] || {}, r = e.allowParens || e.allowParens === void 0, s = t4.getSourceCode();
    return {
      ArrowFunctionExpression: function(n) {
        const a = n.body;
        _N(a) && !(r && E.isParenthesised(s, a)) && t4.report({
          node: n,
          messageId: "confusing",
          fix(o) {
            return r && o.replaceText(n.body, `(${s.getText(n.body)})`);
          }
        });
      }
    };
  }
};
Pp.meta;
Pp.create;
var Ip = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow the use of `console`",
      category: "Possible Errors",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-console"
    },
    schema: [{
      type: "object",
      properties: {
        allow: {
          type: "array",
          items: {
            type: "string"
          },
          minItems: 1,
          uniqueItems: true
        }
      },
      additionalProperties: false
    }],
    messages: {
      unexpected: "Unexpected console statement."
    }
  },
  create(t4) {
    const r = (t4.options[0] || {}).allow || [];
    function s(l) {
      const i = l.identifier;
      return i && i.name === "console";
    }
    function n(l) {
      const i = E.getStaticPropertyName(l);
      return i && r.indexOf(i) !== -1;
    }
    function a(l) {
      const i = l.identifier, u = i.parent;
      return u.type === "MemberExpression" && u.object === i && !n(u);
    }
    function o(l) {
      const i = l.identifier.parent;
      t4.report({
        node: i,
        loc: i.loc,
        messageId: "unexpected"
      });
    }
    return {
      "Program:exit"() {
        const l = t4.getScope(), i = E.getVariableByName(l, "console"), u = i && i.defs.length > 0, c = i ? i.references : l.through.filter(s);
        u || c.filter(a).forEach(o);
      }
    };
  }
};
Ip.meta;
Ip.create;
var _p = {
  meta: {
    type: "problem",
    docs: {
      description: "disallow reassigning `const` variables",
      category: "ECMAScript 6",
      recommended: true,
      url: "https://eslint.org/docs/rules/no-const-assign"
    },
    schema: [],
    messages: {
      const: "'{{name}}' is constant."
    }
  },
  create(t4) {
    function e(r) {
      E.getModifyingReferences(r.references).forEach((s) => {
        t4.report({
          node: s.identifier,
          messageId: "const",
          data: {
            name: s.identifier.name
          }
        });
      });
    }
    return {
      VariableDeclaration(r) {
        r.kind === "const" && t4.getDeclaredVariables(r).forEach(e);
      }
    };
  }
};
_p.meta;
_p.create;
var Bp = {
  meta: {
    type: "problem",
    docs: {
      description: "disallow constant expressions in conditions",
      category: "Possible Errors",
      recommended: true,
      url: "https://eslint.org/docs/rules/no-constant-condition"
    },
    schema: [{
      type: "object",
      properties: {
        checkLoops: {
          type: "boolean",
          default: true
        }
      },
      additionalProperties: false
    }],
    messages: {
      unexpected: "Unexpected constant condition."
    }
  },
  create(t4) {
    const e = t4.options[0] || {}, r = e.checkLoops !== false, s = [];
    let n = /* @__PURE__ */ new Set();
    function a(m) {
      return m.value === null ? m.raw === "null" ? false : typeof m.regex == "object" ? true : null : !!m.value;
    }
    function o(m, d) {
      switch (m.type) {
        case "Literal":
          return d === "||" && a(m) === true || d === "&&" && a(m) === false;
        case "UnaryExpression":
          return d === "&&" && m.operator === "void";
        case "LogicalExpression":
          return d === m.operator && (o(m.left, d) || o(m.right, d));
        case "AssignmentExpression":
          return ["||=", "&&="].includes(m.operator) && d === m.operator.slice(0, -1) && o(m.right, d);
      }
      return false;
    }
    function l(m, d) {
      if (!m)
        return true;
      switch (m.type) {
        case "Literal":
        case "ArrowFunctionExpression":
        case "FunctionExpression":
        case "ObjectExpression":
          return true;
        case "TemplateLiteral":
          return d && m.quasis.some((g) => g.value.cooked.length) || m.expressions.every((g) => l(g, d));
        case "ArrayExpression":
          return m.parent.type === "BinaryExpression" && m.parent.operator === "+" ? m.elements.every((g) => l(g, false)) : true;
        case "UnaryExpression":
          return m.operator === "void" || m.operator === "typeof" && d ? true : m.operator === "!" ? l(m.argument, true) : l(m.argument, false);
        case "BinaryExpression":
          return l(m.left, false) && l(m.right, false) && m.operator !== "in";
        case "LogicalExpression": {
          const g = l(m.left, d), y = l(m.right, d), x = g && o(m.left, m.operator), A = d && y && o(m.right, m.operator);
          return g && y || x || A;
        }
        case "AssignmentExpression":
          return m.operator === "=" ? l(m.right, d) : ["||=", "&&="].includes(m.operator) && d ? o(m.right, m.operator.slice(0, -1)) : false;
        case "SequenceExpression":
          return l(m.expressions[m.expressions.length - 1], d);
      }
      return false;
    }
    function i(m) {
      m.test && l(m.test, true) && n.add(m);
    }
    function u(m) {
      n.has(m) && (n.delete(m), t4.report({
        node: m.test,
        messageId: "unexpected"
      }));
    }
    function c(m) {
      m.test && l(m.test, true) && t4.report({
        node: m.test,
        messageId: "unexpected"
      });
    }
    function f() {
      s.push(n), n = /* @__PURE__ */ new Set();
    }
    function h() {
      n = s.pop();
    }
    function p(m) {
      r && i(m);
    }
    return {
      ConditionalExpression: c,
      IfStatement: c,
      WhileStatement: p,
      "WhileStatement:exit": u,
      DoWhileStatement: p,
      "DoWhileStatement:exit": u,
      ForStatement: p,
      "ForStatement > .test": (m) => p(m.parent),
      "ForStatement:exit": u,
      FunctionDeclaration: f,
      "FunctionDeclaration:exit": h,
      FunctionExpression: f,
      "FunctionExpression:exit": h,
      YieldExpression: () => n.clear()
    };
  }
};
Bp.meta;
Bp.create;
var Op = {
  meta: {
    type: "problem",
    docs: {
      description: "disallow returning value from constructor",
      category: "Best Practices",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-constructor-return"
    },
    schema: {},
    fixable: null,
    messages: {
      unexpected: "Unexpected return statement in constructor."
    }
  },
  create(t4) {
    const e = [];
    return {
      onCodePathStart(r, s) {
        e.push(s);
      },
      onCodePathEnd() {
        e.pop();
      },
      ReturnStatement(r) {
        const s = e[e.length - 1];
        s.parent && s.parent.type === "MethodDefinition" && s.parent.kind === "constructor" && (r.parent.parent === s || r.argument) && t4.report({
          node: r,
          messageId: "unexpected"
        });
      }
    };
  }
};
Op.meta;
Op.create;
var Lp = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow `continue` statements",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-continue"
    },
    schema: [],
    messages: {
      unexpected: "Unexpected use of continue statement."
    }
  },
  create(t4) {
    return {
      ContinueStatement(e) {
        t4.report({
          node: e,
          messageId: "unexpected"
        });
      }
    };
  }
};
Lp.meta;
Lp.create;
var BN = pn.default.RegExpValidator;
var ON = new class {
  constructor() {
    this._source = "", this._controlChars = [], this._validator = new BN(this);
  }
  onPatternEnter() {
    this._controlChars = [];
  }
  onCharacter(t4, e, r) {
    r >= 0 && r <= 31 && (this._source.codePointAt(t4) === r || this._source.slice(t4, e).startsWith("\\x") || this._source.slice(t4, e).startsWith("\\u")) && this._controlChars.push(`\\x${`0${r.toString(16)}`.slice(-2)}`);
  }
  collectControlChars(t4) {
    try {
      this._source = t4, this._validator.validatePattern(t4);
    } catch {
    }
    return this._controlChars;
  }
}();
var Rp = {
  meta: {
    type: "problem",
    docs: {
      description: "disallow control characters in regular expressions",
      category: "Possible Errors",
      recommended: true,
      url: "https://eslint.org/docs/rules/no-control-regex"
    },
    schema: [],
    messages: {
      unexpected: "Unexpected control character(s) in regular expression: {{controlChars}}."
    }
  },
  create(t4) {
    function e(r) {
      return r.regex ? r.regex.pattern : typeof r.value == "string" && (r.parent.type === "NewExpression" || r.parent.type === "CallExpression") && r.parent.callee.type === "Identifier" && r.parent.callee.name === "RegExp" && r.parent.arguments[0] === r ? r.value : null;
    }
    return {
      Literal(r) {
        const s = e(r);
        if (s) {
          const n = ON.collectControlChars(s);
          n.length > 0 && t4.report({
            node: r,
            messageId: "unexpected",
            data: {
              controlChars: n.join(", ")
            }
          });
        }
      }
    };
  }
};
Rp.meta;
Rp.create;
var Np = {
  meta: {
    type: "problem",
    docs: {
      description: "disallow the use of `debugger`",
      category: "Possible Errors",
      recommended: true,
      url: "https://eslint.org/docs/rules/no-debugger"
    },
    fixable: null,
    schema: [],
    messages: {
      unexpected: "Unexpected 'debugger' statement."
    }
  },
  create(t4) {
    return {
      DebuggerStatement(e) {
        t4.report({
          node: e,
          messageId: "unexpected"
        });
      }
    };
  }
};
Np.meta;
Np.create;
var jp = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow deleting variables",
      category: "Variables",
      recommended: true,
      url: "https://eslint.org/docs/rules/no-delete-var"
    },
    schema: [],
    messages: {
      unexpected: "Variables should not be deleted."
    }
  },
  create(t4) {
    return {
      UnaryExpression(e) {
        e.operator === "delete" && e.argument.type === "Identifier" && t4.report({
          node: e,
          messageId: "unexpected"
        });
      }
    };
  }
};
jp.meta;
jp.create;
var Mp = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow division operators explicitly at the beginning of regular expressions",
      category: "Best Practices",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-div-regex"
    },
    fixable: "code",
    schema: [],
    messages: {
      unexpected: "A regular expression literal can be confused with '/='."
    }
  },
  create(t4) {
    const e = t4.getSourceCode();
    return {
      Literal(r) {
        const s = e.getFirstToken(r);
        s.type === "RegularExpression" && s.value[1] === "=" && t4.report({
          node: r,
          messageId: "unexpected",
          fix(n) {
            return n.replaceTextRange([s.range[0] + 1, s.range[0] + 2], "[=]");
          }
        });
      }
    };
  }
};
Mp.meta;
Mp.create;
var $p = {
  meta: {
    type: "problem",
    docs: {
      description: "disallow duplicate arguments in `function` definitions",
      category: "Possible Errors",
      recommended: true,
      url: "https://eslint.org/docs/rules/no-dupe-args"
    },
    schema: [],
    messages: {
      unexpected: "Duplicate param '{{name}}'."
    }
  },
  create(t4) {
    function e(s) {
      return s.type === "Parameter";
    }
    function r(s) {
      const n = t4.getDeclaredVariables(s);
      for (let a = 0; a < n.length; ++a) {
        const o = n[a];
        o.defs.filter(e).length >= 2 && t4.report({
          node: s,
          messageId: "unexpected",
          data: {
            name: o.name
          }
        });
      }
    }
    return {
      FunctionDeclaration: r,
      FunctionExpression: r
    };
  }
};
$p.meta;
$p.create;
var Vp = {
  meta: {
    type: "problem",
    docs: {
      description: "disallow duplicate class members",
      category: "ECMAScript 6",
      recommended: true,
      url: "https://eslint.org/docs/rules/no-dupe-class-members"
    },
    schema: [],
    messages: {
      unexpected: "Duplicate name '{{name}}'."
    }
  },
  create(t4) {
    let e = [];
    function r(s, n) {
      const a = e[e.length - 1], o = `$${s}`;
      return a[o] || (a[o] = {
        nonStatic: {
          init: false,
          get: false,
          set: false
        },
        static: {
          init: false,
          get: false,
          set: false
        }
      }), a[o][n ? "static" : "nonStatic"];
    }
    return {
      Program() {
        e = [];
      },
      ClassBody() {
        e.push(/* @__PURE__ */ Object.create(null));
      },
      "ClassBody:exit"() {
        e.pop();
      },
      MethodDefinition(s) {
        const n = E.getStaticPropertyName(s);
        if (n === null || s.kind === "constructor")
          return;
        const a = r(n, s.static);
        let o = false;
        s.kind === "get" ? (o = a.init || a.get, a.get = true) : s.kind === "set" ? (o = a.init || a.set, a.set = true) : (o = a.init || a.get || a.set, a.init = true), o && t4.report({
          node: s,
          messageId: "unexpected",
          data: {
            name: n
          }
        });
      }
    };
  }
};
Vp.meta;
Vp.create;
function LN(t4, e, r) {
  return e.every((s) => r.some((n) => t4(s, n)));
}
function ai(t4, e) {
  return e.type === "LogicalExpression" && e.operator === t4 ? [...ai(t4, e.left), ...ai(t4, e.right)] : [e];
}
var ky = ai.bind(null, "||");
var Uo = ai.bind(null, "&&");
var Up = {
  meta: {
    type: "problem",
    docs: {
      description: "disallow duplicate conditions in if-else-if chains",
      category: "Possible Errors",
      recommended: true,
      url: "https://eslint.org/docs/rules/no-dupe-else-if"
    },
    schema: [],
    messages: {
      unexpected: "This branch can never execute. Its condition is a duplicate or covered by previous conditions in the if-else-if chain."
    }
  },
  create(t4) {
    const e = t4.getSourceCode();
    function r(n, a) {
      return n.type !== a.type ? false : n.type === "LogicalExpression" && (n.operator === "||" || n.operator === "&&") && n.operator === a.operator ? r(n.left, a.left) && r(n.right, a.right) || r(n.left, a.right) && r(n.right, a.left) : E.equalTokens(n, a, e);
    }
    const s = LN.bind(null, r);
    return {
      IfStatement(n) {
        const a = n.test, o = a.type === "LogicalExpression" && a.operator === "&&" ? [a, ...Uo(a)] : [a];
        let l = n, i = o.map((u) => ky(u).map(Uo));
        for (; l.parent && l.parent.type === "IfStatement" && l.parent.alternate === l; ) {
          l = l.parent;
          const u = ky(l.test).map(Uo);
          if (i = i.map((c) => c.filter((f) => !u.some((h) => s(h, f)))), i.some((c) => c.length === 0)) {
            t4.report({
              node: a,
              messageId: "unexpected"
            });
            break;
          }
        }
      }
    };
  }
};
Up.meta;
Up.create;
var Ty = /^(?:init|get)$/u;
var Fy = /^(?:init|set)$/u;
var RN = class {
  constructor(e, r) {
    this.upper = e, this.node = r, this.properties = /* @__PURE__ */ new Map();
  }
  getPropertyInfo(e) {
    const r = E.getStaticPropertyName(e);
    return this.properties.has(r) || this.properties.set(r, {
      get: false,
      set: false
    }), this.properties.get(r);
  }
  isPropertyDefined(e) {
    const r = this.getPropertyInfo(e);
    return Ty.test(e.kind) && r.get || Fy.test(e.kind) && r.set;
  }
  defineProperty(e) {
    const r = this.getPropertyInfo(e);
    Ty.test(e.kind) && (r.get = true), Fy.test(e.kind) && (r.set = true);
  }
};
var qp = {
  meta: {
    type: "problem",
    docs: {
      description: "disallow duplicate keys in object literals",
      category: "Possible Errors",
      recommended: true,
      url: "https://eslint.org/docs/rules/no-dupe-keys"
    },
    schema: [],
    messages: {
      unexpected: "Duplicate key '{{name}}'."
    }
  },
  create(t4) {
    let e = null;
    return {
      ObjectExpression(r) {
        e = new RN(e, r);
      },
      "ObjectExpression:exit"() {
        e = e.upper;
      },
      Property(r) {
        const s = E.getStaticPropertyName(r);
        r.parent.type === "ObjectExpression" && s !== null && (e.isPropertyDefined(r) && t4.report({
          node: e.node,
          loc: r.key.loc,
          messageId: "unexpected",
          data: {
            name: s
          }
        }), e.defineProperty(r));
      }
    };
  }
};
qp.meta;
qp.create;
var Wp = {
  meta: {
    type: "problem",
    docs: {
      description: "disallow duplicate case labels",
      category: "Possible Errors",
      recommended: true,
      url: "https://eslint.org/docs/rules/no-duplicate-case"
    },
    schema: [],
    messages: {
      unexpected: "Duplicate case label."
    }
  },
  create(t4) {
    const e = t4.getSourceCode();
    function r(s, n) {
      return s.type !== n.type ? false : E.equalTokens(s, n, e);
    }
    return {
      SwitchStatement(s) {
        const n = [];
        for (const a of s.cases)
          if (a.test) {
            const o = a.test;
            n.some((l) => r(l, o)) ? t4.report({
              node: a,
              messageId: "unexpected"
            }) : n.push(o);
          }
      }
    };
  }
};
Wp.meta;
Wp.create;
var NN = ["ImportSpecifier", "ExportSpecifier"];
var jN = ["ImportNamespaceSpecifier", "ExportNamespaceSpecifier"];
function Jn(t4, e) {
  return (e === "named" ? NN : jN).includes(t4);
}
function Py(t4) {
  if (t4.specifiers && t4.specifiers.length > 0) {
    const e = t4.specifiers, r = e.findIndex(({
      type: n
    }) => Jn(n, "named") || Jn(n, "namespace")), s = r > -1 ? r : 0;
    return e[s].type;
  }
  return t4.type === "ExportAllDeclaration" ? t4.exported ? "ExportNamespaceSpecifier" : "ExportAll" : "SideEffectImport";
}
function MN(t4, e) {
  const r = Py(t4), s = Py(e);
  return !(r === "ExportAll" && s !== "ExportAll" && s !== "SideEffectImport" || r !== "ExportAll" && r !== "SideEffectImport" && s === "ExportAll" || Jn(r, "namespace") && Jn(s, "named") || Jn(s, "namespace") && Jn(r, "named"));
}
function ba(t4, e) {
  let r = 0;
  for (; r < e.length; ) {
    if (MN(t4, e[r]))
      return true;
    r++;
  }
  return false;
}
function Iy(t4, e) {
  return t4.filter(({
    declarationType: r
  }) => r === e).map(({
    node: r
  }) => r);
}
function xb(t4) {
  return t4 && t4.source && t4.source.value ? t4.source.value.trim() : "";
}
function $N(t4, e, r, s, n) {
  const a = xb(e);
  if (r.has(a)) {
    const o = r.get(a), l = [], i = Iy(o, "import");
    let u;
    n && (u = Iy(o, "export")), s === "import" ? (ba(e, i) && l.push("import"), n && ba(e, u) && l.push("importAs")) : s === "export" && (ba(e, u) && l.push("export"), ba(e, i) && l.push("exportAs")), l.forEach((c) => t4.report({
      node: e,
      messageId: c,
      data: {
        module: a
      }
    }));
  }
}
function qo(t4, e, r, s) {
  return function(n) {
    const a = xb(n);
    if (a) {
      $N(t4, n, e, r, s);
      const o = {
        node: n,
        declarationType: r
      };
      let l = [o];
      e.has(a) && (l = [...e.get(a), o]), e.set(a, l);
    }
  };
}
var zp = {
  meta: {
    type: "problem",
    docs: {
      description: "disallow duplicate module imports",
      category: "ECMAScript 6",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-duplicate-imports"
    },
    schema: [{
      type: "object",
      properties: {
        includeExports: {
          type: "boolean",
          default: false
        }
      },
      additionalProperties: false
    }],
    messages: {
      import: "'{{module}}' import is duplicated.",
      importAs: "'{{module}}' import is duplicated as export.",
      export: "'{{module}}' export is duplicated.",
      exportAs: "'{{module}}' export is duplicated as import."
    }
  },
  create(t4) {
    const e = (t4.options[0] || {}).includeExports, r = /* @__PURE__ */ new Map(), s = {
      ImportDeclaration: qo(t4, r, "import", e)
    };
    return e && (s.ExportNamedDeclaration = qo(t4, r, "export", e), s.ExportAllDeclaration = qo(t4, r, "export", e)), s;
  }
};
zp.meta;
zp.create;
var VN = class {
  constructor(e, r) {
    this.fixer = e, this.sourceCode = r, this.retainedRange = null;
  }
  retainRange(e) {
    return this.retainedRange = e, this;
  }
  retainEnclosingFunction(e) {
    const r = E.getUpperFunction(e);
    return this.retainRange(r ? r.range : this.sourceCode.ast.range);
  }
  retainSurroundingTokens(e) {
    const r = this.sourceCode.getTokenBefore(e) || e, s = this.sourceCode.getTokenAfter(e) || e;
    return this.retainRange([r.range[0], s.range[1]]);
  }
  replaceTextRange(e, r) {
    let s;
    return this.retainedRange ? s = [Math.min(this.retainedRange[0], e[0]), Math.max(this.retainedRange[1], e[1])] : s = e, this.fixer.replaceTextRange(s, this.sourceCode.text.slice(s[0], e[0]) + r + this.sourceCode.text.slice(e[1], s[1]));
  }
  remove(e) {
    return this.replaceTextRange(e.range, "");
  }
};
var Qs = VN;
var Gp = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow `else` blocks after `return` statements in `if` statements",
      category: "Best Practices",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-else-return"
    },
    schema: [{
      type: "object",
      properties: {
        allowElseIf: {
          type: "boolean",
          default: true
        }
      },
      additionalProperties: false
    }],
    fixable: "code",
    messages: {
      unexpected: "Unnecessary 'else' after 'return'."
    }
  },
  create(t4) {
    function e(f, h) {
      if (f.length === 0)
        return true;
      const p = h.variableScope;
      if (h.variables.filter(({
        defs: g
      }) => g.length > 0).some(({
        name: g
      }) => f.includes(g)) || h !== p && h.upper.type === "catch" && h.upper.variables.some(({
        name: g
      }) => f.includes(g)) || h.variables.filter(({
        defs: g,
        references: y
      }) => g.length === 0 && y.length > 0).some(({
        name: g
      }) => f.includes(g)) || h.through.some((g) => f.includes(g.identifier.name)))
        return false;
      if (h !== p) {
        const g = h.block.range;
        if (p.variables.filter(({
          name: x
        }) => f.includes(x)).some((x) => x.defs.some(({
          node: {
            range: A
          }
        }) => g[0] <= A[0] && A[1] <= g[1])))
          return false;
      }
      return true;
    }
    function r(f, h) {
      if (f.type === "FunctionDeclaration")
        return false;
      if (f.type !== "BlockStatement")
        return true;
      const p = h.childScopes.find(({
        block: d
      }) => d === f);
      if (!p)
        return true;
      const m = p.variables.map(({
        name: d
      }) => d);
      return e(m, h);
    }
    function s(f) {
      const h = t4.getScope();
      t4.report({
        node: f,
        messageId: "unexpected",
        fix: (p) => {
          if (!r(f, h))
            return null;
          const m = t4.getSourceCode(), d = m.getFirstToken(f), g = m.getTokenBefore(d), y = m.getText(f), x = m.getTokenBefore(g);
          let A, b;
          d.type === "Punctuator" && d.value === "{" ? b = m.getTokenAfter(d) : b = d;
          const v = f.parent.consequent.type !== "BlockStatement" && x.value !== ";", C = /^[([/+`-]/u.test(b.value);
          if (v && C)
            return null;
          const T = m.getLastToken(f), w = m.getTokenBefore(T);
          if (w.value !== ";") {
            const B = m.getTokenAfter(T), I = B && /^[([/+`-]/u.test(B.value), _ = B && B.loc.start.line === w.loc.start.line;
            if (I || _ && B.value !== "}")
              return null;
          }
          return d.type === "Punctuator" && d.value === "{" ? A = y.slice(1, -1) : A = y, new Qs(p, m).retainEnclosingFunction(f).replaceTextRange([g.range[0], f.range[1]], A);
        }
      });
    }
    function n(f) {
      return f.type === "ReturnStatement";
    }
    function a(f) {
      if (f.type === "BlockStatement") {
        const h = f.body, p = h[h.length - 1];
        return p && n(p);
      }
      return n(f);
    }
    function o(f) {
      return f.alternate && f.consequent;
    }
    function l(f) {
      return f.type === "IfStatement" && o(f) && a(f.alternate) && a(f.consequent);
    }
    function i(f) {
      return n(f) || l(f);
    }
    function u(f) {
      return f.type === "BlockStatement" ? f.body.some(i) : i(f);
    }
    return {
      "IfStatement:exit": !(t4.options[0] && t4.options[0].allowElseIf === false) ? function(f) {
        const h = f.parent;
        if (!E.STATEMENT_LIST_PARENTS.has(h.type))
          return;
        const p = [];
        let m;
        for (let d = f; d.type === "IfStatement"; d = d.alternate) {
          if (!d.alternate)
            return;
          p.push(d.consequent), m = d.alternate;
        }
        p.every(u) && s(m);
      } : function(f) {
        const h = f.parent;
        if (!E.STATEMENT_LIST_PARENTS.has(h.type))
          return;
        const p = f.alternate;
        p && u(f.consequent) && s(p);
      }
    };
  }
};
Gp.meta;
Gp.create;
var UN = /^\/([^\\[]|\\.|\[([^\\\]]|\\.)+\])*\/[gimuys]*$/u;
var Hp = {
  meta: {
    type: "problem",
    docs: {
      description: "disallow empty character classes in regular expressions",
      category: "Possible Errors",
      recommended: true,
      url: "https://eslint.org/docs/rules/no-empty-character-class"
    },
    schema: [],
    messages: {
      unexpected: "Empty class."
    }
  },
  create(t4) {
    const e = t4.getSourceCode();
    return {
      Literal(r) {
        const s = e.getFirstToken(r);
        s.type === "RegularExpression" && !UN.test(s.value) && t4.report({
          node: r,
          messageId: "unexpected"
        });
      }
    };
  }
};
Hp.meta;
Hp.create;
var qN = Object.freeze(["functions", "arrowFunctions", "generatorFunctions", "methods", "generatorMethods", "getters", "setters", "constructors", "asyncFunctions", "asyncMethods"]);
function WN(t4) {
  const e = t4.parent;
  let r = "";
  if (t4.type === "ArrowFunctionExpression")
    return "arrowFunctions";
  if (e.type === "Property") {
    if (e.kind === "get")
      return "getters";
    if (e.kind === "set")
      return "setters";
    r = e.method ? "methods" : "functions";
  } else if (e.type === "MethodDefinition") {
    if (e.kind === "get")
      return "getters";
    if (e.kind === "set")
      return "setters";
    if (e.kind === "constructor")
      return "constructors";
    r = "methods";
  } else
    r = "functions";
  let s = "";
  if (t4.generator)
    s = "generator";
  else if (t4.async)
    s = "async";
  else
    return r;
  return s + r[0].toUpperCase() + r.slice(1);
}
var Kp = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow empty functions",
      category: "Best Practices",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-empty-function"
    },
    schema: [{
      type: "object",
      properties: {
        allow: {
          type: "array",
          items: {
            enum: qN
          },
          uniqueItems: true
        }
      },
      additionalProperties: false
    }],
    messages: {
      unexpected: "Unexpected empty {{name}}."
    }
  },
  create(t4) {
    const r = (t4.options[0] || {}).allow || [], s = t4.getSourceCode();
    function n(a) {
      const o = WN(a), l = E.getFunctionNameWithKind(a), i = s.getTokens(a.body, {
        includeComments: true,
        filter: E.isCommentToken
      });
      r.indexOf(o) === -1 && a.body.type === "BlockStatement" && a.body.body.length === 0 && i.length === 0 && t4.report({
        node: a,
        loc: a.body.loc,
        messageId: "unexpected",
        data: {
          name: l
        }
      });
    }
    return {
      ArrowFunctionExpression: n,
      FunctionDeclaration: n,
      FunctionExpression: n
    };
  }
};
Kp.meta;
Kp.create;
var Jp = {
  meta: {
    type: "problem",
    docs: {
      description: "disallow empty destructuring patterns",
      category: "Best Practices",
      recommended: true,
      url: "https://eslint.org/docs/rules/no-empty-pattern"
    },
    schema: [],
    messages: {
      unexpected: "Unexpected empty {{type}} pattern."
    }
  },
  create(t4) {
    return {
      ObjectPattern(e) {
        e.properties.length === 0 && t4.report({
          node: e,
          messageId: "unexpected",
          data: {
            type: "object"
          }
        });
      },
      ArrayPattern(e) {
        e.elements.length === 0 && t4.report({
          node: e,
          messageId: "unexpected",
          data: {
            type: "array"
          }
        });
      }
    };
  }
};
Jp.meta;
Jp.create;
var Xp = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow empty block statements",
      category: "Possible Errors",
      recommended: true,
      url: "https://eslint.org/docs/rules/no-empty"
    },
    schema: [{
      type: "object",
      properties: {
        allowEmptyCatch: {
          type: "boolean",
          default: false
        }
      },
      additionalProperties: false
    }],
    messages: {
      unexpected: "Empty {{type}} statement."
    }
  },
  create(t4) {
    const e = t4.options[0] || {}, r = e.allowEmptyCatch || false, s = t4.getSourceCode();
    return {
      BlockStatement(n) {
        n.body.length === 0 && (E.isFunction(n.parent) || r && n.parent.type === "CatchClause" || s.getCommentsInside(n).length > 0 || t4.report({
          node: n,
          messageId: "unexpected",
          data: {
            type: "block"
          }
        }));
      },
      SwitchStatement(n) {
        (typeof n.cases > "u" || n.cases.length === 0) && t4.report({
          node: n,
          messageId: "unexpected",
          data: {
            type: "switch"
          }
        });
      }
    };
  }
};
Xp.meta;
Xp.create;
var Qp = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow `null` comparisons without type-checking operators",
      category: "Best Practices",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-eq-null"
    },
    schema: [],
    messages: {
      unexpected: "Use '===' to compare with null."
    }
  },
  create(t4) {
    return {
      BinaryExpression(e) {
        const r = e.operator === "==" || e.operator === "!=";
        (e.right.type === "Literal" && e.right.raw === "null" && r || e.left.type === "Literal" && e.left.raw === "null" && r) && t4.report({
          node: e,
          messageId: "unexpected"
        });
      }
    };
  }
};
Qp.meta;
Qp.create;
var _y = Object.freeze(["global", "window", "globalThis"]);
function Wo(t4, e) {
  return E.isSpecificMemberAccess(t4, null, e);
}
var Yp = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow the use of `eval()`",
      category: "Best Practices",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-eval"
    },
    schema: [{
      type: "object",
      properties: {
        allowIndirect: {
          type: "boolean",
          default: false
        }
      },
      additionalProperties: false
    }],
    messages: {
      unexpected: "eval can be harmful."
    }
  },
  create(t4) {
    const e = !!(t4.options[0] && t4.options[0].allowIndirect), r = t4.getSourceCode();
    let s = null;
    function n(u) {
      const c = t4.getScope().isStrict;
      s = {
        upper: s,
        node: u,
        strict: c,
        defaultThis: false,
        initialized: c
      };
    }
    function a() {
      s = s.upper;
    }
    function o(u) {
      const c = u.parent, f = u.type === "MemberExpression" ? u.property : u, h = c.type === "CallExpression" && c.callee === u ? c : u;
      t4.report({
        node: h,
        loc: f.loc,
        messageId: "unexpected"
      });
    }
    function l(u) {
      for (let c = 0; c < _y.length; ++c) {
        const f = _y[c], h = E.getVariableByName(u, f);
        if (!h)
          continue;
        const p = h.references;
        for (let m = 0; m < p.length; ++m) {
          let g = p[m].identifier.parent;
          for (; Wo(g, f); )
            g = g.parent;
          Wo(g, "eval") && o(g);
        }
      }
    }
    function i(u) {
      const c = E.getVariableByName(u, "eval");
      if (!c)
        return;
      const f = c.references;
      for (let h = 0; h < f.length; ++h) {
        const m = f[h].identifier;
        m.name === "eval" && !E.isCallee(m) && o(m);
      }
    }
    return e ? {
      "CallExpression:exit"(u) {
        const c = u.callee;
        !u.optional && E.isSpecificId(c, "eval") && o(c);
      }
    } : {
      "CallExpression:exit"(u) {
        const c = u.callee;
        E.isSpecificId(c, "eval") && o(c);
      },
      Program(u) {
        const c = t4.getScope(), f = t4.parserOptions.ecmaFeatures || {}, h = c.isStrict || u.sourceType === "module" || f.globalReturn && c.childScopes[0].isStrict;
        s = {
          upper: null,
          node: u,
          strict: h,
          defaultThis: true,
          initialized: true
        };
      },
      "Program:exit"() {
        const u = t4.getScope();
        a(), i(u), l(u);
      },
      FunctionDeclaration: n,
      "FunctionDeclaration:exit": a,
      FunctionExpression: n,
      "FunctionExpression:exit": a,
      ArrowFunctionExpression: n,
      "ArrowFunctionExpression:exit": a,
      ThisExpression(u) {
        Wo(u.parent, "eval") && (s.initialized || (s.initialized = true, s.defaultThis = E.isDefaultThisBinding(s.node, r)), !s.strict && s.defaultThis && o(u.parent));
      }
    };
  }
};
Yp.meta;
Yp.create;
var Zp = {
  meta: {
    type: "problem",
    docs: {
      description: "disallow reassigning exceptions in `catch` clauses",
      category: "Possible Errors",
      recommended: true,
      url: "https://eslint.org/docs/rules/no-ex-assign"
    },
    schema: [],
    messages: {
      unexpected: "Do not assign to the exception parameter."
    }
  },
  create(t4) {
    function e(r) {
      E.getModifyingReferences(r.references).forEach((s) => {
        t4.report({
          node: s.identifier,
          messageId: "unexpected"
        });
      });
    }
    return {
      CatchClause(r) {
        t4.getDeclaredVariables(r).forEach(e);
      }
    };
  }
};
Zp.meta;
Zp.create;
var ef = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow extending native types",
      category: "Best Practices",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-extend-native"
    },
    schema: [{
      type: "object",
      properties: {
        exceptions: {
          type: "array",
          items: {
            type: "string"
          },
          uniqueItems: true
        }
      },
      additionalProperties: false
    }],
    messages: {
      unexpected: "{{builtin}} prototype is read only, properties should not be added."
    }
  },
  create(t4) {
    const e = t4.options[0] || {}, r = new Set(e.exceptions || []), s = new Set(Object.keys(nR.default.builtin).filter((u) => u[0].toUpperCase() === u[0]).filter((u) => !r.has(u)));
    function n(u, c) {
      t4.report({
        node: u,
        messageId: "unexpected",
        data: {
          builtin: c
        }
      });
    }
    function a(u) {
      return !!(u && u.parent && u.parent.type === "MemberExpression" && u.parent.object === u && E.getStaticPropertyName(u.parent) === "prototype");
    }
    function o(u) {
      return u.parent.type === "MemberExpression" && u.parent.object === u && u.parent.parent.type === "AssignmentExpression" && u.parent.parent.left === u.parent;
    }
    function l(u) {
      return u.parent.type === "CallExpression" && u.parent.arguments[0] === u && E.isSpecificMemberAccess(u.parent.callee, "Object", /^definePropert(?:y|ies)$/u);
    }
    function i(u) {
      if (!a(u))
        return;
      const c = u.parent.parent.type === "ChainExpression" ? u.parent.parent : u.parent;
      o(c) ? n(c.parent.parent, u.name) : l(c) && n(c.parent, u.name);
    }
    return {
      "Program:exit"() {
        const u = t4.getScope();
        s.forEach((c) => {
          const f = u.set.get(c);
          f && f.references && f.references.map((h) => h.identifier).forEach(i);
        });
      }
    };
  }
};
ef.meta;
ef.create;
var zN = /* @__PURE__ */ new Set(["Literal", "Identifier", "ThisExpression", "FunctionExpression"]);
var tf = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow unnecessary calls to `.bind()`",
      category: "Best Practices",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-extra-bind"
    },
    schema: [],
    fixable: "code",
    messages: {
      unexpected: "The function binding is unnecessary."
    }
  },
  create(t4) {
    const e = t4.getSourceCode();
    let r = null;
    function s(u) {
      return zN.has(u.type);
    }
    function n(u) {
      const c = u.parent, f = c.parent.type === "ChainExpression" ? c.parent.parent : c.parent;
      t4.report({
        node: f,
        messageId: "unexpected",
        loc: c.property.loc,
        fix(h) {
          if (!s(f.arguments[0]))
            return null;
          const p = [[e.getTokenAfter(c.object, E.isNotClosingParenToken), e.getLastToken(c)], [e.getTokenAfter(c, E.isNotClosingParenToken), e.getLastToken(f)]], m = p[0][0], d = p[1][1];
          return e.commentsExistBetween(m, d) ? null : p.map(([g, y]) => h.removeRange([g.range[0], y.range[1]]));
        }
      });
    }
    function a(u) {
      if (!E.isSpecificMemberAccess(u.parent, null, "bind"))
        return false;
      const c = u.parent.parent.type === "ChainExpression" ? u.parent.parent : u.parent;
      return c.parent.type === "CallExpression" && c.parent.callee === c && c.parent.arguments.length === 1 && c.parent.arguments[0].type !== "SpreadElement";
    }
    function o(u) {
      r = {
        isBound: a(u),
        thisFound: false,
        upper: r
      };
    }
    function l(u) {
      r.isBound && !r.thisFound && n(u), r = r.upper;
    }
    function i() {
      r && (r.thisFound = true);
    }
    return {
      "ArrowFunctionExpression:exit": function(u) {
        a(u) && n(u);
      },
      FunctionDeclaration: o,
      "FunctionDeclaration:exit": l,
      FunctionExpression: o,
      "FunctionExpression:exit": l,
      ThisExpression: i
    };
  }
};
tf.meta;
tf.create;
var Kr = E.getPrecedence;
var rf = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow unnecessary boolean casts",
      category: "Possible Errors",
      recommended: true,
      url: "https://eslint.org/docs/rules/no-extra-boolean-cast"
    },
    schema: [{
      type: "object",
      properties: {
        enforceForLogicalOperands: {
          type: "boolean",
          default: false
        }
      },
      additionalProperties: false
    }],
    fixable: "code",
    messages: {
      unexpectedCall: "Redundant Boolean call.",
      unexpectedNegation: "Redundant double negation."
    }
  },
  create(t4) {
    const e = t4.getSourceCode(), r = ["IfStatement", "DoWhileStatement", "WhileStatement", "ConditionalExpression", "ForStatement"];
    function s(c) {
      return (c.type === "CallExpression" || c.type === "NewExpression") && c.callee.type === "Identifier" && c.callee.name === "Boolean";
    }
    function n(c) {
      return c.type === "LogicalExpression" && (c.operator === "||" || c.operator === "&&") && t4.options.length && t4.options[0].enforceForLogicalOperands === true;
    }
    function a(c) {
      return s(c.parent) && c === c.parent.arguments[0] || r.indexOf(c.parent.type) !== -1 && c === c.parent.test || c.parent.type === "UnaryExpression" && c.parent.operator === "!";
    }
    function o(c) {
      return c.parent.type === "ChainExpression" ? o(c.parent) : a(c) || n(c.parent) && o(c.parent);
    }
    function l(c) {
      return !!e.getCommentsInside(c).length;
    }
    function i(c) {
      return Vt.default.isParenthesized(1, c, e);
    }
    function u(c, f) {
      if (c.parent.type === "ChainExpression")
        return u(c.parent, f);
      if (i(c))
        return false;
      const h = c.parent;
      switch (h.type) {
        case "CallExpression":
        case "NewExpression":
          return f.type === "SequenceExpression";
        case "IfStatement":
        case "DoWhileStatement":
        case "WhileStatement":
        case "ForStatement":
          return false;
        case "ConditionalExpression":
          return Kr(f) <= Kr(h);
        case "UnaryExpression":
          return Kr(f) < Kr(h);
        case "LogicalExpression":
          return E.isMixedLogicalAndCoalesceExpressions(f, h) ? true : c === h.left ? Kr(f) < Kr(h) : Kr(f) <= Kr(h);
        default:
          throw new Error(`Unexpected parent type: ${h.type}`);
      }
    }
    return {
      UnaryExpression(c) {
        const f = c.parent;
        c.operator !== "!" || f.type !== "UnaryExpression" || f.operator !== "!" || o(f) && t4.report({
          node: f,
          messageId: "unexpectedNegation",
          fix(h) {
            if (l(f))
              return null;
            if (u(f, c.argument))
              return h.replaceText(f, `(${e.getText(c.argument)})`);
            let p = "";
            const m = e.getTokenBefore(f), d = e.getFirstToken(c.argument);
            return m && m.range[1] === f.range[0] && !E.canTokensBeAdjacent(m, d) && (p = " "), h.replaceText(f, p + e.getText(c.argument));
          }
        });
      },
      CallExpression(c) {
        c.callee.type !== "Identifier" || c.callee.name !== "Boolean" || o(c) && t4.report({
          node: c,
          messageId: "unexpectedCall",
          fix(f) {
            const h = c.parent;
            if (c.arguments.length === 0) {
              if (h.type === "UnaryExpression" && h.operator === "!") {
                if (l(h))
                  return null;
                let p = "";
                const m = e.getTokenBefore(h);
                return m && m.range[1] === h.range[0] && !E.canTokensBeAdjacent(m, "true") && (p = " "), f.replaceText(h, p + "true");
              }
              return l(c) ? null : f.replaceText(c, "false");
            }
            if (c.arguments.length === 1) {
              const p = c.arguments[0];
              return p.type === "SpreadElement" || l(c) ? null : u(c, p) ? f.replaceText(c, `(${e.getText(p)})`) : f.replaceText(c, e.getText(p));
            }
            return null;
          }
        });
      }
    };
  }
};
rf.meta;
rf.create;
var nf = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow unnecessary labels",
      category: "Best Practices",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-extra-label"
    },
    schema: [],
    fixable: "code",
    messages: {
      unexpected: "This label '{{name}}' is unnecessary."
    }
  },
  create(t4) {
    const e = t4.getSourceCode();
    let r = null;
    function s(i) {
      r = {
        label: i.parent.type === "LabeledStatement" ? i.parent.label : null,
        breakable: true,
        upper: r
      };
    }
    function n() {
      r = r.upper;
    }
    function a(i) {
      E.isBreakableStatement(i.body) || (r = {
        label: i.label,
        breakable: false,
        upper: r
      });
    }
    function o(i) {
      E.isBreakableStatement(i.body) || (r = r.upper);
    }
    function l(i) {
      if (!i.label)
        return;
      const u = i.label;
      for (let c = r; c !== null; c = c.upper)
        if (c.breakable || c.label && c.label.name === u.name) {
          c.breakable && c.label && c.label.name === u.name && t4.report({
            node: u,
            messageId: "unexpected",
            data: u,
            fix(f) {
              const h = e.getFirstToken(i);
              return e.commentsExistBetween(h, u) ? null : f.removeRange([h.range[1], u.range[1]]);
            }
          });
          return;
        }
    }
    return {
      WhileStatement: s,
      "WhileStatement:exit": n,
      DoWhileStatement: s,
      "DoWhileStatement:exit": n,
      ForStatement: s,
      "ForStatement:exit": n,
      ForInStatement: s,
      "ForInStatement:exit": n,
      ForOfStatement: s,
      "ForOfStatement:exit": n,
      SwitchStatement: s,
      "SwitchStatement:exit": n,
      LabeledStatement: a,
      "LabeledStatement:exit": o,
      BreakStatement: l,
      ContinueStatement: l
    };
  }
};
nf.meta;
nf.create;
var {
  isParenthesized: By
} = Vt.default;
var sf = {
  meta: {
    type: "layout",
    docs: {
      description: "disallow unnecessary parentheses",
      category: "Possible Errors",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-extra-parens"
    },
    fixable: "code",
    schema: {
      anyOf: [{
        type: "array",
        items: [{
          enum: ["functions"]
        }],
        minItems: 0,
        maxItems: 1
      }, {
        type: "array",
        items: [{
          enum: ["all"]
        }, {
          type: "object",
          properties: {
            conditionalAssign: {
              type: "boolean"
            },
            nestedBinaryExpressions: {
              type: "boolean"
            },
            returnAssign: {
              type: "boolean"
            },
            ignoreJSX: {
              enum: ["none", "all", "single-line", "multi-line"]
            },
            enforceForArrowConditionals: {
              type: "boolean"
            },
            enforceForSequenceExpressions: {
              type: "boolean"
            },
            enforceForNewInMemberExpressions: {
              type: "boolean"
            },
            enforceForFunctionPrototypeMethods: {
              type: "boolean"
            }
          },
          additionalProperties: false
        }],
        minItems: 0,
        maxItems: 2
      }]
    },
    messages: {
      unexpected: "Unnecessary parentheses around expression."
    }
  },
  create(t4) {
    const e = t4.getSourceCode(), r = /* @__PURE__ */ new WeakSet(), s = E.getPrecedence, n = t4.options[0] !== "functions", a = n && t4.options[1] && t4.options[1].conditionalAssign === false, o = n && t4.options[1] && t4.options[1].nestedBinaryExpressions === false, l = n && t4.options[1] && t4.options[1].returnAssign === false, i = n && t4.options[1] && t4.options[1].ignoreJSX, u = n && t4.options[1] && t4.options[1].enforceForArrowConditionals === false, c = n && t4.options[1] && t4.options[1].enforceForSequenceExpressions === false, f = n && t4.options[1] && t4.options[1].enforceForNewInMemberExpressions === false, h = n && t4.options[1] && t4.options[1].enforceForFunctionPrototypeMethods === false, p = s({
      type: "AssignmentExpression"
    }), m = s({
      type: "UpdateExpression"
    });
    let d;
    function g(D) {
      const U = E.skipChainExpression(D);
      if (U.type !== "CallExpression")
        return false;
      const ne = E.skipChainExpression(U.callee);
      return ne.type === "MemberExpression" && ne.object.type === "FunctionExpression" && ["call", "apply"].includes(E.getStaticPropertyName(ne));
    }
    function y(D) {
      if (D.type === "JSXElement" || D.type === "JSXFragment") {
        const U = D.loc.start.line === D.loc.end.line;
        switch (i) {
          case "all":
            return false;
          case "multi-line":
            return U;
          case "single-line":
            return !U;
        }
      }
      return D.type === "SequenceExpression" && c || g(D) && h ? false : n || D.type === "FunctionExpression" || D.type === "ArrowFunctionExpression";
    }
    function x(D) {
      return By(1, D, e);
    }
    function A(D) {
      return By(2, D, e);
    }
    function b(D) {
      return y(D) && x(D);
    }
    function v(D) {
      return y(D) && A(D);
    }
    function C(D, U) {
      return !!(y(D) && x(D) && (s(D) >= U || A(D)));
    }
    function T(D) {
      return a && D.test.type === "AssignmentExpression";
    }
    function w(D) {
      for (let U = D; U; U = U.parent)
        if (U.type === "ReturnStatement" || U.type === "ArrowFunctionExpression" && U.body.type !== "BlockStatement")
          return true;
      return false;
    }
    function B(D) {
      const U = e.getLastToken(D), ne = e.getTokenBefore(U);
      return D.arguments.length > 0 || E.isOpeningParenToken(ne) && E.isClosingParenToken(U) && D.callee.range[1] < D.range[1];
    }
    function I(D) {
      return !!(D.type === "AssignmentExpression" || D.type === "ConditionalExpression" && (D.consequent.type === "AssignmentExpression" || D.alternate.type === "AssignmentExpression") || D.left && D.left.type === "AssignmentExpression" || D.right && D.right.type === "AssignmentExpression");
    }
    function _(D) {
      return !l || !w(D) ? false : D.type === "ReturnStatement" ? D.argument && I(D.argument) : D.type === "ArrowFunctionExpression" && D.body.type !== "BlockStatement" ? I(D.body) : I(D);
    }
    function S(D, U) {
      return D.loc.end.line === U.loc.start.line ? b(U) : v(U);
    }
    function F(D) {
      const U = e.getTokenBefore(D), ne = e.getTokenBefore(U, {
        includeComments: true
      }), pe = e.getTokenAfter(U, {
        includeComments: true
      });
      return ne && ne.range[1] === U.range[0] && U.range[1] === pe.range[0] && !E.canTokensBeAdjacent(ne, pe);
    }
    function N(D) {
      const U = e.getTokensAfter(D, {
        count: 2
      }), ne = U[0], pe = U[1], Ee = e.getLastToken(D);
      return ne && pe && !e.isSpaceBetweenTokens(ne, pe) && !E.canTokensBeAdjacent(Ee, pe);
    }
    function k(D) {
      const U = E.skipChainExpression(D);
      return U.type === "CallExpression" && U.callee.type === "FunctionExpression";
    }
    function j(D) {
      return D && (D.type === "Identifier" || D.type === "MemberExpression");
    }
    function O(D) {
      const U = e.getTokenBefore(D), ne = e.getTokenAfter(D);
      if (!A(D) && (r.has(e.getFirstToken(D)) || k(D) && !x(D.callee)))
        return;
      function pe() {
        t4.report({
          node: D,
          loc: U.loc,
          messageId: "unexpected",
          fix(Ee) {
            const Re = e.text.slice(U.range[1], ne.range[0]);
            return Ee.replaceTextRange([U.range[0], ne.range[1]], (F(D) ? " " : "") + Re + (N(D) ? " " : ""));
          }
        });
      }
      if (d) {
        d.reports.push({
          node: D,
          finishReport: pe
        });
        return;
      }
      pe();
    }
    function z(D) {
      C(D.argument, s(D)) && O(D.argument);
    }
    function te(D) {
      let U = D.object, ne = D.object.type;
      for (; ne === "MemberExpression"; )
        U = U.object, ne = U.type;
      return ne === "CallExpression";
    }
    function se(D) {
      const U = D.callee;
      C(U, s(D)) && (v(U) || !(k(D) || U.type === "NewExpression" && !B(U) && !(D.type === "NewExpression" && !B(D)) || D.type === "NewExpression" && U.type === "MemberExpression" && te(U) || !D.optional && U.type === "ChainExpression")) && O(D.callee), D.arguments.filter((ne) => C(ne, p)).forEach(O);
    }
    function ye(D) {
      const U = s(D), ne = s(D.left), pe = s(D.right), Ee = D.operator === "**", Re = o && (D.left.type === "BinaryExpression" || D.left.type === "LogicalExpression"), We = o && (D.right.type === "BinaryExpression" || D.right.type === "LogicalExpression");
      !Re && b(D.left) && (!(["AwaitExpression", "UnaryExpression"].includes(D.left.type) && Ee) && !E.isMixedLogicalAndCoalesceExpressions(D.left, D) && (ne > U || ne === U && !Ee) || A(D.left)) && O(D.left), !We && b(D.right) && (!E.isMixedLogicalAndCoalesceExpressions(D.right, D) && (pe > U || pe === U && Ee) || A(D.right)) && O(D.right);
    }
    function Se(D) {
      if (!D.superClass)
        return;
      (s(D.superClass) > m ? b(D.superClass) : v(D.superClass)) && O(D.superClass);
    }
    function xe(D) {
      C(D.argument, p) && O(D.argument);
    }
    function Ae(D) {
      const U = x(D) ? e.getTokenBefore(D) : e.getFirstToken(D), ne = e.getTokenAfter(U, E.isNotOpeningParenToken), pe = ne ? e.getTokenAfter(ne) : null, Ee = ne ? e.getTokenAfter(ne, E.isNotClosingParenToken) : null;
      E.isOpeningParenToken(U) && (E.isOpeningBraceToken(ne) || ne.type === "Keyword" && (ne.value === "function" || ne.value === "class" || ne.value === "let" && Ee && (E.isOpeningBracketToken(Ee) || Ee.type === "Identifier")) || ne && ne.type === "Identifier" && ne.value === "async" && pe && pe.type === "Keyword" && pe.value === "function") && r.add(ne), (D.parent.type === "ExportDefaultDeclaration" ? C(D, p) : b(D)) && O(D);
    }
    function _e(D, U) {
      const ne = [D];
      let pe = D;
      for (; pe !== U; ) {
        if (pe = pe.parent, pe === null)
          throw new Error("Nodes are not in the ancestor-descendant relationship.");
        ne.push(pe);
      }
      return ne;
    }
    function H(D, U) {
      return _e(U, D).reverse();
    }
    function Q(D, U) {
      switch (D.type) {
        case "ArrayExpression":
        case "ArrayPattern":
        case "BlockStatement":
        case "ObjectExpression":
        case "ObjectPattern":
        case "TemplateLiteral":
          return true;
        case "ArrowFunctionExpression":
        case "FunctionExpression":
          return D.params.includes(U);
        case "CallExpression":
        case "NewExpression":
          return D.arguments.includes(U);
        case "MemberExpression":
          return D.computed && D.property === U;
        case "ConditionalExpression":
          return D.consequent === U;
        default:
          return false;
      }
    }
    function ge() {
      d = {
        upper: d,
        inExpressionNodes: [],
        reports: []
      };
    }
    function ae() {
      const {
        upper: D,
        inExpressionNodes: U,
        reports: ne
      } = d;
      D ? (D.inExpressionNodes.push(...U), D.reports.push(...ne)) : ne.forEach(({
        finishReport: pe
      }) => pe()), d = D;
    }
    function ee(D) {
      return d.reports.some((U) => U.node === D);
    }
    function he(D) {
      d.reports = d.reports.filter((U) => U.node !== D);
    }
    function R(D) {
      return D.type === "MemberExpression" ? D.parent.type === "NewExpression" && D.parent.callee === D ? true : D.parent.object === D && R(D.parent) : false;
    }
    return {
      ArrayExpression(D) {
        D.elements.filter((U) => U && C(U, p)).forEach(O);
      },
      ArrayPattern(D) {
        D.elements.filter((U) => j(U) && b(U)).forEach(O);
      },
      ArrowFunctionExpression(D) {
        if (!_(D) && !(D.body.type === "ConditionalExpression" && u) && D.body.type !== "BlockStatement") {
          const U = e.getFirstToken(D.body, E.isNotOpeningParenToken), ne = e.getTokenBefore(U);
          E.isOpeningParenToken(ne) && E.isOpeningBraceToken(U) && r.add(U), C(D.body, p) && O(D.body);
        }
      },
      AssignmentExpression(D) {
        j(D.left) && b(D.left) && O(D.left), !_(D) && C(D.right, s(D)) && O(D.right);
      },
      BinaryExpression(D) {
        d && D.operator === "in" && d.inExpressionNodes.push(D), ye(D);
      },
      CallExpression: se,
      ClassBody(D) {
        D.body.filter((U) => U.type === "MethodDefinition" && U.computed && U.key).filter((U) => C(U.key, p)).forEach((U) => O(U.key));
      },
      ConditionalExpression(D) {
        _(D) || (!T(D) && C(D.test, s({
          type: "LogicalExpression",
          operator: "||"
        })) && O(D.test), C(D.consequent, p) && O(D.consequent), C(D.alternate, p) && O(D.alternate));
      },
      DoWhileStatement(D) {
        b(D.test) && !T(D) && O(D.test);
      },
      ExportDefaultDeclaration: (D) => Ae(D.declaration),
      ExpressionStatement: (D) => Ae(D.expression),
      ForInStatement(D) {
        if (D.left.type !== "VariableDeclaration") {
          const U = e.getFirstToken(D.left, E.isNotOpeningParenToken);
          U.value === "let" && E.isOpeningBracketToken(e.getTokenAfter(U, E.isNotClosingParenToken)) && r.add(U);
        }
        b(D.left) && O(D.left), b(D.right) && O(D.right);
      },
      ForOfStatement(D) {
        if (D.left.type !== "VariableDeclaration") {
          const U = e.getFirstToken(D.left, E.isNotOpeningParenToken);
          U.value === "let" && r.add(U);
        }
        b(D.left) && O(D.left), C(D.right, p) && O(D.right);
      },
      ForStatement(D) {
        if (D.test && b(D.test) && !T(D) && O(D.test), D.update && b(D.update) && O(D.update), D.init) {
          if (D.init.type !== "VariableDeclaration") {
            const U = e.getFirstToken(D.init, E.isNotOpeningParenToken);
            U.value === "let" && E.isOpeningBracketToken(e.getTokenAfter(U, E.isNotClosingParenToken)) && r.add(U);
          }
          ge(), b(D.init) && O(D.init);
        }
      },
      "ForStatement > *.init:exit"(D) {
        d.reports.length && d.inExpressionNodes.forEach((U) => {
          const ne = H(D, U);
          let pe;
          for (let Ee = 0; Ee < ne.length; Ee++) {
            const Re = ne[Ee];
            if (Ee < ne.length - 1) {
              const We = ne[Ee + 1];
              if (Q(Re, We))
                return;
            }
            if (x(Re))
              if (ee(Re)) {
                if (A(Re))
                  return;
                pe || (pe = Re);
              } else
                return;
          }
          he(pe);
        }), ae();
      },
      IfStatement(D) {
        b(D.test) && !T(D) && O(D.test);
      },
      ImportExpression(D) {
        const {
          source: U
        } = D;
        U.type === "SequenceExpression" ? v(U) && O(U) : b(U) && O(U);
      },
      LogicalExpression: ye,
      MemberExpression(D) {
        const ne = R(D) && te(D) ? v(D.object) : b(D.object) && !(g(D.parent) && D.parent.callee === D && h);
        ne && s(D.object) >= s(D) && (D.computed || !(E.isDecimalInteger(D.object) || D.object.type === "Literal" && D.object.regex)) && O(D.object), ne && D.object.type === "CallExpression" && O(D.object), ne && !f && D.object.type === "NewExpression" && B(D.object) && O(D.object), ne && D.optional && D.object.type === "ChainExpression" && O(D.object), D.computed && b(D.property) && O(D.property);
      },
      NewExpression: se,
      ObjectExpression(D) {
        D.properties.filter((U) => U.value && C(U.value, p)).forEach((U) => O(U.value));
      },
      ObjectPattern(D) {
        D.properties.filter((U) => {
          const ne = U.value;
          return j(ne) && b(ne);
        }).forEach((U) => O(U.value));
      },
      Property(D) {
        if (D.computed) {
          const {
            key: U
          } = D;
          U && C(U, p) && O(U);
        }
      },
      RestElement(D) {
        const U = D.argument;
        j(U) && b(U) && O(U);
      },
      ReturnStatement(D) {
        const U = e.getFirstToken(D);
        _(D) || D.argument && S(U, D.argument) && !(D.argument.type === "Literal" && D.argument.regex) && O(D.argument);
      },
      SequenceExpression(D) {
        const U = s(D);
        D.expressions.filter((ne) => C(ne, U)).forEach(O);
      },
      SwitchCase(D) {
        D.test && b(D.test) && O(D.test);
      },
      SwitchStatement(D) {
        b(D.discriminant) && O(D.discriminant);
      },
      ThrowStatement(D) {
        const U = e.getFirstToken(D);
        S(U, D.argument) && O(D.argument);
      },
      UnaryExpression: z,
      UpdateExpression(D) {
        if (D.prefix)
          z(D);
        else {
          const {
            argument: U
          } = D, ne = e.getLastToken(D);
          U.loc.end.line === ne.loc.start.line ? z(D) : v(U) && O(U);
        }
      },
      AwaitExpression: z,
      VariableDeclarator(D) {
        D.init && C(D.init, p) && !(D.init.type === "Literal" && D.init.regex) && O(D.init);
      },
      WhileStatement(D) {
        b(D.test) && !T(D) && O(D.test);
      },
      WithStatement(D) {
        b(D.object) && O(D.object);
      },
      YieldExpression(D) {
        if (D.argument) {
          const U = e.getFirstToken(D);
          (s(D.argument) >= s(D) && S(U, D.argument) || v(D.argument)) && O(D.argument);
        }
      },
      ClassDeclaration: Se,
      ClassExpression: Se,
      SpreadElement: xe,
      SpreadProperty: xe,
      ExperimentalSpreadProperty: xe,
      TemplateLiteral(D) {
        D.expressions.filter((U) => U && b(U)).forEach(O);
      },
      AssignmentPattern(D) {
        const {
          left: U,
          right: ne
        } = D;
        j(U) && b(U) && O(U), ne && C(ne, p) && O(ne);
      }
    };
  }
};
sf.meta;
sf.create;
var af = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow unnecessary semicolons",
      category: "Possible Errors",
      recommended: true,
      url: "https://eslint.org/docs/rules/no-extra-semi"
    },
    fixable: "code",
    schema: [],
    messages: {
      unexpected: "Unnecessary semicolon."
    }
  },
  create(t4) {
    const e = t4.getSourceCode();
    function r(n) {
      t4.report({
        node: n,
        messageId: "unexpected",
        fix(a) {
          return new Qs(a, t4.getSourceCode()).retainSurroundingTokens(n).remove(n);
        }
      });
    }
    function s(n) {
      for (let a = n; a.type === "Punctuator" && !E.isClosingBraceToken(a); a = e.getTokenAfter(a))
        E.isSemicolonToken(a) && r(a);
    }
    return {
      EmptyStatement(n) {
        const a = n.parent;
        ["ForStatement", "ForInStatement", "ForOfStatement", "WhileStatement", "DoWhileStatement", "IfStatement", "LabeledStatement", "WithStatement"].indexOf(a.type) === -1 && r(n);
      },
      ClassBody(n) {
        s(e.getFirstToken(n, 1));
      },
      MethodDefinition(n) {
        s(e.getTokenAfter(n));
      }
    };
  }
};
af.meta;
af.create;
var GN = /falls?\s?through/iu;
function HN(t4, e, r, s) {
  const n = r.getSourceCode();
  if (t4.consequent.length === 1 && t4.consequent[0].type === "BlockStatement") {
    const o = n.getLastToken(t4.consequent[0]), l = n.getCommentsBefore(o).pop();
    if (l && s.test(l.value))
      return true;
  }
  const a = n.getCommentsBefore(e).pop();
  return !!(a && s.test(a.value));
}
function KN(t4) {
  return t4.reachable;
}
function JN(t4, e) {
  return e.loc.start.line > t4.loc.end.line + 1;
}
var of = {
  meta: {
    type: "problem",
    docs: {
      description: "disallow fallthrough of `case` statements",
      category: "Best Practices",
      recommended: true,
      url: "https://eslint.org/docs/rules/no-fallthrough"
    },
    schema: [{
      type: "object",
      properties: {
        commentPattern: {
          type: "string",
          default: ""
        }
      },
      additionalProperties: false
    }],
    messages: {
      case: "Expected a 'break' statement before 'case'.",
      default: "Expected a 'break' statement before 'default'."
    }
  },
  create(t4) {
    const e = t4.options[0] || {};
    let r = null;
    const s = t4.getSourceCode();
    let n = null, a = null;
    return e.commentPattern ? a = new RegExp(e.commentPattern, "u") : a = GN, {
      onCodePathStart(o) {
        r = o;
      },
      onCodePathEnd() {
        r = r.upper;
      },
      SwitchCase(o) {
        n && !HN(n, o, t4, a) && t4.report({
          messageId: o.test ? "case" : "default",
          node: o
        }), n = null;
      },
      "SwitchCase:exit"(o) {
        const l = s.getTokenAfter(o);
        r.currentSegments.some(KN) && (o.consequent.length > 0 || JN(o, l)) && o.parent.cases[o.parent.cases.length - 1] !== o && (n = o);
      }
    };
  }
};
of.meta;
of.create;
var lf = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow leading or trailing decimal points in numeric literals",
      category: "Best Practices",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-floating-decimal"
    },
    schema: [],
    fixable: "code",
    messages: {
      leading: "A leading decimal point can be confused with a dot.",
      trailing: "A trailing decimal point can be confused with a dot."
    }
  },
  create(t4) {
    const e = t4.getSourceCode();
    return {
      Literal(r) {
        typeof r.value == "number" && (r.raw.startsWith(".") && t4.report({
          node: r,
          messageId: "leading",
          fix(s) {
            const n = e.getTokenBefore(r), a = n && n.range[1] === r.range[0] && !E.canTokensBeAdjacent(n, `0${r.raw}`);
            return s.insertTextBefore(r, a ? " 0" : "0");
          }
        }), r.raw.indexOf(".") === r.raw.length - 1 && t4.report({
          node: r,
          messageId: "trailing",
          fix: (s) => s.insertTextAfter(r, "0")
        }));
      }
    };
  }
};
lf.meta;
lf.create;
var uf = {
  meta: {
    type: "problem",
    docs: {
      description: "disallow reassigning `function` declarations",
      category: "Possible Errors",
      recommended: true,
      url: "https://eslint.org/docs/rules/no-func-assign"
    },
    schema: [],
    messages: {
      isAFunction: "'{{name}}' is a function."
    }
  },
  create(t4) {
    function e(n) {
      E.getModifyingReferences(n).forEach((a) => {
        t4.report({
          node: a.identifier,
          messageId: "isAFunction",
          data: {
            name: a.identifier.name
          }
        });
      });
    }
    function r(n) {
      n.defs[0].type === "FunctionName" && e(n.references);
    }
    function s(n) {
      t4.getDeclaredVariables(n).forEach(r);
    }
    return {
      FunctionDeclaration: s,
      FunctionExpression: s
    };
  }
};
uf.meta;
uf.create;
var cf = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow assignments to native objects or read-only global variables",
      category: "Best Practices",
      recommended: true,
      url: "https://eslint.org/docs/rules/no-global-assign"
    },
    schema: [{
      type: "object",
      properties: {
        exceptions: {
          type: "array",
          items: {
            type: "string"
          },
          uniqueItems: true
        }
      },
      additionalProperties: false
    }],
    messages: {
      globalShouldNotBeModified: "Read-only global '{{name}}' should not be modified."
    }
  },
  create(t4) {
    const e = t4.options[0], r = e && e.exceptions || [];
    function s(a, o, l) {
      const i = a.identifier;
      a.init === false && a.isWrite() && (o === 0 || l[o - 1].identifier !== i) && t4.report({
        node: i,
        messageId: "globalShouldNotBeModified",
        data: {
          name: i.name
        }
      });
    }
    function n(a) {
      a.writeable === false && r.indexOf(a.name) === -1 && a.references.forEach(s);
    }
    return {
      Program() {
        t4.getScope().variables.forEach(n);
      }
    };
  }
};
cf.meta;
cf.create;
var XN = /^(?:i|lastI)ndexOf$/u;
var QN = ["~", "!!", "+", "*"];
function YN(t4) {
  return {
    boolean: "boolean" in t4 ? t4.boolean : true,
    number: "number" in t4 ? t4.number : true,
    string: "string" in t4 ? t4.string : true,
    disallowTemplateShorthand: "disallowTemplateShorthand" in t4 ? t4.disallowTemplateShorthand : false,
    allow: t4.allow || []
  };
}
function ZN(t4) {
  return t4.operator === "!" && t4.argument.type === "UnaryExpression" && t4.argument.operator === "!";
}
function e3(t4) {
  if (t4.operator !== "~")
    return false;
  const e = E.skipChainExpression(t4.argument);
  return e.type === "CallExpression" && E.isSpecificMemberAccess(e.callee, null, XN);
}
function t3(t4) {
  return t4.operator === "*" && (t4.left.type === "Literal" && t4.left.value === 1 || t4.right.type === "Literal" && t4.right.value === 1);
}
function Bl(t4) {
  return t4.type === "Literal" && typeof t4.value == "number" || t4.type === "CallExpression" && (t4.callee.name === "Number" || t4.callee.name === "parseInt" || t4.callee.name === "parseFloat");
}
function r3(t4) {
  const e = t4.left, r = t4.right;
  return r.type !== "BinaryExpression" && !Bl(r) ? r : e.type !== "BinaryExpression" && !Bl(e) ? e : null;
}
function Ol(t4) {
  return E.isStringLiteral(t4) || t4.type === "CallExpression" && t4.callee.type === "Identifier" && t4.callee.name === "String";
}
function ii(t4) {
  return E.isStringLiteral(t4) && (t4.value === "" || t4.type === "TemplateLiteral" && t4.quasis.length === 1 && t4.quasis[0].value.cooked === "");
}
function n3(t4) {
  return t4.operator === "+" && (ii(t4.left) && !Ol(t4.right) || ii(t4.right) && !Ol(t4.left));
}
function s3(t4) {
  return t4.operator === "+=" && ii(t4.right);
}
function Oy(t4) {
  return ii(t4.left) ? t4.right : t4.left;
}
var pf = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow shorthand type conversions",
      category: "Best Practices",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-implicit-coercion"
    },
    fixable: "code",
    schema: [{
      type: "object",
      properties: {
        boolean: {
          type: "boolean",
          default: true
        },
        number: {
          type: "boolean",
          default: true
        },
        string: {
          type: "boolean",
          default: true
        },
        disallowTemplateShorthand: {
          type: "boolean",
          default: false
        },
        allow: {
          type: "array",
          items: {
            enum: QN
          },
          uniqueItems: true
        }
      },
      additionalProperties: false
    }],
    messages: {
      useRecommendation: "use `{{recommendation}}` instead."
    }
  },
  create(t4) {
    const e = YN(t4.options[0] || {}), r = t4.getSourceCode();
    function s(n, a, o) {
      t4.report({
        node: n,
        messageId: "useRecommendation",
        data: {
          recommendation: a
        },
        fix(l) {
          if (!o)
            return null;
          const i = r.getTokenBefore(n);
          return i && i.range[1] === n.range[0] && !E.canTokensBeAdjacent(i, a) ? l.replaceText(n, ` ${a}`) : l.replaceText(n, a);
        }
      });
    }
    return {
      UnaryExpression(n) {
        let a = e.allow.indexOf("!!") >= 0;
        if (!a && e.boolean && ZN(n)) {
          const o = `Boolean(${r.getText(n.argument.argument)})`;
          s(n, o, true);
        }
        if (a = e.allow.indexOf("~") >= 0, !a && e.boolean && e3(n)) {
          const o = n.argument.type === "ChainExpression" ? ">= 0" : "!== -1", l = `${r.getText(n.argument)} ${o}`;
          s(n, l, false);
        }
        if (a = e.allow.indexOf("+") >= 0, !a && e.number && n.operator === "+" && !Bl(n.argument)) {
          const o = `Number(${r.getText(n.argument)})`;
          s(n, o, true);
        }
      },
      "BinaryExpression:exit"(n) {
        let a = e.allow.indexOf("*") >= 0;
        const o = !a && e.number && t3(n) && r3(n);
        if (o) {
          const l = `Number(${r.getText(o)})`;
          s(n, l, true);
        }
        if (a = e.allow.indexOf("+") >= 0, !a && e.string && n3(n)) {
          const l = `String(${r.getText(Oy(n))})`;
          s(n, l, true);
        }
      },
      AssignmentExpression(n) {
        if (!(e.allow.indexOf("+") >= 0) && e.string && s3(n)) {
          const o = r.getText(Oy(n));
          s(n, `${o} = String(${o})`, true);
        }
      },
      TemplateLiteral(n) {
        if (!e.disallowTemplateShorthand || n.parent.type === "TaggedTemplateExpression" || n.expressions.length !== 1 || n.quasis[0].value.cooked !== "" || n.quasis[1].value.cooked !== "" || Ol(n.expressions[0]))
          return;
        const a = r.getText(n.expressions[0]);
        s(n, `String(${a})`, true);
      }
    };
  }
};
pf.meta;
pf.create;
var ff = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow declarations in the global scope",
      category: "Best Practices",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-implicit-globals"
    },
    schema: [{
      type: "object",
      properties: {
        lexicalBindings: {
          type: "boolean",
          default: false
        }
      },
      additionalProperties: false
    }],
    messages: {
      globalNonLexicalBinding: "Unexpected {{kind}} declaration in the global scope, wrap in an IIFE for a local variable, assign as global property for a global variable.",
      globalLexicalBinding: "Unexpected {{kind}} declaration in the global scope, wrap in a block or in an IIFE.",
      globalVariableLeak: "Global variable leak, declare the variable if it is intended to be local.",
      assignmentToReadonlyGlobal: "Unexpected assignment to read-only global variable.",
      redeclarationOfReadonlyGlobal: "Unexpected redeclaration of read-only global variable."
    }
  },
  create(t4) {
    const e = t4.options[0] && t4.options[0].lexicalBindings === true;
    function r(s, n, a) {
      t4.report({
        node: s,
        messageId: n,
        data: {
          kind: a
        }
      });
    }
    return {
      Program() {
        const s = t4.getScope();
        s.variables.forEach((n) => {
          const a = n.writeable === false;
          n.writeable !== true && n.defs.forEach((l) => {
            const i = l.node;
            (l.type === "FunctionName" || l.type === "Variable" && l.parent.kind === "var") && (a ? r(i, "redeclarationOfReadonlyGlobal") : r(i, "globalNonLexicalBinding", l.type === "FunctionName" ? "function" : `'${l.parent.kind}'`)), e && (l.type === "ClassName" || l.type === "Variable" && (l.parent.kind === "let" || l.parent.kind === "const")) && (a ? r(i, "redeclarationOfReadonlyGlobal") : r(i, "globalLexicalBinding", l.type === "ClassName" ? "class" : `'${l.parent.kind}'`));
          });
        }), s.implicit.variables.forEach((n) => {
          const a = s.set.get(n.name);
          let o;
          if (a) {
            if (a.writeable)
              return;
            o = "assignmentToReadonlyGlobal";
          } else
            o = "globalVariableLeak";
          n.defs.forEach((l) => {
            r(l.node, o);
          });
        });
      }
    };
  }
};
ff.meta;
ff.create;
var {
  getStaticValue: a3
} = Vt.default;
var hf = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow the use of `eval()`-like methods",
      category: "Best Practices",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-implied-eval"
    },
    schema: [],
    messages: {
      impliedEval: "Implied eval. Consider passing a function instead of a string."
    }
  },
  create(t4) {
    const e = Object.freeze(["global", "window", "globalThis"]), r = /^(?:set(?:Interval|Timeout)|execScript)$/u;
    function s(o) {
      return o.type === "Literal" && typeof o.value == "string" || o.type === "TemplateLiteral" ? true : o.type === "BinaryExpression" && o.operator === "+" ? s(o.left) || s(o.right) : false;
    }
    function n(o) {
      const [l] = o.arguments;
      if (l) {
        const i = a3(l, t4.getScope());
        (i && typeof i.value == "string" || s(l)) && t4.report({
          node: o,
          messageId: "impliedEval"
        });
      }
    }
    function a(o) {
      const {
        references: l,
        name: i
      } = o;
      l.forEach((u) => {
        let f = u.identifier.parent;
        for (; E.isSpecificMemberAccess(f, null, i); )
          f = f.parent;
        if (E.isSpecificMemberAccess(f, null, r)) {
          const h = f.parent.type === "ChainExpression" ? f.parent : f, p = h.parent;
          p.type === "CallExpression" && p.callee === h && n(p);
        }
      });
    }
    return {
      CallExpression(o) {
        E.isSpecificId(o.callee, r) && n(o);
      },
      "Program:exit"() {
        const o = t4.getScope();
        e.map((l) => E.getVariableByName(o, l)).filter((l) => !!l && l.defs.length === 0).forEach(a);
      }
    };
  }
};
hf.meta;
hf.create;
var {
  findVariable: i3
} = Vt.default;
var Ly = {
  Object: /^(?:assign|definePropert(?:y|ies)|freeze|setPrototypeOf)$/u,
  Reflect: /^(?:(?:define|delete)Property|set(?:PrototypeOf)?)$/u
};
function o3(t4) {
  const {
    parent: e
  } = t4;
  return e.type === "AssignmentExpression" && e.left === t4 || e.type === "ArrayPattern" || e.type === "Property" && e.value === t4 && e.parent.type === "ObjectPattern" || e.type === "RestElement" || e.type === "AssignmentPattern" && e.left === t4;
}
function l3(t4) {
  const e = t4.parent.type === "ChainExpression" ? t4.parent : t4, {
    parent: r
  } = e;
  return r.type === "UpdateExpression" && r.argument === e || r.type === "UnaryExpression" && r.operator === "delete" && r.argument === e;
}
function u3(t4) {
  const {
    parent: e
  } = t4;
  return e.type === "ForInStatement" && e.left === t4 || e.type === "ForOfStatement" && e.left === t4;
}
function c3(t4, e) {
  const {
    parent: r
  } = t4;
  if (r.type !== "CallExpression" || r.arguments[0] !== t4)
    return false;
  const s = E.skipChainExpression(r.callee);
  if (!E.isSpecificMemberAccess(s, "Object", Ly.Object) && !E.isSpecificMemberAccess(s, "Reflect", Ly.Reflect))
    return false;
  const n = i3(e, s.object);
  return n !== null && n.scope.type === "global";
}
function p3(t4, e) {
  const {
    parent: r
  } = t4;
  return r.type === "MemberExpression" && r.object === t4 && (o3(r) || l3(r) || u3(r)) || c3(t4, e);
}
function Ry(t4) {
  let e = t4.parent;
  for (; e && e.type !== "AssignmentExpression" && e.type !== "UpdateExpression" && e.type !== "UnaryExpression" && e.type !== "CallExpression" && e.type !== "ForInStatement" && e.type !== "ForOfStatement"; )
    e = e.parent;
  return e || t4;
}
var mf = {
  meta: {
    type: "problem",
    docs: {
      description: "disallow assigning to imported bindings",
      category: "Possible Errors",
      recommended: true,
      url: "https://eslint.org/docs/rules/no-import-assign"
    },
    schema: [],
    messages: {
      readonly: "'{{name}}' is read-only.",
      readonlyMember: "The members of '{{name}}' are read-only."
    }
  },
  create(t4) {
    return {
      ImportDeclaration(e) {
        const r = t4.getScope();
        for (const s of t4.getDeclaredVariables(e)) {
          const n = s.defs.some((o) => o.node.type === "ImportNamespaceSpecifier");
          let a = null;
          for (const o of s.references) {
            const l = o.identifier;
            l !== a && (a = l, o.isWrite() ? t4.report({
              node: Ry(l),
              messageId: "readonly",
              data: {
                name: l.name
              }
            }) : n && p3(l, r) && t4.report({
              node: Ry(l),
              messageId: "readonlyMember",
              data: {
                name: l.name
              }
            }));
          }
        }
      }
    };
  }
};
mf.meta;
mf.create;
var df = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow inline comments after code",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-inline-comments"
    },
    schema: [{
      type: "object",
      properties: {
        ignorePattern: {
          type: "string"
        }
      },
      additionalProperties: false
    }],
    messages: {
      unexpectedInlineComment: "Unexpected comment inline with code."
    }
  },
  create(t4) {
    const e = t4.getSourceCode(), r = t4.options[0];
    let s;
    r && r.ignorePattern && (s = new RegExp(r.ignorePattern, "u"));
    function n(a) {
      const o = String(e.lines[a.loc.start.line - 1]), l = String(e.lines[a.loc.end.line - 1]), i = o.slice(0, a.loc.start.column).trim(), u = l.slice(a.loc.end.column).trim(), c = !i, f = !u;
      if (!(c && f) && !(s && s.test(a.value))) {
        if ((c || i === "{") && (f || u === "}")) {
          const h = e.getNodeByRangeIndex(a.range[0]);
          if (h && h.type === "JSXEmptyExpression")
            return;
        }
        E.isDirectiveComment(a) || t4.report({
          node: a,
          messageId: "unexpectedInlineComment"
        });
      }
    }
    return {
      Program() {
        e.getAllComments().filter((a) => a.type !== "Shebang").forEach(n);
      }
    };
  }
};
df.meta;
df.create;
var f3 = /* @__PURE__ */ new Set(["Program", "ExportNamedDeclaration", "ExportDefaultDeclaration"]);
var h3 = /* @__PURE__ */ new Set(["FunctionDeclaration", "FunctionExpression", "ArrowFunctionExpression"]);
var gf = {
  meta: {
    type: "problem",
    docs: {
      description: "disallow variable or `function` declarations in nested blocks",
      category: "Possible Errors",
      recommended: true,
      url: "https://eslint.org/docs/rules/no-inner-declarations"
    },
    schema: [{
      enum: ["functions", "both"]
    }],
    messages: {
      moveDeclToRoot: "Move {{type}} declaration to {{body}} root."
    }
  },
  create(t4) {
    function e(r) {
      const s = r.parent;
      if (s.type === "BlockStatement" && h3.has(s.parent.type) || f3.has(s.type))
        return;
      const n = E.getUpperFunction(s);
      t4.report({
        node: r,
        messageId: "moveDeclToRoot",
        data: {
          type: r.type === "FunctionDeclaration" ? "function" : "variable",
          body: n === null ? "program" : "function body"
        }
      });
    }
    return {
      FunctionDeclaration: e,
      VariableDeclaration(r) {
        t4.options[0] === "both" && r.kind === "var" && e(r);
      }
    };
  }
};
gf.meta;
gf.create;
var m3 = pn.default.RegExpValidator;
var Ny = new m3();
var d3 = /[gimuys]/gu;
var jy = void 0;
var yf = {
  meta: {
    type: "problem",
    docs: {
      description: "disallow invalid regular expression strings in `RegExp` constructors",
      category: "Possible Errors",
      recommended: true,
      url: "https://eslint.org/docs/rules/no-invalid-regexp"
    },
    schema: [{
      type: "object",
      properties: {
        allowConstructorFlags: {
          type: "array",
          items: {
            type: "string"
          }
        }
      },
      additionalProperties: false
    }],
    messages: {
      regexMessage: "{{message}}."
    }
  },
  create(t4) {
    const e = t4.options[0];
    let r = null;
    if (e && e.allowConstructorFlags) {
      const l = e.allowConstructorFlags.join("").replace(d3, "");
      l && (r = new RegExp(`[${l}]`, "giu"));
    }
    function s(l) {
      return l && l.type === "Literal" && typeof l.value == "string";
    }
    function n(l) {
      return l.arguments.length < 2 ? "" : s(l.arguments[1]) ? l.arguments[1].value : null;
    }
    function a(l, i) {
      try {
        return Ny.validatePattern(l, jy, jy, i), null;
      } catch (u) {
        return u.message;
      }
    }
    function o(l) {
      try {
        return Ny.validateFlags(l), null;
      } catch {
        return `Invalid flags supplied to RegExp constructor '${l}'`;
      }
    }
    return {
      "CallExpression, NewExpression"(l) {
        if (l.callee.type !== "Identifier" || l.callee.name !== "RegExp" || !s(l.arguments[0]))
          return;
        const i = l.arguments[0].value;
        let u = n(l);
        u && r && (u = u.replace(r, ""));
        const c = u && o(u) || (u === null ? a(i, true) && a(i, false) : a(i, u.includes("u")));
        c && t4.report({
          node: l,
          messageId: "regexMessage",
          data: {
            message: c
          }
        });
      }
    };
  }
};
yf.meta;
yf.create;
var xf = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow `this` keywords outside of classes or class-like objects",
      category: "Best Practices",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-invalid-this"
    },
    schema: [{
      type: "object",
      properties: {
        capIsConstructor: {
          type: "boolean",
          default: true
        }
      },
      additionalProperties: false
    }],
    messages: {
      unexpectedThis: "Unexpected 'this'."
    }
  },
  create(t4) {
    const r = (t4.options[0] || {}).capIsConstructor !== false, s = [], n = t4.getSourceCode();
    s.getCurrent = function() {
      const l = this[this.length - 1];
      return l.init || (l.init = true, l.valid = !E.isDefaultThisBinding(l.node, n, {
        capIsConstructor: r
      })), l;
    };
    function a(l) {
      s.push({
        init: !t4.getScope().isStrict,
        node: l,
        valid: true
      });
    }
    function o() {
      s.pop();
    }
    return {
      Program(l) {
        const i = t4.getScope(), u = t4.parserOptions.ecmaFeatures || {};
        s.push({
          init: true,
          node: l,
          valid: !(i.isStrict || l.sourceType === "module" || u.globalReturn && i.childScopes[0].isStrict)
        });
      },
      "Program:exit"() {
        s.pop();
      },
      FunctionDeclaration: a,
      "FunctionDeclaration:exit": o,
      FunctionExpression: a,
      "FunctionExpression:exit": o,
      ThisExpression(l) {
        const i = s.getCurrent();
        i && !i.valid && t4.report({
          node: l,
          messageId: "unexpectedThis"
        });
      }
    };
  }
};
xf.meta;
xf.create;
var Ca = /[\f\v\u0085\ufeff\u00a0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u202f\u205f\u3000\u2028\u2029]/u;
var g3 = /[\f\v\u0085\ufeff\u00a0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u202f\u205f\u3000]+/mgu;
var y3 = /[\u2028\u2029]/mgu;
var x3 = E.createGlobalLinebreakMatcher();
var vf = {
  meta: {
    type: "problem",
    docs: {
      description: "disallow irregular whitespace",
      category: "Possible Errors",
      recommended: true,
      url: "https://eslint.org/docs/rules/no-irregular-whitespace"
    },
    schema: [{
      type: "object",
      properties: {
        skipComments: {
          type: "boolean",
          default: false
        },
        skipStrings: {
          type: "boolean",
          default: true
        },
        skipTemplates: {
          type: "boolean",
          default: false
        },
        skipRegExps: {
          type: "boolean",
          default: false
        }
      },
      additionalProperties: false
    }],
    messages: {
      noIrregularWhitespace: "Irregular whitespace not allowed."
    }
  },
  create(t4) {
    let e = [];
    const r = t4.options[0] || {}, s = !!r.skipComments, n = r.skipStrings !== false, a = !!r.skipRegExps, o = !!r.skipTemplates, l = t4.getSourceCode(), i = l.getAllComments();
    function u(y) {
      const x = y.loc.start, A = y.loc.end;
      e = e.filter(({
        loc: {
          start: b
        }
      }) => b.line < x.line || b.line === x.line && b.column < x.column || b.line === A.line && b.column >= A.column || b.line > A.line);
    }
    function c(y) {
      const x = n && typeof y.value == "string", A = a && !!y.regex;
      (x || A) && Ca.test(y.raw) && u(y);
    }
    function f(y) {
      typeof y.value.raw == "string" && Ca.test(y.value.raw) && u(y);
    }
    function h(y) {
      Ca.test(y.value) && u(y);
    }
    function p(y) {
      l.lines.forEach((A, b) => {
        const v = b + 1;
        let C;
        for (; (C = g3.exec(A)) !== null; )
          e.push({
            node: y,
            messageId: "noIrregularWhitespace",
            loc: {
              start: {
                line: v,
                column: C.index
              },
              end: {
                line: v,
                column: C.index + C[0].length
              }
            }
          });
      });
    }
    function m(y) {
      const x = l.getText(), A = l.lines, b = x.match(x3);
      let v = -1, C;
      for (; (C = y3.exec(x)) !== null; ) {
        const T = b.indexOf(C[0], v + 1) || 0;
        e.push({
          node: y,
          messageId: "noIrregularWhitespace",
          loc: {
            start: {
              line: T + 1,
              column: A[T].length
            },
            end: {
              line: T + 2,
              column: 0
            }
          }
        }), v = T;
      }
    }
    function d() {
    }
    const g = {};
    return Ca.test(l.getText()) ? (g.Program = function(y) {
      p(y), m(y);
    }, g.Identifier = c, g.Literal = c, g.TemplateElement = o ? f : d, g["Program:exit"] = function() {
      s && i.forEach(h), e.forEach((y) => t4.report(y));
    }) : g.Program = d, g;
  }
};
vf.meta;
vf.create;
var {
  getStaticPropertyName: v3
} = E;
var Ef = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow the use of the `__iterator__` property",
      category: "Best Practices",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-iterator"
    },
    schema: [],
    messages: {
      noIterator: "Reserved name '__iterator__'."
    }
  },
  create(t4) {
    return {
      MemberExpression(e) {
        v3(e) === "__iterator__" && t4.report({
          node: e,
          messageId: "noIterator"
        });
      }
    };
  }
};
Ef.meta;
Ef.create;
var bf = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow labels that share a name with a variable",
      category: "Variables",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-label-var"
    },
    schema: [],
    messages: {
      identifierClashWithLabel: "Found identifier with same name as label."
    }
  },
  create(t4) {
    function e(r, s) {
      return E.getVariableByName(r, s) !== null;
    }
    return {
      LabeledStatement(r) {
        const s = t4.getScope();
        e(s, r.label.name) && t4.report({
          node: r,
          messageId: "identifierClashWithLabel"
        });
      }
    };
  }
};
bf.meta;
bf.create;
var Cf = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow labeled statements",
      category: "Best Practices",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-labels"
    },
    schema: [{
      type: "object",
      properties: {
        allowLoop: {
          type: "boolean",
          default: false
        },
        allowSwitch: {
          type: "boolean",
          default: false
        }
      },
      additionalProperties: false
    }],
    messages: {
      unexpectedLabel: "Unexpected labeled statement.",
      unexpectedLabelInBreak: "Unexpected label in break statement.",
      unexpectedLabelInContinue: "Unexpected label in continue statement."
    }
  },
  create(t4) {
    const e = t4.options[0], r = e && e.allowLoop, s = e && e.allowSwitch;
    let n = null;
    function a(i) {
      return E.isLoop(i) ? "loop" : i.type === "SwitchStatement" ? "switch" : "other";
    }
    function o(i) {
      switch (i) {
        case "loop":
          return r;
        case "switch":
          return s;
        default:
          return false;
      }
    }
    function l(i) {
      let u = n;
      for (; u; ) {
        if (u.label === i)
          return u.kind;
        u = u.upper;
      }
      return "other";
    }
    return {
      LabeledStatement(i) {
        n = {
          label: i.label.name,
          kind: a(i.body),
          upper: n
        };
      },
      "LabeledStatement:exit"(i) {
        o(n.kind) || t4.report({
          node: i,
          messageId: "unexpectedLabel"
        }), n = n.upper;
      },
      BreakStatement(i) {
        i.label && !o(l(i.label.name)) && t4.report({
          node: i,
          messageId: "unexpectedLabelInBreak"
        });
      },
      ContinueStatement(i) {
        i.label && !o(l(i.label.name)) && t4.report({
          node: i,
          messageId: "unexpectedLabelInContinue"
        });
      }
    };
  }
};
Cf.meta;
Cf.create;
var Sf = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow unnecessary nested blocks",
      category: "Best Practices",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-lone-blocks"
    },
    schema: [],
    messages: {
      redundantBlock: "Block is redundant.",
      redundantNestedBlock: "Nested block is redundant."
    }
  },
  create(t4) {
    const e = [];
    let r;
    function s(o) {
      const l = o.parent.type === "BlockStatement" ? "redundantNestedBlock" : "redundantBlock";
      t4.report({
        node: o,
        messageId: l
      });
    }
    function n(o) {
      return o.parent.type === "BlockStatement" || o.parent.type === "Program" || o.parent.type === "SwitchCase" && !(o.parent.consequent[0] === o && o.parent.consequent.length === 1);
    }
    function a() {
      if (e.length === 0)
        return;
      const o = t4.getAncestors().pop();
      e[e.length - 1] === o && e.pop();
    }
    return r = {
      BlockStatement(o) {
        n(o) && s(o);
      }
    }, t4.parserOptions.ecmaVersion >= 6 && (r = {
      BlockStatement(o) {
        n(o) && e.push(o);
      },
      "BlockStatement:exit"(o) {
        e.length > 0 && e[e.length - 1] === o ? (e.pop(), s(o)) : o.parent.type === "BlockStatement" && o.parent.body.length === 1 && s(o);
      }
    }, r.VariableDeclaration = function(o) {
      (o.kind === "let" || o.kind === "const") && a();
    }, r.FunctionDeclaration = function() {
      t4.getScope().isStrict && a();
    }, r.ClassDeclaration = a), r;
  }
};
Sf.meta;
Sf.create;
var Af = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow `if` statements as the only statement in `else` blocks",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-lonely-if"
    },
    schema: [],
    fixable: "code",
    messages: {
      unexpectedLonelyIf: "Unexpected if as the only statement in an else block."
    }
  },
  create(t4) {
    const e = t4.getSourceCode();
    return {
      IfStatement(r) {
        const s = t4.getAncestors(), n = s.pop(), a = s.pop();
        n && n.type === "BlockStatement" && n.body.length === 1 && a && a.type === "IfStatement" && n === a.alternate && t4.report({
          node: r,
          messageId: "unexpectedLonelyIf",
          fix(o) {
            const l = e.getFirstToken(n), i = e.getLastToken(n), u = e.getTokenBefore(l), c = e.getTokenAfter(i), f = e.getLastToken(r.consequent), h = e.getText();
            return h.slice(l.range[1], r.range[0]).trim() || h.slice(r.range[1], i.range[0]).trim() || r.consequent.type !== "BlockStatement" && f.value !== ";" && c && (r.consequent.loc.end.line === c.loc.start.line || /^[([/+`-]/u.test(c.value) || f.value === "++" || f.value === "--") ? null : o.replaceTextRange([l.range[0], i.range[1]], (u.range[1] === l.range[0] ? " " : "") + e.getText(r));
          }
        });
      }
    };
  }
};
Af.meta;
Af.create;
function vb(t4) {
  for (let e = t4; e.parent; e = e.parent) {
    const r = e.parent;
    switch (r.type) {
      case "WhileStatement":
      case "DoWhileStatement":
        return r;
      case "ForStatement":
        if (r.init !== e)
          return r;
        break;
      case "ForInStatement":
      case "ForOfStatement":
        if (r.right !== e)
          return r;
        break;
      case "ArrowFunctionExpression":
      case "FunctionExpression":
      case "FunctionDeclaration":
        return null;
    }
  }
  return null;
}
function E3(t4, e) {
  const r = e ? e.range[1] : 0;
  let s = t4, n = t4;
  for (; n && n.range[0] >= r; )
    s = n, n = vb(n);
  return s;
}
function b3(t4, e) {
  const r = e.resolved, s = r && r.defs[0], n = s && s.parent, a = n && n.type === "VariableDeclaration" ? n.kind : "";
  if (a === "const" || a === "let" && n.range[0] > t4.range[0] && n.range[1] < t4.range[1])
    return true;
  const o = E3(t4, a === "let" ? n : null).range[0];
  return !!r && r.references.every(function(l) {
    const i = l.identifier;
    return !l.isWrite() || r.scope.variableScope === l.from.variableScope && i.range[0] < o;
  });
}
var Df = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow function declarations that contain unsafe references inside loop statements",
      category: "Best Practices",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-loop-func"
    },
    schema: [],
    messages: {
      unsafeRefs: "Function declared in a loop contains unsafe references to variable(s) {{ varNames }}."
    }
  },
  create(t4) {
    function e(r) {
      const s = vb(r);
      if (!s)
        return;
      const a = t4.getScope().through.filter((o) => !b3(s, o)).map((o) => o.identifier.name);
      a.length > 0 && t4.report({
        node: r,
        messageId: "unsafeRefs",
        data: {
          varNames: `'${a.join("', '")}'`
        }
      });
    }
    return {
      ArrowFunctionExpression: e,
      FunctionExpression: e,
      FunctionDeclaration: e
    };
  }
};
Df.meta;
Df.create;
var wf = {
  meta: {
    type: "problem",
    docs: {
      description: "disallow literal numbers that lose precision",
      category: "Possible Errors",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-loss-of-precision"
    },
    schema: [],
    messages: {
      noLossOfPrecision: "This number literal will lose precision at runtime."
    }
  },
  create(t4) {
    function e(p) {
      return typeof p.value == "number";
    }
    function r(p) {
      return p.raw.replace(/_/gu, "");
    }
    function s(p) {
      return ["0x", "0X", "0b", "0B", "0o", "0O"].every((m) => !p.raw.startsWith(m)) && !/^0[0-7]+$/u.test(p.raw);
    }
    function n(p) {
      const m = r(p).toUpperCase();
      let d = 0;
      return m.startsWith("0B") ? d = 2 : m.startsWith("0X") ? d = 16 : d = 8, !m.endsWith(p.value.toString(d).toUpperCase());
    }
    function a(p) {
      return `${p.slice(0, 1)}.${p.slice(1)}`;
    }
    function o(p) {
      return p.replace(/^0*/u, "");
    }
    function l(p) {
      return p.replace(/0*$/u, "");
    }
    function i(p) {
      const m = l(o(p));
      return {
        magnitude: p.startsWith("0") ? p.length - 2 : p.length - 1,
        coefficient: a(m)
      };
    }
    function u(p) {
      const m = o(p);
      if (m.startsWith(".")) {
        const d = m.split(".").pop(), g = o(d);
        return {
          magnitude: g.length - d.length - 1,
          coefficient: a(g)
        };
      }
      return {
        magnitude: m.indexOf(".") - 1,
        coefficient: a(m.replace(".", ""))
      };
    }
    function c(p) {
      const m = p.replace("E", "e").split("e"), d = m[0], g = p.includes(".") ? u(d) : i(d), y = g.coefficient, x = m.length > 1 ? parseInt(m[1], 10) + g.magnitude : g.magnitude;
      return `${y}e${x}`;
    }
    function f(p) {
      const m = c(r(p)), d = m.split("e")[0].replace(".", "").length;
      if (d > 100)
        return true;
      const g = p.value.toPrecision(d), y = c(g);
      return m !== y;
    }
    function h(p) {
      return s(p) ? f(p) : n(p);
    }
    return {
      Literal(p) {
        p.value && e(p) && h(p) && t4.report({
          messageId: "noLossOfPrecision",
          node: p
        });
      }
    };
  }
};
wf.meta;
wf.create;
var C3 = 4294967295;
function S3(t4) {
  return typeof t4 == "string" ? BigInt(t4.slice(0, -1)) : t4;
}
var kf = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow magic numbers",
      category: "Best Practices",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-magic-numbers"
    },
    schema: [{
      type: "object",
      properties: {
        detectObjects: {
          type: "boolean",
          default: false
        },
        enforceConst: {
          type: "boolean",
          default: false
        },
        ignore: {
          type: "array",
          items: {
            anyOf: [{
              type: "number"
            }, {
              type: "string",
              pattern: "^[+-]?(?:0|[1-9][0-9]*)n$"
            }]
          },
          uniqueItems: true
        },
        ignoreArrayIndexes: {
          type: "boolean",
          default: false
        },
        ignoreDefaultValues: {
          type: "boolean",
          default: false
        }
      },
      additionalProperties: false
    }],
    messages: {
      useConst: "Number constants declarations must use 'const'.",
      noMagic: "No magic number: {{raw}}."
    }
  },
  create(t4) {
    const e = t4.options[0] || {}, r = !!e.detectObjects, s = !!e.enforceConst, n = (e.ignore || []).map(S3), a = !!e.ignoreArrayIndexes, o = !!e.ignoreDefaultValues, l = r ? [] : ["ObjectExpression", "Property", "AssignmentExpression"];
    function i(p) {
      return n.indexOf(p) !== -1;
    }
    function u(p) {
      const m = p.parent;
      return m.type === "AssignmentPattern" && m.right === p;
    }
    function c(p) {
      const m = p.parent;
      return m.type === "CallExpression" && p === m.arguments[1] && (E.isSpecificId(m.callee, "parseInt") || E.isSpecificMemberAccess(m.callee, "Number", "parseInt"));
    }
    function f(p) {
      return p.parent.type.indexOf("JSX") === 0;
    }
    function h(p, m) {
      const d = p.parent;
      return d.type === "MemberExpression" && d.property === p && (Number.isInteger(m) || typeof m == "bigint") && m >= 0 && m < C3;
    }
    return {
      Literal(p) {
        if (!E.isNumericLiteral(p))
          return;
        let m, d, g;
        p.parent.type === "UnaryExpression" && p.parent.operator === "-" ? (m = p.parent, d = -p.value, g = `-${p.raw}`) : (m = p, d = p.value, g = p.raw);
        const y = m.parent;
        i(d) || o && u(m) || c(m) || f(m) || a && h(m, d) || (y.type === "VariableDeclarator" ? s && y.parent.kind !== "const" && t4.report({
          node: m,
          messageId: "useConst"
        }) : (l.indexOf(y.type) === -1 || y.type === "AssignmentExpression" && y.left.type === "Identifier") && t4.report({
          node: m,
          messageId: "noMagic",
          data: {
            raw: g
          }
        }));
      }
    };
  }
};
kf.meta;
kf.create;
var A3 = function(t4) {
  return /^[\p{Mc}\p{Me}\p{Mn}]$/u.test(String.fromCodePoint(t4));
};
var D3 = function(t4) {
  return t4 >= 127995 && t4 <= 127999;
};
var w3 = function(t4) {
  return t4 >= 127462 && t4 <= 127487;
};
var k3 = function(t4, e) {
  return t4 >= 55296 && t4 < 56320 && e >= 56320 && e < 57344;
};
var T3 = {
  isCombiningCharacter: A3,
  isEmojiModifier: D3,
  isRegionalIndicatorSymbol: w3,
  isSurrogatePair: k3
};
var {
  CALL: F3,
  CONSTRUCT: P3,
  ReferenceTracker: I3,
  getStringIfConstant: My
} = Vt.default;
var {
  RegExpParser: _3,
  visitRegExpAST: B3
} = pn.default;
var {
  isCombiningCharacter: $y,
  isEmojiModifier: Vy,
  isRegionalIndicatorSymbol: Uy,
  isSurrogatePair: O3
} = T3;
function* L3(t4) {
  let e = [];
  for (const r of t4)
    switch (r.type) {
      case "Character":
        e.push(r.value);
        break;
      case "CharacterClassRange":
        e.push(r.min.value), yield e, e = [r.max.value];
        break;
      case "CharacterSet":
        e.length > 0 && (yield e, e = []);
        break;
    }
  e.length > 0 && (yield e);
}
var Eb = {
  surrogatePairWithoutUFlag(t4) {
    return t4.some((e, r) => r !== 0 && O3(t4[r - 1], e));
  },
  combiningClass(t4) {
    return t4.some((e, r) => r !== 0 && $y(e) && !$y(t4[r - 1]));
  },
  emojiModifier(t4) {
    return t4.some((e, r) => r !== 0 && Vy(e) && !Vy(t4[r - 1]));
  },
  regionalIndicatorSymbol(t4) {
    return t4.some((e, r) => r !== 0 && Uy(e) && Uy(t4[r - 1]));
  },
  zwj(t4) {
    const e = t4.length - 1;
    return t4.some((r, s) => s !== 0 && s !== e && r === 8205 && t4[s - 1] !== 8205 && t4[s + 1] !== 8205);
  }
};
var qy = Object.keys(Eb);
var Tf = {
  meta: {
    type: "problem",
    docs: {
      description: "disallow characters which are made with multiple code points in character class syntax",
      category: "Possible Errors",
      recommended: true,
      url: "https://eslint.org/docs/rules/no-misleading-character-class"
    },
    schema: [],
    messages: {
      surrogatePairWithoutUFlag: "Unexpected surrogate pair in character class. Use 'u' flag.",
      combiningClass: "Unexpected combined character in character class.",
      emojiModifier: "Unexpected modified Emoji in character class.",
      regionalIndicatorSymbol: "Unexpected national flag in character class.",
      zwj: "Unexpected joined character sequence in character class."
    }
  },
  create(t4) {
    const e = new _3();
    function r(s, n, a) {
      const o = {
        surrogatePairWithoutUFlag: false,
        combiningClass: false,
        variationSelector: false,
        emojiModifier: false,
        regionalIndicatorSymbol: false,
        zwj: false
      };
      let l;
      try {
        l = e.parsePattern(n, 0, n.length, a.includes("u"));
      } catch {
        return;
      }
      B3(l, {
        onCharacterClassEnter(i) {
          for (const u of L3(i.elements))
            for (const c of qy)
              o[c] = o[c] || Eb[c](u);
        }
      });
      for (const i of qy)
        o[i] && t4.report({
          node: s,
          messageId: i
        });
    }
    return {
      "Literal[regex]"(s) {
        r(s, s.regex.pattern, s.regex.flags);
      },
      Program() {
        const s = t4.getScope(), n = new I3(s);
        for (const {
          node: a
        } of n.iterateGlobalReferences({
          RegExp: {
            [F3]: true,
            [P3]: true
          }
        })) {
          const [o, l] = a.arguments, i = My(o, s), u = My(l, s);
          typeof i == "string" && r(a, i, u || "");
        }
      }
    };
  }
};
Tf.meta;
Tf.create;
var bb = ["+", "-", "*", "/", "%", "**"];
var Cb = ["&", "|", "^", "~", "<<", ">>", ">>>"];
var Sb = ["==", "!=", "===", "!==", ">", ">=", "<", "<="];
var Ab = ["&&", "||"];
var Db = ["in", "instanceof"];
var R3 = ["?:"];
var N3 = ["??"];
var j3 = [].concat(bb, Cb, Sb, Ab, Db, R3, N3);
var M3 = [bb, Cb, Sb, Ab, Db];
var $3 = /^(?:Binary|Logical|Conditional)Expression$/u;
function V3(t4 = {}) {
  const r = t4.groups && t4.groups.length > 0 ? t4.groups : M3, s = t4.allowSamePrecedence !== false;
  return {
    groups: r,
    allowSamePrecedence: s
  };
}
function U3(t4, e, r) {
  return t4.some((s) => s.indexOf(e) !== -1 && s.indexOf(r) !== -1);
}
function zo(t4) {
  return t4.type === "ConditionalExpression" ? t4.test : t4.left;
}
var Ff = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow mixed binary operators",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-mixed-operators"
    },
    schema: [{
      type: "object",
      properties: {
        groups: {
          type: "array",
          items: {
            type: "array",
            items: {
              enum: j3
            },
            minItems: 2,
            uniqueItems: true
          },
          uniqueItems: true
        },
        allowSamePrecedence: {
          type: "boolean",
          default: true
        }
      },
      additionalProperties: false
    }],
    messages: {
      unexpectedMixedOperator: "Unexpected mix of '{{leftOperator}}' and '{{rightOperator}}'. Use parentheses to clarify the intended order of operations."
    }
  },
  create(t4) {
    const e = t4.getSourceCode(), r = V3(t4.options[0]);
    function s(i) {
      const u = i, c = i.parent;
      return !U3(r.groups, u.operator, c.type === "ConditionalExpression" ? "?:" : c.operator) || r.allowSamePrecedence && E.getPrecedence(u) === E.getPrecedence(c);
    }
    function n(i) {
      return i.operator !== i.parent.operator && !E.isParenthesised(e, i);
    }
    function a(i) {
      return e.getTokenAfter(zo(i), E.isNotClosingParenToken);
    }
    function o(i) {
      const u = i.parent, c = zo(u) === i ? i : u, f = zo(u) !== i ? i : u, h = {
        leftOperator: c.operator || "?:",
        rightOperator: f.operator || "?:"
      };
      t4.report({
        node: c,
        loc: a(c).loc,
        messageId: "unexpectedMixedOperator",
        data: h
      }), t4.report({
        node: f,
        loc: a(f).loc,
        messageId: "unexpectedMixedOperator",
        data: h
      });
    }
    function l(i) {
      $3.test(i.parent.type) && n(i) && !s(i) && o(i);
    }
    return {
      BinaryExpression: l,
      LogicalExpression: l
    };
  }
};
Ff.meta;
Ff.create;
var Pf = {
  meta: {
    deprecated: true,
    replacedBy: [],
    type: "suggestion",
    docs: {
      description: "disallow `require` calls to be mixed with regular variable declarations",
      category: "Node.js and CommonJS",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-mixed-requires"
    },
    schema: [{
      oneOf: [{
        type: "boolean"
      }, {
        type: "object",
        properties: {
          grouping: {
            type: "boolean"
          },
          allowCall: {
            type: "boolean"
          }
        },
        additionalProperties: false
      }]
    }],
    messages: {
      noMixRequire: "Do not mix 'require' and other declarations.",
      noMixCoreModuleFileComputed: "Do not mix core, module, file and computed requires."
    }
  },
  create(t4) {
    const e = t4.options[0];
    let r = false, s = false;
    typeof e == "object" ? (r = e.grouping, s = e.allowCall) : r = !!e;
    const n = /* @__PURE__ */ function() {
      return ["assert", "buffer", "child_process", "cluster", "crypto", "dgram", "dns", "domain", "events", "fs", "http", "https", "net", "os", "path", "punycode", "querystring", "readline", "repl", "smalloc", "stream", "string_decoder", "tls", "tty", "url", "util", "v8", "vm", "zlib"];
    }(), a = "require", o = "uninitialized", l = "other", i = "computed";
    function u(p) {
      return p ? p.type === "CallExpression" && p.callee.type === "Identifier" && p.callee.name === "require" ? a : s && p.type === "CallExpression" && p.callee.type === "CallExpression" ? u(p.callee) : p.type === "MemberExpression" ? u(p.object) : l : o;
    }
    function c(p) {
      if (p.type === "MemberExpression")
        return c(p.object);
      if (p.arguments.length === 0)
        return i;
      const m = p.arguments[0];
      return m.type !== "Literal" || typeof m.value != "string" ? i : n.indexOf(m.value) !== -1 ? "core" : /^\.{0,2}\//u.test(m.value) ? "file" : "module";
    }
    function f(p) {
      const m = {};
      return p.forEach((d) => {
        const g = u(d.init);
        m[g] = true;
      }), !!(m[a] && (m[o] || m[l]));
    }
    function h(p) {
      const m = {};
      return p.forEach((d) => {
        u(d.init) === a && (m[c(d.init)] = true);
      }), Object.keys(m).length <= 1;
    }
    return {
      VariableDeclaration(p) {
        f(p.declarations) ? t4.report({
          node: p,
          messageId: "noMixRequire"
        }) : r && !h(p.declarations) && t4.report({
          node: p,
          messageId: "noMixCoreModuleFileComputed"
        });
      }
    };
  }
};
Pf.meta;
Pf.create;
var If = {
  meta: {
    type: "layout",
    docs: {
      description: "disallow mixed spaces and tabs for indentation",
      category: "Stylistic Issues",
      recommended: true,
      url: "https://eslint.org/docs/rules/no-mixed-spaces-and-tabs"
    },
    schema: [{
      enum: ["smart-tabs", true, false]
    }],
    messages: {
      mixedSpacesAndTabs: "Mixed spaces and tabs."
    }
  },
  create(t4) {
    const e = t4.getSourceCode();
    let r;
    switch (t4.options[0]) {
      case true:
      case "smart-tabs":
        r = true;
        break;
      default:
        r = false;
    }
    return {
      "Program:exit"(s) {
        const n = e.lines, a = e.getAllComments(), o = /* @__PURE__ */ new Set();
        a.forEach((i) => {
          for (let u = i.loc.start.line + 1; u <= i.loc.end.line; u++)
            o.add(u);
        });
        let l = /^(?=( +|\t+))\1(?:\t| )/u;
        r && (l = /^(?=(\t*))\1(?=( +))\2\t/u), n.forEach((i, u) => {
          const c = l.exec(i);
          if (c) {
            const f = u + 1, h = {
              start: {
                line: f,
                column: c[0].length - 2
              },
              end: {
                line: f,
                column: c[0].length
              }
            };
            if (!o.has(f)) {
              const p = e.getNodeByRangeIndex(e.getIndexFromLoc(h.start));
              p && ["Literal", "TemplateElement"].includes(p.type) || t4.report({
                node: s,
                loc: h,
                messageId: "mixedSpacesAndTabs"
              });
            }
          }
        });
      }
    };
  }
};
If.meta;
If.create;
var _f = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow use of chained assignment expressions",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-multi-assign"
    },
    schema: [{
      type: "object",
      properties: {
        ignoreNonDeclaration: {
          type: "boolean",
          default: false
        }
      },
      additionalProperties: false
    }],
    messages: {
      unexpectedChain: "Unexpected chained assignment."
    }
  },
  create(t4) {
    const r = (t4.options[0] || {
      ignoreNonDeclaration: false
    }).ignoreNonDeclaration ? ["VariableDeclarator"] : ["AssignmentExpression", "VariableDeclarator"];
    return {
      AssignmentExpression(s) {
        r.indexOf(s.parent.type) !== -1 && t4.report({
          node: s,
          messageId: "unexpectedChain"
        });
      }
    };
  }
};
_f.meta;
_f.create;
var Bf = {
  meta: {
    type: "layout",
    docs: {
      description: "disallow multiple spaces",
      category: "Best Practices",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-multi-spaces"
    },
    fixable: "whitespace",
    schema: [{
      type: "object",
      properties: {
        exceptions: {
          type: "object",
          patternProperties: {
            "^([A-Z][a-z]*)+$": {
              type: "boolean"
            }
          },
          additionalProperties: false
        },
        ignoreEOLComments: {
          type: "boolean",
          default: false
        }
      },
      additionalProperties: false
    }],
    messages: {
      multipleSpaces: "Multiple spaces found before '{{displayValue}}'."
    }
  },
  create(t4) {
    const e = t4.getSourceCode(), r = t4.options[0] || {}, s = r.ignoreEOLComments, n = Object.assign({
      Property: true
    }, r.exceptions), a = Object.keys(n).filter((l) => n[l]).length > 0;
    function o(l) {
      const i = l.value.split(`
`), u = i[0], c = `${u.slice(0, 12)}...`;
      return i.length === 1 && u.length <= 12 ? u : c;
    }
    return {
      Program() {
        e.tokensAndComments.forEach((l, i, u) => {
          if (i === u.length - 1)
            return;
          const c = u[i + 1];
          if (!e.text.slice(l.range[1], c.range[0]).includes("  ") || l.loc.end.line < c.loc.start.line || s && E.isCommentToken(c) && (i === u.length - 2 || c.loc.end.line < u[i + 2].loc.start.line))
            return;
          if (a) {
            const h = e.getNodeByRangeIndex(c.range[0] - 1);
            if (h && n[h.type])
              return;
          }
          let f;
          c.type === "Block" ? f = `/*${o(c)}*/` : c.type === "Line" ? f = `//${o(c)}` : f = c.value, t4.report({
            node: c,
            loc: {
              start: l.loc.end,
              end: c.loc.start
            },
            messageId: "multipleSpaces",
            data: {
              displayValue: f
            },
            fix: (h) => h.replaceTextRange([l.range[1], c.range[0]], " ")
          });
        });
      }
    };
  }
};
Bf.meta;
Bf.create;
var Of = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow multiline strings",
      category: "Best Practices",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-multi-str"
    },
    schema: [],
    messages: {
      multilineString: "Multiline support is limited to browsers supporting ES5 only."
    }
  },
  create(t4) {
    function e(r) {
      return r.type.indexOf("JSX") === 0;
    }
    return {
      Literal(r) {
        E.LINEBREAK_MATCHER.test(r.raw) && !e(r.parent) && t4.report({
          node: r,
          messageId: "multilineString"
        });
      }
    };
  }
};
Of.meta;
Of.create;
var Lf = {
  meta: {
    type: "layout",
    docs: {
      description: "disallow multiple empty lines",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-multiple-empty-lines"
    },
    fixable: "whitespace",
    schema: [{
      type: "object",
      properties: {
        max: {
          type: "integer",
          minimum: 0
        },
        maxEOF: {
          type: "integer",
          minimum: 0
        },
        maxBOF: {
          type: "integer",
          minimum: 0
        }
      },
      required: ["max"],
      additionalProperties: false
    }],
    messages: {
      blankBeginningOfFile: "Too many blank lines at the beginning of file. Max of {{max}} allowed.",
      blankEndOfFile: "Too many blank lines at the end of file. Max of {{max}} allowed.",
      consecutiveBlank: "More than {{max}} blank {{pluralizedLines}} not allowed."
    }
  },
  create(t4) {
    let e = 2, r = e, s = e;
    t4.options.length && (e = t4.options[0].max, r = typeof t4.options[0].maxEOF < "u" ? t4.options[0].maxEOF : e, s = typeof t4.options[0].maxBOF < "u" ? t4.options[0].maxBOF : e);
    const n = t4.getSourceCode(), a = n.lines[n.lines.length - 1] === "" ? n.lines.slice(0, -1) : n.lines, o = /* @__PURE__ */ new Set();
    return {
      TemplateLiteral(l) {
        l.quasis.forEach((i) => {
          for (let u = i.loc.start.line; u < i.loc.end.line; u++)
            o.add(u);
        });
      },
      "Program:exit"(l) {
        return a.reduce((i, u, c) => ((u.trim() || o.has(c + 1)) && i.push(c + 1), i), []).concat(a.length + 1).reduce((i, u) => {
          let c, f;
          return i === 0 ? (c = "blankBeginningOfFile", f = s) : u === a.length + 1 ? (c = "blankEndOfFile", f = r) : (c = "consecutiveBlank", f = e), u - i - 1 > f && t4.report({
            node: l,
            loc: {
              start: {
                line: i + f + 1,
                column: 0
              },
              end: {
                line: u,
                column: 0
              }
            },
            messageId: c,
            data: {
              max: f,
              pluralizedLines: f === 1 ? "line" : "lines"
            },
            fix(h) {
              const p = n.getIndexFromLoc({
                line: i + 1,
                column: 0
              }), m = u - f, d = m <= a.length ? n.getIndexFromLoc({
                line: m,
                column: 0
              }) : n.text.length;
              return h.removeRange([p, d]);
            }
          }), u;
        }, 0);
      }
    };
  }
};
Lf.meta;
Lf.create;
var Rf = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow assignments to native objects or read-only global variables",
      category: "Best Practices",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-native-reassign"
    },
    deprecated: true,
    replacedBy: ["no-global-assign"],
    schema: [{
      type: "object",
      properties: {
        exceptions: {
          type: "array",
          items: {
            type: "string"
          },
          uniqueItems: true
        }
      },
      additionalProperties: false
    }],
    messages: {
      nativeReassign: "Read-only global '{{name}}' should not be modified."
    }
  },
  create(t4) {
    const e = t4.options[0], r = e && e.exceptions || [];
    function s(a, o, l) {
      const i = a.identifier;
      a.init === false && a.isWrite() && (o === 0 || l[o - 1].identifier !== i) && t4.report({
        node: i,
        messageId: "nativeReassign",
        data: i
      });
    }
    function n(a) {
      a.writeable === false && r.indexOf(a.name) === -1 && a.references.forEach(s);
    }
    return {
      Program() {
        t4.getScope().variables.forEach(n);
      }
    };
  }
};
Rf.meta;
Rf.create;
var Nf = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow negated conditions",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-negated-condition"
    },
    schema: [],
    messages: {
      unexpectedNegated: "Unexpected negated condition."
    }
  },
  create(t4) {
    function e(a) {
      return a.alternate && a.alternate.type !== "IfStatement";
    }
    function r(a) {
      return a.type === "UnaryExpression" && a.operator === "!";
    }
    function s(a) {
      return a.type === "BinaryExpression" && (a.operator === "!=" || a.operator === "!==");
    }
    function n(a) {
      return r(a.test) || s(a.test);
    }
    return {
      IfStatement(a) {
        e(a) && n(a) && t4.report({
          node: a,
          messageId: "unexpectedNegated"
        });
      },
      ConditionalExpression(a) {
        n(a) && t4.report({
          node: a,
          messageId: "unexpectedNegated"
        });
      }
    };
  }
};
Nf.meta;
Nf.create;
var jf = {
  meta: {
    type: "problem",
    docs: {
      description: "disallow negating the left operand in `in` expressions",
      category: "Possible Errors",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-negated-in-lhs"
    },
    replacedBy: ["no-unsafe-negation"],
    deprecated: true,
    schema: [],
    messages: {
      negatedLHS: "The 'in' expression's left operand is negated."
    }
  },
  create(t4) {
    return {
      BinaryExpression(e) {
        e.operator === "in" && e.left.type === "UnaryExpression" && e.left.operator === "!" && t4.report({
          node: e,
          messageId: "negatedLHS"
        });
      }
    };
  }
};
jf.meta;
jf.create;
var Mf = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow nested ternary expressions",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-nested-ternary"
    },
    schema: [],
    messages: {
      noNestedTernary: "Do not nest ternary expressions."
    }
  },
  create(t4) {
    return {
      ConditionalExpression(e) {
        (e.alternate.type === "ConditionalExpression" || e.consequent.type === "ConditionalExpression") && t4.report({
          node: e,
          messageId: "noNestedTernary"
        });
      }
    };
  }
};
Mf.meta;
Mf.create;
var $f = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow `new` operators with the `Function` object",
      category: "Best Practices",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-new-func"
    },
    schema: [],
    messages: {
      noFunctionConstructor: "The Function constructor is eval."
    }
  },
  create(t4) {
    return {
      "Program:exit"() {
        const r = t4.getScope().set.get("Function");
        r && r.defs.length === 0 && r.references.forEach((s) => {
          const n = s.identifier, {
            parent: a
          } = n;
          a && (a.type === "NewExpression" || a.type === "CallExpression") && n === a.callee && t4.report({
            node: a,
            messageId: "noFunctionConstructor"
          });
        });
      }
    };
  }
};
$f.meta;
$f.create;
var Vf = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow `Object` constructors",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-new-object"
    },
    schema: [],
    messages: {
      preferLiteral: "The object literal notation {} is preferrable."
    }
  },
  create(t4) {
    return {
      NewExpression(e) {
        const r = E.getVariableByName(t4.getScope(), e.callee.name);
        r && r.identifiers.length > 0 || e.callee.name === "Object" && t4.report({
          node: e,
          messageId: "preferLiteral"
        });
      }
    };
  }
};
Vf.meta;
Vf.create;
var Uf = {
  meta: {
    deprecated: true,
    replacedBy: [],
    type: "suggestion",
    docs: {
      description: "disallow `new` operators with calls to `require`",
      category: "Node.js and CommonJS",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-new-require"
    },
    schema: [],
    messages: {
      noNewRequire: "Unexpected use of new with require."
    }
  },
  create(t4) {
    return {
      NewExpression(e) {
        e.callee.type === "Identifier" && e.callee.name === "require" && t4.report({
          node: e,
          messageId: "noNewRequire"
        });
      }
    };
  }
};
Uf.meta;
Uf.create;
var qf = {
  meta: {
    type: "problem",
    docs: {
      description: "disallow `new` operators with the `Symbol` object",
      category: "ECMAScript 6",
      recommended: true,
      url: "https://eslint.org/docs/rules/no-new-symbol"
    },
    schema: [],
    messages: {
      noNewSymbol: "`Symbol` cannot be called as a constructor."
    }
  },
  create(t4) {
    return {
      "Program:exit"() {
        const r = t4.getScope().set.get("Symbol");
        r && r.defs.length === 0 && r.references.forEach((s) => {
          const n = s.identifier, a = n.parent;
          a && a.type === "NewExpression" && a.callee === n && t4.report({
            node: n,
            messageId: "noNewSymbol"
          });
        });
      }
    };
  }
};
qf.meta;
qf.create;
var Wf = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow `new` operators with the `String`, `Number`, and `Boolean` objects",
      category: "Best Practices",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-new-wrappers"
    },
    schema: [],
    messages: {
      noConstructor: "Do not use {{fn}} as a constructor."
    }
  },
  create(t4) {
    return {
      NewExpression(e) {
        ["String", "Number", "Boolean"].indexOf(e.callee.name) > -1 && t4.report({
          node: e,
          messageId: "noConstructor",
          data: {
            fn: e.callee.name
          }
        });
      }
    };
  }
};
Wf.meta;
Wf.create;
var zf = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow `new` operators outside of assignments or comparisons",
      category: "Best Practices",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-new"
    },
    schema: [],
    messages: {
      noNewStatement: "Do not use 'new' for side effects."
    }
  },
  create(t4) {
    return {
      "ExpressionStatement > NewExpression"(e) {
        t4.report({
          node: e.parent,
          messageId: "noNewStatement"
        });
      }
    };
  }
};
zf.meta;
zf.create;
var q3 = /\\[89]/u;
function Wy(t4) {
  return `\\u${t4.charCodeAt(0).toString(16).padStart(4, "0")}`;
}
var Gf = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow `\\8` and `\\9` escape sequences in string literals",
      category: "Best Practices",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-nonoctal-decimal-escape",
      suggestion: true
    },
    schema: [],
    messages: {
      decimalEscape: "Don't use '{{decimalEscape}}' escape sequence.",
      refactor: "Replace '{{original}}' with '{{replacement}}'. This maintains the current functionality.",
      escapeBackslash: "Replace '{{original}}' with '{{replacement}}' to include the actual backslash character."
    }
  },
  create(t4) {
    const e = t4.getSourceCode();
    function r(s, n, a) {
      return {
        messageId: s,
        data: {
          original: e.getText().slice(...n),
          replacement: a
        },
        fix(o) {
          return o.replaceTextRange(n, a);
        }
      };
    }
    return {
      Literal(s) {
        if (typeof s.value != "string" || !q3.test(s.raw))
          return;
        let n;
        for (; n = /(?:[^\\]|(?<previousEscape>\\.))*?(?<decimalEscape>\\[89])/suy.exec(s.raw); ) {
          const {
            previousEscape: a,
            decimalEscape: o
          } = n.groups, l = s.range[0] + n.index + n[0].length, i = l - o.length, u = [i, l], c = [];
          a === "\\0" ? c.push(r("refactor", [i - a.length, l], `${Wy("\0")}${o[1]}`), r("refactor", u, Wy(o[1]))) : c.push(r("refactor", u, o[1])), c.push(r("escapeBackslash", u, `\\${o}`)), t4.report({
            node: s,
            loc: {
              start: e.getLocFromIndex(i),
              end: e.getLocFromIndex(l)
            },
            messageId: "decimalEscape",
            data: {
              decimalEscape: o
            },
            suggest: c
          });
        }
      }
    };
  }
};
Gf.meta;
Gf.create;
var {
  CALL: W3,
  CONSTRUCT: z3,
  ReferenceTracker: G3
} = Vt.default;
var H3 = E.getStaticPropertyName;
var K3 = ["Atomics", "JSON", "Math", "Reflect"];
function wb(t4) {
  return t4.type === "ChainExpression" ? wb(t4.expression) : t4.type === "MemberExpression" ? H3(t4) : t4.name;
}
var Hf = {
  meta: {
    type: "problem",
    docs: {
      description: "disallow calling global object properties as functions",
      category: "Possible Errors",
      recommended: true,
      url: "https://eslint.org/docs/rules/no-obj-calls"
    },
    schema: [],
    messages: {
      unexpectedCall: "'{{name}}' is not a function.",
      unexpectedRefCall: "'{{name}}' is reference to '{{ref}}', which is not a function."
    }
  },
  create(t4) {
    return {
      Program() {
        const e = t4.getScope(), r = new G3(e), s = {};
        for (const n of K3)
          s[n] = {
            [W3]: true,
            [z3]: true
          };
        for (const {
          node: n,
          path: a
        } of r.iterateGlobalReferences(s)) {
          const o = wb(n.callee), l = a[0], i = o === l ? "unexpectedCall" : "unexpectedRefCall";
          t4.report({
            node: n,
            messageId: i,
            data: {
              name: o,
              ref: l
            }
          });
        }
      }
    };
  }
};
Hf.meta;
Hf.create;
var Kf = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow octal escape sequences in string literals",
      category: "Best Practices",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-octal-escape"
    },
    schema: [],
    messages: {
      octalEscapeSequence: "Don't use octal: '\\{{sequence}}'. Use '\\u....' instead."
    }
  },
  create(t4) {
    return {
      Literal(e) {
        if (typeof e.value != "string")
          return;
        const r = e.raw.match(/^(?:[^\\]|\\.)*?\\([0-3][0-7]{1,2}|[4-7][0-7]|0(?=[89])|[1-7])/su);
        r && t4.report({
          node: e,
          messageId: "octalEscapeSequence",
          data: {
            sequence: r[1]
          }
        });
      }
    };
  }
};
Kf.meta;
Kf.create;
var Jf = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow octal literals",
      category: "Best Practices",
      recommended: true,
      url: "https://eslint.org/docs/rules/no-octal"
    },
    schema: [],
    messages: {
      noOcatal: "Octal literals should not be used."
    }
  },
  create(t4) {
    return {
      Literal(e) {
        typeof e.value == "number" && /^0[0-9]/u.test(e.raw) && t4.report({
          node: e,
          messageId: "noOcatal"
        });
      }
    };
  }
};
Jf.meta;
Jf.create;
var J3 = /(?:Statement|Declaration|Function(?:Expression)?|Program)$/u;
var Xf = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow reassigning `function` parameters",
      category: "Best Practices",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-param-reassign"
    },
    schema: [{
      oneOf: [{
        type: "object",
        properties: {
          props: {
            enum: [false]
          }
        },
        additionalProperties: false
      }, {
        type: "object",
        properties: {
          props: {
            enum: [true]
          },
          ignorePropertyModificationsFor: {
            type: "array",
            items: {
              type: "string"
            },
            uniqueItems: true
          },
          ignorePropertyModificationsForRegex: {
            type: "array",
            items: {
              type: "string"
            },
            uniqueItems: true
          }
        },
        additionalProperties: false
      }]
    }],
    messages: {
      assignmentToFunctionParam: "Assignment to function parameter '{{name}}'.",
      assignmentToFunctionParamProp: "Assignment to property of function parameter '{{name}}'."
    }
  },
  create(t4) {
    const e = t4.options[0] && t4.options[0].props, r = t4.options[0] && t4.options[0].ignorePropertyModificationsFor || [], s = t4.options[0] && t4.options[0].ignorePropertyModificationsForRegex || [];
    function n(u) {
      let c = u.identifier, f = c.parent;
      for (; f && (!J3.test(f.type) || f.type === "ForInStatement" || f.type === "ForOfStatement"); ) {
        switch (f.type) {
          case "AssignmentExpression":
            return f.left === c;
          case "UpdateExpression":
            return true;
          case "UnaryExpression":
            if (f.operator === "delete")
              return true;
            break;
          case "ForInStatement":
          case "ForOfStatement":
            return f.left === c;
          case "CallExpression":
            if (f.callee !== c)
              return false;
            break;
          case "MemberExpression":
            if (f.property === c)
              return false;
            break;
          case "Property":
            if (f.key === c)
              return false;
            break;
          case "ConditionalExpression":
            if (f.test === c)
              return false;
            break;
        }
        c = f, f = c.parent;
      }
      return false;
    }
    function a(u) {
      return r.includes(u) || s.some((c) => new RegExp(c, "u").test(u));
    }
    function o(u, c, f) {
      const h = u.identifier;
      h && !u.init && (c === 0 || f[c - 1].identifier !== h) && (u.isWrite() ? t4.report({
        node: h,
        messageId: "assignmentToFunctionParam",
        data: {
          name: h.name
        }
      }) : e && n(u) && !a(h.name) && t4.report({
        node: h,
        messageId: "assignmentToFunctionParamProp",
        data: {
          name: h.name
        }
      }));
    }
    function l(u) {
      u.defs[0].type === "Parameter" && u.references.forEach(o);
    }
    function i(u) {
      t4.getDeclaredVariables(u).forEach(l);
    }
    return {
      "FunctionDeclaration:exit": i,
      "FunctionExpression:exit": i,
      "ArrowFunctionExpression:exit": i
    };
  }
};
Xf.meta;
Xf.create;
var Qf = {
  meta: {
    deprecated: true,
    replacedBy: [],
    type: "suggestion",
    docs: {
      description: "disallow string concatenation with `__dirname` and `__filename`",
      category: "Node.js and CommonJS",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-path-concat"
    },
    schema: [],
    messages: {
      usePathFunctions: "Use path.join() or path.resolve() instead of + to create paths."
    }
  },
  create(t4) {
    const e = /^__(?:dir|file)name$/u;
    return {
      BinaryExpression(r) {
        const s = r.left, n = r.right;
        r.operator === "+" && (s.type === "Identifier" && e.test(s.name) || n.type === "Identifier" && e.test(n.name)) && t4.report({
          node: r,
          messageId: "usePathFunctions"
        });
      }
    };
  }
};
Qf.meta;
Qf.create;
function X3(t4) {
  const e = t4.parent;
  return e.type === "ForStatement" && e.update === t4;
}
function kb(t4) {
  const e = t4.parent;
  return e.type === "SequenceExpression" ? kb(e) : X3(t4);
}
var Yf = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow the unary operators `++` and `--`",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-plusplus"
    },
    schema: [{
      type: "object",
      properties: {
        allowForLoopAfterthoughts: {
          type: "boolean",
          default: false
        }
      },
      additionalProperties: false
    }],
    messages: {
      unexpectedUnaryOp: "Unary operator '{{operator}}' used."
    }
  },
  create(t4) {
    const e = t4.options[0];
    let r = false;
    return typeof e == "object" && (r = e.allowForLoopAfterthoughts === true), {
      UpdateExpression(s) {
        r && kb(s) || t4.report({
          node: s,
          messageId: "unexpectedUnaryOp",
          data: {
            operator: s.operator
          }
        });
      }
    };
  }
};
Yf.meta;
Yf.create;
var Zf = {
  meta: {
    deprecated: true,
    replacedBy: [],
    type: "suggestion",
    docs: {
      description: "disallow the use of `process.env`",
      category: "Node.js and CommonJS",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-process-env"
    },
    schema: [],
    messages: {
      unexpectedProcessEnv: "Unexpected use of process.env."
    }
  },
  create(t4) {
    return {
      MemberExpression(e) {
        const r = e.object.name, s = e.property.name;
        r === "process" && !e.computed && s && s === "env" && t4.report({
          node: e,
          messageId: "unexpectedProcessEnv"
        });
      }
    };
  }
};
Zf.meta;
Zf.create;
var eh = {
  meta: {
    deprecated: true,
    replacedBy: [],
    type: "suggestion",
    docs: {
      description: "disallow the use of `process.exit()`",
      category: "Node.js and CommonJS",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-process-exit"
    },
    schema: [],
    messages: {
      noProcessExit: "Don't use process.exit(); throw an error instead."
    }
  },
  create(t4) {
    return {
      "CallExpression > MemberExpression.callee[object.name = 'process'][property.name = 'exit']"(e) {
        t4.report({
          node: e.parent,
          messageId: "noProcessExit"
        });
      }
    };
  }
};
eh.meta;
eh.create;
var {
  findVariable: Q3
} = Vt.default;
var Y3 = /* @__PURE__ */ new Set(["ArrowFunctionExpression", "FunctionExpression"]);
function Z3(t4, e) {
  const r = Q3(e, t4);
  return r !== null && r.scope.type === "global" && r.defs.length === 0;
}
function ej(t4) {
  const e = t4.upper;
  return e.type === "function-expression-name" ? e.upper : e;
}
function tj(t4, e) {
  const r = t4.parent;
  return r.type === "NewExpression" && r.arguments[0] === t4 && r.callee.type === "Identifier" && r.callee.name === "Promise" && Z3(r.callee, ej(e));
}
var th = {
  meta: {
    type: "problem",
    docs: {
      description: "disallow returning values from Promise executor functions",
      category: "Possible Errors",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-promise-executor-return"
    },
    schema: [],
    messages: {
      returnsValue: "Return values from promise executor functions cannot be read."
    }
  },
  create(t4) {
    let e = null;
    function r(s) {
      t4.report({
        node: s,
        messageId: "returnsValue"
      });
    }
    return {
      onCodePathStart(s, n) {
        e = {
          upper: e,
          shouldCheck: Y3.has(n.type) && tj(n, t4.getScope())
        }, e.shouldCheck && n.type === "ArrowFunctionExpression" && n.expression && r(n.body);
      },
      onCodePathEnd() {
        e = e.upper;
      },
      ReturnStatement(s) {
        e.shouldCheck && s.argument && r(s);
      }
    };
  }
};
th.meta;
th.create;
var {
  getStaticPropertyName: rj
} = E;
var rh = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow the use of the `__proto__` property",
      category: "Best Practices",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-proto"
    },
    schema: [],
    messages: {
      unexpectedProto: "The '__proto__' property is deprecated."
    }
  },
  create(t4) {
    return {
      MemberExpression(e) {
        rj(e) === "__proto__" && t4.report({
          node: e,
          messageId: "unexpectedProto"
        });
      }
    };
  }
};
rh.meta;
rh.create;
var nh = {
  meta: {
    type: "problem",
    docs: {
      description: "disallow calling some `Object.prototype` methods directly on objects",
      category: "Possible Errors",
      recommended: true,
      url: "https://eslint.org/docs/rules/no-prototype-builtins"
    },
    schema: [],
    messages: {
      prototypeBuildIn: "Do not access Object.prototype method '{{prop}}' from target object."
    }
  },
  create(t4) {
    const e = ["hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable"];
    return {
      CallExpression: function(r) {
        const s = E.skipChainExpression(r.callee);
        if (s.type !== "MemberExpression")
          return;
        const n = E.getStaticPropertyName(s);
        n !== null && e.indexOf(n) > -1 && t4.report({
          messageId: "prototypeBuildIn",
          loc: s.property.loc,
          data: {
            prop: n
          },
          node: r
        });
      }
    };
  }
};
nh.meta;
nh.create;
var sh = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow variable redeclaration",
      category: "Best Practices",
      recommended: true,
      url: "https://eslint.org/docs/rules/no-redeclare"
    },
    messages: {
      redeclared: "'{{id}}' is already defined.",
      redeclaredAsBuiltin: "'{{id}}' is already defined as a built-in global variable.",
      redeclaredBySyntax: "'{{id}}' is already defined by a variable declaration."
    },
    schema: [{
      type: "object",
      properties: {
        builtinGlobals: {
          type: "boolean",
          default: true
        }
      },
      additionalProperties: false
    }]
  },
  create(t4) {
    const e = {
      builtinGlobals: !!(t4.options.length === 0 || t4.options[0].builtinGlobals)
    }, r = t4.getSourceCode();
    function* s(o) {
      e.builtinGlobals && (o.eslintImplicitGlobalSetting === "readonly" || o.eslintImplicitGlobalSetting === "writable") && (yield {
        type: "builtin"
      });
      for (const l of o.identifiers)
        yield {
          type: "syntax",
          node: l,
          loc: l.loc
        };
      if (o.eslintExplicitGlobalComments)
        for (const l of o.eslintExplicitGlobalComments)
          yield {
            type: "comment",
            node: l,
            loc: E.getNameLocationInGlobalDirectiveComment(r, l, o.name)
          };
    }
    function n(o) {
      for (const l of o.variables) {
        const [i, ...u] = s(l);
        if (u.length === 0)
          continue;
        const c = i.type === "builtin" ? "redeclaredAsBuiltin" : "redeclaredBySyntax", f = {
          id: l.name
        };
        for (const {
          type: h,
          node: p,
          loc: m
        } of u) {
          const d = h === i.type ? "redeclared" : c;
          t4.report({
            node: p,
            loc: m,
            messageId: d,
            data: f
          });
        }
      }
    }
    function a(o) {
      const l = t4.getScope();
      l.block === o && n(l);
    }
    return {
      Program() {
        const o = t4.getScope();
        n(o), o.type === "global" && o.childScopes[0] && o.block === o.childScopes[0].block && n(o.childScopes[0]);
      },
      FunctionDeclaration: a,
      FunctionExpression: a,
      ArrowFunctionExpression: a,
      BlockStatement: a,
      ForStatement: a,
      ForInStatement: a,
      ForOfStatement: a,
      SwitchStatement: a
    };
  }
};
sh.meta;
sh.create;
var nj = new pn.default.RegExpParser();
var sj = / {2}/u;
function zy(t4) {
  return t4 && t4.type === "Literal" && typeof t4.value == "string";
}
var ah = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow multiple spaces in regular expressions",
      category: "Possible Errors",
      recommended: true,
      url: "https://eslint.org/docs/rules/no-regex-spaces"
    },
    schema: [],
    fixable: "code",
    messages: {
      multipleSpaces: "Spaces are hard to count. Use {{{length}}}."
    }
  },
  create(t4) {
    function e(s, n, a, o, l) {
      if (!sj.test(a))
        return;
      const i = [];
      let u;
      try {
        u = nj.parsePattern(n, 0, n.length, l.includes("u"));
      } catch {
        return;
      }
      pn.default.visitRegExpAST(u, {
        onCharacterClassEnter(f) {
          i.push(f);
        }
      });
      let c;
      for (; c = /( {2,})(?: [+*{?]|[^+*{?]|$)/gu.exec(n); ) {
        const {
          1: {
            length: f
          },
          index: h
        } = c;
        if (i.every(({
          start: p,
          end: m
        }) => h < p || m <= h)) {
          t4.report({
            node: s,
            messageId: "multipleSpaces",
            data: {
              length: f
            },
            fix(p) {
              return n !== a ? null : p.replaceTextRange([o + h, o + h + f], ` {${f}}`);
            }
          });
          return;
        }
      }
    }
    function r(s) {
      const n = t4.getScope(), a = E.getVariableByName(n, "RegExp"), o = a && a.defs.length > 0, l = s.arguments[0], i = s.arguments[1];
      if (s.callee.type === "Identifier" && s.callee.name === "RegExp" && zy(l) && !o) {
        const u = l.value, c = l.raw.slice(1, -1), f = l.range[0] + 1, h = zy(i) ? i.value : "";
        e(s, u, c, f, h);
      }
    }
    return {
      Literal: function(s) {
        if (s.regex) {
          const n = s.regex.pattern, a = s.raw.slice(1, s.raw.lastIndexOf("/")), o = s.range[0] + 1, l = s.regex.flags;
          e(s, n, a, o, l);
        }
      },
      CallExpression: r,
      NewExpression: r
    };
  }
};
ah.meta;
ah.create;
var ih = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow specified names in exports",
      category: "ECMAScript 6",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-restricted-exports"
    },
    schema: [{
      type: "object",
      properties: {
        restrictedNamedExports: {
          type: "array",
          items: {
            type: "string"
          },
          uniqueItems: true
        }
      },
      additionalProperties: false
    }],
    messages: {
      restrictedNamed: "'{{name}}' is restricted from being used as an exported name."
    }
  },
  create(t4) {
    const e = new Set(t4.options[0] && t4.options[0].restrictedNamedExports);
    function r(s) {
      const n = s.name;
      e.has(n) && t4.report({
        node: s,
        messageId: "restrictedNamed",
        data: {
          name: n
        }
      });
    }
    return {
      ExportAllDeclaration(s) {
        s.exported && r(s.exported);
      },
      ExportNamedDeclaration(s) {
        const n = s.declaration;
        n ? n.type === "FunctionDeclaration" || n.type === "ClassDeclaration" ? r(n.id) : n.type === "VariableDeclaration" && t4.getDeclaredVariables(n).map((a) => a.defs.find((o) => o.parent === n)).map((a) => a.name).forEach(r) : s.specifiers.map((a) => a.exported).forEach(r);
      }
    };
  }
};
ih.meta;
ih.create;
var oh = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow specified global variables",
      category: "Variables",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-restricted-globals"
    },
    schema: {
      type: "array",
      items: {
        oneOf: [{
          type: "string"
        }, {
          type: "object",
          properties: {
            name: {
              type: "string"
            },
            message: {
              type: "string"
            }
          },
          required: ["name"],
          additionalProperties: false
        }]
      },
      uniqueItems: true,
      minItems: 0
    },
    messages: {
      defaultMessage: "Unexpected use of '{{name}}'.",
      customMessage: "Unexpected use of '{{name}}'. {{customMessage}}"
    }
  },
  create(t4) {
    if (t4.options.length === 0)
      return {};
    const e = t4.options.reduce((n, a) => (typeof a == "string" ? n[a] = null : n[a.name] = a.message, n), {});
    function r(n) {
      const a = n.identifier.name, o = e[a], l = o ? "customMessage" : "defaultMessage";
      t4.report({
        node: n.identifier,
        messageId: l,
        data: {
          name: a,
          customMessage: o
        }
      });
    }
    function s(n) {
      return Object.prototype.hasOwnProperty.call(e, n);
    }
    return {
      Program() {
        const n = t4.getScope();
        n.variables.forEach((a) => {
          !a.defs.length && s(a.name) && a.references.forEach(r);
        }), n.through.forEach((a) => {
          s(a.identifier.name) && r(a);
        });
      }
    };
  }
};
oh.meta;
oh.create;
var Gy = {
  type: "array",
  items: {
    anyOf: [{
      type: "string"
    }, {
      type: "object",
      properties: {
        name: {
          type: "string"
        },
        message: {
          type: "string",
          minLength: 1
        },
        importNames: {
          type: "array",
          items: {
            type: "string"
          }
        }
      },
      additionalProperties: false,
      required: ["name"]
    }]
  },
  uniqueItems: true
};
var aj = {
  anyOf: [{
    type: "array",
    items: {
      type: "string"
    },
    uniqueItems: true
  }, {
    type: "array",
    items: {
      type: "object",
      properties: {
        group: {
          type: "array",
          items: {
            type: "string"
          },
          minItems: 1,
          uniqueItems: true
        },
        message: {
          type: "string",
          minLength: 1
        }
      },
      additionalProperties: false,
      required: ["group"]
    },
    uniqueItems: true
  }]
};
var lh = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow specified modules when loaded by `import`",
      category: "ECMAScript 6",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-restricted-imports"
    },
    messages: {
      path: "'{{importSource}}' import is restricted from being used.",
      pathWithCustomMessage: "'{{importSource}}' import is restricted from being used. {{customMessage}}",
      patterns: "'{{importSource}}' import is restricted from being used by a pattern.",
      patternWithCustomMessage: "'{{importSource}}' import is restricted from being used by a pattern. {{customMessage}}",
      everything: "* import is invalid because '{{importNames}}' from '{{importSource}}' is restricted.",
      everythingWithCustomMessage: "* import is invalid because '{{importNames}}' from '{{importSource}}' is restricted. {{customMessage}}",
      importName: "'{{importName}}' import from '{{importSource}}' is restricted.",
      importNameWithCustomMessage: "'{{importName}}' import from '{{importSource}}' is restricted. {{customMessage}}"
    },
    schema: {
      anyOf: [Gy, {
        type: "array",
        items: [{
          type: "object",
          properties: {
            paths: Gy,
            patterns: aj
          },
          additionalProperties: false
        }],
        additionalItems: false
      }]
    }
  },
  create(t4) {
    const e = t4.getSourceCode(), r = Array.isArray(t4.options) ? t4.options : [], s = typeof r[0] == "object" && (Object.prototype.hasOwnProperty.call(r[0], "paths") || Object.prototype.hasOwnProperty.call(r[0], "patterns")), n = (s ? r[0].paths : t4.options) || [], a = n.reduce((h, p) => (typeof p == "string" ? h[p] = {
      message: null
    } : h[p.name] = {
      message: p.message,
      importNames: p.importNames
    }, h), {}), o = (s ? r[0].patterns : []) || [], l = o.length > 0 && typeof o[0] == "string" ? [{
      matcher: _l.default().add(o)
    }] : o.map(({
      group: h,
      message: p
    }) => ({
      matcher: _l.default().add(h),
      customMessage: p
    }));
    if (Object.keys(n).length === 0 && l.length === 0)
      return {};
    function i(h, p, m) {
      if (!Object.prototype.hasOwnProperty.call(a, h))
        return;
      const d = a[h].message, g = a[h].importNames;
      if (g) {
        if (p.has("*")) {
          const y = p.get("*")[0];
          t4.report({
            node: m,
            messageId: d ? "everythingWithCustomMessage" : "everything",
            loc: y.loc,
            data: {
              importSource: h,
              importNames: g,
              customMessage: d
            }
          });
        }
        g.forEach((y) => {
          p.has(y) && p.get(y).forEach((A) => {
            t4.report({
              node: m,
              messageId: d ? "importNameWithCustomMessage" : "importName",
              loc: A.loc,
              data: {
                importSource: h,
                customMessage: d,
                importName: y
              }
            });
          });
        });
      } else
        t4.report({
          node: m,
          messageId: d ? "pathWithCustomMessage" : "path",
          data: {
            importSource: h,
            customMessage: d
          }
        });
    }
    function u(h, p) {
      const m = h.source.value.trim();
      t4.report({
        node: h,
        messageId: p.customMessage ? "patternWithCustomMessage" : "patterns",
        data: {
          importSource: m,
          customMessage: p.customMessage
        }
      });
    }
    function c(h, p) {
      return p.matcher.ignores(h);
    }
    function f(h) {
      const p = h.source.value.trim(), m = /* @__PURE__ */ new Map();
      if (h.type === "ExportAllDeclaration") {
        const d = e.getFirstToken(h, 1);
        m.set("*", [{
          loc: d.loc
        }]);
      } else if (h.specifiers)
        for (const d of h.specifiers) {
          let g;
          const y = {
            loc: d.loc
          };
          d.type === "ImportDefaultSpecifier" ? g = "default" : d.type === "ImportNamespaceSpecifier" ? g = "*" : d.imported ? g = d.imported.name : d.local && (g = d.local.name), g && (m.has(g) ? m.get(g).push(y) : m.set(g, [y]));
        }
      i(p, m, h), l.forEach((d) => {
        c(p, d) && u(h, d);
      });
    }
    return {
      ImportDeclaration: f,
      ExportNamedDeclaration(h) {
        h.source && f(h);
      },
      ExportAllDeclaration: f
    };
  }
};
lh.meta;
lh.create;
var ij = {
  type: "array",
  items: {
    type: "string"
  },
  uniqueItems: true
};
var Hy = {
  type: "array",
  items: {
    anyOf: [{
      type: "string"
    }, {
      type: "object",
      properties: {
        name: {
          type: "string"
        },
        message: {
          type: "string",
          minLength: 1
        }
      },
      additionalProperties: false,
      required: ["name"]
    }]
  },
  uniqueItems: true
};
var uh = {
  meta: {
    deprecated: true,
    replacedBy: [],
    type: "suggestion",
    docs: {
      description: "disallow specified modules when loaded by `require`",
      category: "Node.js and CommonJS",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-restricted-modules"
    },
    schema: {
      anyOf: [Hy, {
        type: "array",
        items: {
          type: "object",
          properties: {
            paths: Hy,
            patterns: ij
          },
          additionalProperties: false
        },
        additionalItems: false
      }]
    },
    messages: {
      defaultMessage: "'{{name}}' module is restricted from being used.",
      customMessage: "'{{name}}' module is restricted from being used. {{customMessage}}",
      patternMessage: "'{{name}}' module is restricted from being used by a pattern."
    }
  },
  create(t4) {
    const e = Array.isArray(t4.options) ? t4.options : [], r = typeof e[0] == "object" && (Object.prototype.hasOwnProperty.call(e[0], "paths") || Object.prototype.hasOwnProperty.call(e[0], "patterns")), s = (r ? e[0].paths : t4.options) || [], n = (r ? e[0].patterns : []) || [], a = s.reduce((p, m) => (typeof m == "string" ? p[m] = null : p[m.name] = m.message, p), {});
    if (Object.keys(s).length === 0 && n.length === 0)
      return {};
    const o = _l.default().add(n);
    function l(p) {
      return p && p.type === "Literal" && typeof p.value == "string";
    }
    function i(p) {
      return p && p.type === "TemplateLiteral" && p.expressions.length === 0;
    }
    function u(p) {
      return p.callee.type === "Identifier" && p.callee.name === "require";
    }
    function c(p) {
      return l(p) ? p.value.trim() : i(p) ? p.quasis[0].value.cooked.trim() : null;
    }
    function f(p, m) {
      const d = a[m], g = d ? "customMessage" : "defaultMessage";
      t4.report({
        node: p,
        messageId: g,
        data: {
          name: m,
          customMessage: d
        }
      });
    }
    function h(p) {
      return Object.prototype.hasOwnProperty.call(a, p);
    }
    return {
      CallExpression(p) {
        if (u(p) && p.arguments.length) {
          const m = c(p.arguments[0]);
          m && (h(m) && f(p, m), n.length > 0 && o.ignores(m) && t4.report({
            node: p,
            messageId: "patternMessage",
            data: {
              name: m
            }
          }));
        }
      }
    };
  }
};
uh.meta;
uh.create;
var ch = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow certain properties on certain objects",
      category: "Best Practices",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-restricted-properties"
    },
    schema: {
      type: "array",
      items: {
        anyOf: [{
          type: "object",
          properties: {
            object: {
              type: "string"
            },
            property: {
              type: "string"
            },
            message: {
              type: "string"
            }
          },
          additionalProperties: false,
          required: ["object"]
        }, {
          type: "object",
          properties: {
            object: {
              type: "string"
            },
            property: {
              type: "string"
            },
            message: {
              type: "string"
            }
          },
          additionalProperties: false,
          required: ["property"]
        }]
      },
      uniqueItems: true
    },
    messages: {
      restrictedObjectProperty: "'{{objectName}}.{{propertyName}}' is restricted from being used.{{message}}",
      restrictedProperty: "'{{propertyName}}' is restricted from being used.{{message}}"
    }
  },
  create(t4) {
    const e = t4.options;
    if (e.length === 0)
      return {};
    const r = /* @__PURE__ */ new Map(), s = /* @__PURE__ */ new Map(), n = /* @__PURE__ */ new Map();
    e.forEach((l) => {
      const i = l.object, u = l.property;
      typeof i > "u" ? n.set(u, {
        message: l.message
      }) : typeof u > "u" ? s.set(i, {
        message: l.message
      }) : (r.has(i) || r.set(i, /* @__PURE__ */ new Map()), r.get(i).set(u, {
        message: l.message
      }));
    });
    function a(l, i, u) {
      if (u === null)
        return;
      const c = r.get(i), f = c ? c.get(u) : s.get(i), h = n.get(u);
      if (f) {
        const p = f.message ? ` ${f.message}` : "";
        t4.report({
          node: l,
          messageId: "restrictedObjectProperty",
          data: {
            objectName: i,
            propertyName: u,
            message: p
          }
        });
      } else if (h) {
        const p = h.message ? ` ${h.message}` : "";
        t4.report({
          node: l,
          messageId: "restrictedProperty",
          data: {
            propertyName: u,
            message: p
          }
        });
      }
    }
    function o(l) {
      if (l.right.type === "Identifier") {
        const i = l.right.name;
        l.left.type === "ObjectPattern" && l.left.properties.forEach((u) => {
          a(l.left, i, E.getStaticPropertyName(u));
        });
      }
    }
    return {
      MemberExpression(l) {
        a(l, l.object && l.object.name, E.getStaticPropertyName(l));
      },
      VariableDeclarator(l) {
        if (l.init && l.init.type === "Identifier") {
          const i = l.init.name;
          l.id.type === "ObjectPattern" && l.id.properties.forEach((u) => {
            a(l.id, i, E.getStaticPropertyName(u));
          });
        }
      },
      AssignmentExpression: o,
      AssignmentPattern: o
    };
  }
};
ch.meta;
ch.create;
var ph = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow specified syntax",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-restricted-syntax"
    },
    schema: {
      type: "array",
      items: {
        oneOf: [{
          type: "string"
        }, {
          type: "object",
          properties: {
            selector: {
              type: "string"
            },
            message: {
              type: "string"
            }
          },
          required: ["selector"],
          additionalProperties: false
        }]
      },
      uniqueItems: true,
      minItems: 0
    },
    messages: {
      restrictedSyntax: "{{message}}"
    }
  },
  create(t4) {
    return t4.options.reduce((e, r) => {
      const s = typeof r == "string", n = !s && !!r.message, a = s ? r : r.selector, o = n ? r.message : `Using '${a}' is not allowed.`;
      return Object.assign(e, {
        [a](l) {
          t4.report({
            node: l,
            messageId: "restrictedSyntax",
            data: {
              message: o
            }
          });
        }
      });
    }, {});
  }
};
ph.meta;
ph.create;
var oj = /^(?:[a-zA-Z]+?Statement|ArrowFunctionExpression|FunctionExpression|ClassExpression)$/u;
var fh = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow assignment operators in `return` statements",
      category: "Best Practices",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-return-assign"
    },
    schema: [{
      enum: ["except-parens", "always"]
    }],
    messages: {
      returnAssignment: "Return statement should not contain assignment.",
      arrowAssignment: "Arrow function should not return assignment."
    }
  },
  create(t4) {
    const e = (t4.options[0] || "except-parens") !== "except-parens", r = t4.getSourceCode();
    return {
      AssignmentExpression(s) {
        if (!e && E.isParenthesised(r, s))
          return;
        let n = s, a = n.parent;
        for (; a && !oj.test(a.type); )
          n = a, a = a.parent;
        a && a.type === "ReturnStatement" ? t4.report({
          node: a,
          messageId: "returnAssignment"
        }) : a && a.type === "ArrowFunctionExpression" && a.body === n && t4.report({
          node: a,
          messageId: "arrowAssignment"
        });
      }
    };
  }
};
fh.meta;
fh.create;
var hh = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow unnecessary `return await`",
      category: "Best Practices",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-return-await"
    },
    fixable: null,
    schema: [],
    messages: {
      redundantUseOfAwait: "Redundant use of `await` on a return value."
    }
  },
  create(t4) {
    function e(n) {
      t4.report({
        node: t4.getSourceCode().getFirstToken(n),
        loc: n.loc,
        messageId: "redundantUseOfAwait"
      });
    }
    function r(n) {
      let a = n;
      for (; !E.isFunction(a) && a.type !== "Program"; ) {
        if (a.parent.type === "TryStatement" && (a === a.parent.block || a === a.parent.handler && a.parent.finalizer))
          return true;
        a = a.parent;
      }
      return false;
    }
    function s(n) {
      return n.parent.type === "ArrowFunctionExpression" ? true : n.parent.type === "ReturnStatement" ? !r(n.parent) : n.parent.type === "ConditionalExpression" && (n === n.parent.consequent || n === n.parent.alternate) || n.parent.type === "LogicalExpression" && n === n.parent.right || n.parent.type === "SequenceExpression" && n === n.parent.expressions[n.parent.expressions.length - 1] ? s(n.parent) : false;
    }
    return {
      AwaitExpression(n) {
        s(n) && !r(n) && e(n);
      }
    };
  }
};
hh.meta;
hh.create;
var mh = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow `javascript:` urls",
      category: "Best Practices",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-script-url"
    },
    schema: [],
    messages: {
      unexpectedScriptURL: "Script URL is a form of eval."
    }
  },
  create(t4) {
    function e(r) {
      const s = E.getStaticStringValue(r);
      typeof s == "string" && s.toLowerCase().indexOf("javascript:") === 0 && t4.report({
        node: r,
        messageId: "unexpectedScriptURL"
      });
    }
    return {
      Literal(r) {
        r.value && typeof r.value == "string" && e(r);
      },
      TemplateLiteral(r) {
        r.parent && r.parent.type === "TaggedTemplateExpression" || e(r);
      }
    };
  }
};
mh.meta;
mh.create;
var lj = /\s+/gu;
function ks(t4, e, r, s) {
  if (!(!t4 || !e))
    if (t4.type === "Identifier" && e.type === "Identifier" && t4.name === e.name)
      s(e);
    else if (t4.type === "ArrayPattern" && e.type === "ArrayExpression") {
      const n = Math.min(t4.elements.length, e.elements.length);
      for (let a = 0; a < n; ++a) {
        const o = t4.elements[a], l = e.elements[a];
        if (o && o.type === "RestElement" && a < e.elements.length - 1 || (ks(o, l, r, s), l && l.type === "SpreadElement"))
          break;
      }
    } else if (t4.type === "RestElement" && e.type === "SpreadElement")
      ks(t4.argument, e.argument, r, s);
    else if (t4.type === "ObjectPattern" && e.type === "ObjectExpression" && e.properties.length >= 1) {
      let n = 0;
      for (let a = e.properties.length - 1; a >= 0; --a) {
        const o = e.properties[a].type;
        if (o === "SpreadElement" || o === "ExperimentalSpreadProperty") {
          n = a + 1;
          break;
        }
      }
      for (let a = 0; a < t4.properties.length; ++a)
        for (let o = n; o < e.properties.length; ++o)
          ks(t4.properties[a], e.properties[o], r, s);
    } else if (t4.type === "Property" && e.type === "Property" && e.kind === "init" && !e.method) {
      const n = E.getStaticPropertyName(t4);
      n !== null && n === E.getStaticPropertyName(e) && ks(t4.value, e.value, r, s);
    } else
      r && E.skipChainExpression(t4).type === "MemberExpression" && E.skipChainExpression(e).type === "MemberExpression" && E.isSameReference(t4, e) && s(e);
}
var dh = {
  meta: {
    type: "problem",
    docs: {
      description: "disallow assignments where both sides are exactly the same",
      category: "Best Practices",
      recommended: true,
      url: "https://eslint.org/docs/rules/no-self-assign"
    },
    schema: [{
      type: "object",
      properties: {
        props: {
          type: "boolean",
          default: true
        }
      },
      additionalProperties: false
    }],
    messages: {
      selfAssignment: "'{{name}}' is assigned to itself."
    }
  },
  create(t4) {
    const e = t4.getSourceCode(), [{
      props: r = true
    } = {}] = t4.options;
    function s(n) {
      t4.report({
        node: n,
        messageId: "selfAssignment",
        data: {
          name: e.getText(n).replace(lj, "")
        }
      });
    }
    return {
      AssignmentExpression(n) {
        n.operator === "=" && ks(n.left, n.right, r, s);
      }
    };
  }
};
dh.meta;
dh.create;
var gh = {
  meta: {
    type: "problem",
    docs: {
      description: "disallow comparisons where both sides are exactly the same",
      category: "Best Practices",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-self-compare"
    },
    schema: [],
    messages: {
      comparingToSelf: "Comparing to itself is potentially pointless."
    }
  },
  create(t4) {
    const e = t4.getSourceCode();
    function r(s, n) {
      const a = e.getTokens(s), o = e.getTokens(n);
      return a.length === o.length && a.every((l, i) => l.type === o[i].type && l.value === o[i].value);
    }
    return {
      BinaryExpression(s) {
        (/* @__PURE__ */ new Set(["===", "==", "!==", "!=", ">", "<", ">=", "<="])).has(s.operator) && r(s.left, s.right) && t4.report({
          node: s,
          messageId: "comparingToSelf"
        });
      }
    };
  }
};
gh.meta;
gh.create;
var uj = {
  allowInParentheses: true
};
var yh = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow comma operators",
      category: "Best Practices",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-sequences"
    },
    schema: [{
      properties: {
        allowInParentheses: {
          type: "boolean",
          default: true
        }
      },
      additionalProperties: false
    }],
    messages: {
      unexpectedCommaExpression: "Unexpected use of comma operator."
    }
  },
  create(t4) {
    const e = Object.assign({}, uj, t4.options[0]), r = t4.getSourceCode(), s = {
      DoWhileStatement: "test",
      IfStatement: "test",
      SwitchStatement: "discriminant",
      WhileStatement: "test",
      WithStatement: "object",
      ArrowFunctionExpression: "body"
    };
    function n(l) {
      return l.parent && s[l.parent.type] && l === l.parent[s[l.parent.type]];
    }
    function a(l) {
      return E.isParenthesised(r, l);
    }
    function o(l) {
      const i = r.getTokenBefore(l, 1), u = r.getTokenAfter(l, 1);
      return a(l) && i && u && E.isOpeningParenToken(i) && i.range[1] <= l.range[0] && E.isClosingParenToken(u) && u.range[0] >= l.range[1];
    }
    return {
      SequenceExpression(l) {
        if (l.parent.type === "ForStatement" && (l === l.parent.init || l === l.parent.update))
          return;
        if (e.allowInParentheses) {
          if (n(l)) {
            if (o(l))
              return;
          } else if (a(l))
            return;
        }
        const i = r.getTokenAfter(l.expressions[0], E.isCommaToken);
        t4.report({
          node: l,
          loc: i.loc,
          messageId: "unexpectedCommaExpression"
        });
      }
    };
  }
};
yh.meta;
yh.create;
var {
  findVariable: cj
} = Vt.default;
function pj(t4, e) {
  const r = cj(e, t4);
  return r !== null && r.scope.type === "global" && r.defs.length === 0;
}
function Sa(t4, e, r, s, n) {
  const a = t4.parent;
  return a.type === "CallExpression" && a.arguments[n] === t4 && E.isSpecificMemberAccess(a.callee, r, s) && pj(E.skipChainExpression(a.callee).object, e);
}
function fj(t4, e) {
  if (Sa(t4, e, "Object", "defineProperty", 2) || Sa(t4, e, "Reflect", "defineProperty", 2))
    return true;
  const r = t4.parent;
  if (r.type === "Property" && r.value === t4) {
    const s = r.parent;
    if (s.type === "ObjectExpression" && (Sa(s, e, "Object", "create", 1) || Sa(s, e, "Object", "defineProperties", 1)))
      return true;
  }
  return false;
}
function hj(t4, e) {
  const r = t4.parent;
  return !!(r.kind === "set" && r.value === t4 || r.type === "Property" && r.value === t4 && E.getStaticPropertyName(r) === "set" && r.parent.type === "ObjectExpression" && fj(r.parent, e));
}
function mj(t4) {
  const e = t4.upper;
  return e.type === "function-expression-name" ? e.upper : e;
}
var xh = {
  meta: {
    type: "problem",
    docs: {
      description: "disallow returning values from setters",
      category: "Possible Errors",
      recommended: true,
      url: "https://eslint.org/docs/rules/no-setter-return"
    },
    schema: [],
    messages: {
      returnsValue: "Setter cannot return a value."
    }
  },
  create(t4) {
    let e = null;
    function r(a) {
      const o = mj(t4.getScope());
      e = {
        upper: e,
        isSetter: hj(a, o)
      };
    }
    function s() {
      e = e.upper;
    }
    function n(a) {
      t4.report({
        node: a,
        messageId: "returnsValue"
      });
    }
    return {
      FunctionDeclaration: r,
      FunctionExpression: r,
      ArrowFunctionExpression(a) {
        r(a), e.isSetter && a.expression && n(a.body);
      },
      "FunctionDeclaration:exit": s,
      "FunctionExpression:exit": s,
      "ArrowFunctionExpression:exit": s,
      ReturnStatement(a) {
        e && e.isSetter && a.argument && n(a);
      }
    };
  }
};
xh.meta;
xh.create;
function dj(t4) {
  return t4.name === "undefined" && t4.references.every((e) => !e.isWrite()) && t4.defs.every((e) => e.node.type === "VariableDeclarator" && e.node.init === null);
}
var vh = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow identifiers from shadowing restricted names",
      category: "Variables",
      recommended: true,
      url: "https://eslint.org/docs/rules/no-shadow-restricted-names"
    },
    schema: [],
    messages: {
      shadowingRestrictedName: "Shadowing of global property '{{name}}'."
    }
  },
  create(t4) {
    const e = /* @__PURE__ */ new Set(["undefined", "NaN", "Infinity", "arguments", "eval"]);
    return {
      "VariableDeclaration, :function, CatchClause"(r) {
        for (const s of t4.getDeclaredVariables(r))
          s.defs.length > 0 && e.has(s.name) && !dj(s) && t4.report({
            node: s.defs[0].name,
            messageId: "shadowingRestrictedName",
            data: {
              name: s.name
            }
          });
      }
    };
  }
};
vh.meta;
vh.create;
var Eh = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow variable declarations from shadowing variables declared in the outer scope",
      category: "Variables",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-shadow"
    },
    schema: [{
      type: "object",
      properties: {
        builtinGlobals: {
          type: "boolean",
          default: false
        },
        hoist: {
          enum: ["all", "functions", "never"],
          default: "functions"
        },
        allow: {
          type: "array",
          items: {
            type: "string"
          }
        }
      },
      additionalProperties: false
    }],
    messages: {
      noShadow: "'{{name}}' is already declared in the upper scope on line {{shadowedLine}} column {{shadowedColumn}}.",
      noShadowGlobal: "'{{name}}' is already a global variable."
    }
  },
  create(t4) {
    const e = {
      builtinGlobals: t4.options[0] && t4.options[0].builtinGlobals,
      hoist: t4.options[0] && t4.options[0].hoist || "functions",
      allow: t4.options[0] && t4.options[0].allow || []
    };
    function r(u) {
      return e.allow.indexOf(u.name) !== -1;
    }
    function s(u) {
      const c = u.scope.block;
      return c.type === "ClassDeclaration" && c.id === u.identifiers[0];
    }
    function n(u, c) {
      const f = c.scope, h = c.defs[0], p = h && h.parent && h.parent.range, m = u.scope, d = u.defs[0], g = d && d.name.range;
      return p && g && p[0] < g[0] && g[1] < p[1] && (d.type === "FunctionName" && d.node.type === "FunctionExpression" || d.node.type === "ClassExpression") && f === m.upper;
    }
    function a(u) {
      const c = u.defs[0];
      return c && c.name.range;
    }
    function o(u) {
      const c = u.identifiers[0];
      let f;
      return c ? f = {
        global: false,
        line: c.loc.start.line,
        column: c.loc.start.column + 1
      } : f = {
        global: true
      }, f;
    }
    function l(u, c) {
      const f = c.defs[0], h = a(u), p = a(c);
      return h && p && h[1] < p[0] && (e.hoist !== "functions" || !f || f.node.type !== "FunctionDeclaration");
    }
    function i(u) {
      const c = u.variables;
      for (let f = 0; f < c.length; ++f) {
        const h = c[f];
        if (h.identifiers.length === 0 || s(h) || r(h))
          continue;
        const p = E.getVariableByName(u.upper, h.name);
        if (p && (p.identifiers.length > 0 || e.builtinGlobals && "writeable" in p) && !n(h, p) && !(e.hoist !== "all" && l(h, p))) {
          const m = o(p), d = m.global ? "noShadowGlobal" : "noShadow", g = {
            name: h.name
          };
          m.global || (g.shadowedLine = m.line, g.shadowedColumn = m.column), t4.report({
            node: h.identifiers[0],
            messageId: d,
            data: g
          });
        }
      }
    }
    return {
      "Program:exit"() {
        const c = t4.getScope().childScopes.slice();
        for (; c.length; ) {
          const f = c.pop();
          c.push(...f.childScopes), i(f);
        }
      }
    };
  }
};
Eh.meta;
Eh.create;
var bh = {
  meta: {
    type: "layout",
    docs: {
      description: "disallow spacing between function identifiers and their applications (deprecated)",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-spaced-func"
    },
    deprecated: true,
    replacedBy: ["func-call-spacing"],
    fixable: "whitespace",
    schema: [],
    messages: {
      noSpacedFunction: "Unexpected space between function name and paren."
    }
  },
  create(t4) {
    const e = t4.getSourceCode();
    function r(s) {
      const n = e.getLastToken(s.callee);
      let a = n, o = e.getTokenAfter(n);
      for (; o && o.range[1] < s.range[1] && o.value !== "("; )
        a = o, o = e.getTokenAfter(o);
      o && o.range[1] < s.range[1] && e.isSpaceBetweenTokens(a, o) && t4.report({
        node: s,
        loc: n.loc.start,
        messageId: "noSpacedFunction",
        fix(l) {
          return l.removeRange([a.range[1], o.range[0]]);
        }
      });
    }
    return {
      CallExpression: r,
      NewExpression: r
    };
  }
};
bh.meta;
bh.create;
var Ch = {
  meta: {
    type: "problem",
    docs: {
      description: "disallow sparse arrays",
      category: "Possible Errors",
      recommended: true,
      url: "https://eslint.org/docs/rules/no-sparse-arrays"
    },
    schema: [],
    messages: {
      unexpectedSparseArray: "Unexpected comma in middle of array."
    }
  },
  create(t4) {
    return {
      ArrayExpression(e) {
        e.elements.indexOf(null) > -1 && t4.report({
          node: e,
          messageId: "unexpectedSparseArray"
        });
      }
    };
  }
};
Ch.meta;
Ch.create;
var Sh = {
  meta: {
    deprecated: true,
    replacedBy: [],
    type: "suggestion",
    docs: {
      description: "disallow synchronous methods",
      category: "Node.js and CommonJS",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-sync"
    },
    schema: [{
      type: "object",
      properties: {
        allowAtRootLevel: {
          type: "boolean",
          default: false
        }
      },
      additionalProperties: false
    }],
    messages: {
      noSync: "Unexpected sync method: '{{propertyName}}'."
    }
  },
  create(t4) {
    return {
      [t4.options[0] && t4.options[0].allowAtRootLevel ? ":function MemberExpression[property.name=/.*Sync$/]" : "MemberExpression[property.name=/.*Sync$/]"](r) {
        t4.report({
          node: r,
          messageId: "noSync",
          data: {
            propertyName: r.property.name
          }
        });
      }
    };
  }
};
Sh.meta;
Sh.create;
var gj = /\t+/gu;
var yj = /\S/u;
var Ah = {
  meta: {
    type: "layout",
    docs: {
      description: "disallow all tabs",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-tabs"
    },
    schema: [{
      type: "object",
      properties: {
        allowIndentationTabs: {
          type: "boolean",
          default: false
        }
      },
      additionalProperties: false
    }],
    messages: {
      unexpectedTab: "Unexpected tab character."
    }
  },
  create(t4) {
    const e = t4.getSourceCode(), r = t4.options && t4.options[0] && t4.options[0].allowIndentationTabs;
    return {
      Program(s) {
        e.getLines().forEach((n, a) => {
          let o;
          for (; (o = gj.exec(n)) !== null; )
            r && !yj.test(n.slice(0, o.index)) || t4.report({
              node: s,
              loc: {
                start: {
                  line: a + 1,
                  column: o.index
                },
                end: {
                  line: a + 1,
                  column: o.index + o[0].length
                }
              },
              messageId: "unexpectedTab"
            });
        });
      }
    };
  }
};
Ah.meta;
Ah.create;
var Dh = {
  meta: {
    type: "problem",
    docs: {
      description: "disallow template literal placeholder syntax in regular strings",
      category: "Possible Errors",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-template-curly-in-string"
    },
    schema: [],
    messages: {
      unexpectedTemplateExpression: "Unexpected template string expression."
    }
  },
  create(t4) {
    return {
      Literal(e) {
        typeof e.value == "string" && /\$\{[^}]+\}/u.test(e.value) && t4.report({
          node: e,
          messageId: "unexpectedTemplateExpression"
        });
      }
    };
  }
};
Dh.meta;
Dh.create;
var wh = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow ternary operators",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-ternary"
    },
    schema: [],
    messages: {
      noTernaryOperator: "Ternary operator used."
    }
  },
  create(t4) {
    return {
      ConditionalExpression(e) {
        t4.report({
          node: e,
          messageId: "noTernaryOperator"
        });
      }
    };
  }
};
wh.meta;
wh.create;
function xj(t4) {
  return t4.type === "FunctionExpression" && t4.parent.type === "MethodDefinition" && t4.parent.kind === "constructor";
}
var kh = {
  meta: {
    type: "problem",
    docs: {
      description: "disallow `this`/`super` before calling `super()` in constructors",
      category: "ECMAScript 6",
      recommended: true,
      url: "https://eslint.org/docs/rules/no-this-before-super"
    },
    schema: [],
    messages: {
      noBeforeSuper: "'{{kind}}' is not allowed before 'super()'."
    }
  },
  create(t4) {
    let e = null, r = /* @__PURE__ */ Object.create(null);
    function s(i) {
      return !i.reachable || r[i.id].superCalled;
    }
    function n() {
      return !!(e && e.isConstructor && e.hasExtends);
    }
    function a() {
      return n() && !e.codePath.currentSegments.every(s);
    }
    function o(i) {
      const u = e.codePath.currentSegments;
      for (let c = 0; c < u.length; ++c) {
        const f = u[c];
        f.reachable && r[f.id].invalidNodes.push(i);
      }
    }
    function l() {
      const i = e.codePath.currentSegments;
      for (let u = 0; u < i.length; ++u) {
        const c = i[u];
        c.reachable && (r[c.id].superCalled = true);
      }
    }
    return {
      onCodePathStart(i, u) {
        if (xj(u)) {
          const c = u.parent.parent.parent;
          e = {
            upper: e,
            isConstructor: true,
            hasExtends: !!(c.superClass && !E.isNullOrUndefined(c.superClass)),
            codePath: i
          };
        } else
          e = {
            upper: e,
            isConstructor: false,
            hasExtends: false,
            codePath: i
          };
      },
      onCodePathEnd(i) {
        const u = e.hasExtends;
        e = e.upper, u && i.traverseSegments((c, f) => {
          const h = r[c.id];
          for (let p = 0; p < h.invalidNodes.length; ++p) {
            const m = h.invalidNodes[p];
            t4.report({
              messageId: "noBeforeSuper",
              node: m,
              data: {
                kind: m.type === "Super" ? "super" : "this"
              }
            });
          }
          h.superCalled && f.skip();
        });
      },
      onCodePathSegmentStart(i) {
        n() && (r[i.id] = {
          superCalled: i.prevSegments.length > 0 && i.prevSegments.every(s),
          invalidNodes: []
        });
      },
      onCodePathSegmentLoop(i, u) {
        n() && e.codePath.traverseSegments({
          first: u,
          last: i
        }, (c, f) => {
          const h = r[c.id];
          h.superCalled ? (h.invalidNodes = [], f.skip()) : c.prevSegments.length > 0 && c.prevSegments.every(s) && (h.superCalled = true, h.invalidNodes = []);
        });
      },
      ThisExpression(i) {
        a() && o(i);
      },
      Super(i) {
        !E.isCallee(i) && a() && o(i);
      },
      "CallExpression:exit"(i) {
        i.callee.type === "Super" && a() && l();
      },
      "Program:exit"() {
        r = /* @__PURE__ */ Object.create(null);
      }
    };
  }
};
kh.meta;
kh.create;
var Th = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow throwing literals as exceptions",
      category: "Best Practices",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-throw-literal"
    },
    schema: [],
    messages: {
      object: "Expected an error object to be thrown.",
      undef: "Do not throw undefined."
    }
  },
  create(t4) {
    return {
      ThrowStatement(e) {
        E.couldBeError(e.argument) ? e.argument.type === "Identifier" && e.argument.name === "undefined" && t4.report({
          node: e,
          messageId: "undef"
        }) : t4.report({
          node: e,
          messageId: "object"
        });
      }
    };
  }
};
Th.meta;
Th.create;
var Fh = {
  meta: {
    type: "layout",
    docs: {
      description: "disallow trailing whitespace at the end of lines",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-trailing-spaces"
    },
    fixable: "whitespace",
    schema: [{
      type: "object",
      properties: {
        skipBlankLines: {
          type: "boolean",
          default: false
        },
        ignoreComments: {
          type: "boolean",
          default: false
        }
      },
      additionalProperties: false
    }],
    messages: {
      trailingSpace: "Trailing spaces not allowed."
    }
  },
  create(t4) {
    const e = t4.getSourceCode(), r = t4.options[0] || {}, s = r.skipBlankLines || false, n = r.ignoreComments || false;
    function a(l, i, u) {
      t4.report({
        node: l,
        loc: i,
        messageId: "trailingSpace",
        fix(c) {
          return c.removeRange(u);
        }
      });
    }
    function o(l) {
      const i = /* @__PURE__ */ new Set();
      return l.forEach((u) => {
        const c = u.type === "Block" ? u.loc.end.line - 1 : u.loc.end.line;
        for (let f = u.loc.start.line; f <= c; f++)
          i.add(f);
      }), i;
    }
    return {
      Program: function(l) {
        const i = new RegExp("[ 	  -​　]+$", "u"), u = new RegExp("^[ 	  -​　]*$", "u"), c = e.lines, f = e.getText().match(E.createGlobalLinebreakMatcher()), h = e.getAllComments(), p = o(h);
        let m = 0, d = [];
        for (let g = 0, y = c.length; g < y; g++) {
          const x = g + 1, A = f && f[g] ? f[g].length : 1, b = c[g].length + A, v = i.exec(c[g]);
          if (v) {
            const C = {
              start: {
                line: x,
                column: v.index
              },
              end: {
                line: x,
                column: b - A
              }
            }, T = m + C.start.column, w = m + C.end.column, B = e.getNodeByRangeIndex(T);
            if (B && B.type === "TemplateElement" && T > B.parent.range[0] && w < B.parent.range[1]) {
              m += b;
              continue;
            }
            if (s && u.test(c[g])) {
              m += b;
              continue;
            }
            d = [T, w], (!n || !p.has(x)) && a(l, C, d);
          }
          m += b;
        }
      }
    };
  }
};
Fh.meta;
Fh.create;
var Ph = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow initializing variables to `undefined`",
      category: "Variables",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-undef-init"
    },
    schema: [],
    fixable: "code",
    messages: {
      unnecessaryUndefinedInit: "It's not necessary to initialize '{{name}}' to undefined."
    }
  },
  create(t4) {
    const e = t4.getSourceCode();
    return {
      VariableDeclarator(r) {
        const s = e.getText(r.id), n = r.init && r.init.name, a = t4.getScope(), o = E.getVariableByName(a, "undefined"), l = o && o.defs.length > 0, i = e.getLastToken(r);
        n === "undefined" && r.parent.kind !== "const" && !l && t4.report({
          node: r,
          messageId: "unnecessaryUndefinedInit",
          data: {
            name: s
          },
          fix(u) {
            return r.parent.kind === "var" || r.id.type === "ArrayPattern" || r.id.type === "ObjectPattern" || e.commentsExistBetween(r.id, i) ? null : u.removeRange([r.id.range[1], r.range[1]]);
          }
        });
      }
    };
  }
};
Ph.meta;
Ph.create;
function vj(t4) {
  const e = t4.parent;
  return e.type === "UnaryExpression" && e.operator === "typeof";
}
var Ih = {
  meta: {
    type: "problem",
    docs: {
      description: "disallow the use of undeclared variables unless mentioned in `/*global */` comments",
      category: "Variables",
      recommended: true,
      url: "https://eslint.org/docs/rules/no-undef"
    },
    schema: [{
      type: "object",
      properties: {
        typeof: {
          type: "boolean",
          default: false
        }
      },
      additionalProperties: false
    }],
    messages: {
      undef: "'{{name}}' is not defined."
    }
  },
  create(t4) {
    const e = t4.options[0], r = e && e.typeof === true || false;
    return {
      "Program:exit"() {
        t4.getScope().through.forEach((n) => {
          const a = n.identifier;
          !r && vj(a) || t4.report({
            node: a,
            messageId: "undef",
            data: a
          });
        });
      }
    };
  }
};
Ih.meta;
Ih.create;
var _h = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow the use of `undefined` as an identifier",
      category: "Variables",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-undefined"
    },
    schema: [],
    messages: {
      unexpectedUndefined: "Unexpected use of undefined."
    }
  },
  create(t4) {
    function e(s) {
      t4.report({
        node: s,
        messageId: "unexpectedUndefined"
      });
    }
    function r(s) {
      const n = s.set.get("undefined");
      if (!n)
        return;
      const a = n.references, o = n.defs;
      a.filter((l) => !l.init).forEach((l) => e(l.identifier)), o.forEach((l) => e(l.name));
    }
    return {
      "Program:exit"() {
        const n = [t4.getScope()];
        for (; n.length; ) {
          const a = n.pop();
          n.push(...a.childScopes), r(a);
        }
      }
    };
  }
};
_h.meta;
_h.create;
var Bh = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow dangling underscores in identifiers",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-underscore-dangle"
    },
    schema: [{
      type: "object",
      properties: {
        allow: {
          type: "array",
          items: {
            type: "string"
          }
        },
        allowAfterThis: {
          type: "boolean",
          default: false
        },
        allowAfterSuper: {
          type: "boolean",
          default: false
        },
        allowAfterThisConstructor: {
          type: "boolean",
          default: false
        },
        enforceInMethodNames: {
          type: "boolean",
          default: false
        },
        allowFunctionParams: {
          type: "boolean",
          default: true
        }
      },
      additionalProperties: false
    }],
    messages: {
      unexpectedUnderscore: "Unexpected dangling '_' in '{{identifier}}'."
    }
  },
  create(t4) {
    const e = t4.options[0] || {}, r = e.allow ? e.allow : [], s = typeof e.allowAfterThis < "u" ? e.allowAfterThis : false, n = typeof e.allowAfterSuper < "u" ? e.allowAfterSuper : false, a = typeof e.allowAfterThisConstructor < "u" ? e.allowAfterThisConstructor : false, o = typeof e.enforceInMethodNames < "u" ? e.enforceInMethodNames : false, l = typeof e.allowFunctionParams < "u" ? e.allowFunctionParams : true;
    function i(g) {
      return r.some((y) => y === g);
    }
    function u(g) {
      const y = g.length;
      return g !== "_" && (g[0] === "_" || g[y - 1] === "_");
    }
    function c(g) {
      return g === "__proto__";
    }
    function f(g) {
      return g === "_";
    }
    function h(g) {
      return g.object.type === "MemberExpression" && g.object.property.name === "constructor" && g.object.object.type === "ThisExpression";
    }
    function p(g) {
      l || g.params.forEach((y) => {
        const {
          type: x
        } = y;
        let A;
        if (x === "RestElement" ? A = y.argument : x === "AssignmentPattern" ? A = y.left : A = y, A.type === "Identifier") {
          const b = A.name;
          u(b) && !i(b) && t4.report({
            node: y,
            messageId: "unexpectedUnderscore",
            data: {
              identifier: b
            }
          });
        }
      });
    }
    function m(g) {
      if (g.type === "FunctionDeclaration" && g.id) {
        const y = g.id.name;
        typeof y < "u" && u(y) && !i(y) && t4.report({
          node: g,
          messageId: "unexpectedUnderscore",
          data: {
            identifier: y
          }
        });
      }
      p(g);
    }
    function d(g) {
      const y = g.key.name, x = g.type === "MethodDefinition" || g.type === "Property" && g.method;
      typeof y < "u" && o && x && u(y) && !i(y) && t4.report({
        node: g,
        messageId: "unexpectedUnderscore",
        data: {
          identifier: y
        }
      });
    }
    return {
      FunctionDeclaration: m,
      VariableDeclarator: function(g) {
        const y = g.id.name;
        typeof y < "u" && u(y) && !f(y) && !i(y) && t4.report({
          node: g,
          messageId: "unexpectedUnderscore",
          data: {
            identifier: y
          }
        });
      },
      MemberExpression: function(g) {
        const y = g.property.name, x = g.object.type === "ThisExpression", A = g.object.type === "Super", b = h(g);
        typeof y < "u" && u(y) && !(x && s) && !(A && n) && !(b && a) && !c(y) && !i(y) && t4.report({
          node: g,
          messageId: "unexpectedUnderscore",
          data: {
            identifier: y
          }
        });
      },
      MethodDefinition: d,
      Property: d,
      FunctionExpression: m,
      ArrowFunctionExpression: m
    };
  }
};
Bh.meta;
Bh.create;
var Oh = {
  meta: {
    type: "problem",
    docs: {
      description: "disallow confusing multiline expressions",
      category: "Possible Errors",
      recommended: true,
      url: "https://eslint.org/docs/rules/no-unexpected-multiline"
    },
    schema: [],
    messages: {
      function: "Unexpected newline between function and ( of function call.",
      property: "Unexpected newline between object and [ of property access.",
      taggedTemplate: "Unexpected newline between template tag and template literal.",
      division: "Unexpected newline between numerator and division operator."
    }
  },
  create(t4) {
    const e = t4.getSourceCode();
    function r(s, n) {
      const a = e.getTokenAfter(s, E.isNotClosingParenToken), o = e.getTokenBefore(a);
      a.loc.start.line !== o.loc.end.line && t4.report({
        node: s,
        loc: a.loc,
        messageId: n
      });
    }
    return {
      MemberExpression(s) {
        !s.computed || s.optional || r(s.object, "property");
      },
      TaggedTemplateExpression(s) {
        const {
          quasi: n
        } = s;
        e.getTokenBefore(n).loc.end.line !== n.loc.start.line && t4.report({
          node: s,
          loc: {
            start: n.loc.start,
            end: {
              line: n.loc.start.line,
              column: n.loc.start.column + 1
            }
          },
          messageId: "taggedTemplate"
        });
      },
      CallExpression(s) {
        s.arguments.length === 0 || s.optional || r(s.callee, "function");
      },
      "BinaryExpression[operator='/'] > BinaryExpression[operator='/'].left"(s) {
        const n = e.getTokenAfter(s, (o) => o.value === "/"), a = e.getTokenAfter(n);
        a.type === "Identifier" && /^[gimsuy]+$/u.test(a.value) && n.range[1] === a.range[0] && r(s.left, "division");
      }
    };
  }
};
Oh.meta;
Oh.create;
var Ej = /(?:(?:Call|Class|Function|Member|New|Yield)Expression|Statement|Declaration)$/u;
var bj = /^(?:DoWhile|For|While)Statement$/u;
var Cj = /^(?:BinaryExpression|ConditionalExpression)$/u;
var Sj = /^(?:ArrowFunction|Class|Function)Expression$/u;
var Aj = /^(?:Call|Member|New|TaggedTemplate|Yield)Expression$/u;
function Dj(t4) {
  if (t4.init) {
    const e = t4.resolved && t4.resolved.defs[0];
    if (!e || e.type !== "Variable" || e.parent.kind !== "var")
      return false;
  }
  return t4.isWrite();
}
function wj(t4) {
  return !t4.modified;
}
function kj(t4) {
  return !(t4.modified || t4.group);
}
function Aa(t4, e) {
  const r = t4.range, s = e.identifier.range;
  return r[0] <= s[0] && s[1] <= r[1];
}
var Tj = {
  WhileStatement: Aa,
  DoWhileStatement: Aa,
  ForStatement(t4, e) {
    return Aa(t4, e) && !(t4.init && Aa(t4.init, e));
  }
};
function Fj(t4) {
  let e = t4.identifier;
  for (; e; ) {
    if (e.type === "FunctionDeclaration")
      return e.id ? e : null;
    e = e.parent;
  }
  return null;
}
function Pj(t4, e) {
  for (let r = 0; r < t4.length; ++r) {
    const s = t4[r];
    for (let n = 0; !s.modified && n < e.length; ++n) {
      const a = e[n];
      let o, l;
      const i = s.isInLoop(a) || !!((o = Fj(a)) && (l = E.getVariableByName(a.from.upper, o.id.name)) && l.references.some(s.isInLoop));
      s.modified = i;
    }
  }
}
var Lh = {
  meta: {
    type: "problem",
    docs: {
      description: "disallow unmodified loop conditions",
      category: "Best Practices",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-unmodified-loop-condition"
    },
    schema: [],
    messages: {
      loopConditionNotModified: "'{{name}}' is not modified in this loop."
    }
  },
  create(t4) {
    const e = t4.getSourceCode();
    let r = null;
    function s(u) {
      const c = u.reference.identifier;
      t4.report({
        node: c,
        messageId: "loopConditionNotModified",
        data: c
      });
    }
    function n(u) {
      for (let c = 0; c < u.length; ++c) {
        const f = u[c];
        if (f.group) {
          let h = r.get(f.group);
          h || (h = [], r.set(f.group, h)), h.push(f);
        }
      }
    }
    function a(u) {
      u.every(wj) && u.forEach(s);
    }
    function o(u) {
      let c = false;
      return Pl.traverser.traverse(u, {
        visitorKeys: e.visitorKeys,
        enter(f) {
          Aj.test(f.type) ? (c = true, this.break()) : Sj.test(f.type) && this.skip();
        }
      }), c;
    }
    function l(u) {
      if (u.init)
        return null;
      let c = null, f = u.identifier, h = f.parent;
      for (; h; ) {
        if (Ej.test(h.type)) {
          if (bj.test(h.type) && h.test === f)
            return {
              reference: u,
              group: c,
              isInLoop: Tj[h.type].bind(null, h),
              modified: false
            };
          break;
        }
        if (Cj.test(h.type)) {
          if (o(h))
            break;
          c = h;
        }
        f = h, h = h.parent;
      }
      return null;
    }
    function i(u) {
      const c = u.references.map(l).filter(Boolean);
      if (c.length === 0)
        return;
      n(c);
      const f = u.references.filter(Dj);
      f.length > 0 && Pj(c, f), c.filter(kj).forEach(s);
    }
    return {
      "Program:exit"() {
        const u = [t4.getScope()];
        r = /* @__PURE__ */ new Map();
        let c;
        for (; c = u.pop(); )
          u.push(...c.childScopes), c.variables.forEach(i);
        r.forEach(a), r = null;
      }
    };
  }
};
Lh.meta;
Lh.create;
var Ij = /* @__PURE__ */ new Set(["==", "===", "!=", "!==", ">", ">=", "<", "<=", "in", "instanceof"]);
var Ky = {
  "==": "!=",
  "!=": "==",
  "===": "!==",
  "!==": "==="
};
var _j = E.getPrecedence({
  type: "LogicalExpression",
  operator: "||"
});
var Rh = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow ternary operators when simpler alternatives exist",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-unneeded-ternary"
    },
    schema: [{
      type: "object",
      properties: {
        defaultAssignment: {
          type: "boolean",
          default: true
        }
      },
      additionalProperties: false
    }],
    fixable: "code",
    messages: {
      unnecessaryConditionalExpression: "Unnecessary use of boolean literals in conditional expression.",
      unnecessaryConditionalAssignment: "Unnecessary use of conditional expression for default assignment."
    }
  },
  create(t4) {
    const r = (t4.options[0] || {}).defaultAssignment !== false, s = t4.getSourceCode();
    function n(i) {
      return i.type === "Literal" && typeof i.value == "boolean";
    }
    function a(i) {
      if (i.type === "BinaryExpression" && Object.prototype.hasOwnProperty.call(Ky, i.operator)) {
        const u = s.getFirstTokenBetween(i.left, i.right, (f) => f.value === i.operator), c = s.getText();
        return c.slice(i.range[0], u.range[0]) + Ky[i.operator] + c.slice(u.range[1], i.range[1]);
      }
      return E.getPrecedence(i) < E.getPrecedence({
        type: "UnaryExpression"
      }) ? `!(${E.getParenthesisedText(s, i)})` : `!${E.getParenthesisedText(s, i)}`;
    }
    function o(i) {
      return i.type === "BinaryExpression" && Ij.has(i.operator) || i.type === "UnaryExpression" && i.operator === "!";
    }
    function l(i) {
      return i.test.type === "Identifier" && i.consequent.type === "Identifier" && i.test.name === i.consequent.name;
    }
    return {
      ConditionalExpression(i) {
        n(i.alternate) && n(i.consequent) ? t4.report({
          node: i,
          messageId: "unnecessaryConditionalExpression",
          fix(u) {
            return i.consequent.value === i.alternate.value ? i.test.type === "Identifier" ? u.replaceText(i, i.consequent.value.toString()) : null : i.alternate.value ? u.replaceText(i, a(i.test)) : u.replaceText(i, o(i.test) ? E.getParenthesisedText(s, i.test) : `!${a(i.test)}`);
          }
        }) : !r && l(i) && t4.report({
          node: i,
          messageId: "unnecessaryConditionalAssignment",
          fix: (u) => {
            const f = (E.getPrecedence(i.alternate) < _j || E.isCoalesceExpression(i.alternate)) && !E.isParenthesised(s, i.alternate) ? `(${s.getText(i.alternate)})` : E.getParenthesisedText(s, i.alternate), h = E.getParenthesisedText(s, i.test);
            return u.replaceText(i, `${h} || ${f}`);
          }
        });
      }
    };
  }
};
Rh.meta;
Rh.create;
var Jy = ["WhileStatement", "DoWhileStatement", "ForStatement", "ForInStatement", "ForOfStatement"];
function Bj(t4) {
  const e = t4.parent;
  if (e)
    switch (e.type) {
      case "WhileStatement":
        return t4 === e.test;
      case "DoWhileStatement":
        return t4 === e.body;
      case "ForStatement":
        return t4 === (e.update || e.test || e.body);
      case "ForInStatement":
      case "ForOfStatement":
        return t4 === e.left;
    }
  return false;
}
function Oj(t4, e) {
  return t4.filter((r) => !e.includes(r));
}
var Nh = {
  meta: {
    type: "problem",
    docs: {
      description: "disallow loops with a body that allows only one iteration",
      category: "Possible Errors",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-unreachable-loop"
    },
    schema: [{
      type: "object",
      properties: {
        ignore: {
          type: "array",
          items: {
            enum: Jy
          },
          uniqueItems: true
        }
      },
      additionalProperties: false
    }],
    messages: {
      invalid: "Invalid loop. Its body allows only one iteration."
    }
  },
  create(t4) {
    const e = t4.options[0] && t4.options[0].ignore || [], r = Oj(Jy, e), s = r.join(","), n = /* @__PURE__ */ new Map(), a = /* @__PURE__ */ new Set();
    let o = null;
    return {
      onCodePathStart(l) {
        o = l;
      },
      onCodePathEnd() {
        o = o.upper;
      },
      [s](l) {
        o.currentSegments.some((i) => i.reachable) && a.add(l);
      },
      onCodePathSegmentStart(l, i) {
        if (Bj(i)) {
          const u = i.parent;
          n.set(l, u);
        }
      },
      onCodePathSegmentLoop(l, i, u) {
        const c = n.get(i);
        (u === c || u.type === "ContinueStatement") && a.delete(c);
      },
      "Program:exit"() {
        a.forEach((l) => t4.report({
          node: l,
          messageId: "invalid"
        }));
      }
    };
  }
};
Nh.meta;
Nh.create;
function Lj(t4) {
  return !!t4.init;
}
function Rj(t4) {
  return !t4.reachable;
}
var Nj = class {
  constructor(e) {
    this.sourceCode = e, this.startNode = null, this.endNode = null;
  }
  get location() {
    return {
      start: this.startNode.loc.start,
      end: this.endNode.loc.end
    };
  }
  get isEmpty() {
    return !(this.startNode && this.endNode);
  }
  contains(e) {
    return e.range[0] >= this.startNode.range[0] && e.range[1] <= this.endNode.range[1];
  }
  isConsecutive(e) {
    return this.contains(this.sourceCode.getTokenBefore(e));
  }
  merge(e) {
    this.endNode = e;
  }
  reset(e) {
    this.startNode = this.endNode = e;
  }
};
var jh = {
  meta: {
    type: "problem",
    docs: {
      description: "disallow unreachable code after `return`, `throw`, `continue`, and `break` statements",
      category: "Possible Errors",
      recommended: true,
      url: "https://eslint.org/docs/rules/no-unreachable"
    },
    schema: [],
    messages: {
      unreachableCode: "Unreachable code."
    }
  },
  create(t4) {
    let e = null;
    const r = new Nj(t4.getSourceCode());
    function s(n) {
      let a = null;
      if (n && e.currentSegments.every(Rj)) {
        if (r.isEmpty) {
          r.reset(n);
          return;
        }
        if (r.contains(n))
          return;
        if (r.isConsecutive(n)) {
          r.merge(n);
          return;
        }
        a = n;
      }
      r.isEmpty || t4.report({
        messageId: "unreachableCode",
        loc: r.location,
        node: r.startNode
      }), r.reset(a);
    }
    return {
      onCodePathStart(n) {
        e = n;
      },
      onCodePathEnd() {
        e = e.upper;
      },
      BlockStatement: s,
      BreakStatement: s,
      ClassDeclaration: s,
      ContinueStatement: s,
      DebuggerStatement: s,
      DoWhileStatement: s,
      ExpressionStatement: s,
      ForInStatement: s,
      ForOfStatement: s,
      ForStatement: s,
      IfStatement: s,
      ImportDeclaration: s,
      LabeledStatement: s,
      ReturnStatement: s,
      SwitchStatement: s,
      ThrowStatement: s,
      TryStatement: s,
      VariableDeclaration(n) {
        (n.kind !== "var" || n.declarations.some(Lj)) && s(n);
      },
      WhileStatement: s,
      WithStatement: s,
      ExportNamedDeclaration: s,
      ExportDefaultDeclaration: s,
      ExportAllDeclaration: s,
      "Program:exit"() {
        s();
      }
    };
  }
};
jh.meta;
jh.create;
var jj = /^(?:Program|(?:Function|Class)(?:Declaration|Expression)|ArrowFunctionExpression)$/u;
var Mj = /^(?:Program|(?:Function|Class)(?:Declaration|Expression)|ArrowFunctionExpression|DoWhileStatement|WhileStatement|ForOfStatement|ForInStatement|ForStatement|SwitchStatement)$/u;
var $j = /^(?:Program|(?:Function|Class)(?:Declaration|Expression)|ArrowFunctionExpression|DoWhileStatement|WhileStatement|ForOfStatement|ForInStatement|ForStatement)$/u;
var Mh = {
  meta: {
    type: "problem",
    docs: {
      description: "disallow control flow statements in `finally` blocks",
      category: "Possible Errors",
      recommended: true,
      url: "https://eslint.org/docs/rules/no-unsafe-finally"
    },
    schema: [],
    messages: {
      unsafeUsage: "Unsafe usage of {{nodeType}}."
    }
  },
  create(t4) {
    function e(n) {
      return n.parent.type === "TryStatement" && n.parent.finalizer === n;
    }
    function r(n, a) {
      let o = false, l;
      n.type === "BreakStatement" && !n.label ? l = Mj : n.type === "ContinueStatement" ? l = $j : l = jj;
      for (let i = n; i && !l.test(i.type); i = i.parent)
        if (i.parent.label && a && i.parent.label.name === a.name && (o = true), e(i))
          return !(a && o);
      return false;
    }
    function s(n) {
      r(n, n.label) && t4.report({
        messageId: "unsafeUsage",
        data: {
          nodeType: n.type
        },
        node: n,
        line: n.loc.line,
        column: n.loc.column
      });
    }
    return {
      ReturnStatement: s,
      ThrowStatement: s,
      BreakStatement: s,
      ContinueStatement: s
    };
  }
};
Mh.meta;
Mh.create;
function Vj(t4) {
  return t4 === "in" || t4 === "instanceof";
}
function Uj(t4) {
  return t4 === "<" || t4 === ">" || t4 === ">=" || t4 === "<=";
}
function qj(t4) {
  return t4.type === "UnaryExpression" && t4.operator === "!";
}
var $h = {
  meta: {
    type: "problem",
    docs: {
      description: "disallow negating the left operand of relational operators",
      category: "Possible Errors",
      recommended: true,
      url: "https://eslint.org/docs/rules/no-unsafe-negation",
      suggestion: true
    },
    schema: [{
      type: "object",
      properties: {
        enforceForOrderingRelations: {
          type: "boolean",
          default: false
        }
      },
      additionalProperties: false
    }],
    fixable: null,
    messages: {
      unexpected: "Unexpected negating the left operand of '{{operator}}' operator.",
      suggestNegatedExpression: "Negate '{{operator}}' expression instead of its left operand. This changes the current behavior.",
      suggestParenthesisedNegation: "Wrap negation in '()' to make the intention explicit. This preserves the current behavior."
    }
  },
  create(t4) {
    const e = t4.getSourceCode(), s = (t4.options[0] || {}).enforceForOrderingRelations === true;
    return {
      BinaryExpression(n) {
        const a = n.operator, o = s && Uj(a);
        (Vj(a) || o) && qj(n.left) && !E.isParenthesised(e, n.left) && t4.report({
          node: n,
          loc: n.left.loc,
          messageId: "unexpected",
          data: {
            operator: a
          },
          suggest: [{
            messageId: "suggestNegatedExpression",
            data: {
              operator: a
            },
            fix(l) {
              const u = [e.getFirstToken(n.left).range[1], n.range[1]], c = e.text.slice(u[0], u[1]);
              return l.replaceTextRange(u, `(${c})`);
            }
          }, {
            messageId: "suggestParenthesisedNegation",
            fix(l) {
              return l.replaceText(n.left, `(${e.getText(n.left)})`);
            }
          }]
        });
      }
    };
  }
};
$h.meta;
$h.create;
var Xy = /* @__PURE__ */ new Set(["+", "-", "/", "*", "%", "**"]);
var Wj = /* @__PURE__ */ new Set(["+=", "-=", "/=", "*=", "%=", "**="]);
var zj = /* @__PURE__ */ new Set(["in", "instanceof"]);
function Qy(t4) {
  return t4.type === "ObjectPattern" || t4.type === "ArrayPattern";
}
var Vh = {
  meta: {
    type: "problem",
    docs: {
      description: "disallow use of optional chaining in contexts where the `undefined` value is not allowed",
      category: "Possible Errors",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-unsafe-optional-chaining"
    },
    schema: [{
      type: "object",
      properties: {
        disallowArithmeticOperators: {
          type: "boolean",
          default: false
        }
      },
      additionalProperties: false
    }],
    fixable: null,
    messages: {
      unsafeOptionalChain: "Unsafe usage of optional chaining. If it short-circuits with 'undefined' the evaluation will throw TypeError.",
      unsafeArithmetic: "Unsafe arithmetic operation on optional chaining. It can result in NaN."
    }
  },
  create(t4) {
    const r = (t4.options[0] || {}).disallowArithmeticOperators || false;
    function s(i) {
      t4.report({
        messageId: "unsafeOptionalChain",
        node: i
      });
    }
    function n(i) {
      t4.report({
        messageId: "unsafeArithmetic",
        node: i
      });
    }
    function a(i, u) {
      if (i)
        switch (i.type) {
          case "LogicalExpression":
            i.operator === "||" || i.operator === "??" ? a(i.right, u) : i.operator === "&&" && (a(i.left, u), a(i.right, u));
            break;
          case "SequenceExpression":
            a(i.expressions[i.expressions.length - 1], u);
            break;
          case "ConditionalExpression":
            a(i.consequent, u), a(i.alternate, u);
            break;
          case "AwaitExpression":
            a(i.argument, u);
            break;
          case "ChainExpression":
            u(i);
            break;
        }
    }
    function o(i) {
      a(i, s);
    }
    function l(i) {
      a(i, n);
    }
    return {
      "AssignmentExpression, AssignmentPattern"(i) {
        Qy(i.left) && o(i.right);
      },
      "ClassDeclaration, ClassExpression"(i) {
        o(i.superClass);
      },
      CallExpression(i) {
        i.optional || o(i.callee);
      },
      NewExpression(i) {
        o(i.callee);
      },
      VariableDeclarator(i) {
        Qy(i.id) && o(i.init);
      },
      MemberExpression(i) {
        i.optional || o(i.object);
      },
      TaggedTemplateExpression(i) {
        o(i.tag);
      },
      ForOfStatement(i) {
        o(i.right);
      },
      SpreadElement(i) {
        i.parent && i.parent.type !== "ObjectExpression" && o(i.argument);
      },
      BinaryExpression(i) {
        zj.has(i.operator) && o(i.right), r && Xy.has(i.operator) && (l(i.right), l(i.left));
      },
      WithStatement(i) {
        o(i.object);
      },
      UnaryExpression(i) {
        r && Xy.has(i.operator) && l(i.argument);
      },
      AssignmentExpression(i) {
        r && Wj.has(i.operator) && l(i.right);
      }
    };
  }
};
Vh.meta;
Vh.create;
function Jt() {
  return true;
}
function Gj() {
  return false;
}
var Uh = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow unused expressions",
      category: "Best Practices",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-unused-expressions"
    },
    schema: [{
      type: "object",
      properties: {
        allowShortCircuit: {
          type: "boolean",
          default: false
        },
        allowTernary: {
          type: "boolean",
          default: false
        },
        allowTaggedTemplates: {
          type: "boolean",
          default: false
        },
        enforceForJSX: {
          type: "boolean",
          default: false
        }
      },
      additionalProperties: false
    }],
    messages: {
      unusedExpression: "Expected an assignment or function call and instead saw an expression."
    }
  },
  create(t4) {
    const e = t4.options[0] || {}, r = e.allowShortCircuit || false, s = e.allowTernary || false, n = e.allowTaggedTemplates || false, a = e.enforceForJSX || false;
    function o(f) {
      return f.type === "ExpressionStatement" && f.expression.type === "Literal" && typeof f.expression.value == "string";
    }
    function l(f, h) {
      for (let p = 0; p < h.length; ++p)
        if (!f(h[p]))
          return h.slice(0, p);
      return h.slice();
    }
    function i(f) {
      return l(o, f.body);
    }
    function u(f, h) {
      const p = h[h.length - 1], m = h[h.length - 2];
      return (p.type === "Program" || p.type === "BlockStatement" && /Function/u.test(m.type)) && i(p).indexOf(f) >= 0;
    }
    const c = Object.assign(/* @__PURE__ */ Object.create(null), {
      isDisallowed(f) {
        return (c[f.type] || Gj)(f);
      },
      ArrayExpression: Jt,
      ArrowFunctionExpression: Jt,
      BinaryExpression: Jt,
      ChainExpression(f) {
        return c.isDisallowed(f.expression);
      },
      ClassExpression: Jt,
      ConditionalExpression(f) {
        return s ? c.isDisallowed(f.consequent) || c.isDisallowed(f.alternate) : true;
      },
      FunctionExpression: Jt,
      Identifier: Jt,
      JSXElement() {
        return a;
      },
      JSXFragment() {
        return a;
      },
      Literal: Jt,
      LogicalExpression(f) {
        return r ? c.isDisallowed(f.right) : true;
      },
      MemberExpression: Jt,
      MetaProperty: Jt,
      ObjectExpression: Jt,
      SequenceExpression: Jt,
      TaggedTemplateExpression() {
        return !n;
      },
      TemplateLiteral: Jt,
      ThisExpression: Jt,
      UnaryExpression(f) {
        return f.operator !== "void" && f.operator !== "delete";
      }
    });
    return {
      ExpressionStatement(f) {
        c.isDisallowed(f.expression) && !u(f, t4.getAncestors()) && t4.report({
          node: f,
          messageId: "unusedExpression"
        });
      }
    };
  }
};
Uh.meta;
Uh.create;
var qh = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow unused labels",
      category: "Best Practices",
      recommended: true,
      url: "https://eslint.org/docs/rules/no-unused-labels"
    },
    schema: [],
    fixable: "code",
    messages: {
      unused: "'{{name}}:' is defined but never used."
    }
  },
  create(t4) {
    const e = t4.getSourceCode();
    let r = null;
    function s(o) {
      r = {
        label: o.label.name,
        used: false,
        upper: r
      };
    }
    function n(o) {
      r.used || t4.report({
        node: o.label,
        messageId: "unused",
        data: o.label,
        fix(l) {
          return e.getTokenAfter(o.label, {
            includeComments: true
          }) === e.getTokenBefore(o.body, {
            includeComments: true
          }) ? l.removeRange([o.range[0], o.body.range[0]]) : null;
        }
      }), r = r.upper;
    }
    function a(o) {
      if (!o.label)
        return;
      const l = o.label.name;
      let i = r;
      for (; i; ) {
        if (i.label === l) {
          i.used = true;
          break;
        }
        i = i.upper;
      }
    }
    return {
      LabeledStatement: s,
      "LabeledStatement:exit": n,
      BreakStatement: a,
      ContinueStatement: a
    };
  }
};
qh.meta;
qh.create;
var Wh = {
  meta: {
    type: "problem",
    docs: {
      description: "disallow unused variables",
      category: "Variables",
      recommended: true,
      url: "https://eslint.org/docs/rules/no-unused-vars"
    },
    schema: [{
      oneOf: [{
        enum: ["all", "local"]
      }, {
        type: "object",
        properties: {
          vars: {
            enum: ["all", "local"]
          },
          varsIgnorePattern: {
            type: "string"
          },
          args: {
            enum: ["all", "after-used", "none"]
          },
          ignoreRestSiblings: {
            type: "boolean"
          },
          argsIgnorePattern: {
            type: "string"
          },
          caughtErrors: {
            enum: ["all", "none"]
          },
          caughtErrorsIgnorePattern: {
            type: "string"
          }
        },
        additionalProperties: false
      }]
    }],
    messages: {
      unusedVar: "'{{varName}}' is {{action}} but never used{{additional}}."
    }
  },
  create(t4) {
    const e = t4.getSourceCode(), r = {
      vars: "all",
      args: "after-used",
      ignoreRestSiblings: false,
      caughtErrors: "none"
    }, s = t4.options[0];
    s && (typeof s == "string" ? r.vars = s : (r.vars = s.vars || r.vars, r.args = s.args || r.args, r.ignoreRestSiblings = s.ignoreRestSiblings || r.ignoreRestSiblings, r.caughtErrors = s.caughtErrors || r.caughtErrors, s.varsIgnorePattern && (r.varsIgnorePattern = new RegExp(s.varsIgnorePattern, "u")), s.argsIgnorePattern && (r.argsIgnorePattern = new RegExp(s.argsIgnorePattern, "u")), s.caughtErrorsIgnorePattern && (r.caughtErrorsIgnorePattern = new RegExp(s.caughtErrorsIgnorePattern, "u"))));
    function n(C) {
      const T = C.defs && C.defs[0] && C.defs[0].type;
      let w, B;
      T === "CatchClause" && r.caughtErrorsIgnorePattern ? (w = "args", B = r.caughtErrorsIgnorePattern.toString()) : T === "Parameter" && r.argsIgnorePattern ? (w = "args", B = r.argsIgnorePattern.toString()) : T !== "Parameter" && r.varsIgnorePattern && (w = "vars", B = r.varsIgnorePattern.toString());
      const I = w ? `. Allowed unused ${w} must match ${B}` : "";
      return {
        varName: C.name,
        action: "defined",
        additional: I
      };
    }
    function a(C) {
      const T = r.varsIgnorePattern ? `. Allowed unused vars must match ${r.varsIgnorePattern.toString()}` : "";
      return {
        varName: C.name,
        action: "assigned a value",
        additional: T
      };
    }
    function o(C) {
      const T = C.defs[0];
      if (T) {
        let w = T.node;
        if (w.type === "VariableDeclarator")
          w = w.parent;
        else if (T.type === "Parameter")
          return false;
        return w.parent.type.indexOf("Export") === 0;
      }
      return false;
    }
    function l(C) {
      return C.type === "Property" && C.parent.type === "ObjectPattern" && /^(?:RestElement|(?:Experimental)?RestProperty)$/u.test(C.parent.properties[C.parent.properties.length - 1].type);
    }
    function i(C) {
      if (r.ignoreRestSiblings) {
        const T = C.defs.some((B) => l(B.name.parent)), w = C.references.some((B) => l(B.identifier.parent));
        return T || w;
      }
      return false;
    }
    function u(C) {
      return C.isRead();
    }
    function c(C, T) {
      let w = C.from;
      for (; w; ) {
        if (T.indexOf(w.block) >= 0)
          return true;
        w = w.upper;
      }
      return false;
    }
    function f(C) {
      const T = [];
      return C.defs.forEach((w) => {
        const {
          type: B,
          node: I
        } = w;
        B === "FunctionName" && T.push(I), B === "Variable" && I.init && (I.init.type === "FunctionExpression" || I.init.type === "ArrowFunctionExpression") && T.push(I.init);
      }), T;
    }
    function h(C, T) {
      return C.range[0] >= T.range[0] && C.range[1] <= T.range[1];
    }
    function p(C, T) {
      const w = C.identifier, B = w.parent, I = B.parent, _ = C.from.variableScope, S = C.resolved.scope.variableScope, F = _ !== S || E.isInLoop(w);
      return T && h(w, T) ? T : B.type === "AssignmentExpression" && I.type === "ExpressionStatement" && w === B.left && !F ? B.right : null;
    }
    function m(C, T) {
      let w = C, B = C.parent;
      for (; B && h(B, T); ) {
        switch (B.type) {
          case "SequenceExpression":
            if (B.expressions[B.expressions.length - 1] !== w)
              return false;
            break;
          case "CallExpression":
          case "NewExpression":
            return B.callee !== w;
          case "AssignmentExpression":
          case "TaggedTemplateExpression":
          case "YieldExpression":
            return true;
          default:
            if (/(?:Statement|Declaration)$/u.test(B.type))
              return true;
        }
        w = B, B = B.parent;
      }
      return false;
    }
    function d(C, T) {
      const w = E.getUpperFunction(C);
      return w && h(w, T) && m(w, T);
    }
    function g(C) {
      const T = C.parent;
      return T.type === "ExpressionStatement" ? true : T.type === "SequenceExpression" ? T.expressions[T.expressions.length - 1] === C ? g(T) : true : false;
    }
    function y(C, T) {
      const w = C.identifier, B = w.parent;
      return C.isRead() && (B.type === "AssignmentExpression" && B.left === w && g(B) || B.type === "UpdateExpression" && g(B) || T && h(w, T) && !d(w, T));
    }
    function x(C) {
      let T = C.identifier.parent;
      return T.type === "VariableDeclarator" && (T = T.parent.parent), T.type !== "ForInStatement" || (T.body.type === "BlockStatement" ? T = T.body.body[0] : T = T.body, !T) ? false : T.type === "ReturnStatement";
    }
    function A(C) {
      const T = f(C), w = T.length > 0;
      let B = null;
      return C.references.some((I) => {
        if (x(I))
          return true;
        const _ = y(I, B);
        return B = p(I, B), u(I) && !_ && !(w && c(I, T));
      });
    }
    function b(C) {
      const T = C.defs[0], w = t4.getDeclaredVariables(T.node);
      return !w.slice(w.indexOf(C) + 1).some((I) => I.references.length > 0 || I.eslintUsed);
    }
    function v(C, T) {
      const w = C.variables, B = C.childScopes;
      let I, _;
      if (C.type !== "global" || r.vars === "all")
        for (I = 0, _ = w.length; I < _; ++I) {
          const S = w[I];
          if (C.type === "class" && C.block.id === S.identifiers[0] || C.functionExpressionScope || S.eslintUsed || C.type === "function" && S.name === "arguments" && S.identifiers.length === 0)
            continue;
          const F = S.defs[0];
          if (F) {
            const N = F.type;
            if (N === "CatchClause" && (r.caughtErrors === "none" || r.caughtErrorsIgnorePattern && r.caughtErrorsIgnorePattern.test(F.name.name)))
              continue;
            if (N === "Parameter") {
              if ((F.node.parent.type === "Property" || F.node.parent.type === "MethodDefinition") && F.node.parent.kind === "set" || r.args === "none" || r.argsIgnorePattern && r.argsIgnorePattern.test(F.name.name) || r.args === "after-used" && E.isFunction(F.name.parent) && !b(S))
                continue;
            } else if (r.varsIgnorePattern && r.varsIgnorePattern.test(F.name.name))
              continue;
          }
          !A(S) && !o(S) && !i(S) && T.push(S);
        }
      for (I = 0, _ = B.length; I < _; ++I)
        v(B[I], T);
      return T;
    }
    return {
      "Program:exit"(C) {
        const T = v(t4.getScope(), []);
        for (let w = 0, B = T.length; w < B; ++w) {
          const I = T[w];
          if (I.defs.length > 0) {
            const _ = I.references.filter((F) => F.isWrite() && F.from.variableScope === I.scope.variableScope);
            let S;
            _.length > 0 && (S = _[_.length - 1]), t4.report({
              node: S ? S.identifier : I.identifiers[0],
              messageId: "unusedVar",
              data: I.references.some((F) => F.isWrite()) ? a(I) : n(I)
            });
          } else if (I.eslintExplicitGlobalComments) {
            const _ = I.eslintExplicitGlobalComments[0];
            t4.report({
              node: C,
              loc: E.getNameLocationInGlobalDirectiveComment(e, _, I.name),
              messageId: "unusedVar",
              data: n(I)
            });
          }
        }
      }
    };
  }
};
Wh.meta;
Wh.create;
var Hj = /^(?:(?:Function|Class)(?:Declaration|Expression)|ArrowFunctionExpression|CatchClause|ImportDeclaration|ExportNamedDeclaration)$/u;
var Kj = /^For(?:In|Of)Statement$/u;
function Jj(t4) {
  let e = true, r = true, s = true;
  return typeof t4 == "string" ? e = t4 !== "nofunc" : typeof t4 == "object" && t4 !== null && (e = t4.functions !== false, r = t4.classes !== false, s = t4.variables !== false), {
    functions: e,
    classes: r,
    variables: s
  };
}
function Xj(t4) {
  return t4.defs[0].type === "FunctionName";
}
function Qj(t4, e) {
  return t4.defs[0].type === "ClassName" && t4.scope.variableScope !== e.from.variableScope;
}
function Yj(t4, e) {
  return t4.defs[0].type === "Variable" && t4.scope.variableScope !== e.from.variableScope;
}
function Go(t4, e) {
  return t4 && t4.range[0] <= e && e <= t4.range[1];
}
function Zj(t4, e) {
  if (t4.scope !== e.from)
    return false;
  let r = t4.identifiers[0].parent;
  const s = e.identifier.range[1];
  for (; r; ) {
    if (r.type === "VariableDeclarator") {
      if (Go(r.init, s) || Kj.test(r.parent.parent.type) && Go(r.parent.parent.right, s))
        return true;
      break;
    } else if (r.type === "AssignmentPattern") {
      if (Go(r.right, s))
        return true;
    } else if (Hj.test(r.type))
      break;
    r = r.parent;
  }
  return false;
}
var zh = {
  meta: {
    type: "problem",
    docs: {
      description: "disallow the use of variables before they are defined",
      category: "Variables",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-use-before-define"
    },
    schema: [{
      oneOf: [{
        enum: ["nofunc"]
      }, {
        type: "object",
        properties: {
          functions: {
            type: "boolean"
          },
          classes: {
            type: "boolean"
          },
          variables: {
            type: "boolean"
          }
        },
        additionalProperties: false
      }]
    }],
    messages: {
      usedBeforeDefined: "'{{name}}' was used before it was defined."
    }
  },
  create(t4) {
    const e = Jj(t4.options[0]);
    function r(n, a) {
      return Xj(n) ? e.functions : Qj(n, a) ? e.classes : Yj(n, a) ? e.variables : true;
    }
    function s(n) {
      n.references.forEach((a) => {
        const o = a.resolved;
        a.init || !o || o.identifiers.length === 0 || o.identifiers[0].range[1] < a.identifier.range[1] && !Zj(o, a) || !r(o, a) || t4.report({
          node: a.identifier,
          messageId: "usedBeforeDefined",
          data: a.identifier
        });
      }), n.childScopes.forEach(s);
    }
    return {
      Program() {
        s(t4.getScope());
      }
    };
  }
};
zh.meta;
zh.create;
var {
  CALL: e6,
  CONSTRUCT: t6,
  ReferenceTracker: r6,
  getStringIfConstant: Yy
} = Vt.default;
var {
  RegExpParser: n6,
  visitRegExpAST: s6
} = pn.default;
var a6 = new n6();
function Zy(t4) {
  const e = [];
  let r = t4;
  do
    e.push(r), r = r.parent;
  while (r);
  return e;
}
function Tb(t4) {
  return t4.type === "Assertion" && (t4.kind === "lookahead" || t4.kind === "lookbehind");
}
function i6(t4) {
  return Tb(t4) && t4.negate;
}
var Gh = {
  meta: {
    type: "problem",
    docs: {
      description: "disallow useless backreferences in regular expressions",
      category: "Possible Errors",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-useless-backreference"
    },
    schema: [],
    messages: {
      nested: "Backreference '{{ bref }}' will be ignored. It references group '{{ group }}' from within that group.",
      forward: "Backreference '{{ bref }}' will be ignored. It references group '{{ group }}' which appears later in the pattern.",
      backward: "Backreference '{{ bref }}' will be ignored. It references group '{{ group }}' which appears before in the same lookbehind.",
      disjunctive: "Backreference '{{ bref }}' will be ignored. It references group '{{ group }}' which is in another alternative.",
      intoNegativeLookaround: "Backreference '{{ bref }}' will be ignored. It references group '{{ group }}' which is in a negative lookaround."
    }
  },
  create(t4) {
    function e(r, s, n) {
      let a;
      try {
        a = a6.parsePattern(s, 0, s.length, n.includes("u"));
      } catch {
        return;
      }
      s6(a, {
        onBackreferenceEnter(o) {
          const l = o.resolved, i = Zy(o), u = Zy(l);
          let c = null;
          if (i.includes(l))
            c = "nested";
          else {
            let f = i.length - 1, h = u.length - 1;
            do
              f--, h--;
            while (i[f] === u[h]);
            const p = h + 1, m = u.slice(0, p), d = u.slice(p), g = d.find(Tb), y = g && g.kind === "lookbehind";
            !y && o.end <= l.start ? c = "forward" : y && l.end <= o.start ? c = "backward" : m[m.length - 1].type === "Alternative" ? c = "disjunctive" : m.some(i6) && (c = "intoNegativeLookaround");
          }
          c && t4.report({
            node: r,
            messageId: c,
            data: {
              bref: o.raw,
              group: l.raw
            }
          });
        }
      });
    }
    return {
      "Literal[regex]"(r) {
        const {
          pattern: s,
          flags: n
        } = r.regex;
        e(r, s, n);
      },
      Program() {
        const r = t4.getScope(), s = new r6(r), n = {
          RegExp: {
            [e6]: true,
            [t6]: true
          }
        };
        for (const {
          node: a
        } of s.iterateGlobalReferences(n)) {
          const [o, l] = a.arguments, i = Yy(o, r), u = Yy(l, r);
          typeof i == "string" && e(a, i, u || "");
        }
      }
    };
  }
};
Gh.meta;
Gh.create;
function o6(t4) {
  const e = E.skipChainExpression(t4.callee);
  return e.type === "MemberExpression" && e.property.type === "Identifier" && e.computed === false && (e.property.name === "call" && t4.arguments.length >= 1 || e.property.name === "apply" && t4.arguments.length === 2 && t4.arguments[1].type === "ArrayExpression");
}
function l6(t4, e, r) {
  return t4 ? E.equalTokens(t4, e, r) : E.isNullOrUndefined(e);
}
var Hh = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow unnecessary calls to `.call()` and `.apply()`",
      category: "Best Practices",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-useless-call"
    },
    schema: [],
    messages: {
      unnecessaryCall: "Unnecessary '.{{name}}()'."
    }
  },
  create(t4) {
    const e = t4.getSourceCode();
    return {
      CallExpression(r) {
        if (!o6(r))
          return;
        const s = E.skipChainExpression(r.callee), n = E.skipChainExpression(s.object), a = n.type === "MemberExpression" ? n.object : null, o = r.arguments[0];
        l6(a, o, e) && t4.report({
          node: r,
          messageId: "unnecessaryCall",
          data: {
            name: s.property.name
          }
        });
      }
    };
  }
};
Hh.meta;
Hh.create;
var Kh = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow unnecessary `catch` clauses",
      category: "Best Practices",
      recommended: true,
      url: "https://eslint.org/docs/rules/no-useless-catch"
    },
    schema: [],
    messages: {
      unnecessaryCatchClause: "Unnecessary catch clause.",
      unnecessaryCatch: "Unnecessary try/catch wrapper."
    }
  },
  create(t4) {
    return {
      CatchClause(e) {
        e.param && e.param.type === "Identifier" && e.body.body.length && e.body.body[0].type === "ThrowStatement" && e.body.body[0].argument.type === "Identifier" && e.body.body[0].argument.name === e.param.name && (e.parent.finalizer ? t4.report({
          node: e,
          messageId: "unnecessaryCatchClause"
        }) : t4.report({
          node: e.parent,
          messageId: "unnecessaryCatch"
        }));
      }
    };
  }
};
Kh.meta;
Kh.create;
var Jh = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow unnecessary computed property keys in objects and classes",
      category: "ECMAScript 6",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-useless-computed-key"
    },
    schema: [{
      type: "object",
      properties: {
        enforceForClassMembers: {
          type: "boolean",
          default: false
        }
      },
      additionalProperties: false
    }],
    fixable: "code",
    messages: {
      unnecessarilyComputedProperty: "Unnecessarily computed property [{{property}}] found."
    }
  },
  create(t4) {
    const e = t4.getSourceCode(), r = t4.options[0] && t4.options[0].enforceForClassMembers;
    function s(n) {
      if (!n.computed)
        return;
      const a = n.key, o = typeof a.value;
      let l;
      n.type === "MethodDefinition" ? l = n.static ? "prototype" : "constructor" : l = "__proto__", a.type === "Literal" && (o === "string" || o === "number") && a.value !== l && t4.report({
        node: n,
        messageId: "unnecessarilyComputedProperty",
        data: {
          property: e.getText(a)
        },
        fix(i) {
          const u = e.getTokenBefore(a, E.isOpeningBracketToken), c = e.getTokenAfter(a, E.isClosingBracketToken);
          if (e.commentsExistBetween(u, c))
            return null;
          const f = e.getTokenBefore(u), p = (f.range[1] === u.range[0] && !E.canTokensBeAdjacent(f, e.getFirstToken(a)) ? " " : "") + a.raw;
          return i.replaceTextRange([u.range[0], c.range[1]], p);
        }
      });
    }
    return {
      Property: s,
      MethodDefinition: r ? s : function() {
      }
    };
  }
};
Jh.meta;
Jh.create;
function Fb(t4) {
  return t4.type === "BinaryExpression" && t4.operator === "+";
}
function u6(t4) {
  return t4.value === "+" && t4.type === "Punctuator";
}
function c6(t4) {
  let e = t4.left;
  for (; Fb(e); )
    e = e.right;
  return e;
}
function p6(t4) {
  let e = t4.right;
  for (; Fb(e); )
    e = e.left;
  return e;
}
var Xh = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow unnecessary concatenation of literals or template literals",
      category: "Best Practices",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-useless-concat"
    },
    schema: [],
    messages: {
      unexpectedConcat: "Unexpected string concatenation of literals."
    }
  },
  create(t4) {
    const e = t4.getSourceCode();
    return {
      BinaryExpression(r) {
        if (r.operator !== "+")
          return;
        const s = c6(r), n = p6(r);
        if (E.isStringLiteral(s) && E.isStringLiteral(n) && E.isTokenOnSameLine(s, n)) {
          const a = e.getFirstTokenBetween(s, n, u6);
          t4.report({
            node: r,
            loc: a.loc,
            messageId: "unexpectedConcat"
          });
        }
      }
    };
  }
};
Xh.meta;
Xh.create;
function f6(t4) {
  return t4.length === 1 && t4[0].type === "ExpressionStatement" && t4[0].expression.type === "CallExpression" && t4[0].expression.callee.type === "Super";
}
function h6(t4) {
  return t4.type === "Identifier" || t4.type === "RestElement";
}
function m6(t4) {
  return t4.length === 1 && t4[0].type === "SpreadElement" && t4[0].argument.type === "Identifier" && t4[0].argument.name === "arguments";
}
function Pb(t4, e) {
  return t4.type === "Identifier" && e.type === "Identifier" && t4.name === e.name;
}
function d6(t4, e) {
  return t4.type === "RestElement" && e.type === "SpreadElement" && Pb(t4.argument, e.argument);
}
function g6(t4, e) {
  return Pb(t4, e) || d6(t4, e);
}
function y6(t4, e) {
  if (t4.length !== e.length)
    return false;
  for (let r = 0; r < t4.length; ++r)
    if (!g6(t4[r], e[r]))
      return false;
  return true;
}
function x6(t4, e) {
  return f6(t4) && e.every(h6) && (m6(t4[0].expression.arguments) || y6(e, t4[0].expression.arguments));
}
var Qh = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow unnecessary constructors",
      category: "ECMAScript 6",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-useless-constructor"
    },
    schema: [],
    messages: {
      noUselessConstructor: "Useless constructor."
    }
  },
  create(t4) {
    return {
      MethodDefinition: function(e) {
        if (e.kind !== "constructor" || !e.value.body)
          return;
        const r = e.value.body.body, s = e.value.params;
        (e.parent.parent.superClass ? x6(r, s) : r.length === 0) && t4.report({
          node: e,
          messageId: "noUselessConstructor"
        });
      }
    };
  }
};
Qh.meta;
Qh.create;
function Ib(t4, e) {
  return new Set(function* () {
    yield* t4, yield* e;
  }());
}
var v6 = Ib(new Set("\\nrvtbfux"), E.LINEBREAKS);
var _b = new Set("\\bcdDfnpPrsStvwWxu0123456789]");
var E6 = Ib(_b, new Set("^/.$*+?[{}|()Bk"));
function b6(t4) {
  const e = [];
  return t4.split("").reduce((r, s, n) => {
    if (!r.escapeNextChar) {
      if (s === "\\")
        return Object.assign(r, {
          escapeNextChar: true
        });
      if (s === "[" && !r.inCharClass)
        return Object.assign(r, {
          inCharClass: true,
          startingCharClass: true
        });
      if (s === "]" && r.inCharClass)
        return e.length && e[e.length - 1].inCharClass && (e[e.length - 1].endsCharClass = true), Object.assign(r, {
          inCharClass: false,
          startingCharClass: false
        });
    }
    return e.push({
      text: s,
      index: n,
      escaped: r.escapeNextChar,
      inCharClass: r.inCharClass,
      startsCharClass: r.startingCharClass,
      endsCharClass: false
    }), Object.assign(r, {
      escapeNextChar: false,
      startingCharClass: false
    });
  }, {
    escapeNextChar: false,
    inCharClass: false,
    startingCharClass: false
  }), e;
}
var Yh = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow unnecessary escape characters",
      category: "Best Practices",
      recommended: true,
      url: "https://eslint.org/docs/rules/no-useless-escape",
      suggestion: true
    },
    messages: {
      unnecessaryEscape: "Unnecessary escape character: \\{{character}}.",
      removeEscape: "Remove the `\\`. This maintains the current functionality.",
      escapeBackslash: "Replace the `\\` with `\\\\` to include the actual backslash character."
    },
    schema: []
  },
  create(t4) {
    const e = t4.getSourceCode();
    function r(a, o, l) {
      const i = a.range[0] + o, u = [i, i + 1], c = e.getLocFromIndex(i);
      t4.report({
        node: a,
        loc: {
          start: c,
          end: {
            line: c.line,
            column: c.column + 1
          }
        },
        messageId: "unnecessaryEscape",
        data: {
          character: l
        },
        suggest: [{
          messageId: "removeEscape",
          fix(f) {
            return f.removeRange(u);
          }
        }, {
          messageId: "escapeBackslash",
          fix(f) {
            return f.insertTextBeforeRange(u, "\\");
          }
        }]
      });
    }
    function s(a, o) {
      const l = a.type === "TemplateElement", i = o[0][1];
      let u = !v6.has(i), c;
      l ? (c = i === "`", i === "$" ? u = o.input[o.index + 2] !== "{" : i === "{" && (u = o.input[o.index - 1] !== "$")) : c = i === a.raw[0], u && !c && r(a, o.index, o[0].slice(1));
    }
    function n(a) {
      const o = a.type === "TemplateElement";
      if (!(o && a.parent && a.parent.parent && a.parent.parent.type === "TaggedTemplateExpression" && a.parent === a.parent.parent.quasi))
        if (typeof a.value == "string" || o) {
          if (a.parent.type === "JSXAttribute" || a.parent.type === "JSXElement" || a.parent.type === "JSXFragment")
            return;
          const l = o ? e.getText(a) : a.raw;
          let i;
          for (; i = /\\[^\d]/gu.exec(l); )
            s(a, i);
        } else
          a.regex && b6(a.regex.pattern).filter((l) => !(l.text === "-" && l.inCharClass && !l.startsCharClass && !l.endsCharClass)).filter((l) => !(l.text === "^" && l.startsCharClass)).filter((l) => l.escaped).filter((l) => !(l.inCharClass ? _b : E6).has(l.text)).forEach((l) => r(a, l.index, l.text));
    }
    return {
      Literal: n,
      TemplateElement: n
    };
  }
};
Yh.meta;
Yh.create;
var Zh = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow renaming import, export, and destructured assignments to the same name",
      category: "ECMAScript 6",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-useless-rename"
    },
    fixable: "code",
    schema: [{
      type: "object",
      properties: {
        ignoreDestructuring: {
          type: "boolean",
          default: false
        },
        ignoreImport: {
          type: "boolean",
          default: false
        },
        ignoreExport: {
          type: "boolean",
          default: false
        }
      },
      additionalProperties: false
    }],
    messages: {
      unnecessarilyRenamed: "{{type}} {{name}} unnecessarily renamed."
    }
  },
  create(t4) {
    const e = t4.getSourceCode(), r = t4.options[0] || {}, s = r.ignoreDestructuring === true, n = r.ignoreImport === true, a = r.ignoreExport === true;
    function o(l, i, u) {
      const c = i.type === "Identifier" ? i.name : i.value;
      return t4.report({
        node: l,
        messageId: "unnecessarilyRenamed",
        data: {
          name: c,
          type: u
        },
        fix(f) {
          const h = l.type === "Property" ? l.value : l.local;
          return e.getCommentsInside(l).length > e.getCommentsInside(h).length || h.type === "AssignmentPattern" && E.isParenthesised(e, h.left) ? null : f.replaceText(l, e.getText(h));
        }
      });
    }
    return {
      ObjectPattern: function(l) {
        if (!s)
          for (const i of l.properties) {
            if (i.type !== "Property" || i.shorthand || i.computed)
              continue;
            const u = i.key.type === "Identifier" && i.key.name || i.key.type === "Literal" && i.key.value, c = i.value.type === "AssignmentPattern" ? i.value.left.name : i.value.name;
            u === c && o(i, i.key, "Destructuring assignment");
          }
      },
      ImportSpecifier: function(l) {
        n || l.imported.name === l.local.name && l.imported.range[0] !== l.local.range[0] && o(l, l.imported, "Import");
      },
      ExportSpecifier: function(l) {
        a || l.local.name === l.exported.name && l.local.range[0] !== l.exported.range[0] && o(l, l.local, "Export");
      }
    };
  }
};
Zh.meta;
Zh.create;
function C6(t4, e) {
  const r = t4.indexOf(e);
  r !== -1 && t4.splice(r, 1);
}
function S6(t4) {
  return E.STATEMENT_LIST_PARENTS.has(t4.parent.type);
}
function A6(t4) {
  for (let e = t4; e && e.parent && !E.isFunction(e); e = e.parent)
    if (e.parent.type === "TryStatement" && e.parent.finalizer === e)
      return true;
  return false;
}
var em = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow redundant return statements",
      category: "Best Practices",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-useless-return"
    },
    fixable: "code",
    schema: [],
    messages: {
      unnecessaryReturn: "Unnecessary return statement."
    }
  },
  create(t4) {
    const e = /* @__PURE__ */ new WeakMap(), r = /* @__PURE__ */ new WeakSet(), s = t4.getSourceCode();
    let n = null;
    function a(u) {
      const c = e.get(u);
      return !c || c.returned;
    }
    function o(u, c, f) {
      const h = f || /* @__PURE__ */ new WeakSet();
      for (const p of c) {
        if (!p.reachable) {
          h.has(p) || (h.add(p), o(u, p.allPrevSegments.filter(a), h));
          continue;
        }
        u.push(...e.get(p).uselessReturns);
      }
      return u;
    }
    function l(u) {
      if (!u.reachable) {
        r.add(u), u.allPrevSegments.filter(a).filter((f) => !r.has(f)).forEach(l);
        return;
      }
      const c = e.get(u);
      for (const f of c.uselessReturns)
        C6(n.uselessReturns, f);
      c.uselessReturns = [];
    }
    function i() {
      n.codePath.currentSegments.forEach(l);
    }
    return {
      onCodePathStart(u) {
        n = {
          upper: n,
          uselessReturns: [],
          codePath: u
        };
      },
      onCodePathEnd() {
        for (const u of n.uselessReturns)
          t4.report({
            node: u,
            loc: u.loc,
            messageId: "unnecessaryReturn",
            fix(c) {
              return S6(u) && !s.getCommentsInside(u).length ? new Qs(c, s).retainEnclosingFunction(u).remove(u) : null;
            }
          });
        n = n.upper;
      },
      onCodePathSegmentStart(u) {
        const c = {
          uselessReturns: o([], u.allPrevSegments),
          returned: false
        };
        e.set(u, c);
      },
      ReturnStatement(u) {
        if (u.argument && i(), !(u.argument || E.isInLoop(u) || A6(u) || !n.codePath.currentSegments.some((c) => c.reachable))) {
          for (const c of n.codePath.currentSegments) {
            const f = e.get(c);
            f && (f.uselessReturns.push(u), f.returned = true);
          }
          n.uselessReturns.push(u);
        }
      },
      ClassDeclaration: i,
      ContinueStatement: i,
      DebuggerStatement: i,
      DoWhileStatement: i,
      EmptyStatement: i,
      ExpressionStatement: i,
      ForInStatement: i,
      ForOfStatement: i,
      ForStatement: i,
      IfStatement: i,
      ImportDeclaration: i,
      LabeledStatement: i,
      SwitchStatement: i,
      ThrowStatement: i,
      TryStatement: i,
      VariableDeclaration: i,
      WhileStatement: i,
      WithStatement: i,
      ExportNamedDeclaration: i,
      ExportDefaultDeclaration: i,
      ExportAllDeclaration: i
    };
  }
};
em.meta;
em.create;
function D6(t4) {
  return !!t4.scope && t4.scope.type === "global";
}
function e0(t4) {
  let e = t4;
  for (; e.type !== "function" && e.type !== "global"; )
    e = e.upper;
  return e;
}
function w6(t4) {
  const e = e0(t4.scope);
  return t4.references.some((r) => e0(r.from) !== e);
}
function t0(t4) {
  return (t4.parent.type === "ForOfStatement" || t4.parent.type === "ForInStatement") && t4 === t4.parent.left;
}
function k6(t4) {
  return t4.declarations.every((e) => e.init !== null);
}
var T6 = /^(?:Program|BlockStatement|SwitchStatement|ForStatement|ForInStatement|ForOfStatement)$/u;
function F6(t4) {
  for (let e = t4; e; e = e.parent)
    if (T6.test(e.type))
      return e;
  return null;
}
function P6(t4) {
  return t4.defs.length >= 2;
}
function I6(t4) {
  function e(r) {
    const s = t4.range, n = r.identifier.range;
    return n[0] < s[0] || n[1] > s[1];
  }
  return function(r) {
    return r.references.some(e);
  };
}
function _6(t4) {
  const e = t4.range[0], r = t4.range[1];
  return (s) => {
    const n = s.defs[0].name, a = n.range[0], o = n.parent.type === "AssignmentPattern" ? n.parent.right : null, l = o && o.range[0], i = o && o.range[1];
    return s.references.some((u) => {
      const c = u.identifier.range[0], f = u.identifier.range[1];
      return !u.init && (c < a || o !== null && c >= l && f <= i || c >= e && f <= r);
    });
  };
}
function B6(t4) {
  return t4.name === "let";
}
var tm = {
  meta: {
    type: "suggestion",
    docs: {
      description: "require `let` or `const` instead of `var`",
      category: "ECMAScript 6",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-var"
    },
    schema: [],
    fixable: "code",
    messages: {
      unexpectedVar: "Unexpected var, use let or const instead."
    }
  },
  create(t4) {
    const e = t4.getSourceCode();
    function r(a) {
      return a.init ? t4.getDeclaredVariables(a).some(_6(a.init)) : false;
    }
    function s(a) {
      const o = t4.getDeclaredVariables(a), l = F6(a);
      return !(a.parent.type === "SwitchCase" || a.declarations.some(r) || o.some(D6) || o.some(P6) || o.some(I6(l)) || o.some(B6) || E.isInLoop(a) && (o.some(w6) || !t0(a) && !k6(a)) || !t0(a) && !(a.parent.type === "ForStatement" && a.parent.init === a) && !E.STATEMENT_LIST_PARENTS.has(a.parent.type));
    }
    function n(a) {
      t4.report({
        node: a,
        messageId: "unexpectedVar",
        fix(o) {
          const l = e.getFirstToken(a, {
            filter: (i) => i.value === "var"
          });
          return s(a) ? o.replaceText(l, "let") : null;
        }
      });
    }
    return {
      "VariableDeclaration:exit"(a) {
        a.kind === "var" && n(a);
      }
    };
  }
};
tm.meta;
tm.create;
var rm = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow `void` operators",
      category: "Best Practices",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-void"
    },
    messages: {
      noVoid: "Expected 'undefined' and instead saw 'void'."
    },
    schema: [{
      type: "object",
      properties: {
        allowAsStatement: {
          type: "boolean",
          default: false
        }
      },
      additionalProperties: false
    }]
  },
  create(t4) {
    const e = t4.options[0] && t4.options[0].allowAsStatement;
    return {
      'UnaryExpression[operator="void"]'(r) {
        e && r.parent && r.parent.type === "ExpressionStatement" || t4.report({
          node: r,
          messageId: "noVoid"
        });
      }
    };
  }
};
rm.meta;
rm.create;
var O6 = 40;
var nm = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow specified warning terms in comments",
      category: "Best Practices",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-warning-comments"
    },
    schema: [{
      type: "object",
      properties: {
        terms: {
          type: "array",
          items: {
            type: "string"
          }
        },
        location: {
          enum: ["start", "anywhere"]
        }
      },
      additionalProperties: false
    }],
    messages: {
      unexpectedComment: "Unexpected '{{matchedTerm}}' comment: '{{comment}}'."
    }
  },
  create(t4) {
    const e = t4.getSourceCode(), r = t4.options[0] || {}, s = r.terms || ["todo", "fixme", "xxx"], n = r.location || "start", a = s.map(function(i) {
      const u = Ju.default(i);
      let c;
      const f = /\w$/u.test(i) ? "\\b" : "";
      return n === "start" ? c = "^\\s*" : /^\w/u.test(i) ? c = "\\b" : c = "", n === "start" ? new RegExp(c + u + f, "iu") : new RegExp(c + u + f + "|\\b" + i + "\\b", "iu");
    });
    function o(i) {
      const u = [];
      return a.forEach((c, f) => {
        c.test(i) && u.push(s[f]);
      }), u;
    }
    function l(i) {
      const u = i.value;
      if (E.isDirectiveComment(i) && /\bno-warning-comments\b/u.test(u))
        return;
      o(u).forEach((f) => {
        let h = "", p = false;
        for (const m of u.trim().split(/\s+/u)) {
          const d = h ? `${h} ${m}` : m;
          if (d.length <= O6)
            h = d;
          else {
            p = true;
            break;
          }
        }
        t4.report({
          node: i,
          messageId: "unexpectedComment",
          data: {
            matchedTerm: f,
            comment: `${h}${p ? "..." : ""}`
          }
        });
      });
    }
    return {
      Program() {
        e.getAllComments().filter((u) => u.type !== "Shebang").forEach(l);
      }
    };
  }
};
nm.meta;
nm.create;
var sm = {
  meta: {
    type: "layout",
    docs: {
      description: "disallow whitespace before properties",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/no-whitespace-before-property"
    },
    fixable: "whitespace",
    schema: [],
    messages: {
      unexpectedWhitespace: "Unexpected whitespace before property {{propName}}."
    }
  },
  create(t4) {
    const e = t4.getSourceCode();
    function r(s, n, a) {
      t4.report({
        node: s,
        messageId: "unexpectedWhitespace",
        data: {
          propName: e.getText(s.property)
        },
        fix(o) {
          let l = "";
          return !s.computed && !s.optional && E.isDecimalInteger(s.object) || e.commentsExistBetween(n, a) ? null : (s.optional ? l = "?." : s.computed || (l = "."), o.replaceTextRange([n.range[1], a.range[0]], l));
        }
      });
    }
    return {
      MemberExpression(s) {
        let n, a;
        E.isTokenOnSameLine(s.object, s.property) && (s.computed ? (n = e.getTokenBefore(s.property, E.isOpeningBracketToken), a = e.getTokenBefore(n, s.optional ? 1 : 0)) : (n = e.getFirstToken(s.property), a = e.getTokenBefore(n, 1)), e.isSpaceBetweenTokens(a, n) && r(s, a, n));
      }
    };
  }
};
sm.meta;
sm.create;
var am = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow `with` statements",
      category: "Best Practices",
      recommended: true,
      url: "https://eslint.org/docs/rules/no-with"
    },
    schema: [],
    messages: {
      unexpectedWith: "Unexpected use of 'with' statement."
    }
  },
  create(t4) {
    return {
      WithStatement(e) {
        t4.report({
          node: e,
          messageId: "unexpectedWith"
        });
      }
    };
  }
};
am.meta;
am.create;
var $n = {
  enum: ["beside", "below", "any"]
};
var im = {
  meta: {
    type: "layout",
    docs: {
      description: "enforce the location of single-line statements",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/nonblock-statement-body-position"
    },
    fixable: "whitespace",
    schema: [$n, {
      properties: {
        overrides: {
          properties: {
            if: $n,
            else: $n,
            while: $n,
            do: $n,
            for: $n
          },
          additionalProperties: false
        }
      },
      additionalProperties: false
    }],
    messages: {
      expectNoLinebreak: "Expected no linebreak before this statement.",
      expectLinebreak: "Expected a linebreak before this statement."
    }
  },
  create(t4) {
    const e = t4.getSourceCode();
    function r(n) {
      return t4.options[1] && t4.options[1].overrides && t4.options[1].overrides[n] || t4.options[0] || "beside";
    }
    function s(n, a) {
      const o = r(a);
      if (n.type === "BlockStatement" || o === "any")
        return;
      const l = e.getTokenBefore(n);
      l.loc.end.line === n.loc.start.line && o === "below" ? t4.report({
        node: n,
        messageId: "expectLinebreak",
        fix: (i) => i.insertTextBefore(n, `
`)
      }) : l.loc.end.line !== n.loc.start.line && o === "beside" && t4.report({
        node: n,
        messageId: "expectNoLinebreak",
        fix(i) {
          return e.getText().slice(l.range[1], n.range[0]).trim() ? null : i.replaceTextRange([l.range[1], n.range[0]], " ");
        }
      });
    }
    return {
      IfStatement(n) {
        s(n.consequent, "if"), n.alternate && n.alternate.type !== "IfStatement" && s(n.alternate, "else");
      },
      WhileStatement: (n) => s(n.body, "while"),
      DoWhileStatement: (n) => s(n.body, "do"),
      ForStatement: (n) => s(n.body, "for"),
      ForInStatement: (n) => s(n.body, "for"),
      ForOfStatement: (n) => s(n.body, "for")
    };
  }
};
im.meta;
im.create;
var vs = {
  oneOf: [{
    enum: ["always", "never"]
  }, {
    type: "object",
    properties: {
      multiline: {
        type: "boolean"
      },
      minProperties: {
        type: "integer",
        minimum: 0
      },
      consistent: {
        type: "boolean"
      }
    },
    additionalProperties: false,
    minProperties: 1
  }]
};
function Es(t4) {
  let e = false, r = Number.POSITIVE_INFINITY, s = false;
  return t4 ? t4 === "always" ? r = 0 : t4 === "never" ? r = Number.POSITIVE_INFINITY : (e = !!t4.multiline, r = t4.minProperties || Number.POSITIVE_INFINITY, s = !!t4.consistent) : s = true, {
    multiline: e,
    minProperties: r,
    consistent: s
  };
}
function Bb(t4) {
  return typeof t4 == "object" && t4 !== null;
}
function L6(t4) {
  return Bb(t4) || typeof t4 == "string";
}
function R6(t4) {
  if (Bb(t4) && Object.values(t4).some(L6))
    return {
      ObjectExpression: Es(t4.ObjectExpression),
      ObjectPattern: Es(t4.ObjectPattern),
      ImportDeclaration: Es(t4.ImportDeclaration),
      ExportNamedDeclaration: Es(t4.ExportDeclaration)
    };
  const e = Es(t4);
  return {
    ObjectExpression: e,
    ObjectPattern: e,
    ImportDeclaration: e,
    ExportNamedDeclaration: e
  };
}
function N6(t4, e, r, s) {
  let n;
  return t4.type === "ObjectExpression" || t4.type === "ObjectPattern" ? n = t4.properties : n = t4.specifiers.filter((a) => a.type === "ImportSpecifier" || a.type === "ExportSpecifier"), n.length >= e.minProperties || e.multiline && n.length > 0 && r.loc.start.line !== s.loc.end.line;
}
var om = {
  meta: {
    type: "layout",
    docs: {
      description: "enforce consistent line breaks after opening and before closing braces",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/object-curly-newline"
    },
    fixable: "whitespace",
    schema: [{
      oneOf: [vs, {
        type: "object",
        properties: {
          ObjectExpression: vs,
          ObjectPattern: vs,
          ImportDeclaration: vs,
          ExportDeclaration: vs
        },
        additionalProperties: false,
        minProperties: 1
      }]
    }],
    messages: {
      unexpectedLinebreakBeforeClosingBrace: "Unexpected line break before this closing brace.",
      unexpectedLinebreakAfterOpeningBrace: "Unexpected line break after this opening brace.",
      expectedLinebreakBeforeClosingBrace: "Expected a line break before this closing brace.",
      expectedLinebreakAfterOpeningBrace: "Expected a line break after this opening brace."
    }
  },
  create(t4) {
    const e = t4.getSourceCode(), r = R6(t4.options[0]);
    function s(n) {
      const a = r[n.type];
      if (n.type === "ImportDeclaration" && !n.specifiers.some((p) => p.type === "ImportSpecifier") || n.type === "ExportNamedDeclaration" && !n.specifiers.some((p) => p.type === "ExportSpecifier"))
        return;
      const o = e.getFirstToken(n, (p) => p.value === "{");
      let l;
      n.typeAnnotation ? l = e.getTokenBefore(n.typeAnnotation) : l = e.getLastToken(n, (p) => p.value === "}");
      let i = e.getTokenAfter(o, {
        includeComments: true
      }), u = e.getTokenBefore(l, {
        includeComments: true
      });
      const c = N6(n, a, i, u), f = E.isCommentToken(i), h = E.isCommentToken(u);
      if (i = e.getTokenAfter(o), u = e.getTokenBefore(l), c)
        E.isTokenOnSameLine(o, i) && t4.report({
          messageId: "expectedLinebreakAfterOpeningBrace",
          node: n,
          loc: o.loc,
          fix(p) {
            return f ? null : p.insertTextAfter(o, `
`);
          }
        }), E.isTokenOnSameLine(u, l) && t4.report({
          messageId: "expectedLinebreakBeforeClosingBrace",
          node: n,
          loc: l.loc,
          fix(p) {
            return h ? null : p.insertTextBefore(l, `
`);
          }
        });
      else {
        const p = a.consistent, m = !E.isTokenOnSameLine(o, i), d = !E.isTokenOnSameLine(u, l);
        (!p && m || p && m && !d) && t4.report({
          messageId: "unexpectedLinebreakAfterOpeningBrace",
          node: n,
          loc: o.loc,
          fix(g) {
            return f ? null : g.removeRange([o.range[1], i.range[0]]);
          }
        }), (!p && d || p && !m && d) && t4.report({
          messageId: "unexpectedLinebreakBeforeClosingBrace",
          node: n,
          loc: l.loc,
          fix(g) {
            return h ? null : g.removeRange([u.range[1], l.range[0]]);
          }
        });
      }
    }
    return {
      ObjectExpression: s,
      ObjectPattern: s,
      ImportDeclaration: s,
      ExportNamedDeclaration: s
    };
  }
};
om.meta;
om.create;
var lm = {
  meta: {
    type: "layout",
    docs: {
      description: "enforce consistent spacing inside braces",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/object-curly-spacing"
    },
    fixable: "whitespace",
    schema: [{
      enum: ["always", "never"]
    }, {
      type: "object",
      properties: {
        arraysInObjects: {
          type: "boolean"
        },
        objectsInObjects: {
          type: "boolean"
        }
      },
      additionalProperties: false
    }],
    messages: {
      requireSpaceBefore: "A space is required before '{{token}}'.",
      requireSpaceAfter: "A space is required after '{{token}}'.",
      unexpectedSpaceBefore: "There should be no space before '{{token}}'.",
      unexpectedSpaceAfter: "There should be no space after '{{token}}'."
    }
  },
  create(t4) {
    const e = t4.options[0] === "always", r = t4.getSourceCode();
    function s(h) {
      return t4.options[1] ? t4.options[1][h] === !e : false;
    }
    const n = {
      spaced: e,
      arraysInObjectsException: s("arraysInObjects"),
      objectsInObjectsException: s("objectsInObjects")
    };
    function a(h, p) {
      const m = t4.getSourceCode().getTokenAfter(p, {
        includeComments: true
      });
      t4.report({
        node: h,
        loc: {
          start: p.loc.end,
          end: m.loc.start
        },
        messageId: "unexpectedSpaceAfter",
        data: {
          token: p.value
        },
        fix(d) {
          return d.removeRange([p.range[1], m.range[0]]);
        }
      });
    }
    function o(h, p) {
      const m = t4.getSourceCode().getTokenBefore(p, {
        includeComments: true
      });
      t4.report({
        node: h,
        loc: {
          start: m.loc.end,
          end: p.loc.start
        },
        messageId: "unexpectedSpaceBefore",
        data: {
          token: p.value
        },
        fix(d) {
          return d.removeRange([m.range[1], p.range[0]]);
        }
      });
    }
    function l(h, p) {
      t4.report({
        node: h,
        loc: p.loc,
        messageId: "requireSpaceAfter",
        data: {
          token: p.value
        },
        fix(m) {
          return m.insertTextAfter(p, " ");
        }
      });
    }
    function i(h, p) {
      t4.report({
        node: h,
        loc: p.loc,
        messageId: "requireSpaceBefore",
        data: {
          token: p.value
        },
        fix(m) {
          return m.insertTextBefore(p, " ");
        }
      });
    }
    function u(h, p, m, d, g) {
      if (E.isTokenOnSameLine(p, m)) {
        const y = r.isSpaceBetweenTokens(p, m);
        n.spaced && !y && l(h, p), !n.spaced && y && m.type !== "Line" && a(h, p);
      }
      if (E.isTokenOnSameLine(d, g)) {
        const x = (n.arraysInObjectsException && E.isClosingBracketToken(d) || n.objectsInObjectsException && E.isClosingBraceToken(d)) && r.getNodeByRangeIndex(d.range[0]).type, A = n.arraysInObjectsException && x === "ArrayExpression" || n.objectsInObjectsException && (x === "ObjectExpression" || x === "ObjectPattern") ? !n.spaced : n.spaced, b = r.isSpaceBetweenTokens(d, g);
        A && !b && i(h, g), !A && b && o(h, g);
      }
    }
    function c(h) {
      const p = h.properties[h.properties.length - 1];
      return r.getTokenAfter(p, E.isClosingBraceToken);
    }
    function f(h) {
      if (h.properties.length === 0)
        return;
      const p = r.getFirstToken(h), m = c(h), d = r.getTokenAfter(p, {
        includeComments: true
      }), g = r.getTokenBefore(m, {
        includeComments: true
      });
      u(h, p, d, g, m);
    }
    return {
      ObjectPattern: f,
      ObjectExpression: f,
      ImportDeclaration: function(h) {
        if (h.specifiers.length === 0)
          return;
        let p = h.specifiers[0];
        const m = h.specifiers[h.specifiers.length - 1];
        if (m.type !== "ImportSpecifier")
          return;
        p.type !== "ImportSpecifier" && (p = h.specifiers[1]);
        const d = r.getTokenBefore(p), g = r.getTokenAfter(m, E.isNotCommaToken), y = r.getTokenAfter(d, {
          includeComments: true
        }), x = r.getTokenBefore(g, {
          includeComments: true
        });
        u(h, d, y, x, g);
      },
      ExportNamedDeclaration: function(h) {
        if (h.specifiers.length === 0)
          return;
        const p = h.specifiers[0], m = h.specifiers[h.specifiers.length - 1], d = r.getTokenBefore(p), g = r.getTokenAfter(m, E.isNotCommaToken), y = r.getTokenAfter(d, {
          includeComments: true
        }), x = r.getTokenBefore(g, {
          includeComments: true
        });
        u(h, d, y, x, g);
      }
    };
  }
};
lm.meta;
lm.create;
var um = {
  meta: {
    type: "layout",
    docs: {
      description: "enforce placing object properties on separate lines",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/object-property-newline"
    },
    schema: [{
      type: "object",
      properties: {
        allowAllPropertiesOnSameLine: {
          type: "boolean",
          default: false
        },
        allowMultiplePropertiesPerLine: {
          type: "boolean",
          default: false
        }
      },
      additionalProperties: false
    }],
    fixable: "whitespace",
    messages: {
      propertiesOnNewlineAll: "Object properties must go on a new line if they aren't all on the same line.",
      propertiesOnNewline: "Object properties must go on a new line."
    }
  },
  create(t4) {
    const e = t4.options[0] && (t4.options[0].allowAllPropertiesOnSameLine || t4.options[0].allowMultiplePropertiesPerLine), r = e ? "propertiesOnNewlineAll" : "propertiesOnNewline", s = t4.getSourceCode();
    return {
      ObjectExpression(n) {
        if (e && n.properties.length > 1) {
          const a = s.getFirstToken(n.properties[0]), o = s.getLastToken(n.properties[n.properties.length - 1]);
          if (a.loc.end.line === o.loc.start.line)
            return;
        }
        for (let a = 1; a < n.properties.length; a++) {
          const o = s.getLastToken(n.properties[a - 1]), l = s.getFirstToken(n.properties[a]);
          o.loc.end.line === l.loc.start.line && t4.report({
            node: n,
            loc: l.loc,
            messageId: r,
            fix(i) {
              const c = [s.getTokenBefore(l).range[1], l.range[0]];
              return s.text.slice(c[0], c[1]).trim() ? null : i.replaceTextRange(c, `
`);
            }
          });
        }
      }
    };
  }
};
um.meta;
um.create;
var Jr = {
  always: "always",
  never: "never",
  methods: "methods",
  properties: "properties",
  consistent: "consistent",
  consistentAsNeeded: "consistent-as-needed"
};
var cm = {
  meta: {
    type: "suggestion",
    docs: {
      description: "require or disallow method and property shorthand syntax for object literals",
      category: "ECMAScript 6",
      recommended: false,
      url: "https://eslint.org/docs/rules/object-shorthand"
    },
    fixable: "code",
    schema: {
      anyOf: [{
        type: "array",
        items: [{
          enum: ["always", "methods", "properties", "never", "consistent", "consistent-as-needed"]
        }],
        minItems: 0,
        maxItems: 1
      }, {
        type: "array",
        items: [{
          enum: ["always", "methods", "properties"]
        }, {
          type: "object",
          properties: {
            avoidQuotes: {
              type: "boolean"
            }
          },
          additionalProperties: false
        }],
        minItems: 0,
        maxItems: 2
      }, {
        type: "array",
        items: [{
          enum: ["always", "methods"]
        }, {
          type: "object",
          properties: {
            ignoreConstructors: {
              type: "boolean"
            },
            avoidQuotes: {
              type: "boolean"
            },
            avoidExplicitReturnArrows: {
              type: "boolean"
            }
          },
          additionalProperties: false
        }],
        minItems: 0,
        maxItems: 2
      }]
    },
    messages: {
      expectedAllPropertiesShorthanded: "Expected shorthand for all properties.",
      expectedLiteralMethodLongform: "Expected longform method syntax for string literal keys.",
      expectedPropertyShorthand: "Expected property shorthand.",
      expectedPropertyLongform: "Expected longform property syntax.",
      expectedMethodShorthand: "Expected method shorthand.",
      expectedMethodLongform: "Expected longform method syntax.",
      unexpectedMix: "Unexpected mix of shorthand and non-shorthand properties."
    }
  },
  create(t4) {
    const e = t4.options[0] || Jr.always, r = e === Jr.methods || e === Jr.always, s = e === Jr.properties || e === Jr.always, n = e === Jr.never, a = e === Jr.consistent, o = e === Jr.consistentAsNeeded, l = t4.options[1] || {}, i = l.ignoreConstructors, u = l.avoidQuotes, c = !!l.avoidExplicitReturnArrows, f = t4.getSourceCode();
    function h(I) {
      const _ = /[^_$0-9]/u.exec(I);
      if (!_)
        return false;
      const S = I.charAt(_.index);
      return S === S.toUpperCase();
    }
    function p(I) {
      return I.kind !== "set" && I.kind !== "get" && I.type !== "SpreadElement" && I.type !== "SpreadProperty" && I.type !== "ExperimentalSpreadProperty";
    }
    function m(I) {
      return I.type === "Literal" && typeof I.value == "string";
    }
    function d(I) {
      return I.shorthand || I.method;
    }
    function g(I) {
      const _ = I.value;
      return _.type === "FunctionExpression" ? !_.id : _.type === "Identifier" ? E.getStaticPropertyName(I) === _.name : false;
    }
    function y(I, _) {
      const S = I.properties.filter(p);
      if (S.length > 0) {
        const F = S.filter(d);
        F.length !== S.length && (F.length > 0 ? t4.report({
          node: I,
          messageId: "unexpectedMix"
        }) : _ && S.every(g) && t4.report({
          node: I,
          messageId: "expectedAllPropertiesShorthanded"
        }));
      }
    }
    function x(I, _) {
      const S = _.computed ? f.getFirstToken(_, E.isOpeningBracketToken) : f.getFirstToken(_.key), F = _.computed ? f.getFirstTokenBetween(_.key, _.value, E.isClosingBracketToken) : f.getLastToken(_.key), N = f.text.slice(S.range[0], F.range[1]);
      let k = "";
      if (f.commentsExistBetween(F, _.value))
        return null;
      _.value.async && (k += "async "), _.value.generator && (k += "*");
      const j = [S.range[0], _.range[1]], O = k + N;
      if (_.value.type === "FunctionExpression") {
        const H = f.getTokens(_.value).find((ge) => ge.type === "Keyword" && ge.value === "function"), Q = _.value.generator ? f.getTokenAfter(H) : H;
        return I.replaceTextRange(j, O + f.text.slice(Q.range[1], _.value.range[1]));
      }
      const z = f.getTokenBefore(_.value.body, E.isArrowToken), te = f.text.slice(z.range[1], _.value.range[1]);
      let se = false, ye;
      if (_.value.params.length === 0 ? ye = f.getFirstToken(_.value, E.isOpeningParenToken) : ye = f.getTokenBefore(_.value.params[0]), _.value.params.length === 1) {
        const H = E.isOpeningParenToken(ye), Q = ye.range[0] < _.range[0];
        se = !H || Q;
      }
      const Se = se ? _.value.params[0].range[0] : ye.range[0], xe = f.getTokenBefore(z).range[1], Ae = f.text.slice(Se, xe), _e = se ? `(${Ae})` : Ae;
      return I.replaceTextRange(j, O + _e + te);
    }
    function A(I, _) {
      const S = _.computed ? f.getTokens(_).find((j) => j.value === "[") : f.getFirstToken(_.key), F = _.computed ? f.getTokensBetween(_.key, _.value).find((j) => j.value === "]") : f.getLastToken(_.key), N = f.text.slice(S.range[0], F.range[1]);
      let k = "function";
      return _.value.async && (k = `async ${k}`), _.value.generator && (k = `${k}*`), I.replaceTextRange([_.range[0], F.range[1]], `${N}: ${k}`);
    }
    const b = [], v = /* @__PURE__ */ new WeakSet(), C = /* @__PURE__ */ new WeakSet();
    function T() {
      b.unshift(/* @__PURE__ */ new Set()), t4.getScope().variables.filter((I) => I.name === "arguments").forEach((I) => {
        I.references.map((_) => _.identifier).forEach((_) => C.add(_));
      });
    }
    function w() {
      b.shift();
    }
    function B() {
      b[0].forEach((I) => v.add(I));
    }
    return {
      Program: T,
      FunctionDeclaration: T,
      FunctionExpression: T,
      "Program:exit": w,
      "FunctionDeclaration:exit": w,
      "FunctionExpression:exit": w,
      ArrowFunctionExpression(I) {
        b[0].add(I);
      },
      "ArrowFunctionExpression:exit"(I) {
        b[0].delete(I);
      },
      ThisExpression: B,
      Super: B,
      MetaProperty(I) {
        I.meta.name === "new" && I.property.name === "target" && B();
      },
      Identifier(I) {
        C.has(I) && B();
      },
      ObjectExpression(I) {
        a ? y(I, false) : o && y(I, true);
      },
      "Property:exit"(I) {
        const _ = I.method || I.shorthand;
        if (I.parent.type !== "ObjectPattern" && !(I.kind === "get" || I.kind === "set") && !(I.computed && I.value.type !== "FunctionExpression" && I.value.type !== "ArrowFunctionExpression")) {
          if (_)
            if (I.method && (n || u && m(I.key))) {
              const S = n ? "expectedMethodLongform" : "expectedLiteralMethodLongform";
              t4.report({
                node: I,
                messageId: S,
                fix: (F) => A(F, I)
              });
            } else
              n && t4.report({
                node: I,
                messageId: "expectedPropertyLongform",
                fix: (S) => S.insertTextAfter(I.key, `: ${I.key.name}`)
              });
          else if (r && !I.value.id && (I.value.type === "FunctionExpression" || I.value.type === "ArrowFunctionExpression")) {
            if (i && I.key.type === "Identifier" && h(I.key.name) || u && m(I.key))
              return;
            (I.value.type === "FunctionExpression" || I.value.type === "ArrowFunctionExpression" && I.value.body.type === "BlockStatement" && c && !v.has(I.value)) && t4.report({
              node: I,
              messageId: "expectedMethodShorthand",
              fix: (S) => x(S, I)
            });
          } else if (I.value.type === "Identifier" && I.key.name === I.value.name && s)
            t4.report({
              node: I,
              messageId: "expectedPropertyShorthand",
              fix(S) {
                return S.replaceText(I, I.value.name);
              }
            });
          else if (I.value.type === "Identifier" && I.key.type === "Literal" && I.key.value === I.value.name && s) {
            if (u)
              return;
            t4.report({
              node: I,
              messageId: "expectedPropertyShorthand",
              fix(S) {
                return S.replaceText(I, I.value.name);
              }
            });
          }
        }
      }
    };
  }
};
cm.meta;
cm.create;
var pm = {
  meta: {
    type: "suggestion",
    docs: {
      description: "require or disallow newlines around variable declarations",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/one-var-declaration-per-line"
    },
    schema: [{
      enum: ["always", "initializations"]
    }],
    fixable: "whitespace",
    messages: {
      expectVarOnNewline: "Expected variable declaration to be on a new line."
    }
  },
  create(t4) {
    const e = t4.options[0] === "always";
    function r(s) {
      return s === "ForStatement" || s === "ForInStatement" || s === "ForOfStatement";
    }
    return {
      VariableDeclaration: function(s) {
        if (r(s.parent.type))
          return;
        const n = s.declarations;
        let a;
        n.forEach((o) => {
          a && a.loc.end.line === o.loc.start.line && (e || a.init || o.init) && t4.report({
            node: s,
            messageId: "expectVarOnNewline",
            loc: o.loc,
            fix: (l) => l.insertTextBefore(o, `
`)
          }), a = o;
        });
      }
    };
  }
};
pm.meta;
pm.create;
function j6(t4) {
  return E.STATEMENT_LIST_PARENTS.has(t4.parent.type);
}
var fm = {
  meta: {
    type: "suggestion",
    docs: {
      description: "enforce variables to be declared either together or separately in functions",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/one-var"
    },
    fixable: "code",
    schema: [{
      oneOf: [{
        enum: ["always", "never", "consecutive"]
      }, {
        type: "object",
        properties: {
          separateRequires: {
            type: "boolean"
          },
          var: {
            enum: ["always", "never", "consecutive"]
          },
          let: {
            enum: ["always", "never", "consecutive"]
          },
          const: {
            enum: ["always", "never", "consecutive"]
          }
        },
        additionalProperties: false
      }, {
        type: "object",
        properties: {
          initialized: {
            enum: ["always", "never", "consecutive"]
          },
          uninitialized: {
            enum: ["always", "never", "consecutive"]
          }
        },
        additionalProperties: false
      }]
    }],
    messages: {
      combineUninitialized: "Combine this with the previous '{{type}}' statement with uninitialized variables.",
      combineInitialized: "Combine this with the previous '{{type}}' statement with initialized variables.",
      splitUninitialized: "Split uninitialized '{{type}}' declarations into multiple statements.",
      splitInitialized: "Split initialized '{{type}}' declarations into multiple statements.",
      splitRequires: "Split requires to be separated into a single block.",
      combine: "Combine this with the previous '{{type}}' statement.",
      split: "Split '{{type}}' declarations into multiple statements."
    }
  },
  create(t4) {
    const e = "always", r = "never", s = "consecutive", n = t4.options[0] || "always", a = {};
    typeof n == "string" ? (a.var = {
      uninitialized: n,
      initialized: n
    }, a.let = {
      uninitialized: n,
      initialized: n
    }, a.const = {
      uninitialized: n,
      initialized: n
    }) : typeof n == "object" && (a.separateRequires = !!n.separateRequires, a.var = {
      uninitialized: n.var,
      initialized: n.var
    }, a.let = {
      uninitialized: n.let,
      initialized: n.let
    }, a.const = {
      uninitialized: n.const,
      initialized: n.const
    }, Object.prototype.hasOwnProperty.call(n, "uninitialized") && (a.var.uninitialized = n.uninitialized, a.let.uninitialized = n.uninitialized, a.const.uninitialized = n.uninitialized), Object.prototype.hasOwnProperty.call(n, "initialized") && (a.var.initialized = n.initialized, a.let.initialized = n.initialized, a.const.initialized = n.initialized));
    const o = t4.getSourceCode(), l = [], i = [];
    function u() {
      i.push({
        let: {
          initialized: false,
          uninitialized: false
        },
        const: {
          initialized: false,
          uninitialized: false
        }
      });
    }
    function c() {
      l.push({
        initialized: false,
        uninitialized: false
      }), u();
    }
    function f() {
      i.pop();
    }
    function h() {
      l.pop(), f();
    }
    function p(b) {
      return b.init && b.init.type === "CallExpression" && b.init.callee.name === "require";
    }
    function m(b, v, C) {
      for (let T = 0; T < v.length; T++)
        v[T].init === null ? a[b] && a[b].uninitialized === e && (C.uninitialized = true) : a[b] && a[b].initialized === e && (a.separateRequires && p(v[T]) ? C.required = true : C.initialized = true);
    }
    function d(b) {
      let v;
      return b === "var" ? v = l[l.length - 1] : b === "let" ? v = i[i.length - 1].let : b === "const" && (v = i[i.length - 1].const), v;
    }
    function g(b) {
      const v = {
        uninitialized: 0,
        initialized: 0
      };
      for (let C = 0; C < b.length; C++)
        b[C].init === null ? v.uninitialized++ : v.initialized++;
      return v;
    }
    function y(b, v) {
      const C = g(v), T = a[b] || {}, w = d(b), B = v.some(p);
      return T.uninitialized === e && T.initialized === e && (w.uninitialized || w.initialized) && !B || C.uninitialized > 0 && T.uninitialized === e && w.uninitialized || C.initialized > 0 && T.initialized === e && w.initialized && !B || w.required && B ? false : (m(b, v, w), true);
    }
    function x(b) {
      const v = b[0], C = Array.isArray(v.parent.parent.body) ? v.parent.parent.body : [], T = C.findIndex((B) => B.range[0] === v.parent.range[0]), w = C[T - 1];
      return (B) => {
        const I = o.getTokenBefore(v), _ = o.getTokenBefore(I), S = [];
        return w && w.kind === o.getText(I) && (_.value === ";" ? S.push(B.replaceText(_, ",")) : S.push(B.insertTextAfter(_, ",")), S.push(B.replaceText(I, ""))), S;
      };
    }
    function A(b) {
      const {
        parent: v
      } = b;
      return j6(v.type === "ExportNamedDeclaration" ? v : b) ? (C) => b.declarations.map((T) => {
        const w = o.getTokenAfter(T);
        if (w === null)
          return null;
        const B = o.getTokenAfter(w, {
          includeComments: true
        });
        if (w.value !== ",")
          return null;
        const I = b.parent.type === "ExportNamedDeclaration" ? "export " : "";
        if (B.range[0] === w.range[1])
          return C.replaceText(w, `; ${I}${b.kind} `);
        if (B.loc.start.line > w.loc.end.line || B.type === "Line" || B.type === "Block") {
          let _ = B;
          for (; _.type === "Line" || _.type === "Block"; )
            _ = o.getTokenAfter(_, {
              includeComments: true
            });
          return C.replaceTextRange([w.range[0], _.range[0]], `;${o.text.slice(w.range[1], _.range[0])}${I}${b.kind} `);
        }
        return C.replaceText(w, `; ${I}${b.kind}`);
      }).filter((T) => T) : null;
    }
    return {
      Program: c,
      FunctionDeclaration: c,
      FunctionExpression: c,
      ArrowFunctionExpression: c,
      BlockStatement: u,
      ForStatement: u,
      ForInStatement: u,
      ForOfStatement: u,
      SwitchStatement: u,
      VariableDeclaration: function(b) {
        const v = b.parent, C = b.kind;
        if (!a[C])
          return;
        const T = b.declarations, w = g(T), B = T.some(p) && !T.every(p);
        a[C].initialized === e && a.separateRequires && B && t4.report({
          node: b,
          messageId: "splitRequires"
        });
        const I = v.body && v.body.length > 0 && v.body.indexOf(b) || 0;
        if (I > 0) {
          const _ = v.body[I - 1], S = _.type === "VariableDeclaration", F = T.concat(_.declarations || []);
          if (S && _.kind === C && !(F.some(p) && !F.every(p))) {
            const N = g(_.declarations);
            a[C].initialized === s && a[C].uninitialized === s ? t4.report({
              node: b,
              messageId: "combine",
              data: {
                type: C
              },
              fix: x(T)
            }) : a[C].initialized === s && w.initialized > 0 && N.initialized > 0 ? t4.report({
              node: b,
              messageId: "combineInitialized",
              data: {
                type: C
              },
              fix: x(T)
            }) : a[C].uninitialized === s && w.uninitialized > 0 && N.uninitialized > 0 && t4.report({
              node: b,
              messageId: "combineUninitialized",
              data: {
                type: C
              },
              fix: x(T)
            });
          }
        }
        if (!y(C, T)) {
          if (a[C].initialized === e && a[C].uninitialized === e)
            t4.report({
              node: b,
              messageId: "combine",
              data: {
                type: C
              },
              fix: x(T)
            });
          else if (a[C].initialized === e && w.initialized > 0 && t4.report({
            node: b,
            messageId: "combineInitialized",
            data: {
              type: C
            },
            fix: x(T)
          }), a[C].uninitialized === e && w.uninitialized > 0) {
            if (b.parent.left === b && (b.parent.type === "ForInStatement" || b.parent.type === "ForOfStatement"))
              return;
            t4.report({
              node: b,
              messageId: "combineUninitialized",
              data: {
                type: C
              },
              fix: x(T)
            });
          }
        }
        (v.type !== "ForStatement" || v.init !== b) && w.uninitialized + w.initialized > 1 && (a[C].initialized === r && a[C].uninitialized === r ? t4.report({
          node: b,
          messageId: "split",
          data: {
            type: C
          },
          fix: A(b)
        }) : a[C].initialized === r && w.initialized > 0 ? t4.report({
          node: b,
          messageId: "splitInitialized",
          data: {
            type: C
          },
          fix: A(b)
        }) : a[C].uninitialized === r && w.uninitialized > 0 && t4.report({
          node: b,
          messageId: "splitUninitialized",
          data: {
            type: C
          },
          fix: A(b)
        }));
      },
      "ForStatement:exit": f,
      "ForOfStatement:exit": f,
      "ForInStatement:exit": f,
      "SwitchStatement:exit": f,
      "BlockStatement:exit": f,
      "Program:exit": h,
      "FunctionDeclaration:exit": h,
      "FunctionExpression:exit": h,
      "ArrowFunctionExpression:exit": h
    };
  }
};
fm.meta;
fm.create;
function r0(t4) {
  return ["*", "&", "^", "|"].indexOf(t4) >= 0;
}
function M6(t4) {
  return ["+", "-", "/", "%", "<<", ">>", ">>>", "**"].indexOf(t4) >= 0;
}
function Ho(t4) {
  return t4.type === "Identifier" || t4.type === "MemberExpression" && (t4.object.type === "Identifier" || t4.object.type === "ThisExpression") && (!t4.computed || t4.property.type === "Literal");
}
var hm = {
  meta: {
    type: "suggestion",
    docs: {
      description: "require or disallow assignment operator shorthand where possible",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/operator-assignment"
    },
    schema: [{
      enum: ["always", "never"]
    }],
    fixable: "code",
    messages: {
      replaced: "Assignment (=) can be replaced with operator assignment ({{operator}}=).",
      unexpected: "Unexpected operator assignment ({{operator}}=) shorthand."
    }
  },
  create(t4) {
    const e = t4.getSourceCode();
    function r(s) {
      return e.getFirstTokenBetween(s.left, s.right, (n) => n.value === s.operator);
    }
    return {
      AssignmentExpression: t4.options[0] !== "never" ? function(s) {
        if (s.operator !== "=" || s.right.type !== "BinaryExpression")
          return;
        const n = s.left, a = s.right, o = a.operator;
        (r0(o) || M6(o)) && (E.isSameReference(n, a.left, true) ? t4.report({
          node: s,
          messageId: "replaced",
          data: {
            operator: o
          },
          fix(l) {
            if (Ho(n) && Ho(a.left)) {
              const i = r(s), u = r(a), c = e.getText().slice(s.range[0], i.range[0]), f = e.getText().slice(u.range[1], s.right.range[1]);
              return e.commentsExistBetween(i, u) ? null : l.replaceText(s, `${c}${a.operator}=${f}`);
            }
            return null;
          }
        }) : E.isSameReference(n, a.right, true) && r0(o) && t4.report({
          node: s,
          messageId: "replaced",
          data: {
            operator: o
          }
        }));
      } : function(s) {
        s.operator !== "=" && !E.isLogicalAssignmentOperator(s.operator) && t4.report({
          node: s,
          messageId: "unexpected",
          data: {
            operator: s.operator
          },
          fix(n) {
            if (Ho(s.left)) {
              const a = e.getFirstToken(s), o = r(s), l = e.getText().slice(s.range[0], o.range[0]), i = s.operator.slice(0, -1);
              let u;
              if (e.commentsExistBetween(a, o))
                return null;
              if (E.getPrecedence(s.right) <= E.getPrecedence({
                type: "BinaryExpression",
                operator: i
              }) && !E.isParenthesised(e, s.right))
                u = `${e.text.slice(o.range[1], s.right.range[0])}(${e.getText(s.right)})`;
              else {
                const c = e.getTokenAfter(o, {
                  includeComments: true
                });
                let f = "";
                o.range[1] === c.range[0] && !E.canTokensBeAdjacent({
                  type: "Punctuator",
                  value: i
                }, c) && (f = " "), u = `${f}${e.text.slice(o.range[1], s.range[1])}`;
              }
              return n.replaceText(s, `${l}= ${l}${i}${u}`);
            }
            return null;
          }
        });
      }
    };
  }
};
hm.meta;
hm.create;
var mm = {
  meta: {
    type: "layout",
    docs: {
      description: "enforce consistent linebreak style for operators",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/operator-linebreak"
    },
    schema: [{
      enum: ["after", "before", "none", null]
    }, {
      type: "object",
      properties: {
        overrides: {
          type: "object",
          additionalProperties: {
            enum: ["after", "before", "none", "ignore"]
          }
        }
      },
      additionalProperties: false
    }],
    fixable: "code",
    messages: {
      operatorAtBeginning: "'{{operator}}' should be placed at the beginning of the line.",
      operatorAtEnd: "'{{operator}}' should be placed at the end of the line.",
      badLinebreak: "Bad line breaking before and after '{{operator}}'.",
      noLinebreak: "There should be no line break before or after '{{operator}}'."
    }
  },
  create(t4) {
    const e = !t4.options[0], r = t4.options[0] || "after", s = t4.options[1] || {}, n = s.overrides ? Object.assign({}, s.overrides) : {};
    e && !n["?"] && (n["?"] = "before"), e && !n[":"] && (n[":"] = "before");
    const a = t4.getSourceCode();
    function o(u, c) {
      return (f) => {
        const h = a.getTokenBefore(u), p = a.getTokenAfter(u), m = a.text.slice(h.range[1], u.range[0]), d = a.text.slice(u.range[1], p.range[0]), g = !E.isTokenOnSameLine(h, u), y = !E.isTokenOnSameLine(u, p);
        let x, A;
        if (g !== y && c !== "none") {
          if (a.getTokenBefore(u, {
            includeComments: true
          }) !== h && a.getTokenAfter(u, {
            includeComments: true
          }) !== p)
            return null;
          x = d, A = m;
        } else {
          const b = E.createGlobalLinebreakMatcher();
          if (x = c === "before" || m.trim() ? m : m.replace(b, ""), A = c === "after" || d.trim() ? d : d.replace(b, ""), x === m && A === d)
            return null;
        }
        return A === "" && p.type === "Punctuator" && "+-".includes(u.value) && p.value === u.value && (A += " "), f.replaceTextRange([h.range[1], p.range[0]], x + u.value + A);
      };
    }
    function l(u, c) {
      const f = a.getTokenAfter(c, E.isNotClosingParenToken), h = a.getTokenBefore(f), p = a.getTokenAfter(f), m = f.value, d = n[m], g = d || r, y = o(f, g);
      E.isTokenOnSameLine(h, f) && E.isTokenOnSameLine(f, p) || (d !== "ignore" && !E.isTokenOnSameLine(h, f) && !E.isTokenOnSameLine(f, p) ? t4.report({
        node: u,
        loc: f.loc,
        messageId: "badLinebreak",
        data: {
          operator: m
        },
        fix: y
      }) : g === "before" && E.isTokenOnSameLine(h, f) ? t4.report({
        node: u,
        loc: f.loc,
        messageId: "operatorAtBeginning",
        data: {
          operator: m
        },
        fix: y
      }) : g === "after" && E.isTokenOnSameLine(f, p) ? t4.report({
        node: u,
        loc: f.loc,
        messageId: "operatorAtEnd",
        data: {
          operator: m
        },
        fix: y
      }) : g === "none" && t4.report({
        node: u,
        loc: f.loc,
        messageId: "noLinebreak",
        data: {
          operator: m
        },
        fix: y
      }));
    }
    function i(u) {
      l(u, u.left);
    }
    return {
      BinaryExpression: i,
      LogicalExpression: i,
      AssignmentExpression: i,
      VariableDeclarator(u) {
        u.init && l(u, u.id);
      },
      ConditionalExpression(u) {
        l(u, u.test), l(u, u.consequent);
      }
    };
  }
};
mm.meta;
mm.create;
var dm = {
  meta: {
    type: "layout",
    docs: {
      description: "require or disallow padding within blocks",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/padded-blocks"
    },
    fixable: "whitespace",
    schema: [{
      oneOf: [{
        enum: ["always", "never"]
      }, {
        type: "object",
        properties: {
          blocks: {
            enum: ["always", "never"]
          },
          switches: {
            enum: ["always", "never"]
          },
          classes: {
            enum: ["always", "never"]
          }
        },
        additionalProperties: false,
        minProperties: 1
      }]
    }, {
      type: "object",
      properties: {
        allowSingleLineBlocks: {
          type: "boolean"
        }
      },
      additionalProperties: false
    }],
    messages: {
      alwaysPadBlock: "Block must be padded by blank lines.",
      neverPadBlock: "Block must not be padded by blank lines."
    }
  },
  create(t4) {
    const e = {}, r = t4.options[0] || "always", s = t4.options[1] || {};
    if (typeof r == "string") {
      const p = r === "always";
      e.blocks = p, e.switches = p, e.classes = p;
    } else
      Object.prototype.hasOwnProperty.call(r, "blocks") && (e.blocks = r.blocks === "always"), Object.prototype.hasOwnProperty.call(r, "switches") && (e.switches = r.switches === "always"), Object.prototype.hasOwnProperty.call(r, "classes") && (e.classes = r.classes === "always");
    Object.prototype.hasOwnProperty.call(s, "allowSingleLineBlocks") && (e.allowSingleLineBlocks = s.allowSingleLineBlocks === true);
    const n = t4.getSourceCode();
    function a(p) {
      return p.type === "SwitchStatement" ? n.getTokenBefore(p.cases[0]) : n.getFirstToken(p);
    }
    function o(p) {
      return p.type === "Line" || p.type === "Block";
    }
    function l(p, m) {
      return m.loc.start.line - p.loc.end.line >= 2;
    }
    function i(p) {
      let m, d = p;
      do
        m = d, d = n.getTokenAfter(d, {
          includeComments: true
        });
      while (o(d) && d.loc.start.line === m.loc.end.line);
      return d;
    }
    function u(p) {
      let m = p, d;
      do
        d = m, m = n.getTokenBefore(m, {
          includeComments: true
        });
      while (o(m) && m.loc.end.line === d.loc.start.line);
      return m;
    }
    function c(p) {
      switch (p.type) {
        case "BlockStatement":
          return e.blocks;
        case "SwitchStatement":
          return e.switches;
        case "ClassBody":
          return e.classes;
        default:
          throw new Error("unreachable");
      }
    }
    function f(p) {
      const m = a(p), d = i(m), g = n.getTokenBefore(d, {
        includeComments: true
      }), y = n.getLastToken(p), x = u(y), A = n.getTokenAfter(x, {
        includeComments: true
      }), b = l(g, d), v = l(x, A);
      e.allowSingleLineBlocks && E.isTokenOnSameLine(g, A) || (c(p) ? (b || t4.report({
        node: p,
        loc: {
          start: g.loc.start,
          end: d.loc.start
        },
        fix(C) {
          return C.insertTextAfter(g, `
`);
        },
        messageId: "alwaysPadBlock"
      }), v || t4.report({
        node: p,
        loc: {
          end: A.loc.start,
          start: x.loc.end
        },
        fix(C) {
          return C.insertTextBefore(A, `
`);
        },
        messageId: "alwaysPadBlock"
      })) : (b && t4.report({
        node: p,
        loc: {
          start: g.loc.start,
          end: d.loc.start
        },
        fix(C) {
          return C.replaceTextRange([g.range[1], d.range[0] - d.loc.start.column], `
`);
        },
        messageId: "neverPadBlock"
      }), v && t4.report({
        node: p,
        loc: {
          end: A.loc.start,
          start: x.loc.end
        },
        messageId: "neverPadBlock",
        fix(C) {
          return C.replaceTextRange([x.range[1], A.range[0] - A.loc.start.column], `
`);
        }
      })));
    }
    const h = {};
    return Object.prototype.hasOwnProperty.call(e, "switches") && (h.SwitchStatement = function(p) {
      p.cases.length !== 0 && f(p);
    }), Object.prototype.hasOwnProperty.call(e, "blocks") && (h.BlockStatement = function(p) {
      p.body.length !== 0 && f(p);
    }), Object.prototype.hasOwnProperty.call(e, "classes") && (h.ClassBody = function(p) {
      p.body.length !== 0 && f(p);
    }), h;
  }
};
dm.meta;
dm.create;
`${Array.from(E.LINEBREAKS).join("")}`;
var $6 = new RegExp("^(\\s*?)\\s*(\\s*;?)$", "u");
var V6 = /^(?:module\s*\.\s*)?exports(?:\s*\.|\s*\[|$)/u;
var U6 = /^require\(/u;
function Ct(t4) {
  return {
    test: (e, r) => r.getFirstToken(e).value === t4
  };
}
function Ko(t4) {
  return {
    test: (e, r) => e.loc.start.line === e.loc.end.line && r.getFirstToken(e).value === t4
  };
}
function Jo(t4) {
  return {
    test: (e, r) => e.loc.start.line !== e.loc.end.line && r.getFirstToken(e).value === t4
  };
}
function Xo(t4) {
  return {
    test: (e) => e.type === t4
  };
}
function Ob(t4) {
  if (t4.type === "ExpressionStatement") {
    let e = E.skipChainExpression(t4.expression);
    return e.type === "UnaryExpression" && (e = E.skipChainExpression(e.argument)), e.type === "CallExpression" && E.isFunction(e.callee);
  }
  return false;
}
function n0(t4, e) {
  if (e.type === "DoWhileStatement" && e.body.type === "BlockStatement" || Ob(e))
    return true;
  const r = t4.getLastToken(e, E.isNotSemicolonToken), s = r && E.isClosingBraceToken(r) ? t4.getNodeByRangeIndex(r.range[0]) : null;
  return !!s && (s.type === "BlockStatement" || s.type === "SwitchStatement");
}
function s0(t4, e) {
  return t4.type === "ExpressionStatement" && (t4.parent.type === "Program" || t4.parent.type === "BlockStatement" && E.isFunction(t4.parent.parent)) && t4.expression.type === "Literal" && typeof t4.expression.value == "string" && !E.isParenthesised(e, t4.expression);
}
function Qo(t4, e) {
  if (s0(t4, e)) {
    for (const r of t4.parent.body) {
      if (r === t4)
        break;
      if (!s0(r, e))
        return false;
    }
    return true;
  }
  return false;
}
function Lb(t4, e) {
  const r = t4.getLastToken(e), s = t4.getTokenBefore(r), n = t4.getTokenAfter(r);
  return !!(s && n && s.range[0] >= e.range[0] && E.isSemicolonToken(r) && r.loc.start.line !== s.loc.end.line && r.loc.end.line === n.loc.start.line) ? s : r;
}
function q6(t4, e, r) {
  return e + r;
}
function W6() {
}
function z6(t4, e, r, s) {
  s.length !== 0 && t4.report({
    node: r,
    messageId: "unexpectedBlankLine",
    fix(n) {
      if (s.length >= 2)
        return null;
      const a = s[0][0], o = s[0][1], l = a.range[1], i = o.range[0], u = t4.getSourceCode().text.slice(l, i).replace($6, q6);
      return n.replaceTextRange([l, i], u);
    }
  });
}
function G6(t4, e, r, s) {
  s.length > 0 || t4.report({
    node: r,
    messageId: "expectedBlankLine",
    fix(n) {
      const a = t4.getSourceCode();
      let o = Lb(a, e);
      const l = a.getFirstTokenBetween(o, r, {
        includeComments: true,
        filter(u) {
          return E.isTokenOnSameLine(o, u) ? (o = u, false) : true;
        }
      }) || r, i = E.isTokenOnSameLine(o, l) ? `

` : `
`;
      return n.insertTextAfter(o, i);
    }
  });
}
var Yo = {
  any: {
    verify: W6
  },
  never: {
    verify: z6
  },
  always: {
    verify: G6
  }
};
var Zo = {
  "*": {
    test: () => true
  },
  "block-like": {
    test: (t4, e) => n0(e, t4)
  },
  "cjs-export": {
    test: (t4, e) => t4.type === "ExpressionStatement" && t4.expression.type === "AssignmentExpression" && V6.test(e.getText(t4.expression.left))
  },
  "cjs-import": {
    test: (t4, e) => t4.type === "VariableDeclaration" && t4.declarations.length > 0 && !!t4.declarations[0].init && U6.test(e.getText(t4.declarations[0].init))
  },
  directive: {
    test: Qo
  },
  expression: {
    test: (t4, e) => t4.type === "ExpressionStatement" && !Qo(t4, e)
  },
  iife: {
    test: Ob
  },
  "multiline-block-like": {
    test: (t4, e) => t4.loc.start.line !== t4.loc.end.line && n0(e, t4)
  },
  "multiline-expression": {
    test: (t4, e) => t4.loc.start.line !== t4.loc.end.line && t4.type === "ExpressionStatement" && !Qo(t4, e)
  },
  "multiline-const": Jo("const"),
  "multiline-let": Jo("let"),
  "multiline-var": Jo("var"),
  "singleline-const": Ko("const"),
  "singleline-let": Ko("let"),
  "singleline-var": Ko("var"),
  block: Xo("BlockStatement"),
  empty: Xo("EmptyStatement"),
  function: Xo("FunctionDeclaration"),
  break: Ct("break"),
  case: Ct("case"),
  class: Ct("class"),
  const: Ct("const"),
  continue: Ct("continue"),
  debugger: Ct("debugger"),
  default: Ct("default"),
  do: Ct("do"),
  export: Ct("export"),
  for: Ct("for"),
  if: Ct("if"),
  import: Ct("import"),
  let: Ct("let"),
  return: Ct("return"),
  switch: Ct("switch"),
  throw: Ct("throw"),
  try: Ct("try"),
  var: Ct("var"),
  while: Ct("while"),
  with: Ct("with")
};
var gm = {
  meta: {
    type: "layout",
    docs: {
      description: "require or disallow padding lines between statements",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/padding-line-between-statements"
    },
    fixable: "whitespace",
    schema: {
      definitions: {
        paddingType: {
          enum: Object.keys(Yo)
        },
        statementType: {
          anyOf: [{
            enum: Object.keys(Zo)
          }, {
            type: "array",
            items: {
              enum: Object.keys(Zo)
            },
            minItems: 1,
            uniqueItems: true,
            additionalItems: false
          }]
        }
      },
      type: "array",
      items: {
        type: "object",
        properties: {
          blankLine: {
            $ref: "#/definitions/paddingType"
          },
          prev: {
            $ref: "#/definitions/statementType"
          },
          next: {
            $ref: "#/definitions/statementType"
          }
        },
        additionalProperties: false,
        required: ["blankLine", "prev", "next"]
      },
      additionalItems: false
    },
    messages: {
      unexpectedBlankLine: "Unexpected blank line before this statement.",
      expectedBlankLine: "Expected blank line before this statement."
    }
  },
  create(t4) {
    const e = t4.getSourceCode(), r = t4.options || [];
    let s = null;
    function n() {
      s = {
        upper: s,
        prevNode: null
      };
    }
    function a() {
      s = s.upper;
    }
    function o(c, f) {
      let h = c;
      for (; h.type === "LabeledStatement"; )
        h = h.body;
      return Array.isArray(f) ? f.some(o.bind(null, h)) : Zo[f].test(h, e);
    }
    function l(c, f) {
      for (let h = r.length - 1; h >= 0; --h) {
        const p = r[h];
        if (o(c, p.prev) && o(f, p.next))
          return Yo[p.blankLine];
      }
      return Yo.any;
    }
    function i(c, f) {
      const h = [];
      let p = Lb(e, c);
      if (f.loc.start.line - p.loc.end.line >= 2)
        do {
          const m = e.getTokenAfter(p, {
            includeComments: true
          });
          m.loc.start.line - p.loc.end.line >= 2 && h.push([p, m]), p = m;
        } while (p.range[0] < f.range[0]);
      return h;
    }
    function u(c) {
      const f = c.parent.type;
      if (!(E.STATEMENT_LIST_PARENTS.has(f) || f === "SwitchStatement"))
        return;
      const p = s.prevNode;
      if (p) {
        const m = l(p, c), d = i(p, c);
        m.verify(t4, p, c, d);
      }
      s.prevNode = c;
    }
    return {
      Program: n,
      BlockStatement: n,
      SwitchStatement: n,
      "Program:exit": a,
      "BlockStatement:exit": a,
      "SwitchStatement:exit": a,
      ":statement": u,
      SwitchCase: function(c) {
        u(c), n();
      },
      "SwitchCase:exit": a
    };
  }
};
gm.meta;
gm.create;
function H6(t4) {
  return t4 && t4.defs[0].type === "FunctionName";
}
function K6(t4, e, r) {
  return t4.meta.name === e && t4.property.name === r;
}
function J6(t4) {
  const e = t4.variables;
  for (let r = 0; r < e.length; ++r) {
    const s = e[r];
    if (s.name === "arguments")
      return s.identifiers.length === 0 ? s : null;
  }
  return null;
}
function X6(t4) {
  const e = {
    isCallback: false,
    isLexicalThis: false
  };
  let r = t4, s = t4.parent, n = false;
  for (; r; ) {
    switch (s.type) {
      case "LogicalExpression":
      case "ChainExpression":
      case "ConditionalExpression":
        break;
      case "MemberExpression":
        if (s.object === r && !s.property.computed && s.property.type === "Identifier" && s.property.name === "bind") {
          const a = s.parent.type === "ChainExpression" ? s.parent : s;
          if (E.isCallee(a))
            n || (n = true, e.isLexicalThis = a.parent.arguments.length === 1 && a.parent.arguments[0].type === "ThisExpression"), s = a.parent;
          else
            return e;
        } else
          return e;
        break;
      case "CallExpression":
      case "NewExpression":
        return s.callee !== r && (e.isCallback = true), e;
      default:
        return e;
    }
    r = s, s = s.parent;
  }
  throw new Error("unreachable");
}
function Q6(t4) {
  return t4.every((e) => e.type === "Identifier") && t4.length !== new Set(t4.map((e) => e.name)).size;
}
var ym = {
  meta: {
    type: "suggestion",
    docs: {
      description: "require using arrow functions for callbacks",
      category: "ECMAScript 6",
      recommended: false,
      url: "https://eslint.org/docs/rules/prefer-arrow-callback"
    },
    schema: [{
      type: "object",
      properties: {
        allowNamedFunctions: {
          type: "boolean",
          default: false
        },
        allowUnboundThis: {
          type: "boolean",
          default: true
        }
      },
      additionalProperties: false
    }],
    fixable: "code",
    messages: {
      preferArrowCallback: "Unexpected function expression."
    }
  },
  create(t4) {
    const e = t4.options[0] || {}, r = e.allowUnboundThis !== false, s = e.allowNamedFunctions, n = t4.getSourceCode();
    let a = [];
    function o() {
      a.push({
        this: false,
        super: false,
        meta: false
      });
    }
    function l() {
      return a.pop();
    }
    return {
      Program() {
        a = [];
      },
      ThisExpression() {
        const i = a[a.length - 1];
        i && (i.this = true);
      },
      Super() {
        const i = a[a.length - 1];
        i && (i.super = true);
      },
      MetaProperty(i) {
        const u = a[a.length - 1];
        u && K6(i, "new", "target") && (u.meta = true);
      },
      FunctionDeclaration: o,
      "FunctionDeclaration:exit": l,
      FunctionExpression: o,
      "FunctionExpression:exit"(i) {
        const u = l();
        if (s && i.id && i.id.name || i.generator)
          return;
        const c = t4.getDeclaredVariables(i)[0];
        if (H6(c) && c.references.length > 0)
          return;
        const f = J6(t4.getScope());
        if (f && f.references.length > 0)
          return;
        const h = X6(i);
        h.isCallback && (!r || !u.this || h.isLexicalThis) && !u.super && !u.meta && t4.report({
          node: i,
          messageId: "preferArrowCallback",
          *fix(p) {
            if (!h.isLexicalThis && u.this || Q6(i.params))
              return;
            if (h.isLexicalThis) {
              const y = i.parent;
              if (y.type !== "MemberExpression")
                return;
              const x = y.parent, A = n.getTokenAfter(y.object, E.isNotClosingParenToken), b = n.getLastToken(x);
              if (E.isParenthesised(n, y) || n.commentsExistBetween(A, b))
                return;
              yield p.removeRange([A.range[0], b.range[1]]);
            }
            const m = n.getFirstToken(i, i.async ? 1 : 0), d = n.getTokenAfter(m, E.isOpeningParenToken);
            n.commentsExistBetween(m, d) ? (yield p.remove(m), i.id && (yield p.remove(i.id))) : yield p.removeRange([m.range[0], d.range[0]]), yield p.insertTextBefore(i.body, "=> ");
            let g = h.isLexicalThis ? i.parent.parent : i;
            g.type === "ChainExpression" && (g = g.parent), g.parent.type !== "CallExpression" && g.parent.type !== "ConditionalExpression" && !E.isParenthesised(n, g) && !E.isParenthesised(n, i) && (yield p.insertTextBefore(g, "("), yield p.insertTextAfter(g, ")"));
          }
        });
      }
    };
  }
};
ym.meta;
ym.create;
var Rb = /^(?:.+?Pattern|RestElement|SpreadProperty|ExperimentalRestProperty|Property)$/u;
var Y6 = /^(?:Program|BlockStatement|SwitchCase)$/u;
var Z6 = /^(?:VariableDeclarator|AssignmentExpression)$/u;
function e8(t4) {
  return t4.parent.type === "ForStatement" && t4.parent.init === t4;
}
function t8(t4) {
  let e = t4.parent;
  for (; Rb.test(e.type); )
    e = e.parent;
  return e.type === "VariableDeclarator" || e.type === "AssignmentExpression" && e.parent.type === "ExpressionStatement" && Y6.test(e.parent.parent.type);
}
function a0(t4, e) {
  if (e.through.find((s) => s.resolved && s.resolved.name === t4))
    return true;
  const r = E.getVariableByName(e, t4);
  return r !== null ? r.defs.some((s) => s.type === "Parameter") : false;
}
function Nb(t4) {
  if (!t4.isWrite())
    return null;
  let e = t4.identifier.parent;
  for (; Rb.test(e.type); )
    e = e.parent;
  return Z6.test(e.type) ? e : null;
}
function Os(t4) {
  switch (t4.type) {
    case "ObjectPattern":
      return t4.properties.some((e) => e ? Os(e.argument || e.value) : false);
    case "ArrayPattern":
      return t4.elements.some((e) => e ? Os(e) : false);
    case "AssignmentPattern":
      return Os(t4.left);
    case "MemberExpression":
      return true;
  }
  return false;
}
function r8(t4, e) {
  if (t4.eslintUsed && t4.scope.type === "global")
    return null;
  let r = null, s = false;
  const n = t4.references;
  for (let o = 0; o < n.length; ++o) {
    const l = n[o];
    if (l.isWrite()) {
      if (r !== null && r.identifier !== l.identifier)
        return null;
      const u = Nb(l);
      if (u !== null && u.left !== void 0) {
        const c = u.left;
        let f = false, h = false;
        if (c.type === "ObjectPattern" ? (f = c.properties.filter((m) => m.value).map((m) => m.value.name).some((m) => a0(m, t4.scope)), h = Os(c)) : c.type === "ArrayPattern" && (f = c.elements.map((m) => m && m.name).some((m) => a0(m, t4.scope)), h = Os(c)), f || h)
          return null;
      }
      r = l;
    } else if (l.isRead() && r === null) {
      if (e)
        return null;
      s = true;
    }
  }
  return r !== null && r.from === t4.scope && t8(r.identifier) ? s ? t4.defs[0].name : r.identifier : null;
}
function n8(t4, e) {
  const r = /* @__PURE__ */ new Map();
  for (let s = 0; s < t4.length; ++s) {
    const n = t4[s], a = n.references, o = r8(n, e);
    let l = null;
    for (let i = 0; i < a.length; ++i) {
      const u = a[i], c = u.identifier;
      if (c === l)
        continue;
      l = c;
      const f = Nb(u);
      f && (r.has(f) ? r.get(f).push(o) : r.set(f, [o]));
    }
  }
  return r;
}
function jb(t4, e, r) {
  return !t4 || r(t4) ? null : t4.type === e ? t4 : jb(t4.parent, e, r);
}
var xm = {
  meta: {
    type: "suggestion",
    docs: {
      description: "require `const` declarations for variables that are never reassigned after declared",
      category: "ECMAScript 6",
      recommended: false,
      url: "https://eslint.org/docs/rules/prefer-const"
    },
    fixable: "code",
    schema: [{
      type: "object",
      properties: {
        destructuring: {
          enum: ["any", "all"],
          default: "any"
        },
        ignoreReadBeforeAssign: {
          type: "boolean",
          default: false
        }
      },
      additionalProperties: false
    }],
    messages: {
      useConst: "'{{name}}' is never reassigned. Use 'const' instead."
    }
  },
  create(t4) {
    const e = t4.options[0] || {}, r = t4.getSourceCode(), s = e.destructuring !== "all", n = e.ignoreReadBeforeAssign === true, a = [];
    let o = 0, l = null, i = "";
    function u(c) {
      const f = c.filter(Boolean);
      if (c.length && (s || f.length === c.length)) {
        const h = jb(c[0], "VariableDeclaration", (d) => d.type.endsWith("Statement")), p = h === null;
        if (!p && h.declarations.length > 0) {
          const d = h.declarations[0];
          if (d.init) {
            const g = d.init.parent;
            g.type === "VariableDeclarator" && (g.id.name !== i && (i = g.id.name, o = 0), g.id.type === "ObjectPattern" && g.init.name !== i && (i = g.init.name, o = 0), g.id !== l && (l = g.id, o = 0));
          }
        }
        let m = h && (h.parent.type === "ForInStatement" || h.parent.type === "ForOfStatement" || h.declarations.every((d) => d.init)) && f.length === c.length;
        !p && h.declarations && h.declarations.length !== 1 && h && h.declarations && h.declarations.length >= 1 && (o += f.length, m = m && o === h.declarations.length), f.forEach((d) => {
          t4.report({
            node: d,
            messageId: "useConst",
            data: d,
            fix: m ? (g) => {
              const y = r.getFirstToken(h, (x) => x.value === h.kind);
              return new Qs(g, r).retainRange(h.range).replaceTextRange(y.range, "const");
            } : null
          });
        });
      }
    }
    return {
      "Program:exit"() {
        n8(a, n).forEach(u);
      },
      VariableDeclaration(c) {
        c.kind === "let" && !e8(c) && a.push(...t4.getDeclaredVariables(c));
      }
    };
  }
};
xm.meta;
xm.create;
var s8 = E.getPrecedence({
  type: "AssignmentExpression"
});
var vm = {
  meta: {
    type: "suggestion",
    docs: {
      description: "require destructuring from arrays and/or objects",
      category: "ECMAScript 6",
      recommended: false,
      url: "https://eslint.org/docs/rules/prefer-destructuring"
    },
    fixable: "code",
    schema: [{
      oneOf: [{
        type: "object",
        properties: {
          VariableDeclarator: {
            type: "object",
            properties: {
              array: {
                type: "boolean"
              },
              object: {
                type: "boolean"
              }
            },
            additionalProperties: false
          },
          AssignmentExpression: {
            type: "object",
            properties: {
              array: {
                type: "boolean"
              },
              object: {
                type: "boolean"
              }
            },
            additionalProperties: false
          }
        },
        additionalProperties: false
      }, {
        type: "object",
        properties: {
          array: {
            type: "boolean"
          },
          object: {
            type: "boolean"
          }
        },
        additionalProperties: false
      }]
    }, {
      type: "object",
      properties: {
        enforceForRenamedProperties: {
          type: "boolean"
        }
      },
      additionalProperties: false
    }],
    messages: {
      preferDestructuring: "Use {{type}} destructuring."
    }
  },
  create(t4) {
    const e = t4.options[0], r = t4.options[1] && t4.options[1].enforceForRenamedProperties;
    let s = {
      VariableDeclarator: {
        array: true,
        object: true
      },
      AssignmentExpression: {
        array: true,
        object: true
      }
    };
    e && (s = typeof e.array < "u" || typeof e.object < "u" ? {
      VariableDeclarator: e,
      AssignmentExpression: e
    } : e);
    function n(c, f) {
      return s && s[c] && s[c][f];
    }
    function a(c) {
      return Number.isInteger(c.property.value);
    }
    function o(c, f, h) {
      t4.report({
        node: c,
        messageId: "preferDestructuring",
        data: {
          type: f
        },
        fix: h
      });
    }
    function l(c) {
      return c.type === "VariableDeclarator" && c.id.type === "Identifier" && c.init.type === "MemberExpression" && !c.init.computed && c.init.property.type === "Identifier" && c.id.name === c.init.property.name;
    }
    function i(c, f) {
      const h = f.init, p = t4.getSourceCode();
      if (p.getCommentsInside(f).length > p.getCommentsInside(h.object).length)
        return null;
      let m = p.getText(h.object);
      return E.getPrecedence(h.object) < s8 && (m = `(${m})`), c.replaceText(f, `{${h.property.name}} = ${m}`);
    }
    function u(c, f, h) {
      if (f.type !== "MemberExpression" || f.object.type === "Super")
        return;
      if (a(f)) {
        n(h.type, "array") && o(h, "array", null);
        return;
      }
      const p = l(h) ? (m) => i(m, h) : null;
      if (n(h.type, "object") && r) {
        o(h, "object", p);
        return;
      }
      if (n(h.type, "object")) {
        const m = f.property;
        (m.type === "Literal" && c.name === m.value || m.type === "Identifier" && c.name === m.name && !f.computed) && o(h, "object", p);
      }
    }
    return {
      VariableDeclarator: function(c) {
        c.init && c.init.type === "MemberExpression" && u(c.id, c.init, c);
      },
      AssignmentExpression: function(c) {
        c.operator === "=" && u(c.left, c.right, c);
      }
    };
  }
};
vm.meta;
vm.create;
var {
  CALL: a8,
  ReferenceTracker: i8
} = Vt.default;
var Em = E.getPrecedence({
  type: "BinaryExpression",
  operator: "**"
});
function o8(t4) {
  return E.getPrecedence(t4) <= Em || t4.type === "AwaitExpression" || t4.type === "UnaryExpression";
}
function l8(t4) {
  return E.getPrecedence(t4) < Em;
}
function u8(t4, e) {
  const r = t4.parent.type === "ChainExpression" ? t4.parent.parent : t4.parent;
  return (r.type === "ClassDeclaration" || r.type.endsWith("Expression") && E.getPrecedence(r) >= Em && !(r.type === "BinaryExpression" && r.operator === "**" && r.right === t4) && !((r.type === "CallExpression" || r.type === "NewExpression") && r.arguments.includes(t4)) && !(r.type === "MemberExpression" && r.computed && r.property === t4) && r.type !== "ArrayExpression") && !E.isParenthesised(e, t4);
}
function el(t4, e) {
  return e ? `(${t4})` : t4;
}
var bm = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow the use of `Math.pow` in favor of the `**` operator",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/prefer-exponentiation-operator"
    },
    schema: [],
    fixable: "code",
    messages: {
      useExponentiation: "Use the '**' operator instead of 'Math.pow'."
    }
  },
  create(t4) {
    const e = t4.getSourceCode();
    function r(s) {
      t4.report({
        node: s,
        messageId: "useExponentiation",
        fix(n) {
          if (s.arguments.length !== 2 || s.arguments.some((y) => y.type === "SpreadElement") || e.getCommentsInside(s).length > 0)
            return null;
          const a = s.arguments[0], o = s.arguments[1], l = e.getText(a), i = e.getText(o), u = o8(a), c = l8(o), f = u8(s, e);
          let h = "", p = "";
          if (!f) {
            if (!u) {
              const y = e.getFirstToken(a), x = e.getTokenBefore(s);
              x && x.range[1] === s.range[0] && !E.canTokensBeAdjacent(x, y) && (h = " ");
            }
            if (!c) {
              const y = e.getLastToken(o), x = e.getTokenAfter(s);
              x && s.range[1] === x.range[0] && !E.canTokensBeAdjacent(y, x) && (p = " ");
            }
          }
          const m = el(l, u), d = el(i, c), g = el(`${m}**${d}`, f);
          return n.replaceText(s, `${h}${g}${p}`);
        }
      });
    }
    return {
      Program() {
        const s = t4.getScope(), n = new i8(s), a = {
          Math: {
            pow: {
              [a8]: true
            }
          }
        };
        for (const {
          node: o
        } of n.iterateGlobalReferences(a))
          r(o);
      }
    };
  }
};
bm.meta;
bm.create;
var {
  CALL: c8,
  CONSTRUCT: p8,
  ReferenceTracker: f8,
  getStringIfConstant: i0
} = Vt.default;
var h8 = new pn.default.RegExpParser();
var Cm = {
  meta: {
    type: "suggestion",
    docs: {
      description: "enforce using named capture group in regular expression",
      category: "Best Practices",
      recommended: false,
      url: "https://eslint.org/docs/rules/prefer-named-capture-group"
    },
    schema: [],
    messages: {
      required: "Capture group '{{group}}' should be converted to a named or non-capturing group."
    }
  },
  create(t4) {
    function e(r, s, n) {
      let a;
      try {
        a = h8.parsePattern(r, 0, r.length, n);
      } catch {
        return;
      }
      pn.default.visitRegExpAST(a, {
        onCapturingGroupEnter(o) {
          o.name || t4.report({
            node: s,
            messageId: "required",
            data: {
              group: o.raw
            }
          });
        }
      });
    }
    return {
      Literal(r) {
        r.regex && e(r.regex.pattern, r, r.regex.flags.includes("u"));
      },
      Program() {
        const r = t4.getScope(), s = new f8(r), n = {
          RegExp: {
            [c8]: true,
            [p8]: true
          }
        };
        for (const {
          node: a
        } of s.iterateGlobalReferences(n)) {
          const o = i0(a.arguments[0]), l = i0(a.arguments[1]);
          o && e(o, a, l && l.includes("u"));
        }
      }
    };
  }
};
Cm.meta;
Cm.create;
var o0 = /* @__PURE__ */ new Map([[2, {
  system: "binary",
  literalPrefix: "0b"
}], [8, {
  system: "octal",
  literalPrefix: "0o"
}], [16, {
  system: "hexadecimal",
  literalPrefix: "0x"
}]]);
function m8(t4) {
  return E.isSpecificId(t4, "parseInt") || E.isSpecificMemberAccess(t4, "Number", "parseInt");
}
var Sm = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow `parseInt()` and `Number.parseInt()` in favor of binary, octal, and hexadecimal literals",
      category: "ECMAScript 6",
      recommended: false,
      url: "https://eslint.org/docs/rules/prefer-numeric-literals"
    },
    schema: [],
    messages: {
      useLiteral: "Use {{system}} literals instead of {{functionName}}()."
    },
    fixable: "code"
  },
  create(t4) {
    const e = t4.getSourceCode();
    return {
      "CallExpression[arguments.length=2]"(r) {
        const [s, n] = r.arguments, a = E.getStaticStringValue(s), o = n.value;
        if (a !== null && E.isStringLiteral(s) && n.type === "Literal" && typeof o == "number" && o0.has(o) && m8(r.callee)) {
          const {
            system: l,
            literalPrefix: i
          } = o0.get(o);
          t4.report({
            node: r,
            messageId: "useLiteral",
            data: {
              system: l,
              functionName: e.getText(r.callee)
            },
            fix(u) {
              if (e.getCommentsInside(r).length)
                return null;
              const c = `${i}${a}`;
              if (+c !== parseInt(a, o))
                return null;
              const f = e.getTokenBefore(r), h = e.getTokenAfter(r);
              let p = "", m = "";
              return f && f.range[1] === r.range[0] && !E.canTokensBeAdjacent(f, c) && (p = " "), h && r.range[1] === h.range[0] && !E.canTokensBeAdjacent(c, h) && (m = " "), u.replaceText(r, `${p}${c}${m}`);
            }
          });
        }
      }
    };
  }
};
Sm.meta;
Sm.create;
var {
  CALL: d8,
  ReferenceTracker: g8
} = Vt.default;
var {
  isCommaToken: l0,
  isOpeningParenToken: Mb,
  isClosingParenToken: y8,
  isParenthesised: Ll
} = E;
var $b = /\s/u;
function x8(t4) {
  return t4.arguments.some((e) => e.type === "SpreadElement");
}
function v8(t4) {
  return t4.type === "Property" && (t4.kind === "get" || t4.kind === "set");
}
function E8(t4) {
  return t4.properties.some(v8);
}
function b8(t4) {
  return t4.arguments.filter((e) => e.type === "ObjectExpression").some(E8);
}
function C8(t4, e) {
  const r = t4.parent;
  switch (r.type) {
    case "VariableDeclarator":
    case "ArrayExpression":
    case "ReturnStatement":
    case "CallExpression":
    case "Property":
      return false;
    case "AssignmentExpression":
      return r.left === t4 && !Ll(e, t4);
    default:
      return !Ll(e, t4);
  }
}
function S8(t4, e) {
  switch (t4.type) {
    case "AssignmentExpression":
    case "ArrowFunctionExpression":
    case "ConditionalExpression":
      return !Ll(e, t4);
    default:
      return false;
  }
}
function A8(t4, e, r) {
  const s = [r.getFirstToken(t4), r.getLastToken(t4)];
  let n = r.getTokenBefore(t4), a = r.getTokenAfter(t4);
  for (; n && a && n.range[0] > e.range[0] && Mb(n) && y8(a); )
    s.push(n, a), n = r.getTokenBefore(n), a = r.getTokenAfter(a);
  return s.sort((o, l) => o.range[0] - l.range[0]);
}
function D8(t4, e) {
  const r = e.text;
  let s = t4.range[0];
  {
    const n = e.getTokenBefore(t4, {
      includeComments: true
    });
    if (n && n.type === "Line")
      return s;
  }
  for (; $b.test(r[s - 1] || ""); )
    s -= 1;
  return s;
}
function w8(t4, e) {
  const r = e.text;
  let s = t4.range[1];
  for (; $b.test(r[s] || ""); )
    s += 1;
  return s;
}
function k8(t4, e) {
  return function* (r) {
    const s = e.getTokenAfter(t4.callee, Mb), n = e.getLastToken(t4);
    yield r.removeRange([t4.range[0], s.range[0]]), C8(t4, e) ? (yield r.replaceText(s, "({"), yield r.replaceText(n, "})")) : (yield r.replaceText(s, "{"), yield r.replaceText(n, "}"));
    for (const a of t4.arguments) {
      const o = A8(a, s, e), l = o.shift(), i = o.pop();
      if (a.type === "ObjectExpression") {
        const u = e.getLastToken(a, 1), c = e.getTokenAfter(i);
        for (const p of o)
          yield r.remove(p);
        const f = [l.range[0], w8(l, e)], h = [Math.max(D8(i, e), f[1]), i.range[1]];
        yield r.removeRange(f), yield r.removeRange(h), (a.properties.length === 0 || l0(u)) && l0(c) && (yield r.remove(c));
      } else
        S8(a, e) ? (yield r.insertTextBefore(l, "...("), yield r.insertTextAfter(i, ")")) : yield r.insertTextBefore(l, "...");
    }
  };
}
var Am = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow using Object.assign with an object literal as the first argument and prefer the use of object spread instead.",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/prefer-object-spread"
    },
    schema: [],
    fixable: "code",
    messages: {
      useSpreadMessage: "Use an object spread instead of `Object.assign` eg: `{ ...foo }`.",
      useLiteralMessage: "Use an object literal instead of `Object.assign`. eg: `{ foo: bar }`."
    }
  },
  create(t4) {
    const e = t4.getSourceCode();
    return {
      Program() {
        const r = t4.getScope(), s = new g8(r), n = {
          Object: {
            assign: {
              [d8]: true
            }
          }
        };
        for (const {
          node: a
        } of s.iterateGlobalReferences(n))
          if (a.arguments.length >= 1 && a.arguments[0].type === "ObjectExpression" && !x8(a) && !(a.arguments.length > 1 && b8(a))) {
            const o = a.arguments.length === 1 ? "useLiteralMessage" : "useSpreadMessage", l = k8(a, e);
            t4.report({
              node: a,
              messageId: o,
              fix: l
            });
          }
      }
    };
  }
};
Am.meta;
Am.create;
var Dm = {
  meta: {
    type: "suggestion",
    docs: {
      description: "require using Error objects as Promise rejection reasons",
      category: "Best Practices",
      recommended: false,
      url: "https://eslint.org/docs/rules/prefer-promise-reject-errors"
    },
    fixable: null,
    schema: [{
      type: "object",
      properties: {
        allowEmptyReject: {
          type: "boolean",
          default: false
        }
      },
      additionalProperties: false
    }],
    messages: {
      rejectAnError: "Expected the Promise rejection reason to be an Error."
    }
  },
  create(t4) {
    const e = t4.options.length && t4.options[0].allowEmptyReject;
    function r(n) {
      !n.arguments.length && e || (!n.arguments.length || !E.couldBeError(n.arguments[0]) || n.arguments[0].type === "Identifier" && n.arguments[0].name === "undefined") && t4.report({
        node: n,
        messageId: "rejectAnError"
      });
    }
    function s(n) {
      return E.isSpecificMemberAccess(n.callee, "Promise", "reject");
    }
    return {
      CallExpression(n) {
        s(n) && r(n);
      },
      "NewExpression:exit"(n) {
        n.callee.type === "Identifier" && n.callee.name === "Promise" && n.arguments.length && E.isFunction(n.arguments[0]) && n.arguments[0].params.length > 1 && n.arguments[0].params[1].type === "Identifier" && t4.getDeclaredVariables(n.arguments[0]).find((a) => a.name === n.arguments[0].params[1].name).references.filter((a) => a.isRead()).filter((a) => a.identifier.parent.type === "CallExpression" && a.identifier === a.identifier.parent.callee).forEach((a) => r(a.identifier.parent));
      }
    };
  }
};
Dm.meta;
Dm.create;
var wm = {
  meta: {
    type: "suggestion",
    docs: {
      description: "require `Reflect` methods where applicable",
      category: "ECMAScript 6",
      recommended: false,
      url: "https://eslint.org/docs/rules/prefer-reflect"
    },
    deprecated: true,
    replacedBy: [],
    schema: [{
      type: "object",
      properties: {
        exceptions: {
          type: "array",
          items: {
            enum: ["apply", "call", "delete", "defineProperty", "getOwnPropertyDescriptor", "getPrototypeOf", "setPrototypeOf", "isExtensible", "getOwnPropertyNames", "preventExtensions"]
          },
          uniqueItems: true
        }
      },
      additionalProperties: false
    }],
    messages: {
      preferReflect: "Avoid using {{existing}}, instead use {{substitute}}."
    }
  },
  create(t4) {
    const e = {
      apply: "Function.prototype.apply",
      call: "Function.prototype.call",
      defineProperty: "Object.defineProperty",
      getOwnPropertyDescriptor: "Object.getOwnPropertyDescriptor",
      getPrototypeOf: "Object.getPrototypeOf",
      setPrototypeOf: "Object.setPrototypeOf",
      isExtensible: "Object.isExtensible",
      getOwnPropertyNames: "Object.getOwnPropertyNames",
      preventExtensions: "Object.preventExtensions"
    }, r = {
      apply: "Reflect.apply",
      call: "Reflect.apply",
      defineProperty: "Reflect.defineProperty",
      getOwnPropertyDescriptor: "Reflect.getOwnPropertyDescriptor",
      getPrototypeOf: "Reflect.getPrototypeOf",
      setPrototypeOf: "Reflect.setPrototypeOf",
      isExtensible: "Reflect.isExtensible",
      getOwnPropertyNames: "Reflect.getOwnPropertyNames",
      preventExtensions: "Reflect.preventExtensions"
    }, s = (t4.options[0] || {}).exceptions || [];
    function n(a, o, l) {
      t4.report({
        node: a,
        messageId: "preferReflect",
        data: {
          existing: o,
          substitute: l
        }
      });
    }
    return {
      CallExpression(a) {
        const o = (a.callee.property || {}).name, l = (a.callee.object || {}).name === "Reflect", i = Object.prototype.hasOwnProperty.call(r, o), u = s.indexOf(o) !== -1;
        i && !l && !u && n(a, e[o], r[o]);
      },
      UnaryExpression(a) {
        const o = a.operator === "delete", l = a.argument.type === "Identifier", i = s.indexOf("delete") !== -1;
        o && !l && !i && n(a, "the delete keyword", "Reflect.deleteProperty");
      }
    };
  }
};
wm.meta;
wm.create;
var {
  CALL: T8,
  CONSTRUCT: F8,
  ReferenceTracker: P8,
  findVariable: I8
} = Vt.default;
function _8(t4) {
  return t4.type === "Literal" && typeof t4.value == "string";
}
function u0(t4) {
  return t4.type === "Literal" && Object.prototype.hasOwnProperty.call(t4, "regex");
}
function c0(t4) {
  return t4.type === "TemplateLiteral" && t4.expressions.length === 0;
}
var km = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow use of the `RegExp` constructor in favor of regular expression literals",
      category: "Best Practices",
      recommended: false,
      url: "https://eslint.org/docs/rules/prefer-regex-literals"
    },
    schema: [{
      type: "object",
      properties: {
        disallowRedundantWrapping: {
          type: "boolean",
          default: false
        }
      },
      additionalProperties: false
    }],
    messages: {
      unexpectedRegExp: "Use a regular expression literal instead of the 'RegExp' constructor.",
      unexpectedRedundantRegExp: "Regular expression literal is unnecessarily wrapped within a 'RegExp' constructor.",
      unexpectedRedundantRegExpWithFlags: "Use regular expression literal with flags instead of the 'RegExp' constructor."
    }
  },
  create(t4) {
    const [{
      disallowRedundantWrapping: e = false
    } = {}] = t4.options;
    function r(l) {
      const i = t4.getScope(), u = I8(i, l);
      return u !== null && u.scope.type === "global" && u.defs.length === 0;
    }
    function s(l) {
      return l.type === "TaggedTemplateExpression" && E.isSpecificMemberAccess(l.tag, "String", "raw") && r(E.skipChainExpression(l.tag).object) && c0(l.quasi);
    }
    function n(l) {
      return _8(l) || c0(l) || s(l);
    }
    function a(l) {
      const i = l.arguments;
      return !!((i.length === 1 || i.length === 2) && i.every(n));
    }
    function o(l) {
      const i = l.arguments;
      return !!(i.length === 1 && u0(i[0]) || i.length === 2 && u0(i[0]) && n(i[1]));
    }
    return {
      Program() {
        const l = t4.getScope(), i = new P8(l), u = {
          RegExp: {
            [T8]: true,
            [F8]: true
          }
        };
        for (const {
          node: c
        } of i.iterateGlobalReferences(u))
          e && o(c) ? c.arguments.length === 2 ? t4.report({
            node: c,
            messageId: "unexpectedRedundantRegExpWithFlags"
          }) : t4.report({
            node: c,
            messageId: "unexpectedRedundantRegExp"
          }) : a(c) && t4.report({
            node: c,
            messageId: "unexpectedRegExp"
          });
      }
    };
  }
};
km.meta;
km.create;
function B8(t4) {
  const e = t4.variables;
  for (let r = 0; r < e.length; ++r) {
    const s = e[r];
    if (s.name === "arguments")
      return s.identifiers.length === 0 ? s : null;
  }
  return null;
}
function O8(t4) {
  const e = t4.identifier, r = e.parent;
  return !(r.type === "MemberExpression" && r.object === e && !r.computed);
}
var Tm = {
  meta: {
    type: "suggestion",
    docs: {
      description: "require rest parameters instead of `arguments`",
      category: "ECMAScript 6",
      recommended: false,
      url: "https://eslint.org/docs/rules/prefer-rest-params"
    },
    schema: [],
    messages: {
      preferRestParams: "Use the rest parameters instead of 'arguments'."
    }
  },
  create(t4) {
    function e(s) {
      t4.report({
        node: s.identifier,
        loc: s.identifier.loc,
        messageId: "preferRestParams"
      });
    }
    function r() {
      const s = B8(t4.getScope());
      s && s.references.filter(O8).forEach(e);
    }
    return {
      "FunctionDeclaration:exit": r,
      "FunctionExpression:exit": r
    };
  }
};
Tm.meta;
Tm.create;
function L8(t4) {
  return E.isSpecificMemberAccess(t4.callee, null, "apply") && t4.arguments.length === 2 && t4.arguments[1].type !== "ArrayExpression" && t4.arguments[1].type !== "SpreadElement";
}
function R8(t4, e, r) {
  return t4 ? E.equalTokens(t4, e, r) : E.isNullOrUndefined(e);
}
var Fm = {
  meta: {
    type: "suggestion",
    docs: {
      description: "require spread operators instead of `.apply()`",
      category: "ECMAScript 6",
      recommended: false,
      url: "https://eslint.org/docs/rules/prefer-spread"
    },
    schema: [],
    fixable: null,
    messages: {
      preferSpread: "Use the spread operator instead of '.apply()'."
    }
  },
  create(t4) {
    const e = t4.getSourceCode();
    return {
      CallExpression(r) {
        if (!L8(r))
          return;
        const s = E.skipChainExpression(E.skipChainExpression(r.callee).object), n = s.type === "MemberExpression" ? s.object : null, a = r.arguments[0];
        R8(n, a, e) && t4.report({
          node: r,
          messageId: "preferSpread"
        });
      }
    };
  }
};
Fm.meta;
Fm.create;
function is(t4) {
  return t4.type === "BinaryExpression" && t4.operator === "+";
}
function p0(t4) {
  let e = t4;
  for (; is(e.parent); )
    e = e.parent;
  return e;
}
function Rl(t4) {
  return is(t4) ? Rl(t4.left) || Rl(t4.right) : t4.type === "Literal" && typeof t4.value == "string" ? E.hasOctalOrNonOctalDecimalEscapeSequence(t4.raw) : false;
}
function Nl(t4) {
  return is(t4) ? Nl(t4.right) || Nl(t4.left) : E.isStringLiteral(t4);
}
function oi(t4) {
  return is(t4) ? oi(t4.right) || oi(t4.left) : !E.isStringLiteral(t4);
}
function Pm(t4) {
  return t4.type === "BinaryExpression" ? Pm(t4.left) : t4.type === "TemplateLiteral" ? t4.expressions.length && t4.quasis.length && t4.quasis[0].range[0] === t4.quasis[0].range[1] : t4.type !== "Literal" || typeof t4.value != "string";
}
function N8(t4) {
  return t4.type === "BinaryExpression" ? Pm(t4.right) : t4.type === "TemplateLiteral" ? t4.expressions.length && t4.quasis.length && t4.quasis[t4.quasis.length - 1].range[0] === t4.quasis[t4.quasis.length - 1].range[1] : t4.type !== "Literal" || typeof t4.value != "string";
}
var Im = {
  meta: {
    type: "suggestion",
    docs: {
      description: "require template literals instead of string concatenation",
      category: "ECMAScript 6",
      recommended: false,
      url: "https://eslint.org/docs/rules/prefer-template"
    },
    schema: [],
    fixable: "code",
    messages: {
      unexpectedStringConcatenation: "Unexpected string concatenation."
    }
  },
  create(t4) {
    const e = t4.getSourceCode();
    let r = /* @__PURE__ */ Object.create(null);
    function s(l, i) {
      const u = [l].concat(e.getTokensBetween(l, i)).concat(i), c = e.getText();
      return u.slice(0, -1).reduce((f, h, p) => f + c.slice(h.range[1], u[p + 1].range[0]), "");
    }
    function n(l, i, u) {
      if (l.type === "Literal" && typeof l.value == "string")
        return `\`${l.raw.slice(1, -1).replace(/\\*(\$\{|`)/gu, (c) => c.lastIndexOf("\\") % 2 ? `\\${c}` : c).replace(new RegExp(`\\\\${l.raw[0]}`, "gu"), l.raw[0])}\``;
      if (l.type === "TemplateLiteral")
        return e.getText(l);
      if (is(l) && Nl(l) && oi(l)) {
        const c = e.getFirstTokenBetween(l.left, l.right, (d) => d.value === "+"), f = s(l.left, c), h = s(c, l.right), p = N8(l.left), m = Pm(l.right);
        return p ? n(l.left, i, f + h).slice(0, -1) + n(l.right, null, u).slice(1) : m ? n(l.left, i, null).slice(0, -1) + n(l.right, f + h, u).slice(1) : `${n(l.left, i, null)}${f}+${h}${n(l.right, u, null)}`;
      }
      return `\`\${${i || ""}${e.getText(l)}${u || ""}}\``;
    }
    function a(l, i) {
      const u = p0(i.parent);
      return Rl(u) ? null : l.replaceText(u, n(u, null, null));
    }
    function o(l) {
      if (!E.isStringLiteral(l) || !is(l.parent))
        return;
      const i = p0(l.parent);
      r[i.range[0]] || (r[i.range[0]] = true, oi(i) && t4.report({
        node: i,
        messageId: "unexpectedStringConcatenation",
        fix: (u) => a(u, l)
      }));
    }
    return {
      Program() {
        r = /* @__PURE__ */ Object.create(null);
      },
      Literal: o,
      TemplateLiteral: o
    };
  }
};
Im.meta;
Im.create;
var _m = {
  meta: {
    type: "suggestion",
    docs: {
      description: "require quotes around object literal property names",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/quote-props"
    },
    schema: {
      anyOf: [{
        type: "array",
        items: [{
          enum: ["always", "as-needed", "consistent", "consistent-as-needed"]
        }],
        minItems: 0,
        maxItems: 1
      }, {
        type: "array",
        items: [{
          enum: ["always", "as-needed", "consistent", "consistent-as-needed"]
        }, {
          type: "object",
          properties: {
            keywords: {
              type: "boolean"
            },
            unnecessary: {
              type: "boolean"
            },
            numbers: {
              type: "boolean"
            }
          },
          additionalProperties: false
        }],
        minItems: 0,
        maxItems: 2
      }]
    },
    fixable: "code",
    messages: {
      requireQuotesDueToReservedWord: "Properties should be quoted as '{{property}}' is a reserved word.",
      inconsistentlyQuotedProperty: "Inconsistently quoted property '{{key}}' found.",
      unnecessarilyQuotedProperty: "Unnecessarily quoted property '{{property}}' found.",
      unquotedReservedProperty: "Unquoted reserved word '{{property}}' used as key.",
      unquotedNumericProperty: "Unquoted number literal '{{property}}' used as key.",
      unquotedPropertyFound: "Unquoted property '{{property}}' found.",
      redundantQuoting: "Properties shouldn't be quoted as all quotes are redundant."
    }
  },
  create(t4) {
    const e = t4.options[0], r = t4.options[1] && t4.options[1].keywords, s = !t4.options[1] || t4.options[1].unnecessary !== false, n = t4.options[1] && t4.options[1].numbers, a = t4.getSourceCode();
    function o(p) {
      return si.indexOf(p) >= 0;
    }
    function l(p, m, d) {
      return m.length === 1 && m[0].start === 0 && m[0].end === p.length && (["Identifier", "Keyword", "Null", "Boolean"].indexOf(m[0].type) >= 0 || m[0].type === "Numeric" && !d && String(+m[0].value) === m[0].value);
    }
    function i(p) {
      return p.type === "Identifier" ? p.name : p.value;
    }
    function u(p) {
      return p.type === "Literal" && typeof p.value == "string" ? a.getText(p) : `"${p.type === "Identifier" ? p.name : p.value}"`;
    }
    function c(p) {
      const m = p.key;
      if (!(p.method || p.computed || p.shorthand))
        if (m.type === "Literal" && typeof m.value == "string") {
          let d;
          try {
            d = Bs.default.tokenize(m.value);
          } catch {
            return;
          }
          if (d.length !== 1 || o(d[0].value) && r)
            return;
          s && l(m.value, d, n) && t4.report({
            node: p,
            messageId: "unnecessarilyQuotedProperty",
            data: {
              property: m.value
            },
            fix: (y) => y.replaceText(m, i(m))
          });
        } else
          r && m.type === "Identifier" && o(m.name) ? t4.report({
            node: p,
            messageId: "unquotedReservedProperty",
            data: {
              property: m.name
            },
            fix: (d) => d.replaceText(m, u(m))
          }) : n && m.type === "Literal" && E.isNumericLiteral(m) && t4.report({
            node: p,
            messageId: "unquotedNumericProperty",
            data: {
              property: m.value
            },
            fix: (d) => d.replaceText(m, u(m))
          });
    }
    function f(p) {
      const m = p.key;
      !p.method && !p.computed && !p.shorthand && !(m.type === "Literal" && typeof m.value == "string") && t4.report({
        node: p,
        messageId: "unquotedPropertyFound",
        data: {
          property: m.name || m.value
        },
        fix: (d) => d.replaceText(m, u(m))
      });
    }
    function h(p, m) {
      const d = [], g = [];
      let y = null, x = false;
      p.properties.forEach((A) => {
        const b = A.key;
        if (!(!b || A.method || A.computed || A.shorthand))
          if (b.type === "Literal" && typeof b.value == "string") {
            if (d.push(A), m) {
              let v;
              try {
                v = Bs.default.tokenize(b.value);
              } catch {
                x = true;
                return;
              }
              x = x || !l(b.value, v) || r && o(v[0].value);
            }
          } else
            r && m && b.type === "Identifier" && o(b.name) ? (g.push(A), x = true, y = b.name) : g.push(A);
      }), m && d.length && !x ? d.forEach((A) => {
        t4.report({
          node: A,
          messageId: "redundantQuoting",
          fix: (b) => b.replaceText(A.key, i(A.key))
        });
      }) : g.length && y ? g.forEach((A) => {
        t4.report({
          node: A,
          messageId: "requireQuotesDueToReservedWord",
          data: {
            property: y
          },
          fix: (b) => b.replaceText(A.key, u(A.key))
        });
      }) : d.length && g.length && g.forEach((A) => {
        t4.report({
          node: A,
          messageId: "inconsistentlyQuotedProperty",
          data: {
            key: A.key.name || A.key.value
          },
          fix: (b) => b.replaceText(A.key, u(A.key))
        });
      });
    }
    return {
      Property(p) {
        (e === "always" || !e) && f(p), e === "as-needed" && c(p);
      },
      ObjectExpression(p) {
        e === "consistent" && h(p, false), e === "consistent-as-needed" && h(p, true);
      }
    };
  }
};
_m.meta;
_m.create;
var Na = {
  double: {
    quote: '"',
    alternateQuote: "'",
    description: "doublequote"
  },
  single: {
    quote: "'",
    alternateQuote: '"',
    description: "singlequote"
  },
  backtick: {
    quote: "`",
    alternateQuote: '"',
    description: "backtick"
  }
};
var j8 = new RegExp(String.raw`(^|[^\\])(\\\\)*[${Array.from(E.LINEBREAKS).join("")}]`, "u");
Na.double.convert = Na.single.convert = Na.backtick.convert = function(t4) {
  const e = this.quote, r = t4[0];
  return e === r ? t4 : e + t4.slice(1, -1).replace(/\\(\$\{|\r\n?|\n|.)|["'`]|\$\{|(\r\n?|\n)/gu, (s, n, a) => n === r || r === "`" && n === "${" ? n : s === e || e === "`" && s === "${" ? `\\${s}` : a && r === "`" ? "\\n" : s) + e;
};
var M8 = "avoid-escape";
var Bm = {
  meta: {
    type: "layout",
    docs: {
      description: "enforce the consistent use of either backticks, double, or single quotes",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/quotes"
    },
    fixable: "code",
    schema: [{
      enum: ["single", "double", "backtick"]
    }, {
      anyOf: [{
        enum: ["avoid-escape"]
      }, {
        type: "object",
        properties: {
          avoidEscape: {
            type: "boolean"
          },
          allowTemplateLiterals: {
            type: "boolean"
          }
        },
        additionalProperties: false
      }]
    }],
    messages: {
      wrongQuotes: "Strings must use {{description}}."
    }
  },
  create(t4) {
    const e = t4.options[0], r = Na[e || "double"], s = t4.options[1], n = s && s.allowTemplateLiterals === true, a = t4.getSourceCode();
    let o = s && s.avoidEscape === true;
    s === M8 && (o = true);
    function l(h) {
      return h.parent.type === "JSXAttribute" || h.parent.type === "JSXElement" || h.parent.type === "JSXFragment";
    }
    function i(h) {
      return h.type === "ExpressionStatement" && h.expression.type === "Literal" && typeof h.expression.value == "string";
    }
    function u(h) {
      const p = h.parent.parent;
      if (p.type !== "Program" && (p.type !== "BlockStatement" || !E.isFunction(p.parent)))
        return false;
      for (let m = 0; m < p.body.length; ++m) {
        const d = p.body[m];
        if (d === h.parent)
          return true;
        if (!i(d))
          break;
      }
      return false;
    }
    function c(h) {
      const p = h.parent;
      switch (p.type) {
        case "ExpressionStatement":
          return u(h);
        case "Property":
        case "MethodDefinition":
          return p.key === h && !p.computed;
        case "ImportDeclaration":
        case "ExportNamedDeclaration":
        case "ExportAllDeclaration":
          return p.source === h;
        default:
          return false;
      }
    }
    function f(h) {
      return !!(h.parent.type === "TaggedTemplateExpression" && h === h.parent.quasi || h.expressions.length > 0 || h.quasis.length >= 1 && j8.test(h.quasis[0].value.raw));
    }
    return {
      Literal(h) {
        const p = h.value, m = h.raw;
        if (r && typeof p == "string") {
          let d = e === "backtick" && c(h) || l(h) || E.isSurroundedBy(m, r.quote);
          !d && o && (d = E.isSurroundedBy(m, r.alternateQuote) && m.indexOf(r.quote) >= 0), d || t4.report({
            node: h,
            messageId: "wrongQuotes",
            data: {
              description: r.description
            },
            fix(g) {
              return e === "backtick" && E.hasOctalOrNonOctalDecimalEscapeSequence(m) ? null : g.replaceText(h, r.convert(h.raw));
            }
          });
        }
      },
      TemplateLiteral(h) {
        n || e === "backtick" || f(h) || t4.report({
          node: h,
          messageId: "wrongQuotes",
          data: {
            description: r.description
          },
          fix(p) {
            return u(h) ? null : p.replaceText(h, r.convert(a.getText(h)));
          }
        });
      }
    };
  }
};
Bm.meta;
Bm.create;
var f0 = "always";
var $8 = "as-needed";
var V8 = new Set(Array.from({
  length: 35
}, (t4, e) => e + 2));
function h0(t4) {
  return t4.defs.length >= 1;
}
function U8(t4) {
  return t4.type === "MemberExpression" && !t4.computed && t4.property.type === "Identifier" && t4.property.name === "parseInt";
}
function q8(t4) {
  return !(t4.type === "Literal" && !V8.has(t4.value) || t4.type === "Identifier" && t4.name === "undefined");
}
function W8(t4) {
  return t4.type === "Literal" && t4.value === 10;
}
var Om = {
  meta: {
    type: "suggestion",
    docs: {
      description: "enforce the consistent use of the radix argument when using `parseInt()`",
      category: "Best Practices",
      recommended: false,
      url: "https://eslint.org/docs/rules/radix",
      suggestion: true
    },
    schema: [{
      enum: ["always", "as-needed"]
    }],
    messages: {
      missingParameters: "Missing parameters.",
      redundantRadix: "Redundant radix parameter.",
      missingRadix: "Missing radix parameter.",
      invalidRadix: "Invalid radix parameter, must be an integer between 2 and 36.",
      addRadixParameter10: "Add radix parameter `10` for parsing decimal numbers."
    }
  },
  create(t4) {
    const e = t4.options[0] || f0;
    function r(s) {
      const n = s.arguments;
      switch (n.length) {
        case 0:
          t4.report({
            node: s,
            messageId: "missingParameters"
          });
          break;
        case 1:
          e === f0 && t4.report({
            node: s,
            messageId: "missingRadix",
            suggest: [{
              messageId: "addRadixParameter10",
              fix(a) {
                const l = t4.getSourceCode().getTokens(s), i = l[l.length - 1], u = l[l.length - 2], c = u.type === "Punctuator" && u.value === ",";
                return a.insertTextBefore(i, c ? " 10," : ", 10");
              }
            }]
          });
          break;
        default:
          e === $8 && W8(n[1]) ? t4.report({
            node: s,
            messageId: "redundantRadix"
          }) : q8(n[1]) || t4.report({
            node: s,
            messageId: "invalidRadix"
          });
          break;
      }
    }
    return {
      "Program:exit"() {
        const s = t4.getScope();
        let n = E.getVariableByName(s, "parseInt");
        n && !h0(n) && n.references.forEach((a) => {
          const o = a.identifier;
          E.isCallee(o) && r(o.parent);
        }), n = E.getVariableByName(s, "Number"), n && !h0(n) && n.references.forEach((a) => {
          const o = a.identifier.parent, l = o.parent.type === "ChainExpression" ? o.parent : o;
          U8(o) && E.isCallee(l) && r(l.parent);
        });
      }
    };
  }
};
Om.meta;
Om.create;
function Vb(t4, e = /* @__PURE__ */ new Map()) {
  for (const r of t4.references)
    r.resolved !== null && e.set(r.identifier, r);
  for (const r of t4.childScopes)
    r.type !== "function" && Vb(r, e);
  return e;
}
function z8(t4) {
  if (t4.writeExpr)
    return t4.writeExpr;
  let e = t4.identifier;
  for (; e; ) {
    const r = e.parent.type;
    if (r === "AssignmentExpression" && e.parent.left === e)
      return e.parent.right;
    if (r === "MemberExpression" && e.parent.object === e) {
      e = e.parent;
      continue;
    }
    break;
  }
  return null;
}
function G8(t4, e) {
  if (!t4 || e && t4.defs.some((s) => s.type === "Parameter"))
    return false;
  const r = t4.scope.variableScope;
  return t4.references.every((s) => s.from.variableScope === r);
}
var H8 = class {
  constructor() {
    this.info = /* @__PURE__ */ new WeakMap();
  }
  initialize(e) {
    const r = /* @__PURE__ */ new Set(), s = /* @__PURE__ */ new Set();
    for (const n of e.prevSegments) {
      const a = this.info.get(n);
      a && (a.outdatedReadVariables.forEach(Set.prototype.add, r), a.freshReadVariables.forEach(Set.prototype.add, s));
    }
    this.info.set(e, {
      outdatedReadVariables: r,
      freshReadVariables: s
    });
  }
  markAsRead(e, r) {
    for (const s of e) {
      const n = this.info.get(s);
      n && (n.freshReadVariables.add(r), n.outdatedReadVariables.delete(r));
    }
  }
  makeOutdated(e) {
    for (const r of e) {
      const s = this.info.get(r);
      s && (s.freshReadVariables.forEach(Set.prototype.add, s.outdatedReadVariables), s.freshReadVariables.clear());
    }
  }
  isOutdated(e, r) {
    for (const s of e) {
      const n = this.info.get(s);
      if (n && n.outdatedReadVariables.has(r))
        return true;
    }
    return false;
  }
};
var Lm = {
  meta: {
    type: "problem",
    docs: {
      description: "disallow assignments that can lead to race conditions due to usage of `await` or `yield`",
      category: "Possible Errors",
      recommended: false,
      url: "https://eslint.org/docs/rules/require-atomic-updates"
    },
    fixable: null,
    schema: [],
    messages: {
      nonAtomicUpdate: "Possible race condition: `{{value}}` might be reassigned based on an outdated value of `{{value}}`."
    }
  },
  create(t4) {
    const e = t4.getSourceCode(), r = /* @__PURE__ */ new Map(), s = new H8();
    let n = null;
    return {
      onCodePathStart(a) {
        const o = t4.getScope(), l = o.type === "function" && (o.block.async || o.block.generator);
        n = {
          upper: n,
          codePath: a,
          referenceMap: l ? Vb(o) : null
        };
      },
      onCodePathEnd() {
        n = n.upper;
      },
      onCodePathSegmentStart(a) {
        s.initialize(a);
      },
      Identifier(a) {
        const {
          codePath: o,
          referenceMap: l
        } = n, i = l && l.get(a);
        if (!i)
          return;
        const u = i.resolved, c = z8(i), f = i.identifier.parent.type === "MemberExpression";
        if (i.isRead() && !(c && c.parent.operator === "=") && s.markAsRead(o.currentSegments, u), c && c.parent.right === c && !G8(u, f)) {
          let h = r.get(c);
          h || (h = [], r.set(c, h)), h.push(i);
        }
      },
      ":expression:exit"(a) {
        const {
          codePath: o,
          referenceMap: l
        } = n;
        if (!l)
          return;
        (a.type === "AwaitExpression" || a.type === "YieldExpression") && s.makeOutdated(o.currentSegments);
        const i = r.get(a);
        if (i) {
          r.delete(a);
          for (const u of i) {
            const c = u.resolved;
            s.isOutdated(o.currentSegments, c) && t4.report({
              node: a.parent,
              messageId: "nonAtomicUpdate",
              data: {
                value: e.getText(a.parent.left)
              }
            });
          }
        }
      }
    };
  }
};
Lm.meta;
Lm.create;
function K8(t4) {
  return t4[0].toUpperCase() + t4.slice(1);
}
var Rm = {
  meta: {
    type: "suggestion",
    docs: {
      description: "disallow async functions which have no `await` expression",
      category: "Best Practices",
      recommended: false,
      url: "https://eslint.org/docs/rules/require-await"
    },
    schema: [],
    messages: {
      missingAwait: "{{name}} has no 'await' expression."
    }
  },
  create(t4) {
    const e = t4.getSourceCode();
    let r = null;
    function s() {
      r = {
        upper: r,
        hasAwait: false
      };
    }
    function n(a) {
      !a.generator && a.async && !r.hasAwait && !E.isEmptyFunction(a) && t4.report({
        node: a,
        loc: E.getFunctionHeadLoc(a, e),
        messageId: "missingAwait",
        data: {
          name: K8(E.getFunctionNameWithKind(a))
        }
      }), r = r.upper;
    }
    return {
      FunctionDeclaration: s,
      FunctionExpression: s,
      ArrowFunctionExpression: s,
      "FunctionDeclaration:exit": n,
      "FunctionExpression:exit": n,
      "ArrowFunctionExpression:exit": n,
      AwaitExpression() {
        r && (r.hasAwait = true);
      },
      ForOfStatement(a) {
        r && a.await && (r.hasAwait = true);
      }
    };
  }
};
Rm.meta;
Rm.create;
var Nm = {
  meta: {
    type: "suggestion",
    docs: {
      description: "require JSDoc comments",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/require-jsdoc"
    },
    schema: [{
      type: "object",
      properties: {
        require: {
          type: "object",
          properties: {
            ClassDeclaration: {
              type: "boolean",
              default: false
            },
            MethodDefinition: {
              type: "boolean",
              default: false
            },
            FunctionDeclaration: {
              type: "boolean",
              default: true
            },
            ArrowFunctionExpression: {
              type: "boolean",
              default: false
            },
            FunctionExpression: {
              type: "boolean",
              default: false
            }
          },
          additionalProperties: false,
          default: {}
        }
      },
      additionalProperties: false
    }],
    deprecated: true,
    replacedBy: [],
    messages: {
      missingJSDocComment: "Missing JSDoc comment."
    }
  },
  create(t4) {
    const e = t4.getSourceCode(), r = Object.assign({
      FunctionDeclaration: true,
      MethodDefinition: false,
      ClassDeclaration: false,
      ArrowFunctionExpression: false,
      FunctionExpression: false
    }, t4.options[0] && t4.options[0].require);
    function s(a) {
      t4.report({
        node: a,
        messageId: "missingJSDocComment"
      });
    }
    function n(a) {
      e.getJSDocComment(a) || s(a);
    }
    return {
      FunctionDeclaration(a) {
        r.FunctionDeclaration && n(a);
      },
      FunctionExpression(a) {
        (r.MethodDefinition && a.parent.type === "MethodDefinition" || r.FunctionExpression && (a.parent.type === "VariableDeclarator" || a.parent.type === "Property" && a === a.parent.value)) && n(a);
      },
      ClassDeclaration(a) {
        r.ClassDeclaration && n(a);
      },
      ArrowFunctionExpression(a) {
        r.ArrowFunctionExpression && a.parent.type === "VariableDeclarator" && n(a);
      }
    };
  }
};
Nm.meta;
Nm.create;
var {
  CALL: J8,
  CONSTRUCT: X8,
  ReferenceTracker: Q8,
  getStringIfConstant: Y8
} = Vt.default;
var jm = {
  meta: {
    type: "suggestion",
    docs: {
      description: "enforce the use of `u` flag on RegExp",
      category: "Best Practices",
      recommended: false,
      url: "https://eslint.org/docs/rules/require-unicode-regexp"
    },
    messages: {
      requireUFlag: "Use the 'u' flag."
    },
    schema: []
  },
  create(t4) {
    return {
      "Literal[regex]"(e) {
        (e.regex.flags || "").includes("u") || t4.report({
          node: e,
          messageId: "requireUFlag"
        });
      },
      Program() {
        const e = t4.getScope(), r = new Q8(e), s = {
          RegExp: {
            [J8]: true,
            [X8]: true
          }
        };
        for (const {
          node: n
        } of r.iterateGlobalReferences(s)) {
          const a = n.arguments[1], o = Y8(a, e);
          (!a || typeof o == "string" && !o.includes("u")) && t4.report({
            node: n,
            messageId: "requireUFlag"
          });
        }
      }
    };
  }
};
jm.meta;
jm.create;
var Mm = {
  meta: {
    type: "suggestion",
    docs: {
      description: "require generator functions to contain `yield`",
      category: "ECMAScript 6",
      recommended: true,
      url: "https://eslint.org/docs/rules/require-yield"
    },
    schema: [],
    messages: {
      missingYield: "This generator function does not have 'yield'."
    }
  },
  create(t4) {
    const e = [];
    function r(n) {
      n.generator && e.push(0);
    }
    function s(n) {
      if (!n.generator)
        return;
      e.pop() === 0 && n.body.body.length > 0 && t4.report({
        node: n,
        messageId: "missingYield"
      });
    }
    return {
      FunctionDeclaration: r,
      "FunctionDeclaration:exit": s,
      FunctionExpression: r,
      "FunctionExpression:exit": s,
      YieldExpression() {
        e.length > 0 && (e[e.length - 1] += 1);
      }
    };
  }
};
Mm.meta;
Mm.create;
var $m = {
  meta: {
    type: "layout",
    docs: {
      description: "enforce spacing between rest and spread operators and their expressions",
      category: "ECMAScript 6",
      recommended: false,
      url: "https://eslint.org/docs/rules/rest-spread-spacing"
    },
    fixable: "whitespace",
    schema: [{
      enum: ["always", "never"]
    }],
    messages: {
      unexpectedWhitespace: "Unexpected whitespace after {{type}} operator.",
      expectedWhitespace: "Expected whitespace after {{type}} operator."
    }
  },
  create(t4) {
    const e = t4.getSourceCode(), r = t4.options[0] === "always";
    function s(n) {
      const a = e.getFirstToken(n), o = e.getTokenAfter(a), l = e.isSpaceBetweenTokens(a, o);
      let i;
      switch (n.type) {
        case "SpreadElement":
          i = "spread", n.parent.type === "ObjectExpression" && (i += " property");
          break;
        case "RestElement":
          i = "rest", n.parent.type === "ObjectPattern" && (i += " property");
          break;
        case "ExperimentalSpreadProperty":
          i = "spread property";
          break;
        case "ExperimentalRestProperty":
          i = "rest property";
          break;
        default:
          return;
      }
      r && !l ? t4.report({
        node: n,
        loc: a.loc,
        messageId: "expectedWhitespace",
        data: {
          type: i
        },
        fix(u) {
          return u.replaceTextRange([a.range[1], o.range[0]], " ");
        }
      }) : !r && l && t4.report({
        node: n,
        loc: {
          start: a.loc.end,
          end: o.loc.start
        },
        messageId: "unexpectedWhitespace",
        data: {
          type: i
        },
        fix(u) {
          return u.removeRange([a.range[1], o.range[0]]);
        }
      });
    }
    return {
      SpreadElement: s,
      RestElement: s,
      ExperimentalSpreadProperty: s,
      ExperimentalRestProperty: s
    };
  }
};
$m.meta;
$m.create;
var Vm = {
  meta: {
    type: "layout",
    docs: {
      description: "enforce consistent spacing before and after semicolons",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/semi-spacing"
    },
    fixable: "whitespace",
    schema: [{
      type: "object",
      properties: {
        before: {
          type: "boolean",
          default: false
        },
        after: {
          type: "boolean",
          default: true
        }
      },
      additionalProperties: false
    }],
    messages: {
      unexpectedWhitespaceBefore: "Unexpected whitespace before semicolon.",
      unexpectedWhitespaceAfter: "Unexpected whitespace after semicolon.",
      missingWhitespaceBefore: "Missing whitespace before semicolon.",
      missingWhitespaceAfter: "Missing whitespace after semicolon."
    }
  },
  create(t4) {
    const e = t4.options[0], r = t4.getSourceCode();
    let s = false, n = true;
    typeof e == "object" && (s = e.before, n = e.after);
    function a(h) {
      const p = r.getTokenBefore(h);
      return p && E.isTokenOnSameLine(p, h) && r.isSpaceBetweenTokens(p, h);
    }
    function o(h) {
      const p = r.getTokenAfter(h);
      return p && E.isTokenOnSameLine(h, p) && r.isSpaceBetweenTokens(h, p);
    }
    function l(h) {
      const p = r.getTokenAfter(h);
      return !(p && E.isTokenOnSameLine(h, p));
    }
    function i(h) {
      const p = r.getTokenBefore(h);
      return !(p && E.isTokenOnSameLine(h, p));
    }
    function u(h) {
      const p = r.getTokenAfter(h);
      return p && E.isClosingBraceToken(p) || E.isClosingParenToken(p);
    }
    function c(h, p) {
      if (E.isSemicolonToken(h)) {
        if (a(h)) {
          if (!s) {
            const m = r.getTokenBefore(h), d = {
              start: m.loc.end,
              end: h.loc.start
            };
            t4.report({
              node: p,
              loc: d,
              messageId: "unexpectedWhitespaceBefore",
              fix(g) {
                return g.removeRange([m.range[1], h.range[0]]);
              }
            });
          }
        } else if (s) {
          const m = h.loc;
          t4.report({
            node: p,
            loc: m,
            messageId: "missingWhitespaceBefore",
            fix(d) {
              return d.insertTextBefore(h, " ");
            }
          });
        }
        if (!i(h) && !l(h) && !u(h)) {
          if (o(h)) {
            if (!n) {
              const m = r.getTokenAfter(h), d = {
                start: h.loc.end,
                end: m.loc.start
              };
              t4.report({
                node: p,
                loc: d,
                messageId: "unexpectedWhitespaceAfter",
                fix(g) {
                  return g.removeRange([h.range[1], m.range[0]]);
                }
              });
            }
          } else if (n) {
            const m = h.loc;
            t4.report({
              node: p,
              loc: m,
              messageId: "missingWhitespaceAfter",
              fix(d) {
                return d.insertTextAfter(h, " ");
              }
            });
          }
        }
      }
    }
    function f(h) {
      const p = r.getLastToken(h);
      c(p, h);
    }
    return {
      VariableDeclaration: f,
      ExpressionStatement: f,
      BreakStatement: f,
      ContinueStatement: f,
      DebuggerStatement: f,
      DoWhileStatement: f,
      ReturnStatement: f,
      ThrowStatement: f,
      ImportDeclaration: f,
      ExportNamedDeclaration: f,
      ExportAllDeclaration: f,
      ExportDefaultDeclaration: f,
      ForStatement(h) {
        h.init && c(r.getTokenAfter(h.init), h), h.test && c(r.getTokenAfter(h.test), h);
      }
    };
  }
};
Vm.meta;
Vm.create;
var Z8 = ":matches(BreakStatement,ContinueStatement,DebuggerStatement,DoWhileStatement,ExportAllDeclaration,ExportDefaultDeclaration,ExportNamedDeclaration,ExpressionStatement,ImportDeclaration,ReturnStatement,ThrowStatement,VariableDeclaration)";
function e9(t4) {
  const e = t4.type;
  return e === "BlockStatement" || e === "Program" ? t4.body : e === "SwitchCase" ? t4.consequent : null;
}
function t9(t4) {
  const e = t4.parent.type;
  if (e === "IfStatement" && t4.parent.consequent === t4 && t4.parent.alternate || e === "DoWhileStatement")
    return true;
  const r = e9(t4.parent);
  return r !== null && r[r.length - 1] === t4;
}
var Um = {
  meta: {
    type: "layout",
    docs: {
      description: "enforce location of semicolons",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/semi-style"
    },
    schema: [{
      enum: ["last", "first"]
    }],
    fixable: "whitespace",
    messages: {
      expectedSemiColon: "Expected this semicolon to be at {{pos}}."
    }
  },
  create(t4) {
    const e = t4.getSourceCode(), r = t4.options[0] || "last";
    function s(n, a) {
      const o = e.getTokenBefore(n), l = e.getTokenAfter(n), i = !o || E.isTokenOnSameLine(o, n), u = !l || E.isTokenOnSameLine(n, l);
      (a === "last" && !i || a === "first" && !u) && t4.report({
        loc: n.loc,
        messageId: "expectedSemiColon",
        data: {
          pos: a === "last" ? "the end of the previous line" : "the beginning of the next line"
        },
        fix(c) {
          if (o && l && e.commentsExistBetween(o, l))
            return null;
          const f = o ? o.range[1] : n.range[0], h = l ? l.range[0] : n.range[1], p = a === "last" ? `;
` : `
;`;
          return c.replaceTextRange([f, h], p);
        }
      });
    }
    return {
      [Z8](n) {
        if (r === "first" && t9(n))
          return;
        const a = e.getLastToken(n);
        E.isSemicolonToken(a) && s(a, r);
      },
      ForStatement(n) {
        const a = n.init && e.getTokenAfter(n.init, E.isSemicolonToken), o = n.test && e.getTokenAfter(n.test, E.isSemicolonToken);
        a && s(a, "last"), o && s(o, "last");
      }
    };
  }
};
Um.meta;
Um.create;
var qm = {
  meta: {
    type: "layout",
    docs: {
      description: "require or disallow semicolons instead of ASI",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/semi"
    },
    fixable: "code",
    schema: {
      anyOf: [{
        type: "array",
        items: [{
          enum: ["never"]
        }, {
          type: "object",
          properties: {
            beforeStatementContinuationChars: {
              enum: ["always", "any", "never"]
            }
          },
          additionalProperties: false
        }],
        minItems: 0,
        maxItems: 2
      }, {
        type: "array",
        items: [{
          enum: ["always"]
        }, {
          type: "object",
          properties: {
            omitLastInOneLineBlock: {
              type: "boolean"
            }
          },
          additionalProperties: false
        }],
        minItems: 0,
        maxItems: 2
      }]
    },
    messages: {
      missingSemi: "Missing semicolon.",
      extraSemi: "Extra semicolon."
    }
  },
  create(t4) {
    const e = t4.options[1], r = t4.options[0] === "never", s = !!(e && e.omitLastInOneLineBlock), n = e && e.beforeStatementContinuationChars || "any", a = t4.getSourceCode();
    function o(d, g) {
      const y = a.getLastToken(d);
      let x, A, b;
      g ? (x = "extraSemi", b = y.loc, A = function(v) {
        return new Qs(v, a).retainSurroundingTokens(y).remove(y);
      }) : (x = "missingSemi", b = {
        start: y.loc.end,
        end: E.getNextLocation(a, y.loc.end)
      }, A = function(v) {
        return v.insertTextAfter(y, ";");
      }), t4.report({
        node: d,
        loc: b,
        messageId: x,
        fix: A
      });
    }
    function l(d) {
      const g = a.getTokenAfter(d);
      return !g || E.isClosingBraceToken(g) || E.isSemicolonToken(g);
    }
    function i(d) {
      if (!E.isClosingBraceToken(d))
        return false;
      const g = a.getNodeByRangeIndex(d.range[0]);
      return g.type === "BlockStatement" && g.parent.type === "ArrowFunctionExpression";
    }
    function u(d) {
      const g = a.getLastToken(d, 1), y = a.getTokenAfter(d);
      return !!y && E.isTokenOnSameLine(g, y);
    }
    function c(d) {
      const g = d.type;
      return g === "DoWhileStatement" || g === "BreakStatement" || g === "ContinueStatement" || g === "DebuggerStatement" || g === "ImportDeclaration" || g === "ExportAllDeclaration" ? false : g === "ReturnStatement" ? !!d.argument : g === "ExportNamedDeclaration" ? !!d.declaration : !i(a.getLastToken(d, 1));
    }
    function f(d) {
      return !!d && /^[-[(/+`]/u.test(d.value) && d.value !== "++" && d.value !== "--";
    }
    function h(d) {
      return l(a.getLastToken(d)) ? true : u(d) ? false : n === "never" && !c(d) || !f(a.getTokenAfter(d));
    }
    function p(d) {
      const g = d.parent, y = a.getTokenAfter(d);
      return !y || y.value !== "}" ? false : !!g && g.type === "BlockStatement" && g.loc.start.line === g.loc.end.line;
    }
    function m(d) {
      const g = E.isSemicolonToken(a.getLastToken(d));
      if (r)
        g && h(d) ? o(d, true) : !g && n === "always" && f(a.getTokenAfter(d)) && o(d);
      else {
        const y = s && p(d);
        g && y ? o(d, true) : !g && !y && o(d);
      }
    }
    return {
      VariableDeclaration: function(d) {
        const g = d.parent;
        (g.type !== "ForStatement" || g.init !== d) && (!/^For(?:In|Of)Statement/u.test(g.type) || g.left !== d) && m(d);
      },
      ExpressionStatement: m,
      ReturnStatement: m,
      ThrowStatement: m,
      DoWhileStatement: m,
      DebuggerStatement: m,
      BreakStatement: m,
      ContinueStatement: m,
      ImportDeclaration: m,
      ExportAllDeclaration: m,
      ExportNamedDeclaration(d) {
        d.declaration || m(d);
      },
      ExportDefaultDeclaration(d) {
        /(?:Class|Function)Declaration/u.test(d.declaration.type) || m(d);
      }
    };
  }
};
qm.meta;
qm.create;
var Wm = {
  meta: {
    type: "suggestion",
    docs: {
      description: "enforce sorted import declarations within modules",
      category: "ECMAScript 6",
      recommended: false,
      url: "https://eslint.org/docs/rules/sort-imports"
    },
    schema: [{
      type: "object",
      properties: {
        ignoreCase: {
          type: "boolean",
          default: false
        },
        memberSyntaxSortOrder: {
          type: "array",
          items: {
            enum: ["none", "all", "multiple", "single"]
          },
          uniqueItems: true,
          minItems: 4,
          maxItems: 4
        },
        ignoreDeclarationSort: {
          type: "boolean",
          default: false
        },
        ignoreMemberSort: {
          type: "boolean",
          default: false
        },
        allowSeparatedGroups: {
          type: "boolean",
          default: false
        }
      },
      additionalProperties: false
    }],
    fixable: "code",
    messages: {
      sortImportsAlphabetically: "Imports should be sorted alphabetically.",
      sortMembersAlphabetically: "Member '{{memberName}}' of the import declaration should be sorted alphabetically.",
      unexpectedSyntaxOrder: "Expected '{{syntaxA}}' syntax before '{{syntaxB}}' syntax."
    }
  },
  create(t4) {
    const e = t4.options[0] || {}, r = e.ignoreCase || false, s = e.ignoreDeclarationSort || false, n = e.ignoreMemberSort || false, a = e.memberSyntaxSortOrder || ["none", "all", "multiple", "single"], o = e.allowSeparatedGroups || false, l = t4.getSourceCode();
    let i = null;
    function u(p) {
      return p.specifiers.length === 0 ? "none" : p.specifiers[0].type === "ImportNamespaceSpecifier" ? "all" : p.specifiers.length === 1 ? "single" : "multiple";
    }
    function c(p) {
      return a.indexOf(u(p));
    }
    function f(p) {
      return p.specifiers[0] ? p.specifiers[0].local.name : null;
    }
    function h(p, m) {
      return Math.max(m.loc.start.line - p.loc.end.line - 1, 0);
    }
    return {
      ImportDeclaration(p) {
        if (!s) {
          if (i && o && h(i, p) > 0 && (i = null), i) {
            const m = c(p), d = c(i);
            let g = f(p), y = f(i);
            r && (y = y && y.toLowerCase(), g = g && g.toLowerCase()), m !== d ? m < d && t4.report({
              node: p,
              messageId: "unexpectedSyntaxOrder",
              data: {
                syntaxA: a[m],
                syntaxB: a[d]
              }
            }) : y && g && g < y && t4.report({
              node: p,
              messageId: "sortImportsAlphabetically"
            });
          }
          i = p;
        }
        if (!n) {
          const m = p.specifiers.filter((y) => y.type === "ImportSpecifier"), d = r ? (y) => y.local.name.toLowerCase() : (y) => y.local.name, g = m.map(d).findIndex((y, x, A) => A[x - 1] > y);
          g !== -1 && t4.report({
            node: m[g],
            messageId: "sortMembersAlphabetically",
            data: {
              memberName: m[g].local.name
            },
            fix(y) {
              return m.some((x) => l.getCommentsBefore(x).length || l.getCommentsAfter(x).length) ? null : y.replaceTextRange([m[0].range[0], m[m.length - 1].range[1]], m.slice().sort((x, A) => {
                const b = d(x), v = d(A);
                return b > v ? 1 : -1;
              }).reduce((x, A, b) => {
                const v = b === m.length - 1 ? "" : l.getText().slice(m[b].range[1], m[b + 1].range[0]);
                return x + l.getText(A) + v;
              }, ""));
            }
          });
        }
      }
    };
  }
};
Wm.meta;
Wm.create;
function r9(t4) {
  const e = E.getStaticPropertyName(t4);
  return e !== null ? e : t4.key.name || null;
}
var Ts = {
  asc(t4, e) {
    return t4 <= e;
  },
  ascI(t4, e) {
    return t4.toLowerCase() <= e.toLowerCase();
  },
  ascN(t4, e) {
    return my.default(t4, e) <= 0;
  },
  ascIN(t4, e) {
    return my.default(t4.toLowerCase(), e.toLowerCase()) <= 0;
  },
  desc(t4, e) {
    return Ts.asc(e, t4);
  },
  descI(t4, e) {
    return Ts.ascI(e, t4);
  },
  descN(t4, e) {
    return Ts.ascN(e, t4);
  },
  descIN(t4, e) {
    return Ts.ascIN(e, t4);
  }
};
var zm = {
  meta: {
    type: "suggestion",
    docs: {
      description: "require object keys to be sorted",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/sort-keys"
    },
    schema: [{
      enum: ["asc", "desc"]
    }, {
      type: "object",
      properties: {
        caseSensitive: {
          type: "boolean",
          default: true
        },
        natural: {
          type: "boolean",
          default: false
        },
        minKeys: {
          type: "integer",
          minimum: 2,
          default: 2
        }
      },
      additionalProperties: false
    }],
    messages: {
      sortKeys: "Expected object keys to be in {{natural}}{{insensitive}}{{order}}ending order. '{{thisName}}' should be before '{{prevName}}'."
    }
  },
  create(t4) {
    const e = t4.options[0] || "asc", r = t4.options[1], s = r && r.caseSensitive === false, n = r && r.natural, a = r && r.minKeys, o = Ts[e + (s ? "I" : "") + (n ? "N" : "")];
    let l = null;
    return {
      ObjectExpression(i) {
        l = {
          upper: l,
          prevName: null,
          numKeys: i.properties.length
        };
      },
      "ObjectExpression:exit"() {
        l = l.upper;
      },
      SpreadElement(i) {
        i.parent.type === "ObjectExpression" && (l.prevName = null);
      },
      Property(i) {
        if (i.parent.type === "ObjectPattern")
          return;
        const u = l.prevName, c = l.numKeys, f = r9(i);
        f !== null && (l.prevName = f), !(u === null || f === null || c < a) && (o(u, f) || t4.report({
          node: i,
          loc: i.key.loc,
          messageId: "sortKeys",
          data: {
            thisName: f,
            prevName: u,
            order: e,
            insensitive: s ? "insensitive " : "",
            natural: n ? "natural " : ""
          }
        }));
      }
    };
  }
};
zm.meta;
zm.create;
var Gm = {
  meta: {
    type: "suggestion",
    docs: {
      description: "require variables within the same declaration block to be sorted",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/sort-vars"
    },
    schema: [{
      type: "object",
      properties: {
        ignoreCase: {
          type: "boolean",
          default: false
        }
      },
      additionalProperties: false
    }],
    fixable: "code",
    messages: {
      sortVars: "Variables within the same declaration block should be sorted alphabetically."
    }
  },
  create(t4) {
    const e = t4.options[0] || {}, r = e.ignoreCase || false, s = t4.getSourceCode();
    return {
      VariableDeclaration(n) {
        const a = n.declarations.filter((u) => u.id.type === "Identifier"), o = r ? (u) => u.id.name.toLowerCase() : (u) => u.id.name, l = a.some((u) => u.init !== null && u.init.type !== "Literal");
        let i = false;
        a.slice(1).reduce((u, c) => {
          const f = o(u);
          return o(c) < f ? (t4.report({
            node: c,
            messageId: "sortVars",
            fix(p) {
              return l || i ? null : p.replaceTextRange([a[0].range[0], a[a.length - 1].range[1]], a.slice().sort((m, d) => {
                const g = o(m), y = o(d);
                return g > y ? 1 : -1;
              }).reduce((m, d, g) => {
                const y = g === a.length - 1 ? "" : s.getText().slice(a[g].range[1], a[g + 1].range[0]);
                return m + s.getText(d) + y;
              }, ""));
            }
          }), i = true, u) : c;
        }, a[0]);
      }
    };
  }
};
Gm.meta;
Gm.create;
function m0(t4) {
  const e = t4.parent;
  return t4.type === "BlockStatement" && E.isFunction(e) && e.body === t4;
}
var Hm = {
  meta: {
    type: "layout",
    docs: {
      description: "enforce consistent spacing before blocks",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/space-before-blocks"
    },
    fixable: "whitespace",
    schema: [{
      oneOf: [{
        enum: ["always", "never"]
      }, {
        type: "object",
        properties: {
          keywords: {
            enum: ["always", "never", "off"]
          },
          functions: {
            enum: ["always", "never", "off"]
          },
          classes: {
            enum: ["always", "never", "off"]
          }
        },
        additionalProperties: false
      }]
    }],
    messages: {
      unexpectedSpace: "Unexpected space before opening brace.",
      missingSpace: "Missing space before opening brace."
    }
  },
  create(t4) {
    const e = t4.options[0], r = t4.getSourceCode();
    let s = true, n = true, a = true, o = false, l = false, i = false;
    typeof e == "object" ? (s = e.functions === "always", n = e.keywords === "always", a = e.classes === "always", o = e.functions === "never", l = e.keywords === "never", i = e.classes === "never") : e === "never" && (s = false, n = false, a = false, o = true, l = true, i = true);
    function u(f, h) {
      return E.isArrowToken(f) || E.isKeywordToken(f) && !m0(h);
    }
    function c(f) {
      const h = r.getTokenBefore(f);
      if (h && !u(h, f) && E.isTokenOnSameLine(h, f)) {
        const p = r.isSpaceBetweenTokens(h, f);
        let m, d;
        m0(f) ? (m = s, d = o) : f.type === "ClassBody" ? (m = a, d = i) : (m = n, d = l), m && !p ? t4.report({
          node: f,
          messageId: "missingSpace",
          fix(g) {
            return g.insertTextBefore(f, " ");
          }
        }) : d && p && t4.report({
          node: f,
          messageId: "unexpectedSpace",
          fix(g) {
            return g.removeRange([h.range[1], f.range[0]]);
          }
        });
      }
    }
    return {
      BlockStatement: c,
      ClassBody: c,
      SwitchStatement: function(f) {
        const h = f.cases;
        let p;
        h.length > 0 ? p = r.getTokenBefore(h[0]) : p = r.getLastToken(f, 1), c(p);
      }
    };
  }
};
Hm.meta;
Hm.create;
var Km = {
  meta: {
    type: "layout",
    docs: {
      description: "enforce consistent spacing before `function` definition opening parenthesis",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/space-before-function-paren"
    },
    fixable: "whitespace",
    schema: [{
      oneOf: [{
        enum: ["always", "never"]
      }, {
        type: "object",
        properties: {
          anonymous: {
            enum: ["always", "never", "ignore"]
          },
          named: {
            enum: ["always", "never", "ignore"]
          },
          asyncArrow: {
            enum: ["always", "never", "ignore"]
          }
        },
        additionalProperties: false
      }]
    }],
    messages: {
      unexpectedSpace: "Unexpected space before function parentheses.",
      missingSpace: "Missing space before function parentheses."
    }
  },
  create(t4) {
    const e = t4.getSourceCode(), r = typeof t4.options[0] == "string" ? t4.options[0] : "always", s = typeof t4.options[0] == "object" ? t4.options[0] : {};
    function n(l) {
      if (l.id)
        return true;
      const i = l.parent;
      return i.type === "MethodDefinition" || i.type === "Property" && (i.kind === "get" || i.kind === "set" || i.method);
    }
    function a(l) {
      if (l.type === "ArrowFunctionExpression") {
        if (l.async && E.isOpeningParenToken(e.getFirstToken(l, {
          skip: 1
        })))
          return s.asyncArrow || r;
      } else {
        if (n(l))
          return s.named || r;
        if (!l.generator)
          return s.anonymous || r;
      }
      return "ignore";
    }
    function o(l) {
      const i = a(l);
      if (i === "ignore")
        return;
      const u = e.getFirstToken(l, E.isOpeningParenToken), c = e.getTokenBefore(u), f = e.isSpaceBetweenTokens(c, u);
      f && i === "never" ? t4.report({
        node: l,
        loc: {
          start: c.loc.end,
          end: u.loc.start
        },
        messageId: "unexpectedSpace",
        fix(h) {
          const p = e.getCommentsBefore(u);
          return p.some((m) => m.type === "Line") ? null : h.replaceTextRange([c.range[1], u.range[0]], p.reduce((m, d) => m + e.getText(d), ""));
        }
      }) : !f && i === "always" && t4.report({
        node: l,
        loc: u.loc,
        messageId: "missingSpace",
        fix: (h) => h.insertTextAfter(c, " ")
      });
    }
    return {
      ArrowFunctionExpression: o,
      FunctionDeclaration: o,
      FunctionExpression: o
    };
  }
};
Km.meta;
Km.create;
var Jm = {
  meta: {
    type: "layout",
    docs: {
      description: "enforce consistent spacing inside parentheses",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/space-in-parens"
    },
    fixable: "whitespace",
    schema: [{
      enum: ["always", "never"]
    }, {
      type: "object",
      properties: {
        exceptions: {
          type: "array",
          items: {
            enum: ["{}", "[]", "()", "empty"]
          },
          uniqueItems: true
        }
      },
      additionalProperties: false
    }],
    messages: {
      missingOpeningSpace: "There must be a space after this paren.",
      missingClosingSpace: "There must be a space before this paren.",
      rejectedOpeningSpace: "There should be no space after this paren.",
      rejectedClosingSpace: "There should be no space before this paren."
    }
  },
  create(t4) {
    const e = t4.options[0] === "always", r = t4.options[1] && t4.options[1].exceptions || [], s = {};
    let n;
    r.length && (s.braceException = r.includes("{}"), s.bracketException = r.includes("[]"), s.parenException = r.includes("()"), s.empty = r.includes("empty"));
    function a() {
      const p = [], m = [];
      return s.braceException && (p.push("{"), m.push("}")), s.bracketException && (p.push("["), m.push("]")), s.parenException && (p.push("("), m.push(")")), s.empty && (p.push(")"), m.push("(")), {
        openers: p,
        closers: m
      };
    }
    const o = t4.getSourceCode();
    function l(p) {
      return n.openers.includes(p.value);
    }
    function i(p) {
      return n.closers.includes(p.value);
    }
    function u(p, m) {
      return o.isSpaceBetweenTokens(p, m) || !s.empty && E.isClosingParenToken(m) ? false : e ? !l(m) : l(m);
    }
    function c(p, m) {
      return !E.isTokenOnSameLine(p, m) || m.type === "Line" || !o.isSpaceBetweenTokens(p, m) ? false : e ? l(m) : !l(m);
    }
    function f(p, m) {
      return o.isSpaceBetweenTokens(p, m) || !s.empty && E.isOpeningParenToken(p) ? false : e ? !i(p) : i(p);
    }
    function h(p, m) {
      return !E.isTokenOnSameLine(p, m) || !o.isSpaceBetweenTokens(p, m) ? false : e ? i(p) : !i(p);
    }
    return {
      Program: function(p) {
        n = a();
        const m = o.tokensAndComments;
        m.forEach((d, g) => {
          const y = m[g - 1], x = m[g + 1];
          !E.isOpeningParenToken(d) && !E.isClosingParenToken(d) || (d.value === "(" && u(d, x) && t4.report({
            node: p,
            loc: d.loc,
            messageId: "missingOpeningSpace",
            fix(A) {
              return A.insertTextAfter(d, " ");
            }
          }), d.value === "(" && c(d, x) && t4.report({
            node: p,
            loc: {
              start: d.loc.end,
              end: x.loc.start
            },
            messageId: "rejectedOpeningSpace",
            fix(A) {
              return A.removeRange([d.range[1], x.range[0]]);
            }
          }), d.value === ")" && f(y, d) && t4.report({
            node: p,
            loc: d.loc,
            messageId: "missingClosingSpace",
            fix(A) {
              return A.insertTextBefore(d, " ");
            }
          }), d.value === ")" && h(y, d) && t4.report({
            node: p,
            loc: {
              start: y.loc.end,
              end: d.loc.start
            },
            messageId: "rejectedClosingSpace",
            fix(A) {
              return A.removeRange([y.range[1], d.range[0]]);
            }
          }));
        });
      }
    };
  }
};
Jm.meta;
Jm.create;
var Xm = {
  meta: {
    type: "layout",
    docs: {
      description: "require spacing around infix operators",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/space-infix-ops"
    },
    fixable: "whitespace",
    schema: [{
      type: "object",
      properties: {
        int32Hint: {
          type: "boolean",
          default: false
        }
      },
      additionalProperties: false
    }],
    messages: {
      missingSpace: "Operator '{{operator}}' must be spaced."
    }
  },
  create(t4) {
    const e = t4.options[0] ? t4.options[0].int32Hint === true : false, r = t4.getSourceCode();
    function s(o, l, i) {
      const u = r.getFirstTokenBetween(o, l, (h) => h.value === i), c = r.getTokenBefore(u), f = r.getTokenAfter(u);
      return !r.isSpaceBetweenTokens(c, u) || !r.isSpaceBetweenTokens(u, f) ? u : null;
    }
    function n(o, l) {
      t4.report({
        node: o,
        loc: l.loc,
        messageId: "missingSpace",
        data: {
          operator: l.value
        },
        fix(i) {
          const u = r.getTokenBefore(l), c = r.getTokenAfter(l);
          let f = "";
          return l.range[0] - u.range[1] === 0 && (f = " "), f += l.value, c.range[0] - l.range[1] === 0 && (f += " "), i.replaceText(l, f);
        }
      });
    }
    function a(o) {
      const l = o.left.typeAnnotation ? o.left.typeAnnotation : o.left, i = o.right, u = o.operator || "=", c = s(l, i, u);
      c && (e && r.getText(o).endsWith("|0") || n(o, c));
    }
    return {
      AssignmentExpression: a,
      AssignmentPattern: a,
      BinaryExpression: a,
      LogicalExpression: a,
      ConditionalExpression: function(o) {
        const l = s(o.test, o.consequent, "?"), i = s(o.consequent, o.alternate, ":");
        l && n(o, l), i && n(o, i);
      },
      VariableDeclarator: function(o) {
        const l = o.id.typeAnnotation ? o.id.typeAnnotation : o.id, i = o.init;
        if (i) {
          const u = s(l, i, "=");
          u && n(o, u);
        }
      }
    };
  }
};
Xm.meta;
Xm.create;
var Qm = {
  meta: {
    type: "layout",
    docs: {
      description: "enforce consistent spacing before or after unary operators",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/space-unary-ops"
    },
    fixable: "whitespace",
    schema: [{
      type: "object",
      properties: {
        words: {
          type: "boolean",
          default: true
        },
        nonwords: {
          type: "boolean",
          default: false
        },
        overrides: {
          type: "object",
          additionalProperties: {
            type: "boolean"
          }
        }
      },
      additionalProperties: false
    }],
    messages: {
      unexpectedBefore: "Unexpected space before unary operator '{{operator}}'.",
      unexpectedAfter: "Unexpected space after unary operator '{{operator}}'.",
      unexpectedAfterWord: "Unexpected space after unary word operator '{{word}}'.",
      wordOperator: "Unary word operator '{{word}}' must be followed by whitespace.",
      operator: "Unary operator '{{operator}}' must be followed by whitespace.",
      beforeUnaryExpressions: "Space is required before unary expressions '{{token}}'."
    }
  },
  create(t4) {
    const e = t4.options[0] || {
      words: true,
      nonwords: false
    }, r = t4.getSourceCode();
    function s(h) {
      return h && h.type === "UnaryExpression" && h.argument.operator === "!" && h.argument && h.argument.type === "UnaryExpression" && h.argument.operator === "!";
    }
    function n(h) {
      return e.overrides && Object.prototype.hasOwnProperty.call(e.overrides, h);
    }
    function a(h) {
      return e.overrides[h];
    }
    function o(h, p, m, d) {
      m.range[0] === p.range[1] && t4.report({
        node: h,
        messageId: "wordOperator",
        data: {
          word: d
        },
        fix(g) {
          return g.insertTextAfter(p, " ");
        }
      });
    }
    function l(h, p, m, d) {
      E.canTokensBeAdjacent(p, m) && m.range[0] > p.range[1] && t4.report({
        node: h,
        messageId: "unexpectedAfterWord",
        data: {
          word: d
        },
        fix(g) {
          return g.removeRange([p.range[1], m.range[0]]);
        }
      });
    }
    function i(h, p, m, d) {
      n(d) ? a(d) ? o(h, p, m, d) : l(h, p, m, d) : e.words ? o(h, p, m, d) : l(h, p, m, d);
    }
    function u(h, p, m) {
      if (h.prefix) {
        if (s(h))
          return;
        p.range[1] === m.range[0] && t4.report({
          node: h,
          messageId: "operator",
          data: {
            operator: p.value
          },
          fix(d) {
            return d.insertTextAfter(p, " ");
          }
        });
      } else
        p.range[1] === m.range[0] && t4.report({
          node: h,
          messageId: "beforeUnaryExpressions",
          data: {
            token: m.value
          },
          fix(d) {
            return d.insertTextBefore(m, " ");
          }
        });
    }
    function c(h, p, m) {
      h.prefix ? m.range[0] > p.range[1] && t4.report({
        node: h,
        messageId: "unexpectedAfter",
        data: {
          operator: p.value
        },
        fix(d) {
          return E.canTokensBeAdjacent(p, m) ? d.removeRange([p.range[1], m.range[0]]) : null;
        }
      }) : m.range[0] > p.range[1] && t4.report({
        node: h,
        messageId: "unexpectedBefore",
        data: {
          operator: m.value
        },
        fix(d) {
          return d.removeRange([p.range[1], m.range[0]]);
        }
      });
    }
    function f(h) {
      const p = h.type === "UpdateExpression" && !h.prefix ? r.getLastTokens(h, 2) : r.getFirstTokens(h, 2), m = p[0], d = p[1];
      if ((h.type === "NewExpression" || h.prefix) && m.type === "Keyword") {
        i(h, m, d, m.value);
        return;
      }
      const g = h.prefix ? p[0].value : p[1].value;
      n(g) ? a(g) ? u(h, m, d) : c(h, m, d) : e.nonwords ? u(h, m, d) : c(h, m, d);
    }
    return {
      UnaryExpression: f,
      UpdateExpression: f,
      NewExpression: f,
      YieldExpression: function(h) {
        const p = r.getFirstTokens(h, 3);
        !h.argument || h.delegate || i(h, p[0], p[1], "yield");
      },
      AwaitExpression: function(h) {
        const p = r.getFirstTokens(h, 3);
        i(h, p[0], p[1], "await");
      }
    };
  }
};
Qm.meta;
Qm.create;
function qs(t4) {
  return `(?:${Ju.default(t4)})`;
}
function d0(t4) {
  return `${qs(t4)}+`;
}
function n9(t4) {
  return t4.indexOf("*") === -1 ? t4.concat("*") : t4;
}
function Ub(t4) {
  let e = "";
  return t4.length === 0 ? e += "\\s" : (e += "(?:\\s|", t4.length === 1 ? e += d0(t4[0]) : (e += "(?:", e += t4.map(d0).join("|"), e += ")"), e += `(?:$|[${Array.from(E.LINEBREAKS).join("")}]))`), e;
}
function s9(t4, e) {
  let r = "^";
  return t4.length === 1 ? r += qs(t4[0]) : (r += "(?:", r += t4.map(qs).join("|"), r += ")"), r += "?", r += Ub(e), new RegExp(r, "u");
}
function a9(t4) {
  const e = `^(${t4.map(qs).join("|")})?[ 	]+`;
  return new RegExp(e, "u");
}
var Ym = {
  meta: {
    type: "suggestion",
    docs: {
      description: "enforce consistent spacing after the `//` or `/*` in a comment",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/spaced-comment"
    },
    fixable: "whitespace",
    schema: [{
      enum: ["always", "never"]
    }, {
      type: "object",
      properties: {
        exceptions: {
          type: "array",
          items: {
            type: "string"
          }
        },
        markers: {
          type: "array",
          items: {
            type: "string"
          }
        },
        line: {
          type: "object",
          properties: {
            exceptions: {
              type: "array",
              items: {
                type: "string"
              }
            },
            markers: {
              type: "array",
              items: {
                type: "string"
              }
            }
          },
          additionalProperties: false
        },
        block: {
          type: "object",
          properties: {
            exceptions: {
              type: "array",
              items: {
                type: "string"
              }
            },
            markers: {
              type: "array",
              items: {
                type: "string"
              }
            },
            balanced: {
              type: "boolean",
              default: false
            }
          },
          additionalProperties: false
        }
      },
      additionalProperties: false
    }],
    messages: {
      unexpectedSpaceAfterMarker: "Unexpected space or tab after marker ({{refChar}}) in comment.",
      expectedExceptionAfter: "Expected exception block, space or tab after '{{refChar}}' in comment.",
      unexpectedSpaceBefore: "Unexpected space or tab before '*/' in comment.",
      unexpectedSpaceAfter: "Unexpected space or tab after '{{refChar}}' in comment.",
      expectedSpaceBefore: "Expected space or tab before '*/' in comment.",
      expectedSpaceAfter: "Expected space or tab after '{{refChar}}' in comment."
    }
  },
  create(t4) {
    const e = t4.getSourceCode(), r = t4.options[0] !== "never", s = t4.options[1] || {}, n = s.block && s.block.balanced, a = ["block", "line"].reduce((u, c) => {
      const f = n9(s[c] && s[c].markers || s.markers || []), h = s[c] && s[c].exceptions || s.exceptions || [];
      return u[c] = {
        beginRegex: r ? s9(f, h) : a9(f),
        endRegex: n && r ? new RegExp(`${Ub(h)}$`, "u") : new RegExp("[ 	]+$", "u"),
        hasExceptions: h.length > 0,
        captureMarker: new RegExp(`^(${f.map(qs).join("|")})`, "u"),
        markers: new Set(f)
      }, u;
    }, {});
    function o(u, c, f, h) {
      const p = u.type.toLowerCase(), m = p === "block" ? "/*" : "//";
      t4.report({
        node: u,
        fix(d) {
          const g = u.range[0];
          let y = g + 2;
          return r ? (f && (y += f[0].length), d.insertTextAfterRange([g, y], " ")) : (y += f[0].length, d.replaceTextRange([g, y], m + (f[1] ? f[1] : "")));
        },
        messageId: c,
        data: {
          refChar: h
        }
      });
    }
    function l(u, c, f) {
      t4.report({
        node: u,
        fix(h) {
          if (r)
            return h.insertTextAfterRange([u.range[0], u.range[1] - 2], " ");
          const p = u.range[1] - 2, m = p - f[0].length;
          return h.replaceTextRange([m, p], "");
        },
        messageId: c
      });
    }
    function i(u) {
      const c = u.type.toLowerCase(), f = a[c], h = c === "block" ? "/*" : "//";
      if (u.value.length === 0 || f.markers.has(u.value))
        return;
      const p = f.beginRegex.exec(u.value), m = f.endRegex.exec(u.value);
      if (r) {
        if (!p) {
          const d = f.captureMarker.exec(u.value), g = d ? h + d[0] : h;
          f.hasExceptions ? o(u, "expectedExceptionAfter", d, g) : o(u, "expectedSpaceAfter", d, g);
        }
        n && c === "block" && !m && l(u, "expectedSpaceBefore");
      } else
        p && (p[1] ? o(u, "unexpectedSpaceAfterMarker", p, p[1]) : o(u, "unexpectedSpaceAfter", p, h)), n && c === "block" && m && l(u, "unexpectedSpaceBefore", m);
    }
    return {
      Program() {
        e.getAllComments().filter((c) => c.type !== "Shebang").forEach(i);
      }
    };
  }
};
Ym.meta;
Ym.create;
function g0(t4) {
  const e = [];
  for (let r = 0; r < t4.length; r++) {
    const s = t4[r];
    if (s.type === "ExpressionStatement" && s.expression.type === "Literal" && s.expression.value === "use strict")
      e[r] = s;
    else
      break;
  }
  return e;
}
function i9(t4) {
  return t4.type === "Identifier";
}
function tl(t4) {
  return t4.every(i9);
}
var Zm = {
  meta: {
    type: "suggestion",
    docs: {
      description: "require or disallow strict mode directives",
      category: "Strict Mode",
      recommended: false,
      url: "https://eslint.org/docs/rules/strict"
    },
    schema: [{
      enum: ["never", "global", "function", "safe"]
    }],
    fixable: "code",
    messages: {
      function: "Use the function form of 'use strict'.",
      global: "Use the global form of 'use strict'.",
      multiple: "Multiple 'use strict' directives.",
      never: "Strict mode is not permitted.",
      unnecessary: "Unnecessary 'use strict' directive.",
      module: "'use strict' is unnecessary inside of modules.",
      implied: "'use strict' is unnecessary when implied strict mode is enabled.",
      unnecessaryInClasses: "'use strict' is unnecessary inside of classes.",
      nonSimpleParameterList: "'use strict' directive inside a function with non-simple parameter list throws a syntax error since ES2016.",
      wrap: "Wrap {{name}} in a function with 'use strict' directive."
    }
  },
  create(t4) {
    const e = t4.parserOptions.ecmaFeatures || {}, r = [], s = [];
    let n = t4.options[0] || "safe";
    e.impliedStrict ? n = "implied" : n === "safe" && (n = e.globalReturn ? "global" : "function");
    function a(m) {
      return m === "multiple" || m === "unnecessary" || m === "module" || m === "implied" || m === "unnecessaryInClasses";
    }
    function o(m) {
      return (d) => d.remove(m);
    }
    function l(m, d, g, y, x) {
      m.slice(d, g).forEach((A) => {
        t4.report({
          node: A,
          messageId: y,
          fix: x ? o(A) : null
        });
      });
    }
    function i(m, d, g) {
      l(m, 0, m.length, d, g);
    }
    function u(m, d, g) {
      l(m, 1, m.length, d, g);
    }
    function c(m, d) {
      const g = s.length > 0, y = r.length === 0 && s.length === 0, x = r.length > 0 && r[r.length - 1], A = d.length > 0;
      A ? (tl(m.params) ? x ? t4.report({
        node: d[0],
        messageId: "unnecessary",
        fix: o(d[0])
      }) : g && t4.report({
        node: d[0],
        messageId: "unnecessaryInClasses",
        fix: o(d[0])
      }) : t4.report({
        node: d[0],
        messageId: "nonSimpleParameterList"
      }), u(d, "multiple", true)) : y && (tl(m.params) ? t4.report({
        node: m,
        messageId: "function"
      }) : t4.report({
        node: m,
        messageId: "wrap",
        data: {
          name: E.getFunctionNameWithKind(m)
        }
      })), r.push(x || A);
    }
    function f() {
      r.pop();
    }
    function h(m) {
      const d = m.body.type === "BlockStatement", g = d ? g0(m.body.body) : [];
      n === "function" ? c(m, g) : g.length > 0 && (tl(m.params) ? i(g, n, a(n)) : (t4.report({
        node: g[0],
        messageId: "nonSimpleParameterList"
      }), u(g, "multiple", true)));
    }
    const p = {
      Program(m) {
        const d = g0(m.body);
        m.sourceType === "module" && (n = "module"), n === "global" ? (m.body.length > 0 && d.length === 0 && t4.report({
          node: m,
          messageId: "global"
        }), u(d, "multiple", true)) : i(d, n, a(n));
      },
      FunctionDeclaration: h,
      FunctionExpression: h,
      ArrowFunctionExpression: h
    };
    return n === "function" && Object.assign(p, {
      ClassBody() {
        s.push(true);
      },
      "ClassBody:exit"() {
        s.pop();
      },
      "FunctionDeclaration:exit": f,
      "FunctionExpression:exit": f,
      "ArrowFunctionExpression:exit": f
    }), p;
  }
};
Zm.meta;
Zm.create;
var ed = {
  meta: {
    type: "layout",
    docs: {
      description: "enforce spacing around colons of switch statements",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/switch-colon-spacing"
    },
    schema: [{
      type: "object",
      properties: {
        before: {
          type: "boolean",
          default: false
        },
        after: {
          type: "boolean",
          default: true
        }
      },
      additionalProperties: false
    }],
    fixable: "whitespace",
    messages: {
      expectedBefore: "Expected space(s) before this colon.",
      expectedAfter: "Expected space(s) after this colon.",
      unexpectedBefore: "Unexpected space(s) before this colon.",
      unexpectedAfter: "Unexpected space(s) after this colon."
    }
  },
  create(t4) {
    const e = t4.getSourceCode(), r = t4.options[0] || {}, s = r.before === true, n = r.after !== false;
    function a(u) {
      return u.test ? e.getTokenAfter(u.test, E.isColonToken) : e.getFirstToken(u, 1);
    }
    function o(u, c, f) {
      return E.isClosingBraceToken(c) || !E.isTokenOnSameLine(u, c) || e.isSpaceBetweenTokens(u, c) === f;
    }
    function l(u, c) {
      return e.getFirstTokenBetween(u, c, {
        includeComments: true,
        filter: E.isCommentToken
      }) !== null;
    }
    function i(u, c, f, h) {
      return l(c, f) ? null : h ? u.insertTextAfter(c, " ") : u.removeRange([c.range[1], f.range[0]]);
    }
    return {
      SwitchCase(u) {
        const c = a(u), f = e.getTokenBefore(c), h = e.getTokenAfter(c);
        o(f, c, s) || t4.report({
          node: u,
          loc: c.loc,
          messageId: s ? "expectedBefore" : "unexpectedBefore",
          fix: (p) => i(p, f, c, s)
        }), o(c, h, n) || t4.report({
          node: u,
          loc: c.loc,
          messageId: n ? "expectedAfter" : "unexpectedAfter",
          fix: (p) => i(p, c, h, n)
        });
      }
    };
  }
};
ed.meta;
ed.create;
var td = {
  meta: {
    type: "suggestion",
    docs: {
      description: "require symbol descriptions",
      category: "ECMAScript 6",
      recommended: false,
      url: "https://eslint.org/docs/rules/symbol-description"
    },
    fixable: null,
    schema: [],
    messages: {
      expected: "Expected Symbol to have a description."
    }
  },
  create(t4) {
    function e(r) {
      r.arguments.length === 0 && t4.report({
        node: r,
        messageId: "expected"
      });
    }
    return {
      "Program:exit"() {
        const r = t4.getScope(), s = E.getVariableByName(r, "Symbol");
        s && s.defs.length === 0 && s.references.forEach((n) => {
          const a = n.identifier;
          E.isCallee(a) && e(a.parent);
        });
      }
    };
  }
};
td.meta;
td.create;
var rd = {
  meta: {
    type: "layout",
    docs: {
      description: "require or disallow spacing around embedded expressions of template strings",
      category: "ECMAScript 6",
      recommended: false,
      url: "https://eslint.org/docs/rules/template-curly-spacing"
    },
    fixable: "whitespace",
    schema: [{
      enum: ["always", "never"]
    }],
    messages: {
      expectedBefore: "Expected space(s) before '}'.",
      expectedAfter: "Expected space(s) after '${'.",
      unexpectedBefore: "Unexpected space(s) before '}'.",
      unexpectedAfter: "Unexpected space(s) after '${'."
    }
  },
  create(t4) {
    const e = t4.getSourceCode(), r = t4.options[0] === "always";
    function s(a) {
      if (!a.value.startsWith("}"))
        return;
      const o = e.getTokenBefore(a, {
        includeComments: true
      }), l = e.isSpaceBetween(o, a);
      E.isTokenOnSameLine(o, a) && (r && !l && t4.report({
        loc: {
          start: a.loc.start,
          end: {
            line: a.loc.start.line,
            column: a.loc.start.column + 1
          }
        },
        messageId: "expectedBefore",
        fix: (i) => i.insertTextBefore(a, " ")
      }), !r && l && t4.report({
        loc: {
          start: o.loc.end,
          end: a.loc.start
        },
        messageId: "unexpectedBefore",
        fix: (i) => i.removeRange([o.range[1], a.range[0]])
      }));
    }
    function n(a) {
      if (!a.value.endsWith("${"))
        return;
      const o = e.getTokenAfter(a, {
        includeComments: true
      }), l = e.isSpaceBetween(a, o);
      E.isTokenOnSameLine(a, o) && (r && !l && t4.report({
        loc: {
          start: {
            line: a.loc.end.line,
            column: a.loc.end.column - 2
          },
          end: a.loc.end
        },
        messageId: "expectedAfter",
        fix: (i) => i.insertTextAfter(a, " ")
      }), !r && l && t4.report({
        loc: {
          start: a.loc.end,
          end: o.loc.start
        },
        messageId: "unexpectedAfter",
        fix: (i) => i.removeRange([a.range[1], o.range[0]])
      }));
    }
    return {
      TemplateElement(a) {
        const o = e.getFirstToken(a);
        s(o), n(o);
      }
    };
  }
};
rd.meta;
rd.create;
var nd = {
  meta: {
    type: "layout",
    docs: {
      description: "require or disallow spacing between template tags and their literals",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/template-tag-spacing"
    },
    fixable: "whitespace",
    schema: [{
      enum: ["always", "never"]
    }],
    messages: {
      unexpected: "Unexpected space between template tag and template literal.",
      missing: "Missing space between template tag and template literal."
    }
  },
  create(t4) {
    const e = t4.options[0] !== "always", r = t4.getSourceCode();
    return {
      TaggedTemplateExpression: function(s) {
        const n = r.getTokenBefore(s.quasi), a = r.getFirstToken(s.quasi), o = r.isSpaceBetweenTokens(n, a);
        e && o ? t4.report({
          node: s,
          loc: {
            start: n.loc.end,
            end: a.loc.start
          },
          messageId: "unexpected",
          fix(l) {
            const i = r.getCommentsBefore(s.quasi);
            return i.some((u) => u.type === "Line") ? null : l.replaceTextRange([n.range[1], a.range[0]], i.reduce((u, c) => u + r.getText(c), ""));
          }
        }) : !e && !o && t4.report({
          node: s,
          loc: {
            start: s.loc.start,
            end: a.loc.start
          },
          messageId: "missing",
          fix(l) {
            return l.insertTextAfter(n, " ");
          }
        });
      }
    };
  }
};
nd.meta;
nd.create;
var sd = {
  meta: {
    type: "layout",
    docs: {
      description: "require or disallow Unicode byte order mark (BOM)",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/unicode-bom"
    },
    fixable: "whitespace",
    schema: [{
      enum: ["always", "never"]
    }],
    messages: {
      expected: "Expected Unicode BOM (Byte Order Mark).",
      unexpected: "Unexpected Unicode BOM (Byte Order Mark)."
    }
  },
  create(t4) {
    return {
      Program: function(e) {
        const r = t4.getSourceCode(), s = {
          column: 0,
          line: 1
        }, n = t4.options[0] || "never";
        !r.hasBOM && n === "always" ? t4.report({
          node: e,
          loc: s,
          messageId: "expected",
          fix(a) {
            return a.insertTextBeforeRange([0, 1], "\uFEFF");
          }
        }) : r.hasBOM && n === "never" && t4.report({
          node: e,
          loc: s,
          messageId: "unexpected",
          fix(a) {
            return a.removeRange([-1, 0]);
          }
        });
      }
    };
  }
};
sd.meta;
sd.create;
function bs(t4) {
  return !!t4 && (E.isSpecificId(t4, "NaN") || E.isSpecificMemberAccess(t4, "Number", "NaN"));
}
var ad = {
  meta: {
    type: "problem",
    docs: {
      description: "require calls to `isNaN()` when checking for `NaN`",
      category: "Possible Errors",
      recommended: true,
      url: "https://eslint.org/docs/rules/use-isnan"
    },
    schema: [{
      type: "object",
      properties: {
        enforceForSwitchCase: {
          type: "boolean",
          default: true
        },
        enforceForIndexOf: {
          type: "boolean",
          default: false
        }
      },
      additionalProperties: false
    }],
    messages: {
      comparisonWithNaN: "Use the isNaN function to compare with NaN.",
      switchNaN: "'switch(NaN)' can never match a case clause. Use Number.isNaN instead of the switch.",
      caseNaN: "'case NaN' can never match. Use Number.isNaN before the switch.",
      indexOfNaN: "Array prototype method '{{ methodName }}' cannot find NaN."
    }
  },
  create(t4) {
    const e = !t4.options[0] || t4.options[0].enforceForSwitchCase, r = t4.options[0] && t4.options[0].enforceForIndexOf;
    function s(o) {
      bs(o.discriminant) && t4.report({
        node: o,
        messageId: "switchNaN"
      });
      for (const l of o.cases)
        bs(l.test) && t4.report({
          node: l,
          messageId: "caseNaN"
        });
    }
    function n(o) {
      const l = E.skipChainExpression(o.callee);
      if (l.type === "MemberExpression") {
        const i = E.getStaticPropertyName(l);
        (i === "indexOf" || i === "lastIndexOf") && o.arguments.length === 1 && bs(o.arguments[0]) && t4.report({
          node: o,
          messageId: "indexOfNaN",
          data: {
            methodName: i
          }
        });
      }
    }
    const a = {
      BinaryExpression: function(o) {
        /^(?:[<>]|[!=]=)=?$/u.test(o.operator) && (bs(o.left) || bs(o.right)) && t4.report({
          node: o,
          messageId: "comparisonWithNaN"
        });
      }
    };
    return e && (a.SwitchStatement = s), r && (a.CallExpression = n), a;
  }
};
ad.meta;
ad.create;
var id = {
  meta: {
    type: "suggestion",
    docs: {
      description: "enforce valid JSDoc comments",
      category: "Possible Errors",
      recommended: false,
      url: "https://eslint.org/docs/rules/valid-jsdoc"
    },
    schema: [{
      type: "object",
      properties: {
        prefer: {
          type: "object",
          additionalProperties: {
            type: "string"
          }
        },
        preferType: {
          type: "object",
          additionalProperties: {
            type: "string"
          }
        },
        requireReturn: {
          type: "boolean",
          default: true
        },
        requireParamDescription: {
          type: "boolean",
          default: true
        },
        requireReturnDescription: {
          type: "boolean",
          default: true
        },
        matchDescription: {
          type: "string"
        },
        requireReturnType: {
          type: "boolean",
          default: true
        },
        requireParamType: {
          type: "boolean",
          default: true
        }
      },
      additionalProperties: false
    }],
    fixable: "code",
    messages: {
      unexpectedTag: "Unexpected @{{title}} tag; function has no return statement.",
      expected: "Expected JSDoc for '{{name}}' but found '{{jsdocName}}'.",
      use: "Use @{{name}} instead.",
      useType: "Use '{{expectedTypeName}}' instead of '{{currentTypeName}}'.",
      syntaxError: "JSDoc syntax error.",
      missingBrace: "JSDoc type missing brace.",
      missingParamDesc: "Missing JSDoc parameter description for '{{name}}'.",
      missingParamType: "Missing JSDoc parameter type for '{{name}}'.",
      missingReturnType: "Missing JSDoc return type.",
      missingReturnDesc: "Missing JSDoc return description.",
      missingReturn: "Missing JSDoc @{{returns}} for function.",
      missingParam: "Missing JSDoc for parameter '{{name}}'.",
      duplicateParam: "Duplicate JSDoc parameter '{{name}}'.",
      unsatisfiedDesc: "JSDoc description does not satisfy the regex pattern."
    },
    deprecated: true,
    replacedBy: []
  },
  create(t4) {
    const e = t4.options[0] || {}, r = e.prefer || {}, s = t4.getSourceCode(), n = e.requireReturn !== false, a = e.requireParamDescription !== false, o = e.requireReturnDescription !== false, l = e.requireReturnType !== false, i = e.requireParamType !== false, u = e.preferType || {}, c = Object.keys(u).length !== 0, f = [];
    function h(b) {
      return b.type === "ClassExpression" || b.type === "ClassDeclaration";
    }
    function p(b) {
      f.push({
        returnPresent: b.type === "ArrowFunctionExpression" && b.body.type !== "BlockStatement" || h(b) || b.async
      });
    }
    function m(b) {
      return b.type === null || b.type.name === "void" || b.type.type === "UndefinedLiteral";
    }
    function d(b) {
      return b !== "UndefinedLiteral" && b !== "NullLiteral" && b !== "NullableLiteral" && b !== "FunctionType" && b !== "AllLiteral";
    }
    function g(b) {
      let v;
      return b.name ? v = b : b.expression && (v = b.expression), {
        currentType: v,
        expectedTypeName: v && u[v.name]
      };
    }
    function y(b, v) {
      return {
        start: s.getLocFromIndex(b.range[0] + 2 + v.range[0]),
        end: s.getLocFromIndex(b.range[0] + 2 + v.range[1])
      };
    }
    function x(b, v) {
      if (!v || !d(v.type))
        return;
      const C = [];
      let T = [];
      switch (v.type) {
        case "TypeApplication":
          T = v.applications[0].type === "UnionType" ? v.applications[0].elements : v.applications, C.push(g(v));
          break;
        case "RecordType":
          T = v.fields;
          break;
        case "UnionType":
        case "ArrayType":
          T = v.elements;
          break;
        case "FieldType":
          v.value && C.push(g(v.value));
          break;
        default:
          C.push(g(v));
      }
      T.forEach(x.bind(null, b)), C.forEach((w) => {
        w.expectedTypeName && w.expectedTypeName !== w.currentType.name && t4.report({
          node: b,
          messageId: "useType",
          loc: y(b, w.currentType),
          data: {
            currentTypeName: w.currentType.name,
            expectedTypeName: w.expectedTypeName
          },
          fix(B) {
            return B.replaceTextRange(w.currentType.range.map((I) => b.range[0] + 2 + I), w.expectedTypeName);
          }
        });
      });
    }
    function A(b) {
      const v = s.getJSDocComment(b), C = f.pop(), T = /* @__PURE__ */ Object.create(null), w = [];
      let B = false, I, _ = false, S = false, F = false, N = false;
      if (v) {
        let k;
        try {
          k = sR.default.parse(v.value, {
            strict: true,
            unwrap: true,
            sloppy: true,
            range: true
          });
        } catch (O) {
          /braces/iu.test(O.message) ? t4.report({
            node: v,
            messageId: "missingBrace"
          }) : t4.report({
            node: v,
            messageId: "syntaxError"
          });
          return;
        }
        k.tags.forEach((O) => {
          switch (O.title.toLowerCase()) {
            case "param":
            case "arg":
            case "argument":
              w.push(O);
              break;
            case "return":
            case "returns":
              B = true, I = O;
              break;
            case "constructor":
            case "class":
              _ = true;
              break;
            case "override":
            case "inheritdoc":
              F = true;
              break;
            case "abstract":
            case "virtual":
              N = true;
              break;
            case "interface":
              S = true;
              break;
          }
          if (Object.prototype.hasOwnProperty.call(r, O.title) && O.title !== r[O.title]) {
            const z = y(v, O);
            t4.report({
              node: v,
              messageId: "use",
              loc: {
                start: z.start,
                end: {
                  line: z.start.line,
                  column: z.start.column + `@${O.title}`.length
                }
              },
              data: {
                name: r[O.title]
              },
              fix(te) {
                return te.replaceTextRange([v.range[0] + O.range[0] + 3, v.range[0] + O.range[0] + O.title.length + 3], r[O.title]);
              }
            });
          }
          c && O.type && x(v, O.type);
        }), w.forEach((O) => {
          i && !O.type && t4.report({
            node: v,
            messageId: "missingParamType",
            loc: y(v, O),
            data: {
              name: O.name
            }
          }), !O.description && a && t4.report({
            node: v,
            messageId: "missingParamDesc",
            loc: y(v, O),
            data: {
              name: O.name
            }
          }), T[O.name] ? t4.report({
            node: v,
            messageId: "duplicateParam",
            loc: y(v, O),
            data: {
              name: O.name
            }
          }) : O.name.indexOf(".") === -1 && (T[O.name] = O);
        }), B && (!n && !C.returnPresent && (I.type === null || !m(I)) && !N ? t4.report({
          node: v,
          messageId: "unexpectedTag",
          loc: y(v, I),
          data: {
            title: I.title
          }
        }) : (l && !I.type && t4.report({
          node: v,
          messageId: "missingReturnType"
        }), !m(I) && !I.description && o && t4.report({
          node: v,
          messageId: "missingReturnDesc"
        }))), !F && !B && !_ && !S && b.parent.kind !== "get" && b.parent.kind !== "constructor" && b.parent.kind !== "set" && !h(b) && (n || C.returnPresent && !b.async) && t4.report({
          node: v,
          messageId: "missingReturn",
          data: {
            returns: r.returns || "returns"
          }
        });
        const j = Object.keys(T);
        b.params && b.params.forEach((O, z) => {
          const te = O.type === "AssignmentPattern" ? O.left : O;
          if (te.type === "Identifier") {
            const se = te.name;
            j[z] && se !== j[z] ? t4.report({
              node: v,
              messageId: "expected",
              loc: y(v, T[j[z]]),
              data: {
                name: se,
                jsdocName: j[z]
              }
            }) : !T[se] && !F && t4.report({
              node: v,
              messageId: "missingParam",
              data: {
                name: se
              }
            });
          }
        }), e.matchDescription && (new RegExp(e.matchDescription, "u").test(k.description) || t4.report({
          node: v,
          messageId: "unsatisfiedDesc"
        }));
      }
    }
    return {
      ArrowFunctionExpression: p,
      FunctionExpression: p,
      FunctionDeclaration: p,
      ClassExpression: p,
      ClassDeclaration: p,
      "ArrowFunctionExpression:exit": A,
      "FunctionExpression:exit": A,
      "FunctionDeclaration:exit": A,
      "ClassExpression:exit": A,
      "ClassDeclaration:exit": A,
      ReturnStatement: function(b) {
        const v = f[f.length - 1];
        v && b.argument !== null && (v.returnPresent = true);
      }
    };
  }
};
id.meta;
id.create;
var od = {
  meta: {
    type: "problem",
    docs: {
      description: "enforce comparing `typeof` expressions against valid strings",
      category: "Possible Errors",
      recommended: true,
      url: "https://eslint.org/docs/rules/valid-typeof"
    },
    schema: [{
      type: "object",
      properties: {
        requireStringLiterals: {
          type: "boolean",
          default: false
        }
      },
      additionalProperties: false
    }],
    messages: {
      invalidValue: "Invalid typeof comparison value.",
      notString: "Typeof comparisons should be to string literals."
    }
  },
  create(t4) {
    const e = ["symbol", "undefined", "object", "boolean", "number", "string", "function", "bigint"], r = ["==", "===", "!=", "!=="], s = t4.options[0] && t4.options[0].requireStringLiterals;
    function n(a) {
      return a.type === "UnaryExpression" && a.operator === "typeof";
    }
    return {
      UnaryExpression(a) {
        if (n(a)) {
          const o = t4.getAncestors().pop();
          if (o.type === "BinaryExpression" && r.indexOf(o.operator) !== -1) {
            const l = o.left === a ? o.right : o.left;
            if (l.type === "Literal" || l.type === "TemplateLiteral" && !l.expressions.length) {
              const i = l.type === "Literal" ? l.value : l.quasis[0].value.cooked;
              e.indexOf(i) === -1 && t4.report({
                node: l,
                messageId: "invalidValue"
              });
            } else
              s && !n(l) && t4.report({
                node: l,
                messageId: "notString"
              });
          }
        }
      }
    };
  }
};
od.meta;
od.create;
var ld = {
  meta: {
    type: "suggestion",
    docs: {
      description: "require `var` declarations be placed at the top of their containing scope",
      category: "Best Practices",
      recommended: false,
      url: "https://eslint.org/docs/rules/vars-on-top"
    },
    schema: [],
    messages: {
      top: "All 'var' declarations must be at the top of the function scope."
    }
  },
  create(t4) {
    function e(l) {
      return l.type === "ExpressionStatement" && l.expression.type === "Literal" && typeof l.expression.value == "string";
    }
    function r(l) {
      return l.type === "ImportDeclaration" || l.type === "ImportSpecifier" || l.type === "ImportDefaultSpecifier" || l.type === "ImportNamespaceSpecifier";
    }
    function s(l) {
      return l.type === "VariableDeclaration" || l.type === "ExportNamedDeclaration" && l.declaration && l.declaration.type === "VariableDeclaration";
    }
    function n(l, i) {
      const u = i.length;
      let c = 0;
      for (; c < u && !(!e(i[c]) && !r(i[c])); ++c)
        ;
      for (; c < u; ++c) {
        if (!s(i[c]))
          return false;
        if (i[c] === l)
          return true;
      }
      return false;
    }
    function a(l, i) {
      n(l, i.body) || t4.report({
        node: l,
        messageId: "top"
      });
    }
    function o(l, i, u) {
      /Function/u.test(u.type) && i.type === "BlockStatement" && n(l, i.body) || t4.report({
        node: l,
        messageId: "top"
      });
    }
    return {
      "VariableDeclaration[kind='var']"(l) {
        l.parent.type === "ExportNamedDeclaration" ? a(l.parent, l.parent.parent) : l.parent.type === "Program" ? a(l, l.parent) : o(l, l.parent, l.parent.parent);
      }
    };
  }
};
ld.meta;
ld.create;
function o9(t4) {
  const e = t4.parent.type === "ChainExpression" ? t4.parent : t4;
  return e.parent.type === "NewExpression" && e.parent.callee === e;
}
var ud = {
  meta: {
    type: "layout",
    docs: {
      description: "require parentheses around immediate `function` invocations",
      category: "Best Practices",
      recommended: false,
      url: "https://eslint.org/docs/rules/wrap-iife"
    },
    schema: [{
      enum: ["outside", "inside", "any"]
    }, {
      type: "object",
      properties: {
        functionPrototypeMethods: {
          type: "boolean",
          default: false
        }
      },
      additionalProperties: false
    }],
    fixable: "code",
    messages: {
      wrapInvocation: "Wrap an immediate function invocation in parentheses.",
      wrapExpression: "Wrap only the function expression in parens.",
      moveInvocation: "Move the invocation into the parens that contain the function."
    }
  },
  create(t4) {
    const e = t4.options[0] || "outside", r = t4.options[1] && t4.options[1].functionPrototypeMethods, s = t4.getSourceCode();
    function n(l) {
      return E.isParenthesised(s, l);
    }
    function a(l) {
      return Vt.default.isParenthesized(1, l, s);
    }
    function o(l) {
      const i = E.skipChainExpression(l.callee);
      return i.type === "FunctionExpression" ? i : r && i.type === "MemberExpression" && i.object.type === "FunctionExpression" && (E.getStaticPropertyName(i) === "call" || E.getStaticPropertyName(i) === "apply") ? i.object : null;
    }
    return {
      CallExpression(l) {
        const i = o(l);
        if (!i)
          return;
        const u = n(l), c = n(i);
        !u && !c ? t4.report({
          node: l,
          messageId: "wrapInvocation",
          fix(f) {
            const h = e === "inside" ? i : l;
            return f.replaceText(h, `(${s.getText(h)})`);
          }
        }) : e === "inside" && !c ? t4.report({
          node: l,
          messageId: "wrapExpression",
          fix(f) {
            if (a(l) && !o9(l)) {
              const h = s.getTokenAfter(l);
              return f.replaceTextRange([i.range[1], h.range[1]], `)${s.getText().slice(i.range[1], h.range[0])}`);
            }
            return f.replaceText(i, `(${s.getText(i)})`);
          }
        }) : e === "outside" && !u && t4.report({
          node: l,
          messageId: "moveInvocation",
          fix(f) {
            const h = s.getTokenAfter(i);
            return f.replaceTextRange([h.range[0], l.range[1]], `${s.getText().slice(h.range[1], l.range[1])})`);
          }
        });
      }
    };
  }
};
ud.meta;
ud.create;
var cd = {
  meta: {
    type: "layout",
    docs: {
      description: "require parenthesis around regex literals",
      category: "Stylistic Issues",
      recommended: false,
      url: "https://eslint.org/docs/rules/wrap-regex"
    },
    schema: [],
    fixable: "code",
    messages: {
      requireParens: "Wrap the regexp literal in parens to disambiguate the slash."
    }
  },
  create(t4) {
    const e = t4.getSourceCode();
    return {
      Literal(r) {
        if (e.getFirstToken(r).type === "RegularExpression") {
          const a = e.getTokenBefore(r), o = e.getTokenAfter(r), l = t4.getAncestors(), i = l[l.length - 1];
          i.type === "MemberExpression" && i.object === r && !(a && a.value === "(" && o && o.value === ")") && t4.report({
            node: r,
            messageId: "requireParens",
            fix: (u) => u.replaceText(r, `(${e.getText(r)})`)
          });
        }
      }
    };
  }
};
cd.meta;
cd.create;
var pd = {
  meta: {
    type: "layout",
    docs: {
      description: "require or disallow spacing around the `*` in `yield*` expressions",
      category: "ECMAScript 6",
      recommended: false,
      url: "https://eslint.org/docs/rules/yield-star-spacing"
    },
    fixable: "whitespace",
    schema: [{
      oneOf: [{
        enum: ["before", "after", "both", "neither"]
      }, {
        type: "object",
        properties: {
          before: {
            type: "boolean"
          },
          after: {
            type: "boolean"
          }
        },
        additionalProperties: false
      }]
    }],
    messages: {
      missingBefore: "Missing space before *.",
      missingAfter: "Missing space after *.",
      unexpectedBefore: "Unexpected space before *.",
      unexpectedAfter: "Unexpected space after *."
    }
  },
  create(t4) {
    const e = t4.getSourceCode(), r = function(n) {
      return !n || typeof n == "string" ? {
        before: {
          before: true,
          after: false
        },
        after: {
          before: false,
          after: true
        },
        both: {
          before: true,
          after: true
        },
        neither: {
          before: false,
          after: false
        }
      }[n || "after"] : n;
    }(t4.options[0]);
    function s(n, a, o) {
      if (e.isSpaceBetweenTokens(a, o) !== r[n]) {
        const l = a.value === "*", i = r[n], u = l ? a : o;
        let c = "";
        i ? c = n === "before" ? "missingBefore" : "missingAfter" : c = n === "before" ? "unexpectedBefore" : "unexpectedAfter", t4.report({
          node: u,
          messageId: c,
          fix(f) {
            return i ? l ? f.insertTextAfter(u, " ") : f.insertTextBefore(u, " ") : f.removeRange([a.range[1], o.range[0]]);
          }
        });
      }
    }
    return {
      YieldExpression: function(n) {
        if (!n.delegate)
          return;
        const a = e.getFirstTokens(n, 3), o = a[0], l = a[1], i = a[2];
        s("before", o, l), s("after", l, i);
      }
    };
  }
};
pd.meta;
pd.create;
function l9(t4) {
  return /^(==|===|!=|!==|<|>|<=|>=)$/u.test(t4);
}
function u9(t4) {
  return /^(==|===)$/u.test(t4);
}
function y0(t4) {
  return ["<", "<="].indexOf(t4) >= 0;
}
function qb(t4) {
  return t4.type === "UnaryExpression" && t4.operator === "-" && t4.prefix && E.isNumericLiteral(t4.argument);
}
function Wb(t4) {
  return t4.type === "TemplateLiteral" && t4.expressions.length === 0;
}
function x0(t4) {
  return qb(t4) || Wb(t4);
}
function Da(t4) {
  return t4.type === "Literal" ? t4 : qb(t4) ? {
    type: "Literal",
    value: -t4.argument.value,
    raw: `-${t4.argument.value}`
  } : Wb(t4) ? {
    type: "Literal",
    value: t4.quasis[0].value.cooked,
    raw: t4.quasis[0].value.raw
  } : null;
}
var fd = {
  meta: {
    type: "suggestion",
    docs: {
      description: 'require or disallow "Yoda" conditions',
      category: "Best Practices",
      recommended: false,
      url: "https://eslint.org/docs/rules/yoda"
    },
    schema: [{
      enum: ["always", "never"]
    }, {
      type: "object",
      properties: {
        exceptRange: {
          type: "boolean",
          default: false
        },
        onlyEquality: {
          type: "boolean",
          default: false
        }
      },
      additionalProperties: false
    }],
    fixable: "code",
    messages: {
      expected: "Expected literal to be on the {{expectedSide}} side of {{operator}}."
    }
  },
  create(t4) {
    const e = t4.options[0] === "always", r = t4.options[1] && t4.options[1].exceptRange, s = t4.options[1] && t4.options[1].onlyEquality, n = t4.getSourceCode();
    function a(i) {
      const u = i.left, c = i.right;
      return i.type === "LogicalExpression" && u.type === "BinaryExpression" && c.type === "BinaryExpression" && y0(u.operator) && y0(c.operator) && (function() {
        if (i.operator === "&&" && E.isSameReference(u.right, c.left)) {
          const f = Da(u.left), h = Da(c.right);
          if (f === null && h === null)
            return false;
          if (h === null || f === null || f.value <= h.value)
            return true;
        }
        return false;
      }() || function() {
        if (i.operator === "||" && E.isSameReference(u.left, c.right)) {
          const f = Da(u.right), h = Da(c.left);
          if (f === null && h === null)
            return false;
          if (h === null || f === null || f.value <= h.value)
            return true;
        }
        return false;
      }()) && function() {
        return E.isParenthesised(n, i);
      }();
    }
    const o = {
      "===": "===",
      "!==": "!==",
      "==": "==",
      "!=": "!=",
      "<": ">",
      ">": "<",
      "<=": ">=",
      ">=": "<="
    };
    function l(i) {
      const u = n.getFirstTokenBetween(i.left, i.right, (v) => v.value === i.operator), c = n.getTokenBefore(u), f = n.getTokenAfter(u), h = n.getText(), p = h.slice(i.range[0], c.range[1]), m = h.slice(c.range[1], u.range[0]), d = h.slice(u.range[1], f.range[0]), g = h.slice(f.range[0], i.range[1]), y = n.getTokenBefore(i), x = n.getTokenAfter(i);
      let A = "", b = "";
      return y && y.range[1] === i.range[0] && !E.canTokensBeAdjacent(y, f) && (A = " "), x && i.range[1] === x.range[0] && !E.canTokensBeAdjacent(c, x) && (b = " "), A + g + m + o[u.value] + d + p + b;
    }
    return {
      BinaryExpression(i) {
        const u = e ? i.left : i.right, c = e ? i.right : i.left;
        (c.type === "Literal" || x0(c)) && !(u.type === "Literal" || x0(u)) && !(!u9(i.operator) && s) && l9(i.operator) && !(r && a(t4.getAncestors().pop())) && t4.report({
          node: i,
          messageId: "expected",
          data: {
            operator: i.operator,
            expectedSide: e ? "left" : "right"
          },
          fix: (f) => f.replaceText(i, l(i))
        });
      }
    };
  }
};
fd.meta;
fd.create;
var c9 = {
  "accessor-pairs": Xu,
  "array-bracket-newline": Qu,
  "array-bracket-spacing": Yu,
  "array-callback-return": Zu,
  "array-element-newline": ec,
  "arrow-body-style": tc,
  "arrow-parens": rc,
  "arrow-spacing": nc,
  "block-scoped-var": sc,
  "block-spacing": ac,
  "brace-style": ic,
  "callback-return": oc,
  camelcase: lc,
  "capitalized-comments": uc,
  "class-methods-use-this": cc,
  "comma-dangle": pc,
  "comma-spacing": fc,
  "comma-style": hc,
  complexity: mc,
  "computed-property-spacing": dc,
  "consistent-return": gc,
  "consistent-this": yc,
  "constructor-super": xc,
  curly: vc,
  "default-case-last": Ec,
  "default-case": bc,
  "default-param-last": Cc,
  "dot-location": Sc,
  "dot-notation": Ac,
  "eol-last": Dc,
  eqeqeq: wc,
  "for-direction": kc,
  "func-call-spacing": Tc,
  "func-name-matching": Fc,
  "func-names": Pc,
  "func-style": Ic,
  "function-call-argument-newline": _c,
  "function-paren-newline": Bc,
  "generator-star-spacing": Oc,
  "getter-return": Lc,
  "global-require": Rc,
  "grouped-accessor-pairs": Nc,
  "guard-for-in": jc,
  "handle-callback-err": Mc,
  "id-blacklist": $c,
  "id-denylist": Vc,
  "id-length": Uc,
  "id-match": qc,
  "implicit-arrow-linebreak": Wc,
  "indent-legacy": zc,
  indent: Gc,
  "init-declarations": Hc,
  "jsx-quotes": Kc,
  "key-spacing": Jc,
  "keyword-spacing": Xc,
  "line-comment-position": Qc,
  "linebreak-style": Yc,
  "lines-around-comment": Zc,
  "lines-around-directive": ep,
  "lines-between-class-members": tp,
  "max-classes-per-file": rp,
  "max-depth": np,
  "max-len": sp,
  "max-lines-per-function": ap,
  "max-lines": ip,
  "max-nested-callbacks": op,
  "max-params": lp,
  "max-statements-per-line": up,
  "max-statements": cp,
  "multiline-comment-style": pp,
  "multiline-ternary": fp,
  "new-cap": hp,
  "new-parens": mp,
  "newline-after-var": dp,
  "newline-before-return": gp,
  "newline-per-chained-call": yp,
  "no-alert": xp,
  "no-array-constructor": vp,
  "no-async-promise-executor": Ep,
  "no-await-in-loop": bp,
  "no-bitwise": Cp,
  "no-buffer-constructor": Sp,
  "no-caller": Ap,
  "no-case-declarations": Dp,
  "no-catch-shadow": wp,
  "no-class-assign": kp,
  "no-compare-neg-zero": Tp,
  "no-cond-assign": Fp,
  "no-confusing-arrow": Pp,
  "no-console": Ip,
  "no-const-assign": _p,
  "no-constant-condition": Bp,
  "no-constructor-return": Op,
  "no-continue": Lp,
  "no-control-regex": Rp,
  "no-debugger": Np,
  "no-delete-var": jp,
  "no-div-regex": Mp,
  "no-dupe-args": $p,
  "no-dupe-class-members": Vp,
  "no-dupe-else-if": Up,
  "no-dupe-keys": qp,
  "no-duplicate-case": Wp,
  "no-duplicate-imports": zp,
  "no-else-return": Gp,
  "no-empty-character-class": Hp,
  "no-empty-function": Kp,
  "no-empty-pattern": Jp,
  "no-empty": Xp,
  "no-eq-null": Qp,
  "no-eval": Yp,
  "no-ex-assign": Zp,
  "no-extend-native": ef,
  "no-extra-bind": tf,
  "no-extra-boolean-cast": rf,
  "no-extra-label": nf,
  "no-extra-parens": sf,
  "no-extra-semi": af,
  "no-fallthrough": of,
  "no-floating-decimal": lf,
  "no-func-assign": uf,
  "no-global-assign": cf,
  "no-implicit-coercion": pf,
  "no-implicit-globals": ff,
  "no-implied-eval": hf,
  "no-import-assign": mf,
  "no-inline-comments": df,
  "no-inner-declarations": gf,
  "no-invalid-regexp": yf,
  "no-invalid-this": xf,
  "no-irregular-whitespace": vf,
  "no-iterator": Ef,
  "no-label-var": bf,
  "no-labels": Cf,
  "no-lone-blocks": Sf,
  "no-lonely-if": Af,
  "no-loop-func": Df,
  "no-loss-of-precision": wf,
  "no-magic-numbers": kf,
  "no-misleading-character-class": Tf,
  "no-mixed-operators": Ff,
  "no-mixed-requires": Pf,
  "no-mixed-spaces-and-tabs": If,
  "no-multi-assign": _f,
  "no-multi-spaces": Bf,
  "no-multi-str": Of,
  "no-multiple-empty-lines": Lf,
  "no-native-reassign": Rf,
  "no-negated-condition": Nf,
  "no-negated-in-lhs": jf,
  "no-nested-ternary": Mf,
  "no-new-func": $f,
  "no-new-object": Vf,
  "no-new-require": Uf,
  "no-new-symbol": qf,
  "no-new-wrappers": Wf,
  "no-new": zf,
  "no-nonoctal-decimal-escape": Gf,
  "no-obj-calls": Hf,
  "no-octal-escape": Kf,
  "no-octal": Jf,
  "no-param-reassign": Xf,
  "no-path-concat": Qf,
  "no-plusplus": Yf,
  "no-process-env": Zf,
  "no-process-exit": eh,
  "no-promise-executor-return": th,
  "no-proto": rh,
  "no-prototype-builtins": nh,
  "no-redeclare": sh,
  "no-regex-spaces": ah,
  "no-restricted-exports": ih,
  "no-restricted-globals": oh,
  "no-restricted-imports": lh,
  "no-restricted-modules": uh,
  "no-restricted-properties": ch,
  "no-restricted-syntax": ph,
  "no-return-assign": fh,
  "no-return-await": hh,
  "no-script-url": mh,
  "no-self-assign": dh,
  "no-self-compare": gh,
  "no-sequences": yh,
  "no-setter-return": xh,
  "no-shadow-restricted-names": vh,
  "no-shadow": Eh,
  "no-spaced-func": bh,
  "no-sparse-arrays": Ch,
  "no-sync": Sh,
  "no-tabs": Ah,
  "no-template-curly-in-string": Dh,
  "no-ternary": wh,
  "no-this-before-super": kh,
  "no-throw-literal": Th,
  "no-trailing-spaces": Fh,
  "no-undef-init": Ph,
  "no-undef": Ih,
  "no-undefined": _h,
  "no-underscore-dangle": Bh,
  "no-unexpected-multiline": Oh,
  "no-unmodified-loop-condition": Lh,
  "no-unneeded-ternary": Rh,
  "no-unreachable-loop": Nh,
  "no-unreachable": jh,
  "no-unsafe-finally": Mh,
  "no-unsafe-negation": $h,
  "no-unsafe-optional-chaining": Vh,
  "no-unused-expressions": Uh,
  "no-unused-labels": qh,
  "no-unused-vars": Wh,
  "no-use-before-define": zh,
  "no-useless-backreference": Gh,
  "no-useless-call": Hh,
  "no-useless-catch": Kh,
  "no-useless-computed-key": Jh,
  "no-useless-concat": Xh,
  "no-useless-constructor": Qh,
  "no-useless-escape": Yh,
  "no-useless-rename": Zh,
  "no-useless-return": em,
  "no-var": tm,
  "no-void": rm,
  "no-warning-comments": nm,
  "no-whitespace-before-property": sm,
  "no-with": am,
  "nonblock-statement-body-position": im,
  "object-curly-newline": om,
  "object-curly-spacing": lm,
  "object-property-newline": um,
  "object-shorthand": cm,
  "one-var-declaration-per-line": pm,
  "one-var": fm,
  "operator-assignment": hm,
  "operator-linebreak": mm,
  "padded-blocks": dm,
  "padding-line-between-statements": gm,
  "prefer-arrow-callback": ym,
  "prefer-const": xm,
  "prefer-destructuring": vm,
  "prefer-exponentiation-operator": bm,
  "prefer-named-capture-group": Cm,
  "prefer-numeric-literals": Sm,
  "prefer-object-spread": Am,
  "prefer-promise-reject-errors": Dm,
  "prefer-reflect": wm,
  "prefer-regex-literals": km,
  "prefer-rest-params": Tm,
  "prefer-spread": Fm,
  "prefer-template": Im,
  "quote-props": _m,
  quotes: Bm,
  radix: Om,
  "require-atomic-updates": Lm,
  "require-await": Rm,
  "require-jsdoc": Nm,
  "require-unicode-regexp": jm,
  "require-yield": Mm,
  "rest-spread-spacing": $m,
  "semi-spacing": Vm,
  "semi-style": Um,
  semi: qm,
  "sort-imports": Wm,
  "sort-keys": zm,
  "sort-vars": Gm,
  "space-before-blocks": Hm,
  "space-before-function-paren": Km,
  "space-in-parens": Jm,
  "space-infix-ops": Xm,
  "space-unary-ops": Qm,
  "spaced-comment": Ym,
  strict: Zm,
  "switch-colon-spacing": ed,
  "symbol-description": td,
  "template-curly-spacing": rd,
  "template-tag-spacing": nd,
  "unicode-bom": sd,
  "use-isnan": ad,
  "valid-jsdoc": id,
  "valid-typeof": od,
  "vars-on-top": ld,
  "wrap-iife": ud,
  "wrap-regex": cd,
  "yield-star-spacing": pd,
  yoda: fd
};
var p9 = c9;
var f9 = A0;
var h9 = p9;
var m9 = class extends f9.linter_1 {
  constructor() {
    super(), this.defineRules(h9);
  }
};
var j9 = m9;
export {
  j9 as default
};
/*! Bundled license information:

lowcoder-sdk/dist/a9ee5852.js:
  (*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
   * @license  MIT
   *)
  (** @license URI.js v4.4.1 (c) 2011 Gary Court. License: http://github.com/garycourt/uri-js *)
  (*! @author Toru Nagashima <https://github.com/mysticatea> *)
  (*
   * @version    1.4.0
   * @date       2015-10-26
   * @stability  3 - Stable
   * @author     Lauri Rooden (https://github.com/litejs/natural-compare-lite)
   * @license    MIT License
   *)
  (**
   * @fileoverview Pattern for detecting any letter (even letters outside of ASCII).
   * NOTE: This file was generated using this script in JSCS based on the Unicode 7.0.0 standard: https://github.com/jscs-dev/node-jscs/blob/f5ed14427deb7e7aac84f3056a5aab2d9f3e563e/publish/helpers/generate-patterns.js
   * Do not edit this file by hand-- please use https://github.com/mathiasbynens/regenerate to regenerate the regular expression exported from this file.
   * @author Kevin Partington
   * @license MIT License (from JSCS). See below.
   *)
*/
//# sourceMappingURL=a9ee5852-YRVZZJXA.js.map
