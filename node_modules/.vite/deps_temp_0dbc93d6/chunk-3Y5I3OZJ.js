import {
  D,
  R
} from "./chunk-3GBVGJ5V.js";
import {
  L,
  N,
  O,
  j
} from "./chunk-PPPGPJTG.js";
import {
  de
} from "./chunk-KGJNSQSZ.js";
import {
  c
} from "./chunk-A3UAJ3XR.js";
import {
  D9,
  Fj1,
  GK1,
  H0,
  H3,
  N11,
  RQe,
  SW1,
  T2,
  VS,
  ZK1,
  _,
  c7,
  ca,
  d,
  de as de2,
  ept,
  eq1,
  fW1,
  nc,
  uW1,
  vo,
  zU1,
  zte
} from "./chunk-2ZELARZW.js";
import {
  require_react_dom
} from "./chunk-VGGCA2L5.js";
import {
  require_react
} from "./chunk-73THXJN7.js";
import {
  __toESM
} from "./chunk-2TUXWMP5.js";

// node_modules/lowcoder-sdk/dist/2088ebd5.js
var import_react = __toESM(require_react(), 1);
var import_react_dom = __toESM(require_react_dom(), 1);
var N2 = (e) => T2`
    .ant-checkbox-wrapper:not(.ant-checkbox-wrapper-disabled) {
      color: ${e.staticText};
      max-width: calc(100% - 8px);

      span:not(.ant-checkbox) {
        ${c7};
      }

      .ant-checkbox .ant-checkbox-checked > .ant-checkbox-inner {
        border-color: ${e.checkedBorder};
        border-width:${e.borderWidth ? e.borderWidth : "2px"};
      }

      .ant-checkbox:not(.ant-checkbox-checked) > .ant-checkbox-inner{
        border-color: ${e.uncheckedBorder};
        border-width:${e.borderWidth ? e.borderWidth : "2px"};
      }

      .ant-checkbox-checked:not(.ant-checkbox-disabled) {
        .ant-checkbox-inner {
          background-color: ${e.checkedBackground};
          border-color: ${e.checkedBorder};
          border-width:${e.borderWidth ? e.borderWidth : "2px"};

          &::after {
            border-color: ${e.checked};
          }
        }

        &::after {
          border-color: ${e.checkedBorder};
          border-width:${e.borderWidth ? e.borderWidth : "2px"};
          border-radius: ${e.radius};
        }
      }
      
      .ant-checkbox-inner) {
        background-color: ${e.uncheckedBackground};
        border-radius: ${e.radius};
        border-color: ${e.checkedBorder};
        border-width:${e.borderWidth ? e.borderWidth : "2px"};
      }
    
      &:hover .ant-checkbox-inner, 
      .ant-checkbox:hover .ant-checkbox-inner,
      .ant-checkbox-input + ant-checkbox-inner {
        ${e.hoverBackground && `background-color: ${e.hoverBackground}`};
        ${e.hoverBackground && `border-color: ${e.hoverBackground}`};
      }

      

      &:hover .ant-checkbox-inner,
      .ant-checkbox:hover .ant-checkbox-inner,
      .ant-checkbox-input:focus + .ant-checkbox-inner {
        border-color: ${e.checkedBorder};
        border-width:${e.borderWidth ? e.borderWidth : "2px"};
      }

      &:hover .ant-checkbox-checked:not(.ant-checkbox-disabled) .ant-checkbox-inner {
        background-color: ${e.hoverBackground || D9(e.checkedBackground, 0.1)};
        border-color: ${e.hoverBackground || D9(e.checkedBackground, 0.1)};
      }
    }

    

    .ant-checkbox-group-item {
      font-family:${e.fontFamily};
      font-size:${e.textSize};
      font-weight:${e.textWeight};
      font-style:${e.fontStyle};
      text-transform:${e.textTransform};
      text-decoration:${e.textDecoration};
    }
    .ant-checkbox-wrapper {
      padding: ${e.padding};
      .ant-checkbox-inner,
      .ant-checkbox-checked::after {
        border-radius: ${e.radius};
      }
    }
  `;
var P = de2(ept)`
  min-height: 32px;
  ${(e) => e.$style && N2(e.$style)}
  ${(e) => {
  if (e.$layout === "horizontal")
    return T2`
        display: flex;
        align-items: center;
        flex-wrap: wrap;
      `;
  if (e.$layout === "vertical")
    return T2`
        display: flex;
        flex-direction: column;
      `;
  if (e.$layout === "auto_columns")
    return T2`
        break-inside: avoid;
        columns: 160px;
      `;
}}
`;
var t = function() {
  const e = {
    defaultValue: eq1("defaultValue"),
    value: eq1("value"),
    label: GK1,
    disabled: H3,
    onEvent: N11,
    options: zU1,
    style: nc(fW1, "style"),
    labelStyle: nc(uW1.filter((o) => ["accent", "validate", "lineheight"].includes(o.name) === false), "labelStyle"),
    layout: ca(R, "horizontal"),
    viewRef: ZK1,
    inputFieldStyle: nc(SW1, "inputFieldStyle"),
    animationStyle: nc(Fj1, "animationStyle"),
    ...L,
    ...c
  };
  return new VS(e, (o) => {
    const [l, h] = O(o);
    return o.label({
      required: o.required,
      style: o.style,
      labelStyle: o.labelStyle,
      inputFieldStyle: o.inputFieldStyle,
      animationStyle: o.animationStyle,
      children: d(P, {
        ref: o.viewRef,
        disabled: o.disabled,
        value: o.value.value,
        $style: o.inputFieldStyle,
        $layout: o.layout,
        options: o.options.filter((r) => r.value !== void 0 && !r.hidden).map((r) => ({
          label: r.label,
          value: r.value,
          disabled: r.disabled
        })),
        onChange: (r) => {
          h(r);
        }
      }),
      ...l
    });
  }).setPropertyViewFn((o) => d(D, {
    ...o
  })).setExposeMethodConfigs(N).build();
}();
t = zte(t, de);
var Z = H0(t, [new vo("value", _("selectInput.valueDesc")), j, ...RQe]);

export {
  N2 as N,
  Z
};
//# sourceMappingURL=chunk-3Y5I3OZJ.js.map
