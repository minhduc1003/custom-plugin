import {
  w
} from "./chunk-NCDKRTSH.js";
import {
  W
} from "./chunk-AYAGYW5Z.js";
import {
  IC,
  Jf,
  K6n,
  N,
  Nse,
  Qf,
  _,
  ao,
  d,
  h1,
  mJe,
  p1,
  s4
} from "./chunk-2ZELARZW.js";
import {
  require_react_dom
} from "./chunk-VGGCA2L5.js";
import {
  require_react
} from "./chunk-73THXJN7.js";
import {
  __toESM
} from "./chunk-2TUXWMP5.js";

// node_modules/lowcoder-sdk/dist/68ba86a3.js
var import_react = __toESM(require_react(), 1);
var import_react_dom = __toESM(require_react_dom(), 1);
var p = mJe(W);
var S = (o) => d(Jf, {
  ...o,
  emptyRows: 15,
  autoHeight: true
});
function I(o) {
  const {
    containerProps: t
  } = o, e = (0, import_react.useContext)(Qf);
  return d(S, {
    ...t,
    isDroppable: false,
    isDraggable: false,
    isResizable: false,
    isSelectable: false,
    bgColor: e,
    items: IC(t.items),
    hintPlaceholder: "",
    containerPadding: [4, 4]
  });
}
var P = function() {
  const o = _("table.expandable");
  return new Nse({
    expandable: ao,
    slot: p
  }, () => ({
    expandableConfig: {},
    expandModalView: null
  })).setControlItemData({
    filterText: o
  }).setPropertyViewFn((t, e) => N(p1, {
    children: [t.expandable.propertyView({
      label: o
    }), t.expandable.getView() && t.slot.getSelectedComp().getComp().propertyView({
      buttonText: _("table.configExpandedView")
    })]
  })).build();
}();
var dt = class extends P {
  getView() {
    if (!this.children.expandable.getView())
      return {
        expandableConfig: {},
        expandModalView: null
      };
    const t = this.children.slot.getSelectedComp();
    return {
      expandableConfig: {
        expandedRowRender: (e, a) => {
          const l = this.children.slot.getView()({
            currentRow: h1.omit(e, w),
            currentIndex: a,
            currentOriginalIndex: K6n(e[w])
          }, String(e[w])).children.container.getView();
          return d(I, {
            containerProps: l
          }, e[w]);
        }
      },
      expandModalView: t.getView()
    };
  }
  setSelectionAction(t, e) {
    return s4("slot", p.setSelectionAction(t, e));
  }
  getPasteValue(t) {
    return {
      ...this.toJsonValue(),
      slot: this.children.slot.getSelectedComp().getComp().getPasteValue(t)
    };
  }
  reduce(t) {
    return super.reduce(t);
  }
};

export {
  dt
};
//# sourceMappingURL=chunk-BVDJWWQT.js.map
