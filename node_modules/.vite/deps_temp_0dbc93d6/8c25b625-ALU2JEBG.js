import {
  Bn,
  M2,
  PL,
  U8,
  ao,
  d,
  d3,
  g2,
  hl,
  ho,
  mC,
  s4,
  t2,
  vC
} from "./chunk-2ZELARZW.js";
import {
  require_react_dom
} from "./chunk-VGGCA2L5.js";
import {
  require_react
} from "./chunk-73THXJN7.js";
import {
  __toESM
} from "./chunk-2TUXWMP5.js";

// node_modules/lowcoder-sdk/dist/8c25b625.js
var import_react = __toESM(require_react(), 1);
var import_react_dom = __toESM(require_react_dom(), 1);
var g = Object.defineProperty;
var m = (e, t, c) => t in e ? g(e, t, { enumerable: true, configurable: true, writable: true, value: c }) : e[t] = c;
var i = (e, t, c) => (m(e, typeof t != "symbol" ? t + "" : t, c), c);
var l = (e) => d("div", {});
var d2 = function() {
  const e = {
    v1: Bn("abc")
  };
  return new g2(e, (t) => t.v1).setPropertyViewFn(l).build();
}();
function o(e) {
  return JSON.stringify(e.toJsonValue());
}
test("test object create", () => {
  class e {
    constructor() {
      i(this, "a", 1);
      i(this, "b", "abc");
    }
    getValue() {
      return this.a + 10;
    }
  }
  const t = new e();
  expect(t.a).toEqual(1), expect(t.getValue()).toEqual(11);
  const c = Object.create(t);
  c.a = 2, expect(c.a).toEqual(2), expect(c.getValue()).toEqual(12), expect(t.a).toEqual(1), expect(t.getValue()).toEqual(11);
});
test("test action and reduce", () => {
  let e = new d2({});
  expect(o(e)).toEqual('{"v1":"abc"}'), e = e.reduce(e.changeChildAction("v1", "changed")), expect(o(e)).toEqual('{"v1":"changed"}'), e = e.reduce(e.changeChildAction("v1", "changedXXXX")), expect(o(e)).toEqual('{"v1":"changedXXXX"}');
});
test("test value constructor", () => {
  let e = new d2({
    value: {
      v1: "changed"
    }
  });
  expect(o(e)).toEqual('{"v1":"changed"}');
});
var r = function() {
  const e = {
    v1: Bn("abc"),
    v2: d2
  };
  return new g2(e, (t) => t).setPropertyViewFn(l).build();
}();
test("test multi2 toJson", () => {
  let e = new r({});
  const t = JSON.stringify(e.toJsonValue());
  expect(t).toEqual('{"v1":"abc","v2":{"v1":"abc"}}'), e = e.reduce(s4("v2", e.children.v2.changeChildAction("v1", "changed"))), expect(o(e)).toEqual('{"v1":"abc","v2":{"v1":"changed"}}');
  let c = new r({
    value: JSON.parse(o(e))
  });
  expect(o(c)).toEqual(o(e));
});
test("test multi change action", () => {
  let e = new r({});
  expect(e.getView().v1).toEqual("abc"), expect(e.getView().v2).toEqual("abc");
  const t = hl({
    v1: ho("v1_value", true),
    v2: U8("v1", "xxxy", true)
  });
  e = e.reduce(t), expect(e.getView().v1).toEqual("v1_value"), expect(e.getView().v2).toEqual("xxxy");
});
var x = function() {
  const e = {
    v1: Bn("abc"),
    v2: r,
    v3: M2
  };
  return new g2(e, (t) => t.v3).setPropertyViewFn(l).build();
}();
test("test multi toNode", () => {
  const e = new x({}).node().evaluate();
  expect(e.v3.value).toEqual("");
});
test("test comp don't change if no value change", () => {
  let e = new x({});
  expect(PL(e)).toBe(e);
});
test("test cache", () => {
  let e = PL(new x({}));
  const t = e.children.v1, c = e.children.v2;
  e = e.reduce(e.changeChildAction("v1", "XXX")), expect(e.children.v1.getView()).toEqual("XXX"), expect(e.children.v1).not.toBe(t), expect(e.children.v2).toBe(c), e = PL(e), expect(e.node()).toBe(e.node());
  const n = e.node().evaluate();
  e = e.reduce(vC(n));
  const s = e.reduce(vC(n));
  expect(s).toBe(e), expect(e.node().evaluate()).toBe(e.node().evaluate()), expect(PL(e)).toBe(e);
});
test("test code", () => {
  const e = function() {
    const n = {
      v1: t2(M2, "{{a.b}}")
    };
    return new g2(n, (s) => s.v1).setPropertyViewFn(l).build();
  }();
  let t = new e({});
  const c = {
    a: d3({
      b: mC("abc")
    })
  };
  t = PL(t, c), expect(t.getView()).toEqual("abc");
});
test("removeDefault", () => {
  const e = function() {
    const t = {
      v0: M2,
      v1: t2(M2, "{{a.b}}"),
      v2: ao,
      v3: ao.DEFAULT_TRUE
    };
    return new g2(t, (c) => c).setPropertyViewFn(l).build();
  }();
  expect(PL(new e({})).toJsonValue()).toEqual({
    v1: "{{a.b}}",
    v3: true
  }), expect(PL(new e({
    value: {
      v0: "",
      v1: "{{a.b}}",
      v2: false,
      v3: true
    }
  })).toJsonValue()).toEqual({
    v1: "{{a.b}}",
    v3: true
  }), expect(PL(new e({
    value: {
      v0: "bc",
      v1: "",
      v2: true,
      v3: false
    }
  })).toJsonValue()).toEqual({
    v0: "bc",
    v1: "",
    v2: true,
    v3: false
  }), expect(PL(new e({
    value: {
      v0: "bc",
      v1: "{{a.b}}",
      v2: true,
      v3: true
    }
  })).toJsonValue()).toEqual({
    v0: "bc",
    v1: "{{a.b}}",
    v2: true,
    v3: true
  });
});
//# sourceMappingURL=8c25b625-ALU2JEBG.js.map
