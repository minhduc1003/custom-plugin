import {
  Nr
} from "./chunk-GBBXVCAX.js";
import "./chunk-5FMHYNRI.js";
import "./chunk-OBM2GGGS.js";
import "./chunk-ABM3Y7E2.js";
import "./chunk-ABM42UJE.js";
import "./chunk-QQBWD4OA.js";
import "./chunk-FOWGQH56.js";
import "./chunk-YWY33SZU.js";
import "./chunk-TQJ637YF.js";
import "./chunk-XIX4IVKI.js";
import "./chunk-GQM2VD7J.js";
import "./chunk-YGB4VCV6.js";
import "./chunk-UTCGYFNH.js";
import "./chunk-KSD5HKQM.js";
import "./chunk-YI4ATXXC.js";
import "./chunk-HH6FU4MC.js";
import "./chunk-EXWRGYQ5.js";
import "./chunk-CFPLQL5C.js";
import "./chunk-5YXZUTZ4.js";
import "./chunk-5JBSKPRP.js";
import "./chunk-ELCC35BB.js";
import "./chunk-4WJNXMNK.js";
import "./chunk-NUSI45G2.js";
import "./chunk-CUBRQPGW.js";
import "./chunk-X5W53CTY.js";
import "./chunk-QBC5ZFJZ.js";
import "./chunk-SYZYFGNK.js";
import "./chunk-6Y2TFMYX.js";
import "./chunk-Z263VTB2.js";
import "./chunk-URMB2UL2.js";
import "./chunk-5W34S7PZ.js";
import "./chunk-3RMRONVZ.js";
import "./chunk-JWNUD2I7.js";
import "./chunk-7BES2MNU.js";
import "./chunk-ZT6JYGF3.js";
import "./chunk-7D6HIZFR.js";
import "./chunk-YNPT42JB.js";
import "./chunk-43H7S7BS.js";
import "./chunk-4JWCU5WI.js";
import "./chunk-TXGTWJE7.js";
import "./chunk-HD5XZGPM.js";
import "./chunk-H6EGUAM2.js";
import "./chunk-VUZTW3IR.js";
import "./chunk-ZYPGHTDV.js";
import "./chunk-MUYASK6Q.js";
import "./chunk-TOV2UHZV.js";
import "./chunk-FNADJP5Z.js";
import "./chunk-PVTBHE2Q.js";
import "./chunk-JM3TVKPY.js";
import "./chunk-MBG3SW4O.js";
import "./chunk-73LN4UPC.js";
import "./chunk-PKMFW2Z4.js";
import "./chunk-SJAAZBQD.js";
import "./chunk-UEN57BHN.js";
import "./chunk-MLVUBVHB.js";
import "./chunk-FJA6Y4SW.js";
import "./chunk-6QEPQE7Z.js";
import "./chunk-EKQL2BCI.js";
import "./chunk-MKBWIDPH.js";
import "./chunk-WX2SP7KE.js";
import "./chunk-BVDJWWQT.js";
import "./chunk-NCDKRTSH.js";
import "./chunk-DUBJU634.js";
import "./chunk-AYAGYW5Z.js";
import "./chunk-FYFEE5MO.js";
import "./chunk-PJT5DRVG.js";
import "./chunk-3KC2BSDX.js";
import "./chunk-AOVWTW27.js";
import "./chunk-MEZEKXQL.js";
import "./chunk-35OR5TC6.js";
import "./chunk-TU5ZXGQL.js";
import "./chunk-MCIUU3OK.js";
import "./chunk-XHYKILBN.js";
import "./chunk-UJOKFOHB.js";
import "./chunk-BFA4XLEP.js";
import "./chunk-FB47X7C3.js";
import "./chunk-U3BV2XWB.js";
import "./chunk-ZJJZ7KCT.js";
import "./chunk-UD6GF23N.js";
import "./chunk-JNTGN7JA.js";
import "./chunk-CMEGFLRU.js";
import "./chunk-DTUB3P6T.js";
import "./chunk-FJZ2UJYE.js";
import "./chunk-MYGL7TQR.js";
import "./chunk-4PBCAFGZ.js";
import "./chunk-Y7AE76OL.js";
import "./chunk-YT7XWS54.js";
import "./chunk-2B5JEFTZ.js";
import "./chunk-3Y5I3OZJ.js";
import "./chunk-KZFWFTLX.js";
import "./chunk-VILW6NS5.js";
import "./chunk-3GBVGJ5V.js";
import "./chunk-XFQBSDWM.js";
import "./chunk-S6XBMO4X.js";
import "./chunk-5IAS3Q6R.js";
import "./chunk-PPPGPJTG.js";
import "./chunk-6F5TAIKV.js";
import "./chunk-2TRCMNRD.js";
import "./chunk-RXNCSHAQ.js";
import "./chunk-7HVCKJFQ.js";
import "./chunk-4SVH4NPA.js";
import "./chunk-5PD5AN2J.js";
import "./chunk-APJJAOFL.js";
import "./chunk-2NZXCLGZ.js";
import "./chunk-LMSFAF37.js";
import "./chunk-SR2L3AZF.js";
import "./chunk-FXWJ52WH.js";
import "./chunk-AVJEXRAA.js";
import "./chunk-SRYFJOU3.js";
import "./chunk-KGJNSQSZ.js";
import "./chunk-AIWO7PRP.js";
import "./chunk-H3ZPQIQL.js";
import "./chunk-NFFKPQX6.js";
import "./chunk-TV7ANBLT.js";
import "./chunk-RQDZFGTB.js";
import "./chunk-SDNB64XM.js";
import "./chunk-2U7PNSWS.js";
import "./chunk-UWGE3X5C.js";
import "./chunk-EMW2UP6Z.js";
import "./chunk-CB7RNEKH.js";
import "./chunk-IDFCZB5I.js";
import "./chunk-A3UAJ3XR.js";
import "./chunk-6HL2NPY5.js";
import "./chunk-IRR3YWAF.js";
import "./chunk-TRNT2QCT.js";
import "./chunk-BKE5AUP3.js";
import "./chunk-MHPZYSTA.js";
import "./chunk-2SYORDDG.js";
import "./chunk-GB6NVQ2H.js";
import "./chunk-CVYPVDJ7.js";
import "./chunk-V26E4E3O.js";
import "./chunk-FRVWTJX4.js";
import "./chunk-HCH6A2AU.js";
import "./chunk-VT64YZPN.js";
import "./chunk-5RJFOJRM.js";
import "./chunk-QLOEH37K.js";
import "./chunk-6C7C6SYL.js";
import "./chunk-5UXNBVZK.js";
import "./chunk-LCGYFWH2.js";
import "./chunk-L5TDG73Y.js";
import "./chunk-QUWBOWXT.js";
import "./chunk-BYNTL4HL.js";
import "./chunk-UVUWFVSJ.js";
import "./chunk-AVQ6CQRS.js";
import "./chunk-VUKG4NOS.js";
import "./chunk-CA4GYSFB.js";
import "./chunk-QAAOKTDR.js";
import "./chunk-ED2LVFD3.js";
import {
  D6e,
  I6e,
  Ih,
  J2e,
  JJ,
  W8,
  _n,
  gc
} from "./chunk-2ZELARZW.js";
import {
  require_react_dom
} from "./chunk-VGGCA2L5.js";
import {
  require_react
} from "./chunk-73THXJN7.js";
import {
  __toESM
} from "./chunk-2TUXWMP5.js";

// node_modules/lowcoder-sdk/dist/e9266324.js
var import_react = __toESM(require_react(), 1);
var import_react_dom = __toESM(require_react_dom(), 1);
var T = {
  ui: {
    items: {
      "2e2d4bf2": {
        compType: "module",
        comp: {
          appId: "123",
          events: [{
            name: "event1",
            handler: {
              compType: "executeComp",
              comp: {
                name: "outerInput",
                methodName: "setValue",
                params: [{
                  compType: "string",
                  comp: "event1_triggered",
                  name: "value"
                }]
              }
            }
          }]
        },
        name: "module1"
      },
      "2bb084bf": {
        compType: "input",
        comp: {
          value: ""
        },
        name: "outerInput"
      }
    }
  },
  queries: [{
    compType: "js",
    comp: {
      script: "return 3;"
    },
    id: "dievziawwqy72gszoa42i6m8",
    name: "jsQuery3",
    triggerType: "manual"
  }, {
    compType: "js",
    comp: {
      script: "return 3 + a;"
    },
    id: "dievziawwqy72gszoa42i6m9",
    name: "jsQuery4",
    triggerType: "manual"
  }]
};
var f = {
  ui: {
    compType: "module",
    comp: {
      methods: [{
        name: "method1",
        action: {
          compType: "executeComp",
          comp: {
            name: "input1",
            methodName: "setValue",
            params: [{
              compType: "string",
              comp: "hello method1",
              name: "value"
            }]
          }
        }
      }, {
        name: "method2",
        params: [{
          name: "param1",
          type: "string"
        }],
        action: {
          compType: "executeComp",
          comp: {
            name: "input1",
            methodName: "setValue",
            params: [{
              compType: "string",
              comp: "hello {{param1}}",
              name: "value"
            }]
          }
        }
      }],
      events: {
        list: [{
          name: "event1",
          description: ""
        }, {
          name: "event2",
          description: ""
        }],
        onEvent: [{
          name: "event1",
          handler: {
            compType: "executeComp",
            comp: {
              name: "input1",
              methodName: "setValue",
              params: [{
                compType: "string",
                comp: "from_event1",
                name: "value"
              }]
            }
          }
        }]
      },
      io: {
        inputs: [{
          name: "inQuery",
          description: "",
          type: "query"
        }, {
          name: "inNum",
          description: "",
          type: "number"
        }, {
          name: "inString",
          description: "",
          type: "string",
          defaultValue: {
            compType: "string",
            comp: "default_value"
          },
          test: {
            compType: "string",
            comp: "test_value"
          }
        }],
        outputs: [{
          description: "",
          value: "{{input1.value}}",
          name: "out"
        }]
      },
      containerSize: {
        height: 20,
        width: 24
      },
      container: {
        items: {
          "2010af2a": {
            compType: "input",
            comp: {
              value: "hello"
            },
            name: "input1"
          },
          e97d3df7: {
            compType: "text",
            comp: {
              text: "inNum:{{inNum.value}}"
            },
            name: "text1"
          },
          e97d3df8: {
            compType: "text",
            comp: {
              text: "inString:{{inString.value}}"
            },
            name: "text2"
          },
          e97d3df9: {
            compType: "text",
            comp: {
              text: "inQueryData:{{inQuery.data}}"
            },
            name: "text3"
          }
        }
      }
    }
  },
  queries: [{
    compType: "js",
    comp: {
      script: "return 1 + 1"
    },
    id: "dievziawwqy72gszoa42i6m7",
    name: "jsQuery",
    triggerType: "manual",
    onEvent: [{
      name: "success",
      handler: {
        compType: "executeComp",
        comp: {
          name: "input1",
          methodName: "setValue",
          params: [{
            compType: "string",
            comp: "hello success",
            name: "value"
          }]
        }
      }
    }]
  }, {
    compType: "js",
    comp: {
      script: `inQuery.run({a: 10}); 
input1.setValue('hello input query'); return 'ok'`
    },
    id: "dievziawwqy72gszoa42i6m8",
    name: "jsQuery2",
    triggerType: "manual"
  }, {
    compType: "js",
    comp: {
      script: "event1.trigger();"
    },
    id: "dievziawwqy72gszoa42i6m9",
    name: "jsQuery3",
    triggerType: "manual"
  }]
};
function r(o) {
  const e = D6e({
    Comp: I6e,
    initialValue: T,
    reduceContext: {
      readOnly: false,
      applicationId: "123",
      moduleDSL: {
        123: f
      },
      parentApplicationPath: []
    }
  });
  if (!e)
    throw new Error();
  const t = (a, s) => a.children.ui.getAllCompItems()[s].children.comp, i = (a) => t(e.comp, a), p = () => i("2e2d4bf2"), m = (a) => {
    const l = p().moduleRootComp;
    return t(l, a);
  };
  e.init().then(() => {
    p().dispatch(_n({
      type: "init"
    }, false)), setTimeout(() => {
      o({
        root: () => e.comp,
        moduleRoot: () => p().moduleRootComp,
        module: p,
        moduleOutputNodes: () => p().getOutputNodes(),
        input: () => m("2010af2a"),
        inputValue: () => m("2010af2a").children.value.getView().value,
        text1: () => m("e97d3df7"),
        text2: () => m("e97d3df8"),
        text3: () => m("e97d3df9"),
        outerInputValue: () => i("2bb084bf").children.value.getView().value
      });
    });
  });
}
beforeAll(async () => {
  await Nr();
});
describe("module comp", () => {
  test("init module to ready", (o) => {
    r(({
      module: e,
      text1: t,
      text2: i
    }) => {
      expect(Object.keys(e().getOutputNodes())).toStrictEqual(["out"]), expect(e().exposingValues.out).toBe("hello"), expect(Object.keys(e().children.inputs.getInputNodes())).toStrictEqual([]), expect(t().children.text.getView().value).toBe("inNum:"), e().children.inputs.children.inNum.dispatchChangeValueAction(1), expect(t().children.text.getView().value).toBe("inNum:1"), expect(Object.keys(e().children.inputs.getInputNodes())).toStrictEqual(["inNum"]), expect(i().children.text.getView().value).toBe("inString:default_value"), e().children.inputs.children.inString.dispatchChangeValueAction("hello"), expect(i().children.text.getView().value).toBe("inString:hello"), expect(Object.keys(e().children.inputs.getInputNodes())).toStrictEqual(["inNum", "inString"]), o();
    });
  }), test("change value in module", (o) => {
    r(({
      input: e,
      inputValue: t
    }) => {
      expect(t()).toBe("hello"), e().children.value.dispatchChangeValueAction("world"), expect(t()).toBe("world"), gc(e().children.value.dispatch, e().children.value.changeValueAction("hello world"), {
        autoHandleAfterReduce: true
      }).then(() => {
        expect(t()).toBe("hello world"), o();
      });
    });
  }), test("exec query in module", (o) => {
    r(({
      moduleRoot: e,
      module: t,
      inputValue: i
    }) => {
      expect(t().exposingValues.out).toBe("hello"), e().dispatch(Ih("jsQuery", W8({}))), setTimeout(() => {
        expect(i()).toBe("hello success"), expect(t().exposingValues.out).toBe("hello success"), o();
      }, 300);
    });
  }), test("input query data", (o) => {
    r(({
      text3: e,
      module: t,
      root: i,
      inputValue: p
    }) => {
      expect(e().children.text.getView().value).toBe("inQueryData:"), t().children.inputs.children.inQuery.dispatchChangeValueAction({
        value: "jsQuery3"
      }), expect(Object.keys(t().children.inputs.getInputNodes())).toStrictEqual(["inQuery"]), expect(e().children.text.getView().value).toBe("inQueryData:"), i().dispatch(Ih("jsQuery3", W8({}))), setTimeout(() => {
        expect(e().children.text.getView().value).toBe("inQueryData:3"), o();
      }, 1e3);
    });
  }), test("exec input query", (o) => {
    r(({
      text3: e,
      module: t,
      moduleRoot: i,
      inputValue: p
    }) => {
      expect(e().children.text.getView().value).toBe("inQueryData:"), t().children.inputs.children.inQuery.dispatchChangeValueAction({
        value: "jsQuery4"
      }), expect(Object.keys(t().children.inputs.getInputNodes())).toStrictEqual(["inQuery"]), expect(e().children.text.getView().value).toBe("inQueryData:"), i().dispatch(Ih("jsQuery2", W8({}))), setTimeout(() => {
        expect(p()).toBe("hello input query"), expect(e().children.text.getView().value).toBe("inQueryData:13"), o();
      }, 1e3);
    });
  }), test("exec methods", (o) => {
    r(({
      root: e,
      inputValue: t
    }) => {
      const i = e().nameAndExposingInfo();
      expect(Object.keys(i.module1.methods)).toStrictEqual(["method1", "method2"]), e().dispatch(Ih("module1", _n({
        type: "execute",
        methodName: "method1",
        params: []
      }, false))), setTimeout(() => {
        expect(t()).toBe("hello method1"), o();
      }, 2e3);
    });
  }), test("exec methods with params", (o) => {
    r(({
      root: e,
      inputValue: t
    }) => {
      const i = e().nameAndExposingInfo();
      expect(Object.keys(i.module1.methods)).toStrictEqual(["method1", "method2"]), e().dispatch(Ih("module1", _n({
        type: "execute",
        methodName: "method2",
        params: ["Lucy"]
      }, false))), setTimeout(() => {
        expect(t()).toBe("hello Lucy"), o();
      }, 2e3);
    });
  }), test("trigger events by event", (o) => {
    r(({
      root: e,
      text3: t,
      module: i,
      moduleRoot: p,
      outerInputValue: m
    }) => {
      expect(m()).toBe(""), p().dispatch(Ih(J2e, JJ("event1"))), setTimeout(() => {
        expect(m()).toBe("event1_triggered"), o();
      });
    });
  }), test("trigger events by js query", (o) => {
    r(({
      root: e,
      text3: t,
      module: i,
      moduleRoot: p,
      outerInputValue: m
    }) => {
      expect(m()).toBe(""), p().dispatch(Ih("jsQuery3", W8({}))), setTimeout(() => {
        expect(m()).toBe("event1_triggered"), o();
      }, 1e3);
    });
  });
});
//# sourceMappingURL=e9266324-Z6YOVZQJ.js.map
