var RT = Object.defineProperty;
var AT = (e, t, r) => t in e ? RT(e, t, { enumerable: !0, configurable: !0, writable: !0, value: r }) : e[t] = r;
var Zr = (e, t, r) => (AT(e, typeof t != "symbol" ? t + "" : t, r), r);
import * as _e from "react";
import bt, { useRef as pt, useMemo as Lt, useCallback as ep, useState as br, useContext as Jo, useEffect as Xt, forwardRef as gT, useImperativeHandle as yT, useLayoutEffect as IT, createElement as NT } from "react";
import { eh as Qi, nJ as gi, nK as PT, nL as tp, ei as we, gK as Pe, nM as as, gM as Xr, nN as jt, nO as Qs, gL as Tt, nP as ji, nQ as Gs, nR as _T, nS as fu, nT as Zn, nU as Gc, nV as rp, nW as qr, nX as dr, nY as Re, nZ as Wt, n_ as bT, n$ as Ko, o0 as vT, o1 as hu, o2 as pu, o3 as Ou, o4 as Ka, o5 as mn, o6 as Rn, o7 as CT, o8 as LT, o9 as Vi, oa as Hn, ob as Eu, oc as xT, od as DT, gN as Ea, mK as du, lx as Tu, _ as Bi, oe as UT, gO as zn, of as wT, og as MT, oh as kT, oi as QT, oj as GT, ok as VT, ol as BT, om as $T, dP as YT, on as FT, cG as Vc, Y as ip, oo as WT, op as XT, lu as jT, lp as ZT, oq as di, mf as To, or as Ue, lC as Su, os as mu, lB as Ru, lz as Au, lH as At, ly as me, me as da, F as $e, lF as xe, ot as el, ou as HT, ov as zT, ow as Bc, a8 as pi, X as lr, go as Fn, le as qT, ai as JT, lc as KT, mD as eS, lg as tS, ox as rS, cs as np, oy as iS, oz as nS, oA as aS, oB as sS, lK as oS, av as gu, oC as lS } from "./c988e26e.js";
import $i from "react-dom";
import { u as uS } from "./16599e37.js";
const ap = 1024;
let cS = 0;
class Tr {
  constructor(t, r) {
    this.from = t, this.to = r;
  }
}
class Le {
  /**
  Create a new node prop type.
  */
  constructor(t = {}) {
    this.id = cS++, this.perNode = !!t.perNode, this.deserialize = t.deserialize || (() => {
      throw new Error("This node type doesn't define a deserialize function");
    });
  }
  /**
  This is meant to be used with
  [`NodeSet.extend`](#common.NodeSet.extend) or
  [`LRParser.configure`](#lr.ParserConfig.props) to compute
  prop values for each node type in the set. Takes a [match
  object](#common.NodeType^match) or function that returns undefined
  if the node type doesn't get this prop, and the prop's value if
  it does.
  */
  add(t) {
    if (this.perNode)
      throw new RangeError("Can't add per-node props to node types");
    return typeof t != "function" && (t = or.match(t)), (r) => {
      let i = t(r);
      return i === void 0 ? null : [this, i];
    };
  }
}
Le.closedBy = new Le({ deserialize: (e) => e.split(" ") });
Le.openedBy = new Le({ deserialize: (e) => e.split(" ") });
Le.group = new Le({ deserialize: (e) => e.split(" ") });
Le.isolate = new Le({ deserialize: (e) => {
  if (e && e != "rtl" && e != "ltr" && e != "auto")
    throw new RangeError("Invalid value for isolate: " + e);
  return e || "auto";
} });
Le.contextHash = new Le({ perNode: !0 });
Le.lookAhead = new Le({ perNode: !0 });
Le.mounted = new Le({ perNode: !0 });
class qn {
  constructor(t, r, i) {
    this.tree = t, this.overlay = r, this.parser = i;
  }
  /**
  @internal
  */
  static get(t) {
    return t && t.props && t.props[Le.mounted.id];
  }
}
const fS = /* @__PURE__ */ Object.create(null);
let or = class sp {
  /**
  @internal
  */
  constructor(t, r, i, n = 0) {
    this.name = t, this.props = r, this.id = i, this.flags = n;
  }
  /**
  Define a node type.
  */
  static define(t) {
    let r = t.props && t.props.length ? /* @__PURE__ */ Object.create(null) : fS, i = (t.top ? 1 : 0) | (t.skipped ? 2 : 0) | (t.error ? 4 : 0) | (t.name == null ? 8 : 0), n = new sp(t.name || "", r, t.id, i);
    if (t.props) {
      for (let a of t.props)
        if (Array.isArray(a) || (a = a(n)), a) {
          if (a[0].perNode)
            throw new RangeError("Can't store a per-node prop on a node type");
          r[a[0].id] = a[1];
        }
    }
    return n;
  }
  /**
  Retrieves a node prop for this type. Will return `undefined` if
  the prop isn't present on this node.
  */
  prop(t) {
    return this.props[t.id];
  }
  /**
  True when this is the top node of a grammar.
  */
  get isTop() {
    return (this.flags & 1) > 0;
  }
  /**
  True when this node is produced by a skip rule.
  */
  get isSkipped() {
    return (this.flags & 2) > 0;
  }
  /**
  Indicates whether this is an error node.
  */
  get isError() {
    return (this.flags & 4) > 0;
  }
  /**
  When true, this node type doesn't correspond to a user-declared
  named node, for example because it is used to cache repetition.
  */
  get isAnonymous() {
    return (this.flags & 8) > 0;
  }
  /**
  Returns true when this node's name or one of its
  [groups](#common.NodeProp^group) matches the given string.
  */
  is(t) {
    if (typeof t == "string") {
      if (this.name == t)
        return !0;
      let r = this.prop(Le.group);
      return r ? r.indexOf(t) > -1 : !1;
    }
    return this.id == t;
  }
  /**
  Create a function from node types to arbitrary values by
  specifying an object whose property names are node or
  [group](#common.NodeProp^group) names. Often useful with
  [`NodeProp.add`](#common.NodeProp.add). You can put multiple
  names, separated by spaces, in a single property name to map
  multiple node names to a single value.
  */
  static match(t) {
    let r = /* @__PURE__ */ Object.create(null);
    for (let i in t)
      for (let n of i.split(" "))
        r[n] = t[i];
    return (i) => {
      for (let n = i.prop(Le.group), a = -1; a < (n ? n.length : 0); a++) {
        let s = r[a < 0 ? i.name : n[a]];
        if (s)
          return s;
      }
    };
  }
};
or.none = new or(
  "",
  /* @__PURE__ */ Object.create(null),
  0,
  8
  /* NodeFlag.Anonymous */
);
class yu {
  /**
  Create a set with the given types. The `id` property of each
  type should correspond to its position within the array.
  */
  constructor(t) {
    this.types = t;
    for (let r = 0; r < t.length; r++)
      if (t[r].id != r)
        throw new RangeError("Node type ids should correspond to array positions when creating a node set");
  }
  /**
  Create a copy of this set with some node properties added. The
  arguments to this method can be created with
  [`NodeProp.add`](#common.NodeProp.add).
  */
  extend(...t) {
    let r = [];
    for (let i of this.types) {
      let n = null;
      for (let a of t) {
        let s = a(i);
        s && (n || (n = Object.assign({}, i.props)), n[s[0].id] = s[1]);
      }
      r.push(n ? new or(i.name, n, i.id, i.flags) : i);
    }
    return new yu(r);
  }
}
const Da = /* @__PURE__ */ new WeakMap(), $c = /* @__PURE__ */ new WeakMap();
var st;
(function(e) {
  e[e.ExcludeBuffers = 1] = "ExcludeBuffers", e[e.IncludeAnonymous = 2] = "IncludeAnonymous", e[e.IgnoreMounts = 4] = "IgnoreMounts", e[e.IgnoreOverlays = 8] = "IgnoreOverlays";
})(st || (st = {}));
class ht {
  /**
  Construct a new tree. See also [`Tree.build`](#common.Tree^build).
  */
  constructor(t, r, i, n, a) {
    if (this.type = t, this.children = r, this.positions = i, this.length = n, this.props = null, a && a.length) {
      this.props = /* @__PURE__ */ Object.create(null);
      for (let [s, o] of a)
        this.props[typeof s == "number" ? s : s.id] = o;
    }
  }
  /**
  @internal
  */
  toString() {
    let t = qn.get(this);
    if (t && !t.overlay)
      return t.tree.toString();
    let r = "";
    for (let i of this.children) {
      let n = i.toString();
      n && (r && (r += ","), r += n);
    }
    return this.type.name ? (/\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) + (r.length ? "(" + r + ")" : "") : r;
  }
  /**
  Get a [tree cursor](#common.TreeCursor) positioned at the top of
  the tree. Mode can be used to [control](#common.IterMode) which
  nodes the cursor visits.
  */
  cursor(t = 0) {
    return new ss(this.topNode, t);
  }
  /**
  Get a [tree cursor](#common.TreeCursor) pointing into this tree
  at the given position and side (see
  [`moveTo`](#common.TreeCursor.moveTo).
  */
  cursorAt(t, r = 0, i = 0) {
    let n = Da.get(this) || this.topNode, a = new ss(n);
    return a.moveTo(t, r), Da.set(this, a._tree), a;
  }
  /**
  Get a [syntax node](#common.SyntaxNode) object for the top of the
  tree.
  */
  get topNode() {
    return new Gt(this, 0, 0, null);
  }
  /**
  Get the [syntax node](#common.SyntaxNode) at the given position.
  If `side` is -1, this will move into nodes that end at the
  position. If 1, it'll move into nodes that start at the
  position. With 0, it'll only enter nodes that cover the position
  from both sides.
  
  Note that this will not enter
  [overlays](#common.MountedTree.overlay), and you often want
  [`resolveInner`](#common.Tree.resolveInner) instead.
  */
  resolve(t, r = 0) {
    let i = Jn(Da.get(this) || this.topNode, t, r, !1);
    return Da.set(this, i), i;
  }
  /**
  Like [`resolve`](#common.Tree.resolve), but will enter
  [overlaid](#common.MountedTree.overlay) nodes, producing a syntax node
  pointing into the innermost overlaid tree at the given position
  (with parent links going through all parent structure, including
  the host trees).
  */
  resolveInner(t, r = 0) {
    let i = Jn($c.get(this) || this.topNode, t, r, !0);
    return $c.set(this, i), i;
  }
  /**
  In some situations, it can be useful to iterate through all
  nodes around a position, including those in overlays that don't
  directly cover the position. This method gives you an iterator
  that will produce all nodes, from small to big, around the given
  position.
  */
  resolveStack(t, r = 0) {
    return OS(this, t, r);
  }
  /**
  Iterate over the tree and its children, calling `enter` for any
  node that touches the `from`/`to` region (if given) before
  running over such a node's children, and `leave` (if given) when
  leaving the node. When `enter` returns `false`, that node will
  not have its children iterated over (or `leave` called).
  */
  iterate(t) {
    let { enter: r, leave: i, from: n = 0, to: a = this.length } = t, s = t.mode || 0, o = (s & st.IncludeAnonymous) > 0;
    for (let l = this.cursor(s | st.IncludeAnonymous); ; ) {
      let c = !1;
      if (l.from <= a && l.to >= n && (!o && l.type.isAnonymous || r(l) !== !1)) {
        if (l.firstChild())
          continue;
        c = !0;
      }
      for (; c && i && (o || !l.type.isAnonymous) && i(l), !l.nextSibling(); ) {
        if (!l.parent())
          return;
        c = !0;
      }
    }
  }
  /**
  Get the value of the given [node prop](#common.NodeProp) for this
  node. Works with both per-node and per-type props.
  */
  prop(t) {
    return t.perNode ? this.props ? this.props[t.id] : void 0 : this.type.prop(t);
  }
  /**
  Returns the node's [per-node props](#common.NodeProp.perNode) in a
  format that can be passed to the [`Tree`](#common.Tree)
  constructor.
  */
  get propValues() {
    let t = [];
    if (this.props)
      for (let r in this.props)
        t.push([+r, this.props[r]]);
    return t;
  }
  /**
  Balance the direct children of this tree, producing a copy of
  which may have children grouped into subtrees with type
  [`NodeType.none`](#common.NodeType^none).
  */
  balance(t = {}) {
    return this.children.length <= 8 ? this : Pu(or.none, this.children, this.positions, 0, this.children.length, 0, this.length, (r, i, n) => new ht(this.type, r, i, n, this.propValues), t.makeTree || ((r, i, n) => new ht(or.none, r, i, n)));
  }
  /**
  Build a tree from a postfix-ordered buffer of node information,
  or a cursor over such a buffer.
  */
  static build(t) {
    return ES(t);
  }
}
ht.empty = new ht(or.none, [], [], 0);
class Iu {
  constructor(t, r) {
    this.buffer = t, this.index = r;
  }
  get id() {
    return this.buffer[this.index - 4];
  }
  get start() {
    return this.buffer[this.index - 3];
  }
  get end() {
    return this.buffer[this.index - 2];
  }
  get size() {
    return this.buffer[this.index - 1];
  }
  get pos() {
    return this.index;
  }
  next() {
    this.index -= 4;
  }
  fork() {
    return new Iu(this.buffer, this.index);
  }
}
class Ti {
  /**
  Create a tree buffer.
  */
  constructor(t, r, i) {
    this.buffer = t, this.length = r, this.set = i;
  }
  /**
  @internal
  */
  get type() {
    return or.none;
  }
  /**
  @internal
  */
  toString() {
    let t = [];
    for (let r = 0; r < this.buffer.length; )
      t.push(this.childString(r)), r = this.buffer[r + 3];
    return t.join(",");
  }
  /**
  @internal
  */
  childString(t) {
    let r = this.buffer[t], i = this.buffer[t + 3], n = this.set.types[r], a = n.name;
    if (/\W/.test(a) && !n.isError && (a = JSON.stringify(a)), t += 4, i == t)
      return a;
    let s = [];
    for (; t < i; )
      s.push(this.childString(t)), t = this.buffer[t + 3];
    return a + "(" + s.join(",") + ")";
  }
  /**
  @internal
  */
  findChild(t, r, i, n, a) {
    let { buffer: s } = this, o = -1;
    for (let l = t; l != r && !(op(a, n, s[l + 1], s[l + 2]) && (o = l, i > 0)); l = s[l + 3])
      ;
    return o;
  }
  /**
  @internal
  */
  slice(t, r, i) {
    let n = this.buffer, a = new Uint16Array(r - t), s = 0;
    for (let o = t, l = 0; o < r; ) {
      a[l++] = n[o++], a[l++] = n[o++] - i;
      let c = a[l++] = n[o++] - i;
      a[l++] = n[o++] - t, s = Math.max(s, c);
    }
    return new Ti(a, s, this.set);
  }
}
function op(e, t, r, i) {
  switch (e) {
    case -2:
      return r < t;
    case -1:
      return i >= t && r < t;
    case 0:
      return r < t && i > t;
    case 1:
      return r <= t && i > t;
    case 2:
      return i > t;
    case 4:
      return !0;
  }
}
function Jn(e, t, r, i) {
  for (var n; e.from == e.to || (r < 1 ? e.from >= t : e.from > t) || (r > -1 ? e.to <= t : e.to < t); ) {
    let s = !i && e instanceof Gt && e.index < 0 ? null : e.parent;
    if (!s)
      return e;
    e = s;
  }
  let a = i ? 0 : st.IgnoreOverlays;
  if (i)
    for (let s = e, o = s.parent; o; s = o, o = s.parent)
      s instanceof Gt && s.index < 0 && ((n = o.enter(t, r, a)) === null || n === void 0 ? void 0 : n.from) != s.from && (e = o);
  for (; ; ) {
    let s = e.enter(t, r, a);
    if (!s)
      return e;
    e = s;
  }
}
class lp {
  cursor(t = 0) {
    return new ss(this, t);
  }
  getChild(t, r = null, i = null) {
    let n = Yc(this, t, r, i);
    return n.length ? n[0] : null;
  }
  getChildren(t, r = null, i = null) {
    return Yc(this, t, r, i);
  }
  resolve(t, r = 0) {
    return Jn(this, t, r, !1);
  }
  resolveInner(t, r = 0) {
    return Jn(this, t, r, !0);
  }
  matchContext(t) {
    return tl(this, t);
  }
  enterUnfinishedNodesBefore(t) {
    let r = this.childBefore(t), i = this;
    for (; r; ) {
      let n = r.lastChild;
      if (!n || n.to != r.to)
        break;
      n.type.isError && n.from == n.to ? (i = r, r = n.prevSibling) : r = n;
    }
    return i;
  }
  get node() {
    return this;
  }
  get next() {
    return this.parent;
  }
}
class Gt extends lp {
  constructor(t, r, i, n) {
    super(), this._tree = t, this.from = r, this.index = i, this._parent = n;
  }
  get type() {
    return this._tree.type;
  }
  get name() {
    return this._tree.type.name;
  }
  get to() {
    return this.from + this._tree.length;
  }
  nextChild(t, r, i, n, a = 0) {
    for (let s = this; ; ) {
      for (let { children: o, positions: l } = s._tree, c = r > 0 ? o.length : -1; t != c; t += r) {
        let f = o[t], p = l[t] + s.from;
        if (op(n, i, p, p + f.length)) {
          if (f instanceof Ti) {
            if (a & st.ExcludeBuffers)
              continue;
            let O = f.findChild(0, f.buffer.length, r, i - p, n);
            if (O > -1)
              return new Qr(new hS(s, f, t, p), null, O);
          } else if (a & st.IncludeAnonymous || !f.type.isAnonymous || Nu(f)) {
            let O;
            if (!(a & st.IgnoreMounts) && (O = qn.get(f)) && !O.overlay)
              return new Gt(O.tree, p, t, s);
            let d = new Gt(f, p, t, s);
            return a & st.IncludeAnonymous || !d.type.isAnonymous ? d : d.nextChild(r < 0 ? f.children.length - 1 : 0, r, i, n);
          }
        }
      }
      if (a & st.IncludeAnonymous || !s.type.isAnonymous || (s.index >= 0 ? t = s.index + r : t = r < 0 ? -1 : s._parent._tree.children.length, s = s._parent, !s))
        return null;
    }
  }
  get firstChild() {
    return this.nextChild(
      0,
      1,
      0,
      4
      /* Side.DontCare */
    );
  }
  get lastChild() {
    return this.nextChild(
      this._tree.children.length - 1,
      -1,
      0,
      4
      /* Side.DontCare */
    );
  }
  childAfter(t) {
    return this.nextChild(
      0,
      1,
      t,
      2
      /* Side.After */
    );
  }
  childBefore(t) {
    return this.nextChild(
      this._tree.children.length - 1,
      -1,
      t,
      -2
      /* Side.Before */
    );
  }
  enter(t, r, i = 0) {
    let n;
    if (!(i & st.IgnoreOverlays) && (n = qn.get(this._tree)) && n.overlay) {
      let a = t - this.from;
      for (let { from: s, to: o } of n.overlay)
        if ((r > 0 ? s <= a : s < a) && (r < 0 ? o >= a : o > a))
          return new Gt(n.tree, n.overlay[0].from + this.from, -1, this);
    }
    return this.nextChild(0, 1, t, r, i);
  }
  nextSignificantParent() {
    let t = this;
    for (; t.type.isAnonymous && t._parent; )
      t = t._parent;
    return t;
  }
  get parent() {
    return this._parent ? this._parent.nextSignificantParent() : null;
  }
  get nextSibling() {
    return this._parent && this.index >= 0 ? this._parent.nextChild(
      this.index + 1,
      1,
      0,
      4
      /* Side.DontCare */
    ) : null;
  }
  get prevSibling() {
    return this._parent && this.index >= 0 ? this._parent.nextChild(
      this.index - 1,
      -1,
      0,
      4
      /* Side.DontCare */
    ) : null;
  }
  get tree() {
    return this._tree;
  }
  toTree() {
    return this._tree;
  }
  /**
  @internal
  */
  toString() {
    return this._tree.toString();
  }
}
function Yc(e, t, r, i) {
  let n = e.cursor(), a = [];
  if (!n.firstChild())
    return a;
  if (r != null) {
    for (let s = !1; !s; )
      if (s = n.type.is(r), !n.nextSibling())
        return a;
  }
  for (; ; ) {
    if (i != null && n.type.is(i))
      return a;
    if (n.type.is(t) && a.push(n.node), !n.nextSibling())
      return i == null ? a : [];
  }
}
function tl(e, t, r = t.length - 1) {
  for (let i = e.parent; r >= 0; i = i.parent) {
    if (!i)
      return !1;
    if (!i.type.isAnonymous) {
      if (t[r] && t[r] != i.name)
        return !1;
      r--;
    }
  }
  return !0;
}
class hS {
  constructor(t, r, i, n) {
    this.parent = t, this.buffer = r, this.index = i, this.start = n;
  }
}
class Qr extends lp {
  get name() {
    return this.type.name;
  }
  get from() {
    return this.context.start + this.context.buffer.buffer[this.index + 1];
  }
  get to() {
    return this.context.start + this.context.buffer.buffer[this.index + 2];
  }
  constructor(t, r, i) {
    super(), this.context = t, this._parent = r, this.index = i, this.type = t.buffer.set.types[t.buffer.buffer[i]];
  }
  child(t, r, i) {
    let { buffer: n } = this.context, a = n.findChild(this.index + 4, n.buffer[this.index + 3], t, r - this.context.start, i);
    return a < 0 ? null : new Qr(this.context, this, a);
  }
  get firstChild() {
    return this.child(
      1,
      0,
      4
      /* Side.DontCare */
    );
  }
  get lastChild() {
    return this.child(
      -1,
      0,
      4
      /* Side.DontCare */
    );
  }
  childAfter(t) {
    return this.child(
      1,
      t,
      2
      /* Side.After */
    );
  }
  childBefore(t) {
    return this.child(
      -1,
      t,
      -2
      /* Side.Before */
    );
  }
  enter(t, r, i = 0) {
    if (i & st.ExcludeBuffers)
      return null;
    let { buffer: n } = this.context, a = n.findChild(this.index + 4, n.buffer[this.index + 3], r > 0 ? 1 : -1, t - this.context.start, r);
    return a < 0 ? null : new Qr(this.context, this, a);
  }
  get parent() {
    return this._parent || this.context.parent.nextSignificantParent();
  }
  externalSibling(t) {
    return this._parent ? null : this.context.parent.nextChild(
      this.context.index + t,
      t,
      0,
      4
      /* Side.DontCare */
    );
  }
  get nextSibling() {
    let { buffer: t } = this.context, r = t.buffer[this.index + 3];
    return r < (this._parent ? t.buffer[this._parent.index + 3] : t.buffer.length) ? new Qr(this.context, this._parent, r) : this.externalSibling(1);
  }
  get prevSibling() {
    let { buffer: t } = this.context, r = this._parent ? this._parent.index + 4 : 0;
    return this.index == r ? this.externalSibling(-1) : new Qr(this.context, this._parent, t.findChild(
      r,
      this.index,
      -1,
      0,
      4
      /* Side.DontCare */
    ));
  }
  get tree() {
    return null;
  }
  toTree() {
    let t = [], r = [], { buffer: i } = this.context, n = this.index + 4, a = i.buffer[this.index + 3];
    if (a > n) {
      let s = i.buffer[this.index + 1];
      t.push(i.slice(n, a, s)), r.push(0);
    }
    return new ht(this.type, t, r, this.to - this.from);
  }
  /**
  @internal
  */
  toString() {
    return this.context.buffer.childString(this.index);
  }
}
function up(e) {
  if (!e.length)
    return null;
  let t = 0, r = e[0];
  for (let a = 1; a < e.length; a++) {
    let s = e[a];
    (s.from > r.from || s.to < r.to) && (r = s, t = a);
  }
  let i = r instanceof Gt && r.index < 0 ? null : r.parent, n = e.slice();
  return i ? n[t] = i : n.splice(t, 1), new pS(n, r);
}
class pS {
  constructor(t, r) {
    this.heads = t, this.node = r;
  }
  get next() {
    return up(this.heads);
  }
}
function OS(e, t, r) {
  let i = e.resolveInner(t, r), n = null;
  for (let a = i instanceof Gt ? i : i.context.parent; a; a = a.parent)
    if (a.index < 0) {
      let s = a.parent;
      (n || (n = [i])).push(s.resolve(t, r)), a = s;
    } else {
      let s = qn.get(a.tree);
      if (s && s.overlay && s.overlay[0].from <= t && s.overlay[s.overlay.length - 1].to >= t) {
        let o = new Gt(s.tree, s.overlay[0].from + a.from, -1, a);
        (n || (n = [i])).push(Jn(o, t, r, !1));
      }
    }
  return n ? up(n) : i;
}
class ss {
  /**
  Shorthand for `.type.name`.
  */
  get name() {
    return this.type.name;
  }
  /**
  @internal
  */
  constructor(t, r = 0) {
    if (this.mode = r, this.buffer = null, this.stack = [], this.index = 0, this.bufferNode = null, t instanceof Gt)
      this.yieldNode(t);
    else {
      this._tree = t.context.parent, this.buffer = t.context;
      for (let i = t._parent; i; i = i._parent)
        this.stack.unshift(i.index);
      this.bufferNode = t, this.yieldBuf(t.index);
    }
  }
  yieldNode(t) {
    return t ? (this._tree = t, this.type = t.type, this.from = t.from, this.to = t.to, !0) : !1;
  }
  yieldBuf(t, r) {
    this.index = t;
    let { start: i, buffer: n } = this.buffer;
    return this.type = r || n.set.types[n.buffer[t]], this.from = i + n.buffer[t + 1], this.to = i + n.buffer[t + 2], !0;
  }
  /**
  @internal
  */
  yield(t) {
    return t ? t instanceof Gt ? (this.buffer = null, this.yieldNode(t)) : (this.buffer = t.context, this.yieldBuf(t.index, t.type)) : !1;
  }
  /**
  @internal
  */
  toString() {
    return this.buffer ? this.buffer.buffer.childString(this.index) : this._tree.toString();
  }
  /**
  @internal
  */
  enterChild(t, r, i) {
    if (!this.buffer)
      return this.yield(this._tree.nextChild(t < 0 ? this._tree._tree.children.length - 1 : 0, t, r, i, this.mode));
    let { buffer: n } = this.buffer, a = n.findChild(this.index + 4, n.buffer[this.index + 3], t, r - this.buffer.start, i);
    return a < 0 ? !1 : (this.stack.push(this.index), this.yieldBuf(a));
  }
  /**
  Move the cursor to this node's first child. When this returns
  false, the node has no child, and the cursor has not been moved.
  */
  firstChild() {
    return this.enterChild(
      1,
      0,
      4
      /* Side.DontCare */
    );
  }
  /**
  Move the cursor to this node's last child.
  */
  lastChild() {
    return this.enterChild(
      -1,
      0,
      4
      /* Side.DontCare */
    );
  }
  /**
  Move the cursor to the first child that ends after `pos`.
  */
  childAfter(t) {
    return this.enterChild(
      1,
      t,
      2
      /* Side.After */
    );
  }
  /**
  Move to the last child that starts before `pos`.
  */
  childBefore(t) {
    return this.enterChild(
      -1,
      t,
      -2
      /* Side.Before */
    );
  }
  /**
  Move the cursor to the child around `pos`. If side is -1 the
  child may end at that position, when 1 it may start there. This
  will also enter [overlaid](#common.MountedTree.overlay)
  [mounted](#common.NodeProp^mounted) trees unless `overlays` is
  set to false.
  */
  enter(t, r, i = this.mode) {
    return this.buffer ? i & st.ExcludeBuffers ? !1 : this.enterChild(1, t, r) : this.yield(this._tree.enter(t, r, i));
  }
  /**
  Move to the node's parent node, if this isn't the top node.
  */
  parent() {
    if (!this.buffer)
      return this.yieldNode(this.mode & st.IncludeAnonymous ? this._tree._parent : this._tree.parent);
    if (this.stack.length)
      return this.yieldBuf(this.stack.pop());
    let t = this.mode & st.IncludeAnonymous ? this.buffer.parent : this.buffer.parent.nextSignificantParent();
    return this.buffer = null, this.yieldNode(t);
  }
  /**
  @internal
  */
  sibling(t) {
    if (!this.buffer)
      return this._tree._parent ? this.yield(this._tree.index < 0 ? null : this._tree._parent.nextChild(this._tree.index + t, t, 0, 4, this.mode)) : !1;
    let { buffer: r } = this.buffer, i = this.stack.length - 1;
    if (t < 0) {
      let n = i < 0 ? 0 : this.stack[i] + 4;
      if (this.index != n)
        return this.yieldBuf(r.findChild(
          n,
          this.index,
          -1,
          0,
          4
          /* Side.DontCare */
        ));
    } else {
      let n = r.buffer[this.index + 3];
      if (n < (i < 0 ? r.buffer.length : r.buffer[this.stack[i] + 3]))
        return this.yieldBuf(n);
    }
    return i < 0 ? this.yield(this.buffer.parent.nextChild(this.buffer.index + t, t, 0, 4, this.mode)) : !1;
  }
  /**
  Move to this node's next sibling, if any.
  */
  nextSibling() {
    return this.sibling(1);
  }
  /**
  Move to this node's previous sibling, if any.
  */
  prevSibling() {
    return this.sibling(-1);
  }
  atLastNode(t) {
    let r, i, { buffer: n } = this;
    if (n) {
      if (t > 0) {
        if (this.index < n.buffer.buffer.length)
          return !1;
      } else
        for (let a = 0; a < this.index; a++)
          if (n.buffer.buffer[a + 3] < this.index)
            return !1;
      ({ index: r, parent: i } = n);
    } else
      ({ index: r, _parent: i } = this._tree);
    for (; i; { index: r, _parent: i } = i)
      if (r > -1)
        for (let a = r + t, s = t < 0 ? -1 : i._tree.children.length; a != s; a += t) {
          let o = i._tree.children[a];
          if (this.mode & st.IncludeAnonymous || o instanceof Ti || !o.type.isAnonymous || Nu(o))
            return !1;
        }
    return !0;
  }
  move(t, r) {
    if (r && this.enterChild(
      t,
      0,
      4
      /* Side.DontCare */
    ))
      return !0;
    for (; ; ) {
      if (this.sibling(t))
        return !0;
      if (this.atLastNode(t) || !this.parent())
        return !1;
    }
  }
  /**
  Move to the next node in a
  [pre-order](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order,_NLR)
  traversal, going from a node to its first child or, if the
  current node is empty or `enter` is false, its next sibling or
  the next sibling of the first parent node that has one.
  */
  next(t = !0) {
    return this.move(1, t);
  }
  /**
  Move to the next node in a last-to-first pre-order traveral. A
  node is followed by its last child or, if it has none, its
  previous sibling or the previous sibling of the first parent
  node that has one.
  */
  prev(t = !0) {
    return this.move(-1, t);
  }
  /**
  Move the cursor to the innermost node that covers `pos`. If
  `side` is -1, it will enter nodes that end at `pos`. If it is 1,
  it will enter nodes that start at `pos`.
  */
  moveTo(t, r = 0) {
    for (; (this.from == this.to || (r < 1 ? this.from >= t : this.from > t) || (r > -1 ? this.to <= t : this.to < t)) && this.parent(); )
      ;
    for (; this.enterChild(1, t, r); )
      ;
    return this;
  }
  /**
  Get a [syntax node](#common.SyntaxNode) at the cursor's current
  position.
  */
  get node() {
    if (!this.buffer)
      return this._tree;
    let t = this.bufferNode, r = null, i = 0;
    if (t && t.context == this.buffer)
      e:
        for (let n = this.index, a = this.stack.length; a >= 0; ) {
          for (let s = t; s; s = s._parent)
            if (s.index == n) {
              if (n == this.index)
                return s;
              r = s, i = a + 1;
              break e;
            }
          n = this.stack[--a];
        }
    for (let n = i; n < this.stack.length; n++)
      r = new Qr(this.buffer, r, this.stack[n]);
    return this.bufferNode = new Qr(this.buffer, r, this.index);
  }
  /**
  Get the [tree](#common.Tree) that represents the current node, if
  any. Will return null when the node is in a [tree
  buffer](#common.TreeBuffer).
  */
  get tree() {
    return this.buffer ? null : this._tree._tree;
  }
  /**
  Iterate over the current node and all its descendants, calling
  `enter` when entering a node and `leave`, if given, when leaving
  one. When `enter` returns `false`, any children of that node are
  skipped, and `leave` isn't called for it.
  */
  iterate(t, r) {
    for (let i = 0; ; ) {
      let n = !1;
      if (this.type.isAnonymous || t(this) !== !1) {
        if (this.firstChild()) {
          i++;
          continue;
        }
        this.type.isAnonymous || (n = !0);
      }
      for (; n && r && r(this), n = this.type.isAnonymous, !this.nextSibling(); ) {
        if (!i)
          return;
        this.parent(), i--, n = !0;
      }
    }
  }
  /**
  Test whether the current node matches a given context—a sequence
  of direct parent node names. Empty strings in the context array
  are treated as wildcards.
  */
  matchContext(t) {
    if (!this.buffer)
      return tl(this.node, t);
    let { buffer: r } = this.buffer, { types: i } = r.set;
    for (let n = t.length - 1, a = this.stack.length - 1; n >= 0; a--) {
      if (a < 0)
        return tl(this.node, t, n);
      let s = i[r.buffer[this.stack[a]]];
      if (!s.isAnonymous) {
        if (t[n] && t[n] != s.name)
          return !1;
        n--;
      }
    }
    return !0;
  }
}
function Nu(e) {
  return e.children.some((t) => t instanceof Ti || !t.type.isAnonymous || Nu(t));
}
function ES(e) {
  var t;
  let { buffer: r, nodeSet: i, maxBufferLength: n = ap, reused: a = [], minRepeatType: s = i.types.length } = e, o = Array.isArray(r) ? new Iu(r, r.length) : r, l = i.types, c = 0, f = 0;
  function p($, z, F, ae, U, G) {
    let { id: H, start: re, end: B, size: Y } = o, E = f;
    for (; Y < 0; )
      if (o.next(), Y == -1) {
        let y = a[H];
        F.push(y), ae.push(re - $);
        return;
      } else if (Y == -3) {
        c = H;
        return;
      } else if (Y == -4) {
        f = H;
        return;
      } else
        throw new RangeError(`Unrecognized record size: ${Y}`);
    let m = l[H], P, R, A = re - $;
    if (B - re <= n && (R = D(o.pos - z, U))) {
      let y = new Uint16Array(R.size - R.skip), C = o.pos - R.size, j = y.length;
      for (; o.pos > C; )
        j = W(R.start, y, j);
      P = new Ti(y, B - R.start, i), A = R.start - $;
    } else {
      let y = o.pos - Y;
      o.next();
      let C = [], j = [], w = H >= s ? H : -1, J = 0, te = B;
      for (; o.pos > y; )
        w >= 0 && o.id == w && o.size >= 0 ? (o.end <= te - n && (g(C, j, re, J, o.end, te, w, E), J = C.length, te = o.end), o.next()) : G > 2500 ? O(re, y, C, j) : p(re, y, C, j, w, G + 1);
      if (w >= 0 && J > 0 && J < C.length && g(C, j, re, J, re, te, w, E), C.reverse(), j.reverse(), w > -1 && J > 0) {
        let se = d(m);
        P = Pu(m, C, j, 0, C.length, 0, B - re, se, se);
      } else
        P = L(m, C, j, B - re, E - B);
    }
    F.push(P), ae.push(A);
  }
  function O($, z, F, ae) {
    let U = [], G = 0, H = -1;
    for (; o.pos > z; ) {
      let { id: re, start: B, end: Y, size: E } = o;
      if (E > 4)
        o.next();
      else {
        if (H > -1 && B < H)
          break;
        H < 0 && (H = Y - n), U.push(re, B, Y), G++, o.next();
      }
    }
    if (G) {
      let re = new Uint16Array(G * 4), B = U[U.length - 2];
      for (let Y = U.length - 3, E = 0; Y >= 0; Y -= 3)
        re[E++] = U[Y], re[E++] = U[Y + 1] - B, re[E++] = U[Y + 2] - B, re[E++] = E;
      F.push(new Ti(re, U[2] - B, i)), ae.push(B - $);
    }
  }
  function d($) {
    return (z, F, ae) => {
      let U = 0, G = z.length - 1, H, re;
      if (G >= 0 && (H = z[G]) instanceof ht) {
        if (!G && H.type == $ && H.length == ae)
          return H;
        (re = H.prop(Le.lookAhead)) && (U = F[G] + H.length + re);
      }
      return L($, z, F, ae, U);
    };
  }
  function g($, z, F, ae, U, G, H, re) {
    let B = [], Y = [];
    for (; $.length > ae; )
      B.push($.pop()), Y.push(z.pop() + F - U);
    $.push(L(i.types[H], B, Y, G - U, re - G)), z.push(U - F);
  }
  function L($, z, F, ae, U = 0, G) {
    if (c) {
      let H = [Le.contextHash, c];
      G = G ? [H].concat(G) : [H];
    }
    if (U > 25) {
      let H = [Le.lookAhead, U];
      G = G ? [H].concat(G) : [H];
    }
    return new ht($, z, F, ae, G);
  }
  function D($, z) {
    let F = o.fork(), ae = 0, U = 0, G = 0, H = F.end - n, re = { size: 0, start: 0, skip: 0 };
    e:
      for (let B = F.pos - $; F.pos > B; ) {
        let Y = F.size;
        if (F.id == z && Y >= 0) {
          re.size = ae, re.start = U, re.skip = G, G += 4, ae += 4, F.next();
          continue;
        }
        let E = F.pos - Y;
        if (Y < 0 || E < B || F.start < H)
          break;
        let m = F.id >= s ? 4 : 0, P = F.start;
        for (F.next(); F.pos > E; ) {
          if (F.size < 0)
            if (F.size == -3)
              m += 4;
            else
              break e;
          else
            F.id >= s && (m += 4);
          F.next();
        }
        U = P, ae += Y, G += m;
      }
    return (z < 0 || ae == $) && (re.size = ae, re.start = U, re.skip = G), re.size > 4 ? re : void 0;
  }
  function W($, z, F) {
    let { id: ae, start: U, end: G, size: H } = o;
    if (o.next(), H >= 0 && ae < s) {
      let re = F;
      if (H > 4) {
        let B = o.pos - (H - 4);
        for (; o.pos > B; )
          F = W($, z, F);
      }
      z[--F] = re, z[--F] = G - $, z[--F] = U - $, z[--F] = ae;
    } else
      H == -3 ? c = ae : H == -4 && (f = ae);
    return F;
  }
  let x = [], V = [];
  for (; o.pos > 0; )
    p(e.start || 0, e.bufferStart || 0, x, V, -1, 0);
  let _ = (t = e.length) !== null && t !== void 0 ? t : x.length ? V[0] + x[0].length : 0;
  return new ht(l[e.topID], x.reverse(), V.reverse(), _);
}
const Fc = /* @__PURE__ */ new WeakMap();
function es(e, t) {
  if (!e.isAnonymous || t instanceof Ti || t.type != e)
    return 1;
  let r = Fc.get(t);
  if (r == null) {
    r = 1;
    for (let i of t.children) {
      if (i.type != e || !(i instanceof ht)) {
        r = 1;
        break;
      }
      r += es(e, i);
    }
    Fc.set(t, r);
  }
  return r;
}
function Pu(e, t, r, i, n, a, s, o, l) {
  let c = 0;
  for (let g = i; g < n; g++)
    c += es(e, t[g]);
  let f = Math.ceil(
    c * 1.5 / 8
    /* Balance.BranchFactor */
  ), p = [], O = [];
  function d(g, L, D, W, x) {
    for (let V = D; V < W; ) {
      let _ = V, $ = L[V], z = es(e, g[V]);
      for (V++; V < W; V++) {
        let F = es(e, g[V]);
        if (z + F >= f)
          break;
        z += F;
      }
      if (V == _ + 1) {
        if (z > f) {
          let F = g[_];
          d(F.children, F.positions, 0, F.children.length, L[_] + x);
          continue;
        }
        p.push(g[_]);
      } else {
        let F = L[V - 1] + g[V - 1].length - $;
        p.push(Pu(e, g, L, _, V, $, F, null, l));
      }
      O.push($ + x - a);
    }
  }
  return d(t, r, i, n, 0), (o || l)(p, O, s);
}
class cp {
  constructor() {
    this.map = /* @__PURE__ */ new WeakMap();
  }
  setBuffer(t, r, i) {
    let n = this.map.get(t);
    n || this.map.set(t, n = /* @__PURE__ */ new Map()), n.set(r, i);
  }
  getBuffer(t, r) {
    let i = this.map.get(t);
    return i && i.get(r);
  }
  /**
  Set the value for this syntax node.
  */
  set(t, r) {
    t instanceof Qr ? this.setBuffer(t.context.buffer, t.index, r) : t instanceof Gt && this.map.set(t.tree, r);
  }
  /**
  Retrieve value for this syntax node, if it exists in the map.
  */
  get(t) {
    return t instanceof Qr ? this.getBuffer(t.context.buffer, t.index) : t instanceof Gt ? this.map.get(t.tree) : void 0;
  }
  /**
  Set the value for the node that a cursor currently points to.
  */
  cursorSet(t, r) {
    t.buffer ? this.setBuffer(t.buffer.buffer, t.index, r) : this.map.set(t.tree, r);
  }
  /**
  Retrieve the value for the node that a cursor currently points
  to.
  */
  cursorGet(t) {
    return t.buffer ? this.getBuffer(t.buffer.buffer, t.index) : this.map.get(t.tree);
  }
}
class Jr {
  /**
  Construct a tree fragment. You'll usually want to use
  [`addTree`](#common.TreeFragment^addTree) and
  [`applyChanges`](#common.TreeFragment^applyChanges) instead of
  calling this directly.
  */
  constructor(t, r, i, n, a = !1, s = !1) {
    this.from = t, this.to = r, this.tree = i, this.offset = n, this.open = (a ? 1 : 0) | (s ? 2 : 0);
  }
  /**
  Whether the start of the fragment represents the start of a
  parse, or the end of a change. (In the second case, it may not
  be safe to reuse some nodes at the start, depending on the
  parsing algorithm.)
  */
  get openStart() {
    return (this.open & 1) > 0;
  }
  /**
  Whether the end of the fragment represents the end of a
  full-document parse, or the start of a change.
  */
  get openEnd() {
    return (this.open & 2) > 0;
  }
  /**
  Create a set of fragments from a freshly parsed tree, or update
  an existing set of fragments by replacing the ones that overlap
  with a tree with content from the new tree. When `partial` is
  true, the parse is treated as incomplete, and the resulting
  fragment has [`openEnd`](#common.TreeFragment.openEnd) set to
  true.
  */
  static addTree(t, r = [], i = !1) {
    let n = [new Jr(0, t.length, t, 0, !1, i)];
    for (let a of r)
      a.to > t.length && n.push(a);
    return n;
  }
  /**
  Apply a set of edits to an array of fragments, removing or
  splitting fragments as necessary to remove edited ranges, and
  adjusting offsets for fragments that moved.
  */
  static applyChanges(t, r, i = 128) {
    if (!r.length)
      return t;
    let n = [], a = 1, s = t.length ? t[0] : null;
    for (let o = 0, l = 0, c = 0; ; o++) {
      let f = o < r.length ? r[o] : null, p = f ? f.fromA : 1e9;
      if (p - l >= i)
        for (; s && s.from < p; ) {
          let O = s;
          if (l >= O.from || p <= O.to || c) {
            let d = Math.max(O.from, l) - c, g = Math.min(O.to, p) - c;
            O = d >= g ? null : new Jr(d, g, O.tree, O.offset + c, o > 0, !!f);
          }
          if (O && n.push(O), s.to > p)
            break;
          s = a < t.length ? t[a++] : null;
        }
      if (!f)
        break;
      l = f.toA, c = f.toA - f.toB;
    }
    return n;
  }
}
let fp = class {
  /**
  Start a parse, returning a [partial parse](#common.PartialParse)
  object. [`fragments`](#common.TreeFragment) can be passed in to
  make the parse incremental.
  
  By default, the entire input is parsed. You can pass `ranges`,
  which should be a sorted array of non-empty, non-overlapping
  ranges, to parse only those ranges. The tree returned in that
  case will start at `ranges[0].from`.
  */
  startParse(t, r, i) {
    return typeof t == "string" && (t = new dS(t)), i = i ? i.length ? i.map((n) => new Tr(n.from, n.to)) : [new Tr(0, 0)] : [new Tr(0, t.length)], this.createParse(t, r || [], i);
  }
  /**
  Run a full parse, returning the resulting tree.
  */
  parse(t, r, i) {
    let n = this.startParse(t, r, i);
    for (; ; ) {
      let a = n.advance();
      if (a)
        return a;
    }
  }
};
class dS {
  constructor(t) {
    this.string = t;
  }
  get length() {
    return this.string.length;
  }
  chunk(t) {
    return this.string.slice(t);
  }
  get lineChunks() {
    return !1;
  }
  read(t, r) {
    return this.string.slice(t, r);
  }
}
function TS(e) {
  return (t, r, i, n) => new mS(t, e, r, i, n);
}
class Wc {
  constructor(t, r, i, n, a) {
    this.parser = t, this.parse = r, this.overlay = i, this.target = n, this.from = a;
  }
}
function Xc(e) {
  if (!e.length || e.some((t) => t.from >= t.to))
    throw new RangeError("Invalid inner parse ranges given: " + JSON.stringify(e));
}
class SS {
  constructor(t, r, i, n, a, s, o) {
    this.parser = t, this.predicate = r, this.mounts = i, this.index = n, this.start = a, this.target = s, this.prev = o, this.depth = 0, this.ranges = [];
  }
}
const rl = new Le({ perNode: !0 });
class mS {
  constructor(t, r, i, n, a) {
    this.nest = r, this.input = i, this.fragments = n, this.ranges = a, this.inner = [], this.innerDone = 0, this.baseTree = null, this.stoppedAt = null, this.baseParse = t;
  }
  advance() {
    if (this.baseParse) {
      let i = this.baseParse.advance();
      if (!i)
        return null;
      if (this.baseParse = null, this.baseTree = i, this.startInner(), this.stoppedAt != null)
        for (let n of this.inner)
          n.parse.stopAt(this.stoppedAt);
    }
    if (this.innerDone == this.inner.length) {
      let i = this.baseTree;
      return this.stoppedAt != null && (i = new ht(i.type, i.children, i.positions, i.length, i.propValues.concat([[rl, this.stoppedAt]]))), i;
    }
    let t = this.inner[this.innerDone], r = t.parse.advance();
    if (r) {
      this.innerDone++;
      let i = Object.assign(/* @__PURE__ */ Object.create(null), t.target.props);
      i[Le.mounted.id] = new qn(r, t.overlay, t.parser), t.target.props = i;
    }
    return null;
  }
  get parsedPos() {
    if (this.baseParse)
      return 0;
    let t = this.input.length;
    for (let r = this.innerDone; r < this.inner.length; r++)
      this.inner[r].from < t && (t = Math.min(t, this.inner[r].parse.parsedPos));
    return t;
  }
  stopAt(t) {
    if (this.stoppedAt = t, this.baseParse)
      this.baseParse.stopAt(t);
    else
      for (let r = this.innerDone; r < this.inner.length; r++)
        this.inner[r].parse.stopAt(t);
  }
  startInner() {
    let t = new gS(this.fragments), r = null, i = null, n = new ss(new Gt(this.baseTree, this.ranges[0].from, 0, null), st.IncludeAnonymous | st.IgnoreMounts);
    e:
      for (let a, s; ; ) {
        let o = !0, l;
        if (this.stoppedAt != null && n.from >= this.stoppedAt)
          o = !1;
        else if (t.hasNode(n)) {
          if (r) {
            let c = r.mounts.find((f) => f.frag.from <= n.from && f.frag.to >= n.to && f.mount.overlay);
            if (c)
              for (let f of c.mount.overlay) {
                let p = f.from + c.pos, O = f.to + c.pos;
                p >= n.from && O <= n.to && !r.ranges.some((d) => d.from < O && d.to > p) && r.ranges.push({ from: p, to: O });
              }
          }
          o = !1;
        } else if (i && (s = RS(i.ranges, n.from, n.to)))
          o = s != 2;
        else if (!n.type.isAnonymous && (a = this.nest(n, this.input)) && (n.from < n.to || !a.overlay)) {
          n.tree || AS(n);
          let c = t.findMounts(n.from, a.parser);
          if (typeof a.overlay == "function")
            r = new SS(a.parser, a.overlay, c, this.inner.length, n.from, n.tree, r);
          else {
            let f = Hc(this.ranges, a.overlay || (n.from < n.to ? [new Tr(n.from, n.to)] : []));
            f.length && Xc(f), (f.length || !a.overlay) && this.inner.push(new Wc(a.parser, f.length ? a.parser.startParse(this.input, zc(c, f), f) : a.parser.startParse(""), a.overlay ? a.overlay.map((p) => new Tr(p.from - n.from, p.to - n.from)) : null, n.tree, f.length ? f[0].from : n.from)), a.overlay ? f.length && (i = { ranges: f, depth: 0, prev: i }) : o = !1;
          }
        } else
          r && (l = r.predicate(n)) && (l === !0 && (l = new Tr(n.from, n.to)), l.from < l.to && r.ranges.push(l));
        if (o && n.firstChild())
          r && r.depth++, i && i.depth++;
        else
          for (; !n.nextSibling(); ) {
            if (!n.parent())
              break e;
            if (r && !--r.depth) {
              let c = Hc(this.ranges, r.ranges);
              c.length && (Xc(c), this.inner.splice(r.index, 0, new Wc(r.parser, r.parser.startParse(this.input, zc(r.mounts, c), c), r.ranges.map((f) => new Tr(f.from - r.start, f.to - r.start)), r.target, c[0].from))), r = r.prev;
            }
            i && !--i.depth && (i = i.prev);
          }
      }
  }
}
function RS(e, t, r) {
  for (let i of e) {
    if (i.from >= r)
      break;
    if (i.to > t)
      return i.from <= t && i.to >= r ? 2 : 1;
  }
  return 0;
}
function jc(e, t, r, i, n, a) {
  if (t < r) {
    let s = e.buffer[t + 1];
    i.push(e.slice(t, r, s)), n.push(s - a);
  }
}
function AS(e) {
  let { node: t } = e, r = [], i = t.context.buffer;
  do
    r.push(e.index), e.parent();
  while (!e.tree);
  let n = e.tree, a = n.children.indexOf(i), s = n.children[a], o = s.buffer, l = [a];
  function c(f, p, O, d, g, L) {
    let D = r[L], W = [], x = [];
    jc(s, f, D, W, x, d);
    let V = o[D + 1], _ = o[D + 2];
    l.push(W.length);
    let $ = L ? c(D + 4, o[D + 3], s.set.types[o[D]], V, _ - V, L - 1) : t.toTree();
    return W.push($), x.push(V - d), jc(s, o[D + 3], p, W, x, d), new ht(O, W, x, g);
  }
  n.children[a] = c(0, o.length, or.none, 0, s.length, r.length - 1);
  for (let f of l) {
    let p = e.tree.children[f], O = e.tree.positions[f];
    e.yield(new Gt(p, O + e.from, f, e._tree));
  }
}
class Zc {
  constructor(t, r) {
    this.offset = r, this.done = !1, this.cursor = t.cursor(st.IncludeAnonymous | st.IgnoreMounts);
  }
  // Move to the first node (in pre-order) that starts at or after `pos`.
  moveTo(t) {
    let { cursor: r } = this, i = t - this.offset;
    for (; !this.done && r.from < i; )
      r.to >= t && r.enter(i, 1, st.IgnoreOverlays | st.ExcludeBuffers) || r.next(!1) || (this.done = !0);
  }
  hasNode(t) {
    if (this.moveTo(t.from), !this.done && this.cursor.from + this.offset == t.from && this.cursor.tree)
      for (let r = this.cursor.tree; ; ) {
        if (r == t.tree)
          return !0;
        if (r.children.length && r.positions[0] == 0 && r.children[0] instanceof ht)
          r = r.children[0];
        else
          break;
      }
    return !1;
  }
}
let gS = class {
  constructor(t) {
    var r;
    if (this.fragments = t, this.curTo = 0, this.fragI = 0, t.length) {
      let i = this.curFrag = t[0];
      this.curTo = (r = i.tree.prop(rl)) !== null && r !== void 0 ? r : i.to, this.inner = new Zc(i.tree, -i.offset);
    } else
      this.curFrag = this.inner = null;
  }
  hasNode(t) {
    for (; this.curFrag && t.from >= this.curTo; )
      this.nextFrag();
    return this.curFrag && this.curFrag.from <= t.from && this.curTo >= t.to && this.inner.hasNode(t);
  }
  nextFrag() {
    var t;
    if (this.fragI++, this.fragI == this.fragments.length)
      this.curFrag = this.inner = null;
    else {
      let r = this.curFrag = this.fragments[this.fragI];
      this.curTo = (t = r.tree.prop(rl)) !== null && t !== void 0 ? t : r.to, this.inner = new Zc(r.tree, -r.offset);
    }
  }
  findMounts(t, r) {
    var i;
    let n = [];
    if (this.inner) {
      this.inner.cursor.moveTo(t, 1);
      for (let a = this.inner.cursor.node; a; a = a.parent) {
        let s = (i = a.tree) === null || i === void 0 ? void 0 : i.prop(Le.mounted);
        if (s && s.parser == r)
          for (let o = this.fragI; o < this.fragments.length; o++) {
            let l = this.fragments[o];
            if (l.from >= a.to)
              break;
            l.tree == this.curFrag.tree && n.push({
              frag: l,
              pos: a.from - l.offset,
              mount: s
            });
          }
      }
    }
    return n;
  }
};
function Hc(e, t) {
  let r = null, i = t;
  for (let n = 1, a = 0; n < e.length; n++) {
    let s = e[n - 1].to, o = e[n].from;
    for (; a < i.length; a++) {
      let l = i[a];
      if (l.from >= o)
        break;
      l.to <= s || (r || (i = r = t.slice()), l.from < s ? (r[a] = new Tr(l.from, s), l.to > o && r.splice(a + 1, 0, new Tr(o, l.to))) : l.to > o ? r[a--] = new Tr(o, l.to) : r.splice(a--, 1));
    }
  }
  return i;
}
function yS(e, t, r, i) {
  let n = 0, a = 0, s = !1, o = !1, l = -1e9, c = [];
  for (; ; ) {
    let f = n == e.length ? 1e9 : s ? e[n].to : e[n].from, p = a == t.length ? 1e9 : o ? t[a].to : t[a].from;
    if (s != o) {
      let O = Math.max(l, r), d = Math.min(f, p, i);
      O < d && c.push(new Tr(O, d));
    }
    if (l = Math.min(f, p), l == 1e9)
      break;
    f == l && (s ? (s = !1, n++) : s = !0), p == l && (o ? (o = !1, a++) : o = !0);
  }
  return c;
}
function zc(e, t) {
  let r = [];
  for (let { pos: i, mount: n, frag: a } of e) {
    let s = i + (n.overlay ? n.overlay[0].from : 0), o = s + n.tree.length, l = Math.max(a.from, s), c = Math.min(a.to, o);
    if (n.overlay) {
      let f = n.overlay.map((O) => new Tr(O.from + i, O.to + i)), p = yS(t, f, l, c);
      for (let O = 0, d = l; ; O++) {
        let g = O == p.length, L = g ? c : p[O].from;
        if (L > d && r.push(new Jr(d, L, n.tree, -s, a.from >= d || a.openStart, a.to <= L || a.openEnd)), g)
          break;
        d = p[O].to;
      }
    } else
      r.push(new Jr(l, c, n.tree, -s, a.from >= s || a.openStart, a.to <= o || a.openEnd));
  }
  return r;
}
let IS = 0;
class Mr {
  /**
  @internal
  */
  constructor(t, r, i) {
    this.set = t, this.base = r, this.modified = i, this.id = IS++;
  }
  /**
  Define a new tag. If `parent` is given, the tag is treated as a
  sub-tag of that parent, and
  [highlighters](#highlight.tagHighlighter) that don't mention
  this tag will try to fall back to the parent tag (or grandparent
  tag, etc).
  */
  static define(t) {
    if (t != null && t.base)
      throw new Error("Can not derive from a modified tag");
    let r = new Mr([], null, []);
    if (r.set.push(r), t)
      for (let i of t.set)
        r.set.push(i);
    return r;
  }
  /**
  Define a tag _modifier_, which is a function that, given a tag,
  will return a tag that is a subtag of the original. Applying the
  same modifier to a twice tag will return the same value (`m1(t1)
  == m1(t1)`) and applying multiple modifiers will, regardless or
  order, produce the same tag (`m1(m2(t1)) == m2(m1(t1))`).
  
  When multiple modifiers are applied to a given base tag, each
  smaller set of modifiers is registered as a parent, so that for
  example `m1(m2(m3(t1)))` is a subtype of `m1(m2(t1))`,
  `m1(m3(t1)`, and so on.
  */
  static defineModifier() {
    let t = new os();
    return (r) => r.modified.indexOf(t) > -1 ? r : os.get(r.base || r, r.modified.concat(t).sort((i, n) => i.id - n.id));
  }
}
let NS = 0;
class os {
  constructor() {
    this.instances = [], this.id = NS++;
  }
  static get(t, r) {
    if (!r.length)
      return t;
    let i = r[0].instances.find((o) => o.base == t && PS(r, o.modified));
    if (i)
      return i;
    let n = [], a = new Mr(n, t, r);
    for (let o of r)
      o.instances.push(a);
    let s = _S(r);
    for (let o of t.set)
      if (!o.modified.length)
        for (let l of s)
          n.push(os.get(o, l));
    return a;
  }
}
function PS(e, t) {
  return e.length == t.length && e.every((r, i) => r == t[i]);
}
function _S(e) {
  let t = [[]];
  for (let r = 0; r < e.length; r++)
    for (let i = 0, n = t.length; i < n; i++)
      t.push(t[i].concat(e[r]));
  return t.sort((r, i) => i.length - r.length);
}
function An(e) {
  let t = /* @__PURE__ */ Object.create(null);
  for (let r in e) {
    let i = e[r];
    Array.isArray(i) || (i = [i]);
    for (let n of r.split(" "))
      if (n) {
        let a = [], s = 2, o = n;
        for (let p = 0; ; ) {
          if (o == "..." && p > 0 && p + 3 == n.length) {
            s = 1;
            break;
          }
          let O = /^"(?:[^"\\]|\\.)*?"|[^\/!]+/.exec(o);
          if (!O)
            throw new RangeError("Invalid path: " + n);
          if (a.push(O[0] == "*" ? "" : O[0][0] == '"' ? JSON.parse(O[0]) : O[0]), p += O[0].length, p == n.length)
            break;
          let d = n[p++];
          if (p == n.length && d == "!") {
            s = 0;
            break;
          }
          if (d != "/")
            throw new RangeError("Invalid path: " + n);
          o = n.slice(p);
        }
        let l = a.length - 1, c = a[l];
        if (!c)
          throw new RangeError("Invalid path: " + n);
        let f = new ls(i, s, l > 0 ? a.slice(0, l) : null);
        t[c] = f.sort(t[c]);
      }
  }
  return hp.add(t);
}
const hp = new Le();
class ls {
  constructor(t, r, i, n) {
    this.tags = t, this.mode = r, this.context = i, this.next = n;
  }
  get opaque() {
    return this.mode == 0;
  }
  get inherit() {
    return this.mode == 1;
  }
  sort(t) {
    return !t || t.depth < this.depth ? (this.next = t, this) : (t.next = this.sort(t.next), t);
  }
  get depth() {
    return this.context ? this.context.length : 0;
  }
}
ls.empty = new ls([], 2, null);
function pp(e, t) {
  let r = /* @__PURE__ */ Object.create(null);
  for (let a of e)
    if (!Array.isArray(a.tag))
      r[a.tag.id] = a.class;
    else
      for (let s of a.tag)
        r[s.id] = a.class;
  let { scope: i, all: n = null } = t || {};
  return {
    style: (a) => {
      let s = n;
      for (let o of a)
        for (let l of o.set) {
          let c = r[l.id];
          if (c) {
            s = s ? s + " " + c : c;
            break;
          }
        }
      return s;
    },
    scope: i
  };
}
function bS(e, t) {
  let r = null;
  for (let i of e) {
    let n = i.style(t);
    n && (r = r ? r + " " + n : n);
  }
  return r;
}
function vS(e, t, r, i = 0, n = e.length) {
  let a = new CS(i, Array.isArray(t) ? t : [t], r);
  a.highlightRange(e.cursor(), i, n, "", a.highlighters), a.flush(n);
}
class CS {
  constructor(t, r, i) {
    this.at = t, this.highlighters = r, this.span = i, this.class = "";
  }
  startSpan(t, r) {
    r != this.class && (this.flush(t), t > this.at && (this.at = t), this.class = r);
  }
  flush(t) {
    t > this.at && this.class && this.span(this.at, t, this.class);
  }
  highlightRange(t, r, i, n, a) {
    let { type: s, from: o, to: l } = t;
    if (o >= i || l <= r)
      return;
    s.isTop && (a = this.highlighters.filter((d) => !d.scope || d.scope(s)));
    let c = n, f = LS(t) || ls.empty, p = bS(a, f.tags);
    if (p && (c && (c += " "), c += p, f.mode == 1 && (n += (n ? " " : "") + p)), this.startSpan(Math.max(r, o), c), f.opaque)
      return;
    let O = t.tree && t.tree.prop(Le.mounted);
    if (O && O.overlay) {
      let d = t.node.enter(O.overlay[0].from + o, 1), g = this.highlighters.filter((D) => !D.scope || D.scope(O.tree.type)), L = t.firstChild();
      for (let D = 0, W = o; ; D++) {
        let x = D < O.overlay.length ? O.overlay[D] : null, V = x ? x.from + o : l, _ = Math.max(r, W), $ = Math.min(i, V);
        if (_ < $ && L)
          for (; t.from < $ && (this.highlightRange(t, _, $, n, a), this.startSpan(Math.min($, t.to), c), !(t.to >= V || !t.nextSibling())); )
            ;
        if (!x || V > i)
          break;
        W = x.to + o, W > r && (this.highlightRange(d.cursor(), Math.max(r, x.from + o), Math.min(i, W), "", g), this.startSpan(Math.min(i, W), c));
      }
      L && t.parent();
    } else if (t.firstChild()) {
      O && (n = "");
      do
        if (!(t.to <= r)) {
          if (t.from >= i)
            break;
          this.highlightRange(t, r, i, n, a), this.startSpan(Math.min(i, t.to), c);
        }
      while (t.nextSibling());
      t.parent();
    }
  }
}
function LS(e) {
  let t = e.type.prop(hp);
  for (; t && t.context && !e.matchContext(t.context); )
    t = t.next;
  return t || null;
}
const ue = Mr.define, Ua = ue(), fi = ue(), qc = ue(fi), Jc = ue(fi), hi = ue(), wa = ue(hi), So = ue(hi), wr = ue(), _i = ue(wr), Dr = ue(), Ur = ue(), il = ue(), xn = ue(il), Ma = ue(), Q = {
  /**
  A comment.
  */
  comment: Ua,
  /**
  A line [comment](#highlight.tags.comment).
  */
  lineComment: ue(Ua),
  /**
  A block [comment](#highlight.tags.comment).
  */
  blockComment: ue(Ua),
  /**
  A documentation [comment](#highlight.tags.comment).
  */
  docComment: ue(Ua),
  /**
  Any kind of identifier.
  */
  name: fi,
  /**
  The [name](#highlight.tags.name) of a variable.
  */
  variableName: ue(fi),
  /**
  A type [name](#highlight.tags.name).
  */
  typeName: qc,
  /**
  A tag name (subtag of [`typeName`](#highlight.tags.typeName)).
  */
  tagName: ue(qc),
  /**
  A property or field [name](#highlight.tags.name).
  */
  propertyName: Jc,
  /**
  An attribute name (subtag of [`propertyName`](#highlight.tags.propertyName)).
  */
  attributeName: ue(Jc),
  /**
  The [name](#highlight.tags.name) of a class.
  */
  className: ue(fi),
  /**
  A label [name](#highlight.tags.name).
  */
  labelName: ue(fi),
  /**
  A namespace [name](#highlight.tags.name).
  */
  namespace: ue(fi),
  /**
  The [name](#highlight.tags.name) of a macro.
  */
  macroName: ue(fi),
  /**
  A literal value.
  */
  literal: hi,
  /**
  A string [literal](#highlight.tags.literal).
  */
  string: wa,
  /**
  A documentation [string](#highlight.tags.string).
  */
  docString: ue(wa),
  /**
  A character literal (subtag of [string](#highlight.tags.string)).
  */
  character: ue(wa),
  /**
  An attribute value (subtag of [string](#highlight.tags.string)).
  */
  attributeValue: ue(wa),
  /**
  A number [literal](#highlight.tags.literal).
  */
  number: So,
  /**
  An integer [number](#highlight.tags.number) literal.
  */
  integer: ue(So),
  /**
  A floating-point [number](#highlight.tags.number) literal.
  */
  float: ue(So),
  /**
  A boolean [literal](#highlight.tags.literal).
  */
  bool: ue(hi),
  /**
  Regular expression [literal](#highlight.tags.literal).
  */
  regexp: ue(hi),
  /**
  An escape [literal](#highlight.tags.literal), for example a
  backslash escape in a string.
  */
  escape: ue(hi),
  /**
  A color [literal](#highlight.tags.literal).
  */
  color: ue(hi),
  /**
  A URL [literal](#highlight.tags.literal).
  */
  url: ue(hi),
  /**
  A language keyword.
  */
  keyword: Dr,
  /**
  The [keyword](#highlight.tags.keyword) for the self or this
  object.
  */
  self: ue(Dr),
  /**
  The [keyword](#highlight.tags.keyword) for null.
  */
  null: ue(Dr),
  /**
  A [keyword](#highlight.tags.keyword) denoting some atomic value.
  */
  atom: ue(Dr),
  /**
  A [keyword](#highlight.tags.keyword) that represents a unit.
  */
  unit: ue(Dr),
  /**
  A modifier [keyword](#highlight.tags.keyword).
  */
  modifier: ue(Dr),
  /**
  A [keyword](#highlight.tags.keyword) that acts as an operator.
  */
  operatorKeyword: ue(Dr),
  /**
  A control-flow related [keyword](#highlight.tags.keyword).
  */
  controlKeyword: ue(Dr),
  /**
  A [keyword](#highlight.tags.keyword) that defines something.
  */
  definitionKeyword: ue(Dr),
  /**
  A [keyword](#highlight.tags.keyword) related to defining or
  interfacing with modules.
  */
  moduleKeyword: ue(Dr),
  /**
  An operator.
  */
  operator: Ur,
  /**
  An [operator](#highlight.tags.operator) that dereferences something.
  */
  derefOperator: ue(Ur),
  /**
  Arithmetic-related [operator](#highlight.tags.operator).
  */
  arithmeticOperator: ue(Ur),
  /**
  Logical [operator](#highlight.tags.operator).
  */
  logicOperator: ue(Ur),
  /**
  Bit [operator](#highlight.tags.operator).
  */
  bitwiseOperator: ue(Ur),
  /**
  Comparison [operator](#highlight.tags.operator).
  */
  compareOperator: ue(Ur),
  /**
  [Operator](#highlight.tags.operator) that updates its operand.
  */
  updateOperator: ue(Ur),
  /**
  [Operator](#highlight.tags.operator) that defines something.
  */
  definitionOperator: ue(Ur),
  /**
  Type-related [operator](#highlight.tags.operator).
  */
  typeOperator: ue(Ur),
  /**
  Control-flow [operator](#highlight.tags.operator).
  */
  controlOperator: ue(Ur),
  /**
  Program or markup punctuation.
  */
  punctuation: il,
  /**
  [Punctuation](#highlight.tags.punctuation) that separates
  things.
  */
  separator: ue(il),
  /**
  Bracket-style [punctuation](#highlight.tags.punctuation).
  */
  bracket: xn,
  /**
  Angle [brackets](#highlight.tags.bracket) (usually `<` and `>`
  tokens).
  */
  angleBracket: ue(xn),
  /**
  Square [brackets](#highlight.tags.bracket) (usually `[` and `]`
  tokens).
  */
  squareBracket: ue(xn),
  /**
  Parentheses (usually `(` and `)` tokens). Subtag of
  [bracket](#highlight.tags.bracket).
  */
  paren: ue(xn),
  /**
  Braces (usually `{` and `}` tokens). Subtag of
  [bracket](#highlight.tags.bracket).
  */
  brace: ue(xn),
  /**
  Content, for example plain text in XML or markup documents.
  */
  content: wr,
  /**
  [Content](#highlight.tags.content) that represents a heading.
  */
  heading: _i,
  /**
  A level 1 [heading](#highlight.tags.heading).
  */
  heading1: ue(_i),
  /**
  A level 2 [heading](#highlight.tags.heading).
  */
  heading2: ue(_i),
  /**
  A level 3 [heading](#highlight.tags.heading).
  */
  heading3: ue(_i),
  /**
  A level 4 [heading](#highlight.tags.heading).
  */
  heading4: ue(_i),
  /**
  A level 5 [heading](#highlight.tags.heading).
  */
  heading5: ue(_i),
  /**
  A level 6 [heading](#highlight.tags.heading).
  */
  heading6: ue(_i),
  /**
  A prose separator (such as a horizontal rule).
  */
  contentSeparator: ue(wr),
  /**
  [Content](#highlight.tags.content) that represents a list.
  */
  list: ue(wr),
  /**
  [Content](#highlight.tags.content) that represents a quote.
  */
  quote: ue(wr),
  /**
  [Content](#highlight.tags.content) that is emphasized.
  */
  emphasis: ue(wr),
  /**
  [Content](#highlight.tags.content) that is styled strong.
  */
  strong: ue(wr),
  /**
  [Content](#highlight.tags.content) that is part of a link.
  */
  link: ue(wr),
  /**
  [Content](#highlight.tags.content) that is styled as code or
  monospace.
  */
  monospace: ue(wr),
  /**
  [Content](#highlight.tags.content) that has a strike-through
  style.
  */
  strikethrough: ue(wr),
  /**
  Inserted text in a change-tracking format.
  */
  inserted: ue(),
  /**
  Deleted text.
  */
  deleted: ue(),
  /**
  Changed text.
  */
  changed: ue(),
  /**
  An invalid or unsyntactic element.
  */
  invalid: ue(),
  /**
  Metadata or meta-instruction.
  */
  meta: Ma,
  /**
  [Metadata](#highlight.tags.meta) that applies to the entire
  document.
  */
  documentMeta: ue(Ma),
  /**
  [Metadata](#highlight.tags.meta) that annotates or adds
  attributes to a given syntactic element.
  */
  annotation: ue(Ma),
  /**
  Processing instruction or preprocessor directive. Subtag of
  [meta](#highlight.tags.meta).
  */
  processingInstruction: ue(Ma),
  /**
  [Modifier](#highlight.Tag^defineModifier) that indicates that a
  given element is being defined. Expected to be used with the
  various [name](#highlight.tags.name) tags.
  */
  definition: Mr.defineModifier(),
  /**
  [Modifier](#highlight.Tag^defineModifier) that indicates that
  something is constant. Mostly expected to be used with
  [variable names](#highlight.tags.variableName).
  */
  constant: Mr.defineModifier(),
  /**
  [Modifier](#highlight.Tag^defineModifier) used to indicate that
  a [variable](#highlight.tags.variableName) or [property
  name](#highlight.tags.propertyName) is being called or defined
  as a function.
  */
  function: Mr.defineModifier(),
  /**
  [Modifier](#highlight.Tag^defineModifier) that can be applied to
  [names](#highlight.tags.name) to indicate that they belong to
  the language's standard environment.
  */
  standard: Mr.defineModifier(),
  /**
  [Modifier](#highlight.Tag^defineModifier) that indicates a given
  [names](#highlight.tags.name) is local to some scope.
  */
  local: Mr.defineModifier(),
  /**
  A generic variant [modifier](#highlight.Tag^defineModifier) that
  can be used to tag language-specific alternative variants of
  some common tag. It is recommended for themes to define special
  forms of at least the [string](#highlight.tags.string) and
  [variable name](#highlight.tags.variableName) tags, since those
  come up a lot.
  */
  special: Mr.defineModifier()
};
pp([
  { tag: Q.link, class: "tok-link" },
  { tag: Q.heading, class: "tok-heading" },
  { tag: Q.emphasis, class: "tok-emphasis" },
  { tag: Q.strong, class: "tok-strong" },
  { tag: Q.keyword, class: "tok-keyword" },
  { tag: Q.atom, class: "tok-atom" },
  { tag: Q.bool, class: "tok-bool" },
  { tag: Q.url, class: "tok-url" },
  { tag: Q.labelName, class: "tok-labelName" },
  { tag: Q.inserted, class: "tok-inserted" },
  { tag: Q.deleted, class: "tok-deleted" },
  { tag: Q.literal, class: "tok-literal" },
  { tag: Q.string, class: "tok-string" },
  { tag: Q.number, class: "tok-number" },
  { tag: [Q.regexp, Q.escape, Q.special(Q.string)], class: "tok-string2" },
  { tag: Q.variableName, class: "tok-variableName" },
  { tag: Q.local(Q.variableName), class: "tok-variableName tok-local" },
  { tag: Q.definition(Q.variableName), class: "tok-variableName tok-definition" },
  { tag: Q.special(Q.variableName), class: "tok-variableName2" },
  { tag: Q.definition(Q.propertyName), class: "tok-propertyName tok-definition" },
  { tag: Q.typeName, class: "tok-typeName" },
  { tag: Q.namespace, class: "tok-namespace" },
  { tag: Q.className, class: "tok-className" },
  { tag: Q.macroName, class: "tok-macroName" },
  { tag: Q.propertyName, class: "tok-propertyName" },
  { tag: Q.operator, class: "tok-operator" },
  { tag: Q.comment, class: "tok-comment" },
  { tag: Q.meta, class: "tok-meta" },
  { tag: Q.invalid, class: "tok-invalid" },
  { tag: Q.punctuation, class: "tok-punctuation" }
]);
var mo;
const tn = /* @__PURE__ */ new Le();
function Op(e) {
  return jt.define({
    combine: e ? (t) => t.concat(e) : void 0
  });
}
const _u = /* @__PURE__ */ new Le();
class vr {
  /**
  Construct a language object. If you need to invoke this
  directly, first define a data facet with
  [`defineLanguageFacet`](https://codemirror.net/6/docs/ref/#language.defineLanguageFacet), and then
  configure your parser to [attach](https://codemirror.net/6/docs/ref/#language.languageDataProp) it
  to the language's outer syntax node.
  */
  constructor(t, r, i = [], n = "") {
    this.data = t, this.name = n, Qi.prototype.hasOwnProperty("tree") || Object.defineProperty(Qi.prototype, "tree", { get() {
      return Ot(this);
    } }), this.parser = r, this.extension = [
      mi.of(this),
      Qi.languageData.of((a, s, o) => {
        let l = Kc(a, s, o), c = l.type.prop(tn);
        if (!c)
          return [];
        let f = a.facet(c), p = l.type.prop(_u);
        if (p) {
          let O = l.resolve(s - l.from, o);
          for (let d of p)
            if (d.test(O, a)) {
              let g = a.facet(d.facet);
              return d.type == "replace" ? g : g.concat(f);
            }
        }
        return f;
      })
    ].concat(i);
  }
  /**
  Query whether this language is active at the given position.
  */
  isActiveAt(t, r, i = -1) {
    return Kc(t, r, i).type.prop(tn) == this.data;
  }
  /**
  Find the document regions that were parsed using this language.
  The returned regions will _include_ any nested languages rooted
  in this language, when those exist.
  */
  findRegions(t) {
    let r = t.facet(mi);
    if ((r == null ? void 0 : r.data) == this.data)
      return [{ from: 0, to: t.doc.length }];
    if (!r || !r.allowsNesting)
      return [];
    let i = [], n = (a, s) => {
      if (a.prop(tn) == this.data) {
        i.push({ from: s, to: s + a.length });
        return;
      }
      let o = a.prop(Le.mounted);
      if (o) {
        if (o.tree.prop(tn) == this.data) {
          if (o.overlay)
            for (let l of o.overlay)
              i.push({ from: l.from + s, to: l.to + s });
          else
            i.push({ from: s, to: s + a.length });
          return;
        } else if (o.overlay) {
          let l = i.length;
          if (n(o.tree, o.overlay[0].from + s), i.length > l)
            return;
        }
      }
      for (let l = 0; l < a.children.length; l++) {
        let c = a.children[l];
        c instanceof ht && n(c, a.positions[l] + s);
      }
    };
    return n(Ot(t), 0), i;
  }
  /**
  Indicates whether this language allows nested languages. The
  default implementation returns true.
  */
  get allowsNesting() {
    return !0;
  }
}
vr.setState = /* @__PURE__ */ Tt.define();
function Kc(e, t, r) {
  let i = e.facet(mi), n = Ot(e).topNode;
  if (!i || i.allowsNesting)
    for (let a = n; a; a = a.enter(t, r, st.ExcludeBuffers))
      a.type.isTop && (n = a);
  return n;
}
class Si extends vr {
  constructor(t, r, i) {
    super(t, r, [], i), this.parser = r;
  }
  /**
  Define a language from a parser.
  */
  static define(t) {
    let r = Op(t.languageData);
    return new Si(r, t.parser.configure({
      props: [tn.add((i) => i.isTop ? r : void 0)]
    }), t.name);
  }
  /**
  Create a new instance of this language with a reconfigured
  version of its parser and optionally a new name.
  */
  configure(t, r) {
    return new Si(this.data, this.parser.configure(t), r || this.name);
  }
  get allowsNesting() {
    return this.parser.hasWrappers();
  }
}
function Ot(e) {
  let t = e.field(vr.state, !1);
  return t ? t.tree : ht.empty;
}
class xS {
  /**
  Create an input object for the given document.
  */
  constructor(t) {
    this.doc = t, this.cursorPos = 0, this.string = "", this.cursor = t.iter();
  }
  get length() {
    return this.doc.length;
  }
  syncTo(t) {
    return this.string = this.cursor.next(t - this.cursorPos).value, this.cursorPos = t + this.string.length, this.cursorPos - this.string.length;
  }
  chunk(t) {
    return this.syncTo(t), this.string;
  }
  get lineChunks() {
    return !0;
  }
  read(t, r) {
    let i = this.cursorPos - this.string.length;
    return t < i || r >= this.cursorPos ? this.doc.sliceString(t, r) : this.string.slice(t - i, r - i);
  }
}
let Dn = null;
class us {
  constructor(t, r, i = [], n, a, s, o, l) {
    this.parser = t, this.state = r, this.fragments = i, this.tree = n, this.treeLen = a, this.viewport = s, this.skipped = o, this.scheduleOn = l, this.parse = null, this.tempSkipped = [];
  }
  /**
  @internal
  */
  static create(t, r, i) {
    return new us(t, r, [], ht.empty, 0, i, [], null);
  }
  startParse() {
    return this.parser.startParse(new xS(this.state.doc), this.fragments);
  }
  /**
  @internal
  */
  work(t, r) {
    return r != null && r >= this.state.doc.length && (r = void 0), this.tree != ht.empty && this.isDone(r ?? this.state.doc.length) ? (this.takeTree(), !0) : this.withContext(() => {
      var i;
      if (typeof t == "number") {
        let n = Date.now() + t;
        t = () => Date.now() > n;
      }
      for (this.parse || (this.parse = this.startParse()), r != null && (this.parse.stoppedAt == null || this.parse.stoppedAt > r) && r < this.state.doc.length && this.parse.stopAt(r); ; ) {
        let n = this.parse.advance();
        if (n)
          if (this.fragments = this.withoutTempSkipped(Jr.addTree(n, this.fragments, this.parse.stoppedAt != null)), this.treeLen = (i = this.parse.stoppedAt) !== null && i !== void 0 ? i : this.state.doc.length, this.tree = n, this.parse = null, this.treeLen < (r ?? this.state.doc.length))
            this.parse = this.startParse();
          else
            return !0;
        if (t())
          return !1;
      }
    });
  }
  /**
  @internal
  */
  takeTree() {
    let t, r;
    this.parse && (t = this.parse.parsedPos) >= this.treeLen && ((this.parse.stoppedAt == null || this.parse.stoppedAt > t) && this.parse.stopAt(t), this.withContext(() => {
      for (; !(r = this.parse.advance()); )
        ;
    }), this.treeLen = t, this.tree = r, this.fragments = this.withoutTempSkipped(Jr.addTree(this.tree, this.fragments, !0)), this.parse = null);
  }
  withContext(t) {
    let r = Dn;
    Dn = this;
    try {
      return t();
    } finally {
      Dn = r;
    }
  }
  withoutTempSkipped(t) {
    for (let r; r = this.tempSkipped.pop(); )
      t = ef(t, r.from, r.to);
    return t;
  }
  /**
  @internal
  */
  changes(t, r) {
    let { fragments: i, tree: n, treeLen: a, viewport: s, skipped: o } = this;
    if (this.takeTree(), !t.empty) {
      let l = [];
      if (t.iterChangedRanges((c, f, p, O) => l.push({ fromA: c, toA: f, fromB: p, toB: O })), i = Jr.applyChanges(i, l), n = ht.empty, a = 0, s = { from: t.mapPos(s.from, -1), to: t.mapPos(s.to, 1) }, this.skipped.length) {
        o = [];
        for (let c of this.skipped) {
          let f = t.mapPos(c.from, 1), p = t.mapPos(c.to, -1);
          f < p && o.push({ from: f, to: p });
        }
      }
    }
    return new us(this.parser, r, i, n, a, s, o, this.scheduleOn);
  }
  /**
  @internal
  */
  updateViewport(t) {
    if (this.viewport.from == t.from && this.viewport.to == t.to)
      return !1;
    this.viewport = t;
    let r = this.skipped.length;
    for (let i = 0; i < this.skipped.length; i++) {
      let { from: n, to: a } = this.skipped[i];
      n < t.to && a > t.from && (this.fragments = ef(this.fragments, n, a), this.skipped.splice(i--, 1));
    }
    return this.skipped.length >= r ? !1 : (this.reset(), !0);
  }
  /**
  @internal
  */
  reset() {
    this.parse && (this.takeTree(), this.parse = null);
  }
  /**
  Notify the parse scheduler that the given region was skipped
  because it wasn't in view, and the parse should be restarted
  when it comes into view.
  */
  skipUntilInView(t, r) {
    this.skipped.push({ from: t, to: r });
  }
  /**
  Returns a parser intended to be used as placeholder when
  asynchronously loading a nested parser. It'll skip its input and
  mark it as not-really-parsed, so that the next update will parse
  it again.
  
  When `until` is given, a reparse will be scheduled when that
  promise resolves.
  */
  static getSkippingParser(t) {
    return new class extends fp {
      createParse(r, i, n) {
        let a = n[0].from, s = n[n.length - 1].to;
        return {
          parsedPos: a,
          advance() {
            let l = Dn;
            if (l) {
              for (let c of n)
                l.tempSkipped.push(c);
              t && (l.scheduleOn = l.scheduleOn ? Promise.all([l.scheduleOn, t]) : t);
            }
            return this.parsedPos = s, new ht(or.none, [], [], s - a);
          },
          stoppedAt: null,
          stopAt() {
          }
        };
      }
    }();
  }
  /**
  @internal
  */
  isDone(t) {
    t = Math.min(t, this.state.doc.length);
    let r = this.fragments;
    return this.treeLen >= t && r.length && r[0].from == 0 && r[0].to >= t;
  }
  /**
  Get the context for the current parse, or `null` if no editor
  parse is in progress.
  */
  static get() {
    return Dn;
  }
}
function ef(e, t, r) {
  return Jr.applyChanges(e, [{ fromA: t, toA: r, fromB: t, toB: r }]);
}
class cn {
  constructor(t) {
    this.context = t, this.tree = t.tree;
  }
  apply(t) {
    if (!t.docChanged && this.tree == this.context.tree)
      return this;
    let r = this.context.changes(t.changes, t.state), i = this.context.treeLen == t.startState.doc.length ? void 0 : Math.max(t.changes.mapPos(this.context.treeLen), r.viewport.to);
    return r.work(20, i) || r.takeTree(), new cn(r);
  }
  static init(t) {
    let r = Math.min(3e3, t.doc.length), i = us.create(t.facet(mi).parser, t, { from: 0, to: r });
    return i.work(20, r) || i.takeTree(), new cn(i);
  }
}
vr.state = /* @__PURE__ */ Xr.define({
  create: cn.init,
  update(e, t) {
    for (let r of t.effects)
      if (r.is(vr.setState))
        return r.value;
    return t.startState.facet(mi) != t.state.facet(mi) ? cn.init(t.state) : e.apply(t);
  }
});
let Ep = (e) => {
  let t = setTimeout(
    () => e(),
    500
    /* Work.MaxPause */
  );
  return () => clearTimeout(t);
};
typeof requestIdleCallback < "u" && (Ep = (e) => {
  let t = -1, r = setTimeout(
    () => {
      t = requestIdleCallback(e, {
        timeout: 500 - 100
        /* Work.MinPause */
      });
    },
    100
    /* Work.MinPause */
  );
  return () => t < 0 ? clearTimeout(r) : cancelIdleCallback(t);
});
const Ro = typeof navigator < "u" && (!((mo = navigator.scheduling) === null || mo === void 0) && mo.isInputPending) ? () => navigator.scheduling.isInputPending() : null, DS = /* @__PURE__ */ gi.fromClass(class {
  constructor(t) {
    this.view = t, this.working = null, this.workScheduled = 0, this.chunkEnd = -1, this.chunkBudget = -1, this.work = this.work.bind(this), this.scheduleWork();
  }
  update(t) {
    let r = this.view.state.field(vr.state).context;
    (r.updateViewport(t.view.viewport) || this.view.viewport.to > r.treeLen) && this.scheduleWork(), (t.docChanged || t.selectionSet) && (this.view.hasFocus && (this.chunkBudget += 50), this.scheduleWork()), this.checkAsyncSchedule(r);
  }
  scheduleWork() {
    if (this.working)
      return;
    let { state: t } = this.view, r = t.field(vr.state);
    (r.tree != r.context.tree || !r.context.isDone(t.doc.length)) && (this.working = Ep(this.work));
  }
  work(t) {
    this.working = null;
    let r = Date.now();
    if (this.chunkEnd < r && (this.chunkEnd < 0 || this.view.hasFocus) && (this.chunkEnd = r + 3e4, this.chunkBudget = 3e3), this.chunkBudget <= 0)
      return;
    let { state: i, viewport: { to: n } } = this.view, a = i.field(vr.state);
    if (a.tree == a.context.tree && a.context.isDone(
      n + 1e5
      /* Work.MaxParseAhead */
    ))
      return;
    let s = Date.now() + Math.min(this.chunkBudget, 100, t && !Ro ? Math.max(25, t.timeRemaining() - 5) : 1e9), o = a.context.treeLen < n && i.doc.length > n + 1e3, l = a.context.work(() => Ro && Ro() || Date.now() > s, n + (o ? 0 : 1e5));
    this.chunkBudget -= Date.now() - r, (l || this.chunkBudget <= 0) && (a.context.takeTree(), this.view.dispatch({ effects: vr.setState.of(new cn(a.context)) })), this.chunkBudget > 0 && !(l && !o) && this.scheduleWork(), this.checkAsyncSchedule(a.context);
  }
  checkAsyncSchedule(t) {
    t.scheduleOn && (this.workScheduled++, t.scheduleOn.then(() => this.scheduleWork()).catch((r) => Zn(this.view.state, r)).then(() => this.workScheduled--), t.scheduleOn = null);
  }
  destroy() {
    this.working && this.working();
  }
  isWorking() {
    return !!(this.working || this.workScheduled > 0);
  }
}, {
  eventHandlers: { focus() {
    this.scheduleWork();
  } }
}), mi = /* @__PURE__ */ jt.define({
  combine(e) {
    return e.length ? e[0] : null;
  },
  enables: (e) => [
    vr.state,
    DS,
    we.contentAttributes.compute([e], (t) => {
      let r = t.facet(e);
      return r && r.name ? { "data-language": r.name } : {};
    })
  ]
});
class Ta {
  /**
  Create a language support object.
  */
  constructor(t, r = []) {
    this.language = t, this.support = r, this.extension = [t, r];
  }
}
const US = /* @__PURE__ */ jt.define(), Vs = /* @__PURE__ */ jt.define({
  combine: (e) => {
    if (!e.length)
      return "  ";
    let t = e[0];
    if (!t || /\S/.test(t) || Array.from(t).some((r) => r != t[0]))
      throw new Error("Invalid indent unit: " + JSON.stringify(e[0]));
    return t;
  }
});
function cs(e) {
  let t = e.facet(Vs);
  return t.charCodeAt(0) == 9 ? e.tabSize * t.length : t.length;
}
function Kn(e, t) {
  let r = "", i = e.tabSize, n = e.facet(Vs)[0];
  if (n == "	") {
    for (; t >= i; )
      r += "	", t -= i;
    n = " ";
  }
  for (let a = 0; a < t; a++)
    r += n;
  return r;
}
function bu(e, t) {
  e instanceof Qi && (e = new Bs(e));
  for (let i of e.state.facet(US)) {
    let n = i(e, t);
    if (n !== void 0)
      return n;
  }
  let r = Ot(e.state);
  return r.length >= t ? wS(e, r, t) : null;
}
class Bs {
  /**
  Create an indent context.
  */
  constructor(t, r = {}) {
    this.state = t, this.options = r, this.unit = cs(t);
  }
  /**
  Get a description of the line at the given position, taking
  [simulated line
  breaks](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
  into account. If there is such a break at `pos`, the `bias`
  argument determines whether the part of the line line before or
  after the break is used.
  */
  lineAt(t, r = 1) {
    let i = this.state.doc.lineAt(t), { simulateBreak: n, simulateDoubleBreak: a } = this.options;
    return n != null && n >= i.from && n <= i.to ? a && n == t ? { text: "", from: t } : (r < 0 ? n < t : n <= t) ? { text: i.text.slice(n - i.from), from: n } : { text: i.text.slice(0, n - i.from), from: i.from } : i;
  }
  /**
  Get the text directly after `pos`, either the entire line
  or the next 100 characters, whichever is shorter.
  */
  textAfterPos(t, r = 1) {
    if (this.options.simulateDoubleBreak && t == this.options.simulateBreak)
      return "";
    let { text: i, from: n } = this.lineAt(t, r);
    return i.slice(t - n, Math.min(i.length, t + 100 - n));
  }
  /**
  Find the column for the given position.
  */
  column(t, r = 1) {
    let { text: i, from: n } = this.lineAt(t, r), a = this.countColumn(i, t - n), s = this.options.overrideIndentation ? this.options.overrideIndentation(n) : -1;
    return s > -1 && (a += s - this.countColumn(i, i.search(/\S|$/))), a;
  }
  /**
  Find the column position (taking tabs into account) of the given
  position in the given string.
  */
  countColumn(t, r = t.length) {
    return Qs(t, this.state.tabSize, r);
  }
  /**
  Find the indentation column of the line at the given point.
  */
  lineIndent(t, r = 1) {
    let { text: i, from: n } = this.lineAt(t, r), a = this.options.overrideIndentation;
    if (a) {
      let s = a(n);
      if (s > -1)
        return s;
    }
    return this.countColumn(i, i.search(/\S|$/));
  }
  /**
  Returns the [simulated line
  break](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
  for this context, if any.
  */
  get simulatedBreak() {
    return this.options.simulateBreak || null;
  }
}
const gn = /* @__PURE__ */ new Le();
function wS(e, t, r) {
  let i = t.resolveStack(r), n = i.node.enterUnfinishedNodesBefore(r);
  if (n != i.node) {
    let a = [];
    for (let s = n; s != i.node; s = s.parent)
      a.push(s);
    for (let s = a.length - 1; s >= 0; s--)
      i = { node: a[s], next: i };
  }
  return dp(i, e, r);
}
function dp(e, t, r) {
  for (let i = e; i; i = i.next) {
    let n = kS(i.node);
    if (n)
      return n(vu.create(t, r, i));
  }
  return 0;
}
function MS(e) {
  return e.pos == e.options.simulateBreak && e.options.simulateDoubleBreak;
}
function kS(e) {
  let t = e.type.prop(gn);
  if (t)
    return t;
  let r = e.firstChild, i;
  if (r && (i = r.type.prop(Le.closedBy))) {
    let n = e.lastChild, a = n && i.indexOf(n.name) > -1;
    return (s) => Tp(s, !0, 1, void 0, a && !MS(s) ? n.from : void 0);
  }
  return e.parent == null ? QS : null;
}
function QS() {
  return 0;
}
class vu extends Bs {
  constructor(t, r, i) {
    super(t.state, t.options), this.base = t, this.pos = r, this.context = i;
  }
  /**
  The syntax tree node to which the indentation strategy
  applies.
  */
  get node() {
    return this.context.node;
  }
  /**
  @internal
  */
  static create(t, r, i) {
    return new vu(t, r, i);
  }
  /**
  Get the text directly after `this.pos`, either the entire line
  or the next 100 characters, whichever is shorter.
  */
  get textAfter() {
    return this.textAfterPos(this.pos);
  }
  /**
  Get the indentation at the reference line for `this.node`, which
  is the line on which it starts, unless there is a node that is
  _not_ a parent of this node covering the start of that line. If
  so, the line at the start of that node is tried, again skipping
  on if it is covered by another such node.
  */
  get baseIndent() {
    return this.baseIndentFor(this.node);
  }
  /**
  Get the indentation for the reference line of the given node
  (see [`baseIndent`](https://codemirror.net/6/docs/ref/#language.TreeIndentContext.baseIndent)).
  */
  baseIndentFor(t) {
    let r = this.state.doc.lineAt(t.from);
    for (; ; ) {
      let i = t.resolve(r.from);
      for (; i.parent && i.parent.from == i.from; )
        i = i.parent;
      if (GS(i, t))
        break;
      r = this.state.doc.lineAt(i.from);
    }
    return this.lineIndent(r.from);
  }
  /**
  Continue looking for indentations in the node's parent nodes,
  and return the result of that.
  */
  continue() {
    return dp(this.context.next, this.base, this.pos);
  }
}
function GS(e, t) {
  for (let r = t; r; r = r.parent)
    if (e == r)
      return !0;
  return !1;
}
function VS(e) {
  let t = e.node, r = t.childAfter(t.from), i = t.lastChild;
  if (!r)
    return null;
  let n = e.options.simulateBreak, a = e.state.doc.lineAt(r.from), s = n == null || n <= a.from ? a.to : Math.min(a.to, n);
  for (let o = r.to; ; ) {
    let l = t.childAfter(o);
    if (!l || l == i)
      return null;
    if (!l.type.isSkipped)
      return l.from < s ? r : null;
    o = l.to;
  }
}
function BS({ closing: e, align: t = !0, units: r = 1 }) {
  return (i) => Tp(i, t, r, e);
}
function Tp(e, t, r, i, n) {
  let a = e.textAfter, s = a.match(/^\s*/)[0].length, o = i && a.slice(s, s + i.length) == i || n == e.pos + s, l = t ? VS(e) : null;
  return l ? o ? e.column(l.from) : e.column(l.to) : e.baseIndent + (o ? 0 : e.unit * r);
}
const $S = (e) => e.baseIndent;
function Gi({ except: e, units: t = 1 } = {}) {
  return (r) => {
    let i = e && e.test(r.textAfter);
    return r.baseIndent + (i ? 0 : t * r.unit);
  };
}
const YS = 200;
function FS() {
  return Qi.transactionFilter.of((e) => {
    if (!e.docChanged || !e.isUserEvent("input.type") && !e.isUserEvent("input.complete"))
      return e;
    let t = e.startState.languageDataAt("indentOnInput", e.startState.selection.main.head);
    if (!t.length)
      return e;
    let r = e.newDoc, { head: i } = e.newSelection.main, n = r.lineAt(i);
    if (i > n.from + YS)
      return e;
    let a = r.sliceString(n.from, i);
    if (!t.some((c) => c.test(a)))
      return e;
    let { state: s } = e, o = -1, l = [];
    for (let { head: c } of s.selection.ranges) {
      let f = s.doc.lineAt(c);
      if (f.from == o)
        continue;
      o = f.from;
      let p = bu(s, f.from);
      if (p == null)
        continue;
      let O = /^\s*/.exec(f.text)[0], d = Kn(s, p);
      O != d && l.push({ from: f.from, to: f.from + O.length, insert: d });
    }
    return l.length ? [e, { changes: l, sequential: !0 }] : e;
  });
}
const WS = /* @__PURE__ */ jt.define(), yn = /* @__PURE__ */ new Le();
function Cu(e) {
  let t = e.firstChild, r = e.lastChild;
  return t && t.to < r.from ? { from: t.to, to: r.type.isError ? e.to : r.from } : null;
}
function XS(e, t, r) {
  let i = Ot(e);
  if (i.length < r)
    return null;
  let n = i.resolveStack(r, 1), a = null;
  for (let s = n; s; s = s.next) {
    let o = s.node;
    if (o.to <= r || o.from > r)
      continue;
    if (a && o.from < t)
      break;
    let l = o.type.prop(yn);
    if (l && (o.to < i.length - 50 || i.length == e.doc.length || !jS(o))) {
      let c = l(o, e);
      c && c.from <= r && c.from >= t && c.to > r && (a = c);
    }
  }
  return a;
}
function jS(e) {
  let t = e.lastChild;
  return t && t.to == e.to && t.type.isError;
}
function fs(e, t, r) {
  for (let i of e.facet(WS)) {
    let n = i(e, t, r);
    if (n)
      return n;
  }
  return XS(e, t, r);
}
function Sp(e, t) {
  let r = t.mapPos(e.from, 1), i = t.mapPos(e.to, -1);
  return r >= i ? void 0 : { from: r, to: i };
}
const $s = /* @__PURE__ */ Tt.define({ map: Sp }), Sa = /* @__PURE__ */ Tt.define({ map: Sp });
function mp(e) {
  let t = [];
  for (let { head: r } of e.state.selection.ranges)
    t.some((i) => i.from <= r && i.to >= r) || t.push(e.lineBlockAt(r));
  return t;
}
const Yi = /* @__PURE__ */ Xr.define({
  create() {
    return Pe.none;
  },
  update(e, t) {
    e = e.map(t.changes);
    for (let r of t.effects)
      if (r.is($s) && !ZS(e, r.value.from, r.value.to)) {
        let { preparePlaceholder: i } = t.state.facet(Lu), n = i ? Pe.replace({ widget: new tm(i(t.state, r.value)) }) : tf;
        e = e.update({ add: [n.range(r.value.from, r.value.to)] });
      } else
        r.is(Sa) && (e = e.update({
          filter: (i, n) => r.value.from != i || r.value.to != n,
          filterFrom: r.value.from,
          filterTo: r.value.to
        }));
    if (t.selection) {
      let r = !1, { head: i } = t.selection.main;
      e.between(i, i, (n, a) => {
        n < i && a > i && (r = !0);
      }), r && (e = e.update({
        filterFrom: i,
        filterTo: i,
        filter: (n, a) => a <= i || n >= i
      }));
    }
    return e;
  },
  provide: (e) => we.decorations.from(e),
  toJSON(e, t) {
    let r = [];
    return e.between(0, t.doc.length, (i, n) => {
      r.push(i, n);
    }), r;
  },
  fromJSON(e) {
    if (!Array.isArray(e) || e.length % 2)
      throw new RangeError("Invalid JSON for fold state");
    let t = [];
    for (let r = 0; r < e.length; ) {
      let i = e[r++], n = e[r++];
      if (typeof i != "number" || typeof n != "number")
        throw new RangeError("Invalid JSON for fold state");
      t.push(tf.range(i, n));
    }
    return Pe.set(t, !0);
  }
});
function hs(e, t, r) {
  var i;
  let n = null;
  return (i = e.field(Yi, !1)) === null || i === void 0 || i.between(t, r, (a, s) => {
    (!n || n.from > a) && (n = { from: a, to: s });
  }), n;
}
function ZS(e, t, r) {
  let i = !1;
  return e.between(t, t, (n, a) => {
    n == t && a == r && (i = !0);
  }), i;
}
function Rp(e, t) {
  return e.field(Yi, !1) ? t : t.concat(Tt.appendConfig.of(xu()));
}
const HS = (e) => {
  for (let t of mp(e)) {
    let r = fs(e.state, t.from, t.to);
    if (r)
      return e.dispatch({ effects: Rp(e.state, [$s.of(r), Ap(e, r)]) }), !0;
  }
  return !1;
}, zS = (e) => {
  if (!e.state.field(Yi, !1))
    return !1;
  let t = [];
  for (let r of mp(e)) {
    let i = hs(e.state, r.from, r.to);
    i && t.push(Sa.of(i), Ap(e, i, !1));
  }
  return t.length && e.dispatch({ effects: t }), t.length > 0;
};
function Ap(e, t, r = !0) {
  let i = e.state.doc.lineAt(t.from).number, n = e.state.doc.lineAt(t.to).number;
  return we.announce.of(`${e.state.phrase(r ? "Folded lines" : "Unfolded lines")} ${i} ${e.state.phrase("to")} ${n}.`);
}
const qS = (e) => {
  let { state: t } = e, r = [];
  for (let i = 0; i < t.doc.length; ) {
    let n = e.lineBlockAt(i), a = fs(t, n.from, n.to);
    a && r.push($s.of(a)), i = (a ? e.lineBlockAt(a.to) : n).to + 1;
  }
  return r.length && e.dispatch({ effects: Rp(e.state, r) }), !!r.length;
}, JS = (e) => {
  let t = e.state.field(Yi, !1);
  if (!t || !t.size)
    return !1;
  let r = [];
  return t.between(0, e.state.doc.length, (i, n) => {
    r.push(Sa.of({ from: i, to: n }));
  }), e.dispatch({ effects: r }), !0;
}, KS = [
  { key: "Ctrl-Shift-[", mac: "Cmd-Alt-[", run: HS },
  { key: "Ctrl-Shift-]", mac: "Cmd-Alt-]", run: zS },
  { key: "Ctrl-Alt-[", run: qS },
  { key: "Ctrl-Alt-]", run: JS }
], em = {
  placeholderDOM: null,
  preparePlaceholder: null,
  placeholderText: "…"
}, Lu = /* @__PURE__ */ jt.define({
  combine(e) {
    return ji(e, em);
  }
});
function xu(e) {
  let t = [Yi, nm];
  return e && t.push(Lu.of(e)), t;
}
function gp(e, t) {
  let { state: r } = e, i = r.facet(Lu), n = (s) => {
    let o = e.lineBlockAt(e.posAtDOM(s.target)), l = hs(e.state, o.from, o.to);
    l && e.dispatch({ effects: Sa.of(l) }), s.preventDefault();
  };
  if (i.placeholderDOM)
    return i.placeholderDOM(e, n, t);
  let a = document.createElement("span");
  return a.textContent = i.placeholderText, a.setAttribute("aria-label", r.phrase("folded code")), a.title = r.phrase("unfold"), a.className = "cm-foldPlaceholder", a.onclick = n, a;
}
const tf = /* @__PURE__ */ Pe.replace({ widget: /* @__PURE__ */ new class extends Gs {
  toDOM(e) {
    return gp(e, null);
  }
}() });
class tm extends Gs {
  constructor(t) {
    super(), this.value = t;
  }
  eq(t) {
    return this.value == t.value;
  }
  toDOM(t) {
    return gp(t, this.value);
  }
}
const rm = {
  openText: "⌄",
  closedText: "›",
  markerDOM: null,
  domEventHandlers: {},
  foldingChanged: () => !1
};
class Ao extends _T {
  constructor(t, r) {
    super(), this.config = t, this.open = r;
  }
  eq(t) {
    return this.config == t.config && this.open == t.open;
  }
  toDOM(t) {
    if (this.config.markerDOM)
      return this.config.markerDOM(this.open);
    let r = document.createElement("span");
    return r.textContent = this.open ? this.config.openText : this.config.closedText, r.title = t.state.phrase(this.open ? "Fold line" : "Unfold line"), r;
  }
}
function im(e = {}) {
  let t = Object.assign(Object.assign({}, rm), e), r = new Ao(t, !0), i = new Ao(t, !1), n = gi.fromClass(class {
    constructor(s) {
      this.from = s.viewport.from, this.markers = this.buildMarkers(s);
    }
    update(s) {
      (s.docChanged || s.viewportChanged || s.startState.facet(mi) != s.state.facet(mi) || s.startState.field(Yi, !1) != s.state.field(Yi, !1) || Ot(s.startState) != Ot(s.state) || t.foldingChanged(s)) && (this.markers = this.buildMarkers(s.view));
    }
    buildMarkers(s) {
      let o = new fu();
      for (let l of s.viewportLineBlocks) {
        let c = hs(s.state, l.from, l.to) ? i : fs(s.state, l.from, l.to) ? r : null;
        c && o.add(l.from, l.from, c);
      }
      return o.finish();
    }
  }), { domEventHandlers: a } = t;
  return [
    n,
    PT({
      class: "cm-foldGutter",
      markers(s) {
        var o;
        return ((o = s.plugin(n)) === null || o === void 0 ? void 0 : o.markers) || tp.empty;
      },
      initialSpacer() {
        return new Ao(t, !1);
      },
      domEventHandlers: Object.assign(Object.assign({}, a), { click: (s, o, l) => {
        if (a.click && a.click(s, o, l))
          return !0;
        let c = hs(s.state, o.from, o.to);
        if (c)
          return s.dispatch({ effects: Sa.of(c) }), !0;
        let f = fs(s.state, o.from, o.to);
        return f ? (s.dispatch({ effects: $s.of(f) }), !0) : !1;
      } })
    }),
    xu()
  ];
}
const nm = /* @__PURE__ */ we.baseTheme({
  ".cm-foldPlaceholder": {
    backgroundColor: "#eee",
    border: "1px solid #ddd",
    color: "#888",
    borderRadius: ".2em",
    margin: "0 1px",
    padding: "0 1px",
    cursor: "pointer"
  },
  ".cm-foldGutter span": {
    padding: "0 1px",
    cursor: "pointer"
  }
});
class Du {
  constructor(t, r) {
    this.specs = t;
    let i;
    function n(o) {
      let l = Gc.newName();
      return (i || (i = /* @__PURE__ */ Object.create(null)))["." + l] = o, l;
    }
    const a = typeof r.all == "string" ? r.all : r.all ? n(r.all) : void 0, s = r.scope;
    this.scope = s instanceof vr ? (o) => o.prop(tn) == s.data : s ? (o) => o == s : void 0, this.style = pp(t.map((o) => ({
      tag: o.tag,
      class: o.class || n(Object.assign({}, o, { tag: null }))
    })), {
      all: a
    }).style, this.module = i ? new Gc(i) : null, this.themeType = r.themeType;
  }
  /**
  Create a highlighter style that associates the given styles to
  the given tags. The specs must be objects that hold a style tag
  or array of tags in their `tag` property, and either a single
  `class` property providing a static CSS class (for highlighter
  that rely on external styling), or a
  [`style-mod`](https://github.com/marijnh/style-mod#documentation)-style
  set of CSS properties (which define the styling for those tags).
  
  The CSS rules created for a highlighter will be emitted in the
  order of the spec's properties. That means that for elements that
  have multiple tags associated with them, styles defined further
  down in the list will have a higher CSS precedence than styles
  defined earlier.
  */
  static define(t, r) {
    return new Du(t, r || {});
  }
}
const am = /* @__PURE__ */ Du.define([
  {
    tag: Q.meta,
    color: "#404740"
  },
  {
    tag: Q.link,
    textDecoration: "underline"
  },
  {
    tag: Q.heading,
    textDecoration: "underline",
    fontWeight: "bold"
  },
  {
    tag: Q.emphasis,
    fontStyle: "italic"
  },
  {
    tag: Q.strong,
    fontWeight: "bold"
  },
  {
    tag: Q.strikethrough,
    textDecoration: "line-through"
  },
  {
    tag: Q.keyword,
    color: "#708"
  },
  {
    tag: [Q.atom, Q.bool, Q.url, Q.contentSeparator, Q.labelName],
    color: "#219"
  },
  {
    tag: [Q.literal, Q.inserted],
    color: "#164"
  },
  {
    tag: [Q.string, Q.deleted],
    color: "#a11"
  },
  {
    tag: [Q.regexp, Q.escape, /* @__PURE__ */ Q.special(Q.string)],
    color: "#e40"
  },
  {
    tag: /* @__PURE__ */ Q.definition(Q.variableName),
    color: "#00f"
  },
  {
    tag: /* @__PURE__ */ Q.local(Q.variableName),
    color: "#30a"
  },
  {
    tag: [Q.typeName, Q.namespace],
    color: "#085"
  },
  {
    tag: Q.className,
    color: "#167"
  },
  {
    tag: [/* @__PURE__ */ Q.special(Q.variableName), Q.macroName],
    color: "#256"
  },
  {
    tag: /* @__PURE__ */ Q.definition(Q.propertyName),
    color: "#00c"
  },
  {
    tag: Q.comment,
    color: "#940"
  },
  {
    tag: Q.invalid,
    color: "#f00"
  }
]), sm = /* @__PURE__ */ we.baseTheme({
  "&.cm-focused .cm-matchingBracket": { backgroundColor: "#328c8252" },
  "&.cm-focused .cm-nonmatchingBracket": { backgroundColor: "#bb555544" }
}), yp = 1e4, Ip = "()[]{}", Np = /* @__PURE__ */ jt.define({
  combine(e) {
    return ji(e, {
      afterCursor: !0,
      brackets: Ip,
      maxScanDistance: yp,
      renderMatch: um
    });
  }
}), om = /* @__PURE__ */ Pe.mark({ class: "cm-matchingBracket" }), lm = /* @__PURE__ */ Pe.mark({ class: "cm-nonmatchingBracket" });
function um(e) {
  let t = [], r = e.matched ? om : lm;
  return t.push(r.range(e.start.from, e.start.to)), e.end && t.push(r.range(e.end.from, e.end.to)), t;
}
const cm = /* @__PURE__ */ Xr.define({
  create() {
    return Pe.none;
  },
  update(e, t) {
    if (!t.docChanged && !t.selection)
      return e;
    let r = [], i = t.state.facet(Np);
    for (let n of t.state.selection.ranges) {
      if (!n.empty)
        continue;
      let a = Gr(t.state, n.head, -1, i) || n.head > 0 && Gr(t.state, n.head - 1, 1, i) || i.afterCursor && (Gr(t.state, n.head, 1, i) || n.head < t.state.doc.length && Gr(t.state, n.head + 1, -1, i));
      a && (r = r.concat(i.renderMatch(a, t.state)));
    }
    return Pe.set(r, !0);
  },
  provide: (e) => we.decorations.from(e)
}), fm = [
  cm,
  sm
];
function hm(e = {}) {
  return [Np.of(e), fm];
}
const Pp = /* @__PURE__ */ new Le();
function nl(e, t, r) {
  let i = e.prop(t < 0 ? Le.openedBy : Le.closedBy);
  if (i)
    return i;
  if (e.name.length == 1) {
    let n = r.indexOf(e.name);
    if (n > -1 && n % 2 == (t < 0 ? 1 : 0))
      return [r[n + t]];
  }
  return null;
}
function al(e) {
  let t = e.type.prop(Pp);
  return t ? t(e.node) : e;
}
function Gr(e, t, r, i = {}) {
  let n = i.maxScanDistance || yp, a = i.brackets || Ip, s = Ot(e), o = s.resolveInner(t, r);
  for (let l = o; l; l = l.parent) {
    let c = nl(l.type, r, a);
    if (c && l.from < l.to) {
      let f = al(l);
      if (f && (r > 0 ? t >= f.from && t < f.to : t > f.from && t <= f.to))
        return pm(e, t, r, l, f, c, a);
    }
  }
  return Om(e, t, r, s, o.type, n, a);
}
function pm(e, t, r, i, n, a, s) {
  let o = i.parent, l = { from: n.from, to: n.to }, c = 0, f = o == null ? void 0 : o.cursor();
  if (f && (r < 0 ? f.childBefore(i.from) : f.childAfter(i.to)))
    do
      if (r < 0 ? f.to <= i.from : f.from >= i.to) {
        if (c == 0 && a.indexOf(f.type.name) > -1 && f.from < f.to) {
          let p = al(f);
          return { start: l, end: p ? { from: p.from, to: p.to } : void 0, matched: !0 };
        } else if (nl(f.type, r, s))
          c++;
        else if (nl(f.type, -r, s)) {
          if (c == 0) {
            let p = al(f);
            return {
              start: l,
              end: p && p.from < p.to ? { from: p.from, to: p.to } : void 0,
              matched: !1
            };
          }
          c--;
        }
      }
    while (r < 0 ? f.prevSibling() : f.nextSibling());
  return { start: l, matched: !1 };
}
function Om(e, t, r, i, n, a, s) {
  let o = r < 0 ? e.sliceDoc(t - 1, t) : e.sliceDoc(t, t + 1), l = s.indexOf(o);
  if (l < 0 || l % 2 == 0 != r > 0)
    return null;
  let c = { from: r < 0 ? t - 1 : t, to: r > 0 ? t + 1 : t }, f = e.doc.iterRange(t, r > 0 ? e.doc.length : 0), p = 0;
  for (let O = 0; !f.next().done && O <= a; ) {
    let d = f.value;
    r < 0 && (O += d.length);
    let g = t + O * r;
    for (let L = r > 0 ? 0 : d.length - 1, D = r > 0 ? d.length : -1; L != D; L += r) {
      let W = s.indexOf(d[L]);
      if (!(W < 0 || i.resolveInner(g + L, 1).type != n))
        if (W % 2 == 0 == r > 0)
          p++;
        else {
          if (p == 1)
            return { start: c, end: { from: g + L, to: g + L + 1 }, matched: W >> 1 == l >> 1 };
          p--;
        }
    }
    r > 0 && (O += d.length);
  }
  return f.done ? { start: c, matched: !1 } : null;
}
const Em = /* @__PURE__ */ Object.create(null), rf = [or.none], nf = [], af = /* @__PURE__ */ Object.create(null), dm = /* @__PURE__ */ Object.create(null);
for (let [e, t] of [
  ["variable", "variableName"],
  ["variable-2", "variableName.special"],
  ["string-2", "string.special"],
  ["def", "variableName.definition"],
  ["tag", "tagName"],
  ["attribute", "attributeName"],
  ["type", "typeName"],
  ["builtin", "variableName.standard"],
  ["qualifier", "modifier"],
  ["error", "invalid"],
  ["header", "heading"],
  ["property", "propertyName"]
])
  dm[e] = /* @__PURE__ */ Tm(Em, t);
function go(e, t) {
  nf.indexOf(e) > -1 || (nf.push(e), console.warn(t));
}
function Tm(e, t) {
  let r = [];
  for (let o of t.split(" ")) {
    let l = [];
    for (let c of o.split(".")) {
      let f = e[c] || Q[c];
      f ? typeof f == "function" ? l.length ? l = l.map(f) : go(c, `Modifier ${c} used at start of tag`) : l.length ? go(c, `Tag ${c} used as modifier`) : l = Array.isArray(f) ? f : [f] : go(c, `Unknown highlighting tag ${c}`);
    }
    for (let c of l)
      r.push(c);
  }
  if (!r.length)
    return 0;
  let i = t.replace(/ /g, "_"), n = i + " " + r.map((o) => o.id), a = af[n];
  if (a)
    return a.id;
  let s = af[n] = or.define({
    id: rf.length,
    name: i,
    props: [An({ [i]: r })]
  });
  return rf.push(s), s.id;
}
as.RTL, as.LTR;
class _p {
  /**
  Create a new completion context. (Mostly useful for testing
  completion sources—in the editor, the extension will create
  these for you.)
  */
  constructor(t, r, i) {
    this.state = t, this.pos = r, this.explicit = i, this.abortListeners = [];
  }
  /**
  Get the extent, content, and (if there is a token) type of the
  token before `this.pos`.
  */
  tokenBefore(t) {
    let r = Ot(this.state).resolveInner(this.pos, -1);
    for (; r && t.indexOf(r.name) < 0; )
      r = r.parent;
    return r ? {
      from: r.from,
      to: this.pos,
      text: this.state.sliceDoc(r.from, this.pos),
      type: r.type
    } : null;
  }
  /**
  Get the match of the given expression directly before the
  cursor.
  */
  matchBefore(t) {
    let r = this.state.doc.lineAt(this.pos), i = Math.max(r.from, this.pos - 250), n = r.text.slice(i - r.from, this.pos - r.from), a = n.search(bp(t, !1));
    return a < 0 ? null : { from: i + a, to: this.pos, text: n.slice(a) };
  }
  /**
  Yields true when the query has been aborted. Can be useful in
  asynchronous queries to avoid doing work that will be ignored.
  */
  get aborted() {
    return this.abortListeners == null;
  }
  /**
  Allows you to register abort handlers, which will be called when
  the query is
  [aborted](https://codemirror.net/6/docs/ref/#autocomplete.CompletionContext.aborted).
  */
  addEventListener(t, r) {
    t == "abort" && this.abortListeners && this.abortListeners.push(r);
  }
}
function sf(e) {
  let t = Object.keys(e).join(""), r = /\w/.test(t);
  return r && (t = t.replace(/\w/g, "")), `[${r ? "\\w" : ""}${t.replace(/[^\w\s]/g, "\\$&")}]`;
}
function Sm(e) {
  let t = /* @__PURE__ */ Object.create(null), r = /* @__PURE__ */ Object.create(null);
  for (let { label: n } of e) {
    t[n[0]] = !0;
    for (let a = 1; a < n.length; a++)
      r[n[a]] = !0;
  }
  let i = sf(t) + sf(r) + "*$";
  return [new RegExp("^" + i), new RegExp(i)];
}
function Ys(e) {
  let t = e.map((n) => typeof n == "string" ? { label: n } : n), [r, i] = t.every((n) => /^\w+$/.test(n.label)) ? [/\w*$/, /\w+$/] : Sm(t);
  return (n) => {
    let a = n.matchBefore(i);
    return a || n.explicit ? { from: a ? a.from : n.pos, options: t, validFor: r } : null;
  };
}
function Uu(e, t) {
  return (r) => {
    for (let i = Ot(r.state).resolveInner(r.pos, -1); i; i = i.parent) {
      if (e.indexOf(i.name) > -1)
        return null;
      if (i.type.isTop)
        break;
    }
    return t(r);
  };
}
class of {
  constructor(t, r, i, n) {
    this.completion = t, this.source = r, this.match = i, this.score = n;
  }
}
function Oi(e) {
  return e.selection.main.from;
}
function bp(e, t) {
  var r;
  let { source: i } = e, n = t && i[0] != "^", a = i[i.length - 1] != "$";
  return !n && !a ? e : new RegExp(`${n ? "^" : ""}(?:${i})${a ? "$" : ""}`, (r = e.flags) !== null && r !== void 0 ? r : e.ignoreCase ? "i" : "");
}
const wu = /* @__PURE__ */ pu.define();
function mm(e, t, r, i) {
  let { main: n } = e.selection, a = r - n.from, s = i - n.from;
  return Object.assign(Object.assign({}, e.changeByRange((o) => o != n && r != i && e.sliceDoc(o.from + a, o.from + s) != e.sliceDoc(r, i) ? { range: o } : {
    changes: { from: o.from + a, to: i == n.from ? o.to : o.from + s, insert: t },
    range: Re.cursor(o.from + a + t.length)
  })), { scrollIntoView: !0, userEvent: "input.complete" });
}
const lf = /* @__PURE__ */ new WeakMap();
function Rm(e) {
  if (!Array.isArray(e))
    return e;
  let t = lf.get(e);
  return t || lf.set(e, t = Ys(e)), t;
}
const ps = /* @__PURE__ */ Tt.define(), ea = /* @__PURE__ */ Tt.define();
class Am {
  constructor(t) {
    this.pattern = t, this.chars = [], this.folded = [], this.any = [], this.precise = [], this.byWord = [], this.score = 0, this.matched = [];
    for (let r = 0; r < t.length; ) {
      let i = dr(t, r), n = qr(i);
      this.chars.push(i);
      let a = t.slice(r, r + n), s = a.toUpperCase();
      this.folded.push(dr(s == a ? a.toLowerCase() : s, 0)), r += n;
    }
    this.astral = t.length != this.chars.length;
  }
  ret(t, r) {
    return this.score = t, this.matched = r, this;
  }
  // Matches a given word (completion) against the pattern (input).
  // Will return a boolean indicating whether there was a match and,
  // on success, set `this.score` to the score, `this.matched` to an
  // array of `from, to` pairs indicating the matched parts of `word`.
  //
  // The score is a number that is more negative the worse the match
  // is. See `Penalty` above.
  match(t) {
    if (this.pattern.length == 0)
      return this.ret(-100, []);
    if (t.length < this.pattern.length)
      return null;
    let { chars: r, folded: i, any: n, precise: a, byWord: s } = this;
    if (r.length == 1) {
      let x = dr(t, 0), V = qr(x), _ = V == t.length ? 0 : -100;
      if (x != r[0])
        if (x == i[0])
          _ += -200;
        else
          return null;
      return this.ret(_, [0, V]);
    }
    let o = t.indexOf(this.pattern);
    if (o == 0)
      return this.ret(t.length == this.pattern.length ? 0 : -100, [0, this.pattern.length]);
    let l = r.length, c = 0;
    if (o < 0) {
      for (let x = 0, V = Math.min(t.length, 200); x < V && c < l; ) {
        let _ = dr(t, x);
        (_ == r[c] || _ == i[c]) && (n[c++] = x), x += qr(_);
      }
      if (c < l)
        return null;
    }
    let f = 0, p = 0, O = !1, d = 0, g = -1, L = -1, D = /[a-z]/.test(t), W = !0;
    for (let x = 0, V = Math.min(t.length, 200), _ = 0; x < V && p < l; ) {
      let $ = dr(t, x);
      o < 0 && (f < l && $ == r[f] && (a[f++] = x), d < l && ($ == r[d] || $ == i[d] ? (d == 0 && (g = x), L = x + 1, d++) : d = 0));
      let z, F = $ < 255 ? $ >= 48 && $ <= 57 || $ >= 97 && $ <= 122 ? 2 : $ >= 65 && $ <= 90 ? 1 : 0 : (z = hu($)) != z.toLowerCase() ? 1 : z != z.toUpperCase() ? 2 : 0;
      (!x || F == 1 && D || _ == 0 && F != 0) && (r[p] == $ || i[p] == $ && (O = !0) ? s[p++] = x : s.length && (W = !1)), _ = F, x += qr($);
    }
    return p == l && s[0] == 0 && W ? this.result(-100 + (O ? -200 : 0), s, t) : d == l && g == 0 ? this.ret(-200 - t.length + (L == t.length ? 0 : -100), [0, L]) : o > -1 ? this.ret(-700 - t.length, [o, o + this.pattern.length]) : d == l ? this.ret(-200 + -700 - t.length, [g, L]) : p == l ? this.result(-100 + (O ? -200 : 0) + -700 + (W ? 0 : -1100), s, t) : r.length == 2 ? null : this.result((n[0] ? -700 : 0) + -200 + -1100, n, t);
  }
  result(t, r, i) {
    let n = [], a = 0;
    for (let s of r) {
      let o = s + (this.astral ? qr(dr(i, s)) : 1);
      a && n[a - 1] == s ? n[a - 1] = o : (n[a++] = s, n[a++] = o);
    }
    return this.ret(t - i.length, n);
  }
}
class gm {
  constructor(t) {
    this.pattern = t, this.matched = [], this.score = 0, this.folded = t.toLowerCase();
  }
  match(t) {
    if (t.length < this.pattern.length)
      return null;
    let r = t.slice(0, this.pattern.length), i = r == this.pattern ? 0 : r.toLowerCase() == this.folded ? -200 : null;
    return i == null ? null : (this.matched = [0, r.length], this.score = i + (t.length == this.pattern.length ? 0 : -100), this);
  }
}
const Qt = /* @__PURE__ */ jt.define({
  combine(e) {
    return ji(e, {
      activateOnTyping: !0,
      activateOnCompletion: () => !1,
      activateOnTypingDelay: 100,
      selectOnOpen: !0,
      override: null,
      closeOnBlur: !0,
      maxRenderedOptions: 100,
      defaultKeymap: !0,
      tooltipClass: () => "",
      optionClass: () => "",
      aboveCursor: !1,
      icons: !0,
      addToOptions: [],
      positionInfo: ym,
      filterStrict: !1,
      compareCompletions: (t, r) => t.label.localeCompare(r.label),
      interactionDelay: 75,
      updateSyncTime: 100
    }, {
      defaultKeymap: (t, r) => t && r,
      closeOnBlur: (t, r) => t && r,
      icons: (t, r) => t && r,
      tooltipClass: (t, r) => (i) => uf(t(i), r(i)),
      optionClass: (t, r) => (i) => uf(t(i), r(i)),
      addToOptions: (t, r) => t.concat(r),
      filterStrict: (t, r) => t || r
    });
  }
});
function uf(e, t) {
  return e ? t ? e + " " + t : e : t;
}
function ym(e, t, r, i, n, a) {
  let s = e.textDirection == as.RTL, o = s, l = !1, c = "top", f, p, O = t.left - n.left, d = n.right - t.right, g = i.right - i.left, L = i.bottom - i.top;
  if (o && O < Math.min(g, d) ? o = !1 : !o && d < Math.min(g, O) && (o = !0), g <= (o ? O : d))
    f = Math.max(n.top, Math.min(r.top, n.bottom - L)) - t.top, p = Math.min(400, o ? O : d);
  else {
    l = !0, p = Math.min(
      400,
      (s ? t.right : n.right - t.left) - 30
      /* Info.Margin */
    );
    let x = n.bottom - t.bottom;
    x >= L || x > t.top ? f = r.bottom - t.top : (c = "bottom", f = t.bottom - r.top);
  }
  let D = (t.bottom - t.top) / a.offsetHeight, W = (t.right - t.left) / a.offsetWidth;
  return {
    style: `${c}: ${f / D}px; max-width: ${p / W}px`,
    class: "cm-completionInfo-" + (l ? s ? "left-narrow" : "right-narrow" : o ? "left" : "right")
  };
}
function Im(e) {
  let t = e.addToOptions.slice();
  return e.icons && t.push({
    render(r) {
      let i = document.createElement("div");
      return i.classList.add("cm-completionIcon"), r.type && i.classList.add(...r.type.split(/\s+/g).map((n) => "cm-completionIcon-" + n)), i.setAttribute("aria-hidden", "true"), i;
    },
    position: 20
  }), t.push({
    render(r, i, n, a) {
      let s = document.createElement("span");
      s.className = "cm-completionLabel";
      let o = r.displayLabel || r.label, l = 0;
      for (let c = 0; c < a.length; ) {
        let f = a[c++], p = a[c++];
        f > l && s.appendChild(document.createTextNode(o.slice(l, f)));
        let O = s.appendChild(document.createElement("span"));
        O.appendChild(document.createTextNode(o.slice(f, p))), O.className = "cm-completionMatchedText", l = p;
      }
      return l < o.length && s.appendChild(document.createTextNode(o.slice(l))), s;
    },
    position: 50
  }, {
    render(r) {
      if (!r.detail)
        return null;
      let i = document.createElement("span");
      return i.className = "cm-completionDetail", i.textContent = r.detail, i;
    },
    position: 80
  }), t.sort((r, i) => r.position - i.position).map((r) => r.render);
}
function yo(e, t, r) {
  if (e <= r)
    return { from: 0, to: e };
  if (t < 0 && (t = 0), t <= e >> 1) {
    let n = Math.floor(t / r);
    return { from: n * r, to: (n + 1) * r };
  }
  let i = Math.floor((e - t) / r);
  return { from: e - (i + 1) * r, to: e - i * r };
}
class Nm {
  constructor(t, r, i) {
    this.view = t, this.stateField = r, this.applyCompletion = i, this.info = null, this.infoDestroy = null, this.placeInfoReq = {
      read: () => this.measureInfo(),
      write: (l) => this.placeInfo(l),
      key: this
    }, this.space = null, this.currentClass = "";
    let n = t.state.field(r), { options: a, selected: s } = n.open, o = t.state.facet(Qt);
    this.optionContent = Im(o), this.optionClass = o.optionClass, this.tooltipClass = o.tooltipClass, this.range = yo(a.length, s, o.maxRenderedOptions), this.dom = document.createElement("div"), this.dom.className = "cm-tooltip-autocomplete", this.updateTooltipClass(t.state), this.dom.addEventListener("mousedown", (l) => {
      let { options: c } = t.state.field(r).open;
      for (let f = l.target, p; f && f != this.dom; f = f.parentNode)
        if (f.nodeName == "LI" && (p = /-(\d+)$/.exec(f.id)) && +p[1] < c.length) {
          this.applyCompletion(t, c[+p[1]]), l.preventDefault();
          return;
        }
    }), this.dom.addEventListener("focusout", (l) => {
      let c = t.state.field(this.stateField, !1);
      c && c.tooltip && t.state.facet(Qt).closeOnBlur && l.relatedTarget != t.contentDOM && t.dispatch({ effects: ea.of(null) });
    }), this.showOptions(a, n.id);
  }
  mount() {
    this.updateSel();
  }
  showOptions(t, r) {
    this.list && this.list.remove(), this.list = this.dom.appendChild(this.createListBox(t, r, this.range)), this.list.addEventListener("scroll", () => {
      this.info && this.view.requestMeasure(this.placeInfoReq);
    });
  }
  update(t) {
    var r;
    let i = t.state.field(this.stateField), n = t.startState.field(this.stateField);
    if (this.updateTooltipClass(t.state), i != n) {
      let { options: a, selected: s, disabled: o } = i.open;
      (!n.open || n.open.options != a) && (this.range = yo(a.length, s, t.state.facet(Qt).maxRenderedOptions), this.showOptions(a, i.id)), this.updateSel(), o != ((r = n.open) === null || r === void 0 ? void 0 : r.disabled) && this.dom.classList.toggle("cm-tooltip-autocomplete-disabled", !!o);
    }
  }
  updateTooltipClass(t) {
    let r = this.tooltipClass(t);
    if (r != this.currentClass) {
      for (let i of this.currentClass.split(" "))
        i && this.dom.classList.remove(i);
      for (let i of r.split(" "))
        i && this.dom.classList.add(i);
      this.currentClass = r;
    }
  }
  positioned(t) {
    this.space = t, this.info && this.view.requestMeasure(this.placeInfoReq);
  }
  updateSel() {
    let t = this.view.state.field(this.stateField), r = t.open;
    if ((r.selected > -1 && r.selected < this.range.from || r.selected >= this.range.to) && (this.range = yo(r.options.length, r.selected, this.view.state.facet(Qt).maxRenderedOptions), this.showOptions(r.options, t.id)), this.updateSelectedOption(r.selected)) {
      this.destroyInfo();
      let { completion: i } = r.options[r.selected], { info: n } = i;
      if (!n)
        return;
      let a = typeof n == "string" ? document.createTextNode(n) : n(i);
      if (!a)
        return;
      "then" in a ? a.then((s) => {
        s && this.view.state.field(this.stateField, !1) == t && this.addInfoPane(s, i);
      }).catch((s) => Zn(this.view.state, s, "completion info")) : this.addInfoPane(a, i);
    }
  }
  addInfoPane(t, r) {
    this.destroyInfo();
    let i = this.info = document.createElement("div");
    if (i.className = "cm-tooltip cm-completionInfo", t.nodeType != null)
      i.appendChild(t), this.infoDestroy = null;
    else {
      let { dom: n, destroy: a } = t;
      i.appendChild(n), this.infoDestroy = a || null;
    }
    this.dom.appendChild(i), this.view.requestMeasure(this.placeInfoReq);
  }
  updateSelectedOption(t) {
    let r = null;
    for (let i = this.list.firstChild, n = this.range.from; i; i = i.nextSibling, n++)
      i.nodeName != "LI" || !i.id ? n-- : n == t ? i.hasAttribute("aria-selected") || (i.setAttribute("aria-selected", "true"), r = i) : i.hasAttribute("aria-selected") && i.removeAttribute("aria-selected");
    return r && _m(this.list, r), r;
  }
  measureInfo() {
    let t = this.dom.querySelector("[aria-selected]");
    if (!t || !this.info)
      return null;
    let r = this.dom.getBoundingClientRect(), i = this.info.getBoundingClientRect(), n = t.getBoundingClientRect(), a = this.space;
    if (!a) {
      let s = this.dom.ownerDocument.defaultView || window;
      a = { left: 0, top: 0, right: s.innerWidth, bottom: s.innerHeight };
    }
    return n.top > Math.min(a.bottom, r.bottom) - 10 || n.bottom < Math.max(a.top, r.top) + 10 ? null : this.view.state.facet(Qt).positionInfo(this.view, r, n, i, a, this.dom);
  }
  placeInfo(t) {
    this.info && (t ? (t.style && (this.info.style.cssText = t.style), this.info.className = "cm-tooltip cm-completionInfo " + (t.class || "")) : this.info.style.cssText = "top: -1e6px");
  }
  createListBox(t, r, i) {
    const n = document.createElement("ul");
    n.id = r, n.setAttribute("role", "listbox"), n.setAttribute("aria-expanded", "true"), n.setAttribute("aria-label", this.view.state.phrase("Completions"));
    let a = null;
    for (let s = i.from; s < i.to; s++) {
      let { completion: o, match: l } = t[s], { section: c } = o;
      if (c) {
        let O = typeof c == "string" ? c : c.name;
        if (O != a && (s > i.from || i.from == 0))
          if (a = O, typeof c != "string" && c.header)
            n.appendChild(c.header(c));
          else {
            let d = n.appendChild(document.createElement("completion-section"));
            d.textContent = O;
          }
      }
      const f = n.appendChild(document.createElement("li"));
      f.id = r + "-" + s, f.setAttribute("role", "option");
      let p = this.optionClass(o);
      p && (f.className = p);
      for (let O of this.optionContent) {
        let d = O(o, this.view.state, this.view, l);
        d && f.appendChild(d);
      }
    }
    return i.from && n.classList.add("cm-completionListIncompleteTop"), i.to < t.length && n.classList.add("cm-completionListIncompleteBottom"), n;
  }
  destroyInfo() {
    this.info && (this.infoDestroy && this.infoDestroy(), this.info.remove(), this.info = null);
  }
  destroy() {
    this.destroyInfo();
  }
}
function Pm(e, t) {
  return (r) => new Nm(r, e, t);
}
function _m(e, t) {
  let r = e.getBoundingClientRect(), i = t.getBoundingClientRect(), n = r.height / e.offsetHeight;
  i.top < r.top ? e.scrollTop -= (r.top - i.top) / n : i.bottom > r.bottom && (e.scrollTop += (i.bottom - r.bottom) / n);
}
function cf(e) {
  return (e.boost || 0) * 100 + (e.apply ? 10 : 0) + (e.info ? 5 : 0) + (e.type ? 1 : 0);
}
function bm(e, t) {
  let r = [], i = null, n = (c) => {
    r.push(c);
    let { section: f } = c.completion;
    if (f) {
      i || (i = []);
      let p = typeof f == "string" ? f : f.name;
      i.some((O) => O.name == p) || i.push(typeof f == "string" ? { name: p } : f);
    }
  }, a = t.facet(Qt);
  for (let c of e)
    if (c.hasResult()) {
      let f = c.result.getMatch;
      if (c.result.filter === !1)
        for (let p of c.result.options)
          n(new of(p, c.source, f ? f(p) : [], 1e9 - r.length));
      else {
        let p = t.sliceDoc(c.from, c.to), O, d = a.filterStrict ? new gm(p) : new Am(p);
        for (let g of c.result.options)
          if (O = d.match(g.label)) {
            let L = g.displayLabel ? f ? f(g, O.matched) : [] : O.matched;
            n(new of(g, c.source, L, O.score + (g.boost || 0)));
          }
      }
    }
  if (i) {
    let c = /* @__PURE__ */ Object.create(null), f = 0, p = (O, d) => {
      var g, L;
      return ((g = O.rank) !== null && g !== void 0 ? g : 1e9) - ((L = d.rank) !== null && L !== void 0 ? L : 1e9) || (O.name < d.name ? -1 : 1);
    };
    for (let O of i.sort(p))
      f -= 1e5, c[O.name] = f;
    for (let O of r) {
      let { section: d } = O.completion;
      d && (O.score += c[typeof d == "string" ? d : d.name]);
    }
  }
  let s = [], o = null, l = a.compareCompletions;
  for (let c of r.sort((f, p) => p.score - f.score || l(f.completion, p.completion))) {
    let f = c.completion;
    !o || o.label != f.label || o.detail != f.detail || o.type != null && f.type != null && o.type != f.type || o.apply != f.apply || o.boost != f.boost ? s.push(c) : cf(c.completion) > cf(o) && (s[s.length - 1] = c), o = c.completion;
  }
  return s;
}
class rn {
  constructor(t, r, i, n, a, s) {
    this.options = t, this.attrs = r, this.tooltip = i, this.timestamp = n, this.selected = a, this.disabled = s;
  }
  setSelected(t, r) {
    return t == this.selected || t >= this.options.length ? this : new rn(this.options, ff(r, t), this.tooltip, this.timestamp, t, this.disabled);
  }
  static build(t, r, i, n, a) {
    let s = bm(t, r);
    if (!s.length)
      return n && t.some(
        (l) => l.state == 1
        /* State.Pending */
      ) ? new rn(n.options, n.attrs, n.tooltip, n.timestamp, n.selected, !0) : null;
    let o = r.facet(Qt).selectOnOpen ? 0 : -1;
    if (n && n.selected != o && n.selected != -1) {
      let l = n.options[n.selected].completion;
      for (let c = 0; c < s.length; c++)
        if (s[c].completion == l) {
          o = c;
          break;
        }
    }
    return new rn(s, ff(i, o), {
      pos: t.reduce((l, c) => c.hasResult() ? Math.min(l, c.from) : l, 1e8),
      create: Dm,
      above: a.aboveCursor
    }, n ? n.timestamp : Date.now(), o, !1);
  }
  map(t) {
    return new rn(this.options, this.attrs, Object.assign(Object.assign({}, this.tooltip), { pos: t.mapPos(this.tooltip.pos) }), this.timestamp, this.selected, this.disabled);
  }
}
class Os {
  constructor(t, r, i) {
    this.active = t, this.id = r, this.open = i;
  }
  static start() {
    return new Os(Lm, "cm-ac-" + Math.floor(Math.random() * 2e6).toString(36), null);
  }
  update(t) {
    let { state: r } = t, i = r.facet(Qt), a = (i.override || r.languageDataAt("autocomplete", Oi(r)).map(Rm)).map((o) => (this.active.find((c) => c.source == o) || new Ft(
      o,
      this.active.some(
        (c) => c.state != 0
        /* State.Inactive */
      ) ? 1 : 0
      /* State.Inactive */
    )).update(t, i));
    a.length == this.active.length && a.every((o, l) => o == this.active[l]) && (a = this.active);
    let s = this.open;
    s && t.docChanged && (s = s.map(t.changes)), t.selection || a.some((o) => o.hasResult() && t.changes.touchesRange(o.from, o.to)) || !vm(a, this.active) ? s = rn.build(a, r, this.id, s, i) : s && s.disabled && !a.some(
      (o) => o.state == 1
      /* State.Pending */
    ) && (s = null), !s && a.every(
      (o) => o.state != 1
      /* State.Pending */
    ) && a.some((o) => o.hasResult()) && (a = a.map((o) => o.hasResult() ? new Ft(
      o.source,
      0
      /* State.Inactive */
    ) : o));
    for (let o of t.effects)
      o.is(Cp) && (s = s && s.setSelected(o.value, this.id));
    return a == this.active && s == this.open ? this : new Os(a, this.id, s);
  }
  get tooltip() {
    return this.open ? this.open.tooltip : null;
  }
  get attrs() {
    return this.open ? this.open.attrs : Cm;
  }
}
function vm(e, t) {
  if (e == t)
    return !0;
  for (let r = 0, i = 0; ; ) {
    for (; r < e.length && !e[r].hasResult; )
      r++;
    for (; i < t.length && !t[i].hasResult; )
      i++;
    let n = r == e.length, a = i == t.length;
    if (n || a)
      return n == a;
    if (e[r++].result != t[i++].result)
      return !1;
  }
}
const Cm = {
  "aria-autocomplete": "list"
};
function ff(e, t) {
  let r = {
    "aria-autocomplete": "list",
    "aria-haspopup": "listbox",
    "aria-controls": e
  };
  return t > -1 && (r["aria-activedescendant"] = e + "-" + t), r;
}
const Lm = [];
function sl(e, t) {
  if (e.isUserEvent("input.complete")) {
    let r = e.annotation(wu);
    if (r && t.activateOnCompletion(r))
      return "input";
  }
  return e.isUserEvent("input.type") ? "input" : e.isUserEvent("delete.backward") ? "delete" : null;
}
class Ft {
  constructor(t, r, i = -1) {
    this.source = t, this.state = r, this.explicitPos = i;
  }
  hasResult() {
    return !1;
  }
  update(t, r) {
    let i = sl(t, r), n = this;
    i ? n = n.handleUserEvent(t, i, r) : t.docChanged ? n = n.handleChange(t) : t.selection && n.state != 0 && (n = new Ft(
      n.source,
      0
      /* State.Inactive */
    ));
    for (let a of t.effects)
      if (a.is(ps))
        n = new Ft(n.source, 1, a.value ? Oi(t.state) : -1);
      else if (a.is(ea))
        n = new Ft(
          n.source,
          0
          /* State.Inactive */
        );
      else if (a.is(vp))
        for (let s of a.value)
          s.source == n.source && (n = s);
    return n;
  }
  handleUserEvent(t, r, i) {
    return r == "delete" || !i.activateOnTyping ? this.map(t.changes) : new Ft(
      this.source,
      1
      /* State.Pending */
    );
  }
  handleChange(t) {
    return t.changes.touchesRange(Oi(t.startState)) ? new Ft(
      this.source,
      0
      /* State.Inactive */
    ) : this.map(t.changes);
  }
  map(t) {
    return t.empty || this.explicitPos < 0 ? this : new Ft(this.source, this.state, t.mapPos(this.explicitPos));
  }
}
class sn extends Ft {
  constructor(t, r, i, n, a) {
    super(t, 2, r), this.result = i, this.from = n, this.to = a;
  }
  hasResult() {
    return !0;
  }
  handleUserEvent(t, r, i) {
    var n;
    let a = this.result;
    a.map && !t.changes.empty && (a = a.map(a, t.changes));
    let s = t.changes.mapPos(this.from), o = t.changes.mapPos(this.to, 1), l = Oi(t.state);
    if ((this.explicitPos < 0 ? l <= s : l < this.from) || l > o || !a || r == "delete" && Oi(t.startState) == this.from)
      return new Ft(
        this.source,
        r == "input" && i.activateOnTyping ? 1 : 0
        /* State.Inactive */
      );
    let c = this.explicitPos < 0 ? -1 : t.changes.mapPos(this.explicitPos);
    return xm(a.validFor, t.state, s, o) ? new sn(this.source, c, a, s, o) : a.update && (a = a.update(a, s, o, new _p(t.state, l, c >= 0))) ? new sn(this.source, c, a, a.from, (n = a.to) !== null && n !== void 0 ? n : Oi(t.state)) : new Ft(this.source, 1, c);
  }
  handleChange(t) {
    return t.changes.touchesRange(this.from, this.to) ? new Ft(
      this.source,
      0
      /* State.Inactive */
    ) : this.map(t.changes);
  }
  map(t) {
    return t.empty ? this : (this.result.map ? this.result.map(this.result, t) : this.result) ? new sn(this.source, this.explicitPos < 0 ? -1 : t.mapPos(this.explicitPos), this.result, t.mapPos(this.from), t.mapPos(this.to, 1)) : new Ft(
      this.source,
      0
      /* State.Inactive */
    );
  }
}
function xm(e, t, r, i) {
  if (!e)
    return !1;
  let n = t.sliceDoc(r, i);
  return typeof e == "function" ? e(n, r, i, t) : bp(e, !0).test(n);
}
const vp = /* @__PURE__ */ Tt.define({
  map(e, t) {
    return e.map((r) => r.map(t));
  }
}), Cp = /* @__PURE__ */ Tt.define(), Jt = /* @__PURE__ */ Xr.define({
  create() {
    return Os.start();
  },
  update(e, t) {
    return e.update(t);
  },
  provide: (e) => [
    bT.from(e, (t) => t.tooltip),
    we.contentAttributes.from(e, (t) => t.attrs)
  ]
});
function Mu(e, t) {
  const r = t.completion.apply || t.completion.label;
  let i = e.state.field(Jt).active.find((n) => n.source == t.source);
  return i instanceof sn ? (typeof r == "string" ? e.dispatch(Object.assign(Object.assign({}, mm(e.state, r, i.from, i.to)), { annotations: wu.of(t.completion) })) : r(e, t.completion, i.from, i.to), !0) : !1;
}
const Dm = /* @__PURE__ */ Pm(Jt, Mu);
function kr(e, t = "option") {
  return (r) => {
    let i = r.state.field(Jt, !1);
    if (!i || !i.open || i.open.disabled || Date.now() - i.open.timestamp < r.state.facet(Qt).interactionDelay)
      return !1;
    let n = 1, a;
    t == "page" && (a = rp(r, i.open.tooltip)) && (n = Math.max(2, Math.floor(a.dom.offsetHeight / a.dom.querySelector("li").offsetHeight) - 1));
    let { length: s } = i.open.options, o = i.open.selected > -1 ? i.open.selected + n * (e ? 1 : -1) : e ? 0 : s - 1;
    return o < 0 ? o = t == "page" ? 0 : s - 1 : o >= s && (o = t == "page" ? s - 1 : 0), r.dispatch({ effects: Cp.of(o) }), !0;
  };
}
const ol = (e) => {
  let t = e.state.field(Jt, !1);
  return e.state.readOnly || !t || !t.open || t.open.selected < 0 || t.open.disabled || Date.now() - t.open.timestamp < e.state.facet(Qt).interactionDelay ? !1 : Mu(e, t.open.options[t.open.selected]);
}, Um = (e) => e.state.field(Jt, !1) ? (e.dispatch({ effects: ps.of(!0) }), !0) : !1, ku = (e) => {
  let t = e.state.field(Jt, !1);
  return !t || !t.active.some(
    (r) => r.state != 0
    /* State.Inactive */
  ) ? !1 : (e.dispatch({ effects: ea.of(null) }), !0);
};
class wm {
  constructor(t, r) {
    this.active = t, this.context = r, this.time = Date.now(), this.updates = [], this.done = void 0;
  }
}
const Mm = 50, km = 1e3, Qm = /* @__PURE__ */ gi.fromClass(class {
  constructor(e) {
    this.view = e, this.debounceUpdate = -1, this.running = [], this.debounceAccept = -1, this.pendingStart = !1, this.composing = 0;
    for (let t of e.state.field(Jt).active)
      t.state == 1 && this.startQuery(t);
  }
  update(e) {
    let t = e.state.field(Jt), r = e.state.facet(Qt);
    if (!e.selectionSet && !e.docChanged && e.startState.field(Jt) == t)
      return;
    let i = e.transactions.some((a) => (a.selection || a.docChanged) && !sl(a, r));
    for (let a = 0; a < this.running.length; a++) {
      let s = this.running[a];
      if (i || s.updates.length + e.transactions.length > Mm && Date.now() - s.time > km) {
        for (let o of s.context.abortListeners)
          try {
            o();
          } catch (l) {
            Zn(this.view.state, l);
          }
        s.context.abortListeners = null, this.running.splice(a--, 1);
      } else
        s.updates.push(...e.transactions);
    }
    this.debounceUpdate > -1 && clearTimeout(this.debounceUpdate), e.transactions.some((a) => a.effects.some((s) => s.is(ps))) && (this.pendingStart = !0);
    let n = this.pendingStart ? 50 : r.activateOnTypingDelay;
    if (this.debounceUpdate = t.active.some((a) => a.state == 1 && !this.running.some((s) => s.active.source == a.source)) ? setTimeout(() => this.startUpdate(), n) : -1, this.composing != 0)
      for (let a of e.transactions)
        sl(a, r) == "input" ? this.composing = 2 : this.composing == 2 && a.selection && (this.composing = 3);
  }
  startUpdate() {
    this.debounceUpdate = -1, this.pendingStart = !1;
    let { state: e } = this.view, t = e.field(Jt);
    for (let r of t.active)
      r.state == 1 && !this.running.some((i) => i.active.source == r.source) && this.startQuery(r);
  }
  startQuery(e) {
    let { state: t } = this.view, r = Oi(t), i = new _p(t, r, e.explicitPos == r), n = new wm(e, i);
    this.running.push(n), Promise.resolve(e.source(i)).then((a) => {
      n.context.aborted || (n.done = a || null, this.scheduleAccept());
    }, (a) => {
      this.view.dispatch({ effects: ea.of(null) }), Zn(this.view.state, a);
    });
  }
  scheduleAccept() {
    this.running.every((e) => e.done !== void 0) ? this.accept() : this.debounceAccept < 0 && (this.debounceAccept = setTimeout(() => this.accept(), this.view.state.facet(Qt).updateSyncTime));
  }
  // For each finished query in this.running, try to create a result
  // or, if appropriate, restart the query.
  accept() {
    var e;
    this.debounceAccept > -1 && clearTimeout(this.debounceAccept), this.debounceAccept = -1;
    let t = [], r = this.view.state.facet(Qt);
    for (let i = 0; i < this.running.length; i++) {
      let n = this.running[i];
      if (n.done === void 0)
        continue;
      if (this.running.splice(i--, 1), n.done) {
        let s = new sn(n.active.source, n.active.explicitPos, n.done, n.done.from, (e = n.done.to) !== null && e !== void 0 ? e : Oi(n.updates.length ? n.updates[0].startState : this.view.state));
        for (let o of n.updates)
          s = s.update(o, r);
        if (s.hasResult()) {
          t.push(s);
          continue;
        }
      }
      let a = this.view.state.field(Jt).active.find((s) => s.source == n.active.source);
      if (a && a.state == 1)
        if (n.done == null) {
          let s = new Ft(
            n.active.source,
            0
            /* State.Inactive */
          );
          for (let o of n.updates)
            s = s.update(o, r);
          s.state != 1 && t.push(s);
        } else
          this.startQuery(a);
    }
    t.length && this.view.dispatch({ effects: vp.of(t) });
  }
}, {
  eventHandlers: {
    blur(e) {
      let t = this.view.state.field(Jt, !1);
      if (t && t.tooltip && this.view.state.facet(Qt).closeOnBlur) {
        let r = t.open && rp(this.view, t.open.tooltip);
        (!r || !r.dom.contains(e.relatedTarget)) && setTimeout(() => this.view.dispatch({ effects: ea.of(null) }), 10);
      }
    },
    compositionstart() {
      this.composing = 1;
    },
    compositionend() {
      this.composing == 3 && setTimeout(() => this.view.dispatch({ effects: ps.of(!1) }), 20), this.composing = 0;
    }
  }
}), Gm = typeof navigator == "object" && /* @__PURE__ */ /Win/.test(navigator.platform), Vm = /* @__PURE__ */ mn.highest(/* @__PURE__ */ we.domEventHandlers({
  keydown(e, t) {
    let r = t.state.field(Jt, !1);
    if (!r || !r.open || r.open.disabled || r.open.selected < 0 || e.key.length > 1 || e.ctrlKey && !(Gm && e.altKey) || e.metaKey)
      return !1;
    let i = r.open.options[r.open.selected], n = r.active.find((s) => s.source == i.source), a = i.completion.commitCharacters || n.result.commitCharacters;
    return a && a.indexOf(e.key) > -1 && Mu(t, i), !1;
  }
})), Lp = /* @__PURE__ */ we.baseTheme({
  ".cm-tooltip.cm-tooltip-autocomplete": {
    "& > ul": {
      fontFamily: "monospace",
      whiteSpace: "nowrap",
      overflow: "hidden auto",
      maxWidth_fallback: "700px",
      maxWidth: "min(700px, 95vw)",
      minWidth: "250px",
      maxHeight: "10em",
      height: "100%",
      listStyle: "none",
      margin: 0,
      padding: 0,
      "& > li, & > completion-section": {
        padding: "1px 3px",
        lineHeight: 1.2
      },
      "& > li": {
        overflowX: "hidden",
        textOverflow: "ellipsis",
        cursor: "pointer"
      },
      "& > completion-section": {
        display: "list-item",
        borderBottom: "1px solid silver",
        paddingLeft: "0.5em",
        opacity: 0.7
      }
    }
  },
  "&light .cm-tooltip-autocomplete ul li[aria-selected]": {
    background: "#17c",
    color: "white"
  },
  "&light .cm-tooltip-autocomplete-disabled ul li[aria-selected]": {
    background: "#777"
  },
  "&dark .cm-tooltip-autocomplete ul li[aria-selected]": {
    background: "#347",
    color: "white"
  },
  "&dark .cm-tooltip-autocomplete-disabled ul li[aria-selected]": {
    background: "#444"
  },
  ".cm-completionListIncompleteTop:before, .cm-completionListIncompleteBottom:after": {
    content: '"···"',
    opacity: 0.5,
    display: "block",
    textAlign: "center"
  },
  ".cm-tooltip.cm-completionInfo": {
    position: "absolute",
    padding: "3px 9px",
    width: "max-content",
    maxWidth: "400px",
    boxSizing: "border-box"
  },
  ".cm-completionInfo.cm-completionInfo-left": { right: "100%" },
  ".cm-completionInfo.cm-completionInfo-right": { left: "100%" },
  ".cm-completionInfo.cm-completionInfo-left-narrow": { right: "30px" },
  ".cm-completionInfo.cm-completionInfo-right-narrow": { left: "30px" },
  "&light .cm-snippetField": { backgroundColor: "#00000022" },
  "&dark .cm-snippetField": { backgroundColor: "#ffffff22" },
  ".cm-snippetFieldPosition": {
    verticalAlign: "text-top",
    width: 0,
    height: "1.15em",
    display: "inline-block",
    margin: "0 -0.7px -.7em",
    borderLeft: "1.4px dotted #888"
  },
  ".cm-completionMatchedText": {
    textDecoration: "underline"
  },
  ".cm-completionDetail": {
    marginLeft: "0.5em",
    fontStyle: "italic"
  },
  ".cm-completionIcon": {
    fontSize: "90%",
    width: ".8em",
    display: "inline-block",
    textAlign: "center",
    paddingRight: ".6em",
    opacity: "0.6",
    boxSizing: "content-box"
  },
  ".cm-completionIcon-function, .cm-completionIcon-method": {
    "&:after": { content: "'ƒ'" }
  },
  ".cm-completionIcon-class": {
    "&:after": { content: "'○'" }
  },
  ".cm-completionIcon-interface": {
    "&:after": { content: "'◌'" }
  },
  ".cm-completionIcon-variable": {
    "&:after": { content: "'𝑥'" }
  },
  ".cm-completionIcon-constant": {
    "&:after": { content: "'𝐶'" }
  },
  ".cm-completionIcon-type": {
    "&:after": { content: "'𝑡'" }
  },
  ".cm-completionIcon-enum": {
    "&:after": { content: "'∪'" }
  },
  ".cm-completionIcon-property": {
    "&:after": { content: "'□'" }
  },
  ".cm-completionIcon-keyword": {
    "&:after": { content: "'🔑︎'" }
    // Disable emoji rendering
  },
  ".cm-completionIcon-namespace": {
    "&:after": { content: "'▢'" }
  },
  ".cm-completionIcon-text": {
    "&:after": { content: "'abc'", fontSize: "50%", verticalAlign: "middle" }
  }
});
class Bm {
  constructor(t, r, i, n) {
    this.field = t, this.line = r, this.from = i, this.to = n;
  }
}
class Qu {
  constructor(t, r, i) {
    this.field = t, this.from = r, this.to = i;
  }
  map(t) {
    let r = t.mapPos(this.from, -1, Ko.TrackDel), i = t.mapPos(this.to, 1, Ko.TrackDel);
    return r == null || i == null ? null : new Qu(this.field, r, i);
  }
}
class Gu {
  constructor(t, r) {
    this.lines = t, this.fieldPositions = r;
  }
  instantiate(t, r) {
    let i = [], n = [r], a = t.doc.lineAt(r), s = /^\s*/.exec(a.text)[0];
    for (let l of this.lines) {
      if (i.length) {
        let c = s, f = /^\t*/.exec(l)[0].length;
        for (let p = 0; p < f; p++)
          c += t.facet(Vs);
        n.push(r + c.length - f), l = c + l.slice(f);
      }
      i.push(l), r += l.length + 1;
    }
    let o = this.fieldPositions.map((l) => new Qu(l.field, n[l.line] + l.from, n[l.line] + l.to));
    return { text: i, ranges: o };
  }
  static parse(t) {
    let r = [], i = [], n = [], a;
    for (let s of t.split(/\r\n?|\n/)) {
      for (; a = /[#$]\{(?:(\d+)(?::([^}]*))?|([^}]*))\}/.exec(s); ) {
        let o = a[1] ? +a[1] : null, l = a[2] || a[3] || "", c = -1;
        for (let f = 0; f < r.length; f++)
          (o != null ? r[f].seq == o : l && r[f].name == l) && (c = f);
        if (c < 0) {
          let f = 0;
          for (; f < r.length && (o == null || r[f].seq != null && r[f].seq < o); )
            f++;
          r.splice(f, 0, { seq: o, name: l }), c = f;
          for (let p of n)
            p.field >= c && p.field++;
        }
        n.push(new Bm(c, i.length, a.index, a.index + l.length)), s = s.slice(0, a.index) + l + s.slice(a.index + a[0].length);
      }
      for (let o; o = /\\([{}])/.exec(s); ) {
        s = s.slice(0, o.index) + o[1] + s.slice(o.index + o[0].length);
        for (let l of n)
          l.line == i.length && l.from > o.index && (l.from--, l.to--);
      }
      i.push(s);
    }
    return new Gu(i, n);
  }
}
let $m = /* @__PURE__ */ Pe.widget({ widget: /* @__PURE__ */ new class extends Gs {
  toDOM() {
    let e = document.createElement("span");
    return e.className = "cm-snippetFieldPosition", e;
  }
  ignoreEvent() {
    return !1;
  }
}() }), Ym = /* @__PURE__ */ Pe.mark({ class: "cm-snippetField" });
class In {
  constructor(t, r) {
    this.ranges = t, this.active = r, this.deco = Pe.set(t.map((i) => (i.from == i.to ? $m : Ym).range(i.from, i.to)));
  }
  map(t) {
    let r = [];
    for (let i of this.ranges) {
      let n = i.map(t);
      if (!n)
        return null;
      r.push(n);
    }
    return new In(r, this.active);
  }
  selectionInsideField(t) {
    return t.ranges.every((r) => this.ranges.some((i) => i.field == this.active && i.from <= r.from && i.to >= r.to));
  }
}
const ma = /* @__PURE__ */ Tt.define({
  map(e, t) {
    return e && e.map(t);
  }
}), Fm = /* @__PURE__ */ Tt.define(), ta = /* @__PURE__ */ Xr.define({
  create() {
    return null;
  },
  update(e, t) {
    for (let r of t.effects) {
      if (r.is(ma))
        return r.value;
      if (r.is(Fm) && e)
        return new In(e.ranges, r.value);
    }
    return e && t.docChanged && (e = e.map(t.changes)), e && t.selection && !e.selectionInsideField(t.selection) && (e = null), e;
  },
  provide: (e) => we.decorations.from(e, (t) => t ? t.deco : Pe.none)
});
function Vu(e, t) {
  return Re.create(e.filter((r) => r.field == t).map((r) => Re.range(r.from, r.to)));
}
function Wm(e) {
  let t = Gu.parse(e);
  return (r, i, n, a) => {
    let { text: s, ranges: o } = t.instantiate(r.state, n), l = {
      changes: { from: n, to: a, insert: Ou.of(s) },
      scrollIntoView: !0,
      annotations: i ? [wu.of(i), Ka.userEvent.of("input.complete")] : void 0
    };
    if (o.length && (l.selection = Vu(o, 0)), o.some((c) => c.field > 0)) {
      let c = new In(o, 0), f = l.effects = [ma.of(c)];
      r.state.field(ta, !1) === void 0 && f.push(Tt.appendConfig.of([ta, zm, qm, Lp]));
    }
    r.dispatch(r.state.update(l));
  };
}
function xp(e) {
  return ({ state: t, dispatch: r }) => {
    let i = t.field(ta, !1);
    if (!i || e < 0 && i.active == 0)
      return !1;
    let n = i.active + e, a = e > 0 && !i.ranges.some((s) => s.field == n + e);
    return r(t.update({
      selection: Vu(i.ranges, n),
      effects: ma.of(a ? null : new In(i.ranges, n)),
      scrollIntoView: !0
    })), !0;
  };
}
const Xm = ({ state: e, dispatch: t }) => e.field(ta, !1) ? (t(e.update({ effects: ma.of(null) })), !0) : !1, jm = /* @__PURE__ */ xp(1), Zm = /* @__PURE__ */ xp(-1), Hm = [
  { key: "Tab", run: jm, shift: Zm },
  { key: "Escape", run: Xm }
], hf = /* @__PURE__ */ jt.define({
  combine(e) {
    return e.length ? e[0] : Hm;
  }
}), zm = /* @__PURE__ */ mn.highest(/* @__PURE__ */ Rn.compute([hf], (e) => e.facet(hf)));
function qt(e, t) {
  return Object.assign(Object.assign({}, t), { apply: Wm(e) });
}
const qm = /* @__PURE__ */ we.domEventHandlers({
  mousedown(e, t) {
    let r = t.state.field(ta, !1), i;
    if (!r || (i = t.posAtCoords({ x: e.clientX, y: e.clientY })) == null)
      return !1;
    let n = r.ranges.find((a) => a.from <= i && a.to >= i);
    return !n || n.field == r.active ? !1 : (t.dispatch({
      selection: Vu(r.ranges, n.field),
      effects: ma.of(r.ranges.some((a) => a.field > n.field) ? new In(r.ranges, n.field) : null),
      scrollIntoView: !0
    }), !0);
  }
}), ra = {
  brackets: ["(", "[", "{", "'", '"'],
  before: ")]}:;>",
  stringPrefixes: []
}, Ui = /* @__PURE__ */ Tt.define({
  map(e, t) {
    let r = t.mapPos(e, -1, Ko.TrackAfter);
    return r ?? void 0;
  }
}), Bu = /* @__PURE__ */ new class extends vT {
}();
Bu.startSide = 1;
Bu.endSide = -1;
const Dp = /* @__PURE__ */ Xr.define({
  create() {
    return tp.empty;
  },
  update(e, t) {
    if (e = e.map(t.changes), t.selection) {
      let r = t.state.doc.lineAt(t.selection.main.head);
      e = e.update({ filter: (i) => i >= r.from && i <= r.to });
    }
    for (let r of t.effects)
      r.is(Ui) && (e = e.update({ add: [Bu.range(r.value, r.value + 1)] }));
    return e;
  }
});
function Jm() {
  return [eR, Dp];
}
const Io = "()[]{}<>";
function Up(e) {
  for (let t = 0; t < Io.length; t += 2)
    if (Io.charCodeAt(t) == e)
      return Io.charAt(t + 1);
  return hu(e < 128 ? e : e + 1);
}
function wp(e, t) {
  return e.languageDataAt("closeBrackets", t)[0] || ra;
}
const Km = typeof navigator == "object" && /* @__PURE__ */ /Android\b/.test(navigator.userAgent), eR = /* @__PURE__ */ we.inputHandler.of((e, t, r, i) => {
  if ((Km ? e.composing : e.compositionStarted) || e.state.readOnly)
    return !1;
  let n = e.state.selection.main;
  if (i.length > 2 || i.length == 2 && qr(dr(i, 0)) == 1 || t != n.from || r != n.to)
    return !1;
  let a = iR(e.state, i);
  return a ? (e.dispatch(a), !0) : !1;
}), tR = ({ state: e, dispatch: t }) => {
  if (e.readOnly)
    return !1;
  let i = wp(e, e.selection.main.head).brackets || ra.brackets, n = null, a = e.changeByRange((s) => {
    if (s.empty) {
      let o = nR(e.doc, s.head);
      for (let l of i)
        if (l == o && Fs(e.doc, s.head) == Up(dr(l, 0)))
          return {
            changes: { from: s.head - l.length, to: s.head + l.length },
            range: Re.cursor(s.head - l.length)
          };
    }
    return { range: n = s };
  });
  return n || t(e.update(a, { scrollIntoView: !0, userEvent: "delete.backward" })), !n;
}, rR = [
  { key: "Backspace", run: tR }
];
function iR(e, t) {
  let r = wp(e, e.selection.main.head), i = r.brackets || ra.brackets;
  for (let n of i) {
    let a = Up(dr(n, 0));
    if (t == n)
      return a == n ? oR(e, n, i.indexOf(n + n + n) > -1, r) : aR(e, n, a, r.before || ra.before);
    if (t == a && Mp(e, e.selection.main.from))
      return sR(e, n, a);
  }
  return null;
}
function Mp(e, t) {
  let r = !1;
  return e.field(Dp).between(0, e.doc.length, (i) => {
    i == t && (r = !0);
  }), r;
}
function Fs(e, t) {
  let r = e.sliceString(t, t + 2);
  return r.slice(0, qr(dr(r, 0)));
}
function nR(e, t) {
  let r = e.sliceString(t - 2, t);
  return qr(dr(r, 0)) == r.length ? r : r.slice(1);
}
function aR(e, t, r, i) {
  let n = null, a = e.changeByRange((s) => {
    if (!s.empty)
      return {
        changes: [{ insert: t, from: s.from }, { insert: r, from: s.to }],
        effects: Ui.of(s.to + t.length),
        range: Re.range(s.anchor + t.length, s.head + t.length)
      };
    let o = Fs(e.doc, s.head);
    return !o || /\s/.test(o) || i.indexOf(o) > -1 ? {
      changes: { insert: t + r, from: s.head },
      effects: Ui.of(s.head + t.length),
      range: Re.cursor(s.head + t.length)
    } : { range: n = s };
  });
  return n ? null : e.update(a, {
    scrollIntoView: !0,
    userEvent: "input.type"
  });
}
function sR(e, t, r) {
  let i = null, n = e.changeByRange((a) => a.empty && Fs(e.doc, a.head) == r ? {
    changes: { from: a.head, to: a.head + r.length, insert: r },
    range: Re.cursor(a.head + r.length)
  } : i = { range: a });
  return i ? null : e.update(n, {
    scrollIntoView: !0,
    userEvent: "input.type"
  });
}
function oR(e, t, r, i) {
  let n = i.stringPrefixes || ra.stringPrefixes, a = null, s = e.changeByRange((o) => {
    if (!o.empty)
      return {
        changes: [{ insert: t, from: o.from }, { insert: t, from: o.to }],
        effects: Ui.of(o.to + t.length),
        range: Re.range(o.anchor + t.length, o.head + t.length)
      };
    let l = o.head, c = Fs(e.doc, l), f;
    if (c == t) {
      if (pf(e, l))
        return {
          changes: { insert: t + t, from: l },
          effects: Ui.of(l + t.length),
          range: Re.cursor(l + t.length)
        };
      if (Mp(e, l)) {
        let O = r && e.sliceDoc(l, l + t.length * 3) == t + t + t ? t + t + t : t;
        return {
          changes: { from: l, to: l + O.length, insert: O },
          range: Re.cursor(l + O.length)
        };
      }
    } else {
      if (r && e.sliceDoc(l - 2 * t.length, l) == t + t && (f = Of(e, l - 2 * t.length, n)) > -1 && pf(e, f))
        return {
          changes: { insert: t + t + t + t, from: l },
          effects: Ui.of(l + t.length),
          range: Re.cursor(l + t.length)
        };
      if (e.charCategorizer(l)(c) != Wt.Word && Of(e, l, n) > -1 && !lR(e, l, t, n))
        return {
          changes: { insert: t + t, from: l },
          effects: Ui.of(l + t.length),
          range: Re.cursor(l + t.length)
        };
    }
    return { range: a = o };
  });
  return a ? null : e.update(s, {
    scrollIntoView: !0,
    userEvent: "input.type"
  });
}
function pf(e, t) {
  let r = Ot(e).resolveInner(t + 1);
  return r.parent && r.from == t;
}
function lR(e, t, r, i) {
  let n = Ot(e).resolveInner(t, -1), a = i.reduce((s, o) => Math.max(s, o.length), 0);
  for (let s = 0; s < 5; s++) {
    let o = e.sliceDoc(n.from, Math.min(n.to, n.from + r.length + a)), l = o.indexOf(r);
    if (!l || l > -1 && i.indexOf(o.slice(0, l)) > -1) {
      let f = n.firstChild;
      for (; f && f.from == n.from && f.to - f.from > r.length + l; ) {
        if (e.sliceDoc(f.to - r.length, f.to) == r)
          return !1;
        f = f.firstChild;
      }
      return !0;
    }
    let c = n.to == t && n.parent;
    if (!c)
      break;
    n = c;
  }
  return !1;
}
function Of(e, t, r) {
  let i = e.charCategorizer(t);
  if (i(e.sliceDoc(t - 1, t)) != Wt.Word)
    return t;
  for (let n of r) {
    let a = t - n.length;
    if (e.sliceDoc(a, t) == n && i(e.sliceDoc(a - 1, a)) != Wt.Word)
      return a;
  }
  return -1;
}
function uR(e = {}) {
  return [
    Vm,
    Jt,
    Qt.of(e),
    Qm,
    fR,
    Lp
  ];
}
const cR = [
  { key: "Ctrl-Space", run: Um },
  { key: "Escape", run: ku },
  { key: "ArrowDown", run: /* @__PURE__ */ kr(!0) },
  { key: "ArrowUp", run: /* @__PURE__ */ kr(!1) },
  { key: "PageDown", run: /* @__PURE__ */ kr(!0, "page") },
  { key: "PageUp", run: /* @__PURE__ */ kr(!1, "page") },
  { key: "Enter", run: ol }
], fR = /* @__PURE__ */ mn.highest(/* @__PURE__ */ Rn.computeN([Qt], (e) => e.facet(Qt).defaultKeymap ? [cR] : []));
class Es {
  /**
  @internal
  */
  constructor(t, r, i, n, a, s, o, l, c, f = 0, p) {
    this.p = t, this.stack = r, this.state = i, this.reducePos = n, this.pos = a, this.score = s, this.buffer = o, this.bufferBase = l, this.curContext = c, this.lookAhead = f, this.parent = p;
  }
  /**
  @internal
  */
  toString() {
    return `[${this.stack.filter((t, r) => r % 3 == 0).concat(this.state)}]@${this.pos}${this.score ? "!" + this.score : ""}`;
  }
  // Start an empty stack
  /**
  @internal
  */
  static start(t, r, i = 0) {
    let n = t.parser.context;
    return new Es(t, [], r, i, i, 0, [], 0, n ? new Ef(n, n.start) : null, 0, null);
  }
  /**
  The stack's current [context](#lr.ContextTracker) value, if
  any. Its type will depend on the context tracker's type
  parameter, or it will be `null` if there is no context
  tracker.
  */
  get context() {
    return this.curContext ? this.curContext.context : null;
  }
  // Push a state onto the stack, tracking its start position as well
  // as the buffer base at that point.
  /**
  @internal
  */
  pushState(t, r) {
    this.stack.push(this.state, r, this.bufferBase + this.buffer.length), this.state = t;
  }
  // Apply a reduce action
  /**
  @internal
  */
  reduce(t) {
    var r;
    let i = t >> 19, n = t & 65535, { parser: a } = this.p, s = a.dynamicPrecedence(n);
    if (s && (this.score += s), i == 0) {
      this.pushState(a.getGoto(this.state, n, !0), this.reducePos), n < a.minRepeatTerm && this.storeNode(n, this.reducePos, this.reducePos, 4, !0), this.reduceContext(n, this.reducePos);
      return;
    }
    let o = this.stack.length - (i - 1) * 3 - (t & 262144 ? 6 : 0), l = o ? this.stack[o - 2] : this.p.ranges[0].from, c = this.reducePos - l;
    c >= 2e3 && !(!((r = this.p.parser.nodeSet.types[n]) === null || r === void 0) && r.isAnonymous) && (l == this.p.lastBigReductionStart ? (this.p.bigReductionCount++, this.p.lastBigReductionSize = c) : this.p.lastBigReductionSize < c && (this.p.bigReductionCount = 1, this.p.lastBigReductionStart = l, this.p.lastBigReductionSize = c));
    let f = o ? this.stack[o - 1] : 0, p = this.bufferBase + this.buffer.length - f;
    if (n < a.minRepeatTerm || t & 131072) {
      let O = a.stateFlag(
        this.state,
        1
        /* StateFlag.Skipped */
      ) ? this.pos : this.reducePos;
      this.storeNode(n, l, O, p + 4, !0);
    }
    if (t & 262144)
      this.state = this.stack[o];
    else {
      let O = this.stack[o - 3];
      this.state = a.getGoto(O, n, !0);
    }
    for (; this.stack.length > o; )
      this.stack.pop();
    this.reduceContext(n, l);
  }
  // Shift a value into the buffer
  /**
  @internal
  */
  storeNode(t, r, i, n = 4, a = !1) {
    if (t == 0 && (!this.stack.length || this.stack[this.stack.length - 1] < this.buffer.length + this.bufferBase)) {
      let s = this, o = this.buffer.length;
      if (o == 0 && s.parent && (o = s.bufferBase - s.parent.bufferBase, s = s.parent), o > 0 && s.buffer[o - 4] == 0 && s.buffer[o - 1] > -1) {
        if (r == i)
          return;
        if (s.buffer[o - 2] >= r) {
          s.buffer[o - 2] = i;
          return;
        }
      }
    }
    if (!a || this.pos == i)
      this.buffer.push(t, r, i, n);
    else {
      let s = this.buffer.length;
      if (s > 0 && this.buffer[s - 4] != 0)
        for (; s > 0 && this.buffer[s - 2] > i; )
          this.buffer[s] = this.buffer[s - 4], this.buffer[s + 1] = this.buffer[s - 3], this.buffer[s + 2] = this.buffer[s - 2], this.buffer[s + 3] = this.buffer[s - 1], s -= 4, n > 4 && (n -= 4);
      this.buffer[s] = t, this.buffer[s + 1] = r, this.buffer[s + 2] = i, this.buffer[s + 3] = n;
    }
  }
  // Apply a shift action
  /**
  @internal
  */
  shift(t, r, i, n) {
    if (t & 131072)
      this.pushState(t & 65535, this.pos);
    else if (t & 262144)
      this.pos = n, this.shiftContext(r, i), r <= this.p.parser.maxNode && this.buffer.push(r, i, n, 4);
    else {
      let a = t, { parser: s } = this.p;
      (n > this.pos || r <= s.maxNode) && (this.pos = n, s.stateFlag(
        a,
        1
        /* StateFlag.Skipped */
      ) || (this.reducePos = n)), this.pushState(a, i), this.shiftContext(r, i), r <= s.maxNode && this.buffer.push(r, i, n, 4);
    }
  }
  // Apply an action
  /**
  @internal
  */
  apply(t, r, i, n) {
    t & 65536 ? this.reduce(t) : this.shift(t, r, i, n);
  }
  // Add a prebuilt (reused) node into the buffer.
  /**
  @internal
  */
  useNode(t, r) {
    let i = this.p.reused.length - 1;
    (i < 0 || this.p.reused[i] != t) && (this.p.reused.push(t), i++);
    let n = this.pos;
    this.reducePos = this.pos = n + t.length, this.pushState(r, n), this.buffer.push(
      i,
      n,
      this.reducePos,
      -1
      /* size == -1 means this is a reused value */
    ), this.curContext && this.updateContext(this.curContext.tracker.reuse(this.curContext.context, t, this, this.p.stream.reset(this.pos - t.length)));
  }
  // Split the stack. Due to the buffer sharing and the fact
  // that `this.stack` tends to stay quite shallow, this isn't very
  // expensive.
  /**
  @internal
  */
  split() {
    let t = this, r = t.buffer.length;
    for (; r > 0 && t.buffer[r - 2] > t.reducePos; )
      r -= 4;
    let i = t.buffer.slice(r), n = t.bufferBase + r;
    for (; t && n == t.bufferBase; )
      t = t.parent;
    return new Es(this.p, this.stack.slice(), this.state, this.reducePos, this.pos, this.score, i, n, this.curContext, this.lookAhead, t);
  }
  // Try to recover from an error by 'deleting' (ignoring) one token.
  /**
  @internal
  */
  recoverByDelete(t, r) {
    let i = t <= this.p.parser.maxNode;
    i && this.storeNode(t, this.pos, r, 4), this.storeNode(0, this.pos, r, i ? 8 : 4), this.pos = this.reducePos = r, this.score -= 190;
  }
  /**
  Check if the given term would be able to be shifted (optionally
  after some reductions) on this stack. This can be useful for
  external tokenizers that want to make sure they only provide a
  given token when it applies.
  */
  canShift(t) {
    for (let r = new hR(this); ; ) {
      let i = this.p.parser.stateSlot(
        r.state,
        4
        /* ParseState.DefaultReduce */
      ) || this.p.parser.hasAction(r.state, t);
      if (i == 0)
        return !1;
      if (!(i & 65536))
        return !0;
      r.reduce(i);
    }
  }
  // Apply up to Recover.MaxNext recovery actions that conceptually
  // inserts some missing token or rule.
  /**
  @internal
  */
  recoverByInsert(t) {
    if (this.stack.length >= 300)
      return [];
    let r = this.p.parser.nextStates(this.state);
    if (r.length > 8 || this.stack.length >= 120) {
      let n = [];
      for (let a = 0, s; a < r.length; a += 2)
        (s = r[a + 1]) != this.state && this.p.parser.hasAction(s, t) && n.push(r[a], s);
      if (this.stack.length < 120)
        for (let a = 0; n.length < 8 && a < r.length; a += 2) {
          let s = r[a + 1];
          n.some((o, l) => l & 1 && o == s) || n.push(r[a], s);
        }
      r = n;
    }
    let i = [];
    for (let n = 0; n < r.length && i.length < 4; n += 2) {
      let a = r[n + 1];
      if (a == this.state)
        continue;
      let s = this.split();
      s.pushState(a, this.pos), s.storeNode(0, s.pos, s.pos, 4, !0), s.shiftContext(r[n], this.pos), s.reducePos = this.pos, s.score -= 200, i.push(s);
    }
    return i;
  }
  // Force a reduce, if possible. Return false if that can't
  // be done.
  /**
  @internal
  */
  forceReduce() {
    let { parser: t } = this.p, r = t.stateSlot(
      this.state,
      5
      /* ParseState.ForcedReduce */
    );
    if (!(r & 65536))
      return !1;
    if (!t.validAction(this.state, r)) {
      let i = r >> 19, n = r & 65535, a = this.stack.length - i * 3;
      if (a < 0 || t.getGoto(this.stack[a], n, !1) < 0) {
        let s = this.findForcedReduction();
        if (s == null)
          return !1;
        r = s;
      }
      this.storeNode(0, this.pos, this.pos, 4, !0), this.score -= 100;
    }
    return this.reducePos = this.pos, this.reduce(r), !0;
  }
  /**
  Try to scan through the automaton to find some kind of reduction
  that can be applied. Used when the regular ForcedReduce field
  isn't a valid action. @internal
  */
  findForcedReduction() {
    let { parser: t } = this.p, r = [], i = (n, a) => {
      if (!r.includes(n))
        return r.push(n), t.allActions(n, (s) => {
          if (!(s & 393216))
            if (s & 65536) {
              let o = (s >> 19) - a;
              if (o > 1) {
                let l = s & 65535, c = this.stack.length - o * 3;
                if (c >= 0 && t.getGoto(this.stack[c], l, !1) >= 0)
                  return o << 19 | 65536 | l;
              }
            } else {
              let o = i(s, a + 1);
              if (o != null)
                return o;
            }
        });
    };
    return i(this.state, 0);
  }
  /**
  @internal
  */
  forceAll() {
    for (; !this.p.parser.stateFlag(
      this.state,
      2
      /* StateFlag.Accepting */
    ); )
      if (!this.forceReduce()) {
        this.storeNode(0, this.pos, this.pos, 4, !0);
        break;
      }
    return this;
  }
  /**
  Check whether this state has no further actions (assumed to be a direct descendant of the
  top state, since any other states must be able to continue
  somehow). @internal
  */
  get deadEnd() {
    if (this.stack.length != 3)
      return !1;
    let { parser: t } = this.p;
    return t.data[t.stateSlot(
      this.state,
      1
      /* ParseState.Actions */
    )] == 65535 && !t.stateSlot(
      this.state,
      4
      /* ParseState.DefaultReduce */
    );
  }
  /**
  Restart the stack (put it back in its start state). Only safe
  when this.stack.length == 3 (state is directly below the top
  state). @internal
  */
  restart() {
    this.storeNode(0, this.pos, this.pos, 4, !0), this.state = this.stack[0], this.stack.length = 0;
  }
  /**
  @internal
  */
  sameState(t) {
    if (this.state != t.state || this.stack.length != t.stack.length)
      return !1;
    for (let r = 0; r < this.stack.length; r += 3)
      if (this.stack[r] != t.stack[r])
        return !1;
    return !0;
  }
  /**
  Get the parser used by this stack.
  */
  get parser() {
    return this.p.parser;
  }
  /**
  Test whether a given dialect (by numeric ID, as exported from
  the terms file) is enabled.
  */
  dialectEnabled(t) {
    return this.p.parser.dialect.flags[t];
  }
  shiftContext(t, r) {
    this.curContext && this.updateContext(this.curContext.tracker.shift(this.curContext.context, t, this, this.p.stream.reset(r)));
  }
  reduceContext(t, r) {
    this.curContext && this.updateContext(this.curContext.tracker.reduce(this.curContext.context, t, this, this.p.stream.reset(r)));
  }
  /**
  @internal
  */
  emitContext() {
    let t = this.buffer.length - 1;
    (t < 0 || this.buffer[t] != -3) && this.buffer.push(this.curContext.hash, this.pos, this.pos, -3);
  }
  /**
  @internal
  */
  emitLookAhead() {
    let t = this.buffer.length - 1;
    (t < 0 || this.buffer[t] != -4) && this.buffer.push(this.lookAhead, this.pos, this.pos, -4);
  }
  updateContext(t) {
    if (t != this.curContext.context) {
      let r = new Ef(this.curContext.tracker, t);
      r.hash != this.curContext.hash && this.emitContext(), this.curContext = r;
    }
  }
  /**
  @internal
  */
  setLookAhead(t) {
    t > this.lookAhead && (this.emitLookAhead(), this.lookAhead = t);
  }
  /**
  @internal
  */
  close() {
    this.curContext && this.curContext.tracker.strict && this.emitContext(), this.lookAhead > 0 && this.emitLookAhead();
  }
}
class Ef {
  constructor(t, r) {
    this.tracker = t, this.context = r, this.hash = t.strict ? t.hash(r) : 0;
  }
}
class hR {
  constructor(t) {
    this.start = t, this.state = t.state, this.stack = t.stack, this.base = this.stack.length;
  }
  reduce(t) {
    let r = t & 65535, i = t >> 19;
    i == 0 ? (this.stack == this.start.stack && (this.stack = this.stack.slice()), this.stack.push(this.state, 0, 0), this.base += 3) : this.base -= (i - 1) * 3;
    let n = this.start.p.parser.getGoto(this.stack[this.base - 3], r, !0);
    this.state = n;
  }
}
class ds {
  constructor(t, r, i) {
    this.stack = t, this.pos = r, this.index = i, this.buffer = t.buffer, this.index == 0 && this.maybeNext();
  }
  static create(t, r = t.bufferBase + t.buffer.length) {
    return new ds(t, r, r - t.bufferBase);
  }
  maybeNext() {
    let t = this.stack.parent;
    t != null && (this.index = this.stack.bufferBase - t.bufferBase, this.stack = t, this.buffer = t.buffer);
  }
  get id() {
    return this.buffer[this.index - 4];
  }
  get start() {
    return this.buffer[this.index - 3];
  }
  get end() {
    return this.buffer[this.index - 2];
  }
  get size() {
    return this.buffer[this.index - 1];
  }
  next() {
    this.index -= 4, this.pos -= 4, this.index == 0 && this.maybeNext();
  }
  fork() {
    return new ds(this.stack, this.pos, this.index);
  }
}
function Bn(e, t = Uint16Array) {
  if (typeof e != "string")
    return e;
  let r = null;
  for (let i = 0, n = 0; i < e.length; ) {
    let a = 0;
    for (; ; ) {
      let s = e.charCodeAt(i++), o = !1;
      if (s == 126) {
        a = 65535;
        break;
      }
      s >= 92 && s--, s >= 34 && s--;
      let l = s - 32;
      if (l >= 46 && (l -= 46, o = !0), a += l, o)
        break;
      a *= 46;
    }
    r ? r[n++] = a : r = new t(a);
  }
  return r;
}
class ts {
  constructor() {
    this.start = -1, this.value = -1, this.end = -1, this.extended = -1, this.lookAhead = 0, this.mask = 0, this.context = 0;
  }
}
const df = new ts();
class pR {
  /**
  @internal
  */
  constructor(t, r) {
    this.input = t, this.ranges = r, this.chunk = "", this.chunkOff = 0, this.chunk2 = "", this.chunk2Pos = 0, this.next = -1, this.token = df, this.rangeIndex = 0, this.pos = this.chunkPos = r[0].from, this.range = r[0], this.end = r[r.length - 1].to, this.readNext();
  }
  /**
  @internal
  */
  resolveOffset(t, r) {
    let i = this.range, n = this.rangeIndex, a = this.pos + t;
    for (; a < i.from; ) {
      if (!n)
        return null;
      let s = this.ranges[--n];
      a -= i.from - s.to, i = s;
    }
    for (; r < 0 ? a > i.to : a >= i.to; ) {
      if (n == this.ranges.length - 1)
        return null;
      let s = this.ranges[++n];
      a += s.from - i.to, i = s;
    }
    return a;
  }
  /**
  @internal
  */
  clipPos(t) {
    if (t >= this.range.from && t < this.range.to)
      return t;
    for (let r of this.ranges)
      if (r.to > t)
        return Math.max(t, r.from);
    return this.end;
  }
  /**
  Look at a code unit near the stream position. `.peek(0)` equals
  `.next`, `.peek(-1)` gives you the previous character, and so
  on.
  
  Note that looking around during tokenizing creates dependencies
  on potentially far-away content, which may reduce the
  effectiveness incremental parsing—when looking forward—or even
  cause invalid reparses when looking backward more than 25 code
  units, since the library does not track lookbehind.
  */
  peek(t) {
    let r = this.chunkOff + t, i, n;
    if (r >= 0 && r < this.chunk.length)
      i = this.pos + t, n = this.chunk.charCodeAt(r);
    else {
      let a = this.resolveOffset(t, 1);
      if (a == null)
        return -1;
      if (i = a, i >= this.chunk2Pos && i < this.chunk2Pos + this.chunk2.length)
        n = this.chunk2.charCodeAt(i - this.chunk2Pos);
      else {
        let s = this.rangeIndex, o = this.range;
        for (; o.to <= i; )
          o = this.ranges[++s];
        this.chunk2 = this.input.chunk(this.chunk2Pos = i), i + this.chunk2.length > o.to && (this.chunk2 = this.chunk2.slice(0, o.to - i)), n = this.chunk2.charCodeAt(0);
      }
    }
    return i >= this.token.lookAhead && (this.token.lookAhead = i + 1), n;
  }
  /**
  Accept a token. By default, the end of the token is set to the
  current stream position, but you can pass an offset (relative to
  the stream position) to change that.
  */
  acceptToken(t, r = 0) {
    let i = r ? this.resolveOffset(r, -1) : this.pos;
    if (i == null || i < this.token.start)
      throw new RangeError("Token end out of bounds");
    this.token.value = t, this.token.end = i;
  }
  /**
  Accept a token ending at a specific given position.
  */
  acceptTokenTo(t, r) {
    this.token.value = t, this.token.end = r;
  }
  getChunk() {
    if (this.pos >= this.chunk2Pos && this.pos < this.chunk2Pos + this.chunk2.length) {
      let { chunk: t, chunkPos: r } = this;
      this.chunk = this.chunk2, this.chunkPos = this.chunk2Pos, this.chunk2 = t, this.chunk2Pos = r, this.chunkOff = this.pos - this.chunkPos;
    } else {
      this.chunk2 = this.chunk, this.chunk2Pos = this.chunkPos;
      let t = this.input.chunk(this.pos), r = this.pos + t.length;
      this.chunk = r > this.range.to ? t.slice(0, this.range.to - this.pos) : t, this.chunkPos = this.pos, this.chunkOff = 0;
    }
  }
  readNext() {
    return this.chunkOff >= this.chunk.length && (this.getChunk(), this.chunkOff == this.chunk.length) ? this.next = -1 : this.next = this.chunk.charCodeAt(this.chunkOff);
  }
  /**
  Move the stream forward N (defaults to 1) code units. Returns
  the new value of [`next`](#lr.InputStream.next).
  */
  advance(t = 1) {
    for (this.chunkOff += t; this.pos + t >= this.range.to; ) {
      if (this.rangeIndex == this.ranges.length - 1)
        return this.setDone();
      t -= this.range.to - this.pos, this.range = this.ranges[++this.rangeIndex], this.pos = this.range.from;
    }
    return this.pos += t, this.pos >= this.token.lookAhead && (this.token.lookAhead = this.pos + 1), this.readNext();
  }
  setDone() {
    return this.pos = this.chunkPos = this.end, this.range = this.ranges[this.rangeIndex = this.ranges.length - 1], this.chunk = "", this.next = -1;
  }
  /**
  @internal
  */
  reset(t, r) {
    if (r ? (this.token = r, r.start = t, r.lookAhead = t + 1, r.value = r.extended = -1) : this.token = df, this.pos != t) {
      if (this.pos = t, t == this.end)
        return this.setDone(), this;
      for (; t < this.range.from; )
        this.range = this.ranges[--this.rangeIndex];
      for (; t >= this.range.to; )
        this.range = this.ranges[++this.rangeIndex];
      t >= this.chunkPos && t < this.chunkPos + this.chunk.length ? this.chunkOff = t - this.chunkPos : (this.chunk = "", this.chunkOff = 0), this.readNext();
    }
    return this;
  }
  /**
  @internal
  */
  read(t, r) {
    if (t >= this.chunkPos && r <= this.chunkPos + this.chunk.length)
      return this.chunk.slice(t - this.chunkPos, r - this.chunkPos);
    if (t >= this.chunk2Pos && r <= this.chunk2Pos + this.chunk2.length)
      return this.chunk2.slice(t - this.chunk2Pos, r - this.chunk2Pos);
    if (t >= this.range.from && r <= this.range.to)
      return this.input.read(t, r);
    let i = "";
    for (let n of this.ranges) {
      if (n.from >= r)
        break;
      n.to > t && (i += this.input.read(Math.max(n.from, t), Math.min(n.to, r)));
    }
    return i;
  }
}
class on {
  constructor(t, r) {
    this.data = t, this.id = r;
  }
  token(t, r) {
    let { parser: i } = r.p;
    kp(this.data, t, r, this.id, i.data, i.tokenPrecTable);
  }
}
on.prototype.contextual = on.prototype.fallback = on.prototype.extend = !1;
class Ts {
  constructor(t, r, i) {
    this.precTable = r, this.elseToken = i, this.data = typeof t == "string" ? Bn(t) : t;
  }
  token(t, r) {
    let i = t.pos, n = 0;
    for (; ; ) {
      let a = t.next < 0, s = t.resolveOffset(1, 1);
      if (kp(this.data, t, r, 0, this.data, this.precTable), t.token.value > -1)
        break;
      if (this.elseToken == null)
        return;
      if (a || n++, s == null)
        break;
      t.reset(s, t.token);
    }
    n && (t.reset(i, t.token), t.acceptToken(this.elseToken, n));
  }
}
Ts.prototype.contextual = on.prototype.fallback = on.prototype.extend = !1;
class mr {
  /**
  Create a tokenizer. The first argument is the function that,
  given an input stream, scans for the types of tokens it
  recognizes at the stream's position, and calls
  [`acceptToken`](#lr.InputStream.acceptToken) when it finds
  one.
  */
  constructor(t, r = {}) {
    this.token = t, this.contextual = !!r.contextual, this.fallback = !!r.fallback, this.extend = !!r.extend;
  }
}
function kp(e, t, r, i, n, a) {
  let s = 0, o = 1 << i, { dialect: l } = r.p.parser;
  e:
    for (; o & e[s]; ) {
      let c = e[s + 1];
      for (let d = s + 3; d < c; d += 2)
        if ((e[d + 1] & o) > 0) {
          let g = e[d];
          if (l.allows(g) && (t.token.value == -1 || t.token.value == g || OR(g, t.token.value, n, a))) {
            t.acceptToken(g);
            break;
          }
        }
      let f = t.next, p = 0, O = e[s + 2];
      if (t.next < 0 && O > p && e[c + O * 3 - 3] == 65535) {
        s = e[c + O * 3 - 1];
        continue e;
      }
      for (; p < O; ) {
        let d = p + O >> 1, g = c + d + (d << 1), L = e[g], D = e[g + 1] || 65536;
        if (f < L)
          O = d;
        else if (f >= D)
          p = d + 1;
        else {
          s = e[g + 2], t.advance();
          continue e;
        }
      }
      break;
    }
}
function Tf(e, t, r) {
  for (let i = t, n; (n = e[i]) != 65535; i++)
    if (n == r)
      return i - t;
  return -1;
}
function OR(e, t, r, i) {
  let n = Tf(r, i, t);
  return n < 0 || Tf(r, i, e) < n;
}
const tr = typeof process < "u" && process.env && /\bparse\b/.test(process.env.LOG);
let No = null;
function Sf(e, t, r) {
  let i = e.cursor(st.IncludeAnonymous);
  for (i.moveTo(t); ; )
    if (!(r < 0 ? i.childBefore(t) : i.childAfter(t)))
      for (; ; ) {
        if ((r < 0 ? i.to < t : i.from > t) && !i.type.isError)
          return r < 0 ? Math.max(0, Math.min(
            i.to - 1,
            t - 25
            /* Safety.Margin */
          )) : Math.min(e.length, Math.max(
            i.from + 1,
            t + 25
            /* Safety.Margin */
          ));
        if (r < 0 ? i.prevSibling() : i.nextSibling())
          break;
        if (!i.parent())
          return r < 0 ? 0 : e.length;
      }
}
class ER {
  constructor(t, r) {
    this.fragments = t, this.nodeSet = r, this.i = 0, this.fragment = null, this.safeFrom = -1, this.safeTo = -1, this.trees = [], this.start = [], this.index = [], this.nextFragment();
  }
  nextFragment() {
    let t = this.fragment = this.i == this.fragments.length ? null : this.fragments[this.i++];
    if (t) {
      for (this.safeFrom = t.openStart ? Sf(t.tree, t.from + t.offset, 1) - t.offset : t.from, this.safeTo = t.openEnd ? Sf(t.tree, t.to + t.offset, -1) - t.offset : t.to; this.trees.length; )
        this.trees.pop(), this.start.pop(), this.index.pop();
      this.trees.push(t.tree), this.start.push(-t.offset), this.index.push(0), this.nextStart = this.safeFrom;
    } else
      this.nextStart = 1e9;
  }
  // `pos` must be >= any previously given `pos` for this cursor
  nodeAt(t) {
    if (t < this.nextStart)
      return null;
    for (; this.fragment && this.safeTo <= t; )
      this.nextFragment();
    if (!this.fragment)
      return null;
    for (; ; ) {
      let r = this.trees.length - 1;
      if (r < 0)
        return this.nextFragment(), null;
      let i = this.trees[r], n = this.index[r];
      if (n == i.children.length) {
        this.trees.pop(), this.start.pop(), this.index.pop();
        continue;
      }
      let a = i.children[n], s = this.start[r] + i.positions[n];
      if (s > t)
        return this.nextStart = s, null;
      if (a instanceof ht) {
        if (s == t) {
          if (s < this.safeFrom)
            return null;
          let o = s + a.length;
          if (o <= this.safeTo) {
            let l = a.prop(Le.lookAhead);
            if (!l || o + l < this.fragment.to)
              return a;
          }
        }
        this.index[r]++, s + a.length >= Math.max(this.safeFrom, t) && (this.trees.push(a), this.start.push(s), this.index.push(0));
      } else
        this.index[r]++, this.nextStart = s + a.length;
    }
  }
}
class dR {
  constructor(t, r) {
    this.stream = r, this.tokens = [], this.mainToken = null, this.actions = [], this.tokens = t.tokenizers.map((i) => new ts());
  }
  getActions(t) {
    let r = 0, i = null, { parser: n } = t.p, { tokenizers: a } = n, s = n.stateSlot(
      t.state,
      3
      /* ParseState.TokenizerMask */
    ), o = t.curContext ? t.curContext.hash : 0, l = 0;
    for (let c = 0; c < a.length; c++) {
      if (!(1 << c & s))
        continue;
      let f = a[c], p = this.tokens[c];
      if (!(i && !f.fallback) && ((f.contextual || p.start != t.pos || p.mask != s || p.context != o) && (this.updateCachedToken(p, f, t), p.mask = s, p.context = o), p.lookAhead > p.end + 25 && (l = Math.max(p.lookAhead, l)), p.value != 0)) {
        let O = r;
        if (p.extended > -1 && (r = this.addActions(t, p.extended, p.end, r)), r = this.addActions(t, p.value, p.end, r), !f.extend && (i = p, r > O))
          break;
      }
    }
    for (; this.actions.length > r; )
      this.actions.pop();
    return l && t.setLookAhead(l), !i && t.pos == this.stream.end && (i = new ts(), i.value = t.p.parser.eofTerm, i.start = i.end = t.pos, r = this.addActions(t, i.value, i.end, r)), this.mainToken = i, this.actions;
  }
  getMainToken(t) {
    if (this.mainToken)
      return this.mainToken;
    let r = new ts(), { pos: i, p: n } = t;
    return r.start = i, r.end = Math.min(i + 1, n.stream.end), r.value = i == n.stream.end ? n.parser.eofTerm : 0, r;
  }
  updateCachedToken(t, r, i) {
    let n = this.stream.clipPos(i.pos);
    if (r.token(this.stream.reset(n, t), i), t.value > -1) {
      let { parser: a } = i.p;
      for (let s = 0; s < a.specialized.length; s++)
        if (a.specialized[s] == t.value) {
          let o = a.specializers[s](this.stream.read(t.start, t.end), i);
          if (o >= 0 && i.p.parser.dialect.allows(o >> 1)) {
            o & 1 ? t.extended = o >> 1 : t.value = o >> 1;
            break;
          }
        }
    } else
      t.value = 0, t.end = this.stream.clipPos(n + 1);
  }
  putAction(t, r, i, n) {
    for (let a = 0; a < n; a += 3)
      if (this.actions[a] == t)
        return n;
    return this.actions[n++] = t, this.actions[n++] = r, this.actions[n++] = i, n;
  }
  addActions(t, r, i, n) {
    let { state: a } = t, { parser: s } = t.p, { data: o } = s;
    for (let l = 0; l < 2; l++)
      for (let c = s.stateSlot(
        a,
        l ? 2 : 1
        /* ParseState.Actions */
      ); ; c += 3) {
        if (o[c] == 65535)
          if (o[c + 1] == 1)
            c = zr(o, c + 2);
          else {
            n == 0 && o[c + 1] == 2 && (n = this.putAction(zr(o, c + 2), r, i, n));
            break;
          }
        o[c] == r && (n = this.putAction(zr(o, c + 1), r, i, n));
      }
    return n;
  }
}
class TR {
  constructor(t, r, i, n) {
    this.parser = t, this.input = r, this.ranges = n, this.recovering = 0, this.nextStackID = 9812, this.minStackPos = 0, this.reused = [], this.stoppedAt = null, this.lastBigReductionStart = -1, this.lastBigReductionSize = 0, this.bigReductionCount = 0, this.stream = new pR(r, n), this.tokens = new dR(t, this.stream), this.topTerm = t.top[1];
    let { from: a } = n[0];
    this.stacks = [Es.start(this, t.top[0], a)], this.fragments = i.length && this.stream.end - a > t.bufferLength * 4 ? new ER(i, t.nodeSet) : null;
  }
  get parsedPos() {
    return this.minStackPos;
  }
  // Move the parser forward. This will process all parse stacks at
  // `this.pos` and try to advance them to a further position. If no
  // stack for such a position is found, it'll start error-recovery.
  //
  // When the parse is finished, this will return a syntax tree. When
  // not, it returns `null`.
  advance() {
    let t = this.stacks, r = this.minStackPos, i = this.stacks = [], n, a;
    if (this.bigReductionCount > 300 && t.length == 1) {
      let [s] = t;
      for (; s.forceReduce() && s.stack.length && s.stack[s.stack.length - 2] >= this.lastBigReductionStart; )
        ;
      this.bigReductionCount = this.lastBigReductionSize = 0;
    }
    for (let s = 0; s < t.length; s++) {
      let o = t[s];
      for (; ; ) {
        if (this.tokens.mainToken = null, o.pos > r)
          i.push(o);
        else {
          if (this.advanceStack(o, i, t))
            continue;
          {
            n || (n = [], a = []), n.push(o);
            let l = this.tokens.getMainToken(o);
            a.push(l.value, l.end);
          }
        }
        break;
      }
    }
    if (!i.length) {
      let s = n && mR(n);
      if (s)
        return tr && console.log("Finish with " + this.stackID(s)), this.stackToTree(s);
      if (this.parser.strict)
        throw tr && n && console.log("Stuck with token " + (this.tokens.mainToken ? this.parser.getName(this.tokens.mainToken.value) : "none")), new SyntaxError("No parse at " + r);
      this.recovering || (this.recovering = 5);
    }
    if (this.recovering && n) {
      let s = this.stoppedAt != null && n[0].pos > this.stoppedAt ? n[0] : this.runRecovery(n, a, i);
      if (s)
        return tr && console.log("Force-finish " + this.stackID(s)), this.stackToTree(s.forceAll());
    }
    if (this.recovering) {
      let s = this.recovering == 1 ? 1 : this.recovering * 3;
      if (i.length > s)
        for (i.sort((o, l) => l.score - o.score); i.length > s; )
          i.pop();
      i.some((o) => o.reducePos > r) && this.recovering--;
    } else if (i.length > 1) {
      e:
        for (let s = 0; s < i.length - 1; s++) {
          let o = i[s];
          for (let l = s + 1; l < i.length; l++) {
            let c = i[l];
            if (o.sameState(c) || o.buffer.length > 500 && c.buffer.length > 500)
              if ((o.score - c.score || o.buffer.length - c.buffer.length) > 0)
                i.splice(l--, 1);
              else {
                i.splice(s--, 1);
                continue e;
              }
          }
        }
      i.length > 12 && i.splice(
        12,
        i.length - 12
        /* Rec.MaxStackCount */
      );
    }
    this.minStackPos = i[0].pos;
    for (let s = 1; s < i.length; s++)
      i[s].pos < this.minStackPos && (this.minStackPos = i[s].pos);
    return null;
  }
  stopAt(t) {
    if (this.stoppedAt != null && this.stoppedAt < t)
      throw new RangeError("Can't move stoppedAt forward");
    this.stoppedAt = t;
  }
  // Returns an updated version of the given stack, or null if the
  // stack can't advance normally. When `split` and `stacks` are
  // given, stacks split off by ambiguous operations will be pushed to
  // `split`, or added to `stacks` if they move `pos` forward.
  advanceStack(t, r, i) {
    let n = t.pos, { parser: a } = this, s = tr ? this.stackID(t) + " -> " : "";
    if (this.stoppedAt != null && n > this.stoppedAt)
      return t.forceReduce() ? t : null;
    if (this.fragments) {
      let c = t.curContext && t.curContext.tracker.strict, f = c ? t.curContext.hash : 0;
      for (let p = this.fragments.nodeAt(n); p; ) {
        let O = this.parser.nodeSet.types[p.type.id] == p.type ? a.getGoto(t.state, p.type.id) : -1;
        if (O > -1 && p.length && (!c || (p.prop(Le.contextHash) || 0) == f))
          return t.useNode(p, O), tr && console.log(s + this.stackID(t) + ` (via reuse of ${a.getName(p.type.id)})`), !0;
        if (!(p instanceof ht) || p.children.length == 0 || p.positions[0] > 0)
          break;
        let d = p.children[0];
        if (d instanceof ht && p.positions[0] == 0)
          p = d;
        else
          break;
      }
    }
    let o = a.stateSlot(
      t.state,
      4
      /* ParseState.DefaultReduce */
    );
    if (o > 0)
      return t.reduce(o), tr && console.log(s + this.stackID(t) + ` (via always-reduce ${a.getName(
        o & 65535
        /* Action.ValueMask */
      )})`), !0;
    if (t.stack.length >= 8400)
      for (; t.stack.length > 6e3 && t.forceReduce(); )
        ;
    let l = this.tokens.getActions(t);
    for (let c = 0; c < l.length; ) {
      let f = l[c++], p = l[c++], O = l[c++], d = c == l.length || !i, g = d ? t : t.split(), L = this.tokens.mainToken;
      if (g.apply(f, p, L ? L.start : g.pos, O), tr && console.log(s + this.stackID(g) + ` (via ${f & 65536 ? `reduce of ${a.getName(
        f & 65535
        /* Action.ValueMask */
      )}` : "shift"} for ${a.getName(p)} @ ${n}${g == t ? "" : ", split"})`), d)
        return !0;
      g.pos > n ? r.push(g) : i.push(g);
    }
    return !1;
  }
  // Advance a given stack forward as far as it will go. Returns the
  // (possibly updated) stack if it got stuck, or null if it moved
  // forward and was given to `pushStackDedup`.
  advanceFully(t, r) {
    let i = t.pos;
    for (; ; ) {
      if (!this.advanceStack(t, null, null))
        return !1;
      if (t.pos > i)
        return mf(t, r), !0;
    }
  }
  runRecovery(t, r, i) {
    let n = null, a = !1;
    for (let s = 0; s < t.length; s++) {
      let o = t[s], l = r[s << 1], c = r[(s << 1) + 1], f = tr ? this.stackID(o) + " -> " : "";
      if (o.deadEnd && (a || (a = !0, o.restart(), tr && console.log(f + this.stackID(o) + " (restarted)"), this.advanceFully(o, i))))
        continue;
      let p = o.split(), O = f;
      for (let d = 0; p.forceReduce() && d < 10 && (tr && console.log(O + this.stackID(p) + " (via force-reduce)"), !this.advanceFully(p, i)); d++)
        tr && (O = this.stackID(p) + " -> ");
      for (let d of o.recoverByInsert(l))
        tr && console.log(f + this.stackID(d) + " (via recover-insert)"), this.advanceFully(d, i);
      this.stream.end > o.pos ? (c == o.pos && (c++, l = 0), o.recoverByDelete(l, c), tr && console.log(f + this.stackID(o) + ` (via recover-delete ${this.parser.getName(l)})`), mf(o, i)) : (!n || n.score < o.score) && (n = o);
    }
    return n;
  }
  // Convert the stack's buffer to a syntax tree.
  stackToTree(t) {
    return t.close(), ht.build({
      buffer: ds.create(t),
      nodeSet: this.parser.nodeSet,
      topID: this.topTerm,
      maxBufferLength: this.parser.bufferLength,
      reused: this.reused,
      start: this.ranges[0].from,
      length: t.pos - this.ranges[0].from,
      minRepeatType: this.parser.minRepeatTerm
    });
  }
  stackID(t) {
    let r = (No || (No = /* @__PURE__ */ new WeakMap())).get(t);
    return r || No.set(t, r = String.fromCodePoint(this.nextStackID++)), r + t;
  }
}
function mf(e, t) {
  for (let r = 0; r < t.length; r++) {
    let i = t[r];
    if (i.pos == e.pos && i.sameState(e)) {
      t[r].score < e.score && (t[r] = e);
      return;
    }
  }
  t.push(e);
}
class SR {
  constructor(t, r, i) {
    this.source = t, this.flags = r, this.disabled = i;
  }
  allows(t) {
    return !this.disabled || this.disabled[t] == 0;
  }
}
const Po = (e) => e;
class Qp {
  /**
  Define a context tracker.
  */
  constructor(t) {
    this.start = t.start, this.shift = t.shift || Po, this.reduce = t.reduce || Po, this.reuse = t.reuse || Po, this.hash = t.hash || (() => 0), this.strict = t.strict !== !1;
  }
}
class Ri extends fp {
  /**
  @internal
  */
  constructor(t) {
    if (super(), this.wrappers = [], t.version != 14)
      throw new RangeError(`Parser version (${t.version}) doesn't match runtime version (14)`);
    let r = t.nodeNames.split(" ");
    this.minRepeatTerm = r.length;
    for (let o = 0; o < t.repeatNodeCount; o++)
      r.push("");
    let i = Object.keys(t.topRules).map((o) => t.topRules[o][1]), n = [];
    for (let o = 0; o < r.length; o++)
      n.push([]);
    function a(o, l, c) {
      n[o].push([l, l.deserialize(String(c))]);
    }
    if (t.nodeProps)
      for (let o of t.nodeProps) {
        let l = o[0];
        typeof l == "string" && (l = Le[l]);
        for (let c = 1; c < o.length; ) {
          let f = o[c++];
          if (f >= 0)
            a(f, l, o[c++]);
          else {
            let p = o[c + -f];
            for (let O = -f; O > 0; O--)
              a(o[c++], l, p);
            c++;
          }
        }
      }
    this.nodeSet = new yu(r.map((o, l) => or.define({
      name: l >= this.minRepeatTerm ? void 0 : o,
      id: l,
      props: n[l],
      top: i.indexOf(l) > -1,
      error: l == 0,
      skipped: t.skippedNodes && t.skippedNodes.indexOf(l) > -1
    }))), t.propSources && (this.nodeSet = this.nodeSet.extend(...t.propSources)), this.strict = !1, this.bufferLength = ap;
    let s = Bn(t.tokenData);
    this.context = t.context, this.specializerSpecs = t.specialized || [], this.specialized = new Uint16Array(this.specializerSpecs.length);
    for (let o = 0; o < this.specializerSpecs.length; o++)
      this.specialized[o] = this.specializerSpecs[o].term;
    this.specializers = this.specializerSpecs.map(Rf), this.states = Bn(t.states, Uint32Array), this.data = Bn(t.stateData), this.goto = Bn(t.goto), this.maxTerm = t.maxTerm, this.tokenizers = t.tokenizers.map((o) => typeof o == "number" ? new on(s, o) : o), this.topRules = t.topRules, this.dialects = t.dialects || {}, this.dynamicPrecedences = t.dynamicPrecedences || null, this.tokenPrecTable = t.tokenPrec, this.termNames = t.termNames || null, this.maxNode = this.nodeSet.types.length - 1, this.dialect = this.parseDialect(), this.top = this.topRules[Object.keys(this.topRules)[0]];
  }
  createParse(t, r, i) {
    let n = new TR(this, t, r, i);
    for (let a of this.wrappers)
      n = a(n, t, r, i);
    return n;
  }
  /**
  Get a goto table entry @internal
  */
  getGoto(t, r, i = !1) {
    let n = this.goto;
    if (r >= n[0])
      return -1;
    for (let a = n[r + 1]; ; ) {
      let s = n[a++], o = s & 1, l = n[a++];
      if (o && i)
        return l;
      for (let c = a + (s >> 1); a < c; a++)
        if (n[a] == t)
          return l;
      if (o)
        return -1;
    }
  }
  /**
  Check if this state has an action for a given terminal @internal
  */
  hasAction(t, r) {
    let i = this.data;
    for (let n = 0; n < 2; n++)
      for (let a = this.stateSlot(
        t,
        n ? 2 : 1
        /* ParseState.Actions */
      ), s; ; a += 3) {
        if ((s = i[a]) == 65535)
          if (i[a + 1] == 1)
            s = i[a = zr(i, a + 2)];
          else {
            if (i[a + 1] == 2)
              return zr(i, a + 2);
            break;
          }
        if (s == r || s == 0)
          return zr(i, a + 1);
      }
    return 0;
  }
  /**
  @internal
  */
  stateSlot(t, r) {
    return this.states[t * 6 + r];
  }
  /**
  @internal
  */
  stateFlag(t, r) {
    return (this.stateSlot(
      t,
      0
      /* ParseState.Flags */
    ) & r) > 0;
  }
  /**
  @internal
  */
  validAction(t, r) {
    return !!this.allActions(t, (i) => i == r ? !0 : null);
  }
  /**
  @internal
  */
  allActions(t, r) {
    let i = this.stateSlot(
      t,
      4
      /* ParseState.DefaultReduce */
    ), n = i ? r(i) : void 0;
    for (let a = this.stateSlot(
      t,
      1
      /* ParseState.Actions */
    ); n == null; a += 3) {
      if (this.data[a] == 65535)
        if (this.data[a + 1] == 1)
          a = zr(this.data, a + 2);
        else
          break;
      n = r(zr(this.data, a + 1));
    }
    return n;
  }
  /**
  Get the states that can follow this one through shift actions or
  goto jumps. @internal
  */
  nextStates(t) {
    let r = [];
    for (let i = this.stateSlot(
      t,
      1
      /* ParseState.Actions */
    ); ; i += 3) {
      if (this.data[i] == 65535)
        if (this.data[i + 1] == 1)
          i = zr(this.data, i + 2);
        else
          break;
      if (!(this.data[i + 2] & 1)) {
        let n = this.data[i + 1];
        r.some((a, s) => s & 1 && a == n) || r.push(this.data[i], n);
      }
    }
    return r;
  }
  /**
  Configure the parser. Returns a new parser instance that has the
  given settings modified. Settings not provided in `config` are
  kept from the original parser.
  */
  configure(t) {
    let r = Object.assign(Object.create(Ri.prototype), this);
    if (t.props && (r.nodeSet = this.nodeSet.extend(...t.props)), t.top) {
      let i = this.topRules[t.top];
      if (!i)
        throw new RangeError(`Invalid top rule name ${t.top}`);
      r.top = i;
    }
    return t.tokenizers && (r.tokenizers = this.tokenizers.map((i) => {
      let n = t.tokenizers.find((a) => a.from == i);
      return n ? n.to : i;
    })), t.specializers && (r.specializers = this.specializers.slice(), r.specializerSpecs = this.specializerSpecs.map((i, n) => {
      let a = t.specializers.find((o) => o.from == i.external);
      if (!a)
        return i;
      let s = Object.assign(Object.assign({}, i), { external: a.to });
      return r.specializers[n] = Rf(s), s;
    })), t.contextTracker && (r.context = t.contextTracker), t.dialect && (r.dialect = this.parseDialect(t.dialect)), t.strict != null && (r.strict = t.strict), t.wrap && (r.wrappers = r.wrappers.concat(t.wrap)), t.bufferLength != null && (r.bufferLength = t.bufferLength), r;
  }
  /**
  Tells you whether any [parse wrappers](#lr.ParserConfig.wrap)
  are registered for this parser.
  */
  hasWrappers() {
    return this.wrappers.length > 0;
  }
  /**
  Returns the name associated with a given term. This will only
  work for all terms when the parser was generated with the
  `--names` option. By default, only the names of tagged terms are
  stored.
  */
  getName(t) {
    return this.termNames ? this.termNames[t] : String(t <= this.maxNode && this.nodeSet.types[t].name || t);
  }
  /**
  The eof term id is always allocated directly after the node
  types. @internal
  */
  get eofTerm() {
    return this.maxNode + 1;
  }
  /**
  The type of top node produced by the parser.
  */
  get topNode() {
    return this.nodeSet.types[this.top[1]];
  }
  /**
  @internal
  */
  dynamicPrecedence(t) {
    let r = this.dynamicPrecedences;
    return r == null ? 0 : r[t] || 0;
  }
  /**
  @internal
  */
  parseDialect(t) {
    let r = Object.keys(this.dialects), i = r.map(() => !1);
    if (t)
      for (let a of t.split(" ")) {
        let s = r.indexOf(a);
        s >= 0 && (i[s] = !0);
      }
    let n = null;
    for (let a = 0; a < r.length; a++)
      if (!i[a])
        for (let s = this.dialects[r[a]], o; (o = this.data[s++]) != 65535; )
          (n || (n = new Uint8Array(this.maxTerm + 1)))[o] = 1;
    return new SR(t, i, n);
  }
  /**
  Used by the output of the parser generator. Not available to
  user code. @hide
  */
  static deserialize(t) {
    return new Ri(t);
  }
}
function zr(e, t) {
  return e[t] | e[t + 1] << 16;
}
function mR(e) {
  let t = null;
  for (let r of e) {
    let i = r.p.stoppedAt;
    (r.pos == r.p.stream.end || i != null && r.pos > i) && r.p.parser.stateFlag(
      r.state,
      2
      /* StateFlag.Accepting */
    ) && (!t || t.score < r.score) && (t = r);
  }
  return t;
}
function Rf(e) {
  if (e.external) {
    let t = e.extend ? 1 : 0;
    return (r, i) => e.external(r, i) << 1 | t;
  }
  return e.get;
}
const RR = 310, Af = 1, AR = 2, gR = 3, yR = 311, IR = 313, NR = 314, PR = 4, _R = 5, bR = 0, ll = [
  9,
  10,
  11,
  12,
  13,
  32,
  133,
  160,
  5760,
  8192,
  8193,
  8194,
  8195,
  8196,
  8197,
  8198,
  8199,
  8200,
  8201,
  8202,
  8232,
  8233,
  8239,
  8287,
  12288
], Gp = 125, vR = 59, ul = 47, CR = 42, LR = 43, xR = 45, DR = 60, UR = 44, wR = new Qp({
  start: !1,
  shift(e, t) {
    return t == PR || t == _R || t == IR ? e : t == NR;
  },
  strict: !1
}), MR = new mr((e, t) => {
  let { next: r } = e;
  (r == Gp || r == -1 || t.context) && e.acceptToken(yR);
}, { contextual: !0, fallback: !0 }), kR = new mr((e, t) => {
  let { next: r } = e, i;
  ll.indexOf(r) > -1 || r == ul && ((i = e.peek(1)) == ul || i == CR) || r != Gp && r != vR && r != -1 && !t.context && e.acceptToken(RR);
}, { contextual: !0 }), QR = new mr((e, t) => {
  let { next: r } = e;
  if ((r == LR || r == xR) && (e.advance(), r == e.next)) {
    e.advance();
    let i = !t.context && t.canShift(Af);
    e.acceptToken(i ? Af : AR);
  }
}, { contextual: !0 });
function _o(e, t) {
  return e >= 65 && e <= 90 || e >= 97 && e <= 122 || e == 95 || e >= 192 || !t && e >= 48 && e <= 57;
}
const GR = new mr((e, t) => {
  if (e.next != DR || !t.dialectEnabled(bR) || (e.advance(), e.next == ul))
    return;
  let r = 0;
  for (; ll.indexOf(e.next) > -1; )
    e.advance(), r++;
  if (_o(e.next, !0)) {
    for (e.advance(), r++; _o(e.next, !1); )
      e.advance(), r++;
    for (; ll.indexOf(e.next) > -1; )
      e.advance(), r++;
    if (e.next == UR)
      return;
    for (let i = 0; ; i++) {
      if (i == 7) {
        if (!_o(e.next, !0))
          return;
        break;
      }
      if (e.next != "extends".charCodeAt(i))
        break;
      e.advance(), r++;
    }
  }
  e.acceptToken(gR, -r);
}), VR = An({
  "get set async static": Q.modifier,
  "for while do if else switch try catch finally return throw break continue default case": Q.controlKeyword,
  "in of await yield void typeof delete instanceof": Q.operatorKeyword,
  "let var const using function class extends": Q.definitionKeyword,
  "import export from": Q.moduleKeyword,
  "with debugger as new": Q.keyword,
  TemplateString: Q.special(Q.string),
  super: Q.atom,
  BooleanLiteral: Q.bool,
  this: Q.self,
  null: Q.null,
  Star: Q.modifier,
  VariableName: Q.variableName,
  "CallExpression/VariableName TaggedTemplateExpression/VariableName": Q.function(Q.variableName),
  VariableDefinition: Q.definition(Q.variableName),
  Label: Q.labelName,
  PropertyName: Q.propertyName,
  PrivatePropertyName: Q.special(Q.propertyName),
  "CallExpression/MemberExpression/PropertyName": Q.function(Q.propertyName),
  "FunctionDeclaration/VariableDefinition": Q.function(Q.definition(Q.variableName)),
  "ClassDeclaration/VariableDefinition": Q.definition(Q.className),
  PropertyDefinition: Q.definition(Q.propertyName),
  PrivatePropertyDefinition: Q.definition(Q.special(Q.propertyName)),
  UpdateOp: Q.updateOperator,
  "LineComment Hashbang": Q.lineComment,
  BlockComment: Q.blockComment,
  Number: Q.number,
  String: Q.string,
  Escape: Q.escape,
  ArithOp: Q.arithmeticOperator,
  LogicOp: Q.logicOperator,
  BitOp: Q.bitwiseOperator,
  CompareOp: Q.compareOperator,
  RegExp: Q.regexp,
  Equals: Q.definitionOperator,
  Arrow: Q.function(Q.punctuation),
  ": Spread": Q.punctuation,
  "( )": Q.paren,
  "[ ]": Q.squareBracket,
  "{ }": Q.brace,
  "InterpolationStart InterpolationEnd": Q.special(Q.brace),
  ".": Q.derefOperator,
  ", ;": Q.separator,
  "@": Q.meta,
  TypeName: Q.typeName,
  TypeDefinition: Q.definition(Q.typeName),
  "type enum interface implements namespace module declare": Q.definitionKeyword,
  "abstract global Privacy readonly override": Q.modifier,
  "is keyof unique infer": Q.operatorKeyword,
  JSXAttributeValue: Q.attributeValue,
  JSXText: Q.content,
  "JSXStartTag JSXStartCloseTag JSXSelfCloseEndTag JSXEndTag": Q.angleBracket,
  "JSXIdentifier JSXNameSpacedName": Q.tagName,
  "JSXAttribute/JSXIdentifier JSXAttribute/JSXNameSpacedName": Q.attributeName,
  "JSXBuiltin/JSXIdentifier": Q.standard(Q.tagName)
}), BR = { __proto__: null, export: 18, as: 23, from: 31, default: 34, async: 39, function: 40, extends: 52, this: 56, true: 64, false: 64, null: 76, void: 80, typeof: 84, super: 102, new: 136, delete: 154, yield: 163, await: 167, class: 172, public: 229, private: 229, protected: 229, readonly: 231, instanceof: 250, satisfies: 253, in: 254, const: 256, import: 288, keyof: 341, unique: 345, infer: 351, is: 387, abstract: 407, implements: 409, type: 411, let: 414, var: 416, using: 419, interface: 425, enum: 429, namespace: 435, module: 437, declare: 441, global: 445, for: 464, of: 473, while: 476, with: 480, do: 484, if: 488, else: 490, switch: 494, case: 500, try: 506, catch: 510, finally: 514, return: 518, throw: 522, break: 526, continue: 530, debugger: 534 }, $R = { __proto__: null, async: 123, get: 125, set: 127, declare: 189, public: 191, private: 191, protected: 191, static: 193, abstract: 195, override: 197, readonly: 203, accessor: 205, new: 391 }, YR = { __proto__: null, "<": 145 }, FR = Ri.deserialize({
  version: 14,
  states: "$=dO%TQ^OOO%[Q^OOO'_Q`OOP(lOWOOO*zQ?NdO'#ChO+RO!bO'#CiO+aO#tO'#CiO+oO!0LbO'#D^O.QQ^O'#DdO.bQ^O'#DoO%[Q^O'#DzO0fQ^O'#ESOOQ?Mr'#E['#E[O1PQWO'#EXOOQO'#Em'#EmOOQO'#If'#IfO1XQWO'#GnO1dQWO'#ElO1iQWO'#ElO3kQ?NdO'#JjO6[Q?NdO'#JkO6xQWO'#F[O6}Q&jO'#FrOOQ?Mr'#Fd'#FdO7YO,YO'#FdO7hQ7[O'#FyO9UQWO'#FxOOQ?Mr'#Jk'#JkOOQ?Mp'#Jj'#JjO9ZQWO'#GrOOQU'#KW'#KWO9fQWO'#ISO9kQ?MxO'#ITOOQU'#JX'#JXOOQU'#IX'#IXQ`Q^OOO`Q^OOO9sQMnO'#DsO9zQ^O'#EOO:RQ^O'#EQO9aQWO'#GnO:YQ7[O'#CnO:hQWO'#EkO:sQWO'#EvO:xQ7[O'#FcO;gQWO'#GnOOQO'#KX'#KXO;lQWO'#KXO;zQWO'#GvO;zQWO'#GwO;zQWO'#GyO9aQWO'#G|O<qQWO'#HPO>YQWO'#CdO>jQWO'#H]O>rQWO'#HcO>rQWO'#HeO`Q^O'#HgO>rQWO'#HiO>rQWO'#HlO>wQWO'#HrO>|Q?MyO'#HxO%[Q^O'#HzO?XQ?MyO'#H|O?dQ?MyO'#IOO9kQ?MxO'#IQO?oQ?NdO'#ChO@qQ`O'#DiQOQWOOO%[Q^O'#EQOAXQWO'#ETO:YQ7[O'#EkOAdQWO'#EkOAoQpO'#FcOOQU'#Cf'#CfOOQ?Mp'#Dn'#DnOOQ?Mp'#Jn'#JnO%[Q^O'#JnOOQO'#Jr'#JrOOQO'#Ic'#IcOBoQ`O'#EdOOQ?Mp'#Ec'#EcOOQ?Mp'#Ju'#JuOCkQ?NQO'#EdOCuQ`O'#EWOOQO'#Jq'#JqODZQ`O'#JrOEhQ`O'#EWOCuQ`O'#EdPEuO#@ItO'#CaPOOO)CDv)CDvOOOO'#IY'#IYOFQO!bO,59TOOQ?Mr,59T,59TOOOO'#IZ'#IZOF`O#tO,59TO%[Q^O'#D`OOOO'#I]'#I]OFnO!0LbO,59xOOQ?Mr,59x,59xOF|Q^O'#I^OGaQWO'#JlOIcQrO'#JlO+}Q^O'#JlOIjQWO,5:OOJQQWO'#EmOJ_QWO'#J{OJjQWO'#JzOJjQWO'#JzOJrQWO,5;ZOJwQWO'#JyOOQ?Mv,5:Z,5:ZOKOQ^O,5:ZOMPQ?NdO,5:fOMpQWO,5:nONZQ?MxO'#JxONbQWO'#JwO9ZQWO'#JwONvQWO'#JwO! OQWO,5;YO! TQWO'#JwO!#]QrO'#JkOOQ?Mr'#Ch'#ChO%[Q^O'#ESO!#{QpO,5:sOOQO'#Js'#JsOOQO-E<d-E<dO9aQWO,5=YO!$cQWO,5=YO!$hQ^O,5;WO!&kQ7[O'#EhO!(UQWO,5;WO!)tQ7[O'#DtO!){Q^O'#DyO!*VQ`O,5;aO!*_Q`O,5;aO%[Q^O,5;aOOQU'#FS'#FSOOQU'#FU'#FUO%[Q^O,5;bO%[Q^O,5;bO%[Q^O,5;bO%[Q^O,5;bO%[Q^O,5;bO%[Q^O,5;bO%[Q^O,5;bO%[Q^O,5;bO%[Q^O,5;bO%[Q^O,5;bO%[Q^O,5;bOOQU'#FY'#FYO!*mQ^O,5;sOOQ?Mr,5;x,5;xOOQ?Mr,5;y,5;yO!,pQWO,5;yOOQ?Mr,5;z,5;zO%[Q^O'#IjO!,xQ?MxO,5<fO!&kQ7[O,5;bO!-gQ7[O,5;bO%[Q^O,5;vO!-nQ&jO'#FhO!.kQ&jO'#KPO!.VQ&jO'#KPO!.rQ&jO'#KPOOQO'#KP'#KPO!/WQ&jO,5<QOOOS,5<^,5<^O!/iQ^O'#FtOOOS'#Ii'#IiO7YO,YO,5<OO!/pQ&jO'#FvOOQ?Mr,5<O,5<OO!0aQ!LQO'#CuOOQ?Mr'#Cy'#CyO!0tQWO'#CyO!0yO!0LbO'#C}O!1gQ7[O,5<cO!1nQWO,5<eO!3ZQ$ISO'#GTO!3hQWO'#GUO!3mQWO'#GUO!5]Q$ISO'#GYO!6XQ`O'#G^OOQO'#Gi'#GiO!(ZQ7[O'#GhOOQO'#Gk'#GkO!(ZQ7[O'#GjO!6zQ!LQO'#JeOOQ?Mr'#Je'#JeO!7UQWO'#JdO!7dQWO'#JcO!7lQWO'#CtOOQ?Mr'#Cw'#CwOOQ?Mr'#DR'#DROOQ?Mr'#DT'#DTO1SQWO'#DVO!(ZQ7[O'#F{O!(ZQ7[O'#F}O!7tQWO'#GPO!7yQWO'#GQO!3mQWO'#GWO!(ZQ7[O'#G]O!8OQWO'#EnO!8mQWO,5<dOOQ?Mp'#Cq'#CqO!8uQWO'#EoO!9oQ`O'#EpOOQ?Mp'#Jy'#JyO!9vQ?MxO'#KYO9kQ?MxO,5=^O`Q^O,5>nOOQU'#Ja'#JaOOQU,5>o,5>oOOQU-E<V-E<VO!;xQ?NdO,5:_O!9jQ`O,5:]O!>fQ?NdO,5:jO%[Q^O,5:jO!APQ?NdO,5:lOOQO,5@s,5@sO!ApQ7[O,5=YO!BOQ?MxO'#JbO9UQWO'#JbO!BaQ?MxO,59YO!BlQ`O,59YO!BtQ7[O,59YO:YQ7[O,59YO!CPQWO,5;WO!CXQWO'#H[O!CmQWO'#K]O%[Q^O,5;{O!9jQ`O,5;}O!CuQWO,5=uO!CzQWO,5=uO!DPQWO,5=uO9kQ?MxO,5=uO;zQWO,5=eOOQO'#Cu'#CuO!D_Q`O,5=bO!DgQ7[O,5=cO!DrQWO,5=eO!DwQpO,5=hO!EPQWO'#KXO>wQWO'#HRO9aQWO'#HTO!EUQWO'#HTO:YQ7[O'#HVO!EZQWO'#HVOOQU,5=k,5=kO!E`QWO'#HWO!EqQWO'#CnO!EvQWO,59OO!FQQWO,59OO!HVQ^O,59OOOQU,59O,59OO!HgQ?MxO,59OO%[Q^O,59OO!JrQ^O'#H_OOQU'#H`'#H`OOQU'#Ha'#HaO`Q^O,5=wO!KYQWO,5=wO`Q^O,5=}O`Q^O,5>PO!K_QWO,5>RO`Q^O,5>TO!KdQWO,5>WO!KiQ^O,5>^OOQU,5>d,5>dO%[Q^O,5>dO9kQ?MxO,5>fOOQU,5>h,5>hO# sQWO,5>hOOQU,5>j,5>jO# sQWO,5>jOOQU,5>l,5>lO#!aQ`O'#D[O%[Q^O'#JnO#!kQ`O'#JnO##YQ`O'#DjO##kQ`O'#DjO#%|Q^O'#DjO#&TQWO'#JmO#&]QWO,5:TO#&bQWO'#EqO#&pQWO'#J|O#&xQWO,5;[O#&}Q`O'#DjO#'[Q`O'#EVOOQ?Mr,5:o,5:oO%[Q^O,5:oO#'cQWO,5:oO>wQWO,5;VO!BlQ`O,5;VO!BtQ7[O,5;VO:YQ7[O,5;VO#'kQWO,5@YO#'pQ(CWO,5:sOOQO-E<a-E<aO#(vQ?NQO,5;OOCuQ`O,5:rO#)QQ`O,5:rOCuQ`O,5;OO!BaQ?MxO,5:rOOQ?Mp'#Eg'#EgOOQO,5;O,5;OO%[Q^O,5;OO#)_Q?MxO,5;OO#)jQ?MxO,5;OO!BlQ`O,5:rOOQO,5;U,5;UO#)xQ?MxO,5;OPOOO'#IW'#IWP#*^O#@ItO,58{POOO,58{,58{OOOO-E<W-E<WOOQ?Mr1G.o1G.oOOOO-E<X-E<XO#*iQpO,59zOOOO-E<Z-E<ZOOQ?Mr1G/d1G/dO#*nQrO,5>xO+}Q^O,5>xOOQO,5?O,5?OO#*xQ^O'#I^OOQO-E<[-E<[O#+VQWO,5@WO#+_QrO,5@WO#+fQWO,5@fOOQ?Mr1G/j1G/jO%[Q^O,5@gO#+nQWO'#IdOOQO-E<b-E<bO#+fQWO,5@fOOQ?Mp1G0u1G0uOOQ?Mv1G/u1G/uOOQ?Mv1G0Y1G0YO%[Q^O,5@dO#,SQ?MxO,5@dO#,eQ?MxO,5@dO#,lQWO,5@cO9ZQWO,5@cO#,tQWO,5@cO#-SQWO'#IgO#,lQWO,5@cOOQ?Mp1G0t1G0tO!*VQ`O,5:uO!*bQ`O,5:uOOQO,5:w,5:wO#-tQWO,5:wO#-|Q7[O1G2tO9aQWO1G2tOOQ?Mr1G0r1G0rO#.[Q?NdO1G0rO#/aQ?NbO,5;SOOQ?Mr'#GS'#GSO#/}Q?NdO'#JeO!$hQ^O1G0rO#2VQ7[O'#JoO#2aQWO,5:`O#2fQrO'#JpO%[Q^O'#JpO#2pQWO,5:eOOQ?Mr'#D['#D[OOQ?Mr1G0{1G0{O%[Q^O1G0{OOQ?Mr1G1e1G1eO#2uQWO1G0{O#5^Q?NdO1G0|O#5eQ?NdO1G0|O#8OQ?NdO1G0|O#8VQ?NdO1G0|O#:aQ?NdO1G0|O#:wQ?NdO1G0|O#=qQ?NdO1G0|O#=xQ?NdO1G0|O#@]Q?NdO1G0|O#@jQ?NdO1G0|O#BhQ?NdO1G0|O#EhQ07bO'#ChO#GfQ07bO1G1_O#GmQ07bO'#JkO!,sQWO1G1eO#G}Q?NdO,5?UOOQ?Mp-E<h-E<hO#HqQ?NdO1G0|OOQ?Mr1G0|1G0|O#J|Q?NdO1G1bO#KpQ&jO,5<UO#KxQ&jO,5<VO#LQQ&jO'#FmO#LiQWO'#FlOOQO'#KQ'#KQOOQO'#Ih'#IhO#LnQ&jO1G1lOOQ?Mr1G1l1G1lOOOS1G1w1G1wO#MPQ07bO'#JjO#MZQWO,5<`O!*mQ^O,5<`OOOS-E<g-E<gOOQ?Mr1G1j1G1jO#M`Q`O'#KPOOQ?Mr,5<b,5<bO#MhQ`O,5<bOOQ?Mr,59e,59eO!&kQ7[O'#DPOOOO'#I['#I[O#MmO!0LbO,59iOOQ?Mr,59i,59iO%[Q^O1G1}O!7yQWO'#IlO#MxQ7[O,5<vOOQ?Mr,5<s,5<sO!(ZQ7[O'#IoO#NhQ7[O,5=SO!(ZQ7[O'#IqO$ ZQ7[O,5=UO!&kQ7[O,5=WOOQO1G2P1G2PO$ eQpO'#CqO$ xQ$ISO'#EoO$!wQ`O'#G^O$#eQpO,5<oO$#lQWO'#KTO9ZQWO'#KTO$#zQWO,5<qO!(ZQ7[O,5<pO$$PQWO'#GVO$$bQWO,5<pO$$gQpO'#GSO$$tQpO'#KUO$%OQWO'#KUO!&kQ7[O'#KUO$%TQWO,5<tO$%YQ`O'#G_O!6SQ`O'#G_O$%kQWO'#GaO$%pQWO'#GcO!3mQWO'#GfO$%uQ?MxO'#InO$&QQ`O,5<xOOQ?Mv,5<x,5<xO$&XQ`O'#G_O$&gQ`O'#G`O$&oQ`O'#G`O$&tQ7[O,5=SO$'UQ7[O,5=UOOQ?Mr,5=X,5=XO!(ZQ7[O,5@OO!(ZQ7[O,5@OO$'fQWO'#IsO$'qQWO,5?}O$'yQWO,59`O$(jQ7[O,59qOOQ?Mr,59q,59qO$)]Q7[O,5<gO$*OQ7[O,5<iO@iQWO,5<kOOQ?Mr,5<l,5<lO$*YQWO,5<rO$*_Q7[O,5<wO$*oQWO'#JwO!$hQ^O1G2OO$*tQWO1G2OO9ZQWO'#JzO9ZQWO'#EqO%[Q^O'#EqO9ZQWO'#IuO$*yQ?MxO,5@tOOQU1G2x1G2xOOQU1G4Y1G4YOOQ?Mr1G/y1G/yO!,pQWO1G/yOOQ?Mr1G/w1G/wO$-OQ?NdO1G0UOOQU1G2t1G2tO!&kQ7[O1G2tO%[Q^O1G2tO#.PQWO1G2tO$/SQ7[O'#EhOOQ?Mp,5?|,5?|O$/^Q?MxO,5?|OOQU1G.t1G.tO!BaQ?MxO1G.tO!BlQ`O1G.tO!BtQ7[O1G.tO$/oQWO1G0rO$/tQWO'#ChO$0PQWO'#K^O$0XQWO,5=vO$0^QWO'#K^O$0cQWO'#K^O$0qQWO'#I{O$1PQWO,5@wO$1XQrO1G1gOOQ?Mr1G1i1G1iO9aQWO1G3aO@iQWO1G3aO$1`QWO1G3aO$1eQWO1G3aOOQU1G3a1G3aO!DrQWO1G3PO!&kQ7[O1G2|O$1jQWO1G2|OOQU1G2}1G2}O!&kQ7[O1G2}O$1oQWO1G2}O$1wQ`O'#G{OOQU1G3P1G3PO!6SQ`O'#IwO!DwQpO1G3SOOQU1G3S1G3SOOQU,5=m,5=mO$2PQ7[O,5=oO9aQWO,5=oO$%pQWO,5=qO9UQWO,5=qO!BlQ`O,5=qO!BtQ7[O,5=qO:YQ7[O,5=qO$2_QWO'#K[O$2jQWO,5=rOOQU1G.j1G.jO$2oQ?MxO1G.jO@iQWO1G.jO$2zQWO1G.jO9kQ?MxO1G.jO$5PQrO,5@yO$5aQWO,5@yO9ZQWO,5@yO$5lQ^O,5=yO$5sQWO,5=yOOQU1G3c1G3cO`Q^O1G3cOOQU1G3i1G3iOOQU1G3k1G3kO>rQWO1G3mO$5xQ^O1G3oO$9|Q^O'#HnOOQU1G3r1G3rO$:ZQWO'#HtO>wQWO'#HvOOQU1G3x1G3xO$:cQ^O1G3xO9kQ?MxO1G4OOOQU1G4Q1G4QOOQ?Mp'#GZ'#GZO9kQ?MxO1G4SO9kQ?MxO1G4UO$>jQWO,5@YO!*mQ^O,5;]O9ZQWO,5;]O>wQWO,5:UO!*mQ^O,5:UO!BlQ`O,5:UO$>oQ07bO,5:UOOQO,5;],5;]O$>yQ`O'#I_O$?aQWO,5@XOOQ?Mr1G/o1G/oO$?iQ`O'#IeO$?sQWO,5@hOOQ?Mp1G0v1G0vO##kQ`O,5:UOOQO'#Ib'#IbO$?{Q`O,5:qOOQ?Mv,5:q,5:qO#'fQWO1G0ZOOQ?Mr1G0Z1G0ZO%[Q^O1G0ZOOQ?Mr1G0q1G0qO>wQWO1G0qO!BlQ`O1G0qO!BtQ7[O1G0qOOQ?Mp1G5t1G5tO!BaQ?MxO1G0^OOQO1G0j1G0jO%[Q^O1G0jO$@SQ?MxO1G0jO$@_Q?MxO1G0jO!BlQ`O1G0^OCuQ`O1G0^O$@mQ?MxO1G0jOOQO1G0^1G0^O$ARQ?NdO1G0jPOOO-E<U-E<UPOOO1G.g1G.gOOOO1G/f1G/fO$A]QpO,5<fO$AeQrO1G4dOOQO1G4j1G4jO%[Q^O,5>xO$AoQWO1G5rO$AwQWO1G6QO$BPQrO1G6RO9ZQWO,5?OO$BZQ?NdO1G6OO%[Q^O1G6OO$BkQ?MxO1G6OO$B|QWO1G5}O$B|QWO1G5}O9ZQWO1G5}O$CUQWO,5?RO9ZQWO,5?ROOQO,5?R,5?RO$CjQWO,5?RO$*oQWO,5?ROOQO-E<e-E<eOOQO1G0a1G0aOOQO1G0c1G0cO!,sQWO1G0cOOQU7+(`7+(`O!&kQ7[O7+(`O%[Q^O7+(`O$CxQWO7+(`O$DTQ7[O7+(`O$DcQ?NdO,5=SO$FnQ?NdO,5=UO$HyQ?NdO,5=SO$K[Q?NdO,5=UO$MmQ?NdO,59qO% uQ?NdO,5<gO%$QQ?NdO,5<iO%&]Q?NdO,5<wOOQ?Mr7+&^7+&^O%(nQ?NdO7+&^O%)bQ7[O'#I`O%)lQWO,5@ZOOQ?Mr1G/z1G/zO%)tQ^O'#IaO%*RQWO,5@[O%*ZQrO,5@[OOQ?Mr1G0P1G0PO%*eQWO7+&gOOQ?Mr7+&g7+&gO%*jQ07bO,5:fO%[Q^O7+&yO%*tQ07bO,5:_O%+RQ07bO,5:jO%+]Q07bO,5:lOOQ?Mr7+'P7+'POOQO1G1p1G1pOOQO1G1q1G1qO%+gQtO,5<XO!*mQ^O,5<WOOQO-E<f-E<fOOQ?Mr7+'W7+'WOOOS7+'c7+'cOOOS1G1z1G1zO%+rQWO1G1zOOQ?Mr1G1|1G1|O%+wQpO,59kOOOO-E<Y-E<YOOQ?Mr1G/T1G/TO%,OQ?NdO7+'iOOQ?Mr,5?W,5?WO%,rQpO,5?WOOQ?Mr1G2b1G2bP!&kQ7[O'#IlPOQ?Mr-E<j-E<jO%-bQ7[O,5?ZOOQ?Mr-E<m-E<mO%.TQ7[O,5?]OOQ?Mr-E<o-E<oO%._QpO1G2rO%.fQpO'#CqO%.|Q7[O'#JzO%/TQ^O'#EqOOQ?Mr1G2Z1G2ZO%/_QWO'#IkO%/sQWO,5@oO%/sQWO,5@oO%/{QWO,5@oO%0WQWO,5@oOOQO1G2]1G2]O%0fQ7[O1G2[O!(ZQ7[O1G2[O%0vQ$ISO'#ImO%1TQWO,5@pO!&kQ7[O,5@pO%1]QpO,5@pOOQ?Mr1G2`1G2`OOQ?Mp,5<y,5<yOOQ?Mp,5<z,5<zO$*oQWO,5<zOCfQWO,5<zO!BlQ`O,5<yOOQO'#Gb'#GbO%1gQWO,5<{OOQ?Mp,5<},5<}O$*oQWO,5=QOOQO,5?Y,5?YOOQO-E<l-E<lOOQ?Mv1G2d1G2dO!6SQ`O,5<yO%1oQWO,5<zO$%kQWO,5<{O!6SQ`O,5<zO!(ZQ7[O'#IoO%2cQ7[O1G2nO!(ZQ7[O'#IqO%3UQ7[O1G2pO%3`Q7[O1G5jO%3jQ7[O1G5jOOQO,5?_,5?_OOQO-E<q-E<qOOQO1G.z1G.zO!9jQ`O,59sO%[Q^O,59sO%3wQWO1G2VO!(ZQ7[O1G2^O%3|Q?NdO7+'jOOQ?Mr7+'j7+'jO!$hQ^O7+'jO%4pQWO,5;]OOQ?Mp,5?a,5?aOOQ?Mp-E<s-E<sOOQ?Mr7+%e7+%eO%4uQpO'#KVO#'fQWO7+(`O%5PQrO7+(`O$C{QWO7+(`O%5WQ?NbO'#ChO%5kQ?NbO,5=OO%6]QWO,5=OOOQ?Mp1G5h1G5hOOQU7+$`7+$`O!BaQ?MxO7+$`O!BlQ`O7+$`O!$hQ^O7+&^O%6bQWO'#IzO%6yQWO,5@xOOQO1G3b1G3bO9aQWO,5@xO%6yQWO,5@xO%7RQWO,5@xOOQO,5?g,5?gOOQO-E<y-E<yOOQ?Mr7+'R7+'RO%7WQWO7+({O9kQ?MxO7+({O9aQWO7+({O@iQWO7+({OOQU7+(k7+(kO%7]Q?NbO7+(hO!&kQ7[O7+(hO%7gQpO7+(iOOQU7+(i7+(iO!&kQ7[O7+(iO%7nQWO'#KZO%7yQWO,5=gOOQO,5?c,5?cOOQO-E<u-E<uOOQU7+(n7+(nO%9YQ`O'#HUOOQU1G3Z1G3ZO!&kQ7[O1G3ZO%[Q^O1G3ZO%9aQWO1G3ZO%9lQ7[O1G3ZO9kQ?MxO1G3]O$%pQWO1G3]O9UQWO1G3]O!BlQ`O1G3]O!BtQ7[O1G3]O%9zQWO'#IyO%:`QWO,5@vO%:hQ`O,5@vOOQ?Mp1G3^1G3^OOQU7+$U7+$UO@iQWO7+$UO9kQ?MxO7+$UO%:sQWO7+$UO%[Q^O1G6eO%[Q^O1G6fO%:xQ?MxO1G6eO%;SQ^O1G3eO%;ZQWO1G3eO%;`Q^O1G3eOOQU7+(}7+(}O9kQ?MxO7+)XO`Q^O7+)ZOOQU'#Ka'#KaOOQU'#I|'#I|O%;gQ^O,5>YOOQU,5>Y,5>YO%[Q^O'#HoO%;tQWO'#HqOOQU,5>`,5>`O9ZQWO,5>`OOQU,5>b,5>bOOQU7+)d7+)dOOQU7+)j7+)jOOQU7+)n7+)nOOQU7+)p7+)pO%;yQ`O1G5tO%<_Q07bO1G0wO%<iQWO1G0wOOQO1G/p1G/pO%<tQ07bO1G/pO>wQWO1G/pO!*mQ^O'#DjOOQO,5>y,5>yOOQO-E<]-E<]OOQO,5?P,5?POOQO-E<c-E<cO!BlQ`O1G/pOOQO-E<`-E<`OOQ?Mv1G0]1G0]OOQ?Mr7+%u7+%uO#'fQWO7+%uOOQ?Mr7+&]7+&]O>wQWO7+&]O!BlQ`O7+&]OOQO7+%x7+%xO$ARQ?NdO7+&UOOQO7+&U7+&UO%[Q^O7+&UO%=OQ?MxO7+&UO!BaQ?MxO7+%xO!BlQ`O7+%xO%=ZQ?MxO7+&UO%=iQ?NdO7++jO%[Q^O7++jO%=yQWO7++iO%=yQWO7++iOOQO1G4m1G4mO9ZQWO1G4mO%>RQWO1G4mOOQO7+%}7+%}O#'fQWO<<KzO%5PQrO<<KzO%>aQWO<<KzOOQU<<Kz<<KzO!&kQ7[O<<KzO%[Q^O<<KzO%>iQWO<<KzO%>tQ?NdO,5?ZO%APQ?NdO,5?]O%C[Q?NdO1G2[O%EmQ?NdO1G2nO%GxQ?NdO1G2pO%JTQ7[O,5>zOOQO-E<^-E<^O%J_QrO,5>{O%[Q^O,5>{OOQO-E<_-E<_O%JiQWO1G5vOOQ?Mr<<JR<<JRO%JqQ07bO1G0rO%L{Q07bO1G0|O%MSQ07bO1G0|O& WQ07bO1G0|O& _Q07bO1G0|O&#SQ07bO1G0|O&#jQ07bO1G0|O&%}Q07bO1G0|O&&UQ07bO1G0|O&(SQ07bO1G0|O&(aQ07bO1G0|O&*_Q07bO1G0|O&*rQ?NdO<<JeO&+wQ07bO1G0|O&-mQ07bO'#JeO&/pQ07bO1G1bO&/}Q07bO1G0UO!*mQ^O'#FoOOQO'#KR'#KROOQO1G1s1G1sO&0XQWO1G1rO&0^Q07bO,5?UOOOS7+'f7+'fOOOO1G/V1G/VOOQ?Mr1G4r1G4rO!(ZQ7[O7+(^O&2nQrO'#ChO&2xQWO,5?VO9ZQWO,5?VOOQO-E<i-E<iO&3WQWO1G6ZO&3WQWO1G6ZO&3`QWO1G6ZO&3kQ7[O7+'vO&3{QpO,5?XO&4VQWO,5?XO!&kQ7[O,5?XOOQO-E<k-E<kO&4[QpO1G6[O&4fQWO1G6[OOQ?Mp1G2f1G2fO$*oQWO1G2fOOQ?Mp1G2e1G2eO&4nQWO1G2gO!&kQ7[O1G2gOOQ?Mp1G2l1G2lO!BlQ`O1G2eOCfQWO1G2fO&4sQWO1G2gO&4{QWO1G2fO&5oQ7[O,5?ZOOQ?Mr-E<n-E<nO&6bQ7[O,5?]OOQ?Mr-E<p-E<pO!(ZQ7[O7++UOOQ?Mr1G/_1G/_O&6lQWO1G/_OOQ?Mr7+'q7+'qO&6qQ7[O7+'xO&7RQ?NdO<<KUOOQ?Mr<<KU<<KUO&7uQWO1G0wO!&kQ7[O'#ItO&7zQWO,5@qO!&kQ7[O1G2jOOQU<<Gz<<GzO!BaQ?MxO<<GzO&8SQ?NdO<<IxOOQ?Mr<<Ix<<IxOOQO,5?f,5?fO&8vQWO,5?fO&8{QWO,5?fOOQO-E<x-E<xO&9ZQWO1G6dO&9ZQWO1G6dO9aQWO1G6dO@iQWO<<LgOOQU<<Lg<<LgO&9cQWO<<LgO9kQ?MxO<<LgOOQU<<LS<<LSO%7]Q?NbO<<LSOOQU<<LT<<LTO%7gQpO<<LTO&9hQ`O'#IvO&9sQWO,5@uO!*mQ^O,5@uOOQU1G3R1G3RO%/TQ^O'#JnOOQO'#Ix'#IxO9kQ?MxO'#IxO&9{Q`O,5=pOOQU,5=p,5=pO&:SQ`O'#EdO&:hQWO7+(uO&:mQWO7+(uOOQU7+(u7+(uO!&kQ7[O7+(uO%[Q^O7+(uO&:uQWO7+(uOOQU7+(w7+(wO9kQ?MxO7+(wO$%pQWO7+(wO9UQWO7+(wO!BlQ`O7+(wO&;QQWO,5?eOOQO-E<w-E<wOOQO'#HX'#HXO&;]QWO1G6bO9kQ?MxO<<GpOOQU<<Gp<<GpO@iQWO<<GpO&;eQWO7+,PO&;jQWO7+,QO%[Q^O7+,PO%[Q^O7+,QOOQU7+)P7+)PO&;oQWO7+)PO&;tQ^O7+)PO&;{QWO7+)POOQU<<Ls<<LsOOQU<<Lu<<LuOOQU-E<z-E<zOOQU1G3t1G3tO&<QQWO,5>ZOOQU,5>],5>]O&<VQWO1G3zO9ZQWO7+&cO!*mQ^O7+&cOOQO7+%[7+%[O&<[Q07bO1G6RO>wQWO7+%[OOQ?Mr<<Ia<<IaOOQ?Mr<<Iw<<IwO>wQWO<<IwOOQO<<Ip<<IpO$ARQ?NdO<<IpO%[Q^O<<IpOOQO<<Id<<IdO!BaQ?MxO<<IdO&<fQ?MxO<<IpO&<qQ?NdO<= UO&=RQWO<= TOOQO7+*X7+*XO9ZQWO7+*XOOQUANAfANAfO&=ZQWOANAfO!&kQ7[OANAfO#'fQWOANAfO%5PQrOANAfO%[Q^OANAfO&=cQ?NdO7+'vO&?tQ?NdO,5?ZO&BPQ?NdO,5?]O&D[Q?NdO7+'xO&FmQrO1G4gO&FwQ07bO7+&^O&H{Q07bO,5=SO&KSQ07bO,5=UO&KdQ07bO,5=SO&KtQ07bO,5=UO&LUQ07bO,59qO&NXQ07bO,5<gO'![Q07bO,5<iO'$_Q07bO,5<wO'&TQ07bO7+'iO'&bQ07bO7+'jO'&oQWO,5<ZOOQO7+'^7+'^O'&tQ7[O<<KxOOQO1G4q1G4qO'&{QWO1G4qO''WQWO1G4qO''fQWO7++uO''fQWO7++uO!&kQ7[O1G4sO''nQpO1G4sO''xQWO7++vOOQ?Mp7+(Q7+(QO$*oQWO7+(RO'(QQpO7+(ROOQ?Mp7+(P7+(PO$*oQWO7+(QO'(XQWO7+(RO!&kQ7[O7+(ROCfQWO7+(QO'(^Q7[O<<NpOOQ?Mr7+$y7+$yO'(hQpO,5?`OOQO-E<r-E<rO'(rQ?NbO7+(UOOQUAN=fAN=fO9aQWO1G5QOOQO1G5Q1G5QO')SQWO1G5QO')XQWO7+,OO')XQWO7+,OO9kQ?MxOANBRO@iQWOANBROOQUANBRANBROOQUANAnANAnOOQUANAoANAoO')aQWO,5?bOOQO-E<t-E<tO')lQ07bO1G6aOOQO,5?d,5?dOOQO-E<v-E<vOOQU1G3[1G3[O%/TQ^O,5<{OOQU<<La<<LaO!&kQ7[O<<LaO&:hQWO<<LaO')vQWO<<LaO%[Q^O<<LaOOQU<<Lc<<LcO9kQ?MxO<<LcO$%pQWO<<LcO9UQWO<<LcO'*OQ`O1G5PO'*ZQWO7++|OOQUAN=[AN=[O9kQ?MxOAN=[OOQU<= k<= kOOQU<= l<= lO'*cQWO<= kO'*hQWO<= lOOQU<<Lk<<LkO'*mQWO<<LkO'*rQ^O<<LkOOQU1G3u1G3uO>wQWO7+)fO'*yQWO<<I}O'+UQ07bO<<I}OOQO<<Hv<<HvOOQ?MrAN?cAN?cOOQOAN?[AN?[O$ARQ?NdOAN?[OOQOAN?OAN?OO%[Q^OAN?[OOQO<<Ms<<MsOOQUG27QG27QO!&kQ7[OG27QO#'fQWOG27QO'+`QWOG27QO%5PQrOG27QO'+hQ07bO<<JeO'+uQ07bO1G2[O'-kQ07bO,5?ZO'/nQ07bO,5?]O'1qQ07bO1G2nO'3tQ07bO1G2pO'5wQ07bO<<KUO'6UQ07bO<<IxOOQO1G1u1G1uO!(ZQ7[OANAdOOQO7+*]7+*]O'6cQWO7+*]O'6nQWO<= aO'6vQpO7+*_OOQ?Mp<<Km<<KmO$*oQWO<<KmOOQ?Mp<<Kl<<KlO'7QQpO<<KmO$*oQWO<<KlOOQO7+*l7+*lO9aQWO7+*lO'7XQWO<= jOOQUG27mG27mO9kQ?MxOG27mO!*mQ^O1G4|O'7aQWO7++{O&:hQWOANA{OOQUANA{ANA{O!&kQ7[OANA{O'7iQWOANA{OOQUANA}ANA}O9kQ?MxOANA}O$%pQWOANA}OOQO'#HY'#HYOOQO7+*k7+*kOOQUG22vG22vOOQUANEVANEVOOQUANEWANEWOOQUANBVANBVO'7qQWOANBVOOQU<<MQ<<MQO!*mQ^OAN?iOOQOG24vG24vO$ARQ?NdOG24vO#'fQWOLD,lOOQULD,lLD,lO!&kQ7[OLD,lO'7vQWOLD,lO'8OQ07bO7+'vO'9tQ07bO,5?ZO';wQ07bO,5?]O'=zQ07bO7+'xO'?pQ7[OG27OOOQO<<Mw<<MwOOQ?MpANAXANAXO$*oQWOANAXOOQ?MpANAWANAWOOQO<<NW<<NWOOQULD-XLD-XO'@QQ07bO7+*hOOQUG27gG27gO&:hQWOG27gO!&kQ7[OG27gOOQUG27iG27iO9kQ?MxOG27iOOQUG27qG27qO'@[Q07bOG25TOOQOLD*bLD*bOOQU!$(!W!$(!WO#'fQWO!$(!WO!&kQ7[O!$(!WO'@fQ?NdOG27OOOQ?MpG26sG26sOOQULD-RLD-RO&:hQWOLD-ROOQULD-TLD-TOOQU!)9Er!)9ErO#'fQWO!)9ErOOQU!$(!m!$(!mOOQU!.K;^!.K;^O'BwQ07bOG27OO!*mQ^O'#DzO1PQWO'#EXO'DmQrO'#JjO'DtQMnO'#DsO'D{Q^O'#EOO'ESQrO'#ChO'GjQrO'#ChO!*mQ^O'#EQO'GzQ^O,5;WO!*mQ^O,5;bO!*mQ^O,5;bO!*mQ^O,5;bO!*mQ^O,5;bO!*mQ^O,5;bO!*mQ^O,5;bO!*mQ^O,5;bO!*mQ^O,5;bO!*mQ^O,5;bO!*mQ^O,5;bO!*mQ^O,5;bO!*mQ^O'#IjO'I}QWO,5<fO'JVQ7[O,5;bO'KpQ7[O,5;bO!*mQ^O,5;vO!&kQ7[O'#GhO'JVQ7[O'#GhO!&kQ7[O'#GjO'JVQ7[O'#GjO1SQWO'#DVO1SQWO'#DVO!&kQ7[O'#F{O'JVQ7[O'#F{O!&kQ7[O'#F}O'JVQ7[O'#F}O!&kQ7[O'#G]O'JVQ7[O'#G]O!*mQ^O,5:jO'KwQ`O'#D[O!*mQ^O,5@gO'GzQ^O1G0rO'LRQ07bO'#ChO!*mQ^O1G1}O!&kQ7[O'#IoO'JVQ7[O'#IoO!&kQ7[O'#IqO'JVQ7[O'#IqO'L]QpO'#CqO!&kQ7[O,5<pO'JVQ7[O,5<pO'GzQ^O1G2OO!*mQ^O7+&yO!&kQ7[O1G2[O'JVQ7[O1G2[O!&kQ7[O'#IoO'JVQ7[O'#IoO!&kQ7[O'#IqO'JVQ7[O'#IqO!&kQ7[O1G2^O'JVQ7[O1G2^O'GzQ^O7+'jO'GzQ^O7+&^O!&kQ7[OANAdO'JVQ7[OANAdO'LpQWO'#ElO'LuQWO'#ElO'L}QWO'#F[O'MSQWO'#EvO'MXQWO'#J{O'MdQWO'#JyO'MoQWO,5;WO'MtQ7[O,5<cO'M{QWO'#GUO'NQQWO'#GUO'NVQWO,5<dO'N_QWO,5;WO'NgQ07bO1G1_O'NnQWO,5<pO'NsQWO,5<pO'NxQWO,5<rO'N}QWO,5<rO( SQWO1G2OO( XQWO1G0rO( ^Q7[O<<KxO( eQ7[O<<KxO7hQ7[O'#FyO9UQWO'#FxOAdQWO'#EkO!*mQ^O,5;sO!3mQWO'#GUO!3mQWO'#GUO!3mQWO'#GWO!3mQWO'#GWO!(ZQ7[O7+(^O!(ZQ7[O7+(^O%._QpO1G2rO%._QpO1G2rO!&kQ7[O,5=WO!&kQ7[O,5=W",
  stateData: "(!i~O'uOS'vOSSOS'wRQ~OPYOQYORfOX!VO`qOczOdyOlkOnYOokOpkOvkOxYOzYO!PWO!TkO!UkO![XO!fuO!lZO!oYO!pYO!qYO!svO!uwO!xxO!|]O#t!PO$U|O%c}O%e!QO%g!OO%h!OO%i!OO%l!RO%n!SO%q!TO%r!TO%t!UO&Q!WO&W!XO&Y!YO&[!ZO&^![O&a!]O&g!^O&m!_O&o!`O&q!aO&s!bO&u!cO'|SO(OTO(RUO(YVO(h[O(viO~OVtO~P`OPYOQYORfOc!jOd!iOlkOnYOokOpkOvkOxYOzYO!PWO!TkO!UkO![!eO!fuO!lZO!oYO!pYO!qYO!svO!u!gO!x!hO$U!kO'|!dO(OTO(RUO(YVO(h[O(viO~O`!wOo!nO!P!oO!_!yO!`!vO!a!vO!|:lO#Q!pO#R!pO#S!xO#T!pO#U!pO#X!zO#Y!zO'}!lO(OTO(RUO(]!mO(h!sO~O'w!{O~OP[XZ[X`[Xn[X|[X}[X!P[X!Y[X!i[X!j[X!l[X!p[X#][X#heX#k[X#l[X#m[X#n[X#o[X#p[X#q[X#r[X#s[X#u[X#w[X#y[X#z[X$P[X's[X(Y[X(j[X(q[X(r[X~O!d$}X~P(qO^!}O(O#PO(P!}O(Q#PO~O^#QO(Q#PO(R#PO(S#QO~Ot#SO!R#TO(Z#TO([#VO~OPYOQYORfOc!jOd!iOlkOnYOokOpkOvkOxYOzYO!PWO!TkO!UkO![!eO!fuO!lZO!oYO!pYO!qYO!svO!u!gO!x!hO$U!kO'|:pO(OTO(RUO(YVO(h[O(viO~O!X#ZO!Y#WO!V(`P!V(nP~P+}O!Z#cO~P`OPYOQYORfOc!jOd!iOnYOokOpkOvkOxYOzYO!PWO!TkO!UkO![!eO!fuO!lZO!oYO!pYO!qYO!svO!u!gO!x!hO$U!kO(OTO(RUO(YVO(h[O(viO~Ol#mO!X#iO!|]O#f#lO#g#iO'|:qO!k(kP~P.iO!l#oO'|#nO~O!x#sO!|]O%c#tO~O#h#uO~O!d#vO#h#uO~OP$^OZ$eOn$RO|#zO}#{O!P#|O!Y$bO!i$TO!j#xO!l#yO!p$^O#k$PO#l$QO#m$QO#n$QO#o$SO#p$TO#q$TO#r$dO#s$TO#u$UO#w$WO#y$YO#z$ZO(YVO(j$[O(q#}O(r$OO~O`(^X's(^X'q(^X!k(^X!V(^X![(^X%d(^X!d(^X~P1qO#]$fO$P$fOP(_XZ(_Xn(_X|(_X}(_X!P(_X!Y(_X!i(_X!l(_X!p(_X#k(_X#l(_X#m(_X#n(_X#o(_X#p(_X#q(_X#r(_X#s(_X#u(_X#w(_X#y(_X#z(_X(Y(_X(j(_X(q(_X(r(_X![(_X%d(_X~O`(_X!j(_X's(_X'q(_X!V(_X!k(_Xr(_X!d(_X~P4XO#]$fO~O$Z$hO$]$gO$d$mO~ORfO![$nO$g$oO$i$qO~Og%WOl%XOn$uOo$tOp$tOv%YOx%ZOz%[O!P$|O![$}O!f%aO!l$yO#g%bO$U%_O$p%]O$r%^O$u%`O'|$sO(OTO(RUO(Y$vO(q%OO(r%QOf(VP~O!l%cO~O!P%fO![%gO'|%eO~O!d%kO~O`%lO's%lO~O|%pO~P%[O'}!lO~P%[O%i%tO~P%[Og%WO!l%cO'|%eO'}!lO~Od%{O!l%cO'|%eO~O#s$TO~O|&QO![%}O!l&PO%e&TO'|%eO'}!lO(OTO(RUO_)PP~O!x#sO~O%n&VO!P({X![({X'|({X~O'|&WO~O!u&]O#t!PO%e!QO%g!OO%h!OO%i!OO%l!RO%n!SO%q!TO%r!TO~Oc&bOd&aO!x&_O%c&`O%v&^O~P<POc&eOdyO![&dO!u&]O!xxO!|]O#t!PO%c}O%g!OO%h!OO%i!OO%l!RO%n!SO%q!TO%r!TO%t!UO~Oa&hO#]&kO%e&fO'}!lO~P=UO!l&lO!u&pO~O!l#oO~O![XO~O`%lO'r&xO's%lO~O`%lO'r&{O's%lO~O`%lO'r&}O's%lO~O'q[X!V[Xr[X!k[X&U[X![[X%d[X!d[X~P(qO!_'[O!`'TO!a'TO'}!lO(OTO(RUO~Oo'RO!P'QO!X'UO(]'PO!Z(aP!Z(pP~P@]Oj'_O![']O'|%eO~Od'dO!l%cO'|%eO~O|&QO!l&PO~Oo!nO!P!oO!|:lO#Q!pO#R!pO#T!pO#U!pO'}!lO(OTO(RUO(]!mO(h!sO~O!_'jO!`'iO!a'iO#S!pO#X'kO#Y'kO~PAwO`%lOg%WO!d#vO!l%cO's%lO(j'mO~O!p'qO#]'oO~PCVOo!nO!P!oO(OTO(RUO(]!mO(h!sO~O![XOo(fX!P(fX!_(fX!`(fX!a(fX!|(fX#Q(fX#R(fX#S(fX#T(fX#U(fX#X(fX#Y(fX'}(fX(O(fX(R(fX(](fX(h(fX~O!`'iO!a'iO'}!lO~PCuO'x'uO'y'uO'z'wO~O^!}O(O'yO(P!}O(Q'yO~O^#QO(Q'yO(R'yO(S#QO~Ot#SO!R#TO(Z#TO(['}O~O!X(PO!V'QX!V'WX!Y'QX!Y'WX~P+}O!Y(RO!V(`X~OP$^OZ$eOn$RO|#zO}#{O!P#|O!Y(RO!i$TO!j#xO!l#yO!p$^O#k$PO#l$QO#m$QO#n$QO#o$SO#p$TO#q$TO#r$dO#s$TO#u$UO#w$WO#y$YO#z$ZO(YVO(j$[O(q#}O(r$OO~O!V(`X~PGiO!V(WO~O!V(mX!Y(mX!d(mX!k(mX(j(mX~O#](mX#h#aX!Z(mX~PIoO#](XO!V(oX!Y(oX~O!Y(YO!V(nX~O!V(]O~O#]$fO~PIoO!Z(^O~P`O|#zO}#{O!P#|O!j#xO!l#yO(YVOP!naZ!nan!na!Y!na!i!na!p!na#k!na#l!na#m!na#n!na#o!na#p!na#q!na#r!na#s!na#u!na#w!na#y!na#z!na(j!na(q!na(r!na~O`!na's!na'q!na!V!na!k!nar!na![!na%d!na!d!na~PKVO!k(_O~O!d#vO#](`O(j'mO!Y(lX`(lX's(lX~O!k(lX~PMuO!P%fO![%gO!|]O#f(eO#g(dO'|%eO~O!Y(fO!k(kX~O!k(hO~O!P%fO![%gO#g(dO'|%eO~OP(_XZ(_Xn(_X|(_X}(_X!P(_X!Y(_X!i(_X!j(_X!l(_X!p(_X#k(_X#l(_X#m(_X#n(_X#o(_X#p(_X#q(_X#r(_X#s(_X#u(_X#w(_X#y(_X#z(_X(Y(_X(j(_X(q(_X(r(_X~O!d#vO!k(_X~P! cO|(iO}(jO!j#xO!l#yO!|!{a!P!{a~O!x!{a%c!{a![!{a#f!{a#g!{a'|!{a~P!#gO!x(nO~OPYOQYORfOc!jOd!iOlkOnYOokOpkOvkOxYOzYO!PWO!TkO!UkO![XO!fuO!lZO!oYO!pYO!qYO!svO!u!gO!x!hO$U!kO'|!dO(OTO(RUO(YVO(h[O(viO~Og%WOl%XOn$uOo$tOp$tOv%YOx%ZOz;YO!P$|O![$}O!f<jO!l$yO#g;`O$U%_O$p;[O$r;^O$u%`O'|(rO(OTO(RUO(Y$vO(q%OO(r%QO~O#h(tO~Og%WOl%XOn$uOo$tOp$tOv%YOx%ZOz%[O!P$|O![$}O!f%aO!l$yO#g%bO$U%_O$p%]O$r%^O$u%`O'|(rO(OTO(RUO(Y$vO(q%OO(r%QO~Of(cP~P!(ZO!X(xO!k(dP~P%[O(](zO(h[O~O!P(|O!l#yO(](zO(h[O~OP:kOQ:kORfOc<fOd!iOlkOn:kOokOpkOvkOx:kOz:kO!PWO!TkO!UkO![!eO!f:nO!lZO!o:kO!p:kO!q:kO!s:oO!u:rO!x!hO$U!kO'|)[O(OTO(RUO(YVO(h[O(v<dO~O})_O!l#yO~O!Y$bO`$na's$na'q$na!k$na!V$na![$na%d$na!d$na~O#t)cO~P!&kO|)fO!d)eO![$[X$X$[X$Z$[X$]$[X$d$[X~O!d)eO![(sX$X(sX$Z(sX$](sX$d(sX~O|)fO~P!.VO|)fO![(sX$X(sX$Z(sX$](sX$d(sX~O![)hO$X)lO$Z)gO$])gO$d)mO~O!X)pO~P!*mO$Z$hO$]$gO$d)tO~Oj$vX|$vX!P$vX!j$vX(q$vX(r$vX~OfiXf$vXjiX!YiX#]iX~P!/{Oo)vO~Ot)wO(Z)xO([)zO~Oj*TO|)|O!P)}O(q%OO(r%QO~Of){O~P!1UOf*UO~Og%WOl%XOn$uOo$tOp$tOv%YOx%ZOz;YO!P*WO![*XO!f<jO!l$yO#g;`O$U%_O$p;[O$r;^O$u%`O(OTO(RUO(Y$vO(q%OO(r%QO~O!X*[O'|*VO!k(wP~P!1sO#h*^O~O!l*_O~Og%WOl%XOn$uOo$tOp$tOv%YOx%ZOz;YO!P$|O![$}O!f<jO!l$yO#g;`O$U%_O$p;[O$r;^O$u%`O'|*aO(OTO(RUO(Y$vO(q%OO(r%QO~O!X*dO!V(xP~P!3rOn*pO!P*hO!_*nO!`*gO!a*gO!l*_O#X*oO%Z*jO'}!lO(]!mO~O!Z*mO~P!5gO!j#xOj(XX|(XX!P(XX(q(XX(r(XX!Y(XX#](XX~Of(XX#}(XX~P!6`Oj*uO#]*tOf(WX!Y(WX~O!Y*vOf(VX~O'|&WOf(VP~O!l*}O~O'|(rO~Ol+RO!P%fO!X#iO![%gO!|]O#f#lO#g#iO'|%eO!k(kP~O!d#vO#h+SO~O!P%fO!X+UO!Y(YO![%gO'|%eO!V(nP~Oo'XO!P+WO!X+VO(OTO(RUO(](zO~O!Z(pP~P!9ZO!Y+XO`(|X's(|X~OP$^OZ$eOn$RO|#zO}#{O!P#|O!i$TO!j#xO!l#yO!p$^O#k$PO#l$QO#m$QO#n$QO#o$SO#p$TO#q$TO#r$dO#s$TO#u$UO#w$WO#y$YO#z$ZO(YVO(j$[O(q#}O(r$OO~O`!ga!Y!ga's!ga'q!ga!V!ga!k!gar!ga![!ga%d!ga!d!ga~P!:RO|#zO}#{O!P#|O!j#xO!l#yO(YVOP!raZ!ran!ra!Y!ra!i!ra!p!ra#k!ra#l!ra#m!ra#n!ra#o!ra#p!ra#q!ra#r!ra#s!ra#u!ra#w!ra#y!ra#z!ra(j!ra(q!ra(r!ra~O`!ra's!ra'q!ra!V!ra!k!rar!ra![!ra%d!ra!d!ra~P!<lO|#zO}#{O!P#|O!j#xO!l#yO(YVOP!taZ!tan!ta!Y!ta!i!ta!p!ta#k!ta#l!ta#m!ta#n!ta#o!ta#p!ta#q!ta#r!ta#s!ta#u!ta#w!ta#y!ta#z!ta(j!ta(q!ta(r!ta~O`!ta's!ta'q!ta!V!ta!k!tar!ta![!ta%d!ta!d!ta~P!?VOg%WOj+cO![']O%d+bO~O!d+eO`(UX![(UX's(UX!Y(UX~O`%lO![XO's%lO~Og%WO!l%cO~Og%WO!l%cO'|%eO~O!d#vO#h(tO~Oa+pO%e+qO'|+mO(OTO(RUO!Z)QP~O!Y+rO_)PX~OZ+vO~O_+wO~O![%}O'|%eO'}!lO_)PP~Og%WO#]+|O~Og%WOj,PO![$}O~O![,RO~O|,TO![XO~O%i%tO~O!x,YO~Od,_O~Oa,`O'|#nO(OTO(RUO!Z)OP~Od%{O~O%e!QO'|&WO~P=UOZ,eO_,dO~OPYOQYORfOczOdyOlkOnYOokOpkOvkOxYOzYO!PWO!TkO!UkO!fuO!lZO!oYO!pYO!qYO!svO!xxO!|]O%c}O(OTO(RUO(YVO(h[O(viO~O![!eO!u!gO$U!kO'|!dO~P!FYO_,dO`%lO's%lO~OPYOQYORfOc!jOd!iOlkOnYOokOpkOvkOxYOzYO!PWO!TkO!UkO![!eO!fuO!lZO!oYO!pYO!qYO!svO!x!hO$U!kO'|!dO(OTO(RUO(YVO(h[O(viO~O`,jO!uwO#t!OO%g!OO%h!OO%i!OO~P!HrO!l&lO~O&W,pO~O![,rO~O&i,tO&k,uOP&faQ&faR&faX&fa`&fac&fad&fal&fan&fao&fap&fav&fax&faz&fa!P&fa!T&fa!U&fa![&fa!f&fa!l&fa!o&fa!p&fa!q&fa!s&fa!u&fa!x&fa!|&fa#t&fa$U&fa%c&fa%e&fa%g&fa%h&fa%i&fa%l&fa%n&fa%q&fa%r&fa%t&fa&Q&fa&W&fa&Y&fa&[&fa&^&fa&a&fa&g&fa&m&fa&o&fa&q&fa&s&fa&u&fa'q&fa'|&fa(O&fa(R&fa(Y&fa(h&fa(v&fa!Z&fa&_&faa&fa&d&fa~O'|,zO~Og!bX!Y!OX!Z!OX!d!OX!d!bX!l!bX#]!OX~O!Y!bX!Z!bX~P# xO!d-PO#]-OOg(bX!Y#eX!Y(bX!Z#eX!Z(bX!d(bX!l(bX~Og%WO!d-RO!l%cO!Y!^X!Z!^X~Oo!nO!P!oO(OTO(RUO(]!mO~OP:kOQ:kORfOc<fOd!iOlkOn:kOokOpkOvkOx:kOz:kO!PWO!TkO!UkO![!eO!f:nO!lZO!o:kO!p:kO!q:kO!s:oO!u:rO!x!hO$U!kO(OTO(RUO(YVO(h[O(v<dO~O'|;fO~P##|O!Y-VO!Z(aX~O!Z-XO~O!d-PO#]-OO!Y#eX!Z#eX~O!Y-YO!Z(pX~O!Z-[O~O!`-]O!a-]O'}!lO~P##kO!Z-`O~P'_Oj-cO![']O~O!V-hO~Oo!{a!_!{a!`!{a!a!{a#Q!{a#R!{a#S!{a#T!{a#U!{a#X!{a#Y!{a'}!{a(O!{a(R!{a(]!{a(h!{a~P!#gO!p-mO#]-kO~PCVO!`-oO!a-oO'}!lO~PCuO`%lO#]-kO's%lO~O`%lO!d#vO#]-kO's%lO~O`%lO!d#vO!p-mO#]-kO's%lO(j'mO~O'x'uO'y'uO'z-tO~Or-uO~O!V'Qa!Y'Qa~P!:RO!X-yO!V'QX!Y'QX~P%[O!Y(RO!V(`a~O!V(`a~PGiO!Y(YO!V(na~O!P%fO!X-}O![%gO'|%eO!V'WX!Y'WX~O#].PO!Y(la!k(la`(la's(la~O!d#vO~P#,SO!Y(fO!k(ka~O!P%fO![%gO#g.TO'|%eO~Ol.YO!P%fO!X.VO![%gO!|]O#f.XO#g.VO'|%eO!Y'ZX!k'ZX~O}.^O!l#yO~Og%WOj.aO![']O%d.`O~O`#`i!Y#`i's#`i'q#`i!V#`i!k#`ir#`i![#`i%d#`i!d#`i~P!:ROj<pO|)|O!P)}O(q%OO(r%QO~O#h#[a`#[a#]#[a's#[a!Y#[a!k#[a![#[a!V#[a~P#/OO#h(XXP(XXZ(XX`(XXn(XX}(XX!i(XX!l(XX!p(XX#k(XX#l(XX#m(XX#n(XX#o(XX#p(XX#q(XX#r(XX#s(XX#u(XX#w(XX#y(XX#z(XX's(XX(Y(XX(j(XX!k(XX!V(XX'q(XXr(XX![(XX%d(XX!d(XX~P!6`O!Y.nOf(cX~P!1UOf.pO~O!Y.qO!k(dX~P!:RO!k.tO~O!V.vO~OP$^O|#zO}#{O!P#|O!j#xO!l#yO!p$^O(YVOZ#ji`#jin#ji!Y#ji!i#ji#l#ji#m#ji#n#ji#o#ji#p#ji#q#ji#r#ji#s#ji#u#ji#w#ji#y#ji#z#ji's#ji(j#ji(q#ji(r#ji'q#ji!V#ji!k#jir#ji![#ji%d#ji!d#ji~O#k#ji~P#2zO#k$PO~P#2zOP$^O|#zO}#{O!P#|O!j#xO!l#yO!p$^O#k$PO#l$QO#m$QO#n$QO(YVOZ#ji`#ji!Y#ji!i#ji#o#ji#p#ji#q#ji#r#ji#s#ji#u#ji#w#ji#y#ji#z#ji's#ji(j#ji(q#ji(r#ji'q#ji!V#ji!k#jir#ji![#ji%d#ji!d#ji~On#ji~P#5lOn$RO~P#5lOP$^On$RO|#zO}#{O!P#|O!j#xO!l#yO!p$^O#k$PO#l$QO#m$QO#n$QO#o$SO(YVO`#ji!Y#ji#u#ji#w#ji#y#ji#z#ji's#ji(j#ji(q#ji(r#ji'q#ji!V#ji!k#jir#ji![#ji%d#ji!d#ji~OZ#ji!i#ji#p#ji#q#ji#r#ji#s#ji~P#8^OZ$eO!i$TO#p$TO#q$TO#r$dO#s$TO~P#8^OP$^OZ$eOn$RO|#zO}#{O!P#|O!i$TO!j#xO!l#yO!p$^O#k$PO#l$QO#m$QO#n$QO#o$SO#p$TO#q$TO#r$dO#s$TO#u$UO(YVO(r$OO`#ji!Y#ji#y#ji#z#ji's#ji(j#ji(q#ji'q#ji!V#ji!k#jir#ji![#ji%d#ji!d#ji~O#w$WO~P#;_O#w#ji~P#;_OP$^OZ$eOn$RO|#zO}#{O!P#|O!i$TO!j#xO!l#yO!p$^O#k$PO#l$QO#m$QO#n$QO#o$SO#p$TO#q$TO#r$dO#s$TO#u$UO(YVO`#ji!Y#ji#y#ji#z#ji's#ji(j#ji'q#ji!V#ji!k#jir#ji![#ji%d#ji!d#ji~O#w#ji(q#ji(r#ji~P#>PO#w$WO(q#}O(r$OO~P#>POP$^OZ$eOn$RO|#zO}#{O!P#|O!i$TO!j#xO!l#yO!p$^O#k$PO#l$QO#m$QO#n$QO#o$SO#p$TO#q$TO#r$dO#s$TO#u$UO#w$WO#y$YO(YVO(q#}O(r$OO~O`#ji!Y#ji#z#ji's#ji(j#ji'q#ji!V#ji!k#jir#ji![#ji%d#ji!d#ji~P#@wOP[XZ[Xn[X|[X}[X!P[X!i[X!j[X!l[X!p[X#][X#heX#k[X#l[X#m[X#n[X#o[X#p[X#q[X#r[X#s[X#u[X#w[X#y[X#z[X$P[X(Y[X(j[X(q[X(r[X!Y[X!Z[X~O#}[X~P#CbOP$^OZ;SOn:vO|#zO}#{O!P#|O!i:xO!j#xO!l#yO!p$^O#k:tO#l:uO#m:uO#n:uO#o:wO#p:xO#q:xO#r;RO#s:xO#u:yO#w:{O#y:}O#z;OO(YVO(j$[O(q#}O(r$OO~O#}.xO~P#EoO#];TO$P;TO#}(_X!Z(_X~P! cO`'^a!Y'^a's'^a'q'^a!k'^a!V'^ar'^a!['^a%d'^a!d'^a~P!:ROP#jiZ#ji`#jin#ji}#ji!Y#ji!i#ji!j#ji!l#ji!p#ji#k#ji#l#ji#m#ji#n#ji#o#ji#p#ji#q#ji#r#ji#s#ji#u#ji#w#ji#y#ji#z#ji's#ji(Y#ji(j#ji'q#ji!V#ji!k#jir#ji![#ji%d#ji!d#ji~P#/OO`$Oi!Y$Oi's$Oi'q$Oi!V$Oi!k$Oir$Oi![$Oi%d$Oi!d$Oi~P!:RO$Z.}O$].}O~O$Z/OO$]/OO~O!d)eO#]/PO![$aX$X$aX$Z$aX$]$aX$d$aX~O!X/QO~O![)hO$X/SO$Z)gO$])gO$d/TO~O!Y;PO!Z(^X~P#EoO!Z/UO~O!d)eO$d(sX~O$d/WO~Ot)wO(Z)xO([/ZO~O!V/_O~P!&kO(q%OOj%[a|%[a!P%[a(r%[a!Y%[a#]%[a~Of%[a#}%[a~P#NPO(r%QOj%^a|%^a!P%^a(q%^a!Y%^a#]%^a~Of%^a#}%^a~P#NrO!YeX!deX!keX!k$vX(jeX~P!/{O!X/hO!Y(YO'|/gO!V(nP!V(xP~P!1sOn*pO!_*nO!`*gO!a*gO!l*_O#X*oO%Z*jO'}!lO~Oo'XO!P/iO!X+VO!Z*mO(OTO(RUO(];cO!Z(pP~P$!]O!k/jO~P#/OO!Y/kO!d#vO(j'mO!k(wX~O!k/pO~O!P%fO!X*[O![%gO'|%eO!k(wP~O#h/rO~O!V$vX!Y$vX!d$}X~P!/{O!Y/sO!V(xX~P#/OO!d/uO~O!V/wO~Og%WOn/{O!d#vO!l%cO(j'mO~O'|/}O~O!d+eO~O`%lO!Y0RO's%lO~O!Z0TO~P!5gO!`0UO!a0UO'}!lO(]!mO~O!P0WO(]!mO~O#X0XO~Of%[a!Y%[a#]%[a#}%[a~P!1UOf%^a!Y%^a#]%^a#}%^a~P!1UO'|&WOf'gX!Y'gX~O!Y*vOf(Va~Of0bO~O|0cO}0cO!P0dOjya(qya(rya!Yya#]ya~Ofya#}ya~P$(OO|)|O!P)}Oj$oa(q$oa(r$oa!Y$oa#]$oa~Of$oa#}$oa~P$(tO|)|O!P)}Oj$qa(q$qa(r$qa!Y$qa#]$qa~Of$qa#}$qa~P$)gO#h0fO~Of%Pa!Y%Pa#]%Pa#}%Pa~P!1UO!d#vO~O#h0iO~O!Y+XO`(|a's(|a~O|#zO}#{O!P#|O!j#xO!l#yO(YVOP!riZ!rin!ri!Y!ri!i!ri!p!ri#k!ri#l!ri#m!ri#n!ri#o!ri#p!ri#q!ri#r!ri#s!ri#u!ri#w!ri#y!ri#z!ri(j!ri(q!ri(r!ri~O`!ri's!ri'q!ri!V!ri!k!rir!ri![!ri%d!ri!d!ri~P$+UOg%WOn$uOo$tOp$tOv%YOx%ZOz;YO!P$|O![$}O!f<jO!l$yO#g;`O$U%_O$p;[O$r;^O$u%`O(OTO(RUO(Y$vO(q%OO(r%QO~Ol0sO'|0rO~P$-oO!d+eO`(Ua![(Ua's(Ua!Y(Ua~O#h0yO~OZ[X!YeX!ZeX~O!Y0zO!Z)QX~O!Z0|O~OZ0}O~Oa1PO'|+mO(OTO(RUO~O![%}O'|%eO_'oX!Y'oX~O!Y+rO_)Pa~O!k1SO~P!:ROZ1VO~O_1WO~O#]1ZO~Oj1^O![$}O~O(](zO!Z(}P~Og%WOj1gO![1dO%d1fO~OZ1qO!Y1oO!Z)OX~O!Z1rO~O_1tO`%lO's%lO~O'|#nO(OTO(RUO~O#]$fO$P$fOP(_XZ(_Xn(_X|(_X}(_X!P(_X!Y(_X!i(_X!l(_X!p(_X#k(_X#l(_X#m(_X#n(_X#o(_X#p(_X#q(_X#r(_X#u(_X#w(_X#y(_X#z(_X(Y(_X(j(_X(q(_X(r(_X~O#s1wO&U1xO`(_X!j(_X~P$3VO#]$fO#s1wO&U1xO~O`1zO~P%[O`1|O~O&_2POP&]iQ&]iR&]iX&]i`&]ic&]id&]il&]in&]io&]ip&]iv&]ix&]iz&]i!P&]i!T&]i!U&]i![&]i!f&]i!l&]i!o&]i!p&]i!q&]i!s&]i!u&]i!x&]i!|&]i#t&]i$U&]i%c&]i%e&]i%g&]i%h&]i%i&]i%l&]i%n&]i%q&]i%r&]i%t&]i&Q&]i&W&]i&Y&]i&[&]i&^&]i&a&]i&g&]i&m&]i&o&]i&q&]i&s&]i&u&]i'q&]i'|&]i(O&]i(R&]i(Y&]i(h&]i(v&]i!Z&]ia&]i&d&]i~Oa2VO!Z2TO&d2UO~P`O![XO!l2XO~O&k,uOP&fiQ&fiR&fiX&fi`&fic&fid&fil&fin&fio&fip&fiv&fix&fiz&fi!P&fi!T&fi!U&fi![&fi!f&fi!l&fi!o&fi!p&fi!q&fi!s&fi!u&fi!x&fi!|&fi#t&fi$U&fi%c&fi%e&fi%g&fi%h&fi%i&fi%l&fi%n&fi%q&fi%r&fi%t&fi&Q&fi&W&fi&Y&fi&[&fi&^&fi&a&fi&g&fi&m&fi&o&fi&q&fi&s&fi&u&fi'q&fi'|&fi(O&fi(R&fi(Y&fi(h&fi(v&fi!Z&fi&_&fia&fi&d&fi~O!V2_O~O!Y!^a!Z!^a~P#EoOo!nO!P!oO!X2eO(]!mO!Y'RX!Z'RX~P@]O!Y-VO!Z(aa~O!Y'XX!Z'XX~P!9ZO!Y-YO!Z(pa~O!Z2lO~P'_O`%lO#]2uO's%lO~O`%lO!d#vO#]2uO's%lO~O`%lO!d#vO!p2yO#]2uO's%lO(j'mO~O`%lO's%lO~P!:RO!Y$bOr$na~O!V'Qi!Y'Qi~P!:RO!Y(RO!V(`i~O!Y(YO!V(ni~O!V(oi!Y(oi~P!:RO!Y(li!k(li`(li's(li~P!:RO#]2{O!Y(li!k(li`(li's(li~O!Y(fO!k(ki~O!P%fO![%gO!|]O#f3QO#g3PO'|%eO~O!P%fO![%gO#g3PO'|%eO~Oj3XO![']O%d3WO~Og%WOj3XO![']O%d3WO~O#h%[aP%[aZ%[a`%[an%[a}%[a!i%[a!j%[a!l%[a!p%[a#k%[a#l%[a#m%[a#n%[a#o%[a#p%[a#q%[a#r%[a#s%[a#u%[a#w%[a#y%[a#z%[a's%[a(Y%[a(j%[a!k%[a!V%[a'q%[ar%[a![%[a%d%[a!d%[a~P#NPO#h%^aP%^aZ%^a`%^an%^a}%^a!i%^a!j%^a!l%^a!p%^a#k%^a#l%^a#m%^a#n%^a#o%^a#p%^a#q%^a#r%^a#s%^a#u%^a#w%^a#y%^a#z%^a's%^a(Y%^a(j%^a!k%^a!V%^a'q%^ar%^a![%^a%d%^a!d%^a~P#NrO#h%[aP%[aZ%[a`%[an%[a}%[a!Y%[a!i%[a!j%[a!l%[a!p%[a#k%[a#l%[a#m%[a#n%[a#o%[a#p%[a#q%[a#r%[a#s%[a#u%[a#w%[a#y%[a#z%[a's%[a(Y%[a(j%[a!k%[a!V%[a'q%[a#]%[ar%[a![%[a%d%[a!d%[a~P#/OO#h%^aP%^aZ%^a`%^an%^a}%^a!Y%^a!i%^a!j%^a!l%^a!p%^a#k%^a#l%^a#m%^a#n%^a#o%^a#p%^a#q%^a#r%^a#s%^a#u%^a#w%^a#y%^a#z%^a's%^a(Y%^a(j%^a!k%^a!V%^a'q%^a#]%^ar%^a![%^a%d%^a!d%^a~P#/OO#hyaPyaZya`yanya!iya!jya!lya!pya#kya#lya#mya#nya#oya#pya#qya#rya#sya#uya#wya#yya#zya'sya(Yya(jya!kya!Vya'qyarya![ya%dya!dya~P$(OO#h$oaP$oaZ$oa`$oan$oa}$oa!i$oa!j$oa!l$oa!p$oa#k$oa#l$oa#m$oa#n$oa#o$oa#p$oa#q$oa#r$oa#s$oa#u$oa#w$oa#y$oa#z$oa's$oa(Y$oa(j$oa!k$oa!V$oa'q$oar$oa![$oa%d$oa!d$oa~P$(tO#h$qaP$qaZ$qa`$qan$qa}$qa!i$qa!j$qa!l$qa!p$qa#k$qa#l$qa#m$qa#n$qa#o$qa#p$qa#q$qa#r$qa#s$qa#u$qa#w$qa#y$qa#z$qa's$qa(Y$qa(j$qa!k$qa!V$qa'q$qar$qa![$qa%d$qa!d$qa~P$)gO#h%PaP%PaZ%Pa`%Pan%Pa}%Pa!Y%Pa!i%Pa!j%Pa!l%Pa!p%Pa#k%Pa#l%Pa#m%Pa#n%Pa#o%Pa#p%Pa#q%Pa#r%Pa#s%Pa#u%Pa#w%Pa#y%Pa#z%Pa's%Pa(Y%Pa(j%Pa!k%Pa!V%Pa'q%Pa#]%Par%Pa![%Pa%d%Pa!d%Pa~P#/OO`#`q!Y#`q's#`q'q#`q!V#`q!k#`qr#`q![#`q%d#`q!d#`q~P!:ROf'SX!Y'SX~P!(ZO!Y.nOf(ca~O!X3cO!Y'TX!k'TX~P%[O!Y.qO!k(da~O!Y.qO!k(da~P!:RO!V3fO~O#}!na!Z!na~PKVO#}!ga!Y!ga!Z!ga~P#EoO#}!ra!Z!ra~P!<lO#}!ta!Z!ta~P!?VORfO![3xO$b3yO~O!Z3}O~Or4OO~P#/OO`$kq!Y$kq's$kq'q$kq!V$kq!k$kqr$kq![$kq%d$kq!d$kq~P!:RO!V4PO~P#/OO|)|O!P)}O(r%QOj'ca(q'ca!Y'ca#]'ca~Of'ca#}'ca~P%,yO|)|O!P)}Oj'ea(q'ea(r'ea!Y'ea#]'ea~Of'ea#}'ea~P%-lO(j$[O~P#/OO!VeX!V$vX!YeX!Y$vX!d$}X#]eX~P!/{O'|;lO~P!1sOlkO'|4RO~P.iO!P%fO!X4TO![%gO'|%eO!Y'_X!k'_X~O!Y/kO!k(wa~O!Y/kO!d#vO!k(wa~O!Y/kO!d#vO(j'mO!k(wa~Of$xi!Y$xi#]$xi#}$xi~P!1UO!X4]O!V'aX!Y'aX~P!3rO!Y/sO!V(xa~O!Y/sO!V(xa~P#/OO!d#vO#s4eO~On4hO!d#vO(j'mO~O(q%OOj%[i|%[i!P%[i(r%[i!Y%[i#]%[i~Of%[i#}%[i~P%1zO(r%QOj%^i|%^i!P%^i(q%^i!Y%^i#]%^i~Of%^i#}%^i~P%2mOf(Wi!Y(Wi~P!1UO#]4oOf(Wi!Y(Wi~P!1UO!k4rO~O`$lq!Y$lq's$lq'q$lq!V$lq!k$lqr$lq![$lq%d$lq!d$lq~P!:RO!V4vO~O!Y4wO![(yX~P#/OO!j#xO~P4XO`$vX![$vX%X[X's$vX!Y$vX~P!/{O%X4yO`kXjkX|kX!PkX![kX'skX(qkX(rkX!YkX~O%X4yO~Oa5PO%e5QO'|+mO(OTO(RUO!Y'nX!Z'nX~O!Y0zO!Z)Qa~OZ5UO~O_5VO~O`%lO's%lO~P#/OO![$}O~P#/OO!Y5_O#]5aO!Z(}X~O!Z5bO~Oo!nO!P5cO!_!yO!`!vO!a!vO!|:lO#Q!pO#R!pO#S!pO#T!pO#U!pO#X5hO#Y!zO'}!lO(OTO(RUO(]!mO(h!sO~O!Z5gO~P%8OOj5mO![1dO%d5lO~Og%WOj5mO![1dO%d5lO~Oa5tO'|#nO(OTO(RUO!Y'mX!Z'mX~O!Y1oO!Z)Oa~O(OTO(RUO(]5vO~O_5zO~O#s5}O&U6OO~PMuO!k6PO~P%[O`6RO~O`6RO~P%[Oa2VO!Z6WO&d2UO~P`O!d6YO~O!d6[Og(bi!Y(bi!Z(bi!d(bi!l(bi~O!Y#ei!Z#ei~P#EoO#]6]O!Y#ei!Z#ei~O!Y!^i!Z!^i~P#EoO`%lO#]6fO's%lO~O`%lO!d#vO#]6fO's%lO~O!Y(lq!k(lq`(lq's(lq~P!:RO!Y(fO!k(kq~O!P%fO![%gO#g6mO'|%eO~O![']O%d6pO~Oj6sO![']O%d6pO~O#h'caP'caZ'ca`'can'ca}'ca!i'ca!j'ca!l'ca!p'ca#k'ca#l'ca#m'ca#n'ca#o'ca#p'ca#q'ca#r'ca#s'ca#u'ca#w'ca#y'ca#z'ca's'ca(Y'ca(j'ca!k'ca!V'ca'q'car'ca!['ca%d'ca!d'ca~P%,yO#h'eaP'eaZ'ea`'ean'ea}'ea!i'ea!j'ea!l'ea!p'ea#k'ea#l'ea#m'ea#n'ea#o'ea#p'ea#q'ea#r'ea#s'ea#u'ea#w'ea#y'ea#z'ea's'ea(Y'ea(j'ea!k'ea!V'ea'q'ear'ea!['ea%d'ea!d'ea~P%-lO#h$xiP$xiZ$xi`$xin$xi}$xi!Y$xi!i$xi!j$xi!l$xi!p$xi#k$xi#l$xi#m$xi#n$xi#o$xi#p$xi#q$xi#r$xi#s$xi#u$xi#w$xi#y$xi#z$xi's$xi(Y$xi(j$xi!k$xi!V$xi'q$xi#]$xir$xi![$xi%d$xi!d$xi~P#/OO#h%[iP%[iZ%[i`%[in%[i}%[i!i%[i!j%[i!l%[i!p%[i#k%[i#l%[i#m%[i#n%[i#o%[i#p%[i#q%[i#r%[i#s%[i#u%[i#w%[i#y%[i#z%[i's%[i(Y%[i(j%[i!k%[i!V%[i'q%[ir%[i![%[i%d%[i!d%[i~P%1zO#h%^iP%^iZ%^i`%^in%^i}%^i!i%^i!j%^i!l%^i!p%^i#k%^i#l%^i#m%^i#n%^i#o%^i#p%^i#q%^i#r%^i#s%^i#u%^i#w%^i#y%^i#z%^i's%^i(Y%^i(j%^i!k%^i!V%^i'q%^ir%^i![%^i%d%^i!d%^i~P%2mOf'Sa!Y'Sa~P!1UO!Y'Ta!k'Ta~P!:RO!Y.qO!k(di~O#}#`i!Y#`i!Z#`i~P#EoOP$^O|#zO}#{O!P#|O!j#xO!l#yO!p$^O(YVOZ#jin#ji!i#ji#l#ji#m#ji#n#ji#o#ji#p#ji#q#ji#r#ji#s#ji#u#ji#w#ji#y#ji#z#ji#}#ji(j#ji(q#ji(r#ji!Y#ji!Z#ji~O#k#ji~P%KOO#k:tO~P%KOOP$^O|#zO}#{O!P#|O!j#xO!l#yO!p$^O#k:tO#l:uO#m:uO#n:uO(YVOZ#ji!i#ji#o#ji#p#ji#q#ji#r#ji#s#ji#u#ji#w#ji#y#ji#z#ji#}#ji(j#ji(q#ji(r#ji!Y#ji!Z#ji~On#ji~P%MZOn:vO~P%MZOP$^On:vO|#zO}#{O!P#|O!j#xO!l#yO!p$^O#k:tO#l:uO#m:uO#n:uO#o:wO(YVO#u#ji#w#ji#y#ji#z#ji#}#ji(j#ji(q#ji(r#ji!Y#ji!Z#ji~OZ#ji!i#ji#p#ji#q#ji#r#ji#s#ji~P& fOZ;SO!i:xO#p:xO#q:xO#r;RO#s:xO~P& fOP$^OZ;SOn:vO|#zO}#{O!P#|O!i:xO!j#xO!l#yO!p$^O#k:tO#l:uO#m:uO#n:uO#o:wO#p:xO#q:xO#r;RO#s:xO#u:yO(YVO(r$OO#y#ji#z#ji#}#ji(j#ji(q#ji!Y#ji!Z#ji~O#w:{O~P&$QO#w#ji~P&$QOP$^OZ;SOn:vO|#zO}#{O!P#|O!i:xO!j#xO!l#yO!p$^O#k:tO#l:uO#m:uO#n:uO#o:wO#p:xO#q:xO#r;RO#s:xO#u:yO(YVO#y#ji#z#ji#}#ji(j#ji!Y#ji!Z#ji~O#w#ji(q#ji(r#ji~P&&]O#w:{O(q#}O(r$OO~P&&]OP$^OZ;SOn:vO|#zO}#{O!P#|O!i:xO!j#xO!l#yO!p$^O#k:tO#l:uO#m:uO#n:uO#o:wO#p:xO#q:xO#r;RO#s:xO#u:yO#w:{O#y:}O(YVO(q#}O(r$OO~O#z#ji#}#ji(j#ji!Y#ji!Z#ji~P&(nO`#{y!Y#{y's#{y'q#{y!V#{y!k#{yr#{y![#{y%d#{y!d#{y~P!:ROj<qO|)|O!P)}O(q%OO(r%QO~OP#jiZ#jin#ji}#ji!i#ji!j#ji!l#ji!p#ji#k#ji#l#ji#m#ji#n#ji#o#ji#p#ji#q#ji#r#ji#s#ji#u#ji#w#ji#y#ji#z#ji#}#ji(Y#ji(j#ji!Y#ji!Z#ji~P&+fO!j#xOP(XXZ(XXj(XXn(XX|(XX}(XX!P(XX!i(XX!l(XX!p(XX#k(XX#l(XX#m(XX#n(XX#o(XX#p(XX#q(XX#r(XX#s(XX#u(XX#w(XX#y(XX#z(XX#}(XX(Y(XX(j(XX(q(XX(r(XX!Y(XX!Z(XX~O#}$Oi!Y$Oi!Z$Oi~P#EoO#}!ri!Z!ri~P$+UO!Z7VO~O!Y'^a!Z'^a~P#EoOP[XZ[Xn[X|[X}[X!P[X!V[X!Y[X!i[X!j[X!l[X!p[X#][X#heX#k[X#l[X#m[X#n[X#o[X#p[X#q[X#r[X#s[X#u[X#w[X#y[X#z[X$P[X(Y[X(j[X(q[X(r[X~O!d%UX#s%UX~P&0hO!d#vO(j'mO!Y'_a!k'_a~O!Y/kO!k(wi~O!Y/kO!d#vO!k(wi~Of$xq!Y$xq#]$xq#}$xq~P!1UO!V'aa!Y'aa~P#/OO!d7^O~O!Y/sO!V(xi~P#/OO!Y/sO!V(xi~O!V7bO~O!d#vO#s7gO~On7hO!d#vO(j'mO~O|)|O!P)}O(r%QOj'da(q'da!Y'da#]'da~Of'da#}'da~P&5WO|)|O!P)}Oj'fa(q'fa(r'fa!Y'fa#]'fa~Of'fa#}'fa~P&5yO!V7jO~Of$zq!Y$zq#]$zq#}$zq~P!1UO`$ly!Y$ly's$ly'q$ly!V$ly!k$lyr$ly![$ly%d$ly!d$ly~P!:RO!d6[O~O!Y4wO![(ya~O`#`y!Y#`y's#`y'q#`y!V#`y!k#`yr#`y![#`y%d#`y!d#`y~P!:ROZ7oO~Oa7qO'|+mO(OTO(RUO~O!Y0zO!Z)Qi~O_7uO~O(](zO!Y'jX!Z'jX~O!Y5_O!Z(}a~O!Z8OO~P%8OOo!nO!P8PO(OTO(RUO(]!mO(h!sO~O![1dO~O![1dO%d8RO~Oj8UO![1dO%d8RO~OZ8ZO!Y'ma!Z'ma~O!Y1oO!Z)Oi~O!k8_O~O!k8`O~O!k8cO~O!k8cO~P%[O`8eO~O!d8fO~O!k8gO~O!Y(oi!Z(oi~P#EoO`%lO#]8oO's%lO~O!Y(ly!k(ly`(ly's(ly~P!:RO!Y(fO!k(ky~O![']O%d8rO~O#h$xqP$xqZ$xq`$xqn$xq}$xq!Y$xq!i$xq!j$xq!l$xq!p$xq#k$xq#l$xq#m$xq#n$xq#o$xq#p$xq#q$xq#r$xq#s$xq#u$xq#w$xq#y$xq#z$xq's$xq(Y$xq(j$xq!k$xq!V$xq'q$xq#]$xqr$xq![$xq%d$xq!d$xq~P#/OO#h'daP'daZ'da`'dan'da}'da!i'da!j'da!l'da!p'da#k'da#l'da#m'da#n'da#o'da#p'da#q'da#r'da#s'da#u'da#w'da#y'da#z'da's'da(Y'da(j'da!k'da!V'da'q'dar'da!['da%d'da!d'da~P&5WO#h'faP'faZ'fa`'fan'fa}'fa!i'fa!j'fa!l'fa!p'fa#k'fa#l'fa#m'fa#n'fa#o'fa#p'fa#q'fa#r'fa#s'fa#u'fa#w'fa#y'fa#z'fa's'fa(Y'fa(j'fa!k'fa!V'fa'q'far'fa!['fa%d'fa!d'fa~P&5yO#h$zqP$zqZ$zq`$zqn$zq}$zq!Y$zq!i$zq!j$zq!l$zq!p$zq#k$zq#l$zq#m$zq#n$zq#o$zq#p$zq#q$zq#r$zq#s$zq#u$zq#w$zq#y$zq#z$zq's$zq(Y$zq(j$zq!k$zq!V$zq'q$zq#]$zqr$zq![$zq%d$zq!d$zq~P#/OO!Y'Ti!k'Ti~P!:RO#}#`q!Y#`q!Z#`q~P#EoO(q%OOP%[aZ%[an%[a}%[a!i%[a!j%[a!l%[a!p%[a#k%[a#l%[a#m%[a#n%[a#o%[a#p%[a#q%[a#r%[a#s%[a#u%[a#w%[a#y%[a#z%[a#}%[a(Y%[a(j%[a!Y%[a!Z%[a~Oj%[a|%[a!P%[a(r%[a~P&GUO(r%QOP%^aZ%^an%^a}%^a!i%^a!j%^a!l%^a!p%^a#k%^a#l%^a#m%^a#n%^a#o%^a#p%^a#q%^a#r%^a#s%^a#u%^a#w%^a#y%^a#z%^a#}%^a(Y%^a(j%^a!Y%^a!Z%^a~Oj%^a|%^a!P%^a(q%^a~P&I]Oj<qO|)|O!P)}O(r%QO~P&GUOj<qO|)|O!P)}O(q%OO~P&I]O|0cO}0cO!P0dOPyaZyajyanya!iya!jya!lya!pya#kya#lya#mya#nya#oya#pya#qya#rya#sya#uya#wya#yya#zya#}ya(Yya(jya(qya(rya!Yya!Zya~O|)|O!P)}OP$oaZ$oaj$oan$oa}$oa!i$oa!j$oa!l$oa!p$oa#k$oa#l$oa#m$oa#n$oa#o$oa#p$oa#q$oa#r$oa#s$oa#u$oa#w$oa#y$oa#z$oa#}$oa(Y$oa(j$oa(q$oa(r$oa!Y$oa!Z$oa~O|)|O!P)}OP$qaZ$qaj$qan$qa}$qa!i$qa!j$qa!l$qa!p$qa#k$qa#l$qa#m$qa#n$qa#o$qa#p$qa#q$qa#r$qa#s$qa#u$qa#w$qa#y$qa#z$qa#}$qa(Y$qa(j$qa(q$qa(r$qa!Y$qa!Z$qa~OP%PaZ%Pan%Pa}%Pa!i%Pa!j%Pa!l%Pa!p%Pa#k%Pa#l%Pa#m%Pa#n%Pa#o%Pa#p%Pa#q%Pa#r%Pa#s%Pa#u%Pa#w%Pa#y%Pa#z%Pa#}%Pa(Y%Pa(j%Pa!Y%Pa!Z%Pa~P&+fO#}$kq!Y$kq!Z$kq~P#EoO#}$lq!Y$lq!Z$lq~P#EoO!Z9OO~O#}9PO~P!1UO!d#vO!Y'_i!k'_i~O!d#vO(j'mO!Y'_i!k'_i~O!Y/kO!k(wq~O!V'ai!Y'ai~P#/OO!Y/sO!V(xq~O!V9VO~P#/OO!V9VO~Of(Wy!Y(Wy~P!1UO!Y'ha!['ha~P#/OO`%Wq![%Wq's%Wq!Y%Wq~P#/OOZ9[O~O!Y0zO!Z)Qq~O#]9`O!Y'ja!Z'ja~O!Y5_O!Z(}i~P#EoO![1dO%d9dO~O(OTO(RUO(]9iO~O!Y1oO!Z)Oq~O!k9lO~O!k9mO~O!k9nO~O!k9nO~P%[O#]9qO!Y#ey!Z#ey~O!Y#ey!Z#ey~P#EoO![']O%d9vO~O#}#{y!Y#{y!Z#{y~P#EoOP$xiZ$xin$xi}$xi!i$xi!j$xi!l$xi!p$xi#k$xi#l$xi#m$xi#n$xi#o$xi#p$xi#q$xi#r$xi#s$xi#u$xi#w$xi#y$xi#z$xi#}$xi(Y$xi(j$xi!Y$xi!Z$xi~P&+fO|)|O!P)}O(r%QOP'caZ'caj'can'ca}'ca!i'ca!j'ca!l'ca!p'ca#k'ca#l'ca#m'ca#n'ca#o'ca#p'ca#q'ca#r'ca#s'ca#u'ca#w'ca#y'ca#z'ca#}'ca(Y'ca(j'ca(q'ca!Y'ca!Z'ca~O|)|O!P)}OP'eaZ'eaj'ean'ea}'ea!i'ea!j'ea!l'ea!p'ea#k'ea#l'ea#m'ea#n'ea#o'ea#p'ea#q'ea#r'ea#s'ea#u'ea#w'ea#y'ea#z'ea#}'ea(Y'ea(j'ea(q'ea(r'ea!Y'ea!Z'ea~O(q%OOP%[iZ%[ij%[in%[i|%[i}%[i!P%[i!i%[i!j%[i!l%[i!p%[i#k%[i#l%[i#m%[i#n%[i#o%[i#p%[i#q%[i#r%[i#s%[i#u%[i#w%[i#y%[i#z%[i#}%[i(Y%[i(j%[i(r%[i!Y%[i!Z%[i~O(r%QOP%^iZ%^ij%^in%^i|%^i}%^i!P%^i!i%^i!j%^i!l%^i!p%^i#k%^i#l%^i#m%^i#n%^i#o%^i#p%^i#q%^i#r%^i#s%^i#u%^i#w%^i#y%^i#z%^i#}%^i(Y%^i(j%^i(q%^i!Y%^i!Z%^i~O#}$ly!Y$ly!Z$ly~P#EoO#}#`y!Y#`y!Z#`y~P#EoO!d#vO!Y'_q!k'_q~O!Y/kO!k(wy~O!V'aq!Y'aq~P#/OO!V:PO~P#/OO!Y0zO!Z)Qy~O!Y5_O!Z(}q~O![1dO%d:WO~O!k:ZO~O![']O%d:`O~OP$xqZ$xqn$xq}$xq!i$xq!j$xq!l$xq!p$xq#k$xq#l$xq#m$xq#n$xq#o$xq#p$xq#q$xq#r$xq#s$xq#u$xq#w$xq#y$xq#z$xq#}$xq(Y$xq(j$xq!Y$xq!Z$xq~P&+fO|)|O!P)}O(r%QOP'daZ'daj'dan'da}'da!i'da!j'da!l'da!p'da#k'da#l'da#m'da#n'da#o'da#p'da#q'da#r'da#s'da#u'da#w'da#y'da#z'da#}'da(Y'da(j'da(q'da!Y'da!Z'da~O|)|O!P)}OP'faZ'faj'fan'fa}'fa!i'fa!j'fa!l'fa!p'fa#k'fa#l'fa#m'fa#n'fa#o'fa#p'fa#q'fa#r'fa#s'fa#u'fa#w'fa#y'fa#z'fa#}'fa(Y'fa(j'fa(q'fa(r'fa!Y'fa!Z'fa~OP$zqZ$zqn$zq}$zq!i$zq!j$zq!l$zq!p$zq#k$zq#l$zq#m$zq#n$zq#o$zq#p$zq#q$zq#r$zq#s$zq#u$zq#w$zq#y$zq#z$zq#}$zq(Y$zq(j$zq!Y$zq!Z$zq~P&+fOf%`!Z!Y%`!Z#]%`!Z#}%`!Z~P!1UO!Y'jq!Z'jq~P#EoO!Y#e!Z!Z#e!Z~P#EoO#h%`!ZP%`!ZZ%`!Z`%`!Zn%`!Z}%`!Z!Y%`!Z!i%`!Z!j%`!Z!l%`!Z!p%`!Z#k%`!Z#l%`!Z#m%`!Z#n%`!Z#o%`!Z#p%`!Z#q%`!Z#r%`!Z#s%`!Z#u%`!Z#w%`!Z#y%`!Z#z%`!Z's%`!Z(Y%`!Z(j%`!Z!k%`!Z!V%`!Z'q%`!Z#]%`!Zr%`!Z![%`!Z%d%`!Z!d%`!Z~P#/OOP%`!ZZ%`!Zn%`!Z}%`!Z!i%`!Z!j%`!Z!l%`!Z!p%`!Z#k%`!Z#l%`!Z#m%`!Z#n%`!Z#o%`!Z#p%`!Z#q%`!Z#r%`!Z#s%`!Z#u%`!Z#w%`!Z#y%`!Z#z%`!Z#}%`!Z(Y%`!Z(j%`!Z!Y%`!Z!Z%`!Z~P&+fOr(^X~P1qO|%pO~P!*mO'}!lO~P!*mO!VeX!YeX#]eX~P&0hOP[XZ[Xn[X|[X}[X!P[X!Y[X!YeX!i[X!j[X!l[X!p[X#][X#]eX#heX#k[X#l[X#m[X#n[X#o[X#p[X#q[X#r[X#s[X#u[X#w[X#y[X#z[X$P[X(Y[X(j[X(q[X(r[X~O!deX!k[X!keX(jeX~P'EaOP:kOQ:kORfOc<fOd!iOlkOn:kOokOpkOvkOx:kOz:kO!PWO!TkO!UkO![XO!f:nO!lZO!o:kO!p:kO!q:kO!s:oO!u:rO!x!hO$U!kO'|)[O(OTO(RUO(YVO(h[O(v<dO~O!Y;PO!Z$na~Og%WOl%XOn$uOo$tOp$tOv%YOx%ZOz;ZO!P$|O![$}O!f<kO!l$yO#g;aO$U%_O$p;]O$r;_O$u%`O'|(rO(OTO(RUO(Y$vO(q%OO(r%QO~O#t)cO~P'JVOn!bX(j!bX~P# xO!Z[X!ZeX~P'EaO!VeX!V$vX!YeX!Y$vX#]eX~P!/{O#h:sO~O!d#vO#h:sO~O#];TO~O#s:xO~O#];dO!Y(oX!Z(oX~O#];TO!Y(mX!Z(mX~O#h;eO~Of;gO~P!1UO#h;mO~O#h;nO~O!d#vO#h;oO~O!d#vO#h;eO~O#};pO~P#EoO#h;qO~O#h;rO~O#h;wO~O#h;xO~O#h;yO~O#h;zO~O#};{O~P!1UO#};|O~P!1UO!j#Q#R#T#U#X#f#g#r(v$p$r$u%X%c%d%e%l%n%q%r%t%v~'wS#l!U'u'}#mo#k#nn|'v$Z'v'|$](]~",
  goto: "$4d)UPPPPP)VPP)YP)kP*{/QPPPP5xPP6`PP<V?lP@PP@PPPP@PPBPP@PP@PP@PPBTPPBYPBwPGpPPPGtPPPPGtJvPPPJ|KxPGtPGtNWPPPP!!fGtPPPGtPGtP!$tGtP!(Z!)]!)fP!*Y!*^!*YPPPPP!-j!)]PP!-z!.tP!1hGtGt!1m!4x!9`!9`!=^PPP!=fGtPPPPPPPPPPP!@tP!BRPPGt!CdPGtPGtGtGtGtPGt!DvP!HPP!KUP!KY!Kd!Kh!KhP!G|P!Kl!KlP!NqP!NuGtGt!N{#$P@PP@PP@P@PP#%]@P@P#'g@P#*V@P#,Z@P@P#,y#/V#/V#/[#/e#/V#/nP#/VP@P#0W@P#3w@P@P5xPPP#7nPPP#8X#8XP#8XP#8o#8XPP#8uP#8lP#8l#9Y#8l#9t#9z5u)Y#9})YP#:U#:U#:UP)YP)YP)YP)YPP)YP#:[#:_P#:_)YP#:cP#:fP)YP)YP)YP)YP)YP)Y)YPP#:l#:r#:}#;T#;Z#;a#;g#;u#;{#<R#<]#<c#<m#<}#=T#=u#>X#>_#>e#>s#?Y#@w#AV#A^#Br#CQ#Dl#Dz#EQ#EW#E^#Eh#En#Et#FO#Fb#FhPPPPPPPPPP#FnPPPPPPP#Gc#Jj#Ky#LQ#LYPPPP$#`$&W$,p$,s$,v$-c$-f$-i$-p$-xP$.OP$.l$.p$/h$0v$0{$1cPP$1h$1n$1rP$1u$1y$1}$2s$3[$3s$3w$3z$3}$4T$4W$4[$4`R!|RoqOXst!Z#d%k&o&q&r&t,m,r2P2SY!vQ']-_1d5fQ%rvQ%zyQ&R|Q&g!VS'T!e-VQ'c!iS'i!r!yU*g$}*X*lQ+k%{Q+x&TQ,^&aQ-]'[Q-g'dQ-o'jQ0U*nQ1n,_R;b:o%QdOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#y#|$P$Q$R$S$T$U$V$W$X$Y$Z$b$f%k%r&P&h&k&o&q&r&t&x'Q'_'o(P(R(X(`(t(x(|){+S+W,j,m,r-c-k-y.P.q.x/i0d0i0y1g1w1x1z1|2P2S2U2u2{3c5c5m5}6O6R6f8P8U8e8oS#q]:l!r)^$]$n'U)p-O-R/Q2e3x5a6]9`9q:k:n:o:r:s:t:u:v:w:x:y:z:{:|:};O;P;T;b;d;e;g;o;p;y;z<gQ*y%[Q+p%}Q,`&dQ,g&lQ.h;YQ0p+cQ0t+eQ1P+qQ1v,eQ3T.aQ5P0zQ5t1oQ6r3XQ7O;ZQ7q5QR8u6s'OkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#y#|$P$Q$R$S$T$U$V$W$X$Y$Z$]$b$f$n%k%r&P&h&k&l&o&q&r&t&x'Q'U'_'o(P(R(X(`(t(x(|)p){+S+W+c,j,m,r-O-R-c-k-y.P.a.q.x/Q/i0d0i0y1g1w1x1z1|2P2S2U2e2u2{3X3c3x5a5c5m5}6O6R6]6f6s8P8U8e8o9`9q:k:n:o:r:s:t:u:v:w:x:y:z:{:|:};O;P;T;b;d;e;g;o;p;y;z<gt!nQ!r!v!y!z'T'[']'i'j'k-V-]-_-o1d5f5h$z$ti#v#x$d$e$y$|%P%R%]%^%b)w)}*P*R*T*W*^*d*t*u+b+e+|,P.`.n/`/h/r/s/u0Y0[0f1Z1^1f3W4Q4]4e4o4w4y5l6p7^7g8R8r9P9d9v:W:`;R;S;U;V;W;X;[;];^;_;`;a;h;i;j;k;m;n;q;r;s;t;u;v;w;x;{;|<d<l<m<p<qQ&U|Q'R!eU'X%g*X-YQ+p%}Q,`&dQ0e*}Q1P+qQ1U+wQ1u,dQ1v,eQ5P0zQ5Y1WQ5t1oQ5w1qQ5x1tQ7q5QQ7t5VQ8^5zQ9_7uR9j8ZrnOXst!V!Z#d%k&f&o&q&r&t,m,r2P2SR,b&h&x^OPXYstuvwz!Z!`!g!j!o#S#d#o#u#y#|$P$Q$R$S$T$U$V$W$X$Y$Z$]$b$f$n%k%r&P&h&k&l&o&q&r&t&x'Q'_'o(R(X(`(t(x(|)p){+S+W+c,j,m,r-O-R-c-k-y.P.a.q.x/Q/i0d0i0y1g1w1x1z1|2P2S2U2e2u2{3X3c3x5a5c5m5}6O6R6]6f6s8P8U8e8o9`9q:k:n:o:r:s:t:u:v:w:x:y:z:{:|:};O;P;T;b;d;e;g;o;p;y;z<f<g[#]WZ#W#Z'U(P!b%hm#h#i#l$y%c%f(Y(d(e(f*W*[*_+U+V+X,i-P-}.T.U.V.X/h/k2X3P3Q4T6[6mQ%uxQ%yyS&O|&TQ&[!TQ'`!hQ'b!iQ(m#sS+j%z%{Q+n%}Q,X&_Q,]&aS-f'c'dQ.c(nQ0x+kQ1O+qQ1Q+rQ1T+vQ1i,YS1m,^,_Q2q-gQ5O0zQ5S0}Q5X1VQ5s1nQ7p5QQ7s5UQ9Z7oR:R9[!O${i#x%P%R%]%^%b*P*R*^*t*u.n/r0Y0[0f4Q4o9P<d<l<m!S%wy!i!u%y%z%{'S'b'c'd'h'r*f+j+k-S-f-g-n/|0x2j2q2x4gQ+d%uQ+}&XQ,Q&YQ,[&aQ.b(mQ1h,XU1l,],^,_Q3Y.cQ5n1iS5r1m1nQ8Y5s#[<h#v$d$e$y$|)w)}*T*W*d+b+e+|,P.`/`/h/s/u1Z1^1f3W4]4e4w4y5l6p7^7g8R8r9d9v:W:`;U;W;[;^;`;h;j;m;q;s;u;w;{<p<qo<i;R;S;V;X;];_;a;i;k;n;r;t;v;x;|W%Ui%W*v<dS&X!Q&fQ&Y!RQ&Z!SR+{&V${%Ti#v#x$d$e$y$|%P%R%]%^%b)w)}*P*R*T*W*^*d*t*u+b+e+|,P.`.n/`/h/r/s/u0Y0[0f1Z1^1f3W4Q4]4e4o4w4y5l6p7^7g8R8r9P9d9v:W:`;R;S;U;V;W;X;[;];^;_;`;a;h;i;j;k;m;n;q;r;s;t;u;v;w;x;{;|<d<l<m<p<qT)x$v)yV*z%[;Y;ZW'X!e%g*X-YS({#z#{Q+_%pQ+u&QS.[(i(jQ1_,RQ4p0cR7y5_'OkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#y#|$P$Q$R$S$T$U$V$W$X$Y$Z$]$b$f$n%k%r&P&h&k&l&o&q&r&t&x'Q'U'_'o(P(R(X(`(t(x(|)p){+S+W+c,j,m,r-O-R-c-k-y.P.a.q.x/Q/i0d0i0y1g1w1x1z1|2P2S2U2e2u2{3X3c3x5a5c5m5}6O6R6]6f6s8P8U8e8o9`9q:k:n:o:r:s:t:u:v:w:x:y:z:{:|:};O;P;T;b;d;e;g;o;p;y;z<g$i$ac#Y#e%o%q%s(O(U(p(w)P)Q)R)S)T)U)V)W)X)Y)Z)])`)d)n+`+t-T-r-w-|.O.m.s.w.y.z.{/[0g2`2c2s2z3b3g3h3i3j3k3l3m3n3o3p3q3r3s3v3w3|4t4|6_6e6j6x6y7S7T7{8i8m8v8|8}9s:T:[:m<ZT#TV#U'PkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#y#|$P$Q$R$S$T$U$V$W$X$Y$Z$]$b$f$n%k%r&P&h&k&l&o&q&r&t&x'Q'U'_'o(P(R(X(`(t(x(|)p){+S+W+c,j,m,r-O-R-c-k-y.P.a.q.x/Q/i0d0i0y1g1w1x1z1|2P2S2U2e2u2{3X3c3x5a5c5m5}6O6R6]6f6s8P8U8e8o9`9q:k:n:o:r:s:t:u:v:w:x:y:z:{:|:};O;P;T;b;d;e;g;o;p;y;z<gQ'V!eR2f-Vv!nQ!e!r!v!y!z'T'[']'i'j'k-V-]-_-o1d5f5hU*f$}*X*lS/|*g*nQ0V*oQ1a,TQ4g0UR4j0XnqOXst!Z#d%k&o&q&r&t,m,r2P2SQ&v!^Q's!xS(o#u:sQ+h%xQ,V&[Q,W&^Q-d'aQ-q'lS.l(t;eS0h+S;oQ0v+iQ1c,UQ2W,tQ2Y,uQ2b-QQ2o-eQ2r-iS4u0i;yQ4z0wS4}0y;zQ6^2dQ6b2pQ6g2wQ7n4{Q8j6`Q8k6cQ8n6hR9p8g$d$`c#Y#e%q%s(O(U(p(w)P)Q)R)S)T)U)V)W)X)Y)Z)])`)d)n+`+t-T-r-w-|.O.m.s.w.z.{/[0g2`2c2s2z3b3g3h3i3j3k3l3m3n3o3p3q3r3s3v3w3|4t4|6_6e6j6x6y7S7T7{8i8m8v8|8}9s:T:[:m<ZS(l#p'fU*s%S(s3uS+^%o.yQ3U0pQ6o3TQ8t6rR9w8u$d$_c#Y#e%q%s(O(U(p(w)P)Q)R)S)T)U)V)W)X)Y)Z)])`)d)n+`+t-T-r-w-|.O.m.s.w.z.{/[0g2`2c2s2z3b3g3h3i3j3k3l3m3n3o3p3q3r3s3v3w3|4t4|6_6e6j6x6y7S7T7{8i8m8v8|8}9s:T:[:m<ZS(k#p'fS(}#{$`S+]%o.yS.](j(lQ.|)_Q0m+^R3R.^'OkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#y#|$P$Q$R$S$T$U$V$W$X$Y$Z$]$b$f$n%k%r&P&h&k&l&o&q&r&t&x'Q'U'_'o(P(R(X(`(t(x(|)p){+S+W+c,j,m,r-O-R-c-k-y.P.a.q.x/Q/i0d0i0y1g1w1x1z1|2P2S2U2e2u2{3X3c3x5a5c5m5}6O6R6]6f6s8P8U8e8o9`9q:k:n:o:r:s:t:u:v:w:x:y:z:{:|:};O;P;T;b;d;e;g;o;p;y;z<gS#q]:lQ&q!XQ&r!YQ&t![Q&u!]R2O,pQ'^!hQ+a%uQ-b'`S._(m+dQ2m-aW3V.b.c0o0qQ6a2nU6n3S3U3YS8q6o6qS9u8s8tS:^9t9wQ:f:_R:i:gU!wQ']-_T5d1d5f!Q_OXZ`st!V!Z#d#h%c%k&f&h&o&q&r&t(f,m,r.U2P2S]!pQ!r']-_1d5fT#q]:l%[{OPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#y#|$P$Q$R$S$T$U$V$W$X$Y$Z$b$f%k%r&P&h&k&l&o&q&r&t&x'Q'_'o(P(R(X(`(t(x(|){+S+W+c,j,m,r-c-k-y.P.a.q.x/i0d0i0y1g1w1x1z1|2P2S2U2u2{3X3c5c5m5}6O6R6f6s8P8U8e8oS({#z#{S.[(i(j!s<Q$]$n'U)p-O-R/Q2e3x5a6]9`9q:k:n:o:r:s:t:u:v:w:x:y:z:{:|:};O;P;T;b;d;e;g;o;p;y;z<gm!tQ!r!v!y!z']'i'j'k-_-o1d5f5hQ'q!uS(b#g1yS-m'h'tQ/n*ZQ/z*fQ2y-pQ4X/oS4b/{0VQ7Y4SS7e4h4jQ9R7ZR9Y7hQ#wbQ'p!uS(a#g1yS(c#m+RQ+T%dQ+f%vQ+l%|U-l'h'q'tQ.Q(bQ/m*ZQ/y*fQ0P*iQ0u+gQ1j,ZS2v-m-pQ3O.YS4W/n/oS4a/z0VQ4d0OQ4f0QQ5p1kQ6i2yQ7X4SQ7]4XS7a4b4jQ7f4iQ8W5qS9Q7Y7ZQ9U7bQ9W7eQ9g8XQ9}9RQ:O9VQ:Q9YQ:Y9hQ:b:PQ<T<OQ<`<XR<a<YV!wQ']-_%[aOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#y#|$P$Q$R$S$T$U$V$W$X$Y$Z$b$f%k%r&P&h&k&l&o&q&r&t&x'Q'_'o(P(R(X(`(t(x(|){+S+W+c,j,m,r-c-k-y.P.a.q.x/i0d0i0y1g1w1x1z1|2P2S2U2u2{3X3c5c5m5}6O6R6f6s8P8U8e8oS#wz!j!r;}$]$n'U)p-O-R/Q2e3x5a6]9`9q:k:n:o:r:s:t:u:v:w:x:y:z:{:|:};O;P;T;b;d;e;g;o;p;y;z<gR<T<f%[bOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#y#|$P$Q$R$S$T$U$V$W$X$Y$Z$b$f%k%r&P&h&k&l&o&q&r&t&x'Q'_'o(P(R(X(`(t(x(|){+S+W+c,j,m,r-c-k-y.P.a.q.x/i0d0i0y1g1w1x1z1|2P2S2U2u2{3X3c5c5m5}6O6R6f6s8P8U8e8oQ%dj!S%vy!i!u%y%z%{'S'b'c'd'h'r*f+j+k-S-f-g-n/|0x2j2q2x4gS%|z!jQ+g%wQ,Z&aW1k,[,],^,_U5q1l1m1nS8X5r5sQ9h8Y!r<O$]$n'U)p-O-R/Q2e3x5a6]9`9q:k:n:o:r:s:t:u:v:w:x:y:z:{:|:};O;P;T;b;d;e;g;o;p;y;z<gQ<X<eR<Y<f%OeOPXYstuvw!Z!`!g!o#S#d#o#u#y#|$P$Q$R$S$T$U$V$W$X$Y$Z$b$f%k%r&P&h&k&o&q&r&t&x'Q'_'o(R(X(`(t(x(|){+S+W+c,j,m,r-c-k-y.P.a.q.x/i0d0i0y1g1w1x1z1|2P2S2U2u2{3X3c5c5m5}6O6R6f6s8P8U8e8oY#bWZ#W#Z(P!b%hm#h#i#l$y%c%f(Y(d(e(f*W*[*_+U+V+X,i-P-}.T.U.V.X/h/k2X3P3Q4T6[6mQ,h&l!p<P$]$n)p-O-R/Q2e3x5a6]9`9q:k:n:o:r:s:t:u:v:w:x:y:z:{:|:};O;P;T;b;d;e;g;o;p;y;z<gR<S'UU'Y!e%g*XR2h-Y%QdOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#y#|$P$Q$R$S$T$U$V$W$X$Y$Z$b$f%k%r&P&h&k&o&q&r&t&x'Q'_'o(P(R(X(`(t(x(|){+S+W,j,m,r-c-k-y.P.q.x/i0d0i0y1g1w1x1z1|2P2S2U2u2{3c5c5m5}6O6R6f8P8U8e8o!r)^$]$n'U)p-O-R/Q2e3x5a6]9`9q:k:n:o:r:s:t:u:v:w:x:y:z:{:|:};O;P;T;b;d;e;g;o;p;y;z<gQ,g&lQ0p+cQ3T.aQ6r3XR8u6s!b$Vc#Y%o(O(U(p(w)Y)Z)`)d+t-r-w-|.O.m.s/[0g2s2z3b3s4t4|6e6j6x8m9s:m!P:z)])n-T.y2`2c3g3q3r3v3|6_6y7S7T7{8i8v8|8}:T:[<Z!f$Xc#Y%o(O(U(p(w)V)W)Y)Z)`)d+t-r-w-|.O.m.s/[0g2s2z3b3s4t4|6e6j6x8m9s:m!T:|)])n-T.y2`2c3g3n3o3q3r3v3|6_6y7S7T7{8i8v8|8}:T:[<Z!^$]c#Y%o(O(U(p(w)`)d+t-r-w-|.O.m.s/[0g2s2z3b3s4t4|6e6j6x8m9s:mQ4Q/fz<g)])n-T.y2`2c3g3v3|6_6y7S7T7{8i8v8|8}:T:[<ZQ<l<nR<m<o'OkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#y#|$P$Q$R$S$T$U$V$W$X$Y$Z$]$b$f$n%k%r&P&h&k&l&o&q&r&t&x'Q'U'_'o(P(R(X(`(t(x(|)p){+S+W+c,j,m,r-O-R-c-k-y.P.a.q.x/Q/i0d0i0y1g1w1x1z1|2P2S2U2e2u2{3X3c3x5a5c5m5}6O6R6]6f6s8P8U8e8o9`9q:k:n:o:r:s:t:u:v:w:x:y:z:{:|:};O;P;T;b;d;e;g;o;p;y;z<gS$oh$pR3y/P'VgOPWXYZhstuvw!Z!`!g!o#S#W#Z#d#o#u#y#|$P$Q$R$S$T$U$V$W$X$Y$Z$]$b$f$n$p%k%r&P&h&k&l&o&q&r&t&x'Q'U'_'o(P(R(X(`(t(x(|)p){+S+W+c,j,m,r-O-R-c-k-y.P.a.q.x/P/Q/i0d0i0y1g1w1x1z1|2P2S2U2e2u2{3X3c3x5a5c5m5}6O6R6]6f6s8P8U8e8o9`9q:k:n:o:r:s:t:u:v:w:x:y:z:{:|:};O;P;T;b;d;e;g;o;p;y;z<gT$kf$qQ$ifS)g$l)kR)s$qT$jf$qT)i$l)k'VhOPWXYZhstuvw!Z!`!g!o#S#W#Z#d#o#u#y#|$P$Q$R$S$T$U$V$W$X$Y$Z$]$b$f$n$p%k%r&P&h&k&l&o&q&r&t&x'Q'U'_'o(P(R(X(`(t(x(|)p){+S+W+c,j,m,r-O-R-c-k-y.P.a.q.x/P/Q/i0d0i0y1g1w1x1z1|2P2S2U2e2u2{3X3c3x5a5c5m5}6O6R6]6f6s8P8U8e8o9`9q:k:n:o:r:s:t:u:v:w:x:y:z:{:|:};O;P;T;b;d;e;g;o;p;y;z<gT$oh$pQ$rhR)r$p%[jOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#y#|$P$Q$R$S$T$U$V$W$X$Y$Z$b$f%k%r&P&h&k&l&o&q&r&t&x'Q'_'o(P(R(X(`(t(x(|){+S+W+c,j,m,r-c-k-y.P.a.q.x/i0d0i0y1g1w1x1z1|2P2S2U2u2{3X3c5c5m5}6O6R6f6s8P8U8e8o!s<e$]$n'U)p-O-R/Q2e3x5a6]9`9q:k:n:o:r:s:t:u:v:w:x:y:z:{:|:};O;P;T;b;d;e;g;o;p;y;z<g#elOPXZst!Z!`!o#S#d#o#|$n%k&h&k&l&o&q&r&t&x'Q'_(|)p+W+c,j,m,r-c.a/Q/i0d1g1w1x1z1|2P2S2U3X3x5c5m5}6O6R6s8P8U8e!O%Si#x%P%R%]%^%b*P*R*^*t*u.n/r0Y0[0f4Q4o9P<d<l<m#[(s#v$d$e$y$|)w)}*T*W*d+b+e+|,P.`/`/h/s/u1Z1^1f3W4]4e4w4y5l6p7^7g8R8r9d9v:W:`;U;W;[;^;`;h;j;m;q;s;u;w;{<p<qQ+O%`Q/])|o3u;R;S;V;X;];_;a;i;k;n;r;t;v;x;|!O$zi#x%P%R%]%^%b*P*R*^*t*u.n/r0Y0[0f4Q4o9P<d<l<mQ*`${U*i$}*X*lQ+P%aQ0Q*j#[<V#v$d$e$y$|)w)}*T*W*d+b+e+|,P.`/`/h/s/u1Z1^1f3W4]4e4w4y5l6p7^7g8R8r9d9v:W:`;U;W;[;^;`;h;j;m;q;s;u;w;{<p<qn<W;R;S;V;X;];_;a;i;k;n;r;t;v;x;|Q<[<hQ<]<iQ<^<jR<_<k!O%Si#x%P%R%]%^%b*P*R*^*t*u.n/r0Y0[0f4Q4o9P<d<l<m#[(s#v$d$e$y$|)w)}*T*W*d+b+e+|,P.`/`/h/s/u1Z1^1f3W4]4e4w4y5l6p7^7g8R8r9d9v:W:`;U;W;[;^;`;h;j;m;q;s;u;w;{<p<qo3u;R;S;V;X;];_;a;i;k;n;r;t;v;x;|noOXst!Z#d%k&o&q&r&t,m,r2P2SS*c$|*WQ,{&{Q,|&}R4[/s$z%Ti#v#x$d$e$y$|%P%R%]%^%b)w)}*P*R*T*W*^*d*t*u+b+e+|,P.`.n/`/h/r/s/u0Y0[0f1Z1^1f3W4Q4]4e4o4w4y5l6p7^7g8R8r9P9d9v:W:`;R;S;U;V;W;X;[;];^;_;`;a;h;i;j;k;m;n;q;r;s;t;u;v;w;x;{;|<d<l<m<p<qQ,O&YQ1],QQ5]1[R7x5^V*k$}*X*lU*k$}*X*lT5e1d5fU0O*h/i5cT4i0W8PQ+f%vQ0P*iQ0u+gQ1j,ZQ5p1kQ8W5qQ9g8XR:Y9h!O%Pi#x%P%R%]%^%b*P*R*^*t*u.n/r0Y0[0f4Q4o9P<d<l<mr*P$w(u*Q*r+Q/q0^0_3`4Y4s7W7i9|<U<b<cS0Y*q0Z#[;U#v$d$e$y$|)w)}*T*W*d+b+e+|,P.`/`/h/s/u1Z1^1f3W4]4e4w4y5l6p7^7g8R8r9d9v:W:`;U;W;[;^;`;h;j;m;q;s;u;w;{<p<qn;V;R;S;V;X;];_;a;i;k;n;r;t;v;x;|!^;h(q)b*Y*b.d.g.k/X/^/f/v0n1Y1[3]4Z4_5[5^6t6w7_7c7k7m9T9X:a<n<o`;i3t6z6}7R8w9x9{:jS;s.f3^T;t6|8z!O%Ri#x%P%R%]%^%b*P*R*^*t*u.n/r0Y0[0f4Q4o9P<d<l<mv*R$w(u*S*q+Q/b/q0^0_3`4Y4k4s7W7i9|<U<b<cS0[*r0]#[;W#v$d$e$y$|)w)}*T*W*d+b+e+|,P.`/`/h/s/u1Z1^1f3W4]4e4w4y5l6p7^7g8R8r9d9v:W:`;U;W;[;^;`;h;j;m;q;s;u;w;{<p<qn;X;R;S;V;X;];_;a;i;k;n;r;t;v;x;|!b;j(q)b*Y*b.e.f.k/X/^/f/v0n1Y1[3Z3]4Z4_5[5^6t6u6w7_7c7k7m9T9X:a<n<od;k3t6{6|7R8w8x9x9y9{:jS;u.g3_T;v6}8{rnOXst!V!Z#d%k&f&o&q&r&t,m,r2P2SQ&c!UR,j&lrnOXst!V!Z#d%k&f&o&q&r&t,m,r2P2SR&c!UQ,S&ZR1X+{snOXst!V!Z#d%k&f&o&q&r&t,m,r2P2SQ1e,XS5k1h1iU8Q5i5j5nS9c8S8TS:U9b9eQ:c:VR:h:dQ&j!VR,c&fR5w1qS&O|&TR1Q+rQ&o!WR,m&pR,s&uT2Q,r2SR,w&vQ,v&vR2Z,wQ'v!{R-s'vSsOtQ#dXT%ns#dQ#OTR'x#OQ#RUR'z#RQ)y$vR/Y)yQ#UVR'|#UQ#XWU(S#X(T-zQ(T#YR-z(UQ-W'VR2g-WQ.o(uR3a.oQ.r(wS3d.r3eR3e.sQ-_']R2k-_Y!rQ']-_1d5fR'g!rU#_W%f*WU(Z#_([-{Q([#`R-{(VQ-Z'YR2i-Zt`OXst!V!Z#d%k&f&h&o&q&r&t,m,r2P2SS#hZ%cU#r`#h.UR.U(fQ(g#jQ.R(cW.Z(g.R2|6kQ2|.SR6k2}Q)k$lR/R)kQ$phR)q$pQ$ccU)a$c-v;QQ-v:mR;Q)nQ/l*ZW4U/l4V7[9SU4V/m/n/oS7[4W4XR9S7]$X*O$w(q(u)b*Y*b*q*r*{*|+Q.f.g.i.j.k/X/^/b/d/f/q/v0^0_0n1Y1[3Z3[3]3`3t4Y4Z4_4k4m4s5[5^6t6u6v6w6|6}7P7Q7R7W7_7c7i7k7m8w8x8y9T9X9x9y9z9{9|:a:j<U<b<c<n<oQ/t*bU4^/t4`7`Q4`/vR7`4_S*l$}*XR0S*lr*Q$w(u*q*r+Q/q0^0_3`4Y4s7W7i9|<U<b<c!^.d(q)b*Y*b.f.g.k/X/^/f/v0n1Y1[3]4Z4_5[5^6t6w7_7c7k7m9T9X:a<n<oU/c*Q.d6za6z3t6|6}7R8w9x9{:jQ0Z*qQ3^.fU4l0Z3^8zR8z6|v*S$w(u*q*r+Q/b/q0^0_3`4Y4k4s7W7i9|<U<b<c!b.e(q)b*Y*b.f.g.k/X/^/f/v0n1Y1[3Z3]4Z4_5[5^6t6u6w7_7c7k7m9T9X:a<n<oU/e*S.e6{e6{3t6|6}7R8w8x9x9y9{:jQ0]*rQ3_.gU4n0]3_8{R8{6}Q*w%VR0a*wQ4x0nR7l4xQ+Y%iR0l+YQ5`1_S7z5`9aR9a7{Q,U&[R1b,UQ5f1dR7}5fQ1p,`S5u1p8[R8[5wQ0{+nW5R0{5T7r9]Q5T1OQ7r5SR9]7sQ+s&OR1R+sQ2S,rR6V2SYrOXst#dQ&s!ZQ+[%kQ,l&oQ,n&qQ,o&rQ,q&tQ1},mS2Q,r2SR6U2PQ%mpQ&w!_Q&z!aQ&|!bQ'O!cQ'n!uQ+Z%jQ+h%xQ+z&UQ,b&jQ,y&yW-j'h'p'q'tQ-q'lQ0R*kQ0v+iS1s,c,fQ2[,xQ2],{Q2^,|Q2r-iW2t-l-m-p-rQ4z0wQ5W1UQ5Z1YQ5o1jQ5y1uQ6T2OU6d2s2v2yQ6g2wQ7n4{Q7v5YQ7w5[Q7|5eQ8V5pQ8]5xS8l6e6iQ8n6hQ9^7tQ9f8WQ9k8^Q9r8mQ:S9_Q:X9gQ:]9sR:e:YQ%xyQ'a!iQ'l!uU+i%y%z%{Q-Q'SU-e'b'c'dS-i'h'rQ/x*fS0w+j+kQ2d-SS2p-f-gQ2w-nQ4c/|Q4{0xQ6`2jQ6c2qQ6h2xR7d4gS$xi<dR*x%WU%Vi%W<dR0`*vQ$wiS(q#v+eQ(u#xS)b$d$eQ*Y$yS*b$|*WQ*q%PQ*r%RQ*{%]Q*|%^Q+Q%bQ.f;UQ.g;WQ.i;[Q.j;^Q.k;`Q/X)wS/^)}/`Q/b*PQ/d*RQ/f*TQ/q*^S/v*d/hQ0^*tQ0_*uh0n+b.`1f3W5l6p8R8r9d9v:W:`Q1Y+|Q1[,PQ3Z;hQ3[;jQ3];mQ3`.nS3t;R;SQ4Y/rQ4Z/sQ4_/uQ4k0YQ4m0[Q4s0fQ5[1ZQ5^1^Q6t;qQ6u;sQ6v;uQ6w;wQ6|;VQ6};XQ7P;]Q7Q;_Q7R;aQ7W4QQ7_4]Q7c4eQ7i4oQ7k4wQ7m4yQ8w;nQ8x;iQ8y;kQ9T7^Q9X7gQ9x;rQ9y;tQ9z;vQ9{;xQ9|9PQ:a;{Q:j;|Q<U<dQ<b<lQ<c<mQ<n<pR<o<qnpOXst!Z#d%k&o&q&r&t,m,r2P2SQ!fPS#fZ#oQ&y!`U'e!o5c8PQ'{#SQ)O#|Q)o$nS,f&h&kQ,k&lQ,x&xQ,}'QQ-a'_Q.u(|Q/V)pS0j+W/iQ0q+cQ1{,jQ2n-cQ3U.aQ3{/QQ4q0dQ5j1gQ5{1wQ5|1xQ6Q1zQ6S1|Q6X2UQ6o3XQ7U3xQ8T5mQ8a5}Q8b6OQ8d6RQ8t6sQ9e8UR9o8e#YcOPXZst!Z!`!o#d#o#|%k&h&k&l&o&q&r&t&x'Q'_(|+W+c,j,m,r-c.a/i0d1g1w1x1z1|2P2S2U3X5c5m5}6O6R6s8P8U8eQ#YWQ#eYQ%ouQ%qvS%sw!gS(O#W(RQ(U#ZQ(p#uQ(w#yQ)P$PQ)Q$QQ)R$RQ)S$SQ)T$TQ)U$UQ)V$VQ)W$WQ)X$XQ)Y$YQ)Z$ZQ)]$]Q)`$bQ)d$fW)n$n)p/Q3xQ+`%rQ+t&PS-T'U2eQ-r'oS-w(P-yQ-|(XQ.O(`Q.m(tQ.s(xQ.w:kQ.y:nQ.z:oQ.{:rQ/[){Q0g+SQ2`-OQ2c-RQ2s-kQ2z.PQ3b.qQ3g:sQ3h:tQ3i:uQ3j:vQ3k:wQ3l:xQ3m:yQ3n:zQ3o:{Q3p:|Q3q:}Q3r;OQ3s.xQ3v;TQ3w;bQ3|;PQ4t0iQ4|0yQ6_;dQ6e2uQ6j2{Q6x3cQ6y;eQ7S;gQ7T;oQ7{5aQ8i6]Q8m6fQ8v;pQ8|;yQ8};zQ9s8oQ:T9`Q:[9qQ:m#SR<Z<gR#[WR'W!el!tQ!r!v!y!z']'i'j'k-_-o1d5f5hS'S!e-VS-S'T'[R2j-]R(v#xR(y#yQ!fQT-^']-_]!qQ!r']-_1d5fQ#p]R'f:lY!uQ']-_1d5fQ'h!rS'r!v!yS't!z5hS-n'i'jQ-p'kR2x-oT#kZ%cS#jZ%cS%im,iU(c#h#i#lS.S(d(eQ.W(fQ0k+XQ2}.TU3O.U.V.XS6l3P3QR8p6md#^W#W#Z%f(P(Y*W+U-}/hr#gZm#h#i#l%c(d(e(f+X.T.U.V.X3P3Q6mS*Z$y*_Q/o*[Q1y,iQ2a-PQ4S/kQ6Z2XQ7Z4TQ8h6[T<R'U+VV#aW%f*WU#`W%f*WS(Q#W(YU(V#Z+U/hS-U'U+VT-x(P-}V'Z!e%g*XQ$lfR)u$qT)j$l)kR3z/PT*]$y*_T*e$|*WQ0o+bQ3S.`Q5i1fQ6q3WQ8S5lQ8s6pQ9b8RQ9t8rQ:V9dQ:_9vQ:d:WR:g:`nqOXst!Z#d%k&o&q&r&t,m,r2P2SQ&i!VR,b&ftmOXst!U!V!Z#d%k&f&o&q&r&t,m,r2P2SR,i&lT%jm,iR1`,RR,a&dQ&S|R+y&TR+o%}T&m!W&pT&n!W&pT2R,r2S",
  nodeNames: "⚠ ArithOp ArithOp JSXStartTag LineComment BlockComment Script Hashbang ExportDeclaration export Star as VariableName String Escape from ; default FunctionDeclaration async function VariableDefinition > < TypeParamList TypeDefinition extends ThisType this LiteralType ArithOp Number BooleanLiteral TemplateType InterpolationEnd Interpolation InterpolationStart NullType null VoidType void TypeofType typeof MemberExpression . ?. PropertyName [ TemplateString Escape Interpolation super RegExp ] ArrayExpression Spread , } { ObjectExpression Property async get set PropertyDefinition Block : NewTarget new NewExpression TypeArgList CompareOp < ) ( ArgList UnaryExpression delete LogicOp BitOp YieldExpression yield AwaitExpression await ParenthesizedExpression ClassExpression class ClassBody MethodDeclaration Decorator @ MemberExpression PrivatePropertyName CallExpression declare Privacy static abstract override PrivatePropertyDefinition PropertyDeclaration readonly accessor Optional TypeAnnotation Equals StaticBlock FunctionExpression ArrowFunction ParamList ParamList ArrayPattern ObjectPattern PatternProperty Privacy readonly Arrow MemberExpression BinaryExpression ArithOp ArithOp ArithOp ArithOp BitOp CompareOp instanceof satisfies in const CompareOp BitOp BitOp BitOp LogicOp LogicOp ConditionalExpression LogicOp LogicOp AssignmentExpression UpdateOp PostfixExpression CallExpression TaggedTemplateExpression DynamicImport import ImportMeta JSXElement JSXSelfCloseEndTag JSXSelfClosingTag JSXIdentifier JSXBuiltin JSXIdentifier JSXNamespacedName JSXMemberExpression JSXSpreadAttribute JSXAttribute JSXAttributeValue JSXEscape JSXEndTag JSXOpenTag JSXFragmentTag JSXText JSXEscape JSXStartCloseTag JSXCloseTag PrefixCast ArrowFunction TypeParamList SequenceExpression KeyofType keyof UniqueType unique ImportType InferredType infer TypeName ParenthesizedType FunctionSignature ParamList NewSignature IndexedType TupleType Label ArrayType ReadonlyType ObjectType MethodType PropertyType IndexSignature PropertyDefinition CallSignature TypePredicate is NewSignature new UnionType LogicOp IntersectionType LogicOp ConditionalType ParameterizedType ClassDeclaration abstract implements type VariableDeclaration let var using TypeAliasDeclaration InterfaceDeclaration interface EnumDeclaration enum EnumBody NamespaceDeclaration namespace module AmbientDeclaration declare GlobalDeclaration global ClassDeclaration ClassBody AmbientFunctionDeclaration ExportGroup VariableName VariableName ImportDeclaration ImportGroup ForStatement for ForSpec ForInSpec ForOfSpec of WhileStatement while WithStatement with DoStatement do IfStatement if else SwitchStatement switch SwitchBody CaseLabel case DefaultLabel TryStatement try CatchClause catch FinallyClause finally ReturnStatement return ThrowStatement throw BreakStatement break ContinueStatement continue DebuggerStatement debugger LabeledStatement ExpressionStatement SingleExpression SingleClassItem",
  maxTerm: 373,
  context: wR,
  nodeProps: [
    ["isolate", -8, 4, 5, 13, 33, 35, 48, 50, 52, ""],
    ["group", -26, 8, 16, 18, 65, 202, 206, 210, 211, 213, 216, 219, 229, 231, 237, 239, 241, 243, 246, 252, 258, 260, 262, 264, 266, 268, 269, "Statement", -33, 12, 13, 28, 31, 32, 38, 48, 51, 52, 54, 59, 67, 69, 76, 80, 82, 84, 85, 107, 108, 117, 118, 135, 138, 140, 141, 142, 143, 145, 146, 165, 166, 168, "Expression", -23, 27, 29, 33, 37, 39, 41, 169, 171, 173, 174, 176, 177, 178, 180, 181, 182, 184, 185, 186, 196, 198, 200, 201, "Type", -3, 88, 100, 106, "ClassItem"],
    ["openedBy", 22, "<", 34, "InterpolationStart", 53, "[", 57, "{", 73, "(", 158, "JSXStartCloseTag"],
    ["closedBy", 23, ">", 36, "InterpolationEnd", 47, "]", 58, "}", 74, ")", 163, "JSXEndTag"]
  ],
  propSources: [VR],
  skippedNodes: [0, 4, 5, 272],
  repeatNodeCount: 37,
  tokenData: "$HR07[R!bOX%ZXY+gYZ-yZ[+g[]%Z]^.c^p%Zpq+gqr/mrs3cst:_tuEruvJSvwLkwx! Yxy!'iyz!(sz{!)}{|!,q|}!.O}!O!,q!O!P!/Y!P!Q!9j!Q!R#:O!R![#<_![!]#I_!]!^#Jk!^!_#Ku!_!`$![!`!a$$v!a!b$*T!b!c$.S!c!}Er!}#O$/^#O#P$0h#P#Q$6P#Q#R$7Z#R#SEr#S#T$8h#T#o$9r#o#p$>S#p#q$>x#q#r$@Y#r#s$Af#s$f%Z$f$g+g$g#BYEr#BY#BZ$Bp#BZ$ISEr$IS$I_$Bp$I_$I|Er$I|$I}$E{$I}$JO$E{$JO$JTEr$JT$JU$Bp$JU$KVEr$KV$KW$Bp$KW&FUEr&FU&FV$Bp&FV;'SEr;'S;=`I|<%l?HTEr?HT?HU$Bp?HUOEr(n%d_$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z&j&hT$g&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c&j&zP;=`<%l&c'|'U]$g&j(S!bOY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}!b(SU(S!bOY'}Zw'}x#O'}#P;'S'};'S;=`(f<%lO'}!b(iP;=`<%l'}'|(oP;=`<%l&}'[(y]$g&j(PpOY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(rp)wU(PpOY)rZr)rs#O)r#P;'S)r;'S;=`*Z<%lO)rp*^P;=`<%l)r'[*dP;=`<%l(r#S*nX(Pp(S!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g#S+^P;=`<%l*g(n+dP;=`<%l%Z07[+rq$g&j(Pp(S!b'u0/lOX%ZXY+gYZ&cZ[+g[p%Zpq+gqr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p$f%Z$f$g+g$g#BY%Z#BY#BZ+g#BZ$IS%Z$IS$I_+g$I_$JT%Z$JT$JU+g$JU$KV%Z$KV$KW+g$KW&FU%Z&FU&FV+g&FV;'S%Z;'S;=`+a<%l?HT%Z?HT?HU+g?HUO%Z07[.ST(Q#S$g&j'v0/lO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c07[.n_$g&j(Pp(S!b'v0/lOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z)3p/x`$g&j!p),Q(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`0z!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW1V`#u(Ch$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`2X!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW2d_#u(Ch$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'At3l_(O':f$g&j(S!bOY4kYZ5qZr4krs7nsw4kwx5qx!^4k!^!_8p!_#O4k#O#P5q#P#o4k#o#p8p#p;'S4k;'S;=`:X<%lO4k(^4r_$g&j(S!bOY4kYZ5qZr4krs7nsw4kwx5qx!^4k!^!_8p!_#O4k#O#P5q#P#o4k#o#p8p#p;'S4k;'S;=`:X<%lO4k&z5vX$g&jOr5qrs6cs!^5q!^!_6y!_#o5q#o#p6y#p;'S5q;'S;=`7h<%lO5q&z6jT$b`$g&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c`6|TOr6yrs7]s;'S6y;'S;=`7b<%lO6y`7bO$b``7eP;=`<%l6y&z7kP;=`<%l5q(^7w]$b`$g&j(S!bOY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}!r8uZ(S!bOY8pYZ6yZr8prs9hsw8pwx6yx#O8p#O#P6y#P;'S8p;'S;=`:R<%lO8p!r9oU$b`(S!bOY'}Zw'}x#O'}#P;'S'};'S;=`(f<%lO'}!r:UP;=`<%l8p(^:[P;=`<%l4k%9[:hh$g&j(Pp(S!bOY%ZYZ&cZq%Zqr<Srs&}st%ZtuCruw%Zwx(rx!^%Z!^!_*g!_!c%Z!c!}Cr!}#O%Z#O#P&c#P#R%Z#R#SCr#S#T%Z#T#oCr#o#p*g#p$g%Z$g;'SCr;'S;=`El<%lOCr(r<__VS$g&j(Pp(S!bOY<SYZ&cZr<Srs=^sw<Swx@nx!^<S!^!_Bm!_#O<S#O#P>`#P#o<S#o#pBm#p;'S<S;'S;=`Cl<%lO<S(Q=g]VS$g&j(S!bOY=^YZ&cZw=^wx>`x!^=^!^!_?q!_#O=^#O#P>`#P#o=^#o#p?q#p;'S=^;'S;=`@h<%lO=^&n>gXVS$g&jOY>`YZ&cZ!^>`!^!_?S!_#o>`#o#p?S#p;'S>`;'S;=`?k<%lO>`S?XSVSOY?SZ;'S?S;'S;=`?e<%lO?SS?hP;=`<%l?S&n?nP;=`<%l>`!f?xWVS(S!bOY?qZw?qwx?Sx#O?q#O#P?S#P;'S?q;'S;=`@b<%lO?q!f@eP;=`<%l?q(Q@kP;=`<%l=^'`@w]VS$g&j(PpOY@nYZ&cZr@nrs>`s!^@n!^!_Ap!_#O@n#O#P>`#P#o@n#o#pAp#p;'S@n;'S;=`Bg<%lO@ntAwWVS(PpOYApZrAprs?Ss#OAp#O#P?S#P;'SAp;'S;=`Ba<%lOAptBdP;=`<%lAp'`BjP;=`<%l@n#WBvYVS(Pp(S!bOYBmZrBmrs?qswBmwxApx#OBm#O#P?S#P;'SBm;'S;=`Cf<%lOBm#WCiP;=`<%lBm(rCoP;=`<%l<S%9[C}i$g&j(h%1l(Pp(S!bOY%ZYZ&cZr%Zrs&}st%ZtuCruw%Zwx(rx!Q%Z!Q![Cr![!^%Z!^!_*g!_!c%Z!c!}Cr!}#O%Z#O#P&c#P#R%Z#R#SCr#S#T%Z#T#oCr#o#p*g#p$g%Z$g;'SCr;'S;=`El<%lOCr%9[EoP;=`<%lCr07[FRk$g&j(Pp(S!b$Z#t'|,2j(]$I[OY%ZYZ&cZr%Zrs&}st%ZtuEruw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Er![!^%Z!^!_*g!_!c%Z!c!}Er!}#O%Z#O#P&c#P#R%Z#R#SEr#S#T%Z#T#oEr#o#p*g#p$g%Z$g;'SEr;'S;=`I|<%lOEr+dHRk$g&j(Pp(S!b$Z#tOY%ZYZ&cZr%Zrs&}st%ZtuGvuw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Gv![!^%Z!^!_*g!_!c%Z!c!}Gv!}#O%Z#O#P&c#P#R%Z#R#SGv#S#T%Z#T#oGv#o#p*g#p$g%Z$g;'SGv;'S;=`Iv<%lOGv+dIyP;=`<%lGv07[JPP;=`<%lEr(KWJ_`$g&j(Pp(S!b#m(ChOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KWKl_$g&j$P(Ch(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z,#xLva(r+JY$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sv%ZvwM{wx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KWNW`$g&j#y(Ch(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'At! c_(R';W$g&j(PpOY!!bYZ!#hZr!!brs!#hsw!!bwx!$xx!^!!b!^!_!%z!_#O!!b#O#P!#h#P#o!!b#o#p!%z#p;'S!!b;'S;=`!'c<%lO!!b'l!!i_$g&j(PpOY!!bYZ!#hZr!!brs!#hsw!!bwx!$xx!^!!b!^!_!%z!_#O!!b#O#P!#h#P#o!!b#o#p!%z#p;'S!!b;'S;=`!'c<%lO!!b&z!#mX$g&jOw!#hwx6cx!^!#h!^!_!$Y!_#o!#h#o#p!$Y#p;'S!#h;'S;=`!$r<%lO!#h`!$]TOw!$Ywx7]x;'S!$Y;'S;=`!$l<%lO!$Y`!$oP;=`<%l!$Y&z!$uP;=`<%l!#h'l!%R]$b`$g&j(PpOY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(r!Q!&PZ(PpOY!%zYZ!$YZr!%zrs!$Ysw!%zwx!&rx#O!%z#O#P!$Y#P;'S!%z;'S;=`!']<%lO!%z!Q!&yU$b`(PpOY)rZr)rs#O)r#P;'S)r;'S;=`*Z<%lO)r!Q!'`P;=`<%l!%z'l!'fP;=`<%l!!b/5|!'t_!l/.^$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z#&U!)O_!k!Lf$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z-!n!*[b$g&j(Pp(S!b'}%&f#n(ChOY%ZYZ&cZr%Zrs&}sw%Zwx(rxz%Zz{!+d{!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW!+o`$g&j(Pp(S!b#k(ChOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z+;x!,|`$g&j(Pp(S!bn+4YOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z,$U!.Z_!Y+Jf$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z07[!/ec$g&j(Pp(S!b|.2^OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!0p!P!Q%Z!Q![!3Y![!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z#%|!0ya$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!2O!P!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z#%|!2Z_!X!L^$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad!3eg$g&j(Pp(S!bo'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!3Y![!^%Z!^!_*g!_!g%Z!g!h!4|!h#O%Z#O#P&c#P#R%Z#R#S!3Y#S#X%Z#X#Y!4|#Y#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad!5Vg$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx{%Z{|!6n|}%Z}!O!6n!O!Q%Z!Q![!8S![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!8S#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad!6wc$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!8S![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!8S#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad!8_c$g&j(Pp(S!bo'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!8S![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!8S#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z07[!9uf$g&j(Pp(S!b#l(ChOY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcxz!;Zz{#-}{!P!;Z!P!Q#/d!Q!^!;Z!^!_#(i!_!`#7S!`!a#8i!a!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;Z?O!;fb$g&j(Pp(S!b!U7`OY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcx!P!;Z!P!Q#&`!Q!^!;Z!^!_#(i!_!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;Z>^!<w`$g&j(S!b!U7`OY!<nYZ&cZw!<nwx!=yx!P!<n!P!Q!Eq!Q!^!<n!^!_!Gr!_!}!<n!}#O!KS#O#P!Dy#P#o!<n#o#p!Gr#p;'S!<n;'S;=`!L]<%lO!<n<z!>Q^$g&j!U7`OY!=yYZ&cZ!P!=y!P!Q!>|!Q!^!=y!^!_!@c!_!}!=y!}#O!CW#O#P!Dy#P#o!=y#o#p!@c#p;'S!=y;'S;=`!Ek<%lO!=y<z!?Td$g&j!U7`O!^&c!_#W&c#W#X!>|#X#Z&c#Z#[!>|#[#]&c#]#^!>|#^#a&c#a#b!>|#b#g&c#g#h!>|#h#i&c#i#j!>|#j#k!>|#k#m&c#m#n!>|#n#o&c#p;'S&c;'S;=`&w<%lO&c7`!@hX!U7`OY!@cZ!P!@c!P!Q!AT!Q!}!@c!}#O!Ar#O#P!Bq#P;'S!@c;'S;=`!CQ<%lO!@c7`!AYW!U7`#W#X!AT#Z#[!AT#]#^!AT#a#b!AT#g#h!AT#i#j!AT#j#k!AT#m#n!AT7`!AuVOY!ArZ#O!Ar#O#P!B[#P#Q!@c#Q;'S!Ar;'S;=`!Bk<%lO!Ar7`!B_SOY!ArZ;'S!Ar;'S;=`!Bk<%lO!Ar7`!BnP;=`<%l!Ar7`!BtSOY!@cZ;'S!@c;'S;=`!CQ<%lO!@c7`!CTP;=`<%l!@c<z!C][$g&jOY!CWYZ&cZ!^!CW!^!_!Ar!_#O!CW#O#P!DR#P#Q!=y#Q#o!CW#o#p!Ar#p;'S!CW;'S;=`!Ds<%lO!CW<z!DWX$g&jOY!CWYZ&cZ!^!CW!^!_!Ar!_#o!CW#o#p!Ar#p;'S!CW;'S;=`!Ds<%lO!CW<z!DvP;=`<%l!CW<z!EOX$g&jOY!=yYZ&cZ!^!=y!^!_!@c!_#o!=y#o#p!@c#p;'S!=y;'S;=`!Ek<%lO!=y<z!EnP;=`<%l!=y>^!Ezl$g&j(S!b!U7`OY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#W&}#W#X!Eq#X#Z&}#Z#[!Eq#[#]&}#]#^!Eq#^#a&}#a#b!Eq#b#g&}#g#h!Eq#h#i&}#i#j!Eq#j#k!Eq#k#m&}#m#n!Eq#n#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}8r!GyZ(S!b!U7`OY!GrZw!Grwx!@cx!P!Gr!P!Q!Hl!Q!}!Gr!}#O!JU#O#P!Bq#P;'S!Gr;'S;=`!J|<%lO!Gr8r!Hse(S!b!U7`OY'}Zw'}x#O'}#P#W'}#W#X!Hl#X#Z'}#Z#[!Hl#[#]'}#]#^!Hl#^#a'}#a#b!Hl#b#g'}#g#h!Hl#h#i'}#i#j!Hl#j#k!Hl#k#m'}#m#n!Hl#n;'S'};'S;=`(f<%lO'}8r!JZX(S!bOY!JUZw!JUwx!Arx#O!JU#O#P!B[#P#Q!Gr#Q;'S!JU;'S;=`!Jv<%lO!JU8r!JyP;=`<%l!JU8r!KPP;=`<%l!Gr>^!KZ^$g&j(S!bOY!KSYZ&cZw!KSwx!CWx!^!KS!^!_!JU!_#O!KS#O#P!DR#P#Q!<n#Q#o!KS#o#p!JU#p;'S!KS;'S;=`!LV<%lO!KS>^!LYP;=`<%l!KS>^!L`P;=`<%l!<n=l!Ll`$g&j(Pp!U7`OY!LcYZ&cZr!Lcrs!=ys!P!Lc!P!Q!Mn!Q!^!Lc!^!_# o!_!}!Lc!}#O#%P#O#P!Dy#P#o!Lc#o#p# o#p;'S!Lc;'S;=`#&Y<%lO!Lc=l!Mwl$g&j(Pp!U7`OY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#W(r#W#X!Mn#X#Z(r#Z#[!Mn#[#](r#]#^!Mn#^#a(r#a#b!Mn#b#g(r#g#h!Mn#h#i(r#i#j!Mn#j#k!Mn#k#m(r#m#n!Mn#n#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(r8Q# vZ(Pp!U7`OY# oZr# ors!@cs!P# o!P!Q#!i!Q!}# o!}#O#$R#O#P!Bq#P;'S# o;'S;=`#$y<%lO# o8Q#!pe(Pp!U7`OY)rZr)rs#O)r#P#W)r#W#X#!i#X#Z)r#Z#[#!i#[#])r#]#^#!i#^#a)r#a#b#!i#b#g)r#g#h#!i#h#i)r#i#j#!i#j#k#!i#k#m)r#m#n#!i#n;'S)r;'S;=`*Z<%lO)r8Q#$WX(PpOY#$RZr#$Rrs!Ars#O#$R#O#P!B[#P#Q# o#Q;'S#$R;'S;=`#$s<%lO#$R8Q#$vP;=`<%l#$R8Q#$|P;=`<%l# o=l#%W^$g&j(PpOY#%PYZ&cZr#%Prs!CWs!^#%P!^!_#$R!_#O#%P#O#P!DR#P#Q!Lc#Q#o#%P#o#p#$R#p;'S#%P;'S;=`#&S<%lO#%P=l#&VP;=`<%l#%P=l#&]P;=`<%l!Lc?O#&kn$g&j(Pp(S!b!U7`OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#W%Z#W#X#&`#X#Z%Z#Z#[#&`#[#]%Z#]#^#&`#^#a%Z#a#b#&`#b#g%Z#g#h#&`#h#i%Z#i#j#&`#j#k#&`#k#m%Z#m#n#&`#n#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z9d#(r](Pp(S!b!U7`OY#(iZr#(irs!Grsw#(iwx# ox!P#(i!P!Q#)k!Q!}#(i!}#O#+`#O#P!Bq#P;'S#(i;'S;=`#,`<%lO#(i9d#)th(Pp(S!b!U7`OY*gZr*grs'}sw*gwx)rx#O*g#P#W*g#W#X#)k#X#Z*g#Z#[#)k#[#]*g#]#^#)k#^#a*g#a#b#)k#b#g*g#g#h#)k#h#i*g#i#j#)k#j#k#)k#k#m*g#m#n#)k#n;'S*g;'S;=`+Z<%lO*g9d#+gZ(Pp(S!bOY#+`Zr#+`rs!JUsw#+`wx#$Rx#O#+`#O#P!B[#P#Q#(i#Q;'S#+`;'S;=`#,Y<%lO#+`9d#,]P;=`<%l#+`9d#,cP;=`<%l#(i?O#,o`$g&j(Pp(S!bOY#,fYZ&cZr#,frs!KSsw#,fwx#%Px!^#,f!^!_#+`!_#O#,f#O#P!DR#P#Q!;Z#Q#o#,f#o#p#+`#p;'S#,f;'S;=`#-q<%lO#,f?O#-tP;=`<%l#,f?O#-zP;=`<%l!;Z07[#.[b$g&j(Pp(S!b'w0/l!U7`OY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcx!P!;Z!P!Q#&`!Q!^!;Z!^!_#(i!_!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;Z07[#/o_$g&j(Pp(S!bS0/lOY#/dYZ&cZr#/drs#0nsw#/dwx#4Ox!^#/d!^!_#5}!_#O#/d#O#P#1p#P#o#/d#o#p#5}#p;'S#/d;'S;=`#6|<%lO#/d06j#0w]$g&j(S!bS0/lOY#0nYZ&cZw#0nwx#1px!^#0n!^!_#3R!_#O#0n#O#P#1p#P#o#0n#o#p#3R#p;'S#0n;'S;=`#3x<%lO#0n05W#1wX$g&jS0/lOY#1pYZ&cZ!^#1p!^!_#2d!_#o#1p#o#p#2d#p;'S#1p;'S;=`#2{<%lO#1p0/l#2iSS0/lOY#2dZ;'S#2d;'S;=`#2u<%lO#2d0/l#2xP;=`<%l#2d05W#3OP;=`<%l#1p01O#3YW(S!bS0/lOY#3RZw#3Rwx#2dx#O#3R#O#P#2d#P;'S#3R;'S;=`#3r<%lO#3R01O#3uP;=`<%l#3R06j#3{P;=`<%l#0n05x#4X]$g&j(PpS0/lOY#4OYZ&cZr#4Ors#1ps!^#4O!^!_#5Q!_#O#4O#O#P#1p#P#o#4O#o#p#5Q#p;'S#4O;'S;=`#5w<%lO#4O00^#5XW(PpS0/lOY#5QZr#5Qrs#2ds#O#5Q#O#P#2d#P;'S#5Q;'S;=`#5q<%lO#5Q00^#5tP;=`<%l#5Q05x#5zP;=`<%l#4O01p#6WY(Pp(S!bS0/lOY#5}Zr#5}rs#3Rsw#5}wx#5Qx#O#5}#O#P#2d#P;'S#5};'S;=`#6v<%lO#5}01p#6yP;=`<%l#5}07[#7PP;=`<%l#/d)3h#7ab$g&j$P(Ch(Pp(S!b!U7`OY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcx!P!;Z!P!Q#&`!Q!^!;Z!^!_#(i!_!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;ZAt#8vb$X#t$g&j(Pp(S!b!U7`OY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcx!P!;Z!P!Q#&`!Q!^!;Z!^!_#(i!_!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;Z'Ad#:Zp$g&j(Pp(S!bo'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!3Y!P!Q%Z!Q![#<_![!^%Z!^!_*g!_!g%Z!g!h!4|!h#O%Z#O#P&c#P#R%Z#R#S#<_#S#U%Z#U#V#?i#V#X%Z#X#Y!4|#Y#b%Z#b#c#>_#c#d#Bq#d#l%Z#l#m#Es#m#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#<jk$g&j(Pp(S!bo'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!3Y!P!Q%Z!Q![#<_![!^%Z!^!_*g!_!g%Z!g!h!4|!h#O%Z#O#P&c#P#R%Z#R#S#<_#S#X%Z#X#Y!4|#Y#b%Z#b#c#>_#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#>j_$g&j(Pp(S!bo'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#?rd$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!R#AQ!R!S#AQ!S!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#AQ#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#A]f$g&j(Pp(S!bo'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!R#AQ!R!S#AQ!S!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#AQ#S#b%Z#b#c#>_#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#Bzc$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!Y#DV!Y!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#DV#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#Dbe$g&j(Pp(S!bo'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!Y#DV!Y!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#DV#S#b%Z#b#c#>_#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#E|g$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![#Ge![!^%Z!^!_*g!_!c%Z!c!i#Ge!i#O%Z#O#P&c#P#R%Z#R#S#Ge#S#T%Z#T#Z#Ge#Z#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#Gpi$g&j(Pp(S!bo'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![#Ge![!^%Z!^!_*g!_!c%Z!c!i#Ge!i#O%Z#O#P&c#P#R%Z#R#S#Ge#S#T%Z#T#Z#Ge#Z#b%Z#b#c#>_#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z*)x#Il_!d$b$g&j#})Lv(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z)[#Jv_`l$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z04f#LS^g#)`!i-<U(Pp(S!b(v7`OY*gZr*grs'}sw*gwx)rx!P*g!P!Q#MO!Q!^*g!^!_#Mt!_!`$ f!`#O*g#P;'S*g;'S;=`+Z<%lO*g(n#MXX$i&j(Pp(S!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g(El#M}Z#o(Ch(Pp(S!bOY*gZr*grs'}sw*gwx)rx!_*g!_!`#Np!`#O*g#P;'S*g;'S;=`+Z<%lO*g(El#NyX$P(Ch(Pp(S!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g(El$ oX#p(Ch(Pp(S!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g*)x$!ga#]*!Y$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`0z!`!a$#l!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(K[$#w_#h(Cl$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z*)x$%Vaf!*r#p(Ch$d#|$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`$&[!`!a$'f!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$&g_#p(Ch$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$'qa#o(Ch$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`!a$(v!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$)R`#o(Ch$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z-!n$*`c(j(Ct$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P$+k!P!^%Z!^!_*g!_!a%Z!a!b$,u!b#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z-!f$+v_},Hv$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$-Q`$g&j#z(Ch(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#`$.__!|$Ip$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z04f$/i_!P0,v$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(n$0mZ$g&jO!^$1`!^!_$1v!_#i$1`#i#j$1{#j#l$1`#l#m$3n#m#o$1`#o#p$1v#p;'S$1`;'S;=`$5y<%lO$1`(n$1gT^#S$g&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c#S$1{O^#S(n$2Q[$g&jO!Q&c!Q![$2v![!^&c!_!c&c!c!i$2v!i#T&c#T#Z$2v#Z#o&c#o#p$5^#p;'S&c;'S;=`&w<%lO&c(n$2{Z$g&jO!Q&c!Q![$3n![!^&c!_!c&c!c!i$3n!i#T&c#T#Z$3n#Z#o&c#p;'S&c;'S;=`&w<%lO&c(n$3sZ$g&jO!Q&c!Q![$4f![!^&c!_!c&c!c!i$4f!i#T&c#T#Z$4f#Z#o&c#p;'S&c;'S;=`&w<%lO&c(n$4kZ$g&jO!Q&c!Q![$1`![!^&c!_!c&c!c!i$1`!i#T&c#T#Z$1`#Z#o&c#p;'S&c;'S;=`&w<%lO&c#S$5aR!Q![$5j!c!i$5j#T#Z$5j#S$5mS!Q![$5j!c!i$5j#T#Z$5j#q#r$1v(n$5|P;=`<%l$1`#1[$6[_!V#)l$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$7f`#w(Ch$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z+;p$8s_$g&j(Pp(S!b(Y+4QOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z07[$:Rk$g&j(Pp(S!b'|,2j$]#t(]$I[OY%ZYZ&cZr%Zrs&}st%Ztu$9ruw%Zwx(rx}%Z}!O$;v!O!Q%Z!Q![$9r![!^%Z!^!_*g!_!c%Z!c!}$9r!}#O%Z#O#P&c#P#R%Z#R#S$9r#S#T%Z#T#o$9r#o#p*g#p$g%Z$g;'S$9r;'S;=`$=|<%lO$9r+d$<Rk$g&j(Pp(S!b$]#tOY%ZYZ&cZr%Zrs&}st%Ztu$;vuw%Zwx(rx}%Z}!O$;v!O!Q%Z!Q![$;v![!^%Z!^!_*g!_!c%Z!c!}$;v!}#O%Z#O#P&c#P#R%Z#R#S$;v#S#T%Z#T#o$;v#o#p*g#p$g%Z$g;'S$;v;'S;=`$=v<%lO$;v+d$=yP;=`<%l$;v07[$>PP;=`<%l$9r#Jf$>]X![#Hb(Pp(S!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g,#x$?Ta(q+JY$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p#q$,u#q;'S%Z;'S;=`+a<%lO%Z(Kd$@g_!Z(Cdr`$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z?O$Aq_!q7`$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z07[$CR|$g&j(Pp(S!b'u0/l$Z#t'|,2j(]$I[OX%ZXY+gYZ&cZ[+g[p%Zpq+gqr%Zrs&}st%ZtuEruw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Er![!^%Z!^!_*g!_!c%Z!c!}Er!}#O%Z#O#P&c#P#R%Z#R#SEr#S#T%Z#T#oEr#o#p*g#p$f%Z$f$g+g$g#BYEr#BY#BZ$Bp#BZ$ISEr$IS$I_$Bp$I_$JTEr$JT$JU$Bp$JU$KVEr$KV$KW$Bp$KW&FUEr&FU&FV$Bp&FV;'SEr;'S;=`I|<%l?HTEr?HT?HU$Bp?HUOEr07[$F^k$g&j(Pp(S!b'v0/l$Z#t'|,2j(]$I[OY%ZYZ&cZr%Zrs&}st%ZtuEruw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Er![!^%Z!^!_*g!_!c%Z!c!}Er!}#O%Z#O#P&c#P#R%Z#R#SEr#S#T%Z#T#oEr#o#p*g#p$g%Z$g;'SEr;'S;=`I|<%lOEr",
  tokenizers: [kR, QR, GR, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, MR, new Ts("$S~RRtu[#O#Pg#S#T#|~_P#o#pb~gOt~~jVO#i!P#i#j!U#j#l!P#l#m!q#m;'S!P;'S;=`#v<%lO!P~!UO!R~~!XS!Q![!e!c!i!e#T#Z!e#o#p#Z~!hR!Q![!q!c!i!q#T#Z!q~!tR!Q![!}!c!i!}#T#Z!}~#QR!Q![!P!c!i!P#T#Z!P~#^R!Q![#g!c!i#g#T#Z#g~#jS!Q![#g!c!i#g#T#Z#g#q#r!P~#yP;=`<%l!P~$RO([~~", 141, 333), new Ts("j~RQYZXz{^~^O'y~~aP!P!Qd~iO'z~~", 25, 316)],
  topRules: { Script: [0, 6], SingleExpression: [1, 270], SingleClassItem: [2, 271] },
  dialects: { jsx: 0, ts: 14840 },
  dynamicPrecedences: { 70: 1, 80: 1, 82: 1, 166: 1, 194: 1 },
  specialized: [{ term: 320, get: (e) => BR[e] || -1 }, { term: 335, get: (e) => $R[e] || -1 }, { term: 71, get: (e) => YR[e] || -1 }],
  tokenPrec: 14864
}), Vp = [
  /* @__PURE__ */ qt("function ${name}(${params}) {\n	${}\n}", {
    label: "function",
    detail: "definition",
    type: "keyword"
  }),
  /* @__PURE__ */ qt("for (let ${index} = 0; ${index} < ${bound}; ${index}++) {\n	${}\n}", {
    label: "for",
    detail: "loop",
    type: "keyword"
  }),
  /* @__PURE__ */ qt("for (let ${name} of ${collection}) {\n	${}\n}", {
    label: "for",
    detail: "of loop",
    type: "keyword"
  }),
  /* @__PURE__ */ qt("do {\n	${}\n} while (${})", {
    label: "do",
    detail: "loop",
    type: "keyword"
  }),
  /* @__PURE__ */ qt("while (${}) {\n	${}\n}", {
    label: "while",
    detail: "loop",
    type: "keyword"
  }),
  /* @__PURE__ */ qt(`try {
	\${}
} catch (\${error}) {
	\${}
}`, {
    label: "try",
    detail: "/ catch block",
    type: "keyword"
  }),
  /* @__PURE__ */ qt("if (${}) {\n	${}\n}", {
    label: "if",
    detail: "block",
    type: "keyword"
  }),
  /* @__PURE__ */ qt(`if (\${}) {
	\${}
} else {
	\${}
}`, {
    label: "if",
    detail: "/ else block",
    type: "keyword"
  }),
  /* @__PURE__ */ qt(`class \${name} {
	constructor(\${params}) {
		\${}
	}
}`, {
    label: "class",
    detail: "definition",
    type: "keyword"
  }),
  /* @__PURE__ */ qt('import {${names}} from "${module}"\n${}', {
    label: "import",
    detail: "named",
    type: "keyword"
  }),
  /* @__PURE__ */ qt('import ${name} from "${module}"\n${}', {
    label: "import",
    detail: "default",
    type: "keyword"
  })
], WR = /* @__PURE__ */ Vp.concat([
  /* @__PURE__ */ qt("interface ${name} {\n	${}\n}", {
    label: "interface",
    detail: "definition",
    type: "keyword"
  }),
  /* @__PURE__ */ qt("type ${name} = ${type}", {
    label: "type",
    detail: "definition",
    type: "keyword"
  }),
  /* @__PURE__ */ qt("enum ${name} {\n	${}\n}", {
    label: "enum",
    detail: "definition",
    type: "keyword"
  })
]), gf = /* @__PURE__ */ new cp(), Bp = /* @__PURE__ */ new Set([
  "Script",
  "Block",
  "FunctionExpression",
  "FunctionDeclaration",
  "ArrowFunction",
  "MethodDeclaration",
  "ForStatement"
]);
function Un(e) {
  return (t, r) => {
    let i = t.node.getChild("VariableDefinition");
    return i && r(i, e), !0;
  };
}
const XR = ["FunctionDeclaration"], jR = {
  FunctionDeclaration: /* @__PURE__ */ Un("function"),
  ClassDeclaration: /* @__PURE__ */ Un("class"),
  ClassExpression: () => !0,
  EnumDeclaration: /* @__PURE__ */ Un("constant"),
  TypeAliasDeclaration: /* @__PURE__ */ Un("type"),
  NamespaceDeclaration: /* @__PURE__ */ Un("namespace"),
  VariableDefinition(e, t) {
    e.matchContext(XR) || t(e, "variable");
  },
  TypeDefinition(e, t) {
    t(e, "type");
  },
  __proto__: null
};
function $p(e, t) {
  let r = gf.get(t);
  if (r)
    return r;
  let i = [], n = !0;
  function a(s, o) {
    let l = e.sliceString(s.from, s.to);
    i.push({ label: l, type: o });
  }
  return t.cursor(st.IncludeAnonymous).iterate((s) => {
    if (n)
      n = !1;
    else if (s.name) {
      let o = jR[s.name];
      if (o && o(s, a) || Bp.has(s.name))
        return !1;
    } else if (s.to - s.from > 8192) {
      for (let o of $p(e, s.node))
        i.push(o);
      return !1;
    }
  }), gf.set(t, i), i;
}
const yf = /^[\w$\xa1-\uffff][\w$\d\xa1-\uffff]*$/, Yp = [
  "TemplateString",
  "String",
  "RegExp",
  "LineComment",
  "BlockComment",
  "VariableDefinition",
  "TypeDefinition",
  "Label",
  "PropertyDefinition",
  "PropertyName",
  "PrivatePropertyDefinition",
  "PrivatePropertyName",
  ".",
  "?."
];
function ZR(e) {
  let t = Ot(e.state).resolveInner(e.pos, -1);
  if (Yp.indexOf(t.name) > -1)
    return null;
  let r = t.name == "VariableName" || t.to - t.from < 20 && yf.test(e.state.sliceDoc(t.from, t.to));
  if (!r && !e.explicit)
    return null;
  let i = [];
  for (let n = t; n; n = n.parent)
    Bp.has(n.name) && (i = i.concat($p(e.state.doc, n)));
  return {
    options: i,
    from: r ? t.from : e.pos,
    validFor: yf
  };
}
const Cr = /* @__PURE__ */ Si.define({
  name: "javascript",
  parser: /* @__PURE__ */ FR.configure({
    props: [
      /* @__PURE__ */ gn.add({
        IfStatement: /* @__PURE__ */ Gi({ except: /^\s*({|else\b)/ }),
        TryStatement: /* @__PURE__ */ Gi({ except: /^\s*({|catch\b|finally\b)/ }),
        LabeledStatement: $S,
        SwitchBody: (e) => {
          let t = e.textAfter, r = /^\s*\}/.test(t), i = /^\s*(case|default)\b/.test(t);
          return e.baseIndent + (r ? 0 : i ? 1 : 2) * e.unit;
        },
        Block: /* @__PURE__ */ BS({ closing: "}" }),
        ArrowFunction: (e) => e.baseIndent + e.unit,
        "TemplateString BlockComment": () => null,
        "Statement Property": /* @__PURE__ */ Gi({ except: /^{/ }),
        JSXElement(e) {
          let t = /^\s*<\//.test(e.textAfter);
          return e.lineIndent(e.node.from) + (t ? 0 : e.unit);
        },
        JSXEscape(e) {
          let t = /\s*\}/.test(e.textAfter);
          return e.lineIndent(e.node.from) + (t ? 0 : e.unit);
        },
        "JSXOpenTag JSXSelfClosingTag"(e) {
          return e.column(e.node.from) + e.unit;
        }
      }),
      /* @__PURE__ */ yn.add({
        "Block ClassBody SwitchBody EnumBody ObjectExpression ArrayExpression ObjectType": Cu,
        BlockComment(e) {
          return { from: e.from + 2, to: e.to - 2 };
        }
      })
    ]
  }),
  languageData: {
    closeBrackets: { brackets: ["(", "[", "{", "'", '"', "`"] },
    commentTokens: { line: "//", block: { open: "/*", close: "*/" } },
    indentOnInput: /^\s*(?:case |default:|\{|\}|<\/)$/,
    wordChars: "$"
  }
}), Fp = {
  test: (e) => /^JSX/.test(e.name),
  facet: /* @__PURE__ */ Op({ commentTokens: { block: { open: "{/*", close: "*/}" } } })
}, Wp = /* @__PURE__ */ Cr.configure({ dialect: "ts" }, "typescript"), Xp = /* @__PURE__ */ Cr.configure({
  dialect: "jsx",
  props: [/* @__PURE__ */ _u.add((e) => e.isTop ? [Fp] : void 0)]
}), jp = /* @__PURE__ */ Cr.configure({
  dialect: "jsx ts",
  props: [/* @__PURE__ */ _u.add((e) => e.isTop ? [Fp] : void 0)]
}, "typescript");
let Zp = (e) => ({ label: e, type: "keyword" });
const Hp = /* @__PURE__ */ "break case const continue default delete export extends false finally in instanceof let new return static super switch this throw true typeof var yield".split(" ").map(Zp), HR = /* @__PURE__ */ Hp.concat(/* @__PURE__ */ ["declare", "implements", "private", "protected", "public"].map(Zp));
function zp(e = {}) {
  let t = e.jsx ? e.typescript ? jp : Xp : e.typescript ? Wp : Cr, r = e.typescript ? WR.concat(HR) : Vp.concat(Hp);
  return new Ta(t, [
    Cr.data.of({
      autocomplete: Uu(Yp, Ys(r))
    }),
    Cr.data.of({
      autocomplete: ZR
    }),
    e.jsx ? JR : []
  ]);
}
function zR(e) {
  for (; ; ) {
    if (e.name == "JSXOpenTag" || e.name == "JSXSelfClosingTag" || e.name == "JSXFragmentTag")
      return e;
    if (e.name == "JSXEscape" || !e.parent)
      return null;
    e = e.parent;
  }
}
function If(e, t, r = e.length) {
  for (let i = t == null ? void 0 : t.firstChild; i; i = i.nextSibling)
    if (i.name == "JSXIdentifier" || i.name == "JSXBuiltin" || i.name == "JSXNamespacedName" || i.name == "JSXMemberExpression")
      return e.sliceString(i.from, Math.min(i.to, r));
  return "";
}
const qR = typeof navigator == "object" && /* @__PURE__ */ /Android\b/.test(navigator.userAgent), JR = /* @__PURE__ */ we.inputHandler.of((e, t, r, i, n) => {
  if ((qR ? e.composing : e.compositionStarted) || e.state.readOnly || t != r || i != ">" && i != "/" || !Cr.isActiveAt(e.state, t, -1))
    return !1;
  let a = n(), { state: s } = a, o = s.changeByRange((l) => {
    var c;
    let { head: f } = l, p = Ot(s).resolveInner(f - 1, -1), O;
    if (p.name == "JSXStartTag" && (p = p.parent), !(s.doc.sliceString(f - 1, f) != i || p.name == "JSXAttributeValue" && p.to > f)) {
      if (i == ">" && p.name == "JSXFragmentTag")
        return { range: l, changes: { from: f, insert: "</>" } };
      if (i == "/" && p.name == "JSXStartCloseTag") {
        let d = p.parent, g = d.parent;
        if (g && d.from == f - 2 && ((O = If(s.doc, g.firstChild, f)) || ((c = g.firstChild) === null || c === void 0 ? void 0 : c.name) == "JSXFragmentTag")) {
          let L = `${O}>`;
          return { range: Re.cursor(f + L.length, -1), changes: { from: f, insert: L } };
        }
      } else if (i == ">") {
        let d = zR(p);
        if (d && d.name == "JSXOpenTag" && !/^\/?>|^<\//.test(s.doc.sliceString(f, f + 2)) && (O = If(s.doc, d, f)))
          return { range: l, changes: { from: f, insert: `</${O}>` } };
      }
    }
    return { range: l };
  });
  return o.changes.empty ? !1 : (e.dispatch([
    a,
    s.update(o, { userEvent: "input.complete", scrollIntoView: !0 })
  ]), !0);
});
function KR(e, t) {
  return t || (t = {
    parserOptions: { ecmaVersion: 2019, sourceType: "module" },
    env: { browser: !0, node: !0, es6: !0, es2015: !0, es2017: !0, es2020: !0 },
    rules: {}
  }, e.getRules().forEach((r, i) => {
    r.meta.docs.recommended && (t.rules[i] = 2);
  })), (r) => {
    let { state: i } = r, n = [];
    for (let { from: a, to: s } of Cr.findRegions(i)) {
      let o = i.doc.lineAt(a), l = { line: o.number - 1, col: a - o.from, pos: a };
      for (let c of e.verify(i.sliceDoc(a, s), t))
        n.push(eA(c, i.doc, l));
    }
    return n;
  };
}
function Nf(e, t, r, i) {
  return r.line(e + i.line).from + t + (e == 1 ? i.col - 1 : -1);
}
function eA(e, t, r) {
  let i = Nf(e.line, e.column, t, r), n = {
    from: i,
    to: e.endLine != null && e.endColumn != 1 ? Nf(e.endLine, e.endColumn, t, r) : i,
    message: e.message,
    source: e.ruleId ? "eslint:" + e.ruleId : "eslint",
    severity: e.severity == 1 ? "warning" : "error"
  };
  if (e.fix) {
    let { range: a, text: s } = e.fix, o = a[0] + r.pos - i, l = a[1] + r.pos - i;
    n.actions = [{
      name: "fix",
      apply(c, f) {
        c.dispatch({ changes: { from: f + o, to: f + l, insert: s }, scrollIntoView: !0 });
      }
    }];
  }
  return n;
}
const tA = An({
  String: Q.string,
  Number: Q.number,
  "True False": Q.bool,
  PropertyName: Q.propertyName,
  Null: Q.null,
  ",": Q.separator,
  "[ ]": Q.squareBracket,
  "{ }": Q.brace
}), rA = Ri.deserialize({
  version: 14,
  states: "$bOVQPOOOOQO'#Cb'#CbOnQPO'#CeOvQPO'#CjOOQO'#Cp'#CpQOQPOOOOQO'#Cg'#CgO}QPO'#CfO!SQPO'#CrOOQO,59P,59PO![QPO,59PO!aQPO'#CuOOQO,59U,59UO!iQPO,59UOVQPO,59QOqQPO'#CkO!nQPO,59^OOQO1G.k1G.kOVQPO'#ClO!vQPO,59aOOQO1G.p1G.pOOQO1G.l1G.lOOQO,59V,59VOOQO-E6i-E6iOOQO,59W,59WOOQO-E6j-E6j",
  stateData: "#O~OcOS~OQSORSOSSOTSOWQO]ROePO~OVXOeUO~O[[O~PVOg^O~Oh_OVfX~OVaO~OhbO[iX~O[dO~Oh_OVfa~OhbO[ia~O",
  goto: "!kjPPPPPPkPPkqwPPk{!RPPP!XP!ePP!hXSOR^bQWQRf_TVQ_Q`WRg`QcZRicQTOQZRQe^RhbRYQR]R",
  nodeNames: "⚠ JsonText True False Null Number String } { Object Property PropertyName ] [ Array",
  maxTerm: 25,
  nodeProps: [
    ["isolate", -2, 6, 11, ""],
    ["openedBy", 7, "{", 12, "["],
    ["closedBy", 8, "}", 13, "]"]
  ],
  propSources: [tA],
  skippedNodes: [0],
  repeatNodeCount: 2,
  tokenData: "(|~RaXY!WYZ!W]^!Wpq!Wrs!]|}$u}!O$z!Q!R%T!R![&c![!]&t!}#O&y#P#Q'O#Y#Z'T#b#c'r#h#i(Z#o#p(r#q#r(w~!]Oc~~!`Wpq!]qr!]rs!xs#O!]#O#P!}#P;'S!];'S;=`$o<%lO!]~!}Oe~~#QXrs!]!P!Q!]#O#P!]#U#V!]#Y#Z!]#b#c!]#f#g!]#h#i!]#i#j#m~#pR!Q![#y!c!i#y#T#Z#y~#|R!Q![$V!c!i$V#T#Z$V~$YR!Q![$c!c!i$c#T#Z$c~$fR!Q![!]!c!i!]#T#Z!]~$rP;=`<%l!]~$zOh~~$}Q!Q!R%T!R![&c~%YRT~!O!P%c!g!h%w#X#Y%w~%fP!Q![%i~%nRT~!Q![%i!g!h%w#X#Y%w~%zR{|&T}!O&T!Q![&Z~&WP!Q![&Z~&`PT~!Q![&Z~&hST~!O!P%c!Q![&c!g!h%w#X#Y%w~&yOg~~'OO]~~'TO[~~'WP#T#U'Z~'^P#`#a'a~'dP#g#h'g~'jP#X#Y'm~'rOR~~'uP#i#j'x~'{P#`#a(O~(RP#`#a(U~(ZOS~~(^P#f#g(a~(dP#i#j(g~(jP#X#Y(m~(rOQ~~(wOW~~(|OV~",
  tokenizers: [0],
  topRules: { JsonText: [0, 1] },
  tokenPrec: 0
}), iA = () => (e) => {
  try {
    JSON.parse(e.state.doc.toString());
  } catch (t) {
    if (!(t instanceof SyntaxError))
      throw t;
    const r = nA(t, e.state.doc);
    return [{
      from: r,
      message: t.message,
      severity: "error",
      to: r
    }];
  }
  return [];
};
function nA(e, t) {
  let r;
  return (r = e.message.match(/at position (\d+)/)) ? Math.min(+r[1], t.length) : (r = e.message.match(/at line (\d+) column (\d+)/)) ? Math.min(t.line(+r[1]).from + +r[2] - 1, t.length) : 0;
}
const aA = /* @__PURE__ */ Si.define({
  name: "json",
  parser: /* @__PURE__ */ rA.configure({
    props: [
      /* @__PURE__ */ gn.add({
        Object: /* @__PURE__ */ Gi({ except: /^\s*\}/ }),
        Array: /* @__PURE__ */ Gi({ except: /^\s*\]/ })
      }),
      /* @__PURE__ */ yn.add({
        "Object Array": Cu
      })
    ]
  }),
  languageData: {
    closeBrackets: { brackets: ["[", "{", '"'] },
    indentOnInput: /^\s*[\}\]]$/
  }
});
function sA() {
  return new Ta(aA);
}
const oA = 36, Pf = 1, lA = 2, wn = 3, bo = 4, uA = 5, cA = 6, fA = 7, hA = 8, pA = 9, OA = 10, EA = 11, dA = 12, TA = 13, SA = 14, mA = 15, RA = 16, AA = 17, _f = 18, gA = 19, qp = 20, Jp = 21, bf = 22, yA = 23, IA = 24;
function cl(e) {
  return e >= 65 && e <= 90 || e >= 97 && e <= 122 || e >= 48 && e <= 57;
}
function NA(e) {
  return e >= 48 && e <= 57 || e >= 97 && e <= 102 || e >= 65 && e <= 70;
}
function Ci(e, t, r) {
  for (let i = !1; ; ) {
    if (e.next < 0)
      return;
    if (e.next == t && !i) {
      e.advance();
      return;
    }
    i = r && !i && e.next == 92, e.advance();
  }
}
function PA(e, t) {
  e:
    for (; ; ) {
      if (e.next < 0)
        return console.log("exit at end", e.pos);
      if (e.next == 36) {
        e.advance();
        for (let r = 0; r < t.length; r++) {
          if (e.next != t.charCodeAt(r))
            continue e;
          e.advance();
        }
        if (e.next == 36) {
          e.advance();
          return;
        }
      } else
        e.advance();
    }
}
function _A(e, t) {
  let r = "[{<(".indexOf(String.fromCharCode(t)), i = r < 0 ? t : "]}>)".charCodeAt(r);
  for (; ; ) {
    if (e.next < 0)
      return;
    if (e.next == i && e.peek(1) == 39) {
      e.advance(2);
      return;
    }
    e.advance();
  }
}
function fl(e, t) {
  for (; !(e.next != 95 && !cl(e.next)); )
    t != null && (t += String.fromCharCode(e.next)), e.advance();
  return t;
}
function bA(e) {
  if (e.next == 39 || e.next == 34 || e.next == 96) {
    let t = e.next;
    e.advance(), Ci(e, t, !1);
  } else
    fl(e);
}
function vf(e, t) {
  for (; e.next == 48 || e.next == 49; )
    e.advance();
  t && e.next == t && e.advance();
}
function Cf(e, t) {
  for (; ; ) {
    if (e.next == 46) {
      if (t)
        break;
      t = !0;
    } else if (e.next < 48 || e.next > 57)
      break;
    e.advance();
  }
  if (e.next == 69 || e.next == 101)
    for (e.advance(), (e.next == 43 || e.next == 45) && e.advance(); e.next >= 48 && e.next <= 57; )
      e.advance();
}
function Lf(e) {
  for (; !(e.next < 0 || e.next == 10); )
    e.advance();
}
function bi(e, t) {
  for (let r = 0; r < t.length; r++)
    if (t.charCodeAt(r) == e)
      return !0;
  return !1;
}
const vo = ` 	\r
`;
function Kp(e, t, r) {
  let i = /* @__PURE__ */ Object.create(null);
  i.true = i.false = uA, i.null = i.unknown = cA;
  for (let n of e.split(" "))
    n && (i[n] = qp);
  for (let n of t.split(" "))
    n && (i[n] = Jp);
  for (let n of (r || "").split(" "))
    n && (i[n] = IA);
  return i;
}
const vA = "array binary bit boolean char character clob date decimal double float int integer interval large national nchar nclob numeric object precision real smallint time timestamp varchar varying ", CA = "absolute action add after all allocate alter and any are as asc assertion at authorization before begin between both breadth by call cascade cascaded case cast catalog check close collate collation column commit condition connect connection constraint constraints constructor continue corresponding count create cross cube current current_date current_default_transform_group current_transform_group_for_type current_path current_role current_time current_timestamp current_user cursor cycle data day deallocate declare default deferrable deferred delete depth deref desc describe descriptor deterministic diagnostics disconnect distinct do domain drop dynamic each else elseif end end-exec equals escape except exception exec execute exists exit external fetch first for foreign found from free full function general get global go goto grant group grouping handle having hold hour identity if immediate in indicator initially inner inout input insert intersect into is isolation join key language last lateral leading leave left level like limit local localtime localtimestamp locator loop map match method minute modifies module month names natural nesting new next no none not of old on only open option or order ordinality out outer output overlaps pad parameter partial path prepare preserve primary prior privileges procedure public read reads recursive redo ref references referencing relative release repeat resignal restrict result return returns revoke right role rollback rollup routine row rows savepoint schema scroll search second section select session session_user set sets signal similar size some space specific specifictype sql sqlexception sqlstate sqlwarning start state static system_user table temporary then timezone_hour timezone_minute to trailing transaction translation treat trigger under undo union unique unnest until update usage user using value values view when whenever where while with without work write year zone ", hl = {
  backslashEscapes: !1,
  hashComments: !1,
  spaceAfterDashes: !1,
  slashComments: !1,
  doubleQuotedStrings: !1,
  doubleDollarQuotedStrings: !1,
  unquotedBitLiterals: !1,
  treatBitsAsBytes: !1,
  charSetCasts: !1,
  plsqlQuotingMechanism: !1,
  operatorChars: "*+-%<>!=&|~^/",
  specialVar: "?",
  identifierQuotes: '"',
  words: /* @__PURE__ */ Kp(CA, vA)
};
function LA(e, t, r, i) {
  let n = {};
  for (let a in hl)
    n[a] = (e.hasOwnProperty(a) ? e : hl)[a];
  return t && (n.words = Kp(t, r || "", i)), n;
}
function eO(e) {
  return new mr((t) => {
    var r;
    let { next: i } = t;
    if (t.advance(), bi(i, vo)) {
      for (; bi(t.next, vo); )
        t.advance();
      t.acceptToken(oA);
    } else if (i == 36 && e.doubleDollarQuotedStrings) {
      let n = fl(t, "");
      t.next == 36 && (t.advance(), PA(t, n), t.acceptToken(wn));
    } else if (i == 39 || i == 34 && e.doubleQuotedStrings)
      Ci(t, i, e.backslashEscapes), t.acceptToken(wn);
    else if (i == 35 && e.hashComments || i == 47 && t.next == 47 && e.slashComments)
      Lf(t), t.acceptToken(Pf);
    else if (i == 45 && t.next == 45 && (!e.spaceAfterDashes || t.peek(1) == 32))
      Lf(t), t.acceptToken(Pf);
    else if (i == 47 && t.next == 42) {
      t.advance();
      for (let n = 1; ; ) {
        let a = t.next;
        if (t.next < 0)
          break;
        if (t.advance(), a == 42 && t.next == 47) {
          if (n--, t.advance(), !n)
            break;
        } else
          a == 47 && t.next == 42 && (n++, t.advance());
      }
      t.acceptToken(lA);
    } else if ((i == 101 || i == 69) && t.next == 39)
      t.advance(), Ci(t, 39, !0);
    else if ((i == 110 || i == 78) && t.next == 39 && e.charSetCasts)
      t.advance(), Ci(t, 39, e.backslashEscapes), t.acceptToken(wn);
    else if (i == 95 && e.charSetCasts)
      for (let n = 0; ; n++) {
        if (t.next == 39 && n > 1) {
          t.advance(), Ci(t, 39, e.backslashEscapes), t.acceptToken(wn);
          break;
        }
        if (!cl(t.next))
          break;
        t.advance();
      }
    else if (e.plsqlQuotingMechanism && (i == 113 || i == 81) && t.next == 39 && t.peek(1) > 0 && !bi(t.peek(1), vo)) {
      let n = t.peek(1);
      t.advance(2), _A(t, n), t.acceptToken(wn);
    } else if (i == 40)
      t.acceptToken(fA);
    else if (i == 41)
      t.acceptToken(hA);
    else if (i == 123)
      t.acceptToken(pA);
    else if (i == 125)
      t.acceptToken(OA);
    else if (i == 91)
      t.acceptToken(EA);
    else if (i == 93)
      t.acceptToken(dA);
    else if (i == 59)
      t.acceptToken(TA);
    else if (e.unquotedBitLiterals && i == 48 && t.next == 98)
      t.advance(), vf(t), t.acceptToken(bf);
    else if ((i == 98 || i == 66) && (t.next == 39 || t.next == 34)) {
      const n = t.next;
      t.advance(), e.treatBitsAsBytes ? (Ci(t, n, e.backslashEscapes), t.acceptToken(yA)) : (vf(t, n), t.acceptToken(bf));
    } else if (i == 48 && (t.next == 120 || t.next == 88) || (i == 120 || i == 88) && t.next == 39) {
      let n = t.next == 39;
      for (t.advance(); NA(t.next); )
        t.advance();
      n && t.next == 39 && t.advance(), t.acceptToken(bo);
    } else if (i == 46 && t.next >= 48 && t.next <= 57)
      Cf(t, !0), t.acceptToken(bo);
    else if (i == 46)
      t.acceptToken(SA);
    else if (i >= 48 && i <= 57)
      Cf(t, !1), t.acceptToken(bo);
    else if (bi(i, e.operatorChars)) {
      for (; bi(t.next, e.operatorChars); )
        t.advance();
      t.acceptToken(mA);
    } else if (bi(i, e.specialVar))
      t.next == i && t.advance(), bA(t), t.acceptToken(AA);
    else if (bi(i, e.identifierQuotes))
      Ci(t, i, !1), t.acceptToken(gA);
    else if (i == 58 || i == 44)
      t.acceptToken(RA);
    else if (cl(i)) {
      let n = fl(t, String.fromCharCode(i));
      t.acceptToken(t.next == 46 || t.peek(-n.length - 1) == 46 ? _f : (r = e.words[n.toLowerCase()]) !== null && r !== void 0 ? r : _f);
    }
  });
}
const tO = /* @__PURE__ */ eO(hl), xA = /* @__PURE__ */ Ri.deserialize({
  version: 14,
  states: "%vQ]QQOOO#wQRO'#DSO$OQQO'#CwO%eQQO'#CxO%lQQO'#CyO%sQQO'#CzOOQQ'#DS'#DSOOQQ'#C}'#C}O'UQRO'#C{OOQQ'#Cv'#CvOOQQ'#C|'#C|Q]QQOOQOQQOOO'`QQO'#DOO(xQRO,59cO)PQQO,59cO)UQQO'#DSOOQQ,59d,59dO)cQQO,59dOOQQ,59e,59eO)jQQO,59eOOQQ,59f,59fO)qQQO,59fOOQQ-E6{-E6{OOQQ,59b,59bOOQQ-E6z-E6zOOQQ,59j,59jOOQQ-E6|-E6|O+VQRO1G.}O+^QQO,59cOOQQ1G/O1G/OOOQQ1G/P1G/POOQQ1G/Q1G/QP+kQQO'#C}O+rQQO1G.}O)PQQO,59cO,PQQO'#Cw",
  stateData: ",[~OtOSPOSQOS~ORUOSUOTUOUUOVROXSOZTO]XO^QO_UO`UOaPObPOcPOdUOeUOfUOgUOhUO~O^]ORvXSvXTvXUvXVvXXvXZvX]vX_vX`vXavXbvXcvXdvXevXfvXgvXhvX~OsvX~P!jOa_Ob_Oc_O~ORUOSUOTUOUUOVROXSOZTO^tO_UO`UOa`Ob`Oc`OdUOeUOfUOgUOhUO~OWaO~P$ZOYcO~P$ZO[eO~P$ZORUOSUOTUOUUOVROXSOZTO^QO_UO`UOaPObPOcPOdUOeUOfUOgUOhUO~O]hOsoX~P%zOajObjOcjO~O^]ORkaSkaTkaUkaVkaXkaZka]ka_ka`kaakabkackadkaekafkagkahka~Oska~P'kO^]O~OWvXYvX[vX~P!jOWnO~P$ZOYoO~P$ZO[pO~P$ZO^]ORkiSkiTkiUkiVkiXkiZki]ki_ki`kiakibkickidkiekifkigkihki~Oski~P)xOWkaYka[ka~P'kO]hO~P$ZOWkiYki[ki~P)xOasObsOcsO~O",
  goto: "#hwPPPPPPPPPPPPPPPPPPPPPPPPPPx||||!Y!^!d!xPPP#[TYOZeUORSTWZbdfqT[OZQZORiZSWOZQbRQdSQfTZgWbdfqQ^PWk^lmrQl_Qm`RrseVORSTWZbdfq",
  nodeNames: "⚠ LineComment BlockComment String Number Bool Null ( ) { } [ ] ; . Operator Punctuation SpecialVar Identifier QuotedIdentifier Keyword Type Bits Bytes Builtin Script Statement CompositeIdentifier Parens Braces Brackets Statement",
  maxTerm: 38,
  nodeProps: [
    ["isolate", -4, 1, 2, 3, 19, ""]
  ],
  skippedNodes: [0, 1, 2],
  repeatNodeCount: 3,
  tokenData: "RORO",
  tokenizers: [0, tO],
  topRules: { Script: [0, 25] },
  tokenPrec: 0
});
function pl(e) {
  let t = e.cursor().moveTo(e.from, -1);
  for (; /Comment/.test(t.name); )
    t.moveTo(t.from, -1);
  return t.node;
}
function ia(e, t) {
  let r = e.sliceString(t.from, t.to), i = /^([`'"])(.*)\1$/.exec(r);
  return i ? i[2] : r;
}
function Ss(e) {
  return e && (e.name == "Identifier" || e.name == "QuotedIdentifier");
}
function DA(e, t) {
  if (t.name == "CompositeIdentifier") {
    let r = [];
    for (let i = t.firstChild; i; i = i.nextSibling)
      Ss(i) && r.push(ia(e, i));
    return r;
  }
  return [ia(e, t)];
}
function xf(e, t) {
  for (let r = []; ; ) {
    if (!t || t.name != ".")
      return r;
    let i = pl(t);
    if (!Ss(i))
      return r;
    r.unshift(ia(e, i)), t = pl(i);
  }
}
function UA(e, t) {
  let r = Ot(e).resolveInner(t, -1), i = MA(e.doc, r);
  return r.name == "Identifier" || r.name == "QuotedIdentifier" || r.name == "Keyword" ? {
    from: r.from,
    quoted: r.name == "QuotedIdentifier" ? e.doc.sliceString(r.from, r.from + 1) : null,
    parents: xf(e.doc, pl(r)),
    aliases: i
  } : r.name == "." ? { from: t, quoted: null, parents: xf(e.doc, r), aliases: i } : { from: t, quoted: null, parents: [], empty: !0, aliases: i };
}
const wA = /* @__PURE__ */ new Set(/* @__PURE__ */ "where group having order union intersect except all distinct limit offset fetch for".split(" "));
function MA(e, t) {
  let r;
  for (let n = t; !r; n = n.parent) {
    if (!n)
      return null;
    n.name == "Statement" && (r = n);
  }
  let i = null;
  for (let n = r.firstChild, a = !1, s = null; n; n = n.nextSibling) {
    let o = n.name == "Keyword" ? e.sliceString(n.from, n.to).toLowerCase() : null, l = null;
    if (!a)
      a = o == "from";
    else if (o == "as" && s && Ss(n.nextSibling))
      l = ia(e, n.nextSibling);
    else {
      if (o && wA.has(o))
        break;
      s && Ss(n) && (l = ia(e, n));
    }
    l && (i || (i = /* @__PURE__ */ Object.create(null)), i[l] = DA(e, s)), s = /Identifier$/.test(n.name) ? n : null;
  }
  return i;
}
function kA(e, t) {
  return e ? t.map((r) => Object.assign(Object.assign({}, r), { label: r.label[0] == e ? r.label : e + r.label + e, apply: void 0 })) : t;
}
const QA = /^\w*$/, GA = /^[`'"]?\w*[`'"]?$/;
function Df(e) {
  return e.self && typeof e.self.label == "string";
}
class $u {
  constructor(t) {
    this.idQuote = t, this.list = [], this.children = void 0;
  }
  child(t) {
    let r = this.children || (this.children = /* @__PURE__ */ Object.create(null)), i = r[t];
    return i || (t && !this.list.some((n) => n.label == t) && this.list.push(Uf(t, "type", this.idQuote)), r[t] = new $u(this.idQuote));
  }
  maybeChild(t) {
    return this.children ? this.children[t] : null;
  }
  addCompletion(t) {
    let r = this.list.findIndex((i) => i.label == t.label);
    r > -1 ? this.list[r] = t : this.list.push(t);
  }
  addCompletions(t) {
    for (let r of t)
      this.addCompletion(typeof r == "string" ? Uf(r, "property", this.idQuote) : r);
  }
  addNamespace(t) {
    Array.isArray(t) ? this.addCompletions(t) : Df(t) ? this.addNamespace(t.children) : this.addNamespaceObject(t);
  }
  addNamespaceObject(t) {
    for (let r of Object.keys(t)) {
      let i = t[r], n = null, a = r.replace(/\\?\./g, (o) => o == "." ? "\0" : o).split("\0"), s = this;
      Df(i) && (n = i.self, i = i.children);
      for (let o = 0; o < a.length; o++)
        n && o == a.length - 1 && s.addCompletion(n), s = s.child(a[o].replace(/\\\./g, "."));
      s.addNamespace(i);
    }
  }
}
function Uf(e, t, r) {
  return /^[a-z_][a-z_\d]*$/.test(e) ? { label: e, type: t } : { label: e, type: t, apply: r + e + r };
}
function VA(e, t, r, i, n, a) {
  var s;
  let o = ((s = a == null ? void 0 : a.spec.identifierQuotes) === null || s === void 0 ? void 0 : s[0]) || '"', l = new $u(o), c = n ? l.child(n) : null;
  return l.addNamespace(e), t && (c || l).addCompletions(t), r && l.addCompletions(r), c && l.addCompletions(c.list), i && l.addCompletions((c || l).child(i).list), (f) => {
    let { parents: p, from: O, quoted: d, empty: g, aliases: L } = UA(f.state, f.pos);
    if (g && !f.explicit)
      return null;
    L && p.length == 1 && (p = L[p[0]] || p);
    let D = l;
    for (let V of p) {
      for (; !D.children || !D.children[V]; )
        if (D == l)
          D = c;
        else if (D == c && i)
          D = D.child(i);
        else
          return null;
      let _ = D.maybeChild(V);
      if (!_)
        return null;
      D = _;
    }
    let W = d && f.state.sliceDoc(f.pos, f.pos + 1) == d, x = D.list;
    return D == l && L && (x = x.concat(Object.keys(L).map((V) => ({ label: V, type: "constant" })))), {
      from: O,
      to: W ? f.pos + 1 : void 0,
      options: kA(d, x),
      validFor: d ? GA : QA
    };
  };
}
function BA(e, t) {
  let r = Object.keys(e).map((i) => ({
    label: t ? i.toUpperCase() : i,
    type: e[i] == Jp ? "type" : e[i] == qp ? "keyword" : "variable",
    boost: -1
  }));
  return Uu(["QuotedIdentifier", "SpecialVar", "String", "LineComment", "BlockComment", "."], Ys(r));
}
let $A = /* @__PURE__ */ xA.configure({
  props: [
    /* @__PURE__ */ gn.add({
      Statement: /* @__PURE__ */ Gi()
    }),
    /* @__PURE__ */ yn.add({
      Statement(e) {
        return { from: e.firstChild.to, to: e.to };
      },
      BlockComment(e) {
        return { from: e.from + 2, to: e.to - 2 };
      }
    }),
    /* @__PURE__ */ An({
      Keyword: Q.keyword,
      Type: Q.typeName,
      Builtin: /* @__PURE__ */ Q.standard(Q.name),
      Bits: Q.number,
      Bytes: Q.string,
      Bool: Q.bool,
      Null: Q.null,
      Number: Q.number,
      String: Q.string,
      Identifier: Q.name,
      QuotedIdentifier: /* @__PURE__ */ Q.special(Q.string),
      SpecialVar: /* @__PURE__ */ Q.special(Q.name),
      LineComment: Q.lineComment,
      BlockComment: Q.blockComment,
      Operator: Q.operator,
      "Semi Punctuation": Q.punctuation,
      "( )": Q.paren,
      "{ }": Q.brace,
      "[ ]": Q.squareBracket
    })
  ]
});
class Yu {
  constructor(t, r, i) {
    this.dialect = t, this.language = r, this.spec = i;
  }
  /**
  Returns the language for this dialect as an extension.
  */
  get extension() {
    return this.language.extension;
  }
  /**
  Define a new dialect.
  */
  static define(t) {
    let r = LA(t, t.keywords, t.types, t.builtin), i = Si.define({
      name: "sql",
      parser: $A.configure({
        tokenizers: [{ from: tO, to: eO(r) }]
      }),
      languageData: {
        commentTokens: { line: "--", block: { open: "/*", close: "*/" } },
        closeBrackets: { brackets: ["(", "[", "{", "'", '"', "`"] }
      }
    });
    return new Yu(r, i, t);
  }
}
function YA(e, t = !1) {
  return BA(e.dialect.words, t);
}
function FA(e, t = !1) {
  return e.language.data.of({
    autocomplete: YA(e, t)
  });
}
function WA(e) {
  return e.schema ? VA(e.schema, e.tables, e.schemas, e.defaultTable, e.defaultSchema, e.dialect || Fu) : () => null;
}
function XA(e) {
  return e.schema ? (e.dialect || Fu).language.data.of({
    autocomplete: WA(e)
  }) : [];
}
function jA(e = {}) {
  let t = e.dialect || Fu;
  return new Ta(t.language, [XA(e), FA(t, !!e.upperCaseKeywords)]);
}
const Fu = /* @__PURE__ */ Yu.define({}), ZA = 99, wf = 1, HA = 100, zA = 101, Mf = 2, rO = [
  9,
  10,
  11,
  12,
  13,
  32,
  133,
  160,
  5760,
  8192,
  8193,
  8194,
  8195,
  8196,
  8197,
  8198,
  8199,
  8200,
  8201,
  8202,
  8232,
  8233,
  8239,
  8287,
  12288
], qA = 58, JA = 40, iO = 95, KA = 91, rs = 45, eg = 46, tg = 35, rg = 37, ig = 38, ng = 92, ag = 10;
function na(e) {
  return e >= 65 && e <= 90 || e >= 97 && e <= 122 || e >= 161;
}
function nO(e) {
  return e >= 48 && e <= 57;
}
const sg = new mr((e, t) => {
  for (let r = !1, i = 0, n = 0; ; n++) {
    let { next: a } = e;
    if (na(a) || a == rs || a == iO || r && nO(a))
      !r && (a != rs || n > 0) && (r = !0), i === n && a == rs && i++, e.advance();
    else if (a == ng && e.peek(1) != ag)
      e.advance(), e.next > -1 && e.advance(), r = !0;
    else {
      r && e.acceptToken(a == JA ? HA : i == 2 && t.canShift(Mf) ? Mf : zA);
      break;
    }
  }
}), og = new mr((e) => {
  if (rO.includes(e.peek(-1))) {
    let { next: t } = e;
    (na(t) || t == iO || t == tg || t == eg || t == KA || t == qA && na(e.peek(1)) || t == rs || t == ig) && e.acceptToken(ZA);
  }
}), lg = new mr((e) => {
  if (!rO.includes(e.peek(-1))) {
    let { next: t } = e;
    if (t == rg && (e.advance(), e.acceptToken(wf)), na(t)) {
      do
        e.advance();
      while (na(e.next) || nO(e.next));
      e.acceptToken(wf);
    }
  }
}), ug = An({
  "AtKeyword import charset namespace keyframes media supports": Q.definitionKeyword,
  "from to selector": Q.keyword,
  NamespaceName: Q.namespace,
  KeyframeName: Q.labelName,
  KeyframeRangeName: Q.operatorKeyword,
  TagName: Q.tagName,
  ClassName: Q.className,
  PseudoClassName: Q.constant(Q.className),
  IdName: Q.labelName,
  "FeatureName PropertyName": Q.propertyName,
  AttributeName: Q.attributeName,
  NumberLiteral: Q.number,
  KeywordQuery: Q.keyword,
  UnaryQueryOp: Q.operatorKeyword,
  "CallTag ValueName": Q.atom,
  VariableName: Q.variableName,
  Callee: Q.operatorKeyword,
  Unit: Q.unit,
  "UniversalSelector NestingSelector": Q.definitionOperator,
  MatchOp: Q.compareOperator,
  "ChildOp SiblingOp, LogicOp": Q.logicOperator,
  BinOp: Q.arithmeticOperator,
  Important: Q.modifier,
  Comment: Q.blockComment,
  ColorLiteral: Q.color,
  "ParenthesizedContent StringLiteral": Q.string,
  ":": Q.punctuation,
  "PseudoOp #": Q.derefOperator,
  "; ,": Q.separator,
  "( )": Q.paren,
  "[ ]": Q.squareBracket,
  "{ }": Q.brace
}), cg = { __proto__: null, lang: 32, "nth-child": 32, "nth-last-child": 32, "nth-of-type": 32, "nth-last-of-type": 32, dir: 32, "host-context": 32, url: 60, "url-prefix": 60, domain: 60, regexp: 60, selector: 138 }, fg = { __proto__: null, "@import": 118, "@media": 142, "@charset": 146, "@namespace": 150, "@keyframes": 156, "@supports": 168 }, hg = { __proto__: null, not: 132, only: 132 }, pg = Ri.deserialize({
  version: 14,
  states: ":^QYQ[OOO#_Q[OOP#fOWOOOOQP'#Cd'#CdOOQP'#Cc'#CcO#kQ[O'#CfO$_QXO'#CaO$fQ[O'#ChO$qQ[O'#DTO$vQ[O'#DWOOQP'#Em'#EmO${QdO'#DgO%jQ[O'#DtO${QdO'#DvO%{Q[O'#DxO&WQ[O'#D{O&`Q[O'#ERO&nQ[O'#ETOOQS'#El'#ElOOQS'#EW'#EWQYQ[OOO&uQXO'#CdO'jQWO'#DcO'oQWO'#EsO'zQ[O'#EsQOQWOOP(UO#tO'#C_POOO)C@[)C@[OOQP'#Cg'#CgOOQP,59Q,59QO#kQ[O,59QO(aQ[O'#E[O({QWO,58{O)TQ[O,59SO$qQ[O,59oO$vQ[O,59rO(aQ[O,59uO(aQ[O,59wO(aQ[O,59xO)`Q[O'#DbOOQS,58{,58{OOQP'#Ck'#CkOOQO'#DR'#DROOQP,59S,59SO)gQWO,59SO)lQWO,59SOOQP'#DV'#DVOOQP,59o,59oOOQO'#DX'#DXO)qQ`O,59rOOQS'#Cp'#CpO${QdO'#CqO)yQvO'#CsO+ZQtO,5:ROOQO'#Cx'#CxO)lQWO'#CwO+oQWO'#CyO+tQ[O'#DOOOQS'#Ep'#EpOOQO'#Dj'#DjO+|Q[O'#DqO,[QWO'#EtO&`Q[O'#DoO,jQWO'#DrOOQO'#Eu'#EuO)OQWO,5:`O,oQpO,5:bOOQS'#Dz'#DzO,wQWO,5:dO,|Q[O,5:dOOQO'#D}'#D}O-UQWO,5:gO-ZQWO,5:mO-cQWO,5:oOOQS-E8U-E8UO${QdO,59}O-kQ[O'#E^O-xQWO,5;_O-xQWO,5;_POOO'#EV'#EVP.TO#tO,58yPOOO,58y,58yOOQP1G.l1G.lO.zQXO,5:vOOQO-E8Y-E8YOOQS1G.g1G.gOOQP1G.n1G.nO)gQWO1G.nO)lQWO1G.nOOQP1G/Z1G/ZO/XQ`O1G/^O/rQXO1G/aO0YQXO1G/cO0pQXO1G/dO1WQWO,59|O1]Q[O'#DSO1dQdO'#CoOOQP1G/^1G/^O${QdO1G/^O1kQpO,59]OOQS,59_,59_O${QdO,59aO1sQWO1G/mOOQS,59c,59cO1xQ!bO,59eOOQS'#DP'#DPOOQS'#EY'#EYO2QQ[O,59jOOQS,59j,59jO2YQWO'#DjO2eQWO,5:VO2jQWO,5:]O&`Q[O,5:XO&`Q[O'#E_O2rQWO,5;`O2}QWO,5:ZO(aQ[O,5:^OOQS1G/z1G/zOOQS1G/|1G/|OOQS1G0O1G0OO3`QWO1G0OO3eQdO'#EOOOQS1G0R1G0ROOQS1G0X1G0XOOQS1G0Z1G0ZO3pQtO1G/iOOQO,5:x,5:xO4WQ[O,5:xOOQO-E8[-E8[O4eQWO1G0yPOOO-E8T-E8TPOOO1G.e1G.eOOQP7+$Y7+$YOOQP7+$x7+$xO${QdO7+$xOOQS1G/h1G/hO4pQXO'#ErO4wQWO,59nO4|QtO'#EXO5tQdO'#EoO6OQWO,59ZO6TQpO7+$xOOQS1G.w1G.wOOQS1G.{1G.{OOQS7+%X7+%XO6]QWO1G/POOQS-E8W-E8WOOQS1G/U1G/UO${QdO1G/qOOQO1G/w1G/wOOQO1G/s1G/sO6bQWO,5:yOOQO-E8]-E8]O6pQXO1G/xOOQS7+%j7+%jO6wQYO'#CsOOQO'#EQ'#EQO7SQ`O'#EPOOQO'#EP'#EPO7_QWO'#E`O7gQdO,5:jOOQS,5:j,5:jO7rQtO'#E]O${QdO'#E]O8sQdO7+%TOOQO7+%T7+%TOOQO1G0d1G0dO9WQpO<<HdO9`QWO,5;^OOQP1G/Y1G/YOOQS-E8V-E8VO${QdO'#EZO9hQWO,5;ZOOQT1G.u1G.uOOQP<<Hd<<HdOOQS7+$k7+$kO9pQdO7+%]OOQO7+%d7+%dOOQO,5:k,5:kO3hQdO'#EaO7_QWO,5:zOOQS,5:z,5:zOOQS-E8^-E8^OOQS1G0U1G0UO9wQtO,5:wOOQS-E8Z-E8ZOOQO<<Ho<<HoOOQPAN>OAN>OO:xQdO,5:uOOQO-E8X-E8XOOQO<<Hw<<HwOOQO,5:{,5:{OOQO-E8_-E8_OOQS1G0f1G0f",
  stateData: ";[~O#ZOS#[QQ~OUYOXYO]VO^VOqXOxWO![aO!]ZO!i[O!k]O!m^O!p_O!v`O#XRO#bTO~OQfOUYOXYO]VO^VOqXOxWO![aO!]ZO!i[O!k]O!m^O!p_O!v`O#XeO#bTO~O#U#gP~P!ZO#[jO~O#XlO~O]qO^qOqsOtoOxrO!OtO!RvO#VuO#bnO~O!TwO~P#pO`}O#WzO#XyO~O#X!OO~O#X!QO~OQ![Ob!TOf![Oh![On!YOq!ZO#W!WO#X!SO#e!UO~Ob!^O!d!`O!g!aO#X!]O!T#hP~Oh!fOn!YO#X!eO~Oh!hO#X!hO~Ob!^O!d!`O!g!aO#X!]O~O!Y#hP~P%jO]WX]!WX^WXqWXtWXxWX!OWX!RWX!TWX#VWX#bWX~O]!mO~O!Y!nO#U#gX!S#gX~O#U#gX!S#gX~P!ZO#]!qO#^!qO#_!sO~OUYOXYO]VO^VOqXOxWO#XRO#bTO~OtoO!TwO~O`!zO#WzO#XyO~O!S#gP~P!ZOb#RO~Ob#SO~Op#TO|#UO~OP#WObgXjgX!YgX!dgX!ggX#XgXagXQgXfgXhgXngXqgXtgX!XgX#UgX#WgX#egXpgX!SgX~Ob!^Oj#XO!d!`O!g!aO#X!]O!Y#hP~Ob#[O~Op#`O#X#]O~Ob!^O!d!`O!g!aO#X#aO~Ot#eO!b#dO!T#hX!Y#hX~Ob#hO~Oj#XO!Y#jO~O!Y#kO~Oh#lOn!YO~O!T#mO~O!TwO!b#dO~O!TwO!Y#pO~O!Y#QX#U#QX!S#QX~P!ZO!Y!nO#U#ga!S#ga~O#]!qO#^!qO#_#wO~O]qO^qOqsOxrO!OtO!RvO#VuO#bnO~Ot#Oa!T#Oaa#Oa~P.`Op#yO|#zO~O]qO^qOqsOxrO#bnO~Ot}i!O}i!R}i!T}i#V}ia}i~P/aOt!Pi!O!Pi!R!Pi!T!Pi#V!Pia!Pi~P/aOt!Qi!O!Qi!R!Qi!T!Qi#V!Qia!Qi~P/aO!S#{O~Oa#fP~P(aOa#cP~P${Oa$SOj#XO~O!Y$UO~Oh$VOo$VO~Op$XO#X#]O~O]!`Xa!^X!b!^X~O]$YO~Oa$ZO!b#dO~Ot#eO!T#ha!Y#ha~O!b#dOt!ca!T!ca!Y!caa!ca~O!Y$`O~O!S$gO#X$bO#e$aO~Oj#XOt$iO!X$kO!Y!Vi#U!Vi!S!Vi~P${O!Y#Qa#U#Qa!S#Qa~P!ZO!Y!nO#U#gi!S#gi~Oa#fX~P#pOa$oO~Oj#XOQ!{Xa!{Xb!{Xf!{Xh!{Xn!{Xq!{Xt!{X#W!{X#X!{X#e!{X~Ot$qOa#cX~P${Oa$sO~Oj#XOp$tO~Oa$uO~O!b#dOt#Ra!T#Ra!Y#Ra~Oa$wO~P.`OP#WOtgX!TgX~O#e$aOt!sX!T!sX~Ot$yO!TwO~O!S$}O#X$bO#e$aO~Oj#XOQ#PXb#PXf#PXh#PXn#PXq#PXt#PX!X#PX!Y#PX#U#PX#W#PX#X#PX#e#PX!S#PX~Ot$iO!X%QO!Y!Vq#U!Vq!S!Vq~P${Oj#XOp%RO~OtoOa#fa~Ot$qOa#ca~Oa%UO~P${Oj#XOQ#Pab#Paf#Pah#Pan#Paq#Pat#Pa!X#Pa!Y#Pa#U#Pa#W#Pa#X#Pa#e#Pa!S#Pa~Oa!}at!}a~P${O#Zo#[#ej!R#e~",
  goto: "-g#jPPP#kP#nP#w$WP#w$g#wPP$mPPP$s$|$|P%`P$|P$|%z&^PPPP$|&vP&z'Q#wP'W#w'^P#wP#w#wPPP'd'y(WPP#nPP(_(_(i(_P(_P(_(_P#nP#nP#nP(l#nP(o(r(u(|#nP#nP)R)X)h)v)|*S*^*d*n*t*zPPPPPPPPPP+Q+ZP+v+yP,o,r,x-RRkQ_bOPdhw!n#skYOPdhotuvw!n#R#h#skSOPdhotuvw!n#R#h#sQmTR!tnQ{VR!xqQ!x}Q#Z!XR#x!zq![Z]!T!m#S#U#X#q#z$P$Y$i$j$q$v%Sp![Z]!T!m#S#U#X#q#z$P$Y$i$j$q$v%SU$d#m$f$yR$x$cq!XZ]!T!m#S#U#X#q#z$P$Y$i$j$q$v%Sp![Z]!T!m#S#U#X#q#z$P$Y$i$j$q$v%SQ!f^R#l!gT#^!Z#_Q|VR!yqQ!x|R#x!yQ!PWR!{rQ!RXR!|sQxUQ!wpQ#i!cQ#o!jQ#p!kQ${$eR%X$zSgPwQ!phQ#r!nR$l#sZfPhw!n#sa!b[`a!V!^!`#d#eR#b!^R!g^R!i_R#n!iS$e#m$fR%V$yV$c#m$f$yQ!rjR#v!rQdOShPwU!ldh#sR#s!nQ$P#SU$p$P$v%SQ$v$YR%S$qQ#_!ZR$W#_Q$r$PR%T$rQpUS!vp$nR$n#|Q$j#qR%P$jQ!ogS#t!o#uR#u!pQ#f!_R$^#fQ$f#mR$|$fQ$z$eR%W$z_cOPdhw!n#s^UOPdhw!n#sQ!uoQ!}tQ#OuQ#PvQ#|#RR$_#hR$Q#SQ!VZQ!d]Q#V!TQ#q!m[$O#S$P$Y$q$v%SQ$R#UQ$T#XS$h#q$jQ$m#zR%O$iR#}#RQiPR#QwQ!c[Q!kaR#Y!VU!_[a!VQ!j`Q#c!^Q#g!`Q$[#dR$]#e",
  nodeNames: "⚠ Unit VariableName Comment StyleSheet RuleSet UniversalSelector TagSelector TagName NestingSelector ClassSelector ClassName PseudoClassSelector : :: PseudoClassName PseudoClassName ) ( ArgList ValueName ParenthesizedValue ColorLiteral NumberLiteral StringLiteral BinaryExpression BinOp CallExpression Callee CallLiteral CallTag ParenthesizedContent ] [ LineNames LineName , PseudoClassName ArgList IdSelector # IdName AttributeSelector AttributeName MatchOp ChildSelector ChildOp DescendantSelector SiblingSelector SiblingOp } { Block Declaration PropertyName Important ; ImportStatement AtKeyword import KeywordQuery FeatureQuery FeatureName BinaryQuery LogicOp UnaryQuery UnaryQueryOp ParenthesizedQuery SelectorQuery selector MediaStatement media CharsetStatement charset NamespaceStatement namespace NamespaceName KeyframesStatement keyframes KeyframeName KeyframeList KeyframeSelector KeyframeRangeName SupportsStatement supports AtRule Styles",
  maxTerm: 117,
  nodeProps: [
    ["isolate", -2, 3, 24, ""],
    ["openedBy", 17, "(", 32, "[", 50, "{"],
    ["closedBy", 18, ")", 33, "]", 51, "}"]
  ],
  propSources: [ug],
  skippedNodes: [0, 3, 87],
  repeatNodeCount: 11,
  tokenData: "J^~R!^OX$}X^%u^p$}pq%uqr)Xrs.Rst/utu6duv$}vw7^wx7oxy9^yz9oz{9t{|:_|}?Q}!O?c!O!P@Q!P!Q@i!Q![Ab![!]B]!]!^CX!^!_$}!_!`Cj!`!aC{!a!b$}!b!cDw!c!}$}!}#OFa#O#P$}#P#QFr#Q#R6d#R#T$}#T#UGT#U#c$}#c#dHf#d#o$}#o#pH{#p#q6d#q#rI^#r#sIo#s#y$}#y#z%u#z$f$}$f$g%u$g#BY$}#BY#BZ%u#BZ$IS$}$IS$I_%u$I_$I|$}$I|$JO%u$JO$JT$}$JT$JU%u$JU$KV$}$KV$KW%u$KW&FU$}&FU&FV%u&FV;'S$};'S;=`JW<%lO$}`%QSOy%^z;'S%^;'S;=`%o<%lO%^`%cSo`Oy%^z;'S%^;'S;=`%o<%lO%^`%rP;=`<%l%^~%zh#Z~OX%^X^'f^p%^pq'fqy%^z#y%^#y#z'f#z$f%^$f$g'f$g#BY%^#BY#BZ'f#BZ$IS%^$IS$I_'f$I_$I|%^$I|$JO'f$JO$JT%^$JT$JU'f$JU$KV%^$KV$KW'f$KW&FU%^&FU&FV'f&FV;'S%^;'S;=`%o<%lO%^~'mh#Z~o`OX%^X^'f^p%^pq'fqy%^z#y%^#y#z'f#z$f%^$f$g'f$g#BY%^#BY#BZ'f#BZ$IS%^$IS$I_'f$I_$I|%^$I|$JO'f$JO$JT%^$JT$JU'f$JU$KV%^$KV$KW'f$KW&FU%^&FU&FV'f&FV;'S%^;'S;=`%o<%lO%^l)[UOy%^z#]%^#]#^)n#^;'S%^;'S;=`%o<%lO%^l)sUo`Oy%^z#a%^#a#b*V#b;'S%^;'S;=`%o<%lO%^l*[Uo`Oy%^z#d%^#d#e*n#e;'S%^;'S;=`%o<%lO%^l*sUo`Oy%^z#c%^#c#d+V#d;'S%^;'S;=`%o<%lO%^l+[Uo`Oy%^z#f%^#f#g+n#g;'S%^;'S;=`%o<%lO%^l+sUo`Oy%^z#h%^#h#i,V#i;'S%^;'S;=`%o<%lO%^l,[Uo`Oy%^z#T%^#T#U,n#U;'S%^;'S;=`%o<%lO%^l,sUo`Oy%^z#b%^#b#c-V#c;'S%^;'S;=`%o<%lO%^l-[Uo`Oy%^z#h%^#h#i-n#i;'S%^;'S;=`%o<%lO%^l-uS!X[o`Oy%^z;'S%^;'S;=`%o<%lO%^~.UWOY.RZr.Rrs.ns#O.R#O#P.s#P;'S.R;'S;=`/o<%lO.R~.sOh~~.vRO;'S.R;'S;=`/P;=`O.R~/SXOY.RZr.Rrs.ns#O.R#O#P.s#P;'S.R;'S;=`/o;=`<%l.R<%lO.R~/rP;=`<%l.Rn/zYxQOy%^z!Q%^!Q![0j![!c%^!c!i0j!i#T%^#T#Z0j#Z;'S%^;'S;=`%o<%lO%^l0oYo`Oy%^z!Q%^!Q![1_![!c%^!c!i1_!i#T%^#T#Z1_#Z;'S%^;'S;=`%o<%lO%^l1dYo`Oy%^z!Q%^!Q![2S![!c%^!c!i2S!i#T%^#T#Z2S#Z;'S%^;'S;=`%o<%lO%^l2ZYf[o`Oy%^z!Q%^!Q![2y![!c%^!c!i2y!i#T%^#T#Z2y#Z;'S%^;'S;=`%o<%lO%^l3QYf[o`Oy%^z!Q%^!Q![3p![!c%^!c!i3p!i#T%^#T#Z3p#Z;'S%^;'S;=`%o<%lO%^l3uYo`Oy%^z!Q%^!Q![4e![!c%^!c!i4e!i#T%^#T#Z4e#Z;'S%^;'S;=`%o<%lO%^l4lYf[o`Oy%^z!Q%^!Q![5[![!c%^!c!i5[!i#T%^#T#Z5[#Z;'S%^;'S;=`%o<%lO%^l5aYo`Oy%^z!Q%^!Q![6P![!c%^!c!i6P!i#T%^#T#Z6P#Z;'S%^;'S;=`%o<%lO%^l6WSf[o`Oy%^z;'S%^;'S;=`%o<%lO%^d6gUOy%^z!_%^!_!`6y!`;'S%^;'S;=`%o<%lO%^d7QS|So`Oy%^z;'S%^;'S;=`%o<%lO%^b7cSXQOy%^z;'S%^;'S;=`%o<%lO%^~7rWOY7oZw7owx.nx#O7o#O#P8[#P;'S7o;'S;=`9W<%lO7o~8_RO;'S7o;'S;=`8h;=`O7o~8kXOY7oZw7owx.nx#O7o#O#P8[#P;'S7o;'S;=`9W;=`<%l7o<%lO7o~9ZP;=`<%l7on9cSb^Oy%^z;'S%^;'S;=`%o<%lO%^~9tOa~n9{UUQjWOy%^z!_%^!_!`6y!`;'S%^;'S;=`%o<%lO%^n:fWjW!RQOy%^z!O%^!O!P;O!P!Q%^!Q![>T![;'S%^;'S;=`%o<%lO%^l;TUo`Oy%^z!Q%^!Q![;g![;'S%^;'S;=`%o<%lO%^l;nYo`#e[Oy%^z!Q%^!Q![;g![!g%^!g!h<^!h#X%^#X#Y<^#Y;'S%^;'S;=`%o<%lO%^l<cYo`Oy%^z{%^{|=R|}%^}!O=R!O!Q%^!Q![=j![;'S%^;'S;=`%o<%lO%^l=WUo`Oy%^z!Q%^!Q![=j![;'S%^;'S;=`%o<%lO%^l=qUo`#e[Oy%^z!Q%^!Q![=j![;'S%^;'S;=`%o<%lO%^l>[[o`#e[Oy%^z!O%^!O!P;g!P!Q%^!Q![>T![!g%^!g!h<^!h#X%^#X#Y<^#Y;'S%^;'S;=`%o<%lO%^n?VSt^Oy%^z;'S%^;'S;=`%o<%lO%^l?hWjWOy%^z!O%^!O!P;O!P!Q%^!Q![>T![;'S%^;'S;=`%o<%lO%^n@VU#bQOy%^z!Q%^!Q![;g![;'S%^;'S;=`%o<%lO%^~@nTjWOy%^z{@}{;'S%^;'S;=`%o<%lO%^~AUSo`#[~Oy%^z;'S%^;'S;=`%o<%lO%^lAg[#e[Oy%^z!O%^!O!P;g!P!Q%^!Q![>T![!g%^!g!h<^!h#X%^#X#Y<^#Y;'S%^;'S;=`%o<%lO%^bBbU]QOy%^z![%^![!]Bt!];'S%^;'S;=`%o<%lO%^bB{S^Qo`Oy%^z;'S%^;'S;=`%o<%lO%^nC^S!Y^Oy%^z;'S%^;'S;=`%o<%lO%^dCoS|SOy%^z;'S%^;'S;=`%o<%lO%^bDQU!OQOy%^z!`%^!`!aDd!a;'S%^;'S;=`%o<%lO%^bDkS!OQo`Oy%^z;'S%^;'S;=`%o<%lO%^bDzWOy%^z!c%^!c!}Ed!}#T%^#T#oEd#o;'S%^;'S;=`%o<%lO%^bEk[![Qo`Oy%^z}%^}!OEd!O!Q%^!Q![Ed![!c%^!c!}Ed!}#T%^#T#oEd#o;'S%^;'S;=`%o<%lO%^nFfSq^Oy%^z;'S%^;'S;=`%o<%lO%^nFwSp^Oy%^z;'S%^;'S;=`%o<%lO%^bGWUOy%^z#b%^#b#cGj#c;'S%^;'S;=`%o<%lO%^bGoUo`Oy%^z#W%^#W#XHR#X;'S%^;'S;=`%o<%lO%^bHYS!bQo`Oy%^z;'S%^;'S;=`%o<%lO%^bHiUOy%^z#f%^#f#gHR#g;'S%^;'S;=`%o<%lO%^fIQS!TUOy%^z;'S%^;'S;=`%o<%lO%^nIcS!S^Oy%^z;'S%^;'S;=`%o<%lO%^fItU!RQOy%^z!_%^!_!`6y!`;'S%^;'S;=`%o<%lO%^`JZP;=`<%l$}",
  tokenizers: [og, lg, sg, 1, 2, 3, 4, new Ts("m~RRYZ[z{a~~g~aO#^~~dP!P!Qg~lO#_~~", 28, 105)],
  topRules: { StyleSheet: [0, 4], Styles: [1, 86] },
  specialized: [{ term: 100, get: (e) => cg[e] || -1 }, { term: 58, get: (e) => fg[e] || -1 }, { term: 101, get: (e) => hg[e] || -1 }],
  tokenPrec: 1200
});
let Co = null;
function Lo() {
  if (!Co && typeof document == "object" && document.body) {
    let { style: e } = document.body, t = [], r = /* @__PURE__ */ new Set();
    for (let i in e)
      i != "cssText" && i != "cssFloat" && typeof e[i] == "string" && (/[A-Z]/.test(i) && (i = i.replace(/[A-Z]/g, (n) => "-" + n.toLowerCase())), r.has(i) || (t.push(i), r.add(i)));
    Co = t.sort().map((i) => ({ type: "property", label: i }));
  }
  return Co || [];
}
const kf = /* @__PURE__ */ [
  "active",
  "after",
  "any-link",
  "autofill",
  "backdrop",
  "before",
  "checked",
  "cue",
  "default",
  "defined",
  "disabled",
  "empty",
  "enabled",
  "file-selector-button",
  "first",
  "first-child",
  "first-letter",
  "first-line",
  "first-of-type",
  "focus",
  "focus-visible",
  "focus-within",
  "fullscreen",
  "has",
  "host",
  "host-context",
  "hover",
  "in-range",
  "indeterminate",
  "invalid",
  "is",
  "lang",
  "last-child",
  "last-of-type",
  "left",
  "link",
  "marker",
  "modal",
  "not",
  "nth-child",
  "nth-last-child",
  "nth-last-of-type",
  "nth-of-type",
  "only-child",
  "only-of-type",
  "optional",
  "out-of-range",
  "part",
  "placeholder",
  "placeholder-shown",
  "read-only",
  "read-write",
  "required",
  "right",
  "root",
  "scope",
  "selection",
  "slotted",
  "target",
  "target-text",
  "valid",
  "visited",
  "where"
].map((e) => ({ type: "class", label: e })), Qf = /* @__PURE__ */ [
  "above",
  "absolute",
  "activeborder",
  "additive",
  "activecaption",
  "after-white-space",
  "ahead",
  "alias",
  "all",
  "all-scroll",
  "alphabetic",
  "alternate",
  "always",
  "antialiased",
  "appworkspace",
  "asterisks",
  "attr",
  "auto",
  "auto-flow",
  "avoid",
  "avoid-column",
  "avoid-page",
  "avoid-region",
  "axis-pan",
  "background",
  "backwards",
  "baseline",
  "below",
  "bidi-override",
  "blink",
  "block",
  "block-axis",
  "bold",
  "bolder",
  "border",
  "border-box",
  "both",
  "bottom",
  "break",
  "break-all",
  "break-word",
  "bullets",
  "button",
  "button-bevel",
  "buttonface",
  "buttonhighlight",
  "buttonshadow",
  "buttontext",
  "calc",
  "capitalize",
  "caps-lock-indicator",
  "caption",
  "captiontext",
  "caret",
  "cell",
  "center",
  "checkbox",
  "circle",
  "cjk-decimal",
  "clear",
  "clip",
  "close-quote",
  "col-resize",
  "collapse",
  "color",
  "color-burn",
  "color-dodge",
  "column",
  "column-reverse",
  "compact",
  "condensed",
  "contain",
  "content",
  "contents",
  "content-box",
  "context-menu",
  "continuous",
  "copy",
  "counter",
  "counters",
  "cover",
  "crop",
  "cross",
  "crosshair",
  "currentcolor",
  "cursive",
  "cyclic",
  "darken",
  "dashed",
  "decimal",
  "decimal-leading-zero",
  "default",
  "default-button",
  "dense",
  "destination-atop",
  "destination-in",
  "destination-out",
  "destination-over",
  "difference",
  "disc",
  "discard",
  "disclosure-closed",
  "disclosure-open",
  "document",
  "dot-dash",
  "dot-dot-dash",
  "dotted",
  "double",
  "down",
  "e-resize",
  "ease",
  "ease-in",
  "ease-in-out",
  "ease-out",
  "element",
  "ellipse",
  "ellipsis",
  "embed",
  "end",
  "ethiopic-abegede-gez",
  "ethiopic-halehame-aa-er",
  "ethiopic-halehame-gez",
  "ew-resize",
  "exclusion",
  "expanded",
  "extends",
  "extra-condensed",
  "extra-expanded",
  "fantasy",
  "fast",
  "fill",
  "fill-box",
  "fixed",
  "flat",
  "flex",
  "flex-end",
  "flex-start",
  "footnotes",
  "forwards",
  "from",
  "geometricPrecision",
  "graytext",
  "grid",
  "groove",
  "hand",
  "hard-light",
  "help",
  "hidden",
  "hide",
  "higher",
  "highlight",
  "highlighttext",
  "horizontal",
  "hsl",
  "hsla",
  "hue",
  "icon",
  "ignore",
  "inactiveborder",
  "inactivecaption",
  "inactivecaptiontext",
  "infinite",
  "infobackground",
  "infotext",
  "inherit",
  "initial",
  "inline",
  "inline-axis",
  "inline-block",
  "inline-flex",
  "inline-grid",
  "inline-table",
  "inset",
  "inside",
  "intrinsic",
  "invert",
  "italic",
  "justify",
  "keep-all",
  "landscape",
  "large",
  "larger",
  "left",
  "level",
  "lighter",
  "lighten",
  "line-through",
  "linear",
  "linear-gradient",
  "lines",
  "list-item",
  "listbox",
  "listitem",
  "local",
  "logical",
  "loud",
  "lower",
  "lower-hexadecimal",
  "lower-latin",
  "lower-norwegian",
  "lowercase",
  "ltr",
  "luminosity",
  "manipulation",
  "match",
  "matrix",
  "matrix3d",
  "medium",
  "menu",
  "menutext",
  "message-box",
  "middle",
  "min-intrinsic",
  "mix",
  "monospace",
  "move",
  "multiple",
  "multiple_mask_images",
  "multiply",
  "n-resize",
  "narrower",
  "ne-resize",
  "nesw-resize",
  "no-close-quote",
  "no-drop",
  "no-open-quote",
  "no-repeat",
  "none",
  "normal",
  "not-allowed",
  "nowrap",
  "ns-resize",
  "numbers",
  "numeric",
  "nw-resize",
  "nwse-resize",
  "oblique",
  "opacity",
  "open-quote",
  "optimizeLegibility",
  "optimizeSpeed",
  "outset",
  "outside",
  "outside-shape",
  "overlay",
  "overline",
  "padding",
  "padding-box",
  "painted",
  "page",
  "paused",
  "perspective",
  "pinch-zoom",
  "plus-darker",
  "plus-lighter",
  "pointer",
  "polygon",
  "portrait",
  "pre",
  "pre-line",
  "pre-wrap",
  "preserve-3d",
  "progress",
  "push-button",
  "radial-gradient",
  "radio",
  "read-only",
  "read-write",
  "read-write-plaintext-only",
  "rectangle",
  "region",
  "relative",
  "repeat",
  "repeating-linear-gradient",
  "repeating-radial-gradient",
  "repeat-x",
  "repeat-y",
  "reset",
  "reverse",
  "rgb",
  "rgba",
  "ridge",
  "right",
  "rotate",
  "rotate3d",
  "rotateX",
  "rotateY",
  "rotateZ",
  "round",
  "row",
  "row-resize",
  "row-reverse",
  "rtl",
  "run-in",
  "running",
  "s-resize",
  "sans-serif",
  "saturation",
  "scale",
  "scale3d",
  "scaleX",
  "scaleY",
  "scaleZ",
  "screen",
  "scroll",
  "scrollbar",
  "scroll-position",
  "se-resize",
  "self-start",
  "self-end",
  "semi-condensed",
  "semi-expanded",
  "separate",
  "serif",
  "show",
  "single",
  "skew",
  "skewX",
  "skewY",
  "skip-white-space",
  "slide",
  "slider-horizontal",
  "slider-vertical",
  "sliderthumb-horizontal",
  "sliderthumb-vertical",
  "slow",
  "small",
  "small-caps",
  "small-caption",
  "smaller",
  "soft-light",
  "solid",
  "source-atop",
  "source-in",
  "source-out",
  "source-over",
  "space",
  "space-around",
  "space-between",
  "space-evenly",
  "spell-out",
  "square",
  "start",
  "static",
  "status-bar",
  "stretch",
  "stroke",
  "stroke-box",
  "sub",
  "subpixel-antialiased",
  "svg_masks",
  "super",
  "sw-resize",
  "symbolic",
  "symbols",
  "system-ui",
  "table",
  "table-caption",
  "table-cell",
  "table-column",
  "table-column-group",
  "table-footer-group",
  "table-header-group",
  "table-row",
  "table-row-group",
  "text",
  "text-bottom",
  "text-top",
  "textarea",
  "textfield",
  "thick",
  "thin",
  "threeddarkshadow",
  "threedface",
  "threedhighlight",
  "threedlightshadow",
  "threedshadow",
  "to",
  "top",
  "transform",
  "translate",
  "translate3d",
  "translateX",
  "translateY",
  "translateZ",
  "transparent",
  "ultra-condensed",
  "ultra-expanded",
  "underline",
  "unidirectional-pan",
  "unset",
  "up",
  "upper-latin",
  "uppercase",
  "url",
  "var",
  "vertical",
  "vertical-text",
  "view-box",
  "visible",
  "visibleFill",
  "visiblePainted",
  "visibleStroke",
  "visual",
  "w-resize",
  "wait",
  "wave",
  "wider",
  "window",
  "windowframe",
  "windowtext",
  "words",
  "wrap",
  "wrap-reverse",
  "x-large",
  "x-small",
  "xor",
  "xx-large",
  "xx-small"
].map((e) => ({ type: "keyword", label: e })).concat(/* @__PURE__ */ [
  "aliceblue",
  "antiquewhite",
  "aqua",
  "aquamarine",
  "azure",
  "beige",
  "bisque",
  "black",
  "blanchedalmond",
  "blue",
  "blueviolet",
  "brown",
  "burlywood",
  "cadetblue",
  "chartreuse",
  "chocolate",
  "coral",
  "cornflowerblue",
  "cornsilk",
  "crimson",
  "cyan",
  "darkblue",
  "darkcyan",
  "darkgoldenrod",
  "darkgray",
  "darkgreen",
  "darkkhaki",
  "darkmagenta",
  "darkolivegreen",
  "darkorange",
  "darkorchid",
  "darkred",
  "darksalmon",
  "darkseagreen",
  "darkslateblue",
  "darkslategray",
  "darkturquoise",
  "darkviolet",
  "deeppink",
  "deepskyblue",
  "dimgray",
  "dodgerblue",
  "firebrick",
  "floralwhite",
  "forestgreen",
  "fuchsia",
  "gainsboro",
  "ghostwhite",
  "gold",
  "goldenrod",
  "gray",
  "grey",
  "green",
  "greenyellow",
  "honeydew",
  "hotpink",
  "indianred",
  "indigo",
  "ivory",
  "khaki",
  "lavender",
  "lavenderblush",
  "lawngreen",
  "lemonchiffon",
  "lightblue",
  "lightcoral",
  "lightcyan",
  "lightgoldenrodyellow",
  "lightgray",
  "lightgreen",
  "lightpink",
  "lightsalmon",
  "lightseagreen",
  "lightskyblue",
  "lightslategray",
  "lightsteelblue",
  "lightyellow",
  "lime",
  "limegreen",
  "linen",
  "magenta",
  "maroon",
  "mediumaquamarine",
  "mediumblue",
  "mediumorchid",
  "mediumpurple",
  "mediumseagreen",
  "mediumslateblue",
  "mediumspringgreen",
  "mediumturquoise",
  "mediumvioletred",
  "midnightblue",
  "mintcream",
  "mistyrose",
  "moccasin",
  "navajowhite",
  "navy",
  "oldlace",
  "olive",
  "olivedrab",
  "orange",
  "orangered",
  "orchid",
  "palegoldenrod",
  "palegreen",
  "paleturquoise",
  "palevioletred",
  "papayawhip",
  "peachpuff",
  "peru",
  "pink",
  "plum",
  "powderblue",
  "purple",
  "rebeccapurple",
  "red",
  "rosybrown",
  "royalblue",
  "saddlebrown",
  "salmon",
  "sandybrown",
  "seagreen",
  "seashell",
  "sienna",
  "silver",
  "skyblue",
  "slateblue",
  "slategray",
  "snow",
  "springgreen",
  "steelblue",
  "tan",
  "teal",
  "thistle",
  "tomato",
  "turquoise",
  "violet",
  "wheat",
  "white",
  "whitesmoke",
  "yellow",
  "yellowgreen"
].map((e) => ({ type: "constant", label: e }))), Og = /* @__PURE__ */ [
  "a",
  "abbr",
  "address",
  "article",
  "aside",
  "b",
  "bdi",
  "bdo",
  "blockquote",
  "body",
  "br",
  "button",
  "canvas",
  "caption",
  "cite",
  "code",
  "col",
  "colgroup",
  "dd",
  "del",
  "details",
  "dfn",
  "dialog",
  "div",
  "dl",
  "dt",
  "em",
  "figcaption",
  "figure",
  "footer",
  "form",
  "header",
  "hgroup",
  "h1",
  "h2",
  "h3",
  "h4",
  "h5",
  "h6",
  "hr",
  "html",
  "i",
  "iframe",
  "img",
  "input",
  "ins",
  "kbd",
  "label",
  "legend",
  "li",
  "main",
  "meter",
  "nav",
  "ol",
  "output",
  "p",
  "pre",
  "ruby",
  "section",
  "select",
  "small",
  "source",
  "span",
  "strong",
  "sub",
  "summary",
  "sup",
  "table",
  "tbody",
  "td",
  "template",
  "textarea",
  "tfoot",
  "th",
  "thead",
  "tr",
  "u",
  "ul"
].map((e) => ({ type: "type", label: e })), ci = /^(\w[\w-]*|-\w[\w-]*|)$/, Eg = /^-(-[\w-]*)?$/;
function dg(e, t) {
  var r;
  if ((e.name == "(" || e.type.isError) && (e = e.parent || e), e.name != "ArgList")
    return !1;
  let i = (r = e.parent) === null || r === void 0 ? void 0 : r.firstChild;
  return (i == null ? void 0 : i.name) != "Callee" ? !1 : t.sliceString(i.from, i.to) == "var";
}
const Gf = /* @__PURE__ */ new cp(), Tg = ["Declaration"];
function Sg(e) {
  for (let t = e; ; ) {
    if (t.type.isTop)
      return t;
    if (!(t = t.parent))
      return e;
  }
}
function aO(e, t, r) {
  if (t.to - t.from > 4096) {
    let i = Gf.get(t);
    if (i)
      return i;
    let n = [], a = /* @__PURE__ */ new Set(), s = t.cursor(st.IncludeAnonymous);
    if (s.firstChild())
      do
        for (let o of aO(e, s.node, r))
          a.has(o.label) || (a.add(o.label), n.push(o));
      while (s.nextSibling());
    return Gf.set(t, n), n;
  } else {
    let i = [], n = /* @__PURE__ */ new Set();
    return t.cursor().iterate((a) => {
      var s;
      if (r(a) && a.matchContext(Tg) && ((s = a.node.nextSibling) === null || s === void 0 ? void 0 : s.name) == ":") {
        let o = e.sliceString(a.from, a.to);
        n.has(o) || (n.add(o), i.push({ label: o, type: "variable" }));
      }
    }), i;
  }
}
const mg = (e) => (t) => {
  let { state: r, pos: i } = t, n = Ot(r).resolveInner(i, -1), a = n.type.isError && n.from == n.to - 1 && r.doc.sliceString(n.from, n.to) == "-";
  if (n.name == "PropertyName" || (a || n.name == "TagName") && /^(Block|Styles)$/.test(n.resolve(n.to).name))
    return { from: n.from, options: Lo(), validFor: ci };
  if (n.name == "ValueName")
    return { from: n.from, options: Qf, validFor: ci };
  if (n.name == "PseudoClassName")
    return { from: n.from, options: kf, validFor: ci };
  if (e(n) || (t.explicit || a) && dg(n, r.doc))
    return {
      from: e(n) || a ? n.from : i,
      options: aO(r.doc, Sg(n), e),
      validFor: Eg
    };
  if (n.name == "TagName") {
    for (let { parent: l } = n; l; l = l.parent)
      if (l.name == "Block")
        return { from: n.from, options: Lo(), validFor: ci };
    return { from: n.from, options: Og, validFor: ci };
  }
  if (!t.explicit)
    return null;
  let s = n.resolve(i), o = s.childBefore(i);
  return o && o.name == ":" && s.name == "PseudoClassSelector" ? { from: i, options: kf, validFor: ci } : o && o.name == ":" && s.name == "Declaration" || s.name == "ArgList" ? { from: i, options: Qf, validFor: ci } : s.name == "Block" || s.name == "Styles" ? { from: i, options: Lo(), validFor: ci } : null;
}, Rg = /* @__PURE__ */ mg((e) => e.name == "VariableName"), ms = /* @__PURE__ */ Si.define({
  name: "css",
  parser: /* @__PURE__ */ pg.configure({
    props: [
      /* @__PURE__ */ gn.add({
        Declaration: /* @__PURE__ */ Gi()
      }),
      /* @__PURE__ */ yn.add({
        "Block KeyframeList": Cu
      })
    ]
  }),
  languageData: {
    commentTokens: { block: { open: "/*", close: "*/" } },
    indentOnInput: /^\s*\}$/,
    wordChars: "-"
  }
});
function sO() {
  return new Ta(ms, ms.data.of({ autocomplete: Rg }));
}
const Ag = 54, gg = 1, yg = 55, Ig = 2, Ng = 56, Pg = 3, Vf = 4, _g = 5, Rs = 6, oO = 7, lO = 8, uO = 9, cO = 10, bg = 11, vg = 12, Cg = 13, xo = 57, Lg = 14, Bf = 58, fO = 20, xg = 22, hO = 23, Dg = 24, Ol = 26, pO = 27, Ug = 28, wg = 31, Mg = 34, kg = 36, Qg = 37, Gg = 0, Vg = 1, Bg = {
  area: !0,
  base: !0,
  br: !0,
  col: !0,
  command: !0,
  embed: !0,
  frame: !0,
  hr: !0,
  img: !0,
  input: !0,
  keygen: !0,
  link: !0,
  meta: !0,
  param: !0,
  source: !0,
  track: !0,
  wbr: !0,
  menuitem: !0
}, $g = {
  dd: !0,
  li: !0,
  optgroup: !0,
  option: !0,
  p: !0,
  rp: !0,
  rt: !0,
  tbody: !0,
  td: !0,
  tfoot: !0,
  th: !0,
  tr: !0
}, $f = {
  dd: { dd: !0, dt: !0 },
  dt: { dd: !0, dt: !0 },
  li: { li: !0 },
  option: { option: !0, optgroup: !0 },
  optgroup: { optgroup: !0 },
  p: {
    address: !0,
    article: !0,
    aside: !0,
    blockquote: !0,
    dir: !0,
    div: !0,
    dl: !0,
    fieldset: !0,
    footer: !0,
    form: !0,
    h1: !0,
    h2: !0,
    h3: !0,
    h4: !0,
    h5: !0,
    h6: !0,
    header: !0,
    hgroup: !0,
    hr: !0,
    menu: !0,
    nav: !0,
    ol: !0,
    p: !0,
    pre: !0,
    section: !0,
    table: !0,
    ul: !0
  },
  rp: { rp: !0, rt: !0 },
  rt: { rp: !0, rt: !0 },
  tbody: { tbody: !0, tfoot: !0 },
  td: { td: !0, th: !0 },
  tfoot: { tbody: !0 },
  th: { td: !0, th: !0 },
  thead: { tbody: !0, tfoot: !0 },
  tr: { tr: !0 }
};
function Yg(e) {
  return e == 45 || e == 46 || e == 58 || e >= 65 && e <= 90 || e == 95 || e >= 97 && e <= 122 || e >= 161;
}
function OO(e) {
  return e == 9 || e == 10 || e == 13 || e == 32;
}
let Yf = null, Ff = null, Wf = 0;
function El(e, t) {
  let r = e.pos + t;
  if (Wf == r && Ff == e)
    return Yf;
  let i = e.peek(t);
  for (; OO(i); )
    i = e.peek(++t);
  let n = "";
  for (; Yg(i); )
    n += String.fromCharCode(i), i = e.peek(++t);
  return Ff = e, Wf = r, Yf = n ? n.toLowerCase() : i == Fg || i == Wg ? void 0 : null;
}
const EO = 60, As = 62, Wu = 47, Fg = 63, Wg = 33, Xg = 45;
function Xf(e, t) {
  this.name = e, this.parent = t, this.hash = t ? t.hash : 0;
  for (let r = 0; r < e.length; r++)
    this.hash += (this.hash << 4) + e.charCodeAt(r) + (e.charCodeAt(r) << 8);
}
const jg = [Rs, cO, oO, lO, uO], Zg = new Qp({
  start: null,
  shift(e, t, r, i) {
    return jg.indexOf(t) > -1 ? new Xf(El(i, 1) || "", e) : e;
  },
  reduce(e, t) {
    return t == fO && e ? e.parent : e;
  },
  reuse(e, t, r, i) {
    let n = t.type.id;
    return n == Rs || n == kg ? new Xf(El(i, 1) || "", e) : e;
  },
  hash(e) {
    return e ? e.hash : 0;
  },
  strict: !1
}), Hg = new mr((e, t) => {
  if (e.next != EO) {
    e.next < 0 && t.context && e.acceptToken(xo);
    return;
  }
  e.advance();
  let r = e.next == Wu;
  r && e.advance();
  let i = El(e, 0);
  if (i === void 0)
    return;
  if (!i)
    return e.acceptToken(r ? Lg : Rs);
  let n = t.context ? t.context.name : null;
  if (r) {
    if (i == n)
      return e.acceptToken(bg);
    if (n && $g[n])
      return e.acceptToken(xo, -2);
    if (t.dialectEnabled(Gg))
      return e.acceptToken(vg);
    for (let a = t.context; a; a = a.parent)
      if (a.name == i)
        return;
    e.acceptToken(Cg);
  } else {
    if (i == "script")
      return e.acceptToken(oO);
    if (i == "style")
      return e.acceptToken(lO);
    if (i == "textarea")
      return e.acceptToken(uO);
    if (Bg.hasOwnProperty(i))
      return e.acceptToken(cO);
    n && $f[n] && $f[n][i] ? e.acceptToken(xo, -1) : e.acceptToken(Rs);
  }
}, { contextual: !0 }), zg = new mr((e) => {
  for (let t = 0, r = 0; ; r++) {
    if (e.next < 0) {
      r && e.acceptToken(Bf);
      break;
    }
    if (e.next == Xg)
      t++;
    else if (e.next == As && t >= 2) {
      r >= 3 && e.acceptToken(Bf, -2);
      break;
    } else
      t = 0;
    e.advance();
  }
});
function qg(e) {
  for (; e; e = e.parent)
    if (e.name == "svg" || e.name == "math")
      return !0;
  return !1;
}
const Jg = new mr((e, t) => {
  if (e.next == Wu && e.peek(1) == As) {
    let r = t.dialectEnabled(Vg) || qg(t.context);
    e.acceptToken(r ? _g : Vf, 2);
  } else
    e.next == As && e.acceptToken(Vf, 1);
});
function Xu(e, t, r) {
  let i = 2 + e.length;
  return new mr((n) => {
    for (let a = 0, s = 0, o = 0; ; o++) {
      if (n.next < 0) {
        o && n.acceptToken(t);
        break;
      }
      if (a == 0 && n.next == EO || a == 1 && n.next == Wu || a >= 2 && a < i && n.next == e.charCodeAt(a - 2))
        a++, s++;
      else if ((a == 2 || a == i) && OO(n.next))
        s++;
      else if (a == i && n.next == As) {
        o > s ? n.acceptToken(t, -s) : n.acceptToken(r, -(s - 2));
        break;
      } else if ((n.next == 10 || n.next == 13) && o) {
        n.acceptToken(t, 1);
        break;
      } else
        a = s = 0;
      n.advance();
    }
  });
}
const Kg = Xu("script", Ag, gg), ey = Xu("style", yg, Ig), ty = Xu("textarea", Ng, Pg), ry = An({
  "Text RawText": Q.content,
  "StartTag StartCloseTag SelfClosingEndTag EndTag": Q.angleBracket,
  TagName: Q.tagName,
  "MismatchedCloseTag/TagName": [Q.tagName, Q.invalid],
  AttributeName: Q.attributeName,
  "AttributeValue UnquotedAttributeValue": Q.attributeValue,
  Is: Q.definitionOperator,
  "EntityReference CharacterReference": Q.character,
  Comment: Q.blockComment,
  ProcessingInst: Q.processingInstruction,
  DoctypeDecl: Q.documentMeta
}), iy = Ri.deserialize({
  version: 14,
  states: ",xOVO!rOOO!WQ#tO'#CqO!]Q#tO'#CzO!bQ#tO'#C}O!gQ#tO'#DQO!lQ#tO'#DSO!qOaO'#CpO!|ObO'#CpO#XOdO'#CpO$eO!rO'#CpOOO`'#Cp'#CpO$lO$fO'#DTO$tQ#tO'#DVO$yQ#tO'#DWOOO`'#Dk'#DkOOO`'#DY'#DYQVO!rOOO%OQ&rO,59]O%ZQ&rO,59fO%fQ&rO,59iO%qQ&rO,59lO%|Q&rO,59nOOOa'#D^'#D^O&XOaO'#CxO&dOaO,59[OOOb'#D_'#D_O&lObO'#C{O&wObO,59[OOOd'#D`'#D`O'POdO'#DOO'[OdO,59[OOO`'#Da'#DaO'dO!rO,59[O'kQ#tO'#DROOO`,59[,59[OOOp'#Db'#DbO'pO$fO,59oOOO`,59o,59oO'xQ#|O,59qO'}Q#|O,59rOOO`-E7W-E7WO(SQ&rO'#CsOOQW'#DZ'#DZO(bQ&rO1G.wOOOa1G.w1G.wOOO`1G/Y1G/YO(mQ&rO1G/QOOOb1G/Q1G/QO(xQ&rO1G/TOOOd1G/T1G/TO)TQ&rO1G/WOOO`1G/W1G/WO)`Q&rO1G/YOOOa-E7[-E7[O)kQ#tO'#CyOOO`1G.v1G.vOOOb-E7]-E7]O)pQ#tO'#C|OOOd-E7^-E7^O)uQ#tO'#DPOOO`-E7_-E7_O)zQ#|O,59mOOOp-E7`-E7`OOO`1G/Z1G/ZOOO`1G/]1G/]OOO`1G/^1G/^O*PQ,UO,59_OOQW-E7X-E7XOOOa7+$c7+$cOOO`7+$t7+$tOOOb7+$l7+$lOOOd7+$o7+$oOOO`7+$r7+$rO*[Q#|O,59eO*aQ#|O,59hO*fQ#|O,59kOOO`1G/X1G/XO*kO7[O'#CvO*|OMhO'#CvOOQW1G.y1G.yOOO`1G/P1G/POOO`1G/S1G/SOOO`1G/V1G/VOOOO'#D['#D[O+_O7[O,59bOOQW,59b,59bOOOO'#D]'#D]O+pOMhO,59bOOOO-E7Y-E7YOOQW1G.|1G.|OOOO-E7Z-E7Z",
  stateData: ",]~O!^OS~OUSOVPOWQOXROYTO[]O][O^^O`^Oa^Ob^Oc^Ox^O{_O!dZO~OfaO~OfbO~OfcO~OfdO~OfeO~O!WfOPlP!ZlP~O!XiOQoP!ZoP~O!YlORrP!ZrP~OUSOVPOWQOXROYTOZqO[]O][O^^O`^Oa^Ob^Oc^Ox^O!dZO~O!ZrO~P#dO![sO!euO~OfvO~OfwO~OS|OT}OhyO~OS!POT}OhyO~OS!ROT}OhyO~OS!TOT}OhyO~OS}OT}OhyO~O!WfOPlX!ZlX~OP!WO!Z!XO~O!XiOQoX!ZoX~OQ!ZO!Z!XO~O!YlORrX!ZrX~OR!]O!Z!XO~O!Z!XO~P#dOf!_O~O![sO!e!aO~OS!bO~OS!cO~Oi!dOSgXTgXhgX~OS!fOT!gOhyO~OS!hOT!gOhyO~OS!iOT!gOhyO~OS!jOT!gOhyO~OS!gOT!gOhyO~Of!kO~Of!lO~Of!mO~OS!nO~Ok!qO!`!oO!b!pO~OS!rO~OS!sO~OS!tO~Oa!uOb!uOc!uO!`!wO!a!uO~Oa!xOb!xOc!xO!b!wO!c!xO~Oa!uOb!uOc!uO!`!{O!a!uO~Oa!xOb!xOc!xO!b!{O!c!xO~OT~bac!dx{!d~",
  goto: "%p!`PPPPPPPPPPPPPPPPPPPP!a!gP!mPP!yP!|#P#S#Y#]#`#f#i#l#r#x!aP!a!aP$O$U$l$r$x%O%U%[%bPPPPPPPP%hX^OX`pXUOX`pezabcde{!O!Q!S!UR!q!dRhUR!XhXVOX`pRkVR!XkXWOX`pRnWR!XnXXOX`pQrXR!XpXYOX`pQ`ORx`Q{aQ!ObQ!QcQ!SdQ!UeZ!e{!O!Q!S!UQ!v!oR!z!vQ!y!pR!|!yQgUR!VgQjVR!YjQmWR![mQpXR!^pQtZR!`tS_O`ToXp",
  nodeNames: "⚠ StartCloseTag StartCloseTag StartCloseTag EndTag SelfClosingEndTag StartTag StartTag StartTag StartTag StartTag StartCloseTag StartCloseTag StartCloseTag IncompleteCloseTag Document Text EntityReference CharacterReference InvalidEntity Element OpenTag TagName Attribute AttributeName Is AttributeValue UnquotedAttributeValue ScriptText CloseTag OpenTag StyleText CloseTag OpenTag TextareaText CloseTag OpenTag CloseTag SelfClosingTag Comment ProcessingInst MismatchedCloseTag CloseTag DoctypeDecl",
  maxTerm: 67,
  context: Zg,
  nodeProps: [
    ["closedBy", -10, 1, 2, 3, 7, 8, 9, 10, 11, 12, 13, "EndTag", 6, "EndTag SelfClosingEndTag", -4, 21, 30, 33, 36, "CloseTag"],
    ["openedBy", 4, "StartTag StartCloseTag", 5, "StartTag", -4, 29, 32, 35, 37, "OpenTag"],
    ["group", -9, 14, 17, 18, 19, 20, 39, 40, 41, 42, "Entity", 16, "Entity TextContent", -3, 28, 31, 34, "TextContent Entity"],
    ["isolate", -11, 21, 29, 30, 32, 33, 35, 36, 37, 38, 41, 42, "ltr", -3, 26, 27, 39, ""]
  ],
  propSources: [ry],
  skippedNodes: [0],
  repeatNodeCount: 9,
  tokenData: "!<p!aR!YOX$qXY,QYZ,QZ[$q[]&X]^,Q^p$qpq,Qqr-_rs3_sv-_vw3}wxHYx}-_}!OH{!O!P-_!P!Q$q!Q![-_![!]Mz!]!^-_!^!_!$S!_!`!;x!`!a&X!a!c-_!c!}Mz!}#R-_#R#SMz#S#T1k#T#oMz#o#s-_#s$f$q$f%W-_%W%oMz%o%p-_%p&aMz&a&b-_&b1pMz1p4U-_4U4dMz4d4e-_4e$ISMz$IS$I`-_$I`$IbMz$Ib$Kh-_$Kh%#tMz%#t&/x-_&/x&EtMz&Et&FV-_&FV;'SMz;'S;:j!#|;:j;=`3X<%l?&r-_?&r?AhMz?Ah?BY$q?BY?MnMz?MnO$q!Z$|c`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr$qrs&}sv$qvw+Pwx(tx!^$q!^!_*V!_!a&X!a#S$q#S#T&X#T;'S$q;'S;=`+z<%lO$q!R&bX`P!a`!cpOr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&Xq'UV`P!cpOv&}wx'kx!^&}!^!_(V!_;'S&};'S;=`(n<%lO&}P'pT`POv'kw!^'k!_;'S'k;'S;=`(P<%lO'kP(SP;=`<%l'kp([S!cpOv(Vx;'S(V;'S;=`(h<%lO(Vp(kP;=`<%l(Vq(qP;=`<%l&}a({W`P!a`Or(trs'ksv(tw!^(t!^!_)e!_;'S(t;'S;=`*P<%lO(t`)jT!a`Or)esv)ew;'S)e;'S;=`)y<%lO)e`)|P;=`<%l)ea*SP;=`<%l(t!Q*^V!a`!cpOr*Vrs(Vsv*Vwx)ex;'S*V;'S;=`*s<%lO*V!Q*vP;=`<%l*V!R*|P;=`<%l&XW+UYkWOX+PZ[+P^p+Pqr+Psw+Px!^+P!a#S+P#T;'S+P;'S;=`+t<%lO+PW+wP;=`<%l+P!Z+}P;=`<%l$q!a,]``P!a`!cp!^^OX&XXY,QYZ,QZ]&X]^,Q^p&Xpq,Qqr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&X!_-ljhS`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx!P-_!P!Q$q!Q!^-_!^!_*V!_!a&X!a#S-_#S#T1k#T#s-_#s$f$q$f;'S-_;'S;=`3X<%l?Ah-_?Ah?BY$q?BY?Mn-_?MnO$q[/ebhSkWOX+PZ[+P^p+Pqr/^sw/^x!P/^!P!Q+P!Q!^/^!a#S/^#S#T0m#T#s/^#s$f+P$f;'S/^;'S;=`1e<%l?Ah/^?Ah?BY+P?BY?Mn/^?MnO+PS0rXhSqr0msw0mx!P0m!Q!^0m!a#s0m$f;'S0m;'S;=`1_<%l?Ah0m?BY?Mn0mS1bP;=`<%l0m[1hP;=`<%l/^!V1vchS`P!a`!cpOq&Xqr1krs&}sv1kvw0mwx(tx!P1k!P!Q&X!Q!^1k!^!_*V!_!a&X!a#s1k#s$f&X$f;'S1k;'S;=`3R<%l?Ah1k?Ah?BY&X?BY?Mn1k?MnO&X!V3UP;=`<%l1k!_3[P;=`<%l-_!Z3hV!`h`P!cpOv&}wx'kx!^&}!^!_(V!_;'S&};'S;=`(n<%lO&}!_4WihSkWc!ROX5uXZ7SZ[5u[^7S^p5uqr8trs7Sst>]tw8twx7Sx!P8t!P!Q5u!Q!]8t!]!^/^!^!a7S!a#S8t#S#T;{#T#s8t#s$f5u$f;'S8t;'S;=`>V<%l?Ah8t?Ah?BY5u?BY?Mn8t?MnO5u!Z5zbkWOX5uXZ7SZ[5u[^7S^p5uqr5urs7Sst+Ptw5uwx7Sx!]5u!]!^7w!^!a7S!a#S5u#S#T7S#T;'S5u;'S;=`8n<%lO5u!R7VVOp7Sqs7St!]7S!]!^7l!^;'S7S;'S;=`7q<%lO7S!R7qOa!R!R7tP;=`<%l7S!Z8OYkWa!ROX+PZ[+P^p+Pqr+Psw+Px!^+P!a#S+P#T;'S+P;'S;=`+t<%lO+P!Z8qP;=`<%l5u!_8{ihSkWOX5uXZ7SZ[5u[^7S^p5uqr8trs7Sst/^tw8twx7Sx!P8t!P!Q5u!Q!]8t!]!^:j!^!a7S!a#S8t#S#T;{#T#s8t#s$f5u$f;'S8t;'S;=`>V<%l?Ah8t?Ah?BY5u?BY?Mn8t?MnO5u!_:sbhSkWa!ROX+PZ[+P^p+Pqr/^sw/^x!P/^!P!Q+P!Q!^/^!a#S/^#S#T0m#T#s/^#s$f+P$f;'S/^;'S;=`1e<%l?Ah/^?Ah?BY+P?BY?Mn/^?MnO+P!V<QchSOp7Sqr;{rs7Sst0mtw;{wx7Sx!P;{!P!Q7S!Q!];{!]!^=]!^!a7S!a#s;{#s$f7S$f;'S;{;'S;=`>P<%l?Ah;{?Ah?BY7S?BY?Mn;{?MnO7S!V=dXhSa!Rqr0msw0mx!P0m!Q!^0m!a#s0m$f;'S0m;'S;=`1_<%l?Ah0m?BY?Mn0m!V>SP;=`<%l;{!_>YP;=`<%l8t!_>dhhSkWOX@OXZAYZ[@O[^AY^p@OqrBwrsAYswBwwxAYx!PBw!P!Q@O!Q!]Bw!]!^/^!^!aAY!a#SBw#S#TE{#T#sBw#s$f@O$f;'SBw;'S;=`HS<%l?AhBw?Ah?BY@O?BY?MnBw?MnO@O!Z@TakWOX@OXZAYZ[@O[^AY^p@Oqr@OrsAYsw@OwxAYx!]@O!]!^Az!^!aAY!a#S@O#S#TAY#T;'S@O;'S;=`Bq<%lO@O!RA]UOpAYq!]AY!]!^Ao!^;'SAY;'S;=`At<%lOAY!RAtOb!R!RAwP;=`<%lAY!ZBRYkWb!ROX+PZ[+P^p+Pqr+Psw+Px!^+P!a#S+P#T;'S+P;'S;=`+t<%lO+P!ZBtP;=`<%l@O!_COhhSkWOX@OXZAYZ[@O[^AY^p@OqrBwrsAYswBwwxAYx!PBw!P!Q@O!Q!]Bw!]!^Dj!^!aAY!a#SBw#S#TE{#T#sBw#s$f@O$f;'SBw;'S;=`HS<%l?AhBw?Ah?BY@O?BY?MnBw?MnO@O!_DsbhSkWb!ROX+PZ[+P^p+Pqr/^sw/^x!P/^!P!Q+P!Q!^/^!a#S/^#S#T0m#T#s/^#s$f+P$f;'S/^;'S;=`1e<%l?Ah/^?Ah?BY+P?BY?Mn/^?MnO+P!VFQbhSOpAYqrE{rsAYswE{wxAYx!PE{!P!QAY!Q!]E{!]!^GY!^!aAY!a#sE{#s$fAY$f;'SE{;'S;=`G|<%l?AhE{?Ah?BYAY?BY?MnE{?MnOAY!VGaXhSb!Rqr0msw0mx!P0m!Q!^0m!a#s0m$f;'S0m;'S;=`1_<%l?Ah0m?BY?Mn0m!VHPP;=`<%lE{!_HVP;=`<%lBw!ZHcW!bx`P!a`Or(trs'ksv(tw!^(t!^!_)e!_;'S(t;'S;=`*P<%lO(t!aIYlhS`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx}-_}!OKQ!O!P-_!P!Q$q!Q!^-_!^!_*V!_!a&X!a#S-_#S#T1k#T#s-_#s$f$q$f;'S-_;'S;=`3X<%l?Ah-_?Ah?BY$q?BY?Mn-_?MnO$q!aK_khS`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx!P-_!P!Q$q!Q!^-_!^!_*V!_!`&X!`!aMS!a#S-_#S#T1k#T#s-_#s$f$q$f;'S-_;'S;=`3X<%l?Ah-_?Ah?BY$q?BY?Mn-_?MnO$q!TM_X`P!a`!cp!eQOr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&X!aNZ!ZhSfQ`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx}-_}!OMz!O!PMz!P!Q$q!Q![Mz![!]Mz!]!^-_!^!_*V!_!a&X!a!c-_!c!}Mz!}#R-_#R#SMz#S#T1k#T#oMz#o#s-_#s$f$q$f$}-_$}%OMz%O%W-_%W%oMz%o%p-_%p&aMz&a&b-_&b1pMz1p4UMz4U4dMz4d4e-_4e$ISMz$IS$I`-_$I`$IbMz$Ib$Je-_$Je$JgMz$Jg$Kh-_$Kh%#tMz%#t&/x-_&/x&EtMz&Et&FV-_&FV;'SMz;'S;:j!#|;:j;=`3X<%l?&r-_?&r?AhMz?Ah?BY$q?BY?MnMz?MnO$q!a!$PP;=`<%lMz!R!$ZY!a`!cpOq*Vqr!$yrs(Vsv*Vwx)ex!a*V!a!b!4t!b;'S*V;'S;=`*s<%lO*V!R!%Q]!a`!cpOr*Vrs(Vsv*Vwx)ex}*V}!O!%y!O!f*V!f!g!']!g#W*V#W#X!0`#X;'S*V;'S;=`*s<%lO*V!R!&QX!a`!cpOr*Vrs(Vsv*Vwx)ex}*V}!O!&m!O;'S*V;'S;=`*s<%lO*V!R!&vV!a`!cp!dPOr*Vrs(Vsv*Vwx)ex;'S*V;'S;=`*s<%lO*V!R!'dX!a`!cpOr*Vrs(Vsv*Vwx)ex!q*V!q!r!(P!r;'S*V;'S;=`*s<%lO*V!R!(WX!a`!cpOr*Vrs(Vsv*Vwx)ex!e*V!e!f!(s!f;'S*V;'S;=`*s<%lO*V!R!(zX!a`!cpOr*Vrs(Vsv*Vwx)ex!v*V!v!w!)g!w;'S*V;'S;=`*s<%lO*V!R!)nX!a`!cpOr*Vrs(Vsv*Vwx)ex!{*V!{!|!*Z!|;'S*V;'S;=`*s<%lO*V!R!*bX!a`!cpOr*Vrs(Vsv*Vwx)ex!r*V!r!s!*}!s;'S*V;'S;=`*s<%lO*V!R!+UX!a`!cpOr*Vrs(Vsv*Vwx)ex!g*V!g!h!+q!h;'S*V;'S;=`*s<%lO*V!R!+xY!a`!cpOr!+qrs!,hsv!+qvw!-Swx!.[x!`!+q!`!a!/j!a;'S!+q;'S;=`!0Y<%lO!+qq!,mV!cpOv!,hvx!-Sx!`!,h!`!a!-q!a;'S!,h;'S;=`!.U<%lO!,hP!-VTO!`!-S!`!a!-f!a;'S!-S;'S;=`!-k<%lO!-SP!-kO{PP!-nP;=`<%l!-Sq!-xS!cp{POv(Vx;'S(V;'S;=`(h<%lO(Vq!.XP;=`<%l!,ha!.aX!a`Or!.[rs!-Ssv!.[vw!-Sw!`!.[!`!a!.|!a;'S!.[;'S;=`!/d<%lO!.[a!/TT!a`{POr)esv)ew;'S)e;'S;=`)y<%lO)ea!/gP;=`<%l!.[!R!/sV!a`!cp{POr*Vrs(Vsv*Vwx)ex;'S*V;'S;=`*s<%lO*V!R!0]P;=`<%l!+q!R!0gX!a`!cpOr*Vrs(Vsv*Vwx)ex#c*V#c#d!1S#d;'S*V;'S;=`*s<%lO*V!R!1ZX!a`!cpOr*Vrs(Vsv*Vwx)ex#V*V#V#W!1v#W;'S*V;'S;=`*s<%lO*V!R!1}X!a`!cpOr*Vrs(Vsv*Vwx)ex#h*V#h#i!2j#i;'S*V;'S;=`*s<%lO*V!R!2qX!a`!cpOr*Vrs(Vsv*Vwx)ex#m*V#m#n!3^#n;'S*V;'S;=`*s<%lO*V!R!3eX!a`!cpOr*Vrs(Vsv*Vwx)ex#d*V#d#e!4Q#e;'S*V;'S;=`*s<%lO*V!R!4XX!a`!cpOr*Vrs(Vsv*Vwx)ex#X*V#X#Y!+q#Y;'S*V;'S;=`*s<%lO*V!R!4{Y!a`!cpOr!4trs!5ksv!4tvw!6Vwx!8]x!a!4t!a!b!:]!b;'S!4t;'S;=`!;r<%lO!4tq!5pV!cpOv!5kvx!6Vx!a!5k!a!b!7W!b;'S!5k;'S;=`!8V<%lO!5kP!6YTO!a!6V!a!b!6i!b;'S!6V;'S;=`!7Q<%lO!6VP!6lTO!`!6V!`!a!6{!a;'S!6V;'S;=`!7Q<%lO!6VP!7QOxPP!7TP;=`<%l!6Vq!7]V!cpOv!5kvx!6Vx!`!5k!`!a!7r!a;'S!5k;'S;=`!8V<%lO!5kq!7yS!cpxPOv(Vx;'S(V;'S;=`(h<%lO(Vq!8YP;=`<%l!5ka!8bX!a`Or!8]rs!6Vsv!8]vw!6Vw!a!8]!a!b!8}!b;'S!8];'S;=`!:V<%lO!8]a!9SX!a`Or!8]rs!6Vsv!8]vw!6Vw!`!8]!`!a!9o!a;'S!8];'S;=`!:V<%lO!8]a!9vT!a`xPOr)esv)ew;'S)e;'S;=`)y<%lO)ea!:YP;=`<%l!8]!R!:dY!a`!cpOr!4trs!5ksv!4tvw!6Vwx!8]x!`!4t!`!a!;S!a;'S!4t;'S;=`!;r<%lO!4t!R!;]V!a`!cpxPOr*Vrs(Vsv*Vwx)ex;'S*V;'S;=`*s<%lO*V!R!;uP;=`<%l!4t!V!<TXiS`P!a`!cpOr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&X",
  tokenizers: [Kg, ey, ty, Jg, Hg, zg, 0, 1, 2, 3, 4, 5],
  topRules: { Document: [0, 15] },
  dialects: { noMatch: 0, selfClosing: 509 },
  tokenPrec: 511
});
function dO(e, t) {
  let r = /* @__PURE__ */ Object.create(null);
  for (let i of e.getChildren(hO)) {
    let n = i.getChild(Dg), a = i.getChild(Ol) || i.getChild(pO);
    n && (r[t.read(n.from, n.to)] = a ? a.type.id == Ol ? t.read(a.from + 1, a.to - 1) : t.read(a.from, a.to) : "");
  }
  return r;
}
function jf(e, t) {
  let r = e.getChild(xg);
  return r ? t.read(r.from, r.to) : " ";
}
function Do(e, t, r) {
  let i;
  for (let n of r)
    if (!n.attrs || n.attrs(i || (i = dO(e.node.parent.firstChild, t))))
      return { parser: n.parser };
  return null;
}
function TO(e = [], t = []) {
  let r = [], i = [], n = [], a = [];
  for (let o of e)
    (o.tag == "script" ? r : o.tag == "style" ? i : o.tag == "textarea" ? n : a).push(o);
  let s = t.length ? /* @__PURE__ */ Object.create(null) : null;
  for (let o of t)
    (s[o.name] || (s[o.name] = [])).push(o);
  return TS((o, l) => {
    let c = o.type.id;
    if (c == Ug)
      return Do(o, l, r);
    if (c == wg)
      return Do(o, l, i);
    if (c == Mg)
      return Do(o, l, n);
    if (c == fO && a.length) {
      let f = o.node, p = f.firstChild, O = p && jf(p, l), d;
      if (O) {
        for (let g of a)
          if (g.tag == O && (!g.attrs || g.attrs(d || (d = dO(f, l))))) {
            let L = f.lastChild, D = L.type.id == Qg ? L.from : f.to;
            if (D > p.to)
              return { parser: g.parser, overlay: [{ from: p.to, to: D }] };
          }
      }
    }
    if (s && c == hO) {
      let f = o.node, p;
      if (p = f.firstChild) {
        let O = s[l.read(p.from, p.to)];
        if (O)
          for (let d of O) {
            if (d.tagName && d.tagName != jf(f.parent, l))
              continue;
            let g = f.lastChild;
            if (g.type.id == Ol) {
              let L = g.from + 1, D = g.lastChild, W = g.to - (D && D.isError ? 0 : 1);
              if (W > L)
                return { parser: d.parser, overlay: [{ from: L, to: W }] };
            } else if (g.type.id == pO)
              return { parser: d.parser, overlay: [{ from: g.from, to: g.to }] };
          }
      }
    }
    return null;
  });
}
const Mn = ["_blank", "_self", "_top", "_parent"], Uo = ["ascii", "utf-8", "utf-16", "latin1", "latin1"], wo = ["get", "post", "put", "delete"], Mo = ["application/x-www-form-urlencoded", "multipart/form-data", "text/plain"], rr = ["true", "false"], Oe = {}, ny = {
  a: {
    attrs: {
      href: null,
      ping: null,
      type: null,
      media: null,
      target: Mn,
      hreflang: null
    }
  },
  abbr: Oe,
  address: Oe,
  area: {
    attrs: {
      alt: null,
      coords: null,
      href: null,
      target: null,
      ping: null,
      media: null,
      hreflang: null,
      type: null,
      shape: ["default", "rect", "circle", "poly"]
    }
  },
  article: Oe,
  aside: Oe,
  audio: {
    attrs: {
      src: null,
      mediagroup: null,
      crossorigin: ["anonymous", "use-credentials"],
      preload: ["none", "metadata", "auto"],
      autoplay: ["autoplay"],
      loop: ["loop"],
      controls: ["controls"]
    }
  },
  b: Oe,
  base: { attrs: { href: null, target: Mn } },
  bdi: Oe,
  bdo: Oe,
  blockquote: { attrs: { cite: null } },
  body: Oe,
  br: Oe,
  button: {
    attrs: {
      form: null,
      formaction: null,
      name: null,
      value: null,
      autofocus: ["autofocus"],
      disabled: ["autofocus"],
      formenctype: Mo,
      formmethod: wo,
      formnovalidate: ["novalidate"],
      formtarget: Mn,
      type: ["submit", "reset", "button"]
    }
  },
  canvas: { attrs: { width: null, height: null } },
  caption: Oe,
  center: Oe,
  cite: Oe,
  code: Oe,
  col: { attrs: { span: null } },
  colgroup: { attrs: { span: null } },
  command: {
    attrs: {
      type: ["command", "checkbox", "radio"],
      label: null,
      icon: null,
      radiogroup: null,
      command: null,
      title: null,
      disabled: ["disabled"],
      checked: ["checked"]
    }
  },
  data: { attrs: { value: null } },
  datagrid: { attrs: { disabled: ["disabled"], multiple: ["multiple"] } },
  datalist: { attrs: { data: null } },
  dd: Oe,
  del: { attrs: { cite: null, datetime: null } },
  details: { attrs: { open: ["open"] } },
  dfn: Oe,
  div: Oe,
  dl: Oe,
  dt: Oe,
  em: Oe,
  embed: { attrs: { src: null, type: null, width: null, height: null } },
  eventsource: { attrs: { src: null } },
  fieldset: { attrs: { disabled: ["disabled"], form: null, name: null } },
  figcaption: Oe,
  figure: Oe,
  footer: Oe,
  form: {
    attrs: {
      action: null,
      name: null,
      "accept-charset": Uo,
      autocomplete: ["on", "off"],
      enctype: Mo,
      method: wo,
      novalidate: ["novalidate"],
      target: Mn
    }
  },
  h1: Oe,
  h2: Oe,
  h3: Oe,
  h4: Oe,
  h5: Oe,
  h6: Oe,
  head: {
    children: ["title", "base", "link", "style", "meta", "script", "noscript", "command"]
  },
  header: Oe,
  hgroup: Oe,
  hr: Oe,
  html: {
    attrs: { manifest: null }
  },
  i: Oe,
  iframe: {
    attrs: {
      src: null,
      srcdoc: null,
      name: null,
      width: null,
      height: null,
      sandbox: ["allow-top-navigation", "allow-same-origin", "allow-forms", "allow-scripts"],
      seamless: ["seamless"]
    }
  },
  img: {
    attrs: {
      alt: null,
      src: null,
      ismap: null,
      usemap: null,
      width: null,
      height: null,
      crossorigin: ["anonymous", "use-credentials"]
    }
  },
  input: {
    attrs: {
      alt: null,
      dirname: null,
      form: null,
      formaction: null,
      height: null,
      list: null,
      max: null,
      maxlength: null,
      min: null,
      name: null,
      pattern: null,
      placeholder: null,
      size: null,
      src: null,
      step: null,
      value: null,
      width: null,
      accept: ["audio/*", "video/*", "image/*"],
      autocomplete: ["on", "off"],
      autofocus: ["autofocus"],
      checked: ["checked"],
      disabled: ["disabled"],
      formenctype: Mo,
      formmethod: wo,
      formnovalidate: ["novalidate"],
      formtarget: Mn,
      multiple: ["multiple"],
      readonly: ["readonly"],
      required: ["required"],
      type: [
        "hidden",
        "text",
        "search",
        "tel",
        "url",
        "email",
        "password",
        "datetime",
        "date",
        "month",
        "week",
        "time",
        "datetime-local",
        "number",
        "range",
        "color",
        "checkbox",
        "radio",
        "file",
        "submit",
        "image",
        "reset",
        "button"
      ]
    }
  },
  ins: { attrs: { cite: null, datetime: null } },
  kbd: Oe,
  keygen: {
    attrs: {
      challenge: null,
      form: null,
      name: null,
      autofocus: ["autofocus"],
      disabled: ["disabled"],
      keytype: ["RSA"]
    }
  },
  label: { attrs: { for: null, form: null } },
  legend: Oe,
  li: { attrs: { value: null } },
  link: {
    attrs: {
      href: null,
      type: null,
      hreflang: null,
      media: null,
      sizes: ["all", "16x16", "16x16 32x32", "16x16 32x32 64x64"]
    }
  },
  map: { attrs: { name: null } },
  mark: Oe,
  menu: { attrs: { label: null, type: ["list", "context", "toolbar"] } },
  meta: {
    attrs: {
      content: null,
      charset: Uo,
      name: ["viewport", "application-name", "author", "description", "generator", "keywords"],
      "http-equiv": ["content-language", "content-type", "default-style", "refresh"]
    }
  },
  meter: { attrs: { value: null, min: null, low: null, high: null, max: null, optimum: null } },
  nav: Oe,
  noscript: Oe,
  object: {
    attrs: {
      data: null,
      type: null,
      name: null,
      usemap: null,
      form: null,
      width: null,
      height: null,
      typemustmatch: ["typemustmatch"]
    }
  },
  ol: {
    attrs: { reversed: ["reversed"], start: null, type: ["1", "a", "A", "i", "I"] },
    children: ["li", "script", "template", "ul", "ol"]
  },
  optgroup: { attrs: { disabled: ["disabled"], label: null } },
  option: { attrs: { disabled: ["disabled"], label: null, selected: ["selected"], value: null } },
  output: { attrs: { for: null, form: null, name: null } },
  p: Oe,
  param: { attrs: { name: null, value: null } },
  pre: Oe,
  progress: { attrs: { value: null, max: null } },
  q: { attrs: { cite: null } },
  rp: Oe,
  rt: Oe,
  ruby: Oe,
  samp: Oe,
  script: {
    attrs: {
      type: ["text/javascript"],
      src: null,
      async: ["async"],
      defer: ["defer"],
      charset: Uo
    }
  },
  section: Oe,
  select: {
    attrs: {
      form: null,
      name: null,
      size: null,
      autofocus: ["autofocus"],
      disabled: ["disabled"],
      multiple: ["multiple"]
    }
  },
  slot: { attrs: { name: null } },
  small: Oe,
  source: { attrs: { src: null, type: null, media: null } },
  span: Oe,
  strong: Oe,
  style: {
    attrs: {
      type: ["text/css"],
      media: null,
      scoped: null
    }
  },
  sub: Oe,
  summary: Oe,
  sup: Oe,
  table: Oe,
  tbody: Oe,
  td: { attrs: { colspan: null, rowspan: null, headers: null } },
  template: Oe,
  textarea: {
    attrs: {
      dirname: null,
      form: null,
      maxlength: null,
      name: null,
      placeholder: null,
      rows: null,
      cols: null,
      autofocus: ["autofocus"],
      disabled: ["disabled"],
      readonly: ["readonly"],
      required: ["required"],
      wrap: ["soft", "hard"]
    }
  },
  tfoot: Oe,
  th: { attrs: { colspan: null, rowspan: null, headers: null, scope: ["row", "col", "rowgroup", "colgroup"] } },
  thead: Oe,
  time: { attrs: { datetime: null } },
  title: Oe,
  tr: Oe,
  track: {
    attrs: {
      src: null,
      label: null,
      default: null,
      kind: ["subtitles", "captions", "descriptions", "chapters", "metadata"],
      srclang: null
    }
  },
  ul: { children: ["li", "script", "template", "ul", "ol"] },
  var: Oe,
  video: {
    attrs: {
      src: null,
      poster: null,
      width: null,
      height: null,
      crossorigin: ["anonymous", "use-credentials"],
      preload: ["auto", "metadata", "none"],
      autoplay: ["autoplay"],
      mediagroup: ["movie"],
      muted: ["muted"],
      controls: ["controls"]
    }
  },
  wbr: Oe
}, SO = {
  accesskey: null,
  class: null,
  contenteditable: rr,
  contextmenu: null,
  dir: ["ltr", "rtl", "auto"],
  draggable: ["true", "false", "auto"],
  dropzone: ["copy", "move", "link", "string:", "file:"],
  hidden: ["hidden"],
  id: null,
  inert: ["inert"],
  itemid: null,
  itemprop: null,
  itemref: null,
  itemscope: ["itemscope"],
  itemtype: null,
  lang: ["ar", "bn", "de", "en-GB", "en-US", "es", "fr", "hi", "id", "ja", "pa", "pt", "ru", "tr", "zh"],
  spellcheck: rr,
  autocorrect: rr,
  autocapitalize: rr,
  style: null,
  tabindex: null,
  title: null,
  translate: ["yes", "no"],
  rel: ["stylesheet", "alternate", "author", "bookmark", "help", "license", "next", "nofollow", "noreferrer", "prefetch", "prev", "search", "tag"],
  role: /* @__PURE__ */ "alert application article banner button cell checkbox complementary contentinfo dialog document feed figure form grid gridcell heading img list listbox listitem main navigation region row rowgroup search switch tab table tabpanel textbox timer".split(" "),
  "aria-activedescendant": null,
  "aria-atomic": rr,
  "aria-autocomplete": ["inline", "list", "both", "none"],
  "aria-busy": rr,
  "aria-checked": ["true", "false", "mixed", "undefined"],
  "aria-controls": null,
  "aria-describedby": null,
  "aria-disabled": rr,
  "aria-dropeffect": null,
  "aria-expanded": ["true", "false", "undefined"],
  "aria-flowto": null,
  "aria-grabbed": ["true", "false", "undefined"],
  "aria-haspopup": rr,
  "aria-hidden": rr,
  "aria-invalid": ["true", "false", "grammar", "spelling"],
  "aria-label": null,
  "aria-labelledby": null,
  "aria-level": null,
  "aria-live": ["off", "polite", "assertive"],
  "aria-multiline": rr,
  "aria-multiselectable": rr,
  "aria-owns": null,
  "aria-posinset": null,
  "aria-pressed": ["true", "false", "mixed", "undefined"],
  "aria-readonly": rr,
  "aria-relevant": null,
  "aria-required": rr,
  "aria-selected": ["true", "false", "undefined"],
  "aria-setsize": null,
  "aria-sort": ["ascending", "descending", "none", "other"],
  "aria-valuemax": null,
  "aria-valuemin": null,
  "aria-valuenow": null,
  "aria-valuetext": null
}, mO = /* @__PURE__ */ "beforeunload copy cut dragstart dragover dragleave dragenter dragend drag paste focus blur change click load mousedown mouseenter mouseleave mouseup keydown keyup resize scroll unload".split(" ").map((e) => "on" + e);
for (let e of mO)
  SO[e] = null;
class gs {
  constructor(t, r) {
    this.tags = Object.assign(Object.assign({}, ny), t), this.globalAttrs = Object.assign(Object.assign({}, SO), r), this.allTags = Object.keys(this.tags), this.globalAttrNames = Object.keys(this.globalAttrs);
  }
}
gs.default = /* @__PURE__ */ new gs();
function fn(e, t, r = e.length) {
  if (!t)
    return "";
  let i = t.firstChild, n = i && i.getChild("TagName");
  return n ? e.sliceString(n.from, Math.min(n.to, r)) : "";
}
function hn(e, t = !1) {
  for (; e; e = e.parent)
    if (e.name == "Element")
      if (t)
        t = !1;
      else
        return e;
  return null;
}
function RO(e, t, r) {
  let i = r.tags[fn(e, hn(t))];
  return (i == null ? void 0 : i.children) || r.allTags;
}
function ju(e, t) {
  let r = [];
  for (let i = hn(t); i && !i.type.isTop; i = hn(i.parent)) {
    let n = fn(e, i);
    if (n && i.lastChild.name == "CloseTag")
      break;
    n && r.indexOf(n) < 0 && (t.name == "EndTag" || t.from >= i.firstChild.to) && r.push(n);
  }
  return r;
}
const AO = /^[:\-\.\w\u00b7-\uffff]*$/;
function Zf(e, t, r, i, n) {
  let a = /\s*>/.test(e.sliceDoc(n, n + 5)) ? "" : ">", s = hn(r, !0);
  return {
    from: i,
    to: n,
    options: RO(e.doc, s, t).map((o) => ({ label: o, type: "type" })).concat(ju(e.doc, r).map((o, l) => ({
      label: "/" + o,
      apply: "/" + o + a,
      type: "type",
      boost: 99 - l
    }))),
    validFor: /^\/?[:\-\.\w\u00b7-\uffff]*$/
  };
}
function Hf(e, t, r, i) {
  let n = /\s*>/.test(e.sliceDoc(i, i + 5)) ? "" : ">";
  return {
    from: r,
    to: i,
    options: ju(e.doc, t).map((a, s) => ({ label: a, apply: a + n, type: "type", boost: 99 - s })),
    validFor: AO
  };
}
function ay(e, t, r, i) {
  let n = [], a = 0;
  for (let s of RO(e.doc, r, t))
    n.push({ label: "<" + s, type: "type" });
  for (let s of ju(e.doc, r))
    n.push({ label: "</" + s + ">", type: "type", boost: 99 - a++ });
  return { from: i, to: i, options: n, validFor: /^<\/?[:\-\.\w\u00b7-\uffff]*$/ };
}
function sy(e, t, r, i, n) {
  let a = hn(r), s = a ? t.tags[fn(e.doc, a)] : null, o = s && s.attrs ? Object.keys(s.attrs) : [], l = s && s.globalAttrs === !1 ? o : o.length ? o.concat(t.globalAttrNames) : t.globalAttrNames;
  return {
    from: i,
    to: n,
    options: l.map((c) => ({ label: c, type: "property" })),
    validFor: AO
  };
}
function oy(e, t, r, i, n) {
  var a;
  let s = (a = r.parent) === null || a === void 0 ? void 0 : a.getChild("AttributeName"), o = [], l;
  if (s) {
    let c = e.sliceDoc(s.from, s.to), f = t.globalAttrs[c];
    if (!f) {
      let p = hn(r), O = p ? t.tags[fn(e.doc, p)] : null;
      f = (O == null ? void 0 : O.attrs) && O.attrs[c];
    }
    if (f) {
      let p = e.sliceDoc(i, n).toLowerCase(), O = '"', d = '"';
      /^['"]/.test(p) ? (l = p[0] == '"' ? /^[^"]*$/ : /^[^']*$/, O = "", d = e.sliceDoc(n, n + 1) == p[0] ? "" : p[0], p = p.slice(1), i++) : l = /^[^\s<>='"]*$/;
      for (let g of f)
        o.push({ label: g, apply: O + g + d, type: "constant" });
    }
  }
  return { from: i, to: n, options: o, validFor: l };
}
function ly(e, t) {
  let { state: r, pos: i } = t, n = Ot(r).resolveInner(i, -1), a = n.resolve(i);
  for (let s = i, o; a == n && (o = n.childBefore(s)); ) {
    let l = o.lastChild;
    if (!l || !l.type.isError || l.from < l.to)
      break;
    a = n = o, s = l.from;
  }
  return n.name == "TagName" ? n.parent && /CloseTag$/.test(n.parent.name) ? Hf(r, n, n.from, i) : Zf(r, e, n, n.from, i) : n.name == "StartTag" ? Zf(r, e, n, i, i) : n.name == "StartCloseTag" || n.name == "IncompleteCloseTag" ? Hf(r, n, i, i) : n.name == "OpenTag" || n.name == "SelfClosingTag" || n.name == "AttributeName" ? sy(r, e, n, n.name == "AttributeName" ? n.from : i, i) : n.name == "Is" || n.name == "AttributeValue" || n.name == "UnquotedAttributeValue" ? oy(r, e, n, n.name == "Is" ? i : n.from, i) : t.explicit && (a.name == "Element" || a.name == "Text" || a.name == "Document") ? ay(r, e, n, i) : null;
}
function uy(e) {
  let { extraTags: t, extraGlobalAttributes: r } = e, i = r || t ? new gs(t, r) : gs.default;
  return (n) => ly(i, n);
}
const cy = /* @__PURE__ */ Cr.parser.configure({ top: "SingleExpression" }), gO = [
  {
    tag: "script",
    attrs: (e) => e.type == "text/typescript" || e.lang == "ts",
    parser: Wp.parser
  },
  {
    tag: "script",
    attrs: (e) => e.type == "text/babel" || e.type == "text/jsx",
    parser: Xp.parser
  },
  {
    tag: "script",
    attrs: (e) => e.type == "text/typescript-jsx",
    parser: jp.parser
  },
  {
    tag: "script",
    attrs(e) {
      return /^(importmap|speculationrules|application\/(.+\+)?json)$/i.test(e.type);
    },
    parser: cy
  },
  {
    tag: "script",
    attrs(e) {
      return !e.type || /^(?:text|application)\/(?:x-)?(?:java|ecma)script$|^module$|^$/i.test(e.type);
    },
    parser: Cr.parser
  },
  {
    tag: "style",
    attrs(e) {
      return (!e.lang || e.lang == "css") && (!e.type || /^(text\/)?(x-)?(stylesheet|css)$/i.test(e.type));
    },
    parser: ms.parser
  }
], yO = /* @__PURE__ */ [
  {
    name: "style",
    parser: /* @__PURE__ */ ms.parser.configure({ top: "Styles" })
  }
].concat(/* @__PURE__ */ mO.map((e) => ({ name: e, parser: Cr.parser }))), IO = /* @__PURE__ */ Si.define({
  name: "html",
  parser: /* @__PURE__ */ iy.configure({
    props: [
      /* @__PURE__ */ gn.add({
        Element(e) {
          let t = /^(\s*)(<\/)?/.exec(e.textAfter);
          return e.node.to <= e.pos + t[0].length ? e.continue() : e.lineIndent(e.node.from) + (t[2] ? 0 : e.unit);
        },
        "OpenTag CloseTag SelfClosingTag"(e) {
          return e.column(e.node.from) + e.unit;
        },
        Document(e) {
          if (e.pos + /\s*/.exec(e.textAfter)[0].length < e.node.to)
            return e.continue();
          let t = null, r;
          for (let i = e.node; ; ) {
            let n = i.lastChild;
            if (!n || n.name != "Element" || n.to != i.to)
              break;
            t = i = n;
          }
          return t && !((r = t.lastChild) && (r.name == "CloseTag" || r.name == "SelfClosingTag")) ? e.lineIndent(t.from) + e.unit : null;
        }
      }),
      /* @__PURE__ */ yn.add({
        Element(e) {
          let t = e.firstChild, r = e.lastChild;
          return !t || t.name != "OpenTag" ? null : { from: t.to, to: r.name == "CloseTag" ? r.from : e.to };
        }
      }),
      /* @__PURE__ */ Pp.add({
        "OpenTag CloseTag": (e) => e.getChild("TagName")
      })
    ]
  }),
  languageData: {
    commentTokens: { block: { open: "<!--", close: "-->" } },
    indentOnInput: /^\s*<\/\w+\W$/,
    wordChars: "-._"
  }
}), is = /* @__PURE__ */ IO.configure({
  wrap: /* @__PURE__ */ TO(gO, yO)
});
function fy(e = {}) {
  let t = "", r;
  e.matchClosingTags === !1 && (t = "noMatch"), e.selfClosingTags === !0 && (t = (t ? t + " " : "") + "selfClosing"), (e.nestedLanguages && e.nestedLanguages.length || e.nestedAttributes && e.nestedAttributes.length) && (r = TO((e.nestedLanguages || []).concat(gO), (e.nestedAttributes || []).concat(yO)));
  let i = r ? IO.configure({ wrap: r, dialect: t }) : t ? is.configure({ dialect: t }) : is;
  return new Ta(i, [
    is.data.of({ autocomplete: uy(e) }),
    e.autoCloseTags !== !1 ? hy : [],
    zp().support,
    sO().support
  ]);
}
const zf = /* @__PURE__ */ new Set(/* @__PURE__ */ "area base br col command embed frame hr img input keygen link meta param source track wbr menuitem".split(" ")), hy = /* @__PURE__ */ we.inputHandler.of((e, t, r, i, n) => {
  if (e.composing || e.state.readOnly || t != r || i != ">" && i != "/" || !is.isActiveAt(e.state, t, -1))
    return !1;
  let a = n(), { state: s } = a, o = s.changeByRange((l) => {
    var c, f, p;
    let O = s.doc.sliceString(l.from - 1, l.to) == i, { head: d } = l, g = Ot(s).resolveInner(d, -1), L;
    if (O && i == ">" && g.name == "EndTag") {
      let D = g.parent;
      if (((f = (c = D.parent) === null || c === void 0 ? void 0 : c.lastChild) === null || f === void 0 ? void 0 : f.name) != "CloseTag" && (L = fn(s.doc, D.parent, d)) && !zf.has(L)) {
        let W = d + (s.doc.sliceString(d, d + 1) === ">" ? 1 : 0), x = `</${L}>`;
        return { range: l, changes: { from: d, to: W, insert: x } };
      }
    } else if (O && i == "/" && g.name == "IncompleteCloseTag") {
      let D = g.parent;
      if (g.from == d - 2 && ((p = D.lastChild) === null || p === void 0 ? void 0 : p.name) != "CloseTag" && (L = fn(s.doc, D, d)) && !zf.has(L)) {
        let W = d + (s.doc.sliceString(d, d + 1) === ">" ? 1 : 0), x = `${L}>`;
        return {
          range: Re.cursor(d + x.length, -1),
          changes: { from: d, to: W, insert: x }
        };
      }
    }
    return { range: l };
  });
  return o.changes.empty ? !1 : (e.dispatch([
    a,
    s.update(o, {
      userEvent: "input.complete",
      scrollIntoView: !0
    })
  ]), !0);
}), py = (e) => {
  let { state: t } = e, r = t.doc.lineAt(t.selection.main.from), i = Hu(e.state, r.from);
  return i.line ? Oy(e) : i.block ? dy(e) : !1;
};
function Zu(e, t) {
  return ({ state: r, dispatch: i }) => {
    if (r.readOnly)
      return !1;
    let n = e(t, r);
    return n ? (i(r.update(n)), !0) : !1;
  };
}
const Oy = /* @__PURE__ */ Zu(
  my,
  0
  /* CommentOption.Toggle */
), Ey = /* @__PURE__ */ Zu(
  NO,
  0
  /* CommentOption.Toggle */
), dy = /* @__PURE__ */ Zu(
  (e, t) => NO(e, t, Sy(t)),
  0
  /* CommentOption.Toggle */
);
function Hu(e, t) {
  let r = e.languageDataAt("commentTokens", t);
  return r.length ? r[0] : {};
}
const kn = 50;
function Ty(e, { open: t, close: r }, i, n) {
  let a = e.sliceDoc(i - kn, i), s = e.sliceDoc(n, n + kn), o = /\s*$/.exec(a)[0].length, l = /^\s*/.exec(s)[0].length, c = a.length - o;
  if (a.slice(c - t.length, c) == t && s.slice(l, l + r.length) == r)
    return {
      open: { pos: i - o, margin: o && 1 },
      close: { pos: n + l, margin: l && 1 }
    };
  let f, p;
  n - i <= 2 * kn ? f = p = e.sliceDoc(i, n) : (f = e.sliceDoc(i, i + kn), p = e.sliceDoc(n - kn, n));
  let O = /^\s*/.exec(f)[0].length, d = /\s*$/.exec(p)[0].length, g = p.length - d - r.length;
  return f.slice(O, O + t.length) == t && p.slice(g, g + r.length) == r ? {
    open: {
      pos: i + O + t.length,
      margin: /\s/.test(f.charAt(O + t.length)) ? 1 : 0
    },
    close: {
      pos: n - d - r.length,
      margin: /\s/.test(p.charAt(g - 1)) ? 1 : 0
    }
  } : null;
}
function Sy(e) {
  let t = [];
  for (let r of e.selection.ranges) {
    let i = e.doc.lineAt(r.from), n = r.to <= i.to ? i : e.doc.lineAt(r.to), a = t.length - 1;
    a >= 0 && t[a].to > i.from ? t[a].to = n.to : t.push({ from: i.from + /^\s*/.exec(i.text)[0].length, to: n.to });
  }
  return t;
}
function NO(e, t, r = t.selection.ranges) {
  let i = r.map((a) => Hu(t, a.from).block);
  if (!i.every((a) => a))
    return null;
  let n = r.map((a, s) => Ty(t, i[s], a.from, a.to));
  if (e != 2 && !n.every((a) => a))
    return { changes: t.changes(r.map((a, s) => n[s] ? [] : [{ from: a.from, insert: i[s].open + " " }, { from: a.to, insert: " " + i[s].close }])) };
  if (e != 1 && n.some((a) => a)) {
    let a = [];
    for (let s = 0, o; s < n.length; s++)
      if (o = n[s]) {
        let l = i[s], { open: c, close: f } = o;
        a.push({ from: c.pos - l.open.length, to: c.pos + c.margin }, { from: f.pos - f.margin, to: f.pos + l.close.length });
      }
    return { changes: a };
  }
  return null;
}
function my(e, t, r = t.selection.ranges) {
  let i = [], n = -1;
  for (let { from: a, to: s } of r) {
    let o = i.length, l = 1e9, c = Hu(t, a).line;
    if (c) {
      for (let f = a; f <= s; ) {
        let p = t.doc.lineAt(f);
        if (p.from > n && (a == s || s > p.from)) {
          n = p.from;
          let O = /^\s*/.exec(p.text)[0].length, d = O == p.length, g = p.text.slice(O, O + c.length) == c ? O : -1;
          O < p.text.length && O < l && (l = O), i.push({ line: p, comment: g, token: c, indent: O, empty: d, single: !1 });
        }
        f = p.to + 1;
      }
      if (l < 1e9)
        for (let f = o; f < i.length; f++)
          i[f].indent < i[f].line.text.length && (i[f].indent = l);
      i.length == o + 1 && (i[o].single = !0);
    }
  }
  if (e != 2 && i.some((a) => a.comment < 0 && (!a.empty || a.single))) {
    let a = [];
    for (let { line: o, token: l, indent: c, empty: f, single: p } of i)
      (p || !f) && a.push({ from: o.from + c, insert: l + " " });
    let s = t.changes(a);
    return { changes: s, selection: t.selection.map(s, 1) };
  } else if (e != 1 && i.some((a) => a.comment >= 0)) {
    let a = [];
    for (let { line: s, comment: o, token: l } of i)
      if (o >= 0) {
        let c = s.from + o, f = c + l.length;
        s.text[f - s.from] == " " && f++, a.push({ from: c, to: f });
      }
    return { changes: a };
  }
  return null;
}
const dl = /* @__PURE__ */ pu.define(), Ry = /* @__PURE__ */ pu.define(), Ay = /* @__PURE__ */ jt.define(), PO = /* @__PURE__ */ jt.define({
  combine(e) {
    return ji(e, {
      minDepth: 100,
      newGroupDelay: 500,
      joinToEvent: (t, r) => r
    }, {
      minDepth: Math.max,
      newGroupDelay: Math.min,
      joinToEvent: (t, r) => (i, n) => t(i, n) || r(i, n)
    });
  }
}), _O = /* @__PURE__ */ Xr.define({
  create() {
    return Vr.empty;
  },
  update(e, t) {
    let r = t.state.facet(PO), i = t.annotation(dl);
    if (i) {
      let l = Kt.fromTransaction(t, i.selection), c = i.side, f = c == 0 ? e.undone : e.done;
      return l ? f = ys(f, f.length, r.minDepth, l) : f = CO(f, t.startState.selection), new Vr(c == 0 ? i.rest : f, c == 0 ? f : i.rest);
    }
    let n = t.annotation(Ry);
    if ((n == "full" || n == "before") && (e = e.isolate()), t.annotation(Ka.addToHistory) === !1)
      return t.changes.empty ? e : e.addMapping(t.changes.desc);
    let a = Kt.fromTransaction(t), s = t.annotation(Ka.time), o = t.annotation(Ka.userEvent);
    return a ? e = e.addChanges(a, s, o, r, t) : t.selection && (e = e.addSelection(t.startState.selection, s, o, r.newGroupDelay)), (n == "full" || n == "after") && (e = e.isolate()), e;
  },
  toJSON(e) {
    return { done: e.done.map((t) => t.toJSON()), undone: e.undone.map((t) => t.toJSON()) };
  },
  fromJSON(e) {
    return new Vr(e.done.map(Kt.fromJSON), e.undone.map(Kt.fromJSON));
  }
});
function gy(e = {}) {
  return [
    _O,
    PO.of(e),
    we.domEventHandlers({
      beforeinput(t, r) {
        let i = t.inputType == "historyUndo" ? bO : t.inputType == "historyRedo" ? Tl : null;
        return i ? (t.preventDefault(), i(r)) : !1;
      }
    })
  ];
}
function Ws(e, t) {
  return function({ state: r, dispatch: i }) {
    if (!t && r.readOnly)
      return !1;
    let n = r.field(_O, !1);
    if (!n)
      return !1;
    let a = n.pop(e, r, t);
    return a ? (i(a), !0) : !1;
  };
}
const bO = /* @__PURE__ */ Ws(0, !1), Tl = /* @__PURE__ */ Ws(1, !1), yy = /* @__PURE__ */ Ws(0, !0), Iy = /* @__PURE__ */ Ws(1, !0);
class Kt {
  constructor(t, r, i, n, a) {
    this.changes = t, this.effects = r, this.mapped = i, this.startSelection = n, this.selectionsAfter = a;
  }
  setSelAfter(t) {
    return new Kt(this.changes, this.effects, this.mapped, this.startSelection, t);
  }
  toJSON() {
    var t, r, i;
    return {
      changes: (t = this.changes) === null || t === void 0 ? void 0 : t.toJSON(),
      mapped: (r = this.mapped) === null || r === void 0 ? void 0 : r.toJSON(),
      startSelection: (i = this.startSelection) === null || i === void 0 ? void 0 : i.toJSON(),
      selectionsAfter: this.selectionsAfter.map((n) => n.toJSON())
    };
  }
  static fromJSON(t) {
    return new Kt(t.changes && CT.fromJSON(t.changes), [], t.mapped && LT.fromJSON(t.mapped), t.startSelection && Re.fromJSON(t.startSelection), t.selectionsAfter.map(Re.fromJSON));
  }
  // This does not check `addToHistory` and such, it assumes the
  // transaction needs to be converted to an item. Returns null when
  // there are no changes or effects in the transaction.
  static fromTransaction(t, r) {
    let i = Sr;
    for (let n of t.startState.facet(Ay)) {
      let a = n(t);
      a.length && (i = i.concat(a));
    }
    return !i.length && t.changes.empty ? null : new Kt(t.changes.invert(t.startState.doc), i, void 0, r || t.startState.selection, Sr);
  }
  static selection(t) {
    return new Kt(void 0, Sr, void 0, void 0, t);
  }
}
function ys(e, t, r, i) {
  let n = t + 1 > r + 20 ? t - r - 1 : 0, a = e.slice(n, t);
  return a.push(i), a;
}
function Ny(e, t) {
  let r = [], i = !1;
  return e.iterChangedRanges((n, a) => r.push(n, a)), t.iterChangedRanges((n, a, s, o) => {
    for (let l = 0; l < r.length; ) {
      let c = r[l++], f = r[l++];
      o >= c && s <= f && (i = !0);
    }
  }), i;
}
function Py(e, t) {
  return e.ranges.length == t.ranges.length && e.ranges.filter((r, i) => r.empty != t.ranges[i].empty).length === 0;
}
function vO(e, t) {
  return e.length ? t.length ? e.concat(t) : e : t;
}
const Sr = [], _y = 200;
function CO(e, t) {
  if (e.length) {
    let r = e[e.length - 1], i = r.selectionsAfter.slice(Math.max(0, r.selectionsAfter.length - _y));
    return i.length && i[i.length - 1].eq(t) ? e : (i.push(t), ys(e, e.length - 1, 1e9, r.setSelAfter(i)));
  } else
    return [Kt.selection([t])];
}
function by(e) {
  let t = e[e.length - 1], r = e.slice();
  return r[e.length - 1] = t.setSelAfter(t.selectionsAfter.slice(0, t.selectionsAfter.length - 1)), r;
}
function ko(e, t) {
  if (!e.length)
    return e;
  let r = e.length, i = Sr;
  for (; r; ) {
    let n = vy(e[r - 1], t, i);
    if (n.changes && !n.changes.empty || n.effects.length) {
      let a = e.slice(0, r);
      return a[r - 1] = n, a;
    } else
      t = n.mapped, r--, i = n.selectionsAfter;
  }
  return i.length ? [Kt.selection(i)] : Sr;
}
function vy(e, t, r) {
  let i = vO(e.selectionsAfter.length ? e.selectionsAfter.map((o) => o.map(t)) : Sr, r);
  if (!e.changes)
    return Kt.selection(i);
  let n = e.changes.map(t), a = t.mapDesc(e.changes, !0), s = e.mapped ? e.mapped.composeDesc(a) : a;
  return new Kt(n, Tt.mapEffects(e.effects, t), s, e.startSelection.map(a), i);
}
const Cy = /^(input\.type|delete)($|\.)/;
class Vr {
  constructor(t, r, i = 0, n = void 0) {
    this.done = t, this.undone = r, this.prevTime = i, this.prevUserEvent = n;
  }
  isolate() {
    return this.prevTime ? new Vr(this.done, this.undone) : this;
  }
  addChanges(t, r, i, n, a) {
    let s = this.done, o = s[s.length - 1];
    return o && o.changes && !o.changes.empty && t.changes && (!i || Cy.test(i)) && (!o.selectionsAfter.length && r - this.prevTime < n.newGroupDelay && n.joinToEvent(a, Ny(o.changes, t.changes)) || // For compose (but not compose.start) events, always join with previous event
    i == "input.type.compose") ? s = ys(s, s.length - 1, n.minDepth, new Kt(t.changes.compose(o.changes), vO(t.effects, o.effects), o.mapped, o.startSelection, Sr)) : s = ys(s, s.length, n.minDepth, t), new Vr(s, Sr, r, i);
  }
  addSelection(t, r, i, n) {
    let a = this.done.length ? this.done[this.done.length - 1].selectionsAfter : Sr;
    return a.length > 0 && r - this.prevTime < n && i == this.prevUserEvent && i && /^select($|\.)/.test(i) && Py(a[a.length - 1], t) ? this : new Vr(CO(this.done, t), this.undone, r, i);
  }
  addMapping(t) {
    return new Vr(ko(this.done, t), ko(this.undone, t), this.prevTime, this.prevUserEvent);
  }
  pop(t, r, i) {
    let n = t == 0 ? this.done : this.undone;
    if (n.length == 0)
      return null;
    let a = n[n.length - 1], s = a.selectionsAfter[0] || r.selection;
    if (i && a.selectionsAfter.length)
      return r.update({
        selection: a.selectionsAfter[a.selectionsAfter.length - 1],
        annotations: dl.of({ side: t, rest: by(n), selection: s }),
        userEvent: t == 0 ? "select.undo" : "select.redo",
        scrollIntoView: !0
      });
    if (a.changes) {
      let o = n.length == 1 ? Sr : n.slice(0, n.length - 1);
      return a.mapped && (o = ko(o, a.mapped)), r.update({
        changes: a.changes,
        selection: a.startSelection,
        effects: a.effects,
        annotations: dl.of({ side: t, rest: o, selection: s }),
        filter: !1,
        userEvent: t == 0 ? "undo" : "redo",
        scrollIntoView: !0
      });
    } else
      return null;
  }
}
Vr.empty = /* @__PURE__ */ new Vr(Sr, Sr);
const Ly = [
  { key: "Mod-z", run: bO, preventDefault: !0 },
  { key: "Mod-y", mac: "Mod-Shift-z", run: Tl, preventDefault: !0 },
  { linux: "Ctrl-Shift-z", run: Tl, preventDefault: !0 },
  { key: "Mod-u", run: yy, preventDefault: !0 },
  { key: "Alt-u", mac: "Mod-Shift-u", run: Iy, preventDefault: !0 }
];
function Nn(e, t) {
  return Re.create(e.ranges.map(t), e.mainIndex);
}
function jr(e, t) {
  return e.update({ selection: t, scrollIntoView: !0, userEvent: "select" });
}
function Lr({ state: e, dispatch: t }, r) {
  let i = Nn(e.selection, r);
  return i.eq(e.selection, !0) ? !1 : (t(jr(e, i)), !0);
}
function Xs(e, t) {
  return Re.cursor(t ? e.to : e.from);
}
function LO(e, t) {
  return Lr(e, (r) => r.empty ? e.moveByChar(r, t) : Xs(r, t));
}
function Bt(e) {
  return e.textDirectionAt(e.state.selection.main.head) == as.LTR;
}
const xO = (e) => LO(e, !Bt(e)), DO = (e) => LO(e, Bt(e));
function UO(e, t) {
  return Lr(e, (r) => r.empty ? e.moveByGroup(r, t) : Xs(r, t));
}
const xy = (e) => UO(e, !Bt(e)), Dy = (e) => UO(e, Bt(e));
function Uy(e, t, r) {
  if (t.type.prop(r))
    return !0;
  let i = t.to - t.from;
  return i && (i > 2 || /[^\s,.;:]/.test(e.sliceDoc(t.from, t.to))) || t.firstChild;
}
function js(e, t, r) {
  let i = Ot(e).resolveInner(t.head), n = r ? Le.closedBy : Le.openedBy;
  for (let l = t.head; ; ) {
    let c = r ? i.childAfter(l) : i.childBefore(l);
    if (!c)
      break;
    Uy(e, c, n) ? i = c : l = r ? c.to : c.from;
  }
  let a = i.type.prop(n), s, o;
  return a && (s = r ? Gr(e, i.from, 1) : Gr(e, i.to, -1)) && s.matched ? o = r ? s.end.to : s.end.from : o = r ? i.to : i.from, Re.cursor(o, r ? -1 : 1);
}
const wy = (e) => Lr(e, (t) => js(e.state, t, !Bt(e))), My = (e) => Lr(e, (t) => js(e.state, t, Bt(e)));
function wO(e, t) {
  return Lr(e, (r) => {
    if (!r.empty)
      return Xs(r, t);
    let i = e.moveVertically(r, t);
    return i.head != r.head ? i : e.moveToLineBoundary(r, t);
  });
}
const MO = (e) => wO(e, !1), kO = (e) => wO(e, !0);
function QO(e) {
  let t = e.scrollDOM.clientHeight < e.scrollDOM.scrollHeight - 2, r = 0, i = 0, n;
  if (t) {
    for (let a of e.state.facet(we.scrollMargins)) {
      let s = a(e);
      s != null && s.top && (r = Math.max(s == null ? void 0 : s.top, r)), s != null && s.bottom && (i = Math.max(s == null ? void 0 : s.bottom, i));
    }
    n = e.scrollDOM.clientHeight - r - i;
  } else
    n = (e.dom.ownerDocument.defaultView || window).innerHeight;
  return {
    marginTop: r,
    marginBottom: i,
    selfScroll: t,
    height: Math.max(e.defaultLineHeight, n - 5)
  };
}
function GO(e, t) {
  let r = QO(e), { state: i } = e, n = Nn(i.selection, (s) => s.empty ? e.moveVertically(s, t, r.height) : Xs(s, t));
  if (n.eq(i.selection))
    return !1;
  let a;
  if (r.selfScroll) {
    let s = e.coordsAtPos(i.selection.main.head), o = e.scrollDOM.getBoundingClientRect(), l = o.top + r.marginTop, c = o.bottom - r.marginBottom;
    s && s.top > l && s.bottom < c && (a = we.scrollIntoView(n.main.head, { y: "start", yMargin: s.top - l }));
  }
  return e.dispatch(jr(i, n), { effects: a }), !0;
}
const qf = (e) => GO(e, !1), Sl = (e) => GO(e, !0);
function yi(e, t, r) {
  let i = e.lineBlockAt(t.head), n = e.moveToLineBoundary(t, r);
  if (n.head == t.head && n.head != (r ? i.to : i.from) && (n = e.moveToLineBoundary(t, r, !1)), !r && n.head == i.from && i.length) {
    let a = /^\s*/.exec(e.state.sliceDoc(i.from, Math.min(i.from + 100, i.to)))[0].length;
    a && t.head != i.from + a && (n = Re.cursor(i.from + a));
  }
  return n;
}
const ky = (e) => Lr(e, (t) => yi(e, t, !0)), Qy = (e) => Lr(e, (t) => yi(e, t, !1)), Gy = (e) => Lr(e, (t) => yi(e, t, !Bt(e))), Vy = (e) => Lr(e, (t) => yi(e, t, Bt(e))), By = (e) => Lr(e, (t) => Re.cursor(e.lineBlockAt(t.head).from, 1)), $y = (e) => Lr(e, (t) => Re.cursor(e.lineBlockAt(t.head).to, -1));
function Yy(e, t, r) {
  let i = !1, n = Nn(e.selection, (a) => {
    let s = Gr(e, a.head, -1) || Gr(e, a.head, 1) || a.head > 0 && Gr(e, a.head - 1, 1) || a.head < e.doc.length && Gr(e, a.head + 1, -1);
    if (!s || !s.end)
      return a;
    i = !0;
    let o = s.start.from == a.head ? s.end.to : s.end.from;
    return r ? Re.range(a.anchor, o) : Re.cursor(o);
  });
  return i ? (t(jr(e, n)), !0) : !1;
}
const Fy = ({ state: e, dispatch: t }) => Yy(e, t, !1);
function Rr(e, t) {
  let r = Nn(e.state.selection, (i) => {
    let n = t(i);
    return Re.range(i.anchor, n.head, n.goalColumn, n.bidiLevel || void 0);
  });
  return r.eq(e.state.selection) ? !1 : (e.dispatch(jr(e.state, r)), !0);
}
function VO(e, t) {
  return Rr(e, (r) => e.moveByChar(r, t));
}
const BO = (e) => VO(e, !Bt(e)), $O = (e) => VO(e, Bt(e));
function YO(e, t) {
  return Rr(e, (r) => e.moveByGroup(r, t));
}
const Wy = (e) => YO(e, !Bt(e)), Xy = (e) => YO(e, Bt(e)), jy = (e) => Rr(e, (t) => js(e.state, t, !Bt(e))), Zy = (e) => Rr(e, (t) => js(e.state, t, Bt(e)));
function FO(e, t) {
  return Rr(e, (r) => e.moveVertically(r, t));
}
const WO = (e) => FO(e, !1), XO = (e) => FO(e, !0);
function jO(e, t) {
  return Rr(e, (r) => e.moveVertically(r, t, QO(e).height));
}
const Jf = (e) => jO(e, !1), Kf = (e) => jO(e, !0), Hy = (e) => Rr(e, (t) => yi(e, t, !0)), zy = (e) => Rr(e, (t) => yi(e, t, !1)), qy = (e) => Rr(e, (t) => yi(e, t, !Bt(e))), Jy = (e) => Rr(e, (t) => yi(e, t, Bt(e))), Ky = (e) => Rr(e, (t) => Re.cursor(e.lineBlockAt(t.head).from)), eI = (e) => Rr(e, (t) => Re.cursor(e.lineBlockAt(t.head).to)), eh = ({ state: e, dispatch: t }) => (t(jr(e, { anchor: 0 })), !0), th = ({ state: e, dispatch: t }) => (t(jr(e, { anchor: e.doc.length })), !0), rh = ({ state: e, dispatch: t }) => (t(jr(e, { anchor: e.selection.main.anchor, head: 0 })), !0), ih = ({ state: e, dispatch: t }) => (t(jr(e, { anchor: e.selection.main.anchor, head: e.doc.length })), !0), tI = ({ state: e, dispatch: t }) => (t(e.update({ selection: { anchor: 0, head: e.doc.length }, userEvent: "select" })), !0), rI = ({ state: e, dispatch: t }) => {
  let r = Zs(e).map(({ from: i, to: n }) => Re.range(i, Math.min(n + 1, e.doc.length)));
  return t(e.update({ selection: Re.create(r), userEvent: "select" })), !0;
}, iI = ({ state: e, dispatch: t }) => {
  let r = Nn(e.selection, (i) => {
    var n;
    let a = Ot(e).resolveStack(i.from, 1);
    for (let s = a; s; s = s.next) {
      let { node: o } = s;
      if ((o.from < i.from && o.to >= i.to || o.to > i.to && o.from <= i.from) && (!((n = o.parent) === null || n === void 0) && n.parent))
        return Re.range(o.to, o.from);
    }
    return i;
  });
  return t(jr(e, r)), !0;
}, nI = ({ state: e, dispatch: t }) => {
  let r = e.selection, i = null;
  return r.ranges.length > 1 ? i = Re.create([r.main]) : r.main.empty || (i = Re.create([Re.cursor(r.main.head)])), i ? (t(jr(e, i)), !0) : !1;
};
function Ra(e, t) {
  if (e.state.readOnly)
    return !1;
  let r = "delete.selection", { state: i } = e, n = i.changeByRange((a) => {
    let { from: s, to: o } = a;
    if (s == o) {
      let l = t(a);
      l < s ? (r = "delete.backward", l = ka(e, l, !1)) : l > s && (r = "delete.forward", l = ka(e, l, !0)), s = Math.min(s, l), o = Math.max(o, l);
    } else
      s = ka(e, s, !1), o = ka(e, o, !0);
    return s == o ? { range: a } : { changes: { from: s, to: o }, range: Re.cursor(s, s < a.head ? -1 : 1) };
  });
  return n.changes.empty ? !1 : (e.dispatch(i.update(n, {
    scrollIntoView: !0,
    userEvent: r,
    effects: r == "delete.selection" ? we.announce.of(i.phrase("Selection deleted")) : void 0
  })), !0);
}
function ka(e, t, r) {
  if (e instanceof we)
    for (let i of e.state.facet(we.atomicRanges).map((n) => n(e)))
      i.between(t, t, (n, a) => {
        n < t && a > t && (t = r ? a : n);
      });
  return t;
}
const ZO = (e, t, r) => Ra(e, (i) => {
  let n = i.from, { state: a } = e, s = a.doc.lineAt(n), o, l;
  if (r && !t && n > s.from && n < s.from + 200 && !/[^ \t]/.test(o = s.text.slice(0, n - s.from))) {
    if (o[o.length - 1] == "	")
      return n - 1;
    let c = Qs(o, a.tabSize), f = c % cs(a) || cs(a);
    for (let p = 0; p < f && o[o.length - 1 - p] == " "; p++)
      n--;
    l = n;
  } else
    l = Vi(s.text, n - s.from, t, t) + s.from, l == n && s.number != (t ? a.doc.lines : 1) ? l += t ? 1 : -1 : !t && /[\ufe00-\ufe0f]/.test(s.text.slice(l - s.from, n - s.from)) && (l = Vi(s.text, l - s.from, !1, !1) + s.from);
  return l;
}), ml = (e) => ZO(e, !1, !0), HO = (e) => ZO(e, !0, !1), zO = (e, t) => Ra(e, (r) => {
  let i = r.head, { state: n } = e, a = n.doc.lineAt(i), s = n.charCategorizer(i);
  for (let o = null; ; ) {
    if (i == (t ? a.to : a.from)) {
      i == r.head && a.number != (t ? n.doc.lines : 1) && (i += t ? 1 : -1);
      break;
    }
    let l = Vi(a.text, i - a.from, t) + a.from, c = a.text.slice(Math.min(i, l) - a.from, Math.max(i, l) - a.from), f = s(c);
    if (o != null && f != o)
      break;
    (c != " " || i != r.head) && (o = f), i = l;
  }
  return i;
}), qO = (e) => zO(e, !1), aI = (e) => zO(e, !0), sI = (e) => Ra(e, (t) => {
  let r = e.lineBlockAt(t.head).to;
  return t.head < r ? r : Math.min(e.state.doc.length, t.head + 1);
}), oI = (e) => Ra(e, (t) => {
  let r = e.moveToLineBoundary(t, !1).head;
  return t.head > r ? r : Math.max(0, t.head - 1);
}), lI = (e) => Ra(e, (t) => {
  let r = e.moveToLineBoundary(t, !0).head;
  return t.head < r ? r : Math.min(e.state.doc.length, t.head + 1);
}), uI = ({ state: e, dispatch: t }) => {
  if (e.readOnly)
    return !1;
  let r = e.changeByRange((i) => ({
    changes: { from: i.from, to: i.to, insert: Ou.of(["", ""]) },
    range: Re.cursor(i.from)
  }));
  return t(e.update(r, { scrollIntoView: !0, userEvent: "input" })), !0;
}, cI = ({ state: e, dispatch: t }) => {
  if (e.readOnly)
    return !1;
  let r = e.changeByRange((i) => {
    if (!i.empty || i.from == 0 || i.from == e.doc.length)
      return { range: i };
    let n = i.from, a = e.doc.lineAt(n), s = n == a.from ? n - 1 : Vi(a.text, n - a.from, !1) + a.from, o = n == a.to ? n + 1 : Vi(a.text, n - a.from, !0) + a.from;
    return {
      changes: { from: s, to: o, insert: e.doc.slice(n, o).append(e.doc.slice(s, n)) },
      range: Re.cursor(o)
    };
  });
  return r.changes.empty ? !1 : (t(e.update(r, { scrollIntoView: !0, userEvent: "move.character" })), !0);
};
function Zs(e) {
  let t = [], r = -1;
  for (let i of e.selection.ranges) {
    let n = e.doc.lineAt(i.from), a = e.doc.lineAt(i.to);
    if (!i.empty && i.to == a.from && (a = e.doc.lineAt(i.to - 1)), r >= n.number) {
      let s = t[t.length - 1];
      s.to = a.to, s.ranges.push(i);
    } else
      t.push({ from: n.from, to: a.to, ranges: [i] });
    r = a.number + 1;
  }
  return t;
}
function JO(e, t, r) {
  if (e.readOnly)
    return !1;
  let i = [], n = [];
  for (let a of Zs(e)) {
    if (r ? a.to == e.doc.length : a.from == 0)
      continue;
    let s = e.doc.lineAt(r ? a.to + 1 : a.from - 1), o = s.length + 1;
    if (r) {
      i.push({ from: a.to, to: s.to }, { from: a.from, insert: s.text + e.lineBreak });
      for (let l of a.ranges)
        n.push(Re.range(Math.min(e.doc.length, l.anchor + o), Math.min(e.doc.length, l.head + o)));
    } else {
      i.push({ from: s.from, to: a.from }, { from: a.to, insert: e.lineBreak + s.text });
      for (let l of a.ranges)
        n.push(Re.range(l.anchor - o, l.head - o));
    }
  }
  return i.length ? (t(e.update({
    changes: i,
    scrollIntoView: !0,
    selection: Re.create(n, e.selection.mainIndex),
    userEvent: "move.line"
  })), !0) : !1;
}
const fI = ({ state: e, dispatch: t }) => JO(e, t, !1), hI = ({ state: e, dispatch: t }) => JO(e, t, !0);
function KO(e, t, r) {
  if (e.readOnly)
    return !1;
  let i = [];
  for (let n of Zs(e))
    r ? i.push({ from: n.from, insert: e.doc.slice(n.from, n.to) + e.lineBreak }) : i.push({ from: n.to, insert: e.lineBreak + e.doc.slice(n.from, n.to) });
  return t(e.update({ changes: i, scrollIntoView: !0, userEvent: "input.copyline" })), !0;
}
const pI = ({ state: e, dispatch: t }) => KO(e, t, !1), OI = ({ state: e, dispatch: t }) => KO(e, t, !0), EI = (e) => {
  if (e.state.readOnly)
    return !1;
  let { state: t } = e, r = t.changes(Zs(t).map(({ from: n, to: a }) => (n > 0 ? n-- : a < t.doc.length && a++, { from: n, to: a }))), i = Nn(t.selection, (n) => {
    let a;
    if (e.lineWrapping) {
      let s = e.lineBlockAt(n.head), o = e.coordsAtPos(n.head, n.assoc || 1);
      o && (a = s.bottom + e.documentTop - o.bottom + e.defaultLineHeight / 2);
    }
    return e.moveVertically(n, !0, a);
  }).map(r);
  return e.dispatch({ changes: r, selection: i, scrollIntoView: !0, userEvent: "delete.line" }), !0;
};
function dI(e, t) {
  if (/\(\)|\[\]|\{\}/.test(e.sliceDoc(t - 1, t + 1)))
    return { from: t, to: t };
  let r = Ot(e).resolveInner(t), i = r.childBefore(t), n = r.childAfter(t), a;
  return i && n && i.to <= t && n.from >= t && (a = i.type.prop(Le.closedBy)) && a.indexOf(n.name) > -1 && e.doc.lineAt(i.to).from == e.doc.lineAt(n.from).from && !/\S/.test(e.sliceDoc(i.to, n.from)) ? { from: i.to, to: n.from } : null;
}
const TI = /* @__PURE__ */ eE(!1), SI = /* @__PURE__ */ eE(!0);
function eE(e) {
  return ({ state: t, dispatch: r }) => {
    if (t.readOnly)
      return !1;
    let i = t.changeByRange((n) => {
      let { from: a, to: s } = n, o = t.doc.lineAt(a), l = !e && a == s && dI(t, a);
      e && (a = s = (s <= o.to ? o : t.doc.lineAt(s)).to);
      let c = new Bs(t, { simulateBreak: a, simulateDoubleBreak: !!l }), f = bu(c, a);
      for (f == null && (f = Qs(/^\s*/.exec(t.doc.lineAt(a).text)[0], t.tabSize)); s < o.to && /\s/.test(o.text[s - o.from]); )
        s++;
      l ? { from: a, to: s } = l : a > o.from && a < o.from + 100 && !/\S/.test(o.text.slice(0, a)) && (a = o.from);
      let p = ["", Kn(t, f)];
      return l && p.push(Kn(t, c.lineIndent(o.from, -1))), {
        changes: { from: a, to: s, insert: Ou.of(p) },
        range: Re.cursor(a + 1 + p[1].length)
      };
    });
    return r(t.update(i, { scrollIntoView: !0, userEvent: "input" })), !0;
  };
}
function zu(e, t) {
  let r = -1;
  return e.changeByRange((i) => {
    let n = [];
    for (let s = i.from; s <= i.to; ) {
      let o = e.doc.lineAt(s);
      o.number > r && (i.empty || i.to > o.from) && (t(o, n, i), r = o.number), s = o.to + 1;
    }
    let a = e.changes(n);
    return {
      changes: n,
      range: Re.range(a.mapPos(i.anchor, 1), a.mapPos(i.head, 1))
    };
  });
}
const mI = ({ state: e, dispatch: t }) => {
  if (e.readOnly)
    return !1;
  let r = /* @__PURE__ */ Object.create(null), i = new Bs(e, { overrideIndentation: (a) => {
    let s = r[a];
    return s ?? -1;
  } }), n = zu(e, (a, s, o) => {
    let l = bu(i, a.from);
    if (l == null)
      return;
    /\S/.test(a.text) || (l = 0);
    let c = /^\s*/.exec(a.text)[0], f = Kn(e, l);
    (c != f || o.from < a.from + c.length) && (r[a.from] = l, s.push({ from: a.from, to: a.from + c.length, insert: f }));
  });
  return n.changes.empty || t(e.update(n, { userEvent: "indent" })), !0;
}, tE = ({ state: e, dispatch: t }) => e.readOnly ? !1 : (t(e.update(zu(e, (r, i) => {
  i.push({ from: r.from, insert: e.facet(Vs) });
}), { userEvent: "input.indent" })), !0), rE = ({ state: e, dispatch: t }) => e.readOnly ? !1 : (t(e.update(zu(e, (r, i) => {
  let n = /^\s*/.exec(r.text)[0];
  if (!n)
    return;
  let a = Qs(n, e.tabSize), s = 0, o = Kn(e, Math.max(0, a - cs(e)));
  for (; s < n.length && s < o.length && n.charCodeAt(s) == o.charCodeAt(s); )
    s++;
  i.push({ from: r.from + s, to: r.from + n.length, insert: o.slice(s) });
}), { userEvent: "delete.dedent" })), !0), RI = [
  { key: "Ctrl-b", run: xO, shift: BO, preventDefault: !0 },
  { key: "Ctrl-f", run: DO, shift: $O },
  { key: "Ctrl-p", run: MO, shift: WO },
  { key: "Ctrl-n", run: kO, shift: XO },
  { key: "Ctrl-a", run: By, shift: Ky },
  { key: "Ctrl-e", run: $y, shift: eI },
  { key: "Ctrl-d", run: HO },
  { key: "Ctrl-h", run: ml },
  { key: "Ctrl-k", run: sI },
  { key: "Ctrl-Alt-h", run: qO },
  { key: "Ctrl-o", run: uI },
  { key: "Ctrl-t", run: cI },
  { key: "Ctrl-v", run: Sl }
], AI = /* @__PURE__ */ [
  { key: "ArrowLeft", run: xO, shift: BO, preventDefault: !0 },
  { key: "Mod-ArrowLeft", mac: "Alt-ArrowLeft", run: xy, shift: Wy, preventDefault: !0 },
  { mac: "Cmd-ArrowLeft", run: Gy, shift: qy, preventDefault: !0 },
  { key: "ArrowRight", run: DO, shift: $O, preventDefault: !0 },
  { key: "Mod-ArrowRight", mac: "Alt-ArrowRight", run: Dy, shift: Xy, preventDefault: !0 },
  { mac: "Cmd-ArrowRight", run: Vy, shift: Jy, preventDefault: !0 },
  { key: "ArrowUp", run: MO, shift: WO, preventDefault: !0 },
  { mac: "Cmd-ArrowUp", run: eh, shift: rh },
  { mac: "Ctrl-ArrowUp", run: qf, shift: Jf },
  { key: "ArrowDown", run: kO, shift: XO, preventDefault: !0 },
  { mac: "Cmd-ArrowDown", run: th, shift: ih },
  { mac: "Ctrl-ArrowDown", run: Sl, shift: Kf },
  { key: "PageUp", run: qf, shift: Jf },
  { key: "PageDown", run: Sl, shift: Kf },
  { key: "Home", run: Qy, shift: zy, preventDefault: !0 },
  { key: "Mod-Home", run: eh, shift: rh },
  { key: "End", run: ky, shift: Hy, preventDefault: !0 },
  { key: "Mod-End", run: th, shift: ih },
  { key: "Enter", run: TI },
  { key: "Mod-a", run: tI },
  { key: "Backspace", run: ml, shift: ml },
  { key: "Delete", run: HO },
  { key: "Mod-Backspace", mac: "Alt-Backspace", run: qO },
  { key: "Mod-Delete", mac: "Alt-Delete", run: aI },
  { mac: "Mod-Backspace", run: oI },
  { mac: "Mod-Delete", run: lI }
].concat(/* @__PURE__ */ RI.map((e) => ({ mac: e.key, run: e.run, shift: e.shift }))), gI = /* @__PURE__ */ [
  { key: "Alt-ArrowLeft", mac: "Ctrl-ArrowLeft", run: wy, shift: jy },
  { key: "Alt-ArrowRight", mac: "Ctrl-ArrowRight", run: My, shift: Zy },
  { key: "Alt-ArrowUp", run: fI },
  { key: "Shift-Alt-ArrowUp", run: pI },
  { key: "Alt-ArrowDown", run: hI },
  { key: "Shift-Alt-ArrowDown", run: OI },
  { key: "Escape", run: nI },
  { key: "Mod-Enter", run: SI },
  { key: "Alt-l", mac: "Ctrl-l", run: rI },
  { key: "Mod-i", run: iI, preventDefault: !0 },
  { key: "Mod-[", run: rE },
  { key: "Mod-]", run: tE },
  { key: "Mod-Alt-\\", run: mI },
  { key: "Shift-Mod-k", run: EI },
  { key: "Shift-Mod-\\", run: Fy },
  { key: "Mod-/", run: py },
  { key: "Alt-A", run: Ey }
].concat(AI), yI = { key: "Tab", run: tE, shift: rE };
function at() {
  var e = arguments[0];
  typeof e == "string" && (e = document.createElement(e));
  var t = 1, r = arguments[1];
  if (r && typeof r == "object" && r.nodeType == null && !Array.isArray(r)) {
    for (var i in r)
      if (Object.prototype.hasOwnProperty.call(r, i)) {
        var n = r[i];
        typeof n == "string" ? e.setAttribute(i, n) : n != null && (e[i] = n);
      }
    t++;
  }
  for (; t < arguments.length; t++)
    iE(e, arguments[t]);
  return e;
}
function iE(e, t) {
  if (typeof t == "string")
    e.appendChild(document.createTextNode(t));
  else if (t != null)
    if (t.nodeType != null)
      e.appendChild(t);
    else if (Array.isArray(t))
      for (var r = 0; r < t.length; r++)
        iE(e, t[r]);
    else
      throw new RangeError("Unsupported child node: " + t);
}
const nh = typeof String.prototype.normalize == "function" ? (e) => e.normalize("NFKD") : (e) => e;
class pn {
  /**
  Create a text cursor. The query is the search string, `from` to
  `to` provides the region to search.
  
  When `normalize` is given, it will be called, on both the query
  string and the content it is matched against, before comparing.
  You can, for example, create a case-insensitive search by
  passing `s => s.toLowerCase()`.
  
  Text is always normalized with
  [`.normalize("NFKD")`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize)
  (when supported).
  */
  constructor(t, r, i = 0, n = t.length, a, s) {
    this.test = s, this.value = { from: 0, to: 0 }, this.done = !1, this.matches = [], this.buffer = "", this.bufferPos = 0, this.iter = t.iterRange(i, n), this.bufferStart = i, this.normalize = a ? (o) => a(nh(o)) : nh, this.query = this.normalize(r);
  }
  peek() {
    if (this.bufferPos == this.buffer.length) {
      if (this.bufferStart += this.buffer.length, this.iter.next(), this.iter.done)
        return -1;
      this.bufferPos = 0, this.buffer = this.iter.value;
    }
    return dr(this.buffer, this.bufferPos);
  }
  /**
  Look for the next match. Updates the iterator's
  [`value`](https://codemirror.net/6/docs/ref/#search.SearchCursor.value) and
  [`done`](https://codemirror.net/6/docs/ref/#search.SearchCursor.done) properties. Should be called
  at least once before using the cursor.
  */
  next() {
    for (; this.matches.length; )
      this.matches.pop();
    return this.nextOverlapping();
  }
  /**
  The `next` method will ignore matches that partially overlap a
  previous match. This method behaves like `next`, but includes
  such matches.
  */
  nextOverlapping() {
    for (; ; ) {
      let t = this.peek();
      if (t < 0)
        return this.done = !0, this;
      let r = hu(t), i = this.bufferStart + this.bufferPos;
      this.bufferPos += qr(t);
      let n = this.normalize(r);
      for (let a = 0, s = i; ; a++) {
        let o = n.charCodeAt(a), l = this.match(o, s, this.bufferPos + this.bufferStart);
        if (a == n.length - 1) {
          if (l)
            return this.value = l, this;
          break;
        }
        s == i && a < r.length && r.charCodeAt(a) == o && s++;
      }
    }
  }
  match(t, r, i) {
    let n = null;
    for (let a = 0; a < this.matches.length; a += 2) {
      let s = this.matches[a], o = !1;
      this.query.charCodeAt(s) == t && (s == this.query.length - 1 ? n = { from: this.matches[a + 1], to: i } : (this.matches[a]++, o = !0)), o || (this.matches.splice(a, 2), a -= 2);
    }
    return this.query.charCodeAt(0) == t && (this.query.length == 1 ? n = { from: r, to: i } : this.matches.push(1, r)), n && this.test && !this.test(n.from, n.to, this.buffer, this.bufferStart) && (n = null), n;
  }
}
typeof Symbol < "u" && (pn.prototype[Symbol.iterator] = function() {
  return this;
});
const nE = { from: -1, to: -1, match: /* @__PURE__ */ /.*/.exec("") }, qu = "gm" + (/x/.unicode == null ? "" : "u");
class aE {
  /**
  Create a cursor that will search the given range in the given
  document. `query` should be the raw pattern (as you'd pass it to
  `new RegExp`).
  */
  constructor(t, r, i, n = 0, a = t.length) {
    if (this.text = t, this.to = a, this.curLine = "", this.done = !1, this.value = nE, /\\[sWDnr]|\n|\r|\[\^/.test(r))
      return new sE(t, r, i, n, a);
    this.re = new RegExp(r, qu + (i != null && i.ignoreCase ? "i" : "")), this.test = i == null ? void 0 : i.test, this.iter = t.iter();
    let s = t.lineAt(n);
    this.curLineStart = s.from, this.matchPos = Is(t, n), this.getLine(this.curLineStart);
  }
  getLine(t) {
    this.iter.next(t), this.iter.lineBreak ? this.curLine = "" : (this.curLine = this.iter.value, this.curLineStart + this.curLine.length > this.to && (this.curLine = this.curLine.slice(0, this.to - this.curLineStart)), this.iter.next());
  }
  nextLine() {
    this.curLineStart = this.curLineStart + this.curLine.length + 1, this.curLineStart > this.to ? this.curLine = "" : this.getLine(0);
  }
  /**
  Move to the next match, if there is one.
  */
  next() {
    for (let t = this.matchPos - this.curLineStart; ; ) {
      this.re.lastIndex = t;
      let r = this.matchPos <= this.to && this.re.exec(this.curLine);
      if (r) {
        let i = this.curLineStart + r.index, n = i + r[0].length;
        if (this.matchPos = Is(this.text, n + (i == n ? 1 : 0)), i == this.curLineStart + this.curLine.length && this.nextLine(), (i < n || i > this.value.to) && (!this.test || this.test(i, n, r)))
          return this.value = { from: i, to: n, match: r }, this;
        t = this.matchPos - this.curLineStart;
      } else if (this.curLineStart + this.curLine.length < this.to)
        this.nextLine(), t = 0;
      else
        return this.done = !0, this;
    }
  }
}
const Qo = /* @__PURE__ */ new WeakMap();
class ln {
  constructor(t, r) {
    this.from = t, this.text = r;
  }
  get to() {
    return this.from + this.text.length;
  }
  static get(t, r, i) {
    let n = Qo.get(t);
    if (!n || n.from >= i || n.to <= r) {
      let o = new ln(r, t.sliceString(r, i));
      return Qo.set(t, o), o;
    }
    if (n.from == r && n.to == i)
      return n;
    let { text: a, from: s } = n;
    return s > r && (a = t.sliceString(r, s) + a, s = r), n.to < i && (a += t.sliceString(n.to, i)), Qo.set(t, new ln(s, a)), new ln(r, a.slice(r - s, i - s));
  }
}
class sE {
  constructor(t, r, i, n, a) {
    this.text = t, this.to = a, this.done = !1, this.value = nE, this.matchPos = Is(t, n), this.re = new RegExp(r, qu + (i != null && i.ignoreCase ? "i" : "")), this.test = i == null ? void 0 : i.test, this.flat = ln.get(t, n, this.chunkEnd(
      n + 5e3
      /* Chunk.Base */
    ));
  }
  chunkEnd(t) {
    return t >= this.to ? this.to : this.text.lineAt(t).to;
  }
  next() {
    for (; ; ) {
      let t = this.re.lastIndex = this.matchPos - this.flat.from, r = this.re.exec(this.flat.text);
      if (r && !r[0] && r.index == t && (this.re.lastIndex = t + 1, r = this.re.exec(this.flat.text)), r) {
        let i = this.flat.from + r.index, n = i + r[0].length;
        if ((this.flat.to >= this.to || r.index + r[0].length <= this.flat.text.length - 10) && (!this.test || this.test(i, n, r)))
          return this.value = { from: i, to: n, match: r }, this.matchPos = Is(this.text, n + (i == n ? 1 : 0)), this;
      }
      if (this.flat.to == this.to)
        return this.done = !0, this;
      this.flat = ln.get(this.text, this.flat.from, this.chunkEnd(this.flat.from + this.flat.text.length * 2));
    }
  }
}
typeof Symbol < "u" && (aE.prototype[Symbol.iterator] = sE.prototype[Symbol.iterator] = function() {
  return this;
});
function II(e) {
  try {
    return new RegExp(e, qu), !0;
  } catch {
    return !1;
  }
}
function Is(e, t) {
  if (t >= e.length)
    return t;
  let r = e.lineAt(t), i;
  for (; t < r.to && (i = r.text.charCodeAt(t - r.from)) >= 56320 && i < 57344; )
    t++;
  return t;
}
function Rl(e) {
  let t = String(e.state.doc.lineAt(e.state.selection.main.head).number), r = at("input", { class: "cm-textfield", name: "line", value: t }), i = at("form", {
    class: "cm-gotoLine",
    onkeydown: (a) => {
      a.keyCode == 27 ? (a.preventDefault(), e.dispatch({ effects: Ns.of(!1) }), e.focus()) : a.keyCode == 13 && (a.preventDefault(), n());
    },
    onsubmit: (a) => {
      a.preventDefault(), n();
    }
  }, at("label", e.state.phrase("Go to line"), ": ", r), " ", at("button", { class: "cm-button", type: "submit" }, e.state.phrase("go")));
  function n() {
    let a = /^([+-])?(\d+)?(:\d+)?(%)?$/.exec(r.value);
    if (!a)
      return;
    let { state: s } = e, o = s.doc.lineAt(s.selection.main.head), [, l, c, f, p] = a, O = f ? +f.slice(1) : 0, d = c ? +c : o.number;
    if (c && p) {
      let D = d / 100;
      l && (D = D * (l == "-" ? -1 : 1) + o.number / s.doc.lines), d = Math.round(s.doc.lines * D);
    } else
      c && l && (d = d * (l == "-" ? -1 : 1) + o.number);
    let g = s.doc.line(Math.max(1, Math.min(s.doc.lines, d))), L = Re.cursor(g.from + Math.max(0, Math.min(O, g.length)));
    e.dispatch({
      effects: [Ns.of(!1), we.scrollIntoView(L.from, { y: "center" })],
      selection: L
    }), e.focus();
  }
  return { dom: i };
}
const Ns = /* @__PURE__ */ Tt.define(), ah = /* @__PURE__ */ Xr.define({
  create() {
    return !0;
  },
  update(e, t) {
    for (let r of t.effects)
      r.is(Ns) && (e = r.value);
    return e;
  },
  provide: (e) => Eu.from(e, (t) => t ? Rl : null)
}), NI = (e) => {
  let t = Hn(e, Rl);
  if (!t) {
    let r = [Ns.of(!0)];
    e.state.field(ah, !1) == null && r.push(Tt.appendConfig.of([ah, PI])), e.dispatch({ effects: r }), t = Hn(e, Rl);
  }
  return t && t.dom.querySelector("input").select(), !0;
}, PI = /* @__PURE__ */ we.baseTheme({
  ".cm-panel.cm-gotoLine": {
    padding: "2px 6px 4px",
    "& label": { fontSize: "80%" }
  }
}), _I = {
  highlightWordAroundCursor: !1,
  minSelectionLength: 1,
  maxMatches: 100,
  wholeWords: !1
}, oE = /* @__PURE__ */ jt.define({
  combine(e) {
    return ji(e, _I, {
      highlightWordAroundCursor: (t, r) => t || r,
      minSelectionLength: Math.min,
      maxMatches: Math.min
    });
  }
});
function bI(e) {
  let t = [DI, xI];
  return e && t.push(oE.of(e)), t;
}
const vI = /* @__PURE__ */ Pe.mark({ class: "cm-selectionMatch" }), CI = /* @__PURE__ */ Pe.mark({ class: "cm-selectionMatch cm-selectionMatch-main" });
function sh(e, t, r, i) {
  return (r == 0 || e(t.sliceDoc(r - 1, r)) != Wt.Word) && (i == t.doc.length || e(t.sliceDoc(i, i + 1)) != Wt.Word);
}
function LI(e, t, r, i) {
  return e(t.sliceDoc(r, r + 1)) == Wt.Word && e(t.sliceDoc(i - 1, i)) == Wt.Word;
}
const xI = /* @__PURE__ */ gi.fromClass(class {
  constructor(e) {
    this.decorations = this.getDeco(e);
  }
  update(e) {
    (e.selectionSet || e.docChanged || e.viewportChanged) && (this.decorations = this.getDeco(e.view));
  }
  getDeco(e) {
    let t = e.state.facet(oE), { state: r } = e, i = r.selection;
    if (i.ranges.length > 1)
      return Pe.none;
    let n = i.main, a, s = null;
    if (n.empty) {
      if (!t.highlightWordAroundCursor)
        return Pe.none;
      let l = r.wordAt(n.head);
      if (!l)
        return Pe.none;
      s = r.charCategorizer(n.head), a = r.sliceDoc(l.from, l.to);
    } else {
      let l = n.to - n.from;
      if (l < t.minSelectionLength || l > 200)
        return Pe.none;
      if (t.wholeWords) {
        if (a = r.sliceDoc(n.from, n.to), s = r.charCategorizer(n.head), !(sh(s, r, n.from, n.to) && LI(s, r, n.from, n.to)))
          return Pe.none;
      } else if (a = r.sliceDoc(n.from, n.to), !a)
        return Pe.none;
    }
    let o = [];
    for (let l of e.visibleRanges) {
      let c = new pn(r.doc, a, l.from, l.to);
      for (; !c.next().done; ) {
        let { from: f, to: p } = c.value;
        if ((!s || sh(s, r, f, p)) && (n.empty && f <= n.from && p >= n.to ? o.push(CI.range(f, p)) : (f >= n.to || p <= n.from) && o.push(vI.range(f, p)), o.length > t.maxMatches))
          return Pe.none;
      }
    }
    return Pe.set(o);
  }
}, {
  decorations: (e) => e.decorations
}), DI = /* @__PURE__ */ we.baseTheme({
  ".cm-selectionMatch": { backgroundColor: "#99ff7780" },
  ".cm-searchMatch .cm-selectionMatch": { backgroundColor: "transparent" }
}), UI = ({ state: e, dispatch: t }) => {
  let { selection: r } = e, i = Re.create(r.ranges.map((n) => e.wordAt(n.head) || Re.cursor(n.head)), r.mainIndex);
  return i.eq(r) ? !1 : (t(e.update({ selection: i })), !0);
};
function wI(e, t) {
  let { main: r, ranges: i } = e.selection, n = e.wordAt(r.head), a = n && n.from == r.from && n.to == r.to;
  for (let s = !1, o = new pn(e.doc, t, i[i.length - 1].to); ; )
    if (o.next(), o.done) {
      if (s)
        return null;
      o = new pn(e.doc, t, 0, Math.max(0, i[i.length - 1].from - 1)), s = !0;
    } else {
      if (s && i.some((l) => l.from == o.value.from))
        continue;
      if (a) {
        let l = e.wordAt(o.value.from);
        if (!l || l.from != o.value.from || l.to != o.value.to)
          continue;
      }
      return o.value;
    }
}
const MI = ({ state: e, dispatch: t }) => {
  let { ranges: r } = e.selection;
  if (r.some((a) => a.from === a.to))
    return UI({ state: e, dispatch: t });
  let i = e.sliceDoc(r[0].from, r[0].to);
  if (e.selection.ranges.some((a) => e.sliceDoc(a.from, a.to) != i))
    return !1;
  let n = wI(e, i);
  return n ? (t(e.update({
    selection: e.selection.addRange(Re.range(n.from, n.to), !1),
    effects: we.scrollIntoView(n.to)
  })), !0) : !1;
}, Pn = /* @__PURE__ */ jt.define({
  combine(e) {
    return ji(e, {
      top: !1,
      caseSensitive: !1,
      literal: !1,
      regexp: !1,
      wholeWord: !1,
      createPanel: (t) => new ZI(t),
      scrollToMatch: (t) => we.scrollIntoView(t)
    });
  }
});
class lE {
  /**
  Create a query object.
  */
  constructor(t) {
    this.search = t.search, this.caseSensitive = !!t.caseSensitive, this.literal = !!t.literal, this.regexp = !!t.regexp, this.replace = t.replace || "", this.valid = !!this.search && (!this.regexp || II(this.search)), this.unquoted = this.unquote(this.search), this.wholeWord = !!t.wholeWord;
  }
  /**
  @internal
  */
  unquote(t) {
    return this.literal ? t : t.replace(/\\([nrt\\])/g, (r, i) => i == "n" ? `
` : i == "r" ? "\r" : i == "t" ? "	" : "\\");
  }
  /**
  Compare this query to another query.
  */
  eq(t) {
    return this.search == t.search && this.replace == t.replace && this.caseSensitive == t.caseSensitive && this.regexp == t.regexp && this.wholeWord == t.wholeWord;
  }
  /**
  @internal
  */
  create() {
    return this.regexp ? new VI(this) : new QI(this);
  }
  /**
  Get a search cursor for this query, searching through the given
  range in the given state.
  */
  getCursor(t, r = 0, i) {
    let n = t.doc ? t : Qi.create({ doc: t });
    return i == null && (i = n.doc.length), this.regexp ? en(this, n, r, i) : Ki(this, n, r, i);
  }
}
class uE {
  constructor(t) {
    this.spec = t;
  }
}
function Ki(e, t, r, i) {
  return new pn(t.doc, e.unquoted, r, i, e.caseSensitive ? void 0 : (n) => n.toLowerCase(), e.wholeWord ? kI(t.doc, t.charCategorizer(t.selection.main.head)) : void 0);
}
function kI(e, t) {
  return (r, i, n, a) => ((a > r || a + n.length < i) && (a = Math.max(0, r - 2), n = e.sliceString(a, Math.min(e.length, i + 2))), (t(Ps(n, r - a)) != Wt.Word || t(_s(n, r - a)) != Wt.Word) && (t(_s(n, i - a)) != Wt.Word || t(Ps(n, i - a)) != Wt.Word));
}
class QI extends uE {
  constructor(t) {
    super(t);
  }
  nextMatch(t, r, i) {
    let n = Ki(this.spec, t, i, t.doc.length).nextOverlapping();
    return n.done && (n = Ki(this.spec, t, 0, r).nextOverlapping()), n.done ? null : n.value;
  }
  // Searching in reverse is, rather than implementing an inverted search
  // cursor, done by scanning chunk after chunk forward.
  prevMatchInRange(t, r, i) {
    for (let n = i; ; ) {
      let a = Math.max(r, n - 1e4 - this.spec.unquoted.length), s = Ki(this.spec, t, a, n), o = null;
      for (; !s.nextOverlapping().done; )
        o = s.value;
      if (o)
        return o;
      if (a == r)
        return null;
      n -= 1e4;
    }
  }
  prevMatch(t, r, i) {
    return this.prevMatchInRange(t, 0, r) || this.prevMatchInRange(t, i, t.doc.length);
  }
  getReplacement(t) {
    return this.spec.unquote(this.spec.replace);
  }
  matchAll(t, r) {
    let i = Ki(this.spec, t, 0, t.doc.length), n = [];
    for (; !i.next().done; ) {
      if (n.length >= r)
        return null;
      n.push(i.value);
    }
    return n;
  }
  highlight(t, r, i, n) {
    let a = Ki(this.spec, t, Math.max(0, r - this.spec.unquoted.length), Math.min(i + this.spec.unquoted.length, t.doc.length));
    for (; !a.next().done; )
      n(a.value.from, a.value.to);
  }
}
function en(e, t, r, i) {
  return new aE(t.doc, e.search, {
    ignoreCase: !e.caseSensitive,
    test: e.wholeWord ? GI(t.charCategorizer(t.selection.main.head)) : void 0
  }, r, i);
}
function Ps(e, t) {
  return e.slice(Vi(e, t, !1), t);
}
function _s(e, t) {
  return e.slice(t, Vi(e, t));
}
function GI(e) {
  return (t, r, i) => !i[0].length || (e(Ps(i.input, i.index)) != Wt.Word || e(_s(i.input, i.index)) != Wt.Word) && (e(_s(i.input, i.index + i[0].length)) != Wt.Word || e(Ps(i.input, i.index + i[0].length)) != Wt.Word);
}
class VI extends uE {
  nextMatch(t, r, i) {
    let n = en(this.spec, t, i, t.doc.length).next();
    return n.done && (n = en(this.spec, t, 0, r).next()), n.done ? null : n.value;
  }
  prevMatchInRange(t, r, i) {
    for (let n = 1; ; n++) {
      let a = Math.max(
        r,
        i - n * 1e4
        /* FindPrev.ChunkSize */
      ), s = en(this.spec, t, a, i), o = null;
      for (; !s.next().done; )
        o = s.value;
      if (o && (a == r || o.from > a + 10))
        return o;
      if (a == r)
        return null;
    }
  }
  prevMatch(t, r, i) {
    return this.prevMatchInRange(t, 0, r) || this.prevMatchInRange(t, i, t.doc.length);
  }
  getReplacement(t) {
    return this.spec.unquote(this.spec.replace).replace(/\$([$&\d+])/g, (r, i) => i == "$" ? "$" : i == "&" ? t.match[0] : i != "0" && +i < t.match.length ? t.match[i] : r);
  }
  matchAll(t, r) {
    let i = en(this.spec, t, 0, t.doc.length), n = [];
    for (; !i.next().done; ) {
      if (n.length >= r)
        return null;
      n.push(i.value);
    }
    return n;
  }
  highlight(t, r, i, n) {
    let a = en(this.spec, t, Math.max(
      0,
      r - 250
      /* RegExp.HighlightMargin */
    ), Math.min(i + 250, t.doc.length));
    for (; !a.next().done; )
      n(a.value.from, a.value.to);
  }
}
const aa = /* @__PURE__ */ Tt.define(), Ju = /* @__PURE__ */ Tt.define(), Ei = /* @__PURE__ */ Xr.define({
  create(e) {
    return new Go(Al(e).create(), null);
  },
  update(e, t) {
    for (let r of t.effects)
      r.is(aa) ? e = new Go(r.value.create(), e.panel) : r.is(Ju) && (e = new Go(e.query, r.value ? Ku : null));
    return e;
  },
  provide: (e) => Eu.from(e, (t) => t.panel)
});
class Go {
  constructor(t, r) {
    this.query = t, this.panel = r;
  }
}
const BI = /* @__PURE__ */ Pe.mark({ class: "cm-searchMatch" }), $I = /* @__PURE__ */ Pe.mark({ class: "cm-searchMatch cm-searchMatch-selected" }), YI = /* @__PURE__ */ gi.fromClass(class {
  constructor(e) {
    this.view = e, this.decorations = this.highlight(e.state.field(Ei));
  }
  update(e) {
    let t = e.state.field(Ei);
    (t != e.startState.field(Ei) || e.docChanged || e.selectionSet || e.viewportChanged) && (this.decorations = this.highlight(t));
  }
  highlight({ query: e, panel: t }) {
    if (!t || !e.spec.valid)
      return Pe.none;
    let { view: r } = this, i = new fu();
    for (let n = 0, a = r.visibleRanges, s = a.length; n < s; n++) {
      let { from: o, to: l } = a[n];
      for (; n < s - 1 && l > a[n + 1].from - 2 * 250; )
        l = a[++n].to;
      e.highlight(r.state, o, l, (c, f) => {
        let p = r.state.selection.ranges.some((O) => O.from == c && O.to == f);
        i.add(c, f, p ? $I : BI);
      });
    }
    return i.finish();
  }
}, {
  decorations: (e) => e.decorations
});
function Aa(e) {
  return (t) => {
    let r = t.state.field(Ei, !1);
    return r && r.query.spec.valid ? e(t, r) : hE(t);
  };
}
const bs = /* @__PURE__ */ Aa((e, { query: t }) => {
  let { to: r } = e.state.selection.main, i = t.nextMatch(e.state, r, r);
  if (!i)
    return !1;
  let n = Re.single(i.from, i.to), a = e.state.facet(Pn);
  return e.dispatch({
    selection: n,
    effects: [ec(e, i), a.scrollToMatch(n.main, e)],
    userEvent: "select.search"
  }), fE(e), !0;
}), vs = /* @__PURE__ */ Aa((e, { query: t }) => {
  let { state: r } = e, { from: i } = r.selection.main, n = t.prevMatch(r, i, i);
  if (!n)
    return !1;
  let a = Re.single(n.from, n.to), s = e.state.facet(Pn);
  return e.dispatch({
    selection: a,
    effects: [ec(e, n), s.scrollToMatch(a.main, e)],
    userEvent: "select.search"
  }), fE(e), !0;
}), FI = /* @__PURE__ */ Aa((e, { query: t }) => {
  let r = t.matchAll(e.state, 1e3);
  return !r || !r.length ? !1 : (e.dispatch({
    selection: Re.create(r.map((i) => Re.range(i.from, i.to))),
    userEvent: "select.search.matches"
  }), !0);
}), WI = ({ state: e, dispatch: t }) => {
  let r = e.selection;
  if (r.ranges.length > 1 || r.main.empty)
    return !1;
  let { from: i, to: n } = r.main, a = [], s = 0;
  for (let o = new pn(e.doc, e.sliceDoc(i, n)); !o.next().done; ) {
    if (a.length > 1e3)
      return !1;
    o.value.from == i && (s = a.length), a.push(Re.range(o.value.from, o.value.to));
  }
  return t(e.update({
    selection: Re.create(a, s),
    userEvent: "select.search.matches"
  })), !0;
}, oh = /* @__PURE__ */ Aa((e, { query: t }) => {
  let { state: r } = e, { from: i, to: n } = r.selection.main;
  if (r.readOnly)
    return !1;
  let a = t.nextMatch(r, i, i);
  if (!a)
    return !1;
  let s = [], o, l, c = [];
  if (a.from == i && a.to == n && (l = r.toText(t.getReplacement(a)), s.push({ from: a.from, to: a.to, insert: l }), a = t.nextMatch(r, a.from, a.to), c.push(we.announce.of(r.phrase("replaced match on line $", r.doc.lineAt(i).number) + "."))), a) {
    let f = s.length == 0 || s[0].from >= a.to ? 0 : a.to - a.from - l.length;
    o = Re.single(a.from - f, a.to - f), c.push(ec(e, a)), c.push(r.facet(Pn).scrollToMatch(o.main, e));
  }
  return e.dispatch({
    changes: s,
    selection: o,
    effects: c,
    userEvent: "input.replace"
  }), !0;
}), XI = /* @__PURE__ */ Aa((e, { query: t }) => {
  if (e.state.readOnly)
    return !1;
  let r = t.matchAll(e.state, 1e9).map((n) => {
    let { from: a, to: s } = n;
    return { from: a, to: s, insert: t.getReplacement(n) };
  });
  if (!r.length)
    return !1;
  let i = e.state.phrase("replaced $ matches", r.length) + ".";
  return e.dispatch({
    changes: r,
    effects: we.announce.of(i),
    userEvent: "input.replace.all"
  }), !0;
});
function Ku(e) {
  return e.state.facet(Pn).createPanel(e);
}
function Al(e, t) {
  var r, i, n, a, s;
  let o = e.selection.main, l = o.empty || o.to > o.from + 100 ? "" : e.sliceDoc(o.from, o.to);
  if (t && !l)
    return t;
  let c = e.facet(Pn);
  return new lE({
    search: ((r = t == null ? void 0 : t.literal) !== null && r !== void 0 ? r : c.literal) ? l : l.replace(/\n/g, "\\n"),
    caseSensitive: (i = t == null ? void 0 : t.caseSensitive) !== null && i !== void 0 ? i : c.caseSensitive,
    literal: (n = t == null ? void 0 : t.literal) !== null && n !== void 0 ? n : c.literal,
    regexp: (a = t == null ? void 0 : t.regexp) !== null && a !== void 0 ? a : c.regexp,
    wholeWord: (s = t == null ? void 0 : t.wholeWord) !== null && s !== void 0 ? s : c.wholeWord
  });
}
function cE(e) {
  let t = Hn(e, Ku);
  return t && t.dom.querySelector("[main-field]");
}
function fE(e) {
  let t = cE(e);
  t && t == e.root.activeElement && t.select();
}
const hE = (e) => {
  let t = e.state.field(Ei, !1);
  if (t && t.panel) {
    let r = cE(e);
    if (r && r != e.root.activeElement) {
      let i = Al(e.state, t.query.spec);
      i.valid && e.dispatch({ effects: aa.of(i) }), r.focus(), r.select();
    }
  } else
    e.dispatch({ effects: [
      Ju.of(!0),
      t ? aa.of(Al(e.state, t.query.spec)) : Tt.appendConfig.of(zI)
    ] });
  return !0;
}, pE = (e) => {
  let t = e.state.field(Ei, !1);
  if (!t || !t.panel)
    return !1;
  let r = Hn(e, Ku);
  return r && r.dom.contains(e.root.activeElement) && e.focus(), e.dispatch({ effects: Ju.of(!1) }), !0;
}, jI = [
  { key: "Mod-f", run: hE, scope: "editor search-panel" },
  { key: "F3", run: bs, shift: vs, scope: "editor search-panel", preventDefault: !0 },
  { key: "Mod-g", run: bs, shift: vs, scope: "editor search-panel", preventDefault: !0 },
  { key: "Escape", run: pE, scope: "editor search-panel" },
  { key: "Mod-Shift-l", run: WI },
  { key: "Mod-Alt-g", run: NI },
  { key: "Mod-d", run: MI, preventDefault: !0 }
];
class ZI {
  constructor(t) {
    this.view = t;
    let r = this.query = t.state.field(Ei).query.spec;
    this.commit = this.commit.bind(this), this.searchField = at("input", {
      value: r.search,
      placeholder: ir(t, "Find"),
      "aria-label": ir(t, "Find"),
      class: "cm-textfield",
      name: "search",
      form: "",
      "main-field": "true",
      onchange: this.commit,
      onkeyup: this.commit
    }), this.replaceField = at("input", {
      value: r.replace,
      placeholder: ir(t, "Replace"),
      "aria-label": ir(t, "Replace"),
      class: "cm-textfield",
      name: "replace",
      form: "",
      onchange: this.commit,
      onkeyup: this.commit
    }), this.caseField = at("input", {
      type: "checkbox",
      name: "case",
      form: "",
      checked: r.caseSensitive,
      onchange: this.commit
    }), this.reField = at("input", {
      type: "checkbox",
      name: "re",
      form: "",
      checked: r.regexp,
      onchange: this.commit
    }), this.wordField = at("input", {
      type: "checkbox",
      name: "word",
      form: "",
      checked: r.wholeWord,
      onchange: this.commit
    });
    function i(n, a, s) {
      return at("button", { class: "cm-button", name: n, onclick: a, type: "button" }, s);
    }
    this.dom = at("div", { onkeydown: (n) => this.keydown(n), class: "cm-search" }, [
      this.searchField,
      i("next", () => bs(t), [ir(t, "next")]),
      i("prev", () => vs(t), [ir(t, "previous")]),
      i("select", () => FI(t), [ir(t, "all")]),
      at("label", null, [this.caseField, ir(t, "match case")]),
      at("label", null, [this.reField, ir(t, "regexp")]),
      at("label", null, [this.wordField, ir(t, "by word")]),
      ...t.state.readOnly ? [] : [
        at("br"),
        this.replaceField,
        i("replace", () => oh(t), [ir(t, "replace")]),
        i("replaceAll", () => XI(t), [ir(t, "replace all")])
      ],
      at("button", {
        name: "close",
        onclick: () => pE(t),
        "aria-label": ir(t, "close"),
        type: "button"
      }, ["×"])
    ]);
  }
  commit() {
    let t = new lE({
      search: this.searchField.value,
      caseSensitive: this.caseField.checked,
      regexp: this.reField.checked,
      wholeWord: this.wordField.checked,
      replace: this.replaceField.value
    });
    t.eq(this.query) || (this.query = t, this.view.dispatch({ effects: aa.of(t) }));
  }
  keydown(t) {
    xT(this.view, t, "search-panel") ? t.preventDefault() : t.keyCode == 13 && t.target == this.searchField ? (t.preventDefault(), (t.shiftKey ? vs : bs)(this.view)) : t.keyCode == 13 && t.target == this.replaceField && (t.preventDefault(), oh(this.view));
  }
  update(t) {
    for (let r of t.transactions)
      for (let i of r.effects)
        i.is(aa) && !i.value.eq(this.query) && this.setQuery(i.value);
  }
  setQuery(t) {
    this.query = t, this.searchField.value = t.search, this.replaceField.value = t.replace, this.caseField.checked = t.caseSensitive, this.reField.checked = t.regexp, this.wordField.checked = t.wholeWord;
  }
  mount() {
    this.searchField.select();
  }
  get pos() {
    return 80;
  }
  get top() {
    return this.view.state.facet(Pn).top;
  }
}
function ir(e, t) {
  return e.state.phrase(t);
}
const Qa = 30, Ga = /[\s\.,:;?!]/;
function ec(e, { from: t, to: r }) {
  let i = e.state.doc.lineAt(t), n = e.state.doc.lineAt(r).to, a = Math.max(i.from, t - Qa), s = Math.min(n, r + Qa), o = e.state.sliceDoc(a, s);
  if (a != i.from) {
    for (let l = 0; l < Qa; l++)
      if (!Ga.test(o[l + 1]) && Ga.test(o[l])) {
        o = o.slice(l);
        break;
      }
  }
  if (s != n) {
    for (let l = o.length - 1; l > o.length - Qa; l--)
      if (!Ga.test(o[l - 1]) && Ga.test(o[l])) {
        o = o.slice(0, l);
        break;
      }
  }
  return we.announce.of(`${e.state.phrase("current match")}. ${o} ${e.state.phrase("on line")} ${i.number}.`);
}
const HI = /* @__PURE__ */ we.baseTheme({
  ".cm-panel.cm-search": {
    padding: "2px 6px 4px",
    position: "relative",
    "& [name=close]": {
      position: "absolute",
      top: "0",
      right: "4px",
      backgroundColor: "inherit",
      border: "none",
      font: "inherit",
      padding: 0,
      margin: 0
    },
    "& input, & button, & label": {
      margin: ".2em .6em .2em 0"
    },
    "& input[type=checkbox]": {
      marginRight: ".2em"
    },
    "& label": {
      fontSize: "80%",
      whiteSpace: "pre"
    }
  },
  "&light .cm-searchMatch": { backgroundColor: "#ffff0054" },
  "&dark .cm-searchMatch": { backgroundColor: "#00ffff8a" },
  "&light .cm-searchMatch-selected": { backgroundColor: "#ff6a0054" },
  "&dark .cm-searchMatch-selected": { backgroundColor: "#ff00ff8a" }
}), zI = [
  Ei,
  /* @__PURE__ */ mn.low(YI),
  HI
];
class qI {
  constructor(t, r, i) {
    this.from = t, this.to = r, this.diagnostic = i;
  }
}
class Di {
  constructor(t, r, i) {
    this.diagnostics = t, this.panel = r, this.selected = i;
  }
  static init(t, r, i) {
    let n = t, a = i.facet(wi).markerFilter;
    a && (n = a(n, i));
    let s = Pe.set(n.map((o) => o.from == o.to || o.from == o.to - 1 && i.doc.lineAt(o.from).to == o.from ? Pe.widget({
      widget: new oN(o),
      diagnostic: o
    }).range(o.from) : Pe.mark({
      attributes: { class: "cm-lintRange cm-lintRange-" + o.severity + (o.markClass ? " " + o.markClass : "") },
      diagnostic: o,
      inclusive: !0
    }).range(o.from, o.to)), !0);
    return new Di(s, r, On(s));
  }
}
function On(e, t = null, r = 0) {
  let i = null;
  return e.between(r, 1e9, (n, a, { spec: s }) => {
    if (!(t && s.diagnostic != t))
      return i = new qI(n, a, s.diagnostic), !1;
  }), i;
}
function JI(e, t) {
  let r = e.startState.doc.lineAt(t.pos);
  return !!(e.effects.some((i) => i.is(tc)) || e.changes.touchesRange(r.from, r.to));
}
function OE(e, t) {
  return e.field(sr, !1) ? t : t.concat(Tt.appendConfig.of(SE));
}
function KI(e, t) {
  return {
    effects: OE(e, [tc.of(t)])
  };
}
const tc = /* @__PURE__ */ Tt.define(), rc = /* @__PURE__ */ Tt.define(), EE = /* @__PURE__ */ Tt.define(), sr = /* @__PURE__ */ Xr.define({
  create() {
    return new Di(Pe.none, null, null);
  },
  update(e, t) {
    if (t.docChanged) {
      let r = e.diagnostics.map(t.changes), i = null;
      if (e.selected) {
        let n = t.changes.mapPos(e.selected.from, 1);
        i = On(r, e.selected.diagnostic, n) || On(r, null, n);
      }
      e = new Di(r, e.panel, i);
    }
    for (let r of t.effects)
      r.is(tc) ? e = Di.init(r.value, e.panel, t.state) : r.is(rc) ? e = new Di(e.diagnostics, r.value ? Hs.open : null, e.selected) : r.is(EE) && (e = new Di(e.diagnostics, e.panel, r.value));
    return e;
  },
  provide: (e) => [
    Eu.from(e, (t) => t.panel),
    we.decorations.from(e, (t) => t.diagnostics)
  ]
}), eN = /* @__PURE__ */ Pe.mark({ class: "cm-lintRange cm-lintRange-active", inclusive: !0 });
function tN(e, t, r) {
  let { diagnostics: i } = e.state.field(sr), n = [], a = 2e8, s = 0;
  i.between(t - (r < 0 ? 1 : 0), t + (r > 0 ? 1 : 0), (l, c, { spec: f }) => {
    t >= l && t <= c && (l == c || (t > l || r > 0) && (t < c || r < 0)) && (n.push(f.diagnostic), a = Math.min(l, a), s = Math.max(c, s));
  });
  let o = e.state.facet(wi).tooltipFilter;
  return o && (n = o(n, e.state)), n.length ? {
    pos: a,
    end: s,
    above: e.state.doc.lineAt(a).to < s,
    create() {
      return { dom: rN(e, n) };
    }
  } : null;
}
function rN(e, t) {
  return at("ul", { class: "cm-tooltip-lint" }, t.map((r) => TE(e, r, !1)));
}
const iN = (e) => {
  let t = e.state.field(sr, !1);
  (!t || !t.panel) && e.dispatch({ effects: OE(e.state, [rc.of(!0)]) });
  let r = Hn(e, Hs.open);
  return r && r.dom.querySelector(".cm-panel-lint ul").focus(), !0;
}, lh = (e) => {
  let t = e.state.field(sr, !1);
  return !t || !t.panel ? !1 : (e.dispatch({ effects: rc.of(!1) }), !0);
}, nN = (e) => {
  let t = e.state.field(sr, !1);
  if (!t)
    return !1;
  let r = e.state.selection.main, i = t.diagnostics.iter(r.to + 1);
  return !i.value && (i = t.diagnostics.iter(0), !i.value || i.from == r.from && i.to == r.to) ? !1 : (e.dispatch({ selection: { anchor: i.from, head: i.to }, scrollIntoView: !0 }), !0);
}, aN = [
  { key: "Mod-Shift-m", run: iN, preventDefault: !0 },
  { key: "F8", run: nN }
], sN = /* @__PURE__ */ gi.fromClass(class {
  constructor(e) {
    this.view = e, this.timeout = -1, this.set = !0;
    let { delay: t } = e.state.facet(wi);
    this.lintTime = Date.now() + t, this.run = this.run.bind(this), this.timeout = setTimeout(this.run, t);
  }
  run() {
    let e = Date.now();
    if (e < this.lintTime - 10)
      this.timeout = setTimeout(this.run, this.lintTime - e);
    else {
      this.set = !1;
      let { state: t } = this.view, { sources: r } = t.facet(wi);
      r.length && Promise.all(r.map((i) => Promise.resolve(i(this.view)))).then((i) => {
        let n = i.reduce((a, s) => a.concat(s));
        this.view.state.doc == t.doc && this.view.dispatch(KI(this.view.state, n));
      }, (i) => {
        Zn(this.view.state, i);
      });
    }
  }
  update(e) {
    let t = e.state.facet(wi);
    (e.docChanged || t != e.startState.facet(wi) || t.needsRefresh && t.needsRefresh(e)) && (this.lintTime = Date.now() + t.delay, this.set || (this.set = !0, this.timeout = setTimeout(this.run, t.delay)));
  }
  force() {
    this.set && (this.lintTime = Date.now(), this.run());
  }
  destroy() {
    clearTimeout(this.timeout);
  }
}), wi = /* @__PURE__ */ jt.define({
  combine(e) {
    return Object.assign({ sources: e.map((t) => t.source).filter((t) => t != null) }, ji(e.map((t) => t.config), {
      delay: 750,
      markerFilter: null,
      tooltipFilter: null,
      needsRefresh: null
    }, {
      needsRefresh: (t, r) => t ? r ? (i) => t(i) || r(i) : t : r
    }));
  }
});
function uh(e, t = {}) {
  return [
    wi.of({ source: e, config: t }),
    sN,
    SE
  ];
}
function dE(e) {
  let t = [];
  if (e)
    e:
      for (let { name: r } of e) {
        for (let i = 0; i < r.length; i++) {
          let n = r[i];
          if (/[a-zA-Z]/.test(n) && !t.some((a) => a.toLowerCase() == n.toLowerCase())) {
            t.push(n);
            continue e;
          }
        }
        t.push("");
      }
  return t;
}
function TE(e, t, r) {
  var i;
  let n = r ? dE(t.actions) : [];
  return at("li", { class: "cm-diagnostic cm-diagnostic-" + t.severity }, at("span", { class: "cm-diagnosticText" }, t.renderMessage ? t.renderMessage() : t.message), (i = t.actions) === null || i === void 0 ? void 0 : i.map((a, s) => {
    let o = !1, l = (O) => {
      if (O.preventDefault(), o)
        return;
      o = !0;
      let d = On(e.state.field(sr).diagnostics, t);
      d && a.apply(e, d.from, d.to);
    }, { name: c } = a, f = n[s] ? c.indexOf(n[s]) : -1, p = f < 0 ? c : [
      c.slice(0, f),
      at("u", c.slice(f, f + 1)),
      c.slice(f + 1)
    ];
    return at("button", {
      type: "button",
      class: "cm-diagnosticAction",
      onclick: l,
      onmousedown: l,
      "aria-label": ` Action: ${c}${f < 0 ? "" : ` (access key "${n[s]})"`}.`
    }, p);
  }), t.source && at("div", { class: "cm-diagnosticSource" }, t.source));
}
class oN extends Gs {
  constructor(t) {
    super(), this.diagnostic = t;
  }
  eq(t) {
    return t.diagnostic == this.diagnostic;
  }
  toDOM() {
    return at("span", { class: "cm-lintPoint cm-lintPoint-" + this.diagnostic.severity });
  }
}
class ch {
  constructor(t, r) {
    this.diagnostic = r, this.id = "item_" + Math.floor(Math.random() * 4294967295).toString(16), this.dom = TE(t, r, !0), this.dom.id = this.id, this.dom.setAttribute("role", "option");
  }
}
class Hs {
  constructor(t) {
    this.view = t, this.items = [];
    let r = (n) => {
      if (n.keyCode == 27)
        lh(this.view), this.view.focus();
      else if (n.keyCode == 38 || n.keyCode == 33)
        this.moveSelection((this.selectedIndex - 1 + this.items.length) % this.items.length);
      else if (n.keyCode == 40 || n.keyCode == 34)
        this.moveSelection((this.selectedIndex + 1) % this.items.length);
      else if (n.keyCode == 36)
        this.moveSelection(0);
      else if (n.keyCode == 35)
        this.moveSelection(this.items.length - 1);
      else if (n.keyCode == 13)
        this.view.focus();
      else if (n.keyCode >= 65 && n.keyCode <= 90 && this.selectedIndex >= 0) {
        let { diagnostic: a } = this.items[this.selectedIndex], s = dE(a.actions);
        for (let o = 0; o < s.length; o++)
          if (s[o].toUpperCase().charCodeAt(0) == n.keyCode) {
            let l = On(this.view.state.field(sr).diagnostics, a);
            l && a.actions[o].apply(t, l.from, l.to);
          }
      } else
        return;
      n.preventDefault();
    }, i = (n) => {
      for (let a = 0; a < this.items.length; a++)
        this.items[a].dom.contains(n.target) && this.moveSelection(a);
    };
    this.list = at("ul", {
      tabIndex: 0,
      role: "listbox",
      "aria-label": this.view.state.phrase("Diagnostics"),
      onkeydown: r,
      onclick: i
    }), this.dom = at("div", { class: "cm-panel-lint" }, this.list, at("button", {
      type: "button",
      name: "close",
      "aria-label": this.view.state.phrase("close"),
      onclick: () => lh(this.view)
    }, "×")), this.update();
  }
  get selectedIndex() {
    let t = this.view.state.field(sr).selected;
    if (!t)
      return -1;
    for (let r = 0; r < this.items.length; r++)
      if (this.items[r].diagnostic == t.diagnostic)
        return r;
    return -1;
  }
  update() {
    let { diagnostics: t, selected: r } = this.view.state.field(sr), i = 0, n = !1, a = null;
    for (t.between(0, this.view.state.doc.length, (s, o, { spec: l }) => {
      let c = -1, f;
      for (let p = i; p < this.items.length; p++)
        if (this.items[p].diagnostic == l.diagnostic) {
          c = p;
          break;
        }
      c < 0 ? (f = new ch(this.view, l.diagnostic), this.items.splice(i, 0, f), n = !0) : (f = this.items[c], c > i && (this.items.splice(i, c - i), n = !0)), r && f.diagnostic == r.diagnostic ? f.dom.hasAttribute("aria-selected") || (f.dom.setAttribute("aria-selected", "true"), a = f) : f.dom.hasAttribute("aria-selected") && f.dom.removeAttribute("aria-selected"), i++;
    }); i < this.items.length && !(this.items.length == 1 && this.items[0].diagnostic.from < 0); )
      n = !0, this.items.pop();
    this.items.length == 0 && (this.items.push(new ch(this.view, {
      from: -1,
      to: -1,
      severity: "info",
      message: this.view.state.phrase("No diagnostics")
    })), n = !0), a ? (this.list.setAttribute("aria-activedescendant", a.id), this.view.requestMeasure({
      key: this,
      read: () => ({ sel: a.dom.getBoundingClientRect(), panel: this.list.getBoundingClientRect() }),
      write: ({ sel: s, panel: o }) => {
        let l = o.height / this.list.offsetHeight;
        s.top < o.top ? this.list.scrollTop -= (o.top - s.top) / l : s.bottom > o.bottom && (this.list.scrollTop += (s.bottom - o.bottom) / l);
      }
    })) : this.selectedIndex < 0 && this.list.removeAttribute("aria-activedescendant"), n && this.sync();
  }
  sync() {
    let t = this.list.firstChild;
    function r() {
      let i = t;
      t = i.nextSibling, i.remove();
    }
    for (let i of this.items)
      if (i.dom.parentNode == this.list) {
        for (; t != i.dom; )
          r();
        t = i.dom.nextSibling;
      } else
        this.list.insertBefore(i.dom, t);
    for (; t; )
      r();
  }
  moveSelection(t) {
    if (this.selectedIndex < 0)
      return;
    let r = this.view.state.field(sr), i = On(r.diagnostics, this.items[t].diagnostic);
    i && this.view.dispatch({
      selection: { anchor: i.from, head: i.to },
      scrollIntoView: !0,
      effects: EE.of(i)
    });
  }
  static open(t) {
    return new Hs(t);
  }
}
function lN(e, t = 'viewBox="0 0 40 40"') {
  return `url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" ${t}>${encodeURIComponent(e)}</svg>')`;
}
function Va(e) {
  return lN(`<path d="m0 2.5 l2 -1.5 l1 0 l2 1.5 l1 0" stroke="${e}" fill="none" stroke-width=".7"/>`, 'width="6" height="3"');
}
const uN = /* @__PURE__ */ we.baseTheme({
  ".cm-diagnostic": {
    padding: "3px 6px 3px 8px",
    marginLeft: "-1px",
    display: "block",
    whiteSpace: "pre-wrap"
  },
  ".cm-diagnostic-error": { borderLeft: "5px solid #d11" },
  ".cm-diagnostic-warning": { borderLeft: "5px solid orange" },
  ".cm-diagnostic-info": { borderLeft: "5px solid #999" },
  ".cm-diagnostic-hint": { borderLeft: "5px solid #66d" },
  ".cm-diagnosticAction": {
    font: "inherit",
    border: "none",
    padding: "2px 4px",
    backgroundColor: "#444",
    color: "white",
    borderRadius: "3px",
    marginLeft: "8px",
    cursor: "pointer"
  },
  ".cm-diagnosticSource": {
    fontSize: "70%",
    opacity: 0.7
  },
  ".cm-lintRange": {
    backgroundPosition: "left bottom",
    backgroundRepeat: "repeat-x",
    paddingBottom: "0.7px"
  },
  ".cm-lintRange-error": { backgroundImage: /* @__PURE__ */ Va("#d11") },
  ".cm-lintRange-warning": { backgroundImage: /* @__PURE__ */ Va("orange") },
  ".cm-lintRange-info": { backgroundImage: /* @__PURE__ */ Va("#999") },
  ".cm-lintRange-hint": { backgroundImage: /* @__PURE__ */ Va("#66d") },
  ".cm-lintRange-active": { backgroundColor: "#ffdd9980" },
  ".cm-tooltip-lint": {
    padding: 0,
    margin: 0
  },
  ".cm-lintPoint": {
    position: "relative",
    "&:after": {
      content: '""',
      position: "absolute",
      bottom: 0,
      left: "-2px",
      borderLeft: "3px solid transparent",
      borderRight: "3px solid transparent",
      borderBottom: "4px solid #d11"
    }
  },
  ".cm-lintPoint-warning": {
    "&:after": { borderBottomColor: "orange" }
  },
  ".cm-lintPoint-info": {
    "&:after": { borderBottomColor: "#999" }
  },
  ".cm-lintPoint-hint": {
    "&:after": { borderBottomColor: "#66d" }
  },
  ".cm-panel.cm-panel-lint": {
    position: "relative",
    "& ul": {
      maxHeight: "100px",
      overflowY: "auto",
      "& [aria-selected]": {
        backgroundColor: "#ddd",
        "& u": { textDecoration: "underline" }
      },
      "&:focus [aria-selected]": {
        background_fallback: "#bdf",
        backgroundColor: "Highlight",
        color_fallback: "white",
        color: "HighlightText"
      },
      "& u": { textDecoration: "none" },
      padding: 0,
      margin: 0
    },
    "& [name=close]": {
      position: "absolute",
      top: "0",
      right: "2px",
      background: "inherit",
      border: "none",
      font: "inherit",
      padding: 0,
      margin: 0
    }
  }
}), SE = [
  sr,
  /* @__PURE__ */ we.decorations.compute([sr], (e) => {
    let { selected: t, panel: r } = e.field(sr);
    return !t || !r || t.from == t.to ? Pe.none : Pe.set([
      eN.range(t.from, t.to)
    ]);
  }),
  /* @__PURE__ */ DT(tN, { hideOn: JI }),
  uN
];
function ic(e, t) {
  if (t)
    return !0;
  const {
    state: r,
    pos: i
  } = e, n = r.sliceDoc(0, i), a = Ea(n);
  let s = 0;
  for (const o of a) {
    const l = s, c = o.indexOf("{{"), f = c > -1, p = c + l + 2, O = o.indexOf("}}"), d = O > -1, g = O + l;
    if (f && p <= i && (!d || i <= g))
      return !0;
    s += o.length;
  }
  return !1;
}
var gl = { exports: {} }, Ba = { exports: {} }, Vo = {
  3: "abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile",
  5: "class enum extends super const export import",
  6: "enum",
  strict: "implements interface let package private protected public static yield",
  strictBind: "eval arguments"
}, Bo = "break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this", cN = {
  5: Bo,
  "5module": Bo + " export import",
  6: Bo + " const class extends export import super"
}, fN = /^in(stanceof)?$/, nc = "ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙՠ-ֈא-תׯ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࡠ-ࡪࢠ-ࢴࢶ-ࢽऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱৼਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡૹଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘ-ౚౠౡಀಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൔ-ൖൟ-ൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄຆ-ຊຌ-ຣລວ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏽᏸ-ᏽᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡸᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᲀ-ᲈᲐ-ᲺᲽ-Ჿᳩ-ᳬᳮ-ᳳᳵᳶᳺᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕ℘-ℝℤΩℨK-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々-〇〡-〩〱-〵〸-〼ぁ-ゖ゛-ゟァ-ヺー-ヿㄅ-ㄯㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿯ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞿꟂ-Ᶎꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꣽꣾꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭧꭰ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ", mE = "‌‍·̀-ͯ·҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-٩ٰۖ-ۜ۟-۪ۤۧۨ-ۭ۰-۹ܑܰ-݊ަ-ް߀-߉߫-߽߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛࣓-ࣣ࣡-ःऺ-़ा-ॏ॑-ॗॢॣ०-९ঁ-ঃ়া-ৄেৈো-্ৗৢৣ০-৯৾ਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣ૦-૯ૺ-૿ଁ-ଃ଼ା-ୄେୈୋ-୍ୖୗୢୣ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఀ-ఄా-ౄె-ైొ-్ౕౖౢౣ౦-౯ಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣ೦-೯ഀ-ഃ഻഼ാ-ൄെ-ൈൊ-്ൗൢൣ൦-൯ංඃ්ා-ුූෘ-ෟ෦-෯ෲෳัิ-ฺ็-๎๐-๙ັິ-ຼ່-ໍ໐-໙༘༙༠-༩༹༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှ၀-၉ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟፩-፱ᜒ-᜔ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝០-៩᠋-᠍᠐-᠙ᢩᤠ-ᤫᤰ-᤻᥆-᥏᧐-᧚ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼-᪉᪐-᪙᪰-᪽ᬀ-ᬄ᬴-᭄᭐-᭙᭫-᭳ᮀ-ᮂᮡ-ᮭ᮰-᮹᯦-᯳ᰤ-᰷᱀-᱉᱐-᱙᳐-᳔᳒-᳨᳭᳴᳷-᳹᷀-᷹᷻-᷿‿⁀⁔⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯꘠-꘩꙯ꙴ-꙽ꚞꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧꢀꢁꢴ-ꣅ꣐-꣙꣠-꣱ꣿ-꤉ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀꧐-꧙ꧥ꧰-꧹ꨩ-ꨶꩃꩌꩍ꩐-꩙ꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭꯰-꯹ﬞ︀-️︠-︯︳︴﹍-﹏０-９＿", hN = new RegExp("[" + nc + "]"), pN = new RegExp("[" + nc + mE + "]");
nc = mE = null;
var RE = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 477, 28, 11, 0, 9, 21, 155, 22, 13, 52, 76, 44, 33, 24, 27, 35, 30, 0, 12, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 0, 33, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 230, 43, 117, 63, 32, 0, 161, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 35, 56, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 270, 921, 103, 110, 18, 195, 2749, 1070, 4050, 582, 8634, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 754, 9486, 286, 50, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 2357, 44, 11, 6, 17, 0, 370, 43, 1301, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42710, 42, 4148, 12, 221, 3, 5761, 15, 7472, 3104, 541], ON = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 525, 10, 176, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 4, 9, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 232, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 135, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 19723, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 419, 13, 1495, 6, 110, 6, 6, 9, 792487, 239];
function yl(e, t) {
  for (var r = 65536, i = 0; i < t.length; i += 2) {
    if (r += t[i], r > e)
      return !1;
    if (r += t[i + 1], r >= e)
      return !0;
  }
}
function ti(e, t) {
  return e < 65 ? e === 36 : e < 91 ? !0 : e < 97 ? e === 95 : e < 123 ? !0 : e <= 65535 ? e >= 170 && hN.test(String.fromCharCode(e)) : t === !1 ? !1 : yl(e, RE);
}
function Fi(e, t) {
  return e < 48 ? e === 36 : e < 58 ? !0 : e < 65 ? !1 : e < 91 ? !0 : e < 97 ? e === 95 : e < 123 ? !0 : e <= 65535 ? e >= 170 && pN.test(String.fromCharCode(e)) : t === !1 ? !1 : yl(e, RE) || yl(e, ON);
}
var Ze = function(t, r) {
  r === void 0 && (r = {}), this.label = t, this.keyword = r.keyword, this.beforeExpr = !!r.beforeExpr, this.startsExpr = !!r.startsExpr, this.isLoop = !!r.isLoop, this.isAssign = !!r.isAssign, this.prefix = !!r.prefix, this.postfix = !!r.postfix, this.binop = r.binop || null, this.updateContext = null;
};
function Ir(e, t) {
  return new Ze(e, { beforeExpr: !0, binop: t });
}
var pr = { beforeExpr: !0 }, nr = { startsExpr: !0 }, zs = {};
function Ve(e, t) {
  return t === void 0 && (t = {}), t.keyword = e, zs[e] = new Ze(e, t);
}
var v = {
  num: new Ze("num", nr),
  regexp: new Ze("regexp", nr),
  string: new Ze("string", nr),
  name: new Ze("name", nr),
  eof: new Ze("eof"),
  // Punctuation token types.
  bracketL: new Ze("[", { beforeExpr: !0, startsExpr: !0 }),
  bracketR: new Ze("]"),
  braceL: new Ze("{", { beforeExpr: !0, startsExpr: !0 }),
  braceR: new Ze("}"),
  parenL: new Ze("(", { beforeExpr: !0, startsExpr: !0 }),
  parenR: new Ze(")"),
  comma: new Ze(",", pr),
  semi: new Ze(";", pr),
  colon: new Ze(":", pr),
  dot: new Ze("."),
  question: new Ze("?", pr),
  arrow: new Ze("=>", pr),
  template: new Ze("template"),
  invalidTemplate: new Ze("invalidTemplate"),
  ellipsis: new Ze("...", pr),
  backQuote: new Ze("`", nr),
  dollarBraceL: new Ze("${", { beforeExpr: !0, startsExpr: !0 }),
  // Operators. These carry several kinds of properties to help the
  // parser use them properly (the presence of these properties is
  // what categorizes them as operators).
  //
  // `binop`, when present, specifies that this operator is a binary
  // operator, and will refer to its precedence.
  //
  // `prefix` and `postfix` mark the operator as a prefix or postfix
  // unary operator.
  //
  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as
  // binary operators with a very low precedence, that should result
  // in AssignmentExpression nodes.
  eq: new Ze("=", { beforeExpr: !0, isAssign: !0 }),
  assign: new Ze("_=", { beforeExpr: !0, isAssign: !0 }),
  incDec: new Ze("++/--", { prefix: !0, postfix: !0, startsExpr: !0 }),
  prefix: new Ze("!/~", { beforeExpr: !0, prefix: !0, startsExpr: !0 }),
  logicalOR: Ir("||", 1),
  logicalAND: Ir("&&", 2),
  bitwiseOR: Ir("|", 3),
  bitwiseXOR: Ir("^", 4),
  bitwiseAND: Ir("&", 5),
  equality: Ir("==/!=/===/!==", 6),
  relational: Ir("</>/<=/>=", 7),
  bitShift: Ir("<</>>/>>>", 8),
  plusMin: new Ze("+/-", { beforeExpr: !0, binop: 9, prefix: !0, startsExpr: !0 }),
  modulo: Ir("%", 10),
  star: Ir("*", 10),
  slash: Ir("/", 10),
  starstar: new Ze("**", { beforeExpr: !0 }),
  // Keyword token types.
  _break: Ve("break"),
  _case: Ve("case", pr),
  _catch: Ve("catch"),
  _continue: Ve("continue"),
  _debugger: Ve("debugger"),
  _default: Ve("default", pr),
  _do: Ve("do", { isLoop: !0, beforeExpr: !0 }),
  _else: Ve("else", pr),
  _finally: Ve("finally"),
  _for: Ve("for", { isLoop: !0 }),
  _function: Ve("function", nr),
  _if: Ve("if"),
  _return: Ve("return", pr),
  _switch: Ve("switch"),
  _throw: Ve("throw", pr),
  _try: Ve("try"),
  _var: Ve("var"),
  _const: Ve("const"),
  _while: Ve("while", { isLoop: !0 }),
  _with: Ve("with"),
  _new: Ve("new", { beforeExpr: !0, startsExpr: !0 }),
  _this: Ve("this", nr),
  _super: Ve("super", nr),
  _class: Ve("class", nr),
  _extends: Ve("extends", pr),
  _export: Ve("export"),
  _import: Ve("import", nr),
  _null: Ve("null", nr),
  _true: Ve("true", nr),
  _false: Ve("false", nr),
  _in: Ve("in", { beforeExpr: !0, binop: 7 }),
  _instanceof: Ve("instanceof", { beforeExpr: !0, binop: 7 }),
  _typeof: Ve("typeof", { beforeExpr: !0, prefix: !0, startsExpr: !0 }),
  _void: Ve("void", { beforeExpr: !0, prefix: !0, startsExpr: !0 }),
  _delete: Ve("delete", { beforeExpr: !0, prefix: !0, startsExpr: !0 })
}, Ar = /\r\n?|\n|\u2028|\u2029/, En = new RegExp(Ar.source, "g");
function _n(e, t) {
  return e === 10 || e === 13 || !t && (e === 8232 || e === 8233);
}
var ac = /[\u1680\u2000-\u200a\u202f\u205f\u3000\ufeff]/, Br = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g, AE = Object.prototype, EN = AE.hasOwnProperty, dN = AE.toString;
function qs(e, t) {
  return EN.call(e, t);
}
var fh = Array.isArray || function(e) {
  return dN.call(e) === "[object Array]";
};
function Mi(e) {
  return new RegExp("^(?:" + e.replace(/ /g, "|") + ")$");
}
var dn = function(t, r) {
  this.line = t, this.column = r;
};
dn.prototype.offset = function(t) {
  return new dn(this.line, this.column + t);
};
var ga = function(t, r, i) {
  this.start = r, this.end = i, t.sourceFile !== null && (this.source = t.sourceFile);
};
function sc(e, t) {
  for (var r = 1, i = 0; ; ) {
    En.lastIndex = i;
    var n = En.exec(e);
    if (n && n.index < t)
      ++r, i = n.index + n[0].length;
    else
      return new dn(r, t - i);
  }
}
var Cs = {
  // `ecmaVersion` indicates the ECMAScript version to parse. Must be
  // either 3, 5, 6 (2015), 7 (2016), 8 (2017), 9 (2018), or 10
  // (2019). This influences support for strict mode, the set of
  // reserved words, and support for new syntax features. The default
  // is 9.
  ecmaVersion: 9,
  // `sourceType` indicates the mode the code should be parsed in.
  // Can be either `"script"` or `"module"`. This influences global
  // strict mode and parsing of `import` and `export` declarations.
  sourceType: "script",
  // `onInsertedSemicolon` can be a callback that will be called
  // when a semicolon is automatically inserted. It will be passed
  // the position of the comma as an offset, and if `locations` is
  // enabled, it is given the location as a `{line, column}` object
  // as second argument.
  onInsertedSemicolon: null,
  // `onTrailingComma` is similar to `onInsertedSemicolon`, but for
  // trailing commas.
  onTrailingComma: null,
  // By default, reserved words are only enforced if ecmaVersion >= 5.
  // Set `allowReserved` to a boolean value to explicitly turn this on
  // an off. When this option has the value "never", reserved words
  // and keywords can also not be used as property names.
  allowReserved: null,
  // When enabled, a return at the top level is not considered an
  // error.
  allowReturnOutsideFunction: !1,
  // When enabled, import/export statements are not constrained to
  // appearing at the top of the program.
  allowImportExportEverywhere: !1,
  // When enabled, await identifiers are allowed to appear at the top-level scope,
  // but they are still not allowed in non-async functions.
  allowAwaitOutsideFunction: !1,
  // When enabled, hashbang directive in the beginning of file
  // is allowed and treated as a line comment.
  allowHashBang: !1,
  // When `locations` is on, `loc` properties holding objects with
  // `start` and `end` properties in `{line, column}` form (with
  // line being 1-based and column 0-based) will be attached to the
  // nodes.
  locations: !1,
  // A function can be passed as `onToken` option, which will
  // cause Acorn to call that function with object in the same
  // format as tokens returned from `tokenizer().getToken()`. Note
  // that you are not allowed to call the parser from the
  // callback—that will corrupt its internal state.
  onToken: null,
  // A function can be passed as `onComment` option, which will
  // cause Acorn to call that function with `(block, text, start,
  // end)` parameters whenever a comment is skipped. `block` is a
  // boolean indicating whether this is a block (`/* */`) comment,
  // `text` is the content of the comment, and `start` and `end` are
  // character offsets that denote the start and end of the comment.
  // When the `locations` option is on, two more parameters are
  // passed, the full `{line, column}` locations of the start and
  // end of the comments. Note that you are not allowed to call the
  // parser from the callback—that will corrupt its internal state.
  onComment: null,
  // Nodes have their start and end characters offsets recorded in
  // `start` and `end` properties (directly on the node, rather than
  // the `loc` object, which holds line/column data. To also add a
  // [semi-standardized][range] `range` property holding a `[start,
  // end]` array with the same numbers, set the `ranges` option to
  // `true`.
  //
  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678
  ranges: !1,
  // It is possible to parse multiple files into a single AST by
  // passing the tree produced by parsing the first file as
  // `program` option in subsequent parses. This will add the
  // toplevel forms of the parsed file to the `Program` (top) node
  // of an existing parse tree.
  program: null,
  // When `locations` is on, you can pass this to record the source
  // file in every node's `loc` object.
  sourceFile: null,
  // This value, if given, is stored in every node, whether
  // `locations` is on or off.
  directSourceFile: null,
  // When enabled, parenthesized expressions are represented by
  // (non-standard) ParenthesizedExpression nodes
  preserveParens: !1
};
function TN(e) {
  var t = {};
  for (var r in Cs)
    t[r] = e && qs(e, r) ? e[r] : Cs[r];
  if (t.ecmaVersion >= 2015 && (t.ecmaVersion -= 2009), t.allowReserved == null && (t.allowReserved = t.ecmaVersion < 5), fh(t.onToken)) {
    var i = t.onToken;
    t.onToken = function(n) {
      return i.push(n);
    };
  }
  return fh(t.onComment) && (t.onComment = SN(t, t.onComment)), t;
}
function SN(e, t) {
  return function(r, i, n, a, s, o) {
    var l = {
      type: r ? "Block" : "Line",
      value: i,
      start: n,
      end: a
    };
    e.locations && (l.loc = new ga(this, s, o)), e.ranges && (l.range = [n, a]), t.push(l);
  };
}
var sa = 1, ya = 2, oc = sa | ya, gE = 4, yE = 8, IE = 16, NE = 32, PE = 64, _E = 128;
function lc(e, t) {
  return ya | (e ? gE : 0) | (t ? yE : 0);
}
var hh = 0, uc = 1, Kr = 2, bE = 3, vE = 4, CE = 5, Et = function(t, r, i) {
  this.options = t = TN(t), this.sourceFile = t.sourceFile, this.keywords = Mi(cN[t.ecmaVersion >= 6 ? 6 : t.sourceType === "module" ? "5module" : 5]);
  var n = "";
  if (t.allowReserved !== !0) {
    for (var a = t.ecmaVersion; !(n = Vo[a]); a--)
      ;
    t.sourceType === "module" && (n += " await");
  }
  this.reservedWords = Mi(n);
  var s = (n ? n + " " : "") + Vo.strict;
  this.reservedWordsStrict = Mi(s), this.reservedWordsStrictBind = Mi(s + " " + Vo.strictBind), this.input = String(r), this.containsEsc = !1, i ? (this.pos = i, this.lineStart = this.input.lastIndexOf(`
`, i - 1) + 1, this.curLine = this.input.slice(0, this.lineStart).split(Ar).length) : (this.pos = this.lineStart = 0, this.curLine = 1), this.type = v.eof, this.value = null, this.start = this.end = this.pos, this.startLoc = this.endLoc = this.curPosition(), this.lastTokEndLoc = this.lastTokStartLoc = null, this.lastTokStart = this.lastTokEnd = this.pos, this.context = this.initialContext(), this.exprAllowed = !0, this.inModule = t.sourceType === "module", this.strict = this.inModule || this.strictDirective(this.pos), this.potentialArrowAt = -1, this.yieldPos = this.awaitPos = this.awaitIdentPos = 0, this.labels = [], this.undefinedExports = {}, this.pos === 0 && t.allowHashBang && this.input.slice(0, 2) === "#!" && this.skipLineComment(2), this.scopeStack = [], this.enterScope(sa), this.regexpState = null;
}, Zi = { inFunction: { configurable: !0 }, inGenerator: { configurable: !0 }, inAsync: { configurable: !0 }, allowSuper: { configurable: !0 }, allowDirectSuper: { configurable: !0 }, treatFunctionsAsVar: { configurable: !0 } };
Et.prototype.parse = function() {
  var t = this.options.program || this.startNode();
  return this.nextToken(), this.parseTopLevel(t);
};
Zi.inFunction.get = function() {
  return (this.currentVarScope().flags & ya) > 0;
};
Zi.inGenerator.get = function() {
  return (this.currentVarScope().flags & yE) > 0;
};
Zi.inAsync.get = function() {
  return (this.currentVarScope().flags & gE) > 0;
};
Zi.allowSuper.get = function() {
  return (this.currentThisScope().flags & PE) > 0;
};
Zi.allowDirectSuper.get = function() {
  return (this.currentThisScope().flags & _E) > 0;
};
Zi.treatFunctionsAsVar.get = function() {
  return this.treatFunctionsAsVarInScope(this.currentScope());
};
Et.prototype.inNonArrowFunction = function() {
  return (this.currentThisScope().flags & ya) > 0;
};
Et.extend = function() {
  for (var t = [], r = arguments.length; r--; )
    t[r] = arguments[r];
  for (var i = this, n = 0; n < t.length; n++)
    i = t[n](i);
  return i;
};
Et.parse = function(t, r) {
  return new this(r, t).parse();
};
Et.parseExpressionAt = function(t, r, i) {
  var n = new this(i, t, r);
  return n.nextToken(), n.parseExpression();
};
Et.tokenizer = function(t, r) {
  return new this(r, t);
};
Object.defineProperties(Et.prototype, Zi);
var Zt = Et.prototype, mN = /^(?:'((?:\\.|[^'\\])*?)'|"((?:\\.|[^"\\])*?)")/;
Zt.strictDirective = function(e) {
  for (; ; ) {
    Br.lastIndex = e, e += Br.exec(this.input)[0].length;
    var t = mN.exec(this.input.slice(e));
    if (!t)
      return !1;
    if ((t[1] || t[2]) === "use strict")
      return !0;
    e += t[0].length, Br.lastIndex = e, e += Br.exec(this.input)[0].length, this.input[e] === ";" && e++;
  }
};
Zt.eat = function(e) {
  return this.type === e ? (this.next(), !0) : !1;
};
Zt.isContextual = function(e) {
  return this.type === v.name && this.value === e && !this.containsEsc;
};
Zt.eatContextual = function(e) {
  return this.isContextual(e) ? (this.next(), !0) : !1;
};
Zt.expectContextual = function(e) {
  this.eatContextual(e) || this.unexpected();
};
Zt.canInsertSemicolon = function() {
  return this.type === v.eof || this.type === v.braceR || Ar.test(this.input.slice(this.lastTokEnd, this.start));
};
Zt.insertSemicolon = function() {
  if (this.canInsertSemicolon())
    return this.options.onInsertedSemicolon && this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc), !0;
};
Zt.semicolon = function() {
  !this.eat(v.semi) && !this.insertSemicolon() && this.unexpected();
};
Zt.afterTrailingComma = function(e, t) {
  if (this.type === e)
    return this.options.onTrailingComma && this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc), t || this.next(), !0;
};
Zt.expect = function(e) {
  this.eat(e) || this.unexpected();
};
Zt.unexpected = function(e) {
  this.raise(e ?? this.start, "Unexpected token");
};
function oa() {
  this.shorthandAssign = this.trailingComma = this.parenthesizedAssign = this.parenthesizedBind = this.doubleProto = -1;
}
Zt.checkPatternErrors = function(e, t) {
  if (e) {
    e.trailingComma > -1 && this.raiseRecoverable(e.trailingComma, "Comma is not permitted after the rest element");
    var r = t ? e.parenthesizedAssign : e.parenthesizedBind;
    r > -1 && this.raiseRecoverable(r, "Parenthesized pattern");
  }
};
Zt.checkExpressionErrors = function(e, t) {
  if (!e)
    return !1;
  var r = e.shorthandAssign, i = e.doubleProto;
  if (!t)
    return r >= 0 || i >= 0;
  r >= 0 && this.raise(r, "Shorthand property assignments are valid only in destructuring patterns"), i >= 0 && this.raiseRecoverable(i, "Redefinition of __proto__ property");
};
Zt.checkYieldAwaitInDefaultParams = function() {
  this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos) && this.raise(this.yieldPos, "Yield expression cannot be a default value"), this.awaitPos && this.raise(this.awaitPos, "Await expression cannot be a default value");
};
Zt.isSimpleAssignTarget = function(e) {
  return e.type === "ParenthesizedExpression" ? this.isSimpleAssignTarget(e.expression) : e.type === "Identifier" || e.type === "MemberExpression";
};
var be = Et.prototype;
be.parseTopLevel = function(e) {
  var t = {};
  for (e.body || (e.body = []); this.type !== v.eof; ) {
    var r = this.parseStatement(null, !0, t);
    e.body.push(r);
  }
  if (this.inModule)
    for (var i = 0, n = Object.keys(this.undefinedExports); i < n.length; i += 1) {
      var a = n[i];
      this.raiseRecoverable(this.undefinedExports[a].start, "Export '" + a + "' is not defined");
    }
  return this.adaptDirectivePrologue(e.body), this.next(), e.sourceType = this.options.sourceType, this.finishNode(e, "Program");
};
var cc = { kind: "loop" }, RN = { kind: "switch" };
be.isLet = function(e) {
  if (this.options.ecmaVersion < 6 || !this.isContextual("let"))
    return !1;
  Br.lastIndex = this.pos;
  var t = Br.exec(this.input), r = this.pos + t[0].length, i = this.input.charCodeAt(r);
  if (i === 91)
    return !0;
  if (e)
    return !1;
  if (i === 123)
    return !0;
  if (ti(i, !0)) {
    for (var n = r + 1; Fi(this.input.charCodeAt(n), !0); )
      ++n;
    var a = this.input.slice(r, n);
    if (!fN.test(a))
      return !0;
  }
  return !1;
};
be.isAsyncFunction = function() {
  if (this.options.ecmaVersion < 8 || !this.isContextual("async"))
    return !1;
  Br.lastIndex = this.pos;
  var e = Br.exec(this.input), t = this.pos + e[0].length;
  return !Ar.test(this.input.slice(this.pos, t)) && this.input.slice(t, t + 8) === "function" && (t + 8 === this.input.length || !Fi(this.input.charAt(t + 8)));
};
be.parseStatement = function(e, t, r) {
  var i = this.type, n = this.startNode(), a;
  switch (this.isLet(e) && (i = v._var, a = "let"), i) {
    case v._break:
    case v._continue:
      return this.parseBreakContinueStatement(n, i.keyword);
    case v._debugger:
      return this.parseDebuggerStatement(n);
    case v._do:
      return this.parseDoStatement(n);
    case v._for:
      return this.parseForStatement(n);
    case v._function:
      return e && (this.strict || e !== "if" && e !== "label") && this.options.ecmaVersion >= 6 && this.unexpected(), this.parseFunctionStatement(n, !1, !e);
    case v._class:
      return e && this.unexpected(), this.parseClass(n, !0);
    case v._if:
      return this.parseIfStatement(n);
    case v._return:
      return this.parseReturnStatement(n);
    case v._switch:
      return this.parseSwitchStatement(n);
    case v._throw:
      return this.parseThrowStatement(n);
    case v._try:
      return this.parseTryStatement(n);
    case v._const:
    case v._var:
      return a = a || this.value, e && a !== "var" && this.unexpected(), this.parseVarStatement(n, a);
    case v._while:
      return this.parseWhileStatement(n);
    case v._with:
      return this.parseWithStatement(n);
    case v.braceL:
      return this.parseBlock(!0, n);
    case v.semi:
      return this.parseEmptyStatement(n);
    case v._export:
    case v._import:
      if (this.options.ecmaVersion > 10 && i === v._import) {
        Br.lastIndex = this.pos;
        var s = Br.exec(this.input), o = this.pos + s[0].length, l = this.input.charCodeAt(o);
        if (l === 40)
          return this.parseExpressionStatement(n, this.parseExpression());
      }
      return this.options.allowImportExportEverywhere || (t || this.raise(this.start, "'import' and 'export' may only appear at the top level"), this.inModule || this.raise(this.start, "'import' and 'export' may appear only with 'sourceType: module'")), i === v._import ? this.parseImport(n) : this.parseExport(n, r);
    default:
      if (this.isAsyncFunction())
        return e && this.unexpected(), this.next(), this.parseFunctionStatement(n, !0, !e);
      var c = this.value, f = this.parseExpression();
      return i === v.name && f.type === "Identifier" && this.eat(v.colon) ? this.parseLabeledStatement(n, c, f, e) : this.parseExpressionStatement(n, f);
  }
};
be.parseBreakContinueStatement = function(e, t) {
  var r = t === "break";
  this.next(), this.eat(v.semi) || this.insertSemicolon() ? e.label = null : this.type !== v.name ? this.unexpected() : (e.label = this.parseIdent(), this.semicolon());
  for (var i = 0; i < this.labels.length; ++i) {
    var n = this.labels[i];
    if ((e.label == null || n.name === e.label.name) && (n.kind != null && (r || n.kind === "loop") || e.label && r))
      break;
  }
  return i === this.labels.length && this.raise(e.start, "Unsyntactic " + t), this.finishNode(e, r ? "BreakStatement" : "ContinueStatement");
};
be.parseDebuggerStatement = function(e) {
  return this.next(), this.semicolon(), this.finishNode(e, "DebuggerStatement");
};
be.parseDoStatement = function(e) {
  return this.next(), this.labels.push(cc), e.body = this.parseStatement("do"), this.labels.pop(), this.expect(v._while), e.test = this.parseParenExpression(), this.options.ecmaVersion >= 6 ? this.eat(v.semi) : this.semicolon(), this.finishNode(e, "DoWhileStatement");
};
be.parseForStatement = function(e) {
  this.next();
  var t = this.options.ecmaVersion >= 9 && (this.inAsync || !this.inFunction && this.options.allowAwaitOutsideFunction) && this.eatContextual("await") ? this.lastTokStart : -1;
  if (this.labels.push(cc), this.enterScope(0), this.expect(v.parenL), this.type === v.semi)
    return t > -1 && this.unexpected(t), this.parseFor(e, null);
  var r = this.isLet();
  if (this.type === v._var || this.type === v._const || r) {
    var i = this.startNode(), n = r ? "let" : this.value;
    return this.next(), this.parseVar(i, !0, n), this.finishNode(i, "VariableDeclaration"), (this.type === v._in || this.options.ecmaVersion >= 6 && this.isContextual("of")) && i.declarations.length === 1 ? (this.options.ecmaVersion >= 9 && (this.type === v._in ? t > -1 && this.unexpected(t) : e.await = t > -1), this.parseForIn(e, i)) : (t > -1 && this.unexpected(t), this.parseFor(e, i));
  }
  var a = new oa(), s = this.parseExpression(!0, a);
  return this.type === v._in || this.options.ecmaVersion >= 6 && this.isContextual("of") ? (this.options.ecmaVersion >= 9 && (this.type === v._in ? t > -1 && this.unexpected(t) : e.await = t > -1), this.toAssignable(s, !1, a), this.checkLVal(s), this.parseForIn(e, s)) : (this.checkExpressionErrors(a, !0), t > -1 && this.unexpected(t), this.parseFor(e, s));
};
be.parseFunctionStatement = function(e, t, r) {
  return this.next(), this.parseFunction(e, Wn | (r ? 0 : Il), !1, t);
};
be.parseIfStatement = function(e) {
  return this.next(), e.test = this.parseParenExpression(), e.consequent = this.parseStatement("if"), e.alternate = this.eat(v._else) ? this.parseStatement("if") : null, this.finishNode(e, "IfStatement");
};
be.parseReturnStatement = function(e) {
  return !this.inFunction && !this.options.allowReturnOutsideFunction && this.raise(this.start, "'return' outside of function"), this.next(), this.eat(v.semi) || this.insertSemicolon() ? e.argument = null : (e.argument = this.parseExpression(), this.semicolon()), this.finishNode(e, "ReturnStatement");
};
be.parseSwitchStatement = function(e) {
  this.next(), e.discriminant = this.parseParenExpression(), e.cases = [], this.expect(v.braceL), this.labels.push(RN), this.enterScope(0);
  for (var t, r = !1; this.type !== v.braceR; )
    if (this.type === v._case || this.type === v._default) {
      var i = this.type === v._case;
      t && this.finishNode(t, "SwitchCase"), e.cases.push(t = this.startNode()), t.consequent = [], this.next(), i ? t.test = this.parseExpression() : (r && this.raiseRecoverable(this.lastTokStart, "Multiple default clauses"), r = !0, t.test = null), this.expect(v.colon);
    } else
      t || this.unexpected(), t.consequent.push(this.parseStatement(null));
  return this.exitScope(), t && this.finishNode(t, "SwitchCase"), this.next(), this.labels.pop(), this.finishNode(e, "SwitchStatement");
};
be.parseThrowStatement = function(e) {
  return this.next(), Ar.test(this.input.slice(this.lastTokEnd, this.start)) && this.raise(this.lastTokEnd, "Illegal newline after throw"), e.argument = this.parseExpression(), this.semicolon(), this.finishNode(e, "ThrowStatement");
};
var AN = [];
be.parseTryStatement = function(e) {
  if (this.next(), e.block = this.parseBlock(), e.handler = null, this.type === v._catch) {
    var t = this.startNode();
    if (this.next(), this.eat(v.parenL)) {
      t.param = this.parseBindingAtom();
      var r = t.param.type === "Identifier";
      this.enterScope(r ? NE : 0), this.checkLVal(t.param, r ? vE : Kr), this.expect(v.parenR);
    } else
      this.options.ecmaVersion < 10 && this.unexpected(), t.param = null, this.enterScope(0);
    t.body = this.parseBlock(!1), this.exitScope(), e.handler = this.finishNode(t, "CatchClause");
  }
  return e.finalizer = this.eat(v._finally) ? this.parseBlock() : null, !e.handler && !e.finalizer && this.raise(e.start, "Missing catch or finally clause"), this.finishNode(e, "TryStatement");
};
be.parseVarStatement = function(e, t) {
  return this.next(), this.parseVar(e, !1, t), this.semicolon(), this.finishNode(e, "VariableDeclaration");
};
be.parseWhileStatement = function(e) {
  return this.next(), e.test = this.parseParenExpression(), this.labels.push(cc), e.body = this.parseStatement("while"), this.labels.pop(), this.finishNode(e, "WhileStatement");
};
be.parseWithStatement = function(e) {
  return this.strict && this.raise(this.start, "'with' in strict mode"), this.next(), e.object = this.parseParenExpression(), e.body = this.parseStatement("with"), this.finishNode(e, "WithStatement");
};
be.parseEmptyStatement = function(e) {
  return this.next(), this.finishNode(e, "EmptyStatement");
};
be.parseLabeledStatement = function(e, t, r, i) {
  for (var n = 0, a = this.labels; n < a.length; n += 1) {
    var s = a[n];
    s.name === t && this.raise(r.start, "Label '" + t + "' is already declared");
  }
  for (var o = this.type.isLoop ? "loop" : this.type === v._switch ? "switch" : null, l = this.labels.length - 1; l >= 0; l--) {
    var c = this.labels[l];
    if (c.statementStart === e.start)
      c.statementStart = this.start, c.kind = o;
    else
      break;
  }
  return this.labels.push({ name: t, kind: o, statementStart: this.start }), e.body = this.parseStatement(i ? i.indexOf("label") === -1 ? i + "label" : i : "label"), this.labels.pop(), e.label = r, this.finishNode(e, "LabeledStatement");
};
be.parseExpressionStatement = function(e, t) {
  return e.expression = t, this.semicolon(), this.finishNode(e, "ExpressionStatement");
};
be.parseBlock = function(e, t) {
  for (e === void 0 && (e = !0), t === void 0 && (t = this.startNode()), t.body = [], this.expect(v.braceL), e && this.enterScope(0); !this.eat(v.braceR); ) {
    var r = this.parseStatement(null);
    t.body.push(r);
  }
  return e && this.exitScope(), this.finishNode(t, "BlockStatement");
};
be.parseFor = function(e, t) {
  return e.init = t, this.expect(v.semi), e.test = this.type === v.semi ? null : this.parseExpression(), this.expect(v.semi), e.update = this.type === v.parenR ? null : this.parseExpression(), this.expect(v.parenR), e.body = this.parseStatement("for"), this.exitScope(), this.labels.pop(), this.finishNode(e, "ForStatement");
};
be.parseForIn = function(e, t) {
  var r = this.type === v._in;
  return this.next(), t.type === "VariableDeclaration" && t.declarations[0].init != null && (!r || this.options.ecmaVersion < 8 || this.strict || t.kind !== "var" || t.declarations[0].id.type !== "Identifier") ? this.raise(
    t.start,
    (r ? "for-in" : "for-of") + " loop variable declaration may not have an initializer"
  ) : t.type === "AssignmentPattern" && this.raise(t.start, "Invalid left-hand side in for-loop"), e.left = t, e.right = r ? this.parseExpression() : this.parseMaybeAssign(), this.expect(v.parenR), e.body = this.parseStatement("for"), this.exitScope(), this.labels.pop(), this.finishNode(e, r ? "ForInStatement" : "ForOfStatement");
};
be.parseVar = function(e, t, r) {
  for (e.declarations = [], e.kind = r; ; ) {
    var i = this.startNode();
    if (this.parseVarId(i, r), this.eat(v.eq) ? i.init = this.parseMaybeAssign(t) : r === "const" && !(this.type === v._in || this.options.ecmaVersion >= 6 && this.isContextual("of")) ? this.unexpected() : i.id.type !== "Identifier" && !(t && (this.type === v._in || this.isContextual("of"))) ? this.raise(this.lastTokEnd, "Complex binding patterns require an initialization value") : i.init = null, e.declarations.push(this.finishNode(i, "VariableDeclarator")), !this.eat(v.comma))
      break;
  }
  return e;
};
be.parseVarId = function(e, t) {
  e.id = this.parseBindingAtom(), this.checkLVal(e.id, t === "var" ? uc : Kr, !1);
};
var Wn = 1, Il = 2, LE = 4;
be.parseFunction = function(e, t, r, i) {
  this.initFunction(e), (this.options.ecmaVersion >= 9 || this.options.ecmaVersion >= 6 && !i) && (this.type === v.star && t & Il && this.unexpected(), e.generator = this.eat(v.star)), this.options.ecmaVersion >= 8 && (e.async = !!i), t & Wn && (e.id = t & LE && this.type !== v.name ? null : this.parseIdent(), e.id && !(t & Il) && this.checkLVal(e.id, this.strict || e.generator || e.async ? this.treatFunctionsAsVar ? uc : Kr : bE));
  var n = this.yieldPos, a = this.awaitPos, s = this.awaitIdentPos;
  return this.yieldPos = 0, this.awaitPos = 0, this.awaitIdentPos = 0, this.enterScope(lc(e.async, e.generator)), t & Wn || (e.id = this.type === v.name ? this.parseIdent() : null), this.parseFunctionParams(e), this.parseFunctionBody(e, r, !1), this.yieldPos = n, this.awaitPos = a, this.awaitIdentPos = s, this.finishNode(e, t & Wn ? "FunctionDeclaration" : "FunctionExpression");
};
be.parseFunctionParams = function(e) {
  this.expect(v.parenL), e.params = this.parseBindingList(v.parenR, !1, this.options.ecmaVersion >= 8), this.checkYieldAwaitInDefaultParams();
};
be.parseClass = function(e, t) {
  this.next();
  var r = this.strict;
  this.strict = !0, this.parseClassId(e, t), this.parseClassSuper(e);
  var i = this.startNode(), n = !1;
  for (i.body = [], this.expect(v.braceL); !this.eat(v.braceR); ) {
    var a = this.parseClassElement(e.superClass !== null);
    a && (i.body.push(a), a.type === "MethodDefinition" && a.kind === "constructor" && (n && this.raise(a.start, "Duplicate constructor in the same class"), n = !0));
  }
  return e.body = this.finishNode(i, "ClassBody"), this.strict = r, this.finishNode(e, t ? "ClassDeclaration" : "ClassExpression");
};
be.parseClassElement = function(e) {
  var t = this;
  if (this.eat(v.semi))
    return null;
  var r = this.startNode(), i = function(l, c) {
    c === void 0 && (c = !1);
    var f = t.start, p = t.startLoc;
    return t.eatContextual(l) ? t.type !== v.parenL && (!c || !t.canInsertSemicolon()) ? !0 : (r.key && t.unexpected(), r.computed = !1, r.key = t.startNodeAt(f, p), r.key.name = l, t.finishNode(r.key, "Identifier"), !1) : !1;
  };
  r.kind = "method", r.static = i("static");
  var n = this.eat(v.star), a = !1;
  n || (this.options.ecmaVersion >= 8 && i("async", !0) ? (a = !0, n = this.options.ecmaVersion >= 9 && this.eat(v.star)) : i("get") ? r.kind = "get" : i("set") && (r.kind = "set")), r.key || this.parsePropertyName(r);
  var s = r.key, o = !1;
  return !r.computed && !r.static && (s.type === "Identifier" && s.name === "constructor" || s.type === "Literal" && s.value === "constructor") ? (r.kind !== "method" && this.raise(s.start, "Constructor can't have get/set modifier"), n && this.raise(s.start, "Constructor can't be a generator"), a && this.raise(s.start, "Constructor can't be an async method"), r.kind = "constructor", o = e) : r.static && s.type === "Identifier" && s.name === "prototype" && this.raise(s.start, "Classes may not have a static property named prototype"), this.parseClassMethod(r, n, a, o), r.kind === "get" && r.value.params.length !== 0 && this.raiseRecoverable(r.value.start, "getter should have no params"), r.kind === "set" && r.value.params.length !== 1 && this.raiseRecoverable(r.value.start, "setter should have exactly one param"), r.kind === "set" && r.value.params[0].type === "RestElement" && this.raiseRecoverable(r.value.params[0].start, "Setter cannot use rest params"), r;
};
be.parseClassMethod = function(e, t, r, i) {
  return e.value = this.parseMethod(t, r, i), this.finishNode(e, "MethodDefinition");
};
be.parseClassId = function(e, t) {
  this.type === v.name ? (e.id = this.parseIdent(), t && this.checkLVal(e.id, Kr, !1)) : (t === !0 && this.unexpected(), e.id = null);
};
be.parseClassSuper = function(e) {
  e.superClass = this.eat(v._extends) ? this.parseExprSubscripts() : null;
};
be.parseExport = function(e, t) {
  if (this.next(), this.eat(v.star))
    return this.expectContextual("from"), this.type !== v.string && this.unexpected(), e.source = this.parseExprAtom(), this.semicolon(), this.finishNode(e, "ExportAllDeclaration");
  if (this.eat(v._default)) {
    this.checkExport(t, "default", this.lastTokStart);
    var r;
    if (this.type === v._function || (r = this.isAsyncFunction())) {
      var i = this.startNode();
      this.next(), r && this.next(), e.declaration = this.parseFunction(i, Wn | LE, !1, r);
    } else if (this.type === v._class) {
      var n = this.startNode();
      e.declaration = this.parseClass(n, "nullableID");
    } else
      e.declaration = this.parseMaybeAssign(), this.semicolon();
    return this.finishNode(e, "ExportDefaultDeclaration");
  }
  if (this.shouldParseExportStatement())
    e.declaration = this.parseStatement(null), e.declaration.type === "VariableDeclaration" ? this.checkVariableExport(t, e.declaration.declarations) : this.checkExport(t, e.declaration.id.name, e.declaration.id.start), e.specifiers = [], e.source = null;
  else {
    if (e.declaration = null, e.specifiers = this.parseExportSpecifiers(t), this.eatContextual("from"))
      this.type !== v.string && this.unexpected(), e.source = this.parseExprAtom();
    else {
      for (var a = 0, s = e.specifiers; a < s.length; a += 1) {
        var o = s[a];
        this.checkUnreserved(o.local), this.checkLocalExport(o.local);
      }
      e.source = null;
    }
    this.semicolon();
  }
  return this.finishNode(e, "ExportNamedDeclaration");
};
be.checkExport = function(e, t, r) {
  e && (qs(e, t) && this.raiseRecoverable(r, "Duplicate export '" + t + "'"), e[t] = !0);
};
be.checkPatternExport = function(e, t) {
  var r = t.type;
  if (r === "Identifier")
    this.checkExport(e, t.name, t.start);
  else if (r === "ObjectPattern")
    for (var i = 0, n = t.properties; i < n.length; i += 1) {
      var a = n[i];
      this.checkPatternExport(e, a);
    }
  else if (r === "ArrayPattern")
    for (var s = 0, o = t.elements; s < o.length; s += 1) {
      var l = o[s];
      l && this.checkPatternExport(e, l);
    }
  else
    r === "Property" ? this.checkPatternExport(e, t.value) : r === "AssignmentPattern" ? this.checkPatternExport(e, t.left) : r === "RestElement" ? this.checkPatternExport(e, t.argument) : r === "ParenthesizedExpression" && this.checkPatternExport(e, t.expression);
};
be.checkVariableExport = function(e, t) {
  if (e)
    for (var r = 0, i = t; r < i.length; r += 1) {
      var n = i[r];
      this.checkPatternExport(e, n.id);
    }
};
be.shouldParseExportStatement = function() {
  return this.type.keyword === "var" || this.type.keyword === "const" || this.type.keyword === "class" || this.type.keyword === "function" || this.isLet() || this.isAsyncFunction();
};
be.parseExportSpecifiers = function(e) {
  var t = [], r = !0;
  for (this.expect(v.braceL); !this.eat(v.braceR); ) {
    if (r)
      r = !1;
    else if (this.expect(v.comma), this.afterTrailingComma(v.braceR))
      break;
    var i = this.startNode();
    i.local = this.parseIdent(!0), i.exported = this.eatContextual("as") ? this.parseIdent(!0) : i.local, this.checkExport(e, i.exported.name, i.exported.start), t.push(this.finishNode(i, "ExportSpecifier"));
  }
  return t;
};
be.parseImport = function(e) {
  return this.next(), this.type === v.string ? (e.specifiers = AN, e.source = this.parseExprAtom()) : (e.specifiers = this.parseImportSpecifiers(), this.expectContextual("from"), e.source = this.type === v.string ? this.parseExprAtom() : this.unexpected()), this.semicolon(), this.finishNode(e, "ImportDeclaration");
};
be.parseImportSpecifiers = function() {
  var e = [], t = !0;
  if (this.type === v.name) {
    var r = this.startNode();
    if (r.local = this.parseIdent(), this.checkLVal(r.local, Kr), e.push(this.finishNode(r, "ImportDefaultSpecifier")), !this.eat(v.comma))
      return e;
  }
  if (this.type === v.star) {
    var i = this.startNode();
    return this.next(), this.expectContextual("as"), i.local = this.parseIdent(), this.checkLVal(i.local, Kr), e.push(this.finishNode(i, "ImportNamespaceSpecifier")), e;
  }
  for (this.expect(v.braceL); !this.eat(v.braceR); ) {
    if (t)
      t = !1;
    else if (this.expect(v.comma), this.afterTrailingComma(v.braceR))
      break;
    var n = this.startNode();
    n.imported = this.parseIdent(!0), this.eatContextual("as") ? n.local = this.parseIdent() : (this.checkUnreserved(n.imported), n.local = n.imported), this.checkLVal(n.local, Kr), e.push(this.finishNode(n, "ImportSpecifier"));
  }
  return e;
};
be.adaptDirectivePrologue = function(e) {
  for (var t = 0; t < e.length && this.isDirectiveCandidate(e[t]); ++t)
    e[t].directive = e[t].expression.raw.slice(1, -1);
};
be.isDirectiveCandidate = function(e) {
  return e.type === "ExpressionStatement" && e.expression.type === "Literal" && typeof e.expression.value == "string" && // Reject parenthesized strings.
  (this.input[e.start] === '"' || this.input[e.start] === "'");
};
var ni = Et.prototype;
ni.toAssignable = function(e, t, r) {
  if (this.options.ecmaVersion >= 6 && e)
    switch (e.type) {
      case "Identifier":
        this.inAsync && e.name === "await" && this.raise(e.start, "Cannot use 'await' as identifier inside an async function");
        break;
      case "ObjectPattern":
      case "ArrayPattern":
      case "RestElement":
        break;
      case "ObjectExpression":
        e.type = "ObjectPattern", r && this.checkPatternErrors(r, !0);
        for (var i = 0, n = e.properties; i < n.length; i += 1) {
          var a = n[i];
          this.toAssignable(a, t), a.type === "RestElement" && (a.argument.type === "ArrayPattern" || a.argument.type === "ObjectPattern") && this.raise(a.argument.start, "Unexpected token");
        }
        break;
      case "Property":
        e.kind !== "init" && this.raise(e.key.start, "Object pattern can't contain getter or setter"), this.toAssignable(e.value, t);
        break;
      case "ArrayExpression":
        e.type = "ArrayPattern", r && this.checkPatternErrors(r, !0), this.toAssignableList(e.elements, t);
        break;
      case "SpreadElement":
        e.type = "RestElement", this.toAssignable(e.argument, t), e.argument.type === "AssignmentPattern" && this.raise(e.argument.start, "Rest elements cannot have a default value");
        break;
      case "AssignmentExpression":
        e.operator !== "=" && this.raise(e.left.end, "Only '=' operator can be used for specifying default value."), e.type = "AssignmentPattern", delete e.operator, this.toAssignable(e.left, t);
      case "AssignmentPattern":
        break;
      case "ParenthesizedExpression":
        this.toAssignable(e.expression, t, r);
        break;
      case "MemberExpression":
        if (!t)
          break;
      default:
        this.raise(e.start, "Assigning to rvalue");
    }
  else
    r && this.checkPatternErrors(r, !0);
  return e;
};
ni.toAssignableList = function(e, t) {
  for (var r = e.length, i = 0; i < r; i++) {
    var n = e[i];
    n && this.toAssignable(n, t);
  }
  if (r) {
    var a = e[r - 1];
    this.options.ecmaVersion === 6 && t && a && a.type === "RestElement" && a.argument.type !== "Identifier" && this.unexpected(a.argument.start);
  }
  return e;
};
ni.parseSpread = function(e) {
  var t = this.startNode();
  return this.next(), t.argument = this.parseMaybeAssign(!1, e), this.finishNode(t, "SpreadElement");
};
ni.parseRestBinding = function() {
  var e = this.startNode();
  return this.next(), this.options.ecmaVersion === 6 && this.type !== v.name && this.unexpected(), e.argument = this.parseBindingAtom(), this.finishNode(e, "RestElement");
};
ni.parseBindingAtom = function() {
  if (this.options.ecmaVersion >= 6)
    switch (this.type) {
      case v.bracketL:
        var e = this.startNode();
        return this.next(), e.elements = this.parseBindingList(v.bracketR, !0, !0), this.finishNode(e, "ArrayPattern");
      case v.braceL:
        return this.parseObj(!0);
    }
  return this.parseIdent();
};
ni.parseBindingList = function(e, t, r) {
  for (var i = [], n = !0; !this.eat(e); )
    if (n ? n = !1 : this.expect(v.comma), t && this.type === v.comma)
      i.push(null);
    else {
      if (r && this.afterTrailingComma(e))
        break;
      if (this.type === v.ellipsis) {
        var a = this.parseRestBinding();
        this.parseBindingListItem(a), i.push(a), this.type === v.comma && this.raise(this.start, "Comma is not permitted after the rest element"), this.expect(e);
        break;
      } else {
        var s = this.parseMaybeDefault(this.start, this.startLoc);
        this.parseBindingListItem(s), i.push(s);
      }
    }
  return i;
};
ni.parseBindingListItem = function(e) {
  return e;
};
ni.parseMaybeDefault = function(e, t, r) {
  if (r = r || this.parseBindingAtom(), this.options.ecmaVersion < 6 || !this.eat(v.eq))
    return r;
  var i = this.startNodeAt(e, t);
  return i.left = r, i.right = this.parseMaybeAssign(), this.finishNode(i, "AssignmentPattern");
};
ni.checkLVal = function(e, t, r) {
  switch (t === void 0 && (t = hh), e.type) {
    case "Identifier":
      t === Kr && e.name === "let" && this.raiseRecoverable(e.start, "let is disallowed as a lexically bound name"), this.strict && this.reservedWordsStrictBind.test(e.name) && this.raiseRecoverable(e.start, (t ? "Binding " : "Assigning to ") + e.name + " in strict mode"), r && (qs(r, e.name) && this.raiseRecoverable(e.start, "Argument name clash"), r[e.name] = !0), t !== hh && t !== CE && this.declareName(e.name, t, e.start);
      break;
    case "MemberExpression":
      t && this.raiseRecoverable(e.start, "Binding member expression");
      break;
    case "ObjectPattern":
      for (var i = 0, n = e.properties; i < n.length; i += 1) {
        var a = n[i];
        this.checkLVal(a, t, r);
      }
      break;
    case "Property":
      this.checkLVal(e.value, t, r);
      break;
    case "ArrayPattern":
      for (var s = 0, o = e.elements; s < o.length; s += 1) {
        var l = o[s];
        l && this.checkLVal(l, t, r);
      }
      break;
    case "AssignmentPattern":
      this.checkLVal(e.left, t, r);
      break;
    case "RestElement":
      this.checkLVal(e.argument, t, r);
      break;
    case "ParenthesizedExpression":
      this.checkLVal(e.expression, t, r);
      break;
    default:
      this.raise(e.start, (t ? "Binding" : "Assigning to") + " rvalue");
  }
};
var ke = Et.prototype;
ke.checkPropClash = function(e, t, r) {
  if (!(this.options.ecmaVersion >= 9 && e.type === "SpreadElement") && !(this.options.ecmaVersion >= 6 && (e.computed || e.method || e.shorthand))) {
    var i = e.key, n;
    switch (i.type) {
      case "Identifier":
        n = i.name;
        break;
      case "Literal":
        n = String(i.value);
        break;
      default:
        return;
    }
    var a = e.kind;
    if (this.options.ecmaVersion >= 6) {
      n === "__proto__" && a === "init" && (t.proto && (r && r.doubleProto < 0 ? r.doubleProto = i.start : this.raiseRecoverable(i.start, "Redefinition of __proto__ property")), t.proto = !0);
      return;
    }
    n = "$" + n;
    var s = t[n];
    if (s) {
      var o;
      a === "init" ? o = this.strict && s.init || s.get || s.set : o = s.init || s[a], o && this.raiseRecoverable(i.start, "Redefinition of property");
    } else
      s = t[n] = {
        init: !1,
        get: !1,
        set: !1
      };
    s[a] = !0;
  }
};
ke.parseExpression = function(e, t) {
  var r = this.start, i = this.startLoc, n = this.parseMaybeAssign(e, t);
  if (this.type === v.comma) {
    var a = this.startNodeAt(r, i);
    for (a.expressions = [n]; this.eat(v.comma); )
      a.expressions.push(this.parseMaybeAssign(e, t));
    return this.finishNode(a, "SequenceExpression");
  }
  return n;
};
ke.parseMaybeAssign = function(e, t, r) {
  if (this.isContextual("yield")) {
    if (this.inGenerator)
      return this.parseYield(e);
    this.exprAllowed = !1;
  }
  var i = !1, n = -1, a = -1, s = -1;
  t ? (n = t.parenthesizedAssign, a = t.trailingComma, s = t.shorthandAssign, t.parenthesizedAssign = t.trailingComma = t.shorthandAssign = -1) : (t = new oa(), i = !0);
  var o = this.start, l = this.startLoc;
  (this.type === v.parenL || this.type === v.name) && (this.potentialArrowAt = this.start);
  var c = this.parseMaybeConditional(e, t);
  if (r && (c = r.call(this, c, o, l)), this.type.isAssign) {
    var f = this.startNodeAt(o, l);
    return f.operator = this.value, f.left = this.type === v.eq ? this.toAssignable(c, !1, t) : c, i || oa.call(t), t.shorthandAssign = -1, this.checkLVal(c), this.next(), f.right = this.parseMaybeAssign(e), this.finishNode(f, "AssignmentExpression");
  } else
    i && this.checkExpressionErrors(t, !0);
  return n > -1 && (t.parenthesizedAssign = n), a > -1 && (t.trailingComma = a), s > -1 && (t.shorthandAssign = s), c;
};
ke.parseMaybeConditional = function(e, t) {
  var r = this.start, i = this.startLoc, n = this.parseExprOps(e, t);
  if (this.checkExpressionErrors(t))
    return n;
  if (this.eat(v.question)) {
    var a = this.startNodeAt(r, i);
    return a.test = n, a.consequent = this.parseMaybeAssign(), this.expect(v.colon), a.alternate = this.parseMaybeAssign(e), this.finishNode(a, "ConditionalExpression");
  }
  return n;
};
ke.parseExprOps = function(e, t) {
  var r = this.start, i = this.startLoc, n = this.parseMaybeUnary(t, !1);
  return this.checkExpressionErrors(t) || n.start === r && n.type === "ArrowFunctionExpression" ? n : this.parseExprOp(n, r, i, -1, e);
};
ke.parseExprOp = function(e, t, r, i, n) {
  var a = this.type.binop;
  if (a != null && (!n || this.type !== v._in) && a > i) {
    var s = this.type === v.logicalOR || this.type === v.logicalAND, o = this.value;
    this.next();
    var l = this.start, c = this.startLoc, f = this.parseExprOp(this.parseMaybeUnary(null, !1), l, c, a, n), p = this.buildBinary(t, r, e, f, o, s);
    return this.parseExprOp(p, t, r, i, n);
  }
  return e;
};
ke.buildBinary = function(e, t, r, i, n, a) {
  var s = this.startNodeAt(e, t);
  return s.left = r, s.operator = n, s.right = i, this.finishNode(s, a ? "LogicalExpression" : "BinaryExpression");
};
ke.parseMaybeUnary = function(e, t) {
  var r = this.start, i = this.startLoc, n;
  if (this.isContextual("await") && (this.inAsync || !this.inFunction && this.options.allowAwaitOutsideFunction))
    n = this.parseAwait(), t = !0;
  else if (this.type.prefix) {
    var a = this.startNode(), s = this.type === v.incDec;
    a.operator = this.value, a.prefix = !0, this.next(), a.argument = this.parseMaybeUnary(null, !0), this.checkExpressionErrors(e, !0), s ? this.checkLVal(a.argument) : this.strict && a.operator === "delete" && a.argument.type === "Identifier" ? this.raiseRecoverable(a.start, "Deleting local variable in strict mode") : t = !0, n = this.finishNode(a, s ? "UpdateExpression" : "UnaryExpression");
  } else {
    if (n = this.parseExprSubscripts(e), this.checkExpressionErrors(e))
      return n;
    for (; this.type.postfix && !this.canInsertSemicolon(); ) {
      var o = this.startNodeAt(r, i);
      o.operator = this.value, o.prefix = !1, o.argument = n, this.checkLVal(n), this.next(), n = this.finishNode(o, "UpdateExpression");
    }
  }
  return !t && this.eat(v.starstar) ? this.buildBinary(r, i, n, this.parseMaybeUnary(null, !1), "**", !1) : n;
};
ke.parseExprSubscripts = function(e) {
  var t = this.start, r = this.startLoc, i = this.parseExprAtom(e), n = i.type === "ArrowFunctionExpression" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== ")";
  if (this.checkExpressionErrors(e) || n)
    return i;
  var a = this.parseSubscripts(i, t, r);
  return e && a.type === "MemberExpression" && (e.parenthesizedAssign >= a.start && (e.parenthesizedAssign = -1), e.parenthesizedBind >= a.start && (e.parenthesizedBind = -1)), a;
};
ke.parseSubscripts = function(e, t, r, i) {
  for (var n = this.options.ecmaVersion >= 8 && e.type === "Identifier" && e.name === "async" && this.lastTokEnd === e.end && !this.canInsertSemicolon() && this.input.slice(e.start, e.end) === "async"; ; ) {
    var a = this.parseSubscript(e, t, r, i, n);
    if (a === e || a.type === "ArrowFunctionExpression")
      return a;
    e = a;
  }
};
ke.parseSubscript = function(e, t, r, i, n) {
  var a = this.eat(v.bracketL);
  if (a || this.eat(v.dot)) {
    var s = this.startNodeAt(t, r);
    s.object = e, s.property = a ? this.parseExpression() : this.parseIdent(this.options.allowReserved !== "never"), s.computed = !!a, a && this.expect(v.bracketR), e = this.finishNode(s, "MemberExpression");
  } else if (!i && this.eat(v.parenL)) {
    var o = new oa(), l = this.yieldPos, c = this.awaitPos, f = this.awaitIdentPos;
    this.yieldPos = 0, this.awaitPos = 0, this.awaitIdentPos = 0;
    var p = this.parseExprList(v.parenR, this.options.ecmaVersion >= 8 && e.type !== "Import", !1, o);
    if (n && !this.canInsertSemicolon() && this.eat(v.arrow))
      return this.checkPatternErrors(o, !1), this.checkYieldAwaitInDefaultParams(), this.awaitIdentPos > 0 && this.raise(this.awaitIdentPos, "Cannot use 'await' as identifier inside an async function"), this.yieldPos = l, this.awaitPos = c, this.awaitIdentPos = f, this.parseArrowExpression(this.startNodeAt(t, r), p, !0);
    this.checkExpressionErrors(o, !0), this.yieldPos = l || this.yieldPos, this.awaitPos = c || this.awaitPos, this.awaitIdentPos = f || this.awaitIdentPos;
    var O = this.startNodeAt(t, r);
    if (O.callee = e, O.arguments = p, O.callee.type === "Import") {
      O.arguments.length !== 1 && this.raise(O.start, "import() requires exactly one argument");
      var d = O.arguments[0];
      d && d.type === "SpreadElement" && this.raise(d.start, "... is not allowed in import()");
    }
    e = this.finishNode(O, "CallExpression");
  } else if (this.type === v.backQuote) {
    var g = this.startNodeAt(t, r);
    g.tag = e, g.quasi = this.parseTemplate({ isTagged: !0 }), e = this.finishNode(g, "TaggedTemplateExpression");
  }
  return e;
};
ke.parseExprAtom = function(e) {
  this.type === v.slash && this.readRegexp();
  var t, r = this.potentialArrowAt === this.start;
  switch (this.type) {
    case v._super:
      return this.allowSuper || this.raise(this.start, "'super' keyword outside a method"), t = this.startNode(), this.next(), this.type === v.parenL && !this.allowDirectSuper && this.raise(t.start, "super() call outside constructor of a subclass"), this.type !== v.dot && this.type !== v.bracketL && this.type !== v.parenL && this.unexpected(), this.finishNode(t, "Super");
    case v._this:
      return t = this.startNode(), this.next(), this.finishNode(t, "ThisExpression");
    case v.name:
      var i = this.start, n = this.startLoc, a = this.containsEsc, s = this.parseIdent(!1);
      if (this.options.ecmaVersion >= 8 && !a && s.name === "async" && !this.canInsertSemicolon() && this.eat(v._function))
        return this.parseFunction(this.startNodeAt(i, n), 0, !1, !0);
      if (r && !this.canInsertSemicolon()) {
        if (this.eat(v.arrow))
          return this.parseArrowExpression(this.startNodeAt(i, n), [s], !1);
        if (this.options.ecmaVersion >= 8 && s.name === "async" && this.type === v.name && !a)
          return s = this.parseIdent(!1), (this.canInsertSemicolon() || !this.eat(v.arrow)) && this.unexpected(), this.parseArrowExpression(this.startNodeAt(i, n), [s], !0);
      }
      return s;
    case v.regexp:
      var o = this.value;
      return t = this.parseLiteral(o.value), t.regex = { pattern: o.pattern, flags: o.flags }, t;
    case v.num:
    case v.string:
      return this.parseLiteral(this.value);
    case v._null:
    case v._true:
    case v._false:
      return t = this.startNode(), t.value = this.type === v._null ? null : this.type === v._true, t.raw = this.type.keyword, this.next(), this.finishNode(t, "Literal");
    case v.parenL:
      var l = this.start, c = this.parseParenAndDistinguishExpression(r);
      return e && (e.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(c) && (e.parenthesizedAssign = l), e.parenthesizedBind < 0 && (e.parenthesizedBind = l)), c;
    case v.bracketL:
      return t = this.startNode(), this.next(), t.elements = this.parseExprList(v.bracketR, !0, !0, e), this.finishNode(t, "ArrayExpression");
    case v.braceL:
      return this.parseObj(!1, e);
    case v._function:
      return t = this.startNode(), this.next(), this.parseFunction(t, 0);
    case v._class:
      return this.parseClass(this.startNode(), !1);
    case v._new:
      return this.parseNew();
    case v.backQuote:
      return this.parseTemplate();
    case v._import:
      return this.options.ecmaVersion > 10 ? this.parseDynamicImport() : this.unexpected();
    default:
      this.unexpected();
  }
};
ke.parseDynamicImport = function() {
  var e = this.startNode();
  return this.next(), this.type !== v.parenL && this.unexpected(), this.finishNode(e, "Import");
};
ke.parseLiteral = function(e) {
  var t = this.startNode();
  return t.value = e, t.raw = this.input.slice(this.start, this.end), t.raw.charCodeAt(t.raw.length - 1) === 110 && (t.bigint = t.raw.slice(0, -1)), this.next(), this.finishNode(t, "Literal");
};
ke.parseParenExpression = function() {
  this.expect(v.parenL);
  var e = this.parseExpression();
  return this.expect(v.parenR), e;
};
ke.parseParenAndDistinguishExpression = function(e) {
  var t = this.start, r = this.startLoc, i, n = this.options.ecmaVersion >= 8;
  if (this.options.ecmaVersion >= 6) {
    this.next();
    var a = this.start, s = this.startLoc, o = [], l = !0, c = !1, f = new oa(), p = this.yieldPos, O = this.awaitPos, d;
    for (this.yieldPos = 0, this.awaitPos = 0; this.type !== v.parenR; )
      if (l ? l = !1 : this.expect(v.comma), n && this.afterTrailingComma(v.parenR, !0)) {
        c = !0;
        break;
      } else if (this.type === v.ellipsis) {
        d = this.start, o.push(this.parseParenItem(this.parseRestBinding())), this.type === v.comma && this.raise(this.start, "Comma is not permitted after the rest element");
        break;
      } else
        o.push(this.parseMaybeAssign(!1, f, this.parseParenItem));
    var g = this.start, L = this.startLoc;
    if (this.expect(v.parenR), e && !this.canInsertSemicolon() && this.eat(v.arrow))
      return this.checkPatternErrors(f, !1), this.checkYieldAwaitInDefaultParams(), this.yieldPos = p, this.awaitPos = O, this.parseParenArrowList(t, r, o);
    (!o.length || c) && this.unexpected(this.lastTokStart), d && this.unexpected(d), this.checkExpressionErrors(f, !0), this.yieldPos = p || this.yieldPos, this.awaitPos = O || this.awaitPos, o.length > 1 ? (i = this.startNodeAt(a, s), i.expressions = o, this.finishNodeAt(i, "SequenceExpression", g, L)) : i = o[0];
  } else
    i = this.parseParenExpression();
  if (this.options.preserveParens) {
    var D = this.startNodeAt(t, r);
    return D.expression = i, this.finishNode(D, "ParenthesizedExpression");
  } else
    return i;
};
ke.parseParenItem = function(e) {
  return e;
};
ke.parseParenArrowList = function(e, t, r) {
  return this.parseArrowExpression(this.startNodeAt(e, t), r);
};
var gN = [];
ke.parseNew = function() {
  var e = this.startNode(), t = this.parseIdent(!0);
  if (this.options.ecmaVersion >= 6 && this.eat(v.dot)) {
    e.meta = t;
    var r = this.containsEsc;
    return e.property = this.parseIdent(!0), (e.property.name !== "target" || r) && this.raiseRecoverable(e.property.start, "The only valid meta property for new is new.target"), this.inNonArrowFunction() || this.raiseRecoverable(e.start, "new.target can only be used in functions"), this.finishNode(e, "MetaProperty");
  }
  var i = this.start, n = this.startLoc;
  return e.callee = this.parseSubscripts(this.parseExprAtom(), i, n, !0), this.options.ecmaVersion > 10 && e.callee.type === "Import" && this.raise(e.callee.start, "Cannot use new with import(...)"), this.eat(v.parenL) ? e.arguments = this.parseExprList(v.parenR, this.options.ecmaVersion >= 8 && e.callee.type !== "Import", !1) : e.arguments = gN, this.finishNode(e, "NewExpression");
};
ke.parseTemplateElement = function(e) {
  var t = e.isTagged, r = this.startNode();
  return this.type === v.invalidTemplate ? (t || this.raiseRecoverable(this.start, "Bad escape sequence in untagged template literal"), r.value = {
    raw: this.value,
    cooked: null
  }) : r.value = {
    raw: this.input.slice(this.start, this.end).replace(/\r\n?/g, `
`),
    cooked: this.value
  }, this.next(), r.tail = this.type === v.backQuote, this.finishNode(r, "TemplateElement");
};
ke.parseTemplate = function(e) {
  e === void 0 && (e = {});
  var t = e.isTagged;
  t === void 0 && (t = !1);
  var r = this.startNode();
  this.next(), r.expressions = [];
  var i = this.parseTemplateElement({ isTagged: t });
  for (r.quasis = [i]; !i.tail; )
    this.type === v.eof && this.raise(this.pos, "Unterminated template literal"), this.expect(v.dollarBraceL), r.expressions.push(this.parseExpression()), this.expect(v.braceR), r.quasis.push(i = this.parseTemplateElement({ isTagged: t }));
  return this.next(), this.finishNode(r, "TemplateLiteral");
};
ke.isAsyncProp = function(e) {
  return !e.computed && e.key.type === "Identifier" && e.key.name === "async" && (this.type === v.name || this.type === v.num || this.type === v.string || this.type === v.bracketL || this.type.keyword || this.options.ecmaVersion >= 9 && this.type === v.star) && !Ar.test(this.input.slice(this.lastTokEnd, this.start));
};
ke.parseObj = function(e, t) {
  var r = this.startNode(), i = !0, n = {};
  for (r.properties = [], this.next(); !this.eat(v.braceR); ) {
    if (i)
      i = !1;
    else if (this.expect(v.comma), this.afterTrailingComma(v.braceR))
      break;
    var a = this.parseProperty(e, t);
    e || this.checkPropClash(a, n, t), r.properties.push(a);
  }
  return this.finishNode(r, e ? "ObjectPattern" : "ObjectExpression");
};
ke.parseProperty = function(e, t) {
  var r = this.startNode(), i, n, a, s;
  if (this.options.ecmaVersion >= 9 && this.eat(v.ellipsis))
    return e ? (r.argument = this.parseIdent(!1), this.type === v.comma && this.raise(this.start, "Comma is not permitted after the rest element"), this.finishNode(r, "RestElement")) : (this.type === v.parenL && t && (t.parenthesizedAssign < 0 && (t.parenthesizedAssign = this.start), t.parenthesizedBind < 0 && (t.parenthesizedBind = this.start)), r.argument = this.parseMaybeAssign(!1, t), this.type === v.comma && t && t.trailingComma < 0 && (t.trailingComma = this.start), this.finishNode(r, "SpreadElement"));
  this.options.ecmaVersion >= 6 && (r.method = !1, r.shorthand = !1, (e || t) && (a = this.start, s = this.startLoc), e || (i = this.eat(v.star)));
  var o = this.containsEsc;
  return this.parsePropertyName(r), !e && !o && this.options.ecmaVersion >= 8 && !i && this.isAsyncProp(r) ? (n = !0, i = this.options.ecmaVersion >= 9 && this.eat(v.star), this.parsePropertyName(r, t)) : n = !1, this.parsePropertyValue(r, e, i, n, a, s, t, o), this.finishNode(r, "Property");
};
ke.parsePropertyValue = function(e, t, r, i, n, a, s, o) {
  if ((r || i) && this.type === v.colon && this.unexpected(), this.eat(v.colon))
    e.value = t ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(!1, s), e.kind = "init";
  else if (this.options.ecmaVersion >= 6 && this.type === v.parenL)
    t && this.unexpected(), e.kind = "init", e.method = !0, e.value = this.parseMethod(r, i);
  else if (!t && !o && this.options.ecmaVersion >= 5 && !e.computed && e.key.type === "Identifier" && (e.key.name === "get" || e.key.name === "set") && this.type !== v.comma && this.type !== v.braceR) {
    (r || i) && this.unexpected(), e.kind = e.key.name, this.parsePropertyName(e), e.value = this.parseMethod(!1);
    var l = e.kind === "get" ? 0 : 1;
    if (e.value.params.length !== l) {
      var c = e.value.start;
      e.kind === "get" ? this.raiseRecoverable(c, "getter should have no params") : this.raiseRecoverable(c, "setter should have exactly one param");
    } else
      e.kind === "set" && e.value.params[0].type === "RestElement" && this.raiseRecoverable(e.value.params[0].start, "Setter cannot use rest params");
  } else
    this.options.ecmaVersion >= 6 && !e.computed && e.key.type === "Identifier" ? ((r || i) && this.unexpected(), this.checkUnreserved(e.key), e.key.name === "await" && !this.awaitIdentPos && (this.awaitIdentPos = n), e.kind = "init", t ? e.value = this.parseMaybeDefault(n, a, e.key) : this.type === v.eq && s ? (s.shorthandAssign < 0 && (s.shorthandAssign = this.start), e.value = this.parseMaybeDefault(n, a, e.key)) : e.value = e.key, e.shorthand = !0) : this.unexpected();
};
ke.parsePropertyName = function(e) {
  if (this.options.ecmaVersion >= 6) {
    if (this.eat(v.bracketL))
      return e.computed = !0, e.key = this.parseMaybeAssign(), this.expect(v.bracketR), e.key;
    e.computed = !1;
  }
  return e.key = this.type === v.num || this.type === v.string ? this.parseExprAtom() : this.parseIdent(this.options.allowReserved !== "never");
};
ke.initFunction = function(e) {
  e.id = null, this.options.ecmaVersion >= 6 && (e.generator = e.expression = !1), this.options.ecmaVersion >= 8 && (e.async = !1);
};
ke.parseMethod = function(e, t, r) {
  var i = this.startNode(), n = this.yieldPos, a = this.awaitPos, s = this.awaitIdentPos;
  return this.initFunction(i), this.options.ecmaVersion >= 6 && (i.generator = e), this.options.ecmaVersion >= 8 && (i.async = !!t), this.yieldPos = 0, this.awaitPos = 0, this.awaitIdentPos = 0, this.enterScope(lc(t, i.generator) | PE | (r ? _E : 0)), this.expect(v.parenL), i.params = this.parseBindingList(v.parenR, !1, this.options.ecmaVersion >= 8), this.checkYieldAwaitInDefaultParams(), this.parseFunctionBody(i, !1, !0), this.yieldPos = n, this.awaitPos = a, this.awaitIdentPos = s, this.finishNode(i, "FunctionExpression");
};
ke.parseArrowExpression = function(e, t, r) {
  var i = this.yieldPos, n = this.awaitPos, a = this.awaitIdentPos;
  return this.enterScope(lc(r, !1) | IE), this.initFunction(e), this.options.ecmaVersion >= 8 && (e.async = !!r), this.yieldPos = 0, this.awaitPos = 0, this.awaitIdentPos = 0, e.params = this.toAssignableList(t, !0), this.parseFunctionBody(e, !0, !1), this.yieldPos = i, this.awaitPos = n, this.awaitIdentPos = a, this.finishNode(e, "ArrowFunctionExpression");
};
ke.parseFunctionBody = function(e, t, r) {
  var i = t && this.type !== v.braceL, n = this.strict, a = !1;
  if (i)
    e.body = this.parseMaybeAssign(), e.expression = !0, this.checkParams(e, !1);
  else {
    var s = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(e.params);
    (!n || s) && (a = this.strictDirective(this.end), a && s && this.raiseRecoverable(e.start, "Illegal 'use strict' directive in function with non-simple parameter list"));
    var o = this.labels;
    this.labels = [], a && (this.strict = !0), this.checkParams(e, !n && !a && !t && !r && this.isSimpleParamList(e.params)), e.body = this.parseBlock(!1), e.expression = !1, this.adaptDirectivePrologue(e.body.body), this.labels = o;
  }
  this.exitScope(), this.strict && e.id && this.checkLVal(e.id, CE), this.strict = n;
};
ke.isSimpleParamList = function(e) {
  for (var t = 0, r = e; t < r.length; t += 1) {
    var i = r[t];
    if (i.type !== "Identifier")
      return !1;
  }
  return !0;
};
ke.checkParams = function(e, t) {
  for (var r = {}, i = 0, n = e.params; i < n.length; i += 1) {
    var a = n[i];
    this.checkLVal(a, uc, t ? null : r);
  }
};
ke.parseExprList = function(e, t, r, i) {
  for (var n = [], a = !0; !this.eat(e); ) {
    if (a)
      a = !1;
    else if (this.expect(v.comma), t && this.afterTrailingComma(e))
      break;
    var s = void 0;
    r && this.type === v.comma ? s = null : this.type === v.ellipsis ? (s = this.parseSpread(i), i && this.type === v.comma && i.trailingComma < 0 && (i.trailingComma = this.start)) : s = this.parseMaybeAssign(!1, i), n.push(s);
  }
  return n;
};
ke.checkUnreserved = function(e) {
  var t = e.start, r = e.end, i = e.name;
  if (this.inGenerator && i === "yield" && this.raiseRecoverable(t, "Cannot use 'yield' as identifier inside a generator"), this.inAsync && i === "await" && this.raiseRecoverable(t, "Cannot use 'await' as identifier inside an async function"), this.keywords.test(i) && this.raise(t, "Unexpected keyword '" + i + "'"), !(this.options.ecmaVersion < 6 && this.input.slice(t, r).indexOf("\\") !== -1)) {
    var n = this.strict ? this.reservedWordsStrict : this.reservedWords;
    n.test(i) && (!this.inAsync && i === "await" && this.raiseRecoverable(t, "Cannot use keyword 'await' outside an async function"), this.raiseRecoverable(t, "The keyword '" + i + "' is reserved"));
  }
};
ke.parseIdent = function(e, t) {
  var r = this.startNode();
  return this.type === v.name ? r.name = this.value : this.type.keyword ? (r.name = this.type.keyword, (r.name === "class" || r.name === "function") && (this.lastTokEnd !== this.lastTokStart + 1 || this.input.charCodeAt(this.lastTokStart) !== 46) && this.context.pop()) : this.unexpected(), this.next(), this.finishNode(r, "Identifier"), e || (this.checkUnreserved(r), r.name === "await" && !this.awaitIdentPos && (this.awaitIdentPos = r.start)), r;
};
ke.parseYield = function(e) {
  this.yieldPos || (this.yieldPos = this.start);
  var t = this.startNode();
  return this.next(), this.type === v.semi || this.canInsertSemicolon() || this.type !== v.star && !this.type.startsExpr ? (t.delegate = !1, t.argument = null) : (t.delegate = this.eat(v.star), t.argument = this.parseMaybeAssign(e)), this.finishNode(t, "YieldExpression");
};
ke.parseAwait = function() {
  this.awaitPos || (this.awaitPos = this.start);
  var e = this.startNode();
  return this.next(), e.argument = this.parseMaybeUnary(null, !0), this.finishNode(e, "AwaitExpression");
};
var Ls = Et.prototype;
Ls.raise = function(e, t) {
  var r = sc(this.input, e);
  t += " (" + r.line + ":" + r.column + ")";
  var i = new SyntaxError(t);
  throw i.pos = e, i.loc = r, i.raisedAt = this.pos, i;
};
Ls.raiseRecoverable = Ls.raise;
Ls.curPosition = function() {
  if (this.options.locations)
    return new dn(this.curLine, this.pos - this.lineStart);
};
var Ii = Et.prototype, yN = function(t) {
  this.flags = t, this.var = [], this.lexical = [], this.functions = [];
};
Ii.enterScope = function(e) {
  this.scopeStack.push(new yN(e));
};
Ii.exitScope = function() {
  this.scopeStack.pop();
};
Ii.treatFunctionsAsVarInScope = function(e) {
  return e.flags & ya || !this.inModule && e.flags & sa;
};
Ii.declareName = function(e, t, r) {
  var i = !1;
  if (t === Kr) {
    var n = this.currentScope();
    i = n.lexical.indexOf(e) > -1 || n.functions.indexOf(e) > -1 || n.var.indexOf(e) > -1, n.lexical.push(e), this.inModule && n.flags & sa && delete this.undefinedExports[e];
  } else if (t === vE) {
    var a = this.currentScope();
    a.lexical.push(e);
  } else if (t === bE) {
    var s = this.currentScope();
    this.treatFunctionsAsVar ? i = s.lexical.indexOf(e) > -1 : i = s.lexical.indexOf(e) > -1 || s.var.indexOf(e) > -1, s.functions.push(e);
  } else
    for (var o = this.scopeStack.length - 1; o >= 0; --o) {
      var l = this.scopeStack[o];
      if (l.lexical.indexOf(e) > -1 && !(l.flags & NE && l.lexical[0] === e) || !this.treatFunctionsAsVarInScope(l) && l.functions.indexOf(e) > -1) {
        i = !0;
        break;
      }
      if (l.var.push(e), this.inModule && l.flags & sa && delete this.undefinedExports[e], l.flags & oc)
        break;
    }
  i && this.raiseRecoverable(r, "Identifier '" + e + "' has already been declared");
};
Ii.checkLocalExport = function(e) {
  this.scopeStack[0].lexical.indexOf(e.name) === -1 && this.scopeStack[0].var.indexOf(e.name) === -1 && (this.undefinedExports[e.name] = e);
};
Ii.currentScope = function() {
  return this.scopeStack[this.scopeStack.length - 1];
};
Ii.currentVarScope = function() {
  for (var e = this.scopeStack.length - 1; ; e--) {
    var t = this.scopeStack[e];
    if (t.flags & oc)
      return t;
  }
};
Ii.currentThisScope = function() {
  for (var e = this.scopeStack.length - 1; ; e--) {
    var t = this.scopeStack[e];
    if (t.flags & oc && !(t.flags & IE))
      return t;
  }
};
var Js = function(t, r, i) {
  this.type = "", this.start = r, this.end = 0, t.options.locations && (this.loc = new ga(t, i)), t.options.directSourceFile && (this.sourceFile = t.options.directSourceFile), t.options.ranges && (this.range = [r, 0]);
}, Ks = Et.prototype;
Ks.startNode = function() {
  return new Js(this, this.start, this.startLoc);
};
Ks.startNodeAt = function(e, t) {
  return new Js(this, e, t);
};
function xE(e, t, r, i) {
  return e.type = t, e.end = r, this.options.locations && (e.loc.end = i), this.options.ranges && (e.range[1] = r), e;
}
Ks.finishNode = function(e, t) {
  return xE.call(this, e, t, this.lastTokEnd, this.lastTokEndLoc);
};
Ks.finishNodeAt = function(e, t, r, i) {
  return xE.call(this, e, t, r, i);
};
var Er = function(t, r, i, n, a) {
  this.token = t, this.isExpr = !!r, this.preserveSpace = !!i, this.override = n, this.generator = !!a;
}, dt = {
  b_stat: new Er("{", !1),
  b_expr: new Er("{", !0),
  b_tmpl: new Er("${", !1),
  p_stat: new Er("(", !1),
  p_expr: new Er("(", !0),
  q_tmpl: new Er("`", !0, !0, function(e) {
    return e.tryReadTemplateToken();
  }),
  f_stat: new Er("function", !1),
  f_expr: new Er("function", !0),
  f_expr_gen: new Er("function", !0, !1, null, !0),
  f_gen: new Er("function", !1, !1, null, !0)
}, eo = Et.prototype;
eo.initialContext = function() {
  return [dt.b_stat];
};
eo.braceIsBlock = function(e) {
  var t = this.curContext();
  return t === dt.f_expr || t === dt.f_stat ? !0 : e === v.colon && (t === dt.b_stat || t === dt.b_expr) ? !t.isExpr : e === v._return || e === v.name && this.exprAllowed ? Ar.test(this.input.slice(this.lastTokEnd, this.start)) : e === v._else || e === v.semi || e === v.eof || e === v.parenR || e === v.arrow ? !0 : e === v.braceL ? t === dt.b_stat : e === v._var || e === v._const || e === v.name ? !1 : !this.exprAllowed;
};
eo.inGeneratorContext = function() {
  for (var e = this.context.length - 1; e >= 1; e--) {
    var t = this.context[e];
    if (t.token === "function")
      return t.generator;
  }
  return !1;
};
eo.updateContext = function(e) {
  var t, r = this.type;
  r.keyword && e === v.dot ? this.exprAllowed = !1 : (t = r.updateContext) ? t.call(this, e) : this.exprAllowed = r.beforeExpr;
};
v.parenR.updateContext = v.braceR.updateContext = function() {
  if (this.context.length === 1) {
    this.exprAllowed = !0;
    return;
  }
  var e = this.context.pop();
  e === dt.b_stat && this.curContext().token === "function" && (e = this.context.pop()), this.exprAllowed = !e.isExpr;
};
v.braceL.updateContext = function(e) {
  this.context.push(this.braceIsBlock(e) ? dt.b_stat : dt.b_expr), this.exprAllowed = !0;
};
v.dollarBraceL.updateContext = function() {
  this.context.push(dt.b_tmpl), this.exprAllowed = !0;
};
v.parenL.updateContext = function(e) {
  var t = e === v._if || e === v._for || e === v._with || e === v._while;
  this.context.push(t ? dt.p_stat : dt.p_expr), this.exprAllowed = !0;
};
v.incDec.updateContext = function() {
};
v._function.updateContext = v._class.updateContext = function(e) {
  e.beforeExpr && e !== v.semi && e !== v._else && !(e === v._return && Ar.test(this.input.slice(this.lastTokEnd, this.start))) && !((e === v.colon || e === v.braceL) && this.curContext() === dt.b_stat) ? this.context.push(dt.f_expr) : this.context.push(dt.f_stat), this.exprAllowed = !1;
};
v.backQuote.updateContext = function() {
  this.curContext() === dt.q_tmpl ? this.context.pop() : this.context.push(dt.q_tmpl), this.exprAllowed = !1;
};
v.star.updateContext = function(e) {
  if (e === v._function) {
    var t = this.context.length - 1;
    this.context[t] === dt.f_expr ? this.context[t] = dt.f_expr_gen : this.context[t] = dt.f_gen;
  }
  this.exprAllowed = !0;
};
v.name.updateContext = function(e) {
  var t = !1;
  this.options.ecmaVersion >= 6 && e !== v.dot && (this.value === "of" && !this.exprAllowed || this.value === "yield" && this.inGeneratorContext()) && (t = !0), this.exprAllowed = t;
};
var DE = "ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS", UE = DE + " Extended_Pictographic", IN = UE, NN = {
  9: DE,
  10: UE,
  11: IN
}, ph = "Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu", wE = "Adlam Adlm Ahom Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb", ME = wE + " Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd", PN = ME + " Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho", _N = {
  9: wE,
  10: ME,
  11: PN
}, kE = {};
function fc(e) {
  var t = kE[e] = {
    binary: Mi(NN[e] + " " + ph),
    nonBinary: {
      General_Category: Mi(ph),
      Script: Mi(_N[e])
    }
  };
  t.nonBinary.Script_Extensions = t.nonBinary.Script, t.nonBinary.gc = t.nonBinary.General_Category, t.nonBinary.sc = t.nonBinary.Script, t.nonBinary.scx = t.nonBinary.Script_Extensions;
}
fc(9);
fc(10);
fc(11);
var de = Et.prototype, ai = function(t) {
  this.parser = t, this.validFlags = "gim" + (t.options.ecmaVersion >= 6 ? "uy" : "") + (t.options.ecmaVersion >= 9 ? "s" : ""), this.unicodeProperties = kE[t.options.ecmaVersion >= 11 ? 11 : t.options.ecmaVersion], this.source = "", this.flags = "", this.start = 0, this.switchU = !1, this.switchN = !1, this.pos = 0, this.lastIntValue = 0, this.lastStringValue = "", this.lastAssertionIsQuantifiable = !1, this.numCapturingParens = 0, this.maxBackReference = 0, this.groupNames = [], this.backReferenceNames = [];
};
ai.prototype.reset = function(t, r, i) {
  var n = i.indexOf("u") !== -1;
  this.start = t | 0, this.source = r + "", this.flags = i, this.switchU = n && this.parser.options.ecmaVersion >= 6, this.switchN = n && this.parser.options.ecmaVersion >= 9;
};
ai.prototype.raise = function(t) {
  this.parser.raiseRecoverable(this.start, "Invalid regular expression: /" + this.source + "/: " + t);
};
ai.prototype.at = function(t) {
  var r = this.source, i = r.length;
  if (t >= i)
    return -1;
  var n = r.charCodeAt(t);
  if (!this.switchU || n <= 55295 || n >= 57344 || t + 1 >= i)
    return n;
  var a = r.charCodeAt(t + 1);
  return a >= 56320 && a <= 57343 ? (n << 10) + a - 56613888 : n;
};
ai.prototype.nextIndex = function(t) {
  var r = this.source, i = r.length;
  if (t >= i)
    return i;
  var n = r.charCodeAt(t), a;
  return !this.switchU || n <= 55295 || n >= 57344 || t + 1 >= i || (a = r.charCodeAt(t + 1)) < 56320 || a > 57343 ? t + 1 : t + 2;
};
ai.prototype.current = function() {
  return this.at(this.pos);
};
ai.prototype.lookahead = function() {
  return this.at(this.nextIndex(this.pos));
};
ai.prototype.advance = function() {
  this.pos = this.nextIndex(this.pos);
};
ai.prototype.eat = function(t) {
  return this.current() === t ? (this.advance(), !0) : !1;
};
function xs(e) {
  return e <= 65535 ? String.fromCharCode(e) : (e -= 65536, String.fromCharCode((e >> 10) + 55296, (e & 1023) + 56320));
}
de.validateRegExpFlags = function(e) {
  for (var t = e.validFlags, r = e.flags, i = 0; i < r.length; i++) {
    var n = r.charAt(i);
    t.indexOf(n) === -1 && this.raise(e.start, "Invalid regular expression flag"), r.indexOf(n, i + 1) > -1 && this.raise(e.start, "Duplicate regular expression flag");
  }
};
de.validateRegExpPattern = function(e) {
  this.regexp_pattern(e), !e.switchN && this.options.ecmaVersion >= 9 && e.groupNames.length > 0 && (e.switchN = !0, this.regexp_pattern(e));
};
de.regexp_pattern = function(e) {
  e.pos = 0, e.lastIntValue = 0, e.lastStringValue = "", e.lastAssertionIsQuantifiable = !1, e.numCapturingParens = 0, e.maxBackReference = 0, e.groupNames.length = 0, e.backReferenceNames.length = 0, this.regexp_disjunction(e), e.pos !== e.source.length && (e.eat(
    41
    /* ) */
  ) && e.raise("Unmatched ')'"), (e.eat(
    93
    /* [ */
  ) || e.eat(
    125
    /* } */
  )) && e.raise("Lone quantifier brackets")), e.maxBackReference > e.numCapturingParens && e.raise("Invalid escape");
  for (var t = 0, r = e.backReferenceNames; t < r.length; t += 1) {
    var i = r[t];
    e.groupNames.indexOf(i) === -1 && e.raise("Invalid named capture referenced");
  }
};
de.regexp_disjunction = function(e) {
  for (this.regexp_alternative(e); e.eat(
    124
    /* | */
  ); )
    this.regexp_alternative(e);
  this.regexp_eatQuantifier(e, !0) && e.raise("Nothing to repeat"), e.eat(
    123
    /* { */
  ) && e.raise("Lone quantifier brackets");
};
de.regexp_alternative = function(e) {
  for (; e.pos < e.source.length && this.regexp_eatTerm(e); )
    ;
};
de.regexp_eatTerm = function(e) {
  return this.regexp_eatAssertion(e) ? (e.lastAssertionIsQuantifiable && this.regexp_eatQuantifier(e) && e.switchU && e.raise("Invalid quantifier"), !0) : (e.switchU ? this.regexp_eatAtom(e) : this.regexp_eatExtendedAtom(e)) ? (this.regexp_eatQuantifier(e), !0) : !1;
};
de.regexp_eatAssertion = function(e) {
  var t = e.pos;
  if (e.lastAssertionIsQuantifiable = !1, e.eat(
    94
    /* ^ */
  ) || e.eat(
    36
    /* $ */
  ))
    return !0;
  if (e.eat(
    92
    /* \ */
  )) {
    if (e.eat(
      66
      /* B */
    ) || e.eat(
      98
      /* b */
    ))
      return !0;
    e.pos = t;
  }
  if (e.eat(
    40
    /* ( */
  ) && e.eat(
    63
    /* ? */
  )) {
    var r = !1;
    if (this.options.ecmaVersion >= 9 && (r = e.eat(
      60
      /* < */
    )), e.eat(
      61
      /* = */
    ) || e.eat(
      33
      /* ! */
    ))
      return this.regexp_disjunction(e), e.eat(
        41
        /* ) */
      ) || e.raise("Unterminated group"), e.lastAssertionIsQuantifiable = !r, !0;
  }
  return e.pos = t, !1;
};
de.regexp_eatQuantifier = function(e, t) {
  return t === void 0 && (t = !1), this.regexp_eatQuantifierPrefix(e, t) ? (e.eat(
    63
    /* ? */
  ), !0) : !1;
};
de.regexp_eatQuantifierPrefix = function(e, t) {
  return e.eat(
    42
    /* * */
  ) || e.eat(
    43
    /* + */
  ) || e.eat(
    63
    /* ? */
  ) || this.regexp_eatBracedQuantifier(e, t);
};
de.regexp_eatBracedQuantifier = function(e, t) {
  var r = e.pos;
  if (e.eat(
    123
    /* { */
  )) {
    var i = 0, n = -1;
    if (this.regexp_eatDecimalDigits(e) && (i = e.lastIntValue, e.eat(
      44
      /* , */
    ) && this.regexp_eatDecimalDigits(e) && (n = e.lastIntValue), e.eat(
      125
      /* } */
    )))
      return n !== -1 && n < i && !t && e.raise("numbers out of order in {} quantifier"), !0;
    e.switchU && !t && e.raise("Incomplete quantifier"), e.pos = r;
  }
  return !1;
};
de.regexp_eatAtom = function(e) {
  return this.regexp_eatPatternCharacters(e) || e.eat(
    46
    /* . */
  ) || this.regexp_eatReverseSolidusAtomEscape(e) || this.regexp_eatCharacterClass(e) || this.regexp_eatUncapturingGroup(e) || this.regexp_eatCapturingGroup(e);
};
de.regexp_eatReverseSolidusAtomEscape = function(e) {
  var t = e.pos;
  if (e.eat(
    92
    /* \ */
  )) {
    if (this.regexp_eatAtomEscape(e))
      return !0;
    e.pos = t;
  }
  return !1;
};
de.regexp_eatUncapturingGroup = function(e) {
  var t = e.pos;
  if (e.eat(
    40
    /* ( */
  )) {
    if (e.eat(
      63
      /* ? */
    ) && e.eat(
      58
      /* : */
    )) {
      if (this.regexp_disjunction(e), e.eat(
        41
        /* ) */
      ))
        return !0;
      e.raise("Unterminated group");
    }
    e.pos = t;
  }
  return !1;
};
de.regexp_eatCapturingGroup = function(e) {
  if (e.eat(
    40
    /* ( */
  )) {
    if (this.options.ecmaVersion >= 9 ? this.regexp_groupSpecifier(e) : e.current() === 63 && e.raise("Invalid group"), this.regexp_disjunction(e), e.eat(
      41
      /* ) */
    ))
      return e.numCapturingParens += 1, !0;
    e.raise("Unterminated group");
  }
  return !1;
};
de.regexp_eatExtendedAtom = function(e) {
  return e.eat(
    46
    /* . */
  ) || this.regexp_eatReverseSolidusAtomEscape(e) || this.regexp_eatCharacterClass(e) || this.regexp_eatUncapturingGroup(e) || this.regexp_eatCapturingGroup(e) || this.regexp_eatInvalidBracedQuantifier(e) || this.regexp_eatExtendedPatternCharacter(e);
};
de.regexp_eatInvalidBracedQuantifier = function(e) {
  return this.regexp_eatBracedQuantifier(e, !0) && e.raise("Nothing to repeat"), !1;
};
de.regexp_eatSyntaxCharacter = function(e) {
  var t = e.current();
  return QE(t) ? (e.lastIntValue = t, e.advance(), !0) : !1;
};
function QE(e) {
  return e === 36 || e >= 40 && e <= 43 || e === 46 || e === 63 || e >= 91 && e <= 94 || e >= 123 && e <= 125;
}
de.regexp_eatPatternCharacters = function(e) {
  for (var t = e.pos, r = 0; (r = e.current()) !== -1 && !QE(r); )
    e.advance();
  return e.pos !== t;
};
de.regexp_eatExtendedPatternCharacter = function(e) {
  var t = e.current();
  return t !== -1 && t !== 36 && !(t >= 40 && t <= 43) && t !== 46 && t !== 63 && t !== 91 && t !== 94 && t !== 124 ? (e.advance(), !0) : !1;
};
de.regexp_groupSpecifier = function(e) {
  if (e.eat(
    63
    /* ? */
  )) {
    if (this.regexp_eatGroupName(e)) {
      e.groupNames.indexOf(e.lastStringValue) !== -1 && e.raise("Duplicate capture group name"), e.groupNames.push(e.lastStringValue);
      return;
    }
    e.raise("Invalid group");
  }
};
de.regexp_eatGroupName = function(e) {
  if (e.lastStringValue = "", e.eat(
    60
    /* < */
  )) {
    if (this.regexp_eatRegExpIdentifierName(e) && e.eat(
      62
      /* > */
    ))
      return !0;
    e.raise("Invalid capture group name");
  }
  return !1;
};
de.regexp_eatRegExpIdentifierName = function(e) {
  if (e.lastStringValue = "", this.regexp_eatRegExpIdentifierStart(e)) {
    for (e.lastStringValue += xs(e.lastIntValue); this.regexp_eatRegExpIdentifierPart(e); )
      e.lastStringValue += xs(e.lastIntValue);
    return !0;
  }
  return !1;
};
de.regexp_eatRegExpIdentifierStart = function(e) {
  var t = e.pos, r = e.current();
  return e.advance(), r === 92 && this.regexp_eatRegExpUnicodeEscapeSequence(e) && (r = e.lastIntValue), bN(r) ? (e.lastIntValue = r, !0) : (e.pos = t, !1);
};
function bN(e) {
  return ti(e, !0) || e === 36 || e === 95;
}
de.regexp_eatRegExpIdentifierPart = function(e) {
  var t = e.pos, r = e.current();
  return e.advance(), r === 92 && this.regexp_eatRegExpUnicodeEscapeSequence(e) && (r = e.lastIntValue), vN(r) ? (e.lastIntValue = r, !0) : (e.pos = t, !1);
};
function vN(e) {
  return Fi(e, !0) || e === 36 || e === 95 || e === 8204 || e === 8205;
}
de.regexp_eatAtomEscape = function(e) {
  return this.regexp_eatBackReference(e) || this.regexp_eatCharacterClassEscape(e) || this.regexp_eatCharacterEscape(e) || e.switchN && this.regexp_eatKGroupName(e) ? !0 : (e.switchU && (e.current() === 99 && e.raise("Invalid unicode escape"), e.raise("Invalid escape")), !1);
};
de.regexp_eatBackReference = function(e) {
  var t = e.pos;
  if (this.regexp_eatDecimalEscape(e)) {
    var r = e.lastIntValue;
    if (e.switchU)
      return r > e.maxBackReference && (e.maxBackReference = r), !0;
    if (r <= e.numCapturingParens)
      return !0;
    e.pos = t;
  }
  return !1;
};
de.regexp_eatKGroupName = function(e) {
  if (e.eat(
    107
    /* k */
  )) {
    if (this.regexp_eatGroupName(e))
      return e.backReferenceNames.push(e.lastStringValue), !0;
    e.raise("Invalid named reference");
  }
  return !1;
};
de.regexp_eatCharacterEscape = function(e) {
  return this.regexp_eatControlEscape(e) || this.regexp_eatCControlLetter(e) || this.regexp_eatZero(e) || this.regexp_eatHexEscapeSequence(e) || this.regexp_eatRegExpUnicodeEscapeSequence(e) || !e.switchU && this.regexp_eatLegacyOctalEscapeSequence(e) || this.regexp_eatIdentityEscape(e);
};
de.regexp_eatCControlLetter = function(e) {
  var t = e.pos;
  if (e.eat(
    99
    /* c */
  )) {
    if (this.regexp_eatControlLetter(e))
      return !0;
    e.pos = t;
  }
  return !1;
};
de.regexp_eatZero = function(e) {
  return e.current() === 48 && !to(e.lookahead()) ? (e.lastIntValue = 0, e.advance(), !0) : !1;
};
de.regexp_eatControlEscape = function(e) {
  var t = e.current();
  return t === 116 ? (e.lastIntValue = 9, e.advance(), !0) : t === 110 ? (e.lastIntValue = 10, e.advance(), !0) : t === 118 ? (e.lastIntValue = 11, e.advance(), !0) : t === 102 ? (e.lastIntValue = 12, e.advance(), !0) : t === 114 ? (e.lastIntValue = 13, e.advance(), !0) : !1;
};
de.regexp_eatControlLetter = function(e) {
  var t = e.current();
  return GE(t) ? (e.lastIntValue = t % 32, e.advance(), !0) : !1;
};
function GE(e) {
  return e >= 65 && e <= 90 || e >= 97 && e <= 122;
}
de.regexp_eatRegExpUnicodeEscapeSequence = function(e) {
  var t = e.pos;
  if (e.eat(
    117
    /* u */
  )) {
    if (this.regexp_eatFixedHexDigits(e, 4)) {
      var r = e.lastIntValue;
      if (e.switchU && r >= 55296 && r <= 56319) {
        var i = e.pos;
        if (e.eat(
          92
          /* \ */
        ) && e.eat(
          117
          /* u */
        ) && this.regexp_eatFixedHexDigits(e, 4)) {
          var n = e.lastIntValue;
          if (n >= 56320 && n <= 57343)
            return e.lastIntValue = (r - 55296) * 1024 + (n - 56320) + 65536, !0;
        }
        e.pos = i, e.lastIntValue = r;
      }
      return !0;
    }
    if (e.switchU && e.eat(
      123
      /* { */
    ) && this.regexp_eatHexDigits(e) && e.eat(
      125
      /* } */
    ) && CN(e.lastIntValue))
      return !0;
    e.switchU && e.raise("Invalid unicode escape"), e.pos = t;
  }
  return !1;
};
function CN(e) {
  return e >= 0 && e <= 1114111;
}
de.regexp_eatIdentityEscape = function(e) {
  if (e.switchU)
    return this.regexp_eatSyntaxCharacter(e) ? !0 : e.eat(
      47
      /* / */
    ) ? (e.lastIntValue = 47, !0) : !1;
  var t = e.current();
  return t !== 99 && (!e.switchN || t !== 107) ? (e.lastIntValue = t, e.advance(), !0) : !1;
};
de.regexp_eatDecimalEscape = function(e) {
  e.lastIntValue = 0;
  var t = e.current();
  if (t >= 49 && t <= 57) {
    do
      e.lastIntValue = 10 * e.lastIntValue + (t - 48), e.advance();
    while ((t = e.current()) >= 48 && t <= 57);
    return !0;
  }
  return !1;
};
de.regexp_eatCharacterClassEscape = function(e) {
  var t = e.current();
  if (LN(t))
    return e.lastIntValue = -1, e.advance(), !0;
  if (e.switchU && this.options.ecmaVersion >= 9 && (t === 80 || t === 112)) {
    if (e.lastIntValue = -1, e.advance(), e.eat(
      123
      /* { */
    ) && this.regexp_eatUnicodePropertyValueExpression(e) && e.eat(
      125
      /* } */
    ))
      return !0;
    e.raise("Invalid property name");
  }
  return !1;
};
function LN(e) {
  return e === 100 || e === 68 || e === 115 || e === 83 || e === 119 || e === 87;
}
de.regexp_eatUnicodePropertyValueExpression = function(e) {
  var t = e.pos;
  if (this.regexp_eatUnicodePropertyName(e) && e.eat(
    61
    /* = */
  )) {
    var r = e.lastStringValue;
    if (this.regexp_eatUnicodePropertyValue(e)) {
      var i = e.lastStringValue;
      return this.regexp_validateUnicodePropertyNameAndValue(e, r, i), !0;
    }
  }
  if (e.pos = t, this.regexp_eatLoneUnicodePropertyNameOrValue(e)) {
    var n = e.lastStringValue;
    return this.regexp_validateUnicodePropertyNameOrValue(e, n), !0;
  }
  return !1;
};
de.regexp_validateUnicodePropertyNameAndValue = function(e, t, r) {
  qs(e.unicodeProperties.nonBinary, t) || e.raise("Invalid property name"), e.unicodeProperties.nonBinary[t].test(r) || e.raise("Invalid property value");
};
de.regexp_validateUnicodePropertyNameOrValue = function(e, t) {
  e.unicodeProperties.binary.test(t) || e.raise("Invalid property name");
};
de.regexp_eatUnicodePropertyName = function(e) {
  var t = 0;
  for (e.lastStringValue = ""; VE(t = e.current()); )
    e.lastStringValue += xs(t), e.advance();
  return e.lastStringValue !== "";
};
function VE(e) {
  return GE(e) || e === 95;
}
de.regexp_eatUnicodePropertyValue = function(e) {
  var t = 0;
  for (e.lastStringValue = ""; xN(t = e.current()); )
    e.lastStringValue += xs(t), e.advance();
  return e.lastStringValue !== "";
};
function xN(e) {
  return VE(e) || to(e);
}
de.regexp_eatLoneUnicodePropertyNameOrValue = function(e) {
  return this.regexp_eatUnicodePropertyValue(e);
};
de.regexp_eatCharacterClass = function(e) {
  if (e.eat(
    91
    /* [ */
  )) {
    if (e.eat(
      94
      /* ^ */
    ), this.regexp_classRanges(e), e.eat(
      93
      /* [ */
    ))
      return !0;
    e.raise("Unterminated character class");
  }
  return !1;
};
de.regexp_classRanges = function(e) {
  for (; this.regexp_eatClassAtom(e); ) {
    var t = e.lastIntValue;
    if (e.eat(
      45
      /* - */
    ) && this.regexp_eatClassAtom(e)) {
      var r = e.lastIntValue;
      e.switchU && (t === -1 || r === -1) && e.raise("Invalid character class"), t !== -1 && r !== -1 && t > r && e.raise("Range out of order in character class");
    }
  }
};
de.regexp_eatClassAtom = function(e) {
  var t = e.pos;
  if (e.eat(
    92
    /* \ */
  )) {
    if (this.regexp_eatClassEscape(e))
      return !0;
    if (e.switchU) {
      var r = e.current();
      (r === 99 || YE(r)) && e.raise("Invalid class escape"), e.raise("Invalid escape");
    }
    e.pos = t;
  }
  var i = e.current();
  return i !== 93 ? (e.lastIntValue = i, e.advance(), !0) : !1;
};
de.regexp_eatClassEscape = function(e) {
  var t = e.pos;
  if (e.eat(
    98
    /* b */
  ))
    return e.lastIntValue = 8, !0;
  if (e.switchU && e.eat(
    45
    /* - */
  ))
    return e.lastIntValue = 45, !0;
  if (!e.switchU && e.eat(
    99
    /* c */
  )) {
    if (this.regexp_eatClassControlLetter(e))
      return !0;
    e.pos = t;
  }
  return this.regexp_eatCharacterClassEscape(e) || this.regexp_eatCharacterEscape(e);
};
de.regexp_eatClassControlLetter = function(e) {
  var t = e.current();
  return to(t) || t === 95 ? (e.lastIntValue = t % 32, e.advance(), !0) : !1;
};
de.regexp_eatHexEscapeSequence = function(e) {
  var t = e.pos;
  if (e.eat(
    120
    /* x */
  )) {
    if (this.regexp_eatFixedHexDigits(e, 2))
      return !0;
    e.switchU && e.raise("Invalid escape"), e.pos = t;
  }
  return !1;
};
de.regexp_eatDecimalDigits = function(e) {
  var t = e.pos, r = 0;
  for (e.lastIntValue = 0; to(r = e.current()); )
    e.lastIntValue = 10 * e.lastIntValue + (r - 48), e.advance();
  return e.pos !== t;
};
function to(e) {
  return e >= 48 && e <= 57;
}
de.regexp_eatHexDigits = function(e) {
  var t = e.pos, r = 0;
  for (e.lastIntValue = 0; BE(r = e.current()); )
    e.lastIntValue = 16 * e.lastIntValue + $E(r), e.advance();
  return e.pos !== t;
};
function BE(e) {
  return e >= 48 && e <= 57 || e >= 65 && e <= 70 || e >= 97 && e <= 102;
}
function $E(e) {
  return e >= 65 && e <= 70 ? 10 + (e - 65) : e >= 97 && e <= 102 ? 10 + (e - 97) : e - 48;
}
de.regexp_eatLegacyOctalEscapeSequence = function(e) {
  if (this.regexp_eatOctalDigit(e)) {
    var t = e.lastIntValue;
    if (this.regexp_eatOctalDigit(e)) {
      var r = e.lastIntValue;
      t <= 3 && this.regexp_eatOctalDigit(e) ? e.lastIntValue = t * 64 + r * 8 + e.lastIntValue : e.lastIntValue = t * 8 + r;
    } else
      e.lastIntValue = t;
    return !0;
  }
  return !1;
};
de.regexp_eatOctalDigit = function(e) {
  var t = e.current();
  return YE(t) ? (e.lastIntValue = t - 48, e.advance(), !0) : (e.lastIntValue = 0, !1);
};
function YE(e) {
  return e >= 48 && e <= 55;
}
de.regexp_eatFixedHexDigits = function(e, t) {
  var r = e.pos;
  e.lastIntValue = 0;
  for (var i = 0; i < t; ++i) {
    var n = e.current();
    if (!BE(n))
      return e.pos = r, !1;
    e.lastIntValue = 16 * e.lastIntValue + $E(n), e.advance();
  }
  return !0;
};
var ro = function(t) {
  this.type = t.type, this.value = t.value, this.start = t.start, this.end = t.end, t.options.locations && (this.loc = new ga(t, t.startLoc, t.endLoc)), t.options.ranges && (this.range = [t.start, t.end]);
}, Ye = Et.prototype;
Ye.next = function() {
  this.options.onToken && this.options.onToken(new ro(this)), this.lastTokEnd = this.end, this.lastTokStart = this.start, this.lastTokEndLoc = this.endLoc, this.lastTokStartLoc = this.startLoc, this.nextToken();
};
Ye.getToken = function() {
  return this.next(), new ro(this);
};
typeof Symbol < "u" && (Ye[Symbol.iterator] = function() {
  var e = this;
  return {
    next: function() {
      var t = e.getToken();
      return {
        done: t.type === v.eof,
        value: t
      };
    }
  };
});
Ye.curContext = function() {
  return this.context[this.context.length - 1];
};
Ye.nextToken = function() {
  var e = this.curContext();
  if ((!e || !e.preserveSpace) && this.skipSpace(), this.start = this.pos, this.options.locations && (this.startLoc = this.curPosition()), this.pos >= this.input.length)
    return this.finishToken(v.eof);
  if (e.override)
    return e.override(this);
  this.readToken(this.fullCharCodeAtPos());
};
Ye.readToken = function(e) {
  return ti(e, this.options.ecmaVersion >= 6) || e === 92 ? this.readWord() : this.getTokenFromCode(e);
};
Ye.fullCharCodeAtPos = function() {
  var e = this.input.charCodeAt(this.pos);
  if (e <= 55295 || e >= 57344)
    return e;
  var t = this.input.charCodeAt(this.pos + 1);
  return (e << 10) + t - 56613888;
};
Ye.skipBlockComment = function() {
  var e = this.options.onComment && this.curPosition(), t = this.pos, r = this.input.indexOf("*/", this.pos += 2);
  if (r === -1 && this.raise(this.pos - 2, "Unterminated comment"), this.pos = r + 2, this.options.locations) {
    En.lastIndex = t;
    for (var i; (i = En.exec(this.input)) && i.index < this.pos; )
      ++this.curLine, this.lineStart = i.index + i[0].length;
  }
  this.options.onComment && this.options.onComment(
    !0,
    this.input.slice(t + 2, r),
    t,
    this.pos,
    e,
    this.curPosition()
  );
};
Ye.skipLineComment = function(e) {
  for (var t = this.pos, r = this.options.onComment && this.curPosition(), i = this.input.charCodeAt(this.pos += e); this.pos < this.input.length && !_n(i); )
    i = this.input.charCodeAt(++this.pos);
  this.options.onComment && this.options.onComment(
    !1,
    this.input.slice(t + e, this.pos),
    t,
    this.pos,
    r,
    this.curPosition()
  );
};
Ye.skipSpace = function() {
  e:
    for (; this.pos < this.input.length; ) {
      var e = this.input.charCodeAt(this.pos);
      switch (e) {
        case 32:
        case 160:
          ++this.pos;
          break;
        case 13:
          this.input.charCodeAt(this.pos + 1) === 10 && ++this.pos;
        case 10:
        case 8232:
        case 8233:
          ++this.pos, this.options.locations && (++this.curLine, this.lineStart = this.pos);
          break;
        case 47:
          switch (this.input.charCodeAt(this.pos + 1)) {
            case 42:
              this.skipBlockComment();
              break;
            case 47:
              this.skipLineComment(2);
              break;
            default:
              break e;
          }
          break;
        default:
          if (e > 8 && e < 14 || e >= 5760 && ac.test(String.fromCharCode(e)))
            ++this.pos;
          else
            break e;
      }
    }
};
Ye.finishToken = function(e, t) {
  this.end = this.pos, this.options.locations && (this.endLoc = this.curPosition());
  var r = this.type;
  this.type = e, this.value = t, this.updateContext(r);
};
Ye.readToken_dot = function() {
  var e = this.input.charCodeAt(this.pos + 1);
  if (e >= 48 && e <= 57)
    return this.readNumber(!0);
  var t = this.input.charCodeAt(this.pos + 2);
  return this.options.ecmaVersion >= 6 && e === 46 && t === 46 ? (this.pos += 3, this.finishToken(v.ellipsis)) : (++this.pos, this.finishToken(v.dot));
};
Ye.readToken_slash = function() {
  var e = this.input.charCodeAt(this.pos + 1);
  return this.exprAllowed ? (++this.pos, this.readRegexp()) : e === 61 ? this.finishOp(v.assign, 2) : this.finishOp(v.slash, 1);
};
Ye.readToken_mult_modulo_exp = function(e) {
  var t = this.input.charCodeAt(this.pos + 1), r = 1, i = e === 42 ? v.star : v.modulo;
  return this.options.ecmaVersion >= 7 && e === 42 && t === 42 && (++r, i = v.starstar, t = this.input.charCodeAt(this.pos + 2)), t === 61 ? this.finishOp(v.assign, r + 1) : this.finishOp(i, r);
};
Ye.readToken_pipe_amp = function(e) {
  var t = this.input.charCodeAt(this.pos + 1);
  return t === e ? this.finishOp(e === 124 ? v.logicalOR : v.logicalAND, 2) : t === 61 ? this.finishOp(v.assign, 2) : this.finishOp(e === 124 ? v.bitwiseOR : v.bitwiseAND, 1);
};
Ye.readToken_caret = function() {
  var e = this.input.charCodeAt(this.pos + 1);
  return e === 61 ? this.finishOp(v.assign, 2) : this.finishOp(v.bitwiseXOR, 1);
};
Ye.readToken_plus_min = function(e) {
  var t = this.input.charCodeAt(this.pos + 1);
  return t === e ? t === 45 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 62 && (this.lastTokEnd === 0 || Ar.test(this.input.slice(this.lastTokEnd, this.pos))) ? (this.skipLineComment(3), this.skipSpace(), this.nextToken()) : this.finishOp(v.incDec, 2) : t === 61 ? this.finishOp(v.assign, 2) : this.finishOp(v.plusMin, 1);
};
Ye.readToken_lt_gt = function(e) {
  var t = this.input.charCodeAt(this.pos + 1), r = 1;
  return t === e ? (r = e === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2, this.input.charCodeAt(this.pos + r) === 61 ? this.finishOp(v.assign, r + 1) : this.finishOp(v.bitShift, r)) : t === 33 && e === 60 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 45 && this.input.charCodeAt(this.pos + 3) === 45 ? (this.skipLineComment(4), this.skipSpace(), this.nextToken()) : (t === 61 && (r = 2), this.finishOp(v.relational, r));
};
Ye.readToken_eq_excl = function(e) {
  var t = this.input.charCodeAt(this.pos + 1);
  return t === 61 ? this.finishOp(v.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2) : e === 61 && t === 62 && this.options.ecmaVersion >= 6 ? (this.pos += 2, this.finishToken(v.arrow)) : this.finishOp(e === 61 ? v.eq : v.prefix, 1);
};
Ye.getTokenFromCode = function(e) {
  switch (e) {
    case 46:
      return this.readToken_dot();
    case 40:
      return ++this.pos, this.finishToken(v.parenL);
    case 41:
      return ++this.pos, this.finishToken(v.parenR);
    case 59:
      return ++this.pos, this.finishToken(v.semi);
    case 44:
      return ++this.pos, this.finishToken(v.comma);
    case 91:
      return ++this.pos, this.finishToken(v.bracketL);
    case 93:
      return ++this.pos, this.finishToken(v.bracketR);
    case 123:
      return ++this.pos, this.finishToken(v.braceL);
    case 125:
      return ++this.pos, this.finishToken(v.braceR);
    case 58:
      return ++this.pos, this.finishToken(v.colon);
    case 63:
      return ++this.pos, this.finishToken(v.question);
    case 96:
      if (this.options.ecmaVersion < 6)
        break;
      return ++this.pos, this.finishToken(v.backQuote);
    case 48:
      var t = this.input.charCodeAt(this.pos + 1);
      if (t === 120 || t === 88)
        return this.readRadixNumber(16);
      if (this.options.ecmaVersion >= 6) {
        if (t === 111 || t === 79)
          return this.readRadixNumber(8);
        if (t === 98 || t === 66)
          return this.readRadixNumber(2);
      }
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
      return this.readNumber(!1);
    case 34:
    case 39:
      return this.readString(e);
    case 47:
      return this.readToken_slash();
    case 37:
    case 42:
      return this.readToken_mult_modulo_exp(e);
    case 124:
    case 38:
      return this.readToken_pipe_amp(e);
    case 94:
      return this.readToken_caret();
    case 43:
    case 45:
      return this.readToken_plus_min(e);
    case 60:
    case 62:
      return this.readToken_lt_gt(e);
    case 61:
    case 33:
      return this.readToken_eq_excl(e);
    case 126:
      return this.finishOp(v.prefix, 1);
  }
  this.raise(this.pos, "Unexpected character '" + hc(e) + "'");
};
Ye.finishOp = function(e, t) {
  var r = this.input.slice(this.pos, this.pos + t);
  return this.pos += t, this.finishToken(e, r);
};
Ye.readRegexp = function() {
  for (var e, t, r = this.pos; ; ) {
    this.pos >= this.input.length && this.raise(r, "Unterminated regular expression");
    var i = this.input.charAt(this.pos);
    if (Ar.test(i) && this.raise(r, "Unterminated regular expression"), e)
      e = !1;
    else {
      if (i === "[")
        t = !0;
      else if (i === "]" && t)
        t = !1;
      else if (i === "/" && !t)
        break;
      e = i === "\\";
    }
    ++this.pos;
  }
  var n = this.input.slice(r, this.pos);
  ++this.pos;
  var a = this.pos, s = this.readWord1();
  this.containsEsc && this.unexpected(a);
  var o = this.regexpState || (this.regexpState = new ai(this));
  o.reset(r, n, s), this.validateRegExpFlags(o), this.validateRegExpPattern(o);
  var l = null;
  try {
    l = new RegExp(n, s);
  } catch {
  }
  return this.finishToken(v.regexp, { pattern: n, flags: s, value: l });
};
Ye.readInt = function(e, t) {
  for (var r = this.pos, i = 0, n = 0, a = t ?? 1 / 0; n < a; ++n) {
    var s = this.input.charCodeAt(this.pos), o = void 0;
    if (s >= 97 ? o = s - 97 + 10 : s >= 65 ? o = s - 65 + 10 : s >= 48 && s <= 57 ? o = s - 48 : o = 1 / 0, o >= e)
      break;
    ++this.pos, i = i * e + o;
  }
  return this.pos === r || t != null && this.pos - r !== t ? null : i;
};
Ye.readRadixNumber = function(e) {
  var t = this.pos;
  this.pos += 2;
  var r = this.readInt(e);
  return r == null && this.raise(this.start + 2, "Expected number in radix " + e), this.options.ecmaVersion >= 11 && this.input.charCodeAt(this.pos) === 110 ? (r = typeof BigInt < "u" ? BigInt(this.input.slice(t, this.pos)) : null, ++this.pos) : ti(this.fullCharCodeAtPos()) && this.raise(this.pos, "Identifier directly after number"), this.finishToken(v.num, r);
};
Ye.readNumber = function(e) {
  var t = this.pos;
  !e && this.readInt(10) === null && this.raise(t, "Invalid number");
  var r = this.pos - t >= 2 && this.input.charCodeAt(t) === 48;
  r && this.strict && this.raise(t, "Invalid number"), r && /[89]/.test(this.input.slice(t, this.pos)) && (r = !1);
  var i = this.input.charCodeAt(this.pos);
  if (!r && !e && this.options.ecmaVersion >= 11 && i === 110) {
    var n = this.input.slice(t, this.pos), a = typeof BigInt < "u" ? BigInt(n) : null;
    return ++this.pos, ti(this.fullCharCodeAtPos()) && this.raise(this.pos, "Identifier directly after number"), this.finishToken(v.num, a);
  }
  i === 46 && !r && (++this.pos, this.readInt(10), i = this.input.charCodeAt(this.pos)), (i === 69 || i === 101) && !r && (i = this.input.charCodeAt(++this.pos), (i === 43 || i === 45) && ++this.pos, this.readInt(10) === null && this.raise(t, "Invalid number")), ti(this.fullCharCodeAtPos()) && this.raise(this.pos, "Identifier directly after number");
  var s = this.input.slice(t, this.pos), o = r ? parseInt(s, 8) : parseFloat(s);
  return this.finishToken(v.num, o);
};
Ye.readCodePoint = function() {
  var e = this.input.charCodeAt(this.pos), t;
  if (e === 123) {
    this.options.ecmaVersion < 6 && this.unexpected();
    var r = ++this.pos;
    t = this.readHexChar(this.input.indexOf("}", this.pos) - this.pos), ++this.pos, t > 1114111 && this.invalidStringToken(r, "Code point out of bounds");
  } else
    t = this.readHexChar(4);
  return t;
};
function hc(e) {
  return e <= 65535 ? String.fromCharCode(e) : (e -= 65536, String.fromCharCode((e >> 10) + 55296, (e & 1023) + 56320));
}
Ye.readString = function(e) {
  for (var t = "", r = ++this.pos; ; ) {
    this.pos >= this.input.length && this.raise(this.start, "Unterminated string constant");
    var i = this.input.charCodeAt(this.pos);
    if (i === e)
      break;
    i === 92 ? (t += this.input.slice(r, this.pos), t += this.readEscapedChar(!1), r = this.pos) : (_n(i, this.options.ecmaVersion >= 10) && this.raise(this.start, "Unterminated string constant"), ++this.pos);
  }
  return t += this.input.slice(r, this.pos++), this.finishToken(v.string, t);
};
var FE = {};
Ye.tryReadTemplateToken = function() {
  this.inTemplateElement = !0;
  try {
    this.readTmplToken();
  } catch (e) {
    if (e === FE)
      this.readInvalidTemplateToken();
    else
      throw e;
  }
  this.inTemplateElement = !1;
};
Ye.invalidStringToken = function(e, t) {
  if (this.inTemplateElement && this.options.ecmaVersion >= 9)
    throw FE;
  this.raise(e, t);
};
Ye.readTmplToken = function() {
  for (var e = "", t = this.pos; ; ) {
    this.pos >= this.input.length && this.raise(this.start, "Unterminated template");
    var r = this.input.charCodeAt(this.pos);
    if (r === 96 || r === 36 && this.input.charCodeAt(this.pos + 1) === 123)
      return this.pos === this.start && (this.type === v.template || this.type === v.invalidTemplate) ? r === 36 ? (this.pos += 2, this.finishToken(v.dollarBraceL)) : (++this.pos, this.finishToken(v.backQuote)) : (e += this.input.slice(t, this.pos), this.finishToken(v.template, e));
    if (r === 92)
      e += this.input.slice(t, this.pos), e += this.readEscapedChar(!0), t = this.pos;
    else if (_n(r)) {
      switch (e += this.input.slice(t, this.pos), ++this.pos, r) {
        case 13:
          this.input.charCodeAt(this.pos) === 10 && ++this.pos;
        case 10:
          e += `
`;
          break;
        default:
          e += String.fromCharCode(r);
          break;
      }
      this.options.locations && (++this.curLine, this.lineStart = this.pos), t = this.pos;
    } else
      ++this.pos;
  }
};
Ye.readInvalidTemplateToken = function() {
  for (; this.pos < this.input.length; this.pos++)
    switch (this.input[this.pos]) {
      case "\\":
        ++this.pos;
        break;
      case "$":
        if (this.input[this.pos + 1] !== "{")
          break;
      case "`":
        return this.finishToken(v.invalidTemplate, this.input.slice(this.start, this.pos));
    }
  this.raise(this.start, "Unterminated template");
};
Ye.readEscapedChar = function(e) {
  var t = this.input.charCodeAt(++this.pos);
  switch (++this.pos, t) {
    case 110:
      return `
`;
    case 114:
      return "\r";
    case 120:
      return String.fromCharCode(this.readHexChar(2));
    case 117:
      return hc(this.readCodePoint());
    case 116:
      return "	";
    case 98:
      return "\b";
    case 118:
      return "\v";
    case 102:
      return "\f";
    case 13:
      this.input.charCodeAt(this.pos) === 10 && ++this.pos;
    case 10:
      return this.options.locations && (this.lineStart = this.pos, ++this.curLine), "";
    default:
      if (t >= 48 && t <= 55) {
        var r = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0], i = parseInt(r, 8);
        return i > 255 && (r = r.slice(0, -1), i = parseInt(r, 8)), this.pos += r.length - 1, t = this.input.charCodeAt(this.pos), (r !== "0" || t === 56 || t === 57) && (this.strict || e) && this.invalidStringToken(
          this.pos - 1 - r.length,
          e ? "Octal literal in template string" : "Octal literal in strict mode"
        ), String.fromCharCode(i);
      }
      return _n(t) ? "" : String.fromCharCode(t);
  }
};
Ye.readHexChar = function(e) {
  var t = this.pos, r = this.readInt(16, e);
  return r === null && this.invalidStringToken(t, "Bad character escape sequence"), r;
};
Ye.readWord1 = function() {
  this.containsEsc = !1;
  for (var e = "", t = !0, r = this.pos, i = this.options.ecmaVersion >= 6; this.pos < this.input.length; ) {
    var n = this.fullCharCodeAtPos();
    if (Fi(n, i))
      this.pos += n <= 65535 ? 1 : 2;
    else if (n === 92) {
      this.containsEsc = !0, e += this.input.slice(r, this.pos);
      var a = this.pos;
      this.input.charCodeAt(++this.pos) !== 117 && this.invalidStringToken(this.pos, "Expecting Unicode escape sequence \\uXXXX"), ++this.pos;
      var s = this.readCodePoint();
      (t ? ti : Fi)(s, i) || this.invalidStringToken(a, "Invalid Unicode escape"), e += hc(s), r = this.pos;
    } else
      break;
    t = !1;
  }
  return e + this.input.slice(r, this.pos);
};
Ye.readWord = function() {
  var e = this.readWord1(), t = v.name;
  return this.keywords.test(e) && (this.containsEsc && this.raiseRecoverable(this.start, "Escape sequence in keyword " + e), t = zs[e]), this.finishToken(t, e);
};
var WE = "6.4.2";
Et.acorn = {
  Parser: Et,
  version: WE,
  defaultOptions: Cs,
  Position: dn,
  SourceLocation: ga,
  getLineInfo: sc,
  Node: Js,
  TokenType: Ze,
  tokTypes: v,
  keywordTypes: zs,
  TokContext: Er,
  tokContexts: dt,
  isIdentifierChar: Fi,
  isIdentifierStart: ti,
  Token: ro,
  isNewLine: _n,
  lineBreak: Ar,
  lineBreakG: En,
  nonASCIIwhitespace: ac
};
function DN(e, t) {
  return Et.parse(e, t);
}
function UN(e, t, r) {
  return Et.parseExpressionAt(e, t, r);
}
function wN(e, t) {
  return Et.tokenizer(e, t);
}
const MN = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  Node: Js,
  Parser: Et,
  Position: dn,
  SourceLocation: ga,
  TokContext: Er,
  Token: ro,
  TokenType: Ze,
  defaultOptions: Cs,
  getLineInfo: sc,
  isIdentifierChar: Fi,
  isIdentifierStart: ti,
  isNewLine: _n,
  keywordTypes: zs,
  lineBreak: Ar,
  lineBreakG: En,
  nonASCIIwhitespace: ac,
  parse: DN,
  parseExpressionAt: UN,
  tokContexts: dt,
  tokTypes: v,
  tokenizer: wN,
  version: WE
}, Symbol.toStringTag, { value: "Module" })), XE = /* @__PURE__ */ du(MN);
var $o = {
  3: "abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile",
  5: "class enum extends super const export import",
  6: "enum",
  strict: "implements interface let package private protected public static yield",
  strictBind: "eval arguments"
}, Yo = "break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this", kN = {
  5: Yo,
  "5module": Yo + " export import",
  6: Yo + " const class extends export import super"
}, QN = /^in(stanceof)?$/, pc = "ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙՠ-ֈא-תׯ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࡠ-ࡪࢠ-ࢴࢶ-ࢽऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱৼਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡૹଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘ-ౚౠౡಀಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൔ-ൖൟ-ൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄຆ-ຊຌ-ຣລວ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏽᏸ-ᏽᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡸᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᲀ-ᲈᲐ-ᲺᲽ-Ჿᳩ-ᳬᳮ-ᳳᳵᳶᳺᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕ℘-ℝℤΩℨK-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々-〇〡-〩〱-〵〸-〼ぁ-ゖ゛-ゟァ-ヺー-ヿㄅ-ㄯㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿯ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞿꟂ-Ᶎꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꣽꣾꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭧꭰ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ", jE = "‌‍·̀-ͯ·҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-٩ٰۖ-ۜ۟-۪ۤۧۨ-ۭ۰-۹ܑܰ-݊ަ-ް߀-߉߫-߽߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛࣓-ࣣ࣡-ःऺ-़ा-ॏ॑-ॗॢॣ०-९ঁ-ঃ়া-ৄেৈো-্ৗৢৣ০-৯৾ਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣ૦-૯ૺ-૿ଁ-ଃ଼ା-ୄେୈୋ-୍ୖୗୢୣ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఀ-ఄా-ౄె-ైొ-్ౕౖౢౣ౦-౯ಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣ೦-೯ഀ-ഃ഻഼ാ-ൄെ-ൈൊ-്ൗൢൣ൦-൯ංඃ්ා-ුූෘ-ෟ෦-෯ෲෳัิ-ฺ็-๎๐-๙ັິ-ຼ່-ໍ໐-໙༘༙༠-༩༹༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှ၀-၉ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟፩-፱ᜒ-᜔ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝០-៩᠋-᠍᠐-᠙ᢩᤠ-ᤫᤰ-᤻᥆-᥏᧐-᧚ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼-᪉᪐-᪙᪰-᪽ᬀ-ᬄ᬴-᭄᭐-᭙᭫-᭳ᮀ-ᮂᮡ-ᮭ᮰-᮹᯦-᯳ᰤ-᰷᱀-᱉᱐-᱙᳐-᳔᳒-᳨᳭᳴᳷-᳹᷀-᷹᷻-᷿‿⁀⁔⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯꘠-꘩꙯ꙴ-꙽ꚞꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧꢀꢁꢴ-ꣅ꣐-꣙꣠-꣱ꣿ-꤉ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀꧐-꧙ꧥ꧰-꧹ꨩ-ꨶꩃꩌꩍ꩐-꩙ꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭꯰-꯹ﬞ︀-️︠-︯︳︴﹍-﹏０-９＿", GN = new RegExp("[" + pc + "]"), VN = new RegExp("[" + pc + jE + "]");
pc = jE = null;
var ZE = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 477, 28, 11, 0, 9, 21, 155, 22, 13, 52, 76, 44, 33, 24, 27, 35, 30, 0, 12, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 0, 33, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 230, 43, 117, 63, 32, 0, 161, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 35, 56, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 270, 921, 103, 110, 18, 195, 2749, 1070, 4050, 582, 8634, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 754, 9486, 286, 50, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 2357, 44, 11, 6, 17, 0, 370, 43, 1301, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42710, 42, 4148, 12, 221, 3, 5761, 15, 7472, 3104, 541], BN = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 525, 10, 176, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 4, 9, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 232, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 135, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 19723, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 419, 13, 1495, 6, 110, 6, 6, 9, 792487, 239];
function Nl(e, t) {
  for (var r = 65536, i = 0; i < t.length; i += 2) {
    if (r += t[i], r > e)
      return !1;
    if (r += t[i + 1], r >= e)
      return !0;
  }
}
function Ai(e, t) {
  return e < 65 ? e === 36 : e < 91 ? !0 : e < 97 ? e === 95 : e < 123 ? !0 : e <= 65535 ? e >= 170 && GN.test(String.fromCharCode(e)) : t === !1 ? !1 : Nl(e, ZE);
}
function Tn(e, t) {
  return e < 48 ? e === 36 : e < 58 ? !0 : e < 65 ? !1 : e < 91 ? !0 : e < 97 ? e === 95 : e < 123 ? !0 : e <= 65535 ? e >= 170 && VN.test(String.fromCharCode(e)) : t === !1 ? !1 : Nl(e, ZE) || Nl(e, BN);
}
var He = function(t, r) {
  r === void 0 && (r = {}), this.label = t, this.keyword = r.keyword, this.beforeExpr = !!r.beforeExpr, this.startsExpr = !!r.startsExpr, this.isLoop = !!r.isLoop, this.isAssign = !!r.isAssign, this.prefix = !!r.prefix, this.postfix = !!r.postfix, this.binop = r.binop || null, this.updateContext = null;
};
function Nr(e, t) {
  return new He(e, { beforeExpr: !0, binop: t });
}
var Or = { beforeExpr: !0 }, ar = { startsExpr: !0 }, Oc = {};
function Be(e, t) {
  return t === void 0 && (t = {}), t.keyword = e, Oc[e] = new He(e, t);
}
var T = {
  num: new He("num", ar),
  regexp: new He("regexp", ar),
  string: new He("string", ar),
  name: new He("name", ar),
  eof: new He("eof"),
  // Punctuation token types.
  bracketL: new He("[", { beforeExpr: !0, startsExpr: !0 }),
  bracketR: new He("]"),
  braceL: new He("{", { beforeExpr: !0, startsExpr: !0 }),
  braceR: new He("}"),
  parenL: new He("(", { beforeExpr: !0, startsExpr: !0 }),
  parenR: new He(")"),
  comma: new He(",", Or),
  semi: new He(";", Or),
  colon: new He(":", Or),
  dot: new He("."),
  question: new He("?", Or),
  arrow: new He("=>", Or),
  template: new He("template"),
  invalidTemplate: new He("invalidTemplate"),
  ellipsis: new He("...", Or),
  backQuote: new He("`", ar),
  dollarBraceL: new He("${", { beforeExpr: !0, startsExpr: !0 }),
  // Operators. These carry several kinds of properties to help the
  // parser use them properly (the presence of these properties is
  // what categorizes them as operators).
  //
  // `binop`, when present, specifies that this operator is a binary
  // operator, and will refer to its precedence.
  //
  // `prefix` and `postfix` mark the operator as a prefix or postfix
  // unary operator.
  //
  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as
  // binary operators with a very low precedence, that should result
  // in AssignmentExpression nodes.
  eq: new He("=", { beforeExpr: !0, isAssign: !0 }),
  assign: new He("_=", { beforeExpr: !0, isAssign: !0 }),
  incDec: new He("++/--", { prefix: !0, postfix: !0, startsExpr: !0 }),
  prefix: new He("!/~", { beforeExpr: !0, prefix: !0, startsExpr: !0 }),
  logicalOR: Nr("||", 1),
  logicalAND: Nr("&&", 2),
  bitwiseOR: Nr("|", 3),
  bitwiseXOR: Nr("^", 4),
  bitwiseAND: Nr("&", 5),
  equality: Nr("==/!=/===/!==", 6),
  relational: Nr("</>/<=/>=", 7),
  bitShift: Nr("<</>>/>>>", 8),
  plusMin: new He("+/-", { beforeExpr: !0, binop: 9, prefix: !0, startsExpr: !0 }),
  modulo: Nr("%", 10),
  star: Nr("*", 10),
  slash: Nr("/", 10),
  starstar: new He("**", { beforeExpr: !0 }),
  // Keyword token types.
  _break: Be("break"),
  _case: Be("case", Or),
  _catch: Be("catch"),
  _continue: Be("continue"),
  _debugger: Be("debugger"),
  _default: Be("default", Or),
  _do: Be("do", { isLoop: !0, beforeExpr: !0 }),
  _else: Be("else", Or),
  _finally: Be("finally"),
  _for: Be("for", { isLoop: !0 }),
  _function: Be("function", ar),
  _if: Be("if"),
  _return: Be("return", Or),
  _switch: Be("switch"),
  _throw: Be("throw", Or),
  _try: Be("try"),
  _var: Be("var"),
  _const: Be("const"),
  _while: Be("while", { isLoop: !0 }),
  _with: Be("with"),
  _new: Be("new", { beforeExpr: !0, startsExpr: !0 }),
  _this: Be("this", ar),
  _super: Be("super", ar),
  _class: Be("class", ar),
  _extends: Be("extends", Or),
  _export: Be("export"),
  _import: Be("import", ar),
  _null: Be("null", ar),
  _true: Be("true", ar),
  _false: Be("false", ar),
  _in: Be("in", { beforeExpr: !0, binop: 7 }),
  _instanceof: Be("instanceof", { beforeExpr: !0, binop: 7 }),
  _typeof: Be("typeof", { beforeExpr: !0, prefix: !0, startsExpr: !0 }),
  _void: Be("void", { beforeExpr: !0, prefix: !0, startsExpr: !0 }),
  _delete: Be("delete", { beforeExpr: !0, prefix: !0, startsExpr: !0 })
}, gr = /\r\n?|\n|\u2028|\u2029/, Wi = new RegExp(gr.source, "g");
function Ni(e, t) {
  return e === 10 || e === 13 || !t && (e === 8232 || e === 8233);
}
var HE = /[\u1680\u2000-\u200a\u202f\u205f\u3000\ufeff]/, $r = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g, zE = Object.prototype, $N = zE.hasOwnProperty, YN = zE.toString;
function io(e, t) {
  return $N.call(e, t);
}
var Oh = Array.isArray || function(e) {
  return YN.call(e) === "[object Array]";
};
function ki(e) {
  return new RegExp("^(?:" + e.replace(/ /g, "|") + ")$");
}
var la = function(t, r) {
  this.line = t, this.column = r;
};
la.prototype.offset = function(t) {
  return new la(this.line, this.column + t);
};
var bn = function(t, r, i) {
  this.start = r, this.end = i, t.sourceFile !== null && (this.source = t.sourceFile);
};
function ua(e, t) {
  for (var r = 1, i = 0; ; ) {
    Wi.lastIndex = i;
    var n = Wi.exec(e);
    if (n && n.index < t)
      ++r, i = n.index + n[0].length;
    else
      return new la(r, t - i);
  }
}
var Ds = {
  // `ecmaVersion` indicates the ECMAScript version to parse. Must be
  // either 3, 5, 6 (2015), 7 (2016), 8 (2017), 9 (2018), or 10
  // (2019). This influences support for strict mode, the set of
  // reserved words, and support for new syntax features. The default
  // is 9.
  ecmaVersion: 9,
  // `sourceType` indicates the mode the code should be parsed in.
  // Can be either `"script"` or `"module"`. This influences global
  // strict mode and parsing of `import` and `export` declarations.
  sourceType: "script",
  // `onInsertedSemicolon` can be a callback that will be called
  // when a semicolon is automatically inserted. It will be passed
  // the position of the comma as an offset, and if `locations` is
  // enabled, it is given the location as a `{line, column}` object
  // as second argument.
  onInsertedSemicolon: null,
  // `onTrailingComma` is similar to `onInsertedSemicolon`, but for
  // trailing commas.
  onTrailingComma: null,
  // By default, reserved words are only enforced if ecmaVersion >= 5.
  // Set `allowReserved` to a boolean value to explicitly turn this on
  // an off. When this option has the value "never", reserved words
  // and keywords can also not be used as property names.
  allowReserved: null,
  // When enabled, a return at the top level is not considered an
  // error.
  allowReturnOutsideFunction: !1,
  // When enabled, import/export statements are not constrained to
  // appearing at the top of the program.
  allowImportExportEverywhere: !1,
  // When enabled, await identifiers are allowed to appear at the top-level scope,
  // but they are still not allowed in non-async functions.
  allowAwaitOutsideFunction: !1,
  // When enabled, hashbang directive in the beginning of file
  // is allowed and treated as a line comment.
  allowHashBang: !1,
  // When `locations` is on, `loc` properties holding objects with
  // `start` and `end` properties in `{line, column}` form (with
  // line being 1-based and column 0-based) will be attached to the
  // nodes.
  locations: !1,
  // A function can be passed as `onToken` option, which will
  // cause Acorn to call that function with object in the same
  // format as tokens returned from `tokenizer().getToken()`. Note
  // that you are not allowed to call the parser from the
  // callback—that will corrupt its internal state.
  onToken: null,
  // A function can be passed as `onComment` option, which will
  // cause Acorn to call that function with `(block, text, start,
  // end)` parameters whenever a comment is skipped. `block` is a
  // boolean indicating whether this is a block (`/* */`) comment,
  // `text` is the content of the comment, and `start` and `end` are
  // character offsets that denote the start and end of the comment.
  // When the `locations` option is on, two more parameters are
  // passed, the full `{line, column}` locations of the start and
  // end of the comments. Note that you are not allowed to call the
  // parser from the callback—that will corrupt its internal state.
  onComment: null,
  // Nodes have their start and end characters offsets recorded in
  // `start` and `end` properties (directly on the node, rather than
  // the `loc` object, which holds line/column data. To also add a
  // [semi-standardized][range] `range` property holding a `[start,
  // end]` array with the same numbers, set the `ranges` option to
  // `true`.
  //
  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678
  ranges: !1,
  // It is possible to parse multiple files into a single AST by
  // passing the tree produced by parsing the first file as
  // `program` option in subsequent parses. This will add the
  // toplevel forms of the parsed file to the `Program` (top) node
  // of an existing parse tree.
  program: null,
  // When `locations` is on, you can pass this to record the source
  // file in every node's `loc` object.
  sourceFile: null,
  // This value, if given, is stored in every node, whether
  // `locations` is on or off.
  directSourceFile: null,
  // When enabled, parenthesized expressions are represented by
  // (non-standard) ParenthesizedExpression nodes
  preserveParens: !1
};
function FN(e) {
  var t = {};
  for (var r in Ds)
    t[r] = e && io(e, r) ? e[r] : Ds[r];
  if (t.ecmaVersion >= 2015 && (t.ecmaVersion -= 2009), t.allowReserved == null && (t.allowReserved = t.ecmaVersion < 5), Oh(t.onToken)) {
    var i = t.onToken;
    t.onToken = function(n) {
      return i.push(n);
    };
  }
  return Oh(t.onComment) && (t.onComment = WN(t, t.onComment)), t;
}
function WN(e, t) {
  return function(r, i, n, a, s, o) {
    var l = {
      type: r ? "Block" : "Line",
      value: i,
      start: n,
      end: a
    };
    e.locations && (l.loc = new bn(this, s, o)), e.ranges && (l.range = [n, a]), t.push(l);
  };
}
var ca = 1, Ia = 2, Ec = ca | Ia, qE = 4, JE = 8, KE = 16, ed = 32, td = 64, rd = 128;
function dc(e, t) {
  return Ia | (e ? qE : 0) | (t ? JE : 0);
}
var Eh = 0, Tc = 1, ei = 2, id = 3, nd = 4, ad = 5, _t = function(t, r, i) {
  this.options = t = FN(t), this.sourceFile = t.sourceFile, this.keywords = ki(kN[t.ecmaVersion >= 6 ? 6 : t.sourceType === "module" ? "5module" : 5]);
  var n = "";
  if (t.allowReserved !== !0) {
    for (var a = t.ecmaVersion; !(n = $o[a]); a--)
      ;
    t.sourceType === "module" && (n += " await");
  }
  this.reservedWords = ki(n);
  var s = (n ? n + " " : "") + $o.strict;
  this.reservedWordsStrict = ki(s), this.reservedWordsStrictBind = ki(s + " " + $o.strictBind), this.input = String(r), this.containsEsc = !1, i ? (this.pos = i, this.lineStart = this.input.lastIndexOf(`
`, i - 1) + 1, this.curLine = this.input.slice(0, this.lineStart).split(gr).length) : (this.pos = this.lineStart = 0, this.curLine = 1), this.type = T.eof, this.value = null, this.start = this.end = this.pos, this.startLoc = this.endLoc = this.curPosition(), this.lastTokEndLoc = this.lastTokStartLoc = null, this.lastTokStart = this.lastTokEnd = this.pos, this.context = this.initialContext(), this.exprAllowed = !0, this.inModule = t.sourceType === "module", this.strict = this.inModule || this.strictDirective(this.pos), this.potentialArrowAt = -1, this.yieldPos = this.awaitPos = this.awaitIdentPos = 0, this.labels = [], this.undefinedExports = {}, this.pos === 0 && t.allowHashBang && this.input.slice(0, 2) === "#!" && this.skipLineComment(2), this.scopeStack = [], this.enterScope(ca), this.regexpState = null;
}, Hi = { inFunction: { configurable: !0 }, inGenerator: { configurable: !0 }, inAsync: { configurable: !0 }, allowSuper: { configurable: !0 }, allowDirectSuper: { configurable: !0 }, treatFunctionsAsVar: { configurable: !0 } };
_t.prototype.parse = function() {
  var t = this.options.program || this.startNode();
  return this.nextToken(), this.parseTopLevel(t);
};
Hi.inFunction.get = function() {
  return (this.currentVarScope().flags & Ia) > 0;
};
Hi.inGenerator.get = function() {
  return (this.currentVarScope().flags & JE) > 0;
};
Hi.inAsync.get = function() {
  return (this.currentVarScope().flags & qE) > 0;
};
Hi.allowSuper.get = function() {
  return (this.currentThisScope().flags & td) > 0;
};
Hi.allowDirectSuper.get = function() {
  return (this.currentThisScope().flags & rd) > 0;
};
Hi.treatFunctionsAsVar.get = function() {
  return this.treatFunctionsAsVarInScope(this.currentScope());
};
_t.prototype.inNonArrowFunction = function() {
  return (this.currentThisScope().flags & Ia) > 0;
};
_t.extend = function() {
  for (var t = [], r = arguments.length; r--; )
    t[r] = arguments[r];
  for (var i = this, n = 0; n < t.length; n++)
    i = t[n](i);
  return i;
};
_t.parse = function(t, r) {
  return new this(r, t).parse();
};
_t.parseExpressionAt = function(t, r, i) {
  var n = new this(i, t, r);
  return n.nextToken(), n.parseExpression();
};
_t.tokenizer = function(t, r) {
  return new this(r, t);
};
Object.defineProperties(_t.prototype, Hi);
var Ht = _t.prototype, XN = /^(?:'((?:\\.|[^'\\])*?)'|"((?:\\.|[^"\\])*?)")/;
Ht.strictDirective = function(e) {
  for (; ; ) {
    $r.lastIndex = e, e += $r.exec(this.input)[0].length;
    var t = XN.exec(this.input.slice(e));
    if (!t)
      return !1;
    if ((t[1] || t[2]) === "use strict")
      return !0;
    e += t[0].length, $r.lastIndex = e, e += $r.exec(this.input)[0].length, this.input[e] === ";" && e++;
  }
};
Ht.eat = function(e) {
  return this.type === e ? (this.next(), !0) : !1;
};
Ht.isContextual = function(e) {
  return this.type === T.name && this.value === e && !this.containsEsc;
};
Ht.eatContextual = function(e) {
  return this.isContextual(e) ? (this.next(), !0) : !1;
};
Ht.expectContextual = function(e) {
  this.eatContextual(e) || this.unexpected();
};
Ht.canInsertSemicolon = function() {
  return this.type === T.eof || this.type === T.braceR || gr.test(this.input.slice(this.lastTokEnd, this.start));
};
Ht.insertSemicolon = function() {
  if (this.canInsertSemicolon())
    return this.options.onInsertedSemicolon && this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc), !0;
};
Ht.semicolon = function() {
  !this.eat(T.semi) && !this.insertSemicolon() && this.unexpected();
};
Ht.afterTrailingComma = function(e, t) {
  if (this.type === e)
    return this.options.onTrailingComma && this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc), t || this.next(), !0;
};
Ht.expect = function(e) {
  this.eat(e) || this.unexpected();
};
Ht.unexpected = function(e) {
  this.raise(e ?? this.start, "Unexpected token");
};
function fa() {
  this.shorthandAssign = this.trailingComma = this.parenthesizedAssign = this.parenthesizedBind = this.doubleProto = -1;
}
Ht.checkPatternErrors = function(e, t) {
  if (e) {
    e.trailingComma > -1 && this.raiseRecoverable(e.trailingComma, "Comma is not permitted after the rest element");
    var r = t ? e.parenthesizedAssign : e.parenthesizedBind;
    r > -1 && this.raiseRecoverable(r, "Parenthesized pattern");
  }
};
Ht.checkExpressionErrors = function(e, t) {
  if (!e)
    return !1;
  var r = e.shorthandAssign, i = e.doubleProto;
  if (!t)
    return r >= 0 || i >= 0;
  r >= 0 && this.raise(r, "Shorthand property assignments are valid only in destructuring patterns"), i >= 0 && this.raiseRecoverable(i, "Redefinition of __proto__ property");
};
Ht.checkYieldAwaitInDefaultParams = function() {
  this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos) && this.raise(this.yieldPos, "Yield expression cannot be a default value"), this.awaitPos && this.raise(this.awaitPos, "Await expression cannot be a default value");
};
Ht.isSimpleAssignTarget = function(e) {
  return e.type === "ParenthesizedExpression" ? this.isSimpleAssignTarget(e.expression) : e.type === "Identifier" || e.type === "MemberExpression";
};
var ve = _t.prototype;
ve.parseTopLevel = function(e) {
  var t = {};
  for (e.body || (e.body = []); this.type !== T.eof; ) {
    var r = this.parseStatement(null, !0, t);
    e.body.push(r);
  }
  if (this.inModule)
    for (var i = 0, n = Object.keys(this.undefinedExports); i < n.length; i += 1) {
      var a = n[i];
      this.raiseRecoverable(this.undefinedExports[a].start, "Export '" + a + "' is not defined");
    }
  return this.adaptDirectivePrologue(e.body), this.next(), e.sourceType = this.options.sourceType, this.finishNode(e, "Program");
};
var Sc = { kind: "loop" }, jN = { kind: "switch" };
ve.isLet = function(e) {
  if (this.options.ecmaVersion < 6 || !this.isContextual("let"))
    return !1;
  $r.lastIndex = this.pos;
  var t = $r.exec(this.input), r = this.pos + t[0].length, i = this.input.charCodeAt(r);
  if (i === 91)
    return !0;
  if (e)
    return !1;
  if (i === 123)
    return !0;
  if (Ai(i, !0)) {
    for (var n = r + 1; Tn(this.input.charCodeAt(n), !0); )
      ++n;
    var a = this.input.slice(r, n);
    if (!QN.test(a))
      return !0;
  }
  return !1;
};
ve.isAsyncFunction = function() {
  if (this.options.ecmaVersion < 8 || !this.isContextual("async"))
    return !1;
  $r.lastIndex = this.pos;
  var e = $r.exec(this.input), t = this.pos + e[0].length;
  return !gr.test(this.input.slice(this.pos, t)) && this.input.slice(t, t + 8) === "function" && (t + 8 === this.input.length || !Tn(this.input.charAt(t + 8)));
};
ve.parseStatement = function(e, t, r) {
  var i = this.type, n = this.startNode(), a;
  switch (this.isLet(e) && (i = T._var, a = "let"), i) {
    case T._break:
    case T._continue:
      return this.parseBreakContinueStatement(n, i.keyword);
    case T._debugger:
      return this.parseDebuggerStatement(n);
    case T._do:
      return this.parseDoStatement(n);
    case T._for:
      return this.parseForStatement(n);
    case T._function:
      return e && (this.strict || e !== "if" && e !== "label") && this.options.ecmaVersion >= 6 && this.unexpected(), this.parseFunctionStatement(n, !1, !e);
    case T._class:
      return e && this.unexpected(), this.parseClass(n, !0);
    case T._if:
      return this.parseIfStatement(n);
    case T._return:
      return this.parseReturnStatement(n);
    case T._switch:
      return this.parseSwitchStatement(n);
    case T._throw:
      return this.parseThrowStatement(n);
    case T._try:
      return this.parseTryStatement(n);
    case T._const:
    case T._var:
      return a = a || this.value, e && a !== "var" && this.unexpected(), this.parseVarStatement(n, a);
    case T._while:
      return this.parseWhileStatement(n);
    case T._with:
      return this.parseWithStatement(n);
    case T.braceL:
      return this.parseBlock(!0, n);
    case T.semi:
      return this.parseEmptyStatement(n);
    case T._export:
    case T._import:
      if (this.options.ecmaVersion > 10 && i === T._import) {
        $r.lastIndex = this.pos;
        var s = $r.exec(this.input), o = this.pos + s[0].length, l = this.input.charCodeAt(o);
        if (l === 40)
          return this.parseExpressionStatement(n, this.parseExpression());
      }
      return this.options.allowImportExportEverywhere || (t || this.raise(this.start, "'import' and 'export' may only appear at the top level"), this.inModule || this.raise(this.start, "'import' and 'export' may appear only with 'sourceType: module'")), i === T._import ? this.parseImport(n) : this.parseExport(n, r);
    default:
      if (this.isAsyncFunction())
        return e && this.unexpected(), this.next(), this.parseFunctionStatement(n, !0, !e);
      var c = this.value, f = this.parseExpression();
      return i === T.name && f.type === "Identifier" && this.eat(T.colon) ? this.parseLabeledStatement(n, c, f, e) : this.parseExpressionStatement(n, f);
  }
};
ve.parseBreakContinueStatement = function(e, t) {
  var r = t === "break";
  this.next(), this.eat(T.semi) || this.insertSemicolon() ? e.label = null : this.type !== T.name ? this.unexpected() : (e.label = this.parseIdent(), this.semicolon());
  for (var i = 0; i < this.labels.length; ++i) {
    var n = this.labels[i];
    if ((e.label == null || n.name === e.label.name) && (n.kind != null && (r || n.kind === "loop") || e.label && r))
      break;
  }
  return i === this.labels.length && this.raise(e.start, "Unsyntactic " + t), this.finishNode(e, r ? "BreakStatement" : "ContinueStatement");
};
ve.parseDebuggerStatement = function(e) {
  return this.next(), this.semicolon(), this.finishNode(e, "DebuggerStatement");
};
ve.parseDoStatement = function(e) {
  return this.next(), this.labels.push(Sc), e.body = this.parseStatement("do"), this.labels.pop(), this.expect(T._while), e.test = this.parseParenExpression(), this.options.ecmaVersion >= 6 ? this.eat(T.semi) : this.semicolon(), this.finishNode(e, "DoWhileStatement");
};
ve.parseForStatement = function(e) {
  this.next();
  var t = this.options.ecmaVersion >= 9 && (this.inAsync || !this.inFunction && this.options.allowAwaitOutsideFunction) && this.eatContextual("await") ? this.lastTokStart : -1;
  if (this.labels.push(Sc), this.enterScope(0), this.expect(T.parenL), this.type === T.semi)
    return t > -1 && this.unexpected(t), this.parseFor(e, null);
  var r = this.isLet();
  if (this.type === T._var || this.type === T._const || r) {
    var i = this.startNode(), n = r ? "let" : this.value;
    return this.next(), this.parseVar(i, !0, n), this.finishNode(i, "VariableDeclaration"), (this.type === T._in || this.options.ecmaVersion >= 6 && this.isContextual("of")) && i.declarations.length === 1 ? (this.options.ecmaVersion >= 9 && (this.type === T._in ? t > -1 && this.unexpected(t) : e.await = t > -1), this.parseForIn(e, i)) : (t > -1 && this.unexpected(t), this.parseFor(e, i));
  }
  var a = new fa(), s = this.parseExpression(!0, a);
  return this.type === T._in || this.options.ecmaVersion >= 6 && this.isContextual("of") ? (this.options.ecmaVersion >= 9 && (this.type === T._in ? t > -1 && this.unexpected(t) : e.await = t > -1), this.toAssignable(s, !1, a), this.checkLVal(s), this.parseForIn(e, s)) : (this.checkExpressionErrors(a, !0), t > -1 && this.unexpected(t), this.parseFor(e, s));
};
ve.parseFunctionStatement = function(e, t, r) {
  return this.next(), this.parseFunction(e, Xn | (r ? 0 : Pl), !1, t);
};
ve.parseIfStatement = function(e) {
  return this.next(), e.test = this.parseParenExpression(), e.consequent = this.parseStatement("if"), e.alternate = this.eat(T._else) ? this.parseStatement("if") : null, this.finishNode(e, "IfStatement");
};
ve.parseReturnStatement = function(e) {
  return !this.inFunction && !this.options.allowReturnOutsideFunction && this.raise(this.start, "'return' outside of function"), this.next(), this.eat(T.semi) || this.insertSemicolon() ? e.argument = null : (e.argument = this.parseExpression(), this.semicolon()), this.finishNode(e, "ReturnStatement");
};
ve.parseSwitchStatement = function(e) {
  this.next(), e.discriminant = this.parseParenExpression(), e.cases = [], this.expect(T.braceL), this.labels.push(jN), this.enterScope(0);
  for (var t, r = !1; this.type !== T.braceR; )
    if (this.type === T._case || this.type === T._default) {
      var i = this.type === T._case;
      t && this.finishNode(t, "SwitchCase"), e.cases.push(t = this.startNode()), t.consequent = [], this.next(), i ? t.test = this.parseExpression() : (r && this.raiseRecoverable(this.lastTokStart, "Multiple default clauses"), r = !0, t.test = null), this.expect(T.colon);
    } else
      t || this.unexpected(), t.consequent.push(this.parseStatement(null));
  return this.exitScope(), t && this.finishNode(t, "SwitchCase"), this.next(), this.labels.pop(), this.finishNode(e, "SwitchStatement");
};
ve.parseThrowStatement = function(e) {
  return this.next(), gr.test(this.input.slice(this.lastTokEnd, this.start)) && this.raise(this.lastTokEnd, "Illegal newline after throw"), e.argument = this.parseExpression(), this.semicolon(), this.finishNode(e, "ThrowStatement");
};
var ZN = [];
ve.parseTryStatement = function(e) {
  if (this.next(), e.block = this.parseBlock(), e.handler = null, this.type === T._catch) {
    var t = this.startNode();
    if (this.next(), this.eat(T.parenL)) {
      t.param = this.parseBindingAtom();
      var r = t.param.type === "Identifier";
      this.enterScope(r ? ed : 0), this.checkLVal(t.param, r ? nd : ei), this.expect(T.parenR);
    } else
      this.options.ecmaVersion < 10 && this.unexpected(), t.param = null, this.enterScope(0);
    t.body = this.parseBlock(!1), this.exitScope(), e.handler = this.finishNode(t, "CatchClause");
  }
  return e.finalizer = this.eat(T._finally) ? this.parseBlock() : null, !e.handler && !e.finalizer && this.raise(e.start, "Missing catch or finally clause"), this.finishNode(e, "TryStatement");
};
ve.parseVarStatement = function(e, t) {
  return this.next(), this.parseVar(e, !1, t), this.semicolon(), this.finishNode(e, "VariableDeclaration");
};
ve.parseWhileStatement = function(e) {
  return this.next(), e.test = this.parseParenExpression(), this.labels.push(Sc), e.body = this.parseStatement("while"), this.labels.pop(), this.finishNode(e, "WhileStatement");
};
ve.parseWithStatement = function(e) {
  return this.strict && this.raise(this.start, "'with' in strict mode"), this.next(), e.object = this.parseParenExpression(), e.body = this.parseStatement("with"), this.finishNode(e, "WithStatement");
};
ve.parseEmptyStatement = function(e) {
  return this.next(), this.finishNode(e, "EmptyStatement");
};
ve.parseLabeledStatement = function(e, t, r, i) {
  for (var n = 0, a = this.labels; n < a.length; n += 1) {
    var s = a[n];
    s.name === t && this.raise(r.start, "Label '" + t + "' is already declared");
  }
  for (var o = this.type.isLoop ? "loop" : this.type === T._switch ? "switch" : null, l = this.labels.length - 1; l >= 0; l--) {
    var c = this.labels[l];
    if (c.statementStart === e.start)
      c.statementStart = this.start, c.kind = o;
    else
      break;
  }
  return this.labels.push({ name: t, kind: o, statementStart: this.start }), e.body = this.parseStatement(i ? i.indexOf("label") === -1 ? i + "label" : i : "label"), this.labels.pop(), e.label = r, this.finishNode(e, "LabeledStatement");
};
ve.parseExpressionStatement = function(e, t) {
  return e.expression = t, this.semicolon(), this.finishNode(e, "ExpressionStatement");
};
ve.parseBlock = function(e, t) {
  for (e === void 0 && (e = !0), t === void 0 && (t = this.startNode()), t.body = [], this.expect(T.braceL), e && this.enterScope(0); !this.eat(T.braceR); ) {
    var r = this.parseStatement(null);
    t.body.push(r);
  }
  return e && this.exitScope(), this.finishNode(t, "BlockStatement");
};
ve.parseFor = function(e, t) {
  return e.init = t, this.expect(T.semi), e.test = this.type === T.semi ? null : this.parseExpression(), this.expect(T.semi), e.update = this.type === T.parenR ? null : this.parseExpression(), this.expect(T.parenR), e.body = this.parseStatement("for"), this.exitScope(), this.labels.pop(), this.finishNode(e, "ForStatement");
};
ve.parseForIn = function(e, t) {
  var r = this.type === T._in;
  return this.next(), t.type === "VariableDeclaration" && t.declarations[0].init != null && (!r || this.options.ecmaVersion < 8 || this.strict || t.kind !== "var" || t.declarations[0].id.type !== "Identifier") ? this.raise(
    t.start,
    (r ? "for-in" : "for-of") + " loop variable declaration may not have an initializer"
  ) : t.type === "AssignmentPattern" && this.raise(t.start, "Invalid left-hand side in for-loop"), e.left = t, e.right = r ? this.parseExpression() : this.parseMaybeAssign(), this.expect(T.parenR), e.body = this.parseStatement("for"), this.exitScope(), this.labels.pop(), this.finishNode(e, r ? "ForInStatement" : "ForOfStatement");
};
ve.parseVar = function(e, t, r) {
  for (e.declarations = [], e.kind = r; ; ) {
    var i = this.startNode();
    if (this.parseVarId(i, r), this.eat(T.eq) ? i.init = this.parseMaybeAssign(t) : r === "const" && !(this.type === T._in || this.options.ecmaVersion >= 6 && this.isContextual("of")) ? this.unexpected() : i.id.type !== "Identifier" && !(t && (this.type === T._in || this.isContextual("of"))) ? this.raise(this.lastTokEnd, "Complex binding patterns require an initialization value") : i.init = null, e.declarations.push(this.finishNode(i, "VariableDeclarator")), !this.eat(T.comma))
      break;
  }
  return e;
};
ve.parseVarId = function(e, t) {
  e.id = this.parseBindingAtom(), this.checkLVal(e.id, t === "var" ? Tc : ei, !1);
};
var Xn = 1, Pl = 2, sd = 4;
ve.parseFunction = function(e, t, r, i) {
  this.initFunction(e), (this.options.ecmaVersion >= 9 || this.options.ecmaVersion >= 6 && !i) && (this.type === T.star && t & Pl && this.unexpected(), e.generator = this.eat(T.star)), this.options.ecmaVersion >= 8 && (e.async = !!i), t & Xn && (e.id = t & sd && this.type !== T.name ? null : this.parseIdent(), e.id && !(t & Pl) && this.checkLVal(e.id, this.strict || e.generator || e.async ? this.treatFunctionsAsVar ? Tc : ei : id));
  var n = this.yieldPos, a = this.awaitPos, s = this.awaitIdentPos;
  return this.yieldPos = 0, this.awaitPos = 0, this.awaitIdentPos = 0, this.enterScope(dc(e.async, e.generator)), t & Xn || (e.id = this.type === T.name ? this.parseIdent() : null), this.parseFunctionParams(e), this.parseFunctionBody(e, r, !1), this.yieldPos = n, this.awaitPos = a, this.awaitIdentPos = s, this.finishNode(e, t & Xn ? "FunctionDeclaration" : "FunctionExpression");
};
ve.parseFunctionParams = function(e) {
  this.expect(T.parenL), e.params = this.parseBindingList(T.parenR, !1, this.options.ecmaVersion >= 8), this.checkYieldAwaitInDefaultParams();
};
ve.parseClass = function(e, t) {
  this.next();
  var r = this.strict;
  this.strict = !0, this.parseClassId(e, t), this.parseClassSuper(e);
  var i = this.startNode(), n = !1;
  for (i.body = [], this.expect(T.braceL); !this.eat(T.braceR); ) {
    var a = this.parseClassElement(e.superClass !== null);
    a && (i.body.push(a), a.type === "MethodDefinition" && a.kind === "constructor" && (n && this.raise(a.start, "Duplicate constructor in the same class"), n = !0));
  }
  return e.body = this.finishNode(i, "ClassBody"), this.strict = r, this.finishNode(e, t ? "ClassDeclaration" : "ClassExpression");
};
ve.parseClassElement = function(e) {
  var t = this;
  if (this.eat(T.semi))
    return null;
  var r = this.startNode(), i = function(l, c) {
    c === void 0 && (c = !1);
    var f = t.start, p = t.startLoc;
    return t.eatContextual(l) ? t.type !== T.parenL && (!c || !t.canInsertSemicolon()) ? !0 : (r.key && t.unexpected(), r.computed = !1, r.key = t.startNodeAt(f, p), r.key.name = l, t.finishNode(r.key, "Identifier"), !1) : !1;
  };
  r.kind = "method", r.static = i("static");
  var n = this.eat(T.star), a = !1;
  n || (this.options.ecmaVersion >= 8 && i("async", !0) ? (a = !0, n = this.options.ecmaVersion >= 9 && this.eat(T.star)) : i("get") ? r.kind = "get" : i("set") && (r.kind = "set")), r.key || this.parsePropertyName(r);
  var s = r.key, o = !1;
  return !r.computed && !r.static && (s.type === "Identifier" && s.name === "constructor" || s.type === "Literal" && s.value === "constructor") ? (r.kind !== "method" && this.raise(s.start, "Constructor can't have get/set modifier"), n && this.raise(s.start, "Constructor can't be a generator"), a && this.raise(s.start, "Constructor can't be an async method"), r.kind = "constructor", o = e) : r.static && s.type === "Identifier" && s.name === "prototype" && this.raise(s.start, "Classes may not have a static property named prototype"), this.parseClassMethod(r, n, a, o), r.kind === "get" && r.value.params.length !== 0 && this.raiseRecoverable(r.value.start, "getter should have no params"), r.kind === "set" && r.value.params.length !== 1 && this.raiseRecoverable(r.value.start, "setter should have exactly one param"), r.kind === "set" && r.value.params[0].type === "RestElement" && this.raiseRecoverable(r.value.params[0].start, "Setter cannot use rest params"), r;
};
ve.parseClassMethod = function(e, t, r, i) {
  return e.value = this.parseMethod(t, r, i), this.finishNode(e, "MethodDefinition");
};
ve.parseClassId = function(e, t) {
  this.type === T.name ? (e.id = this.parseIdent(), t && this.checkLVal(e.id, ei, !1)) : (t === !0 && this.unexpected(), e.id = null);
};
ve.parseClassSuper = function(e) {
  e.superClass = this.eat(T._extends) ? this.parseExprSubscripts() : null;
};
ve.parseExport = function(e, t) {
  if (this.next(), this.eat(T.star))
    return this.expectContextual("from"), this.type !== T.string && this.unexpected(), e.source = this.parseExprAtom(), this.semicolon(), this.finishNode(e, "ExportAllDeclaration");
  if (this.eat(T._default)) {
    this.checkExport(t, "default", this.lastTokStart);
    var r;
    if (this.type === T._function || (r = this.isAsyncFunction())) {
      var i = this.startNode();
      this.next(), r && this.next(), e.declaration = this.parseFunction(i, Xn | sd, !1, r);
    } else if (this.type === T._class) {
      var n = this.startNode();
      e.declaration = this.parseClass(n, "nullableID");
    } else
      e.declaration = this.parseMaybeAssign(), this.semicolon();
    return this.finishNode(e, "ExportDefaultDeclaration");
  }
  if (this.shouldParseExportStatement())
    e.declaration = this.parseStatement(null), e.declaration.type === "VariableDeclaration" ? this.checkVariableExport(t, e.declaration.declarations) : this.checkExport(t, e.declaration.id.name, e.declaration.id.start), e.specifiers = [], e.source = null;
  else {
    if (e.declaration = null, e.specifiers = this.parseExportSpecifiers(t), this.eatContextual("from"))
      this.type !== T.string && this.unexpected(), e.source = this.parseExprAtom();
    else {
      for (var a = 0, s = e.specifiers; a < s.length; a += 1) {
        var o = s[a];
        this.checkUnreserved(o.local), this.checkLocalExport(o.local);
      }
      e.source = null;
    }
    this.semicolon();
  }
  return this.finishNode(e, "ExportNamedDeclaration");
};
ve.checkExport = function(e, t, r) {
  e && (io(e, t) && this.raiseRecoverable(r, "Duplicate export '" + t + "'"), e[t] = !0);
};
ve.checkPatternExport = function(e, t) {
  var r = t.type;
  if (r === "Identifier")
    this.checkExport(e, t.name, t.start);
  else if (r === "ObjectPattern")
    for (var i = 0, n = t.properties; i < n.length; i += 1) {
      var a = n[i];
      this.checkPatternExport(e, a);
    }
  else if (r === "ArrayPattern")
    for (var s = 0, o = t.elements; s < o.length; s += 1) {
      var l = o[s];
      l && this.checkPatternExport(e, l);
    }
  else
    r === "Property" ? this.checkPatternExport(e, t.value) : r === "AssignmentPattern" ? this.checkPatternExport(e, t.left) : r === "RestElement" ? this.checkPatternExport(e, t.argument) : r === "ParenthesizedExpression" && this.checkPatternExport(e, t.expression);
};
ve.checkVariableExport = function(e, t) {
  if (e)
    for (var r = 0, i = t; r < i.length; r += 1) {
      var n = i[r];
      this.checkPatternExport(e, n.id);
    }
};
ve.shouldParseExportStatement = function() {
  return this.type.keyword === "var" || this.type.keyword === "const" || this.type.keyword === "class" || this.type.keyword === "function" || this.isLet() || this.isAsyncFunction();
};
ve.parseExportSpecifiers = function(e) {
  var t = [], r = !0;
  for (this.expect(T.braceL); !this.eat(T.braceR); ) {
    if (r)
      r = !1;
    else if (this.expect(T.comma), this.afterTrailingComma(T.braceR))
      break;
    var i = this.startNode();
    i.local = this.parseIdent(!0), i.exported = this.eatContextual("as") ? this.parseIdent(!0) : i.local, this.checkExport(e, i.exported.name, i.exported.start), t.push(this.finishNode(i, "ExportSpecifier"));
  }
  return t;
};
ve.parseImport = function(e) {
  return this.next(), this.type === T.string ? (e.specifiers = ZN, e.source = this.parseExprAtom()) : (e.specifiers = this.parseImportSpecifiers(), this.expectContextual("from"), e.source = this.type === T.string ? this.parseExprAtom() : this.unexpected()), this.semicolon(), this.finishNode(e, "ImportDeclaration");
};
ve.parseImportSpecifiers = function() {
  var e = [], t = !0;
  if (this.type === T.name) {
    var r = this.startNode();
    if (r.local = this.parseIdent(), this.checkLVal(r.local, ei), e.push(this.finishNode(r, "ImportDefaultSpecifier")), !this.eat(T.comma))
      return e;
  }
  if (this.type === T.star) {
    var i = this.startNode();
    return this.next(), this.expectContextual("as"), i.local = this.parseIdent(), this.checkLVal(i.local, ei), e.push(this.finishNode(i, "ImportNamespaceSpecifier")), e;
  }
  for (this.expect(T.braceL); !this.eat(T.braceR); ) {
    if (t)
      t = !1;
    else if (this.expect(T.comma), this.afterTrailingComma(T.braceR))
      break;
    var n = this.startNode();
    n.imported = this.parseIdent(!0), this.eatContextual("as") ? n.local = this.parseIdent() : (this.checkUnreserved(n.imported), n.local = n.imported), this.checkLVal(n.local, ei), e.push(this.finishNode(n, "ImportSpecifier"));
  }
  return e;
};
ve.adaptDirectivePrologue = function(e) {
  for (var t = 0; t < e.length && this.isDirectiveCandidate(e[t]); ++t)
    e[t].directive = e[t].expression.raw.slice(1, -1);
};
ve.isDirectiveCandidate = function(e) {
  return e.type === "ExpressionStatement" && e.expression.type === "Literal" && typeof e.expression.value == "string" && // Reject parenthesized strings.
  (this.input[e.start] === '"' || this.input[e.start] === "'");
};
var si = _t.prototype;
si.toAssignable = function(e, t, r) {
  if (this.options.ecmaVersion >= 6 && e)
    switch (e.type) {
      case "Identifier":
        this.inAsync && e.name === "await" && this.raise(e.start, "Cannot use 'await' as identifier inside an async function");
        break;
      case "ObjectPattern":
      case "ArrayPattern":
      case "RestElement":
        break;
      case "ObjectExpression":
        e.type = "ObjectPattern", r && this.checkPatternErrors(r, !0);
        for (var i = 0, n = e.properties; i < n.length; i += 1) {
          var a = n[i];
          this.toAssignable(a, t), a.type === "RestElement" && (a.argument.type === "ArrayPattern" || a.argument.type === "ObjectPattern") && this.raise(a.argument.start, "Unexpected token");
        }
        break;
      case "Property":
        e.kind !== "init" && this.raise(e.key.start, "Object pattern can't contain getter or setter"), this.toAssignable(e.value, t);
        break;
      case "ArrayExpression":
        e.type = "ArrayPattern", r && this.checkPatternErrors(r, !0), this.toAssignableList(e.elements, t);
        break;
      case "SpreadElement":
        e.type = "RestElement", this.toAssignable(e.argument, t), e.argument.type === "AssignmentPattern" && this.raise(e.argument.start, "Rest elements cannot have a default value");
        break;
      case "AssignmentExpression":
        e.operator !== "=" && this.raise(e.left.end, "Only '=' operator can be used for specifying default value."), e.type = "AssignmentPattern", delete e.operator, this.toAssignable(e.left, t);
      case "AssignmentPattern":
        break;
      case "ParenthesizedExpression":
        this.toAssignable(e.expression, t, r);
        break;
      case "MemberExpression":
        if (!t)
          break;
      default:
        this.raise(e.start, "Assigning to rvalue");
    }
  else
    r && this.checkPatternErrors(r, !0);
  return e;
};
si.toAssignableList = function(e, t) {
  for (var r = e.length, i = 0; i < r; i++) {
    var n = e[i];
    n && this.toAssignable(n, t);
  }
  if (r) {
    var a = e[r - 1];
    this.options.ecmaVersion === 6 && t && a && a.type === "RestElement" && a.argument.type !== "Identifier" && this.unexpected(a.argument.start);
  }
  return e;
};
si.parseSpread = function(e) {
  var t = this.startNode();
  return this.next(), t.argument = this.parseMaybeAssign(!1, e), this.finishNode(t, "SpreadElement");
};
si.parseRestBinding = function() {
  var e = this.startNode();
  return this.next(), this.options.ecmaVersion === 6 && this.type !== T.name && this.unexpected(), e.argument = this.parseBindingAtom(), this.finishNode(e, "RestElement");
};
si.parseBindingAtom = function() {
  if (this.options.ecmaVersion >= 6)
    switch (this.type) {
      case T.bracketL:
        var e = this.startNode();
        return this.next(), e.elements = this.parseBindingList(T.bracketR, !0, !0), this.finishNode(e, "ArrayPattern");
      case T.braceL:
        return this.parseObj(!0);
    }
  return this.parseIdent();
};
si.parseBindingList = function(e, t, r) {
  for (var i = [], n = !0; !this.eat(e); )
    if (n ? n = !1 : this.expect(T.comma), t && this.type === T.comma)
      i.push(null);
    else {
      if (r && this.afterTrailingComma(e))
        break;
      if (this.type === T.ellipsis) {
        var a = this.parseRestBinding();
        this.parseBindingListItem(a), i.push(a), this.type === T.comma && this.raise(this.start, "Comma is not permitted after the rest element"), this.expect(e);
        break;
      } else {
        var s = this.parseMaybeDefault(this.start, this.startLoc);
        this.parseBindingListItem(s), i.push(s);
      }
    }
  return i;
};
si.parseBindingListItem = function(e) {
  return e;
};
si.parseMaybeDefault = function(e, t, r) {
  if (r = r || this.parseBindingAtom(), this.options.ecmaVersion < 6 || !this.eat(T.eq))
    return r;
  var i = this.startNodeAt(e, t);
  return i.left = r, i.right = this.parseMaybeAssign(), this.finishNode(i, "AssignmentPattern");
};
si.checkLVal = function(e, t, r) {
  switch (t === void 0 && (t = Eh), e.type) {
    case "Identifier":
      t === ei && e.name === "let" && this.raiseRecoverable(e.start, "let is disallowed as a lexically bound name"), this.strict && this.reservedWordsStrictBind.test(e.name) && this.raiseRecoverable(e.start, (t ? "Binding " : "Assigning to ") + e.name + " in strict mode"), r && (io(r, e.name) && this.raiseRecoverable(e.start, "Argument name clash"), r[e.name] = !0), t !== Eh && t !== ad && this.declareName(e.name, t, e.start);
      break;
    case "MemberExpression":
      t && this.raiseRecoverable(e.start, "Binding member expression");
      break;
    case "ObjectPattern":
      for (var i = 0, n = e.properties; i < n.length; i += 1) {
        var a = n[i];
        this.checkLVal(a, t, r);
      }
      break;
    case "Property":
      this.checkLVal(e.value, t, r);
      break;
    case "ArrayPattern":
      for (var s = 0, o = e.elements; s < o.length; s += 1) {
        var l = o[s];
        l && this.checkLVal(l, t, r);
      }
      break;
    case "AssignmentPattern":
      this.checkLVal(e.left, t, r);
      break;
    case "RestElement":
      this.checkLVal(e.argument, t, r);
      break;
    case "ParenthesizedExpression":
      this.checkLVal(e.expression, t, r);
      break;
    default:
      this.raise(e.start, (t ? "Binding" : "Assigning to") + " rvalue");
  }
};
var Qe = _t.prototype;
Qe.checkPropClash = function(e, t, r) {
  if (!(this.options.ecmaVersion >= 9 && e.type === "SpreadElement") && !(this.options.ecmaVersion >= 6 && (e.computed || e.method || e.shorthand))) {
    var i = e.key, n;
    switch (i.type) {
      case "Identifier":
        n = i.name;
        break;
      case "Literal":
        n = String(i.value);
        break;
      default:
        return;
    }
    var a = e.kind;
    if (this.options.ecmaVersion >= 6) {
      n === "__proto__" && a === "init" && (t.proto && (r && r.doubleProto < 0 ? r.doubleProto = i.start : this.raiseRecoverable(i.start, "Redefinition of __proto__ property")), t.proto = !0);
      return;
    }
    n = "$" + n;
    var s = t[n];
    if (s) {
      var o;
      a === "init" ? o = this.strict && s.init || s.get || s.set : o = s.init || s[a], o && this.raiseRecoverable(i.start, "Redefinition of property");
    } else
      s = t[n] = {
        init: !1,
        get: !1,
        set: !1
      };
    s[a] = !0;
  }
};
Qe.parseExpression = function(e, t) {
  var r = this.start, i = this.startLoc, n = this.parseMaybeAssign(e, t);
  if (this.type === T.comma) {
    var a = this.startNodeAt(r, i);
    for (a.expressions = [n]; this.eat(T.comma); )
      a.expressions.push(this.parseMaybeAssign(e, t));
    return this.finishNode(a, "SequenceExpression");
  }
  return n;
};
Qe.parseMaybeAssign = function(e, t, r) {
  if (this.isContextual("yield")) {
    if (this.inGenerator)
      return this.parseYield(e);
    this.exprAllowed = !1;
  }
  var i = !1, n = -1, a = -1, s = -1;
  t ? (n = t.parenthesizedAssign, a = t.trailingComma, s = t.shorthandAssign, t.parenthesizedAssign = t.trailingComma = t.shorthandAssign = -1) : (t = new fa(), i = !0);
  var o = this.start, l = this.startLoc;
  (this.type === T.parenL || this.type === T.name) && (this.potentialArrowAt = this.start);
  var c = this.parseMaybeConditional(e, t);
  if (r && (c = r.call(this, c, o, l)), this.type.isAssign) {
    var f = this.startNodeAt(o, l);
    return f.operator = this.value, f.left = this.type === T.eq ? this.toAssignable(c, !1, t) : c, i || fa.call(t), t.shorthandAssign = -1, this.checkLVal(c), this.next(), f.right = this.parseMaybeAssign(e), this.finishNode(f, "AssignmentExpression");
  } else
    i && this.checkExpressionErrors(t, !0);
  return n > -1 && (t.parenthesizedAssign = n), a > -1 && (t.trailingComma = a), s > -1 && (t.shorthandAssign = s), c;
};
Qe.parseMaybeConditional = function(e, t) {
  var r = this.start, i = this.startLoc, n = this.parseExprOps(e, t);
  if (this.checkExpressionErrors(t))
    return n;
  if (this.eat(T.question)) {
    var a = this.startNodeAt(r, i);
    return a.test = n, a.consequent = this.parseMaybeAssign(), this.expect(T.colon), a.alternate = this.parseMaybeAssign(e), this.finishNode(a, "ConditionalExpression");
  }
  return n;
};
Qe.parseExprOps = function(e, t) {
  var r = this.start, i = this.startLoc, n = this.parseMaybeUnary(t, !1);
  return this.checkExpressionErrors(t) || n.start === r && n.type === "ArrowFunctionExpression" ? n : this.parseExprOp(n, r, i, -1, e);
};
Qe.parseExprOp = function(e, t, r, i, n) {
  var a = this.type.binop;
  if (a != null && (!n || this.type !== T._in) && a > i) {
    var s = this.type === T.logicalOR || this.type === T.logicalAND, o = this.value;
    this.next();
    var l = this.start, c = this.startLoc, f = this.parseExprOp(this.parseMaybeUnary(null, !1), l, c, a, n), p = this.buildBinary(t, r, e, f, o, s);
    return this.parseExprOp(p, t, r, i, n);
  }
  return e;
};
Qe.buildBinary = function(e, t, r, i, n, a) {
  var s = this.startNodeAt(e, t);
  return s.left = r, s.operator = n, s.right = i, this.finishNode(s, a ? "LogicalExpression" : "BinaryExpression");
};
Qe.parseMaybeUnary = function(e, t) {
  var r = this.start, i = this.startLoc, n;
  if (this.isContextual("await") && (this.inAsync || !this.inFunction && this.options.allowAwaitOutsideFunction))
    n = this.parseAwait(), t = !0;
  else if (this.type.prefix) {
    var a = this.startNode(), s = this.type === T.incDec;
    a.operator = this.value, a.prefix = !0, this.next(), a.argument = this.parseMaybeUnary(null, !0), this.checkExpressionErrors(e, !0), s ? this.checkLVal(a.argument) : this.strict && a.operator === "delete" && a.argument.type === "Identifier" ? this.raiseRecoverable(a.start, "Deleting local variable in strict mode") : t = !0, n = this.finishNode(a, s ? "UpdateExpression" : "UnaryExpression");
  } else {
    if (n = this.parseExprSubscripts(e), this.checkExpressionErrors(e))
      return n;
    for (; this.type.postfix && !this.canInsertSemicolon(); ) {
      var o = this.startNodeAt(r, i);
      o.operator = this.value, o.prefix = !1, o.argument = n, this.checkLVal(n), this.next(), n = this.finishNode(o, "UpdateExpression");
    }
  }
  return !t && this.eat(T.starstar) ? this.buildBinary(r, i, n, this.parseMaybeUnary(null, !1), "**", !1) : n;
};
Qe.parseExprSubscripts = function(e) {
  var t = this.start, r = this.startLoc, i = this.parseExprAtom(e), n = i.type === "ArrowFunctionExpression" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== ")";
  if (this.checkExpressionErrors(e) || n)
    return i;
  var a = this.parseSubscripts(i, t, r);
  return e && a.type === "MemberExpression" && (e.parenthesizedAssign >= a.start && (e.parenthesizedAssign = -1), e.parenthesizedBind >= a.start && (e.parenthesizedBind = -1)), a;
};
Qe.parseSubscripts = function(e, t, r, i) {
  for (var n = this.options.ecmaVersion >= 8 && e.type === "Identifier" && e.name === "async" && this.lastTokEnd === e.end && !this.canInsertSemicolon() && this.input.slice(e.start, e.end) === "async"; ; ) {
    var a = this.parseSubscript(e, t, r, i, n);
    if (a === e || a.type === "ArrowFunctionExpression")
      return a;
    e = a;
  }
};
Qe.parseSubscript = function(e, t, r, i, n) {
  var a = this.eat(T.bracketL);
  if (a || this.eat(T.dot)) {
    var s = this.startNodeAt(t, r);
    s.object = e, s.property = a ? this.parseExpression() : this.parseIdent(this.options.allowReserved !== "never"), s.computed = !!a, a && this.expect(T.bracketR), e = this.finishNode(s, "MemberExpression");
  } else if (!i && this.eat(T.parenL)) {
    var o = new fa(), l = this.yieldPos, c = this.awaitPos, f = this.awaitIdentPos;
    this.yieldPos = 0, this.awaitPos = 0, this.awaitIdentPos = 0;
    var p = this.parseExprList(T.parenR, this.options.ecmaVersion >= 8 && e.type !== "Import", !1, o);
    if (n && !this.canInsertSemicolon() && this.eat(T.arrow))
      return this.checkPatternErrors(o, !1), this.checkYieldAwaitInDefaultParams(), this.awaitIdentPos > 0 && this.raise(this.awaitIdentPos, "Cannot use 'await' as identifier inside an async function"), this.yieldPos = l, this.awaitPos = c, this.awaitIdentPos = f, this.parseArrowExpression(this.startNodeAt(t, r), p, !0);
    this.checkExpressionErrors(o, !0), this.yieldPos = l || this.yieldPos, this.awaitPos = c || this.awaitPos, this.awaitIdentPos = f || this.awaitIdentPos;
    var O = this.startNodeAt(t, r);
    if (O.callee = e, O.arguments = p, O.callee.type === "Import") {
      O.arguments.length !== 1 && this.raise(O.start, "import() requires exactly one argument");
      var d = O.arguments[0];
      d && d.type === "SpreadElement" && this.raise(d.start, "... is not allowed in import()");
    }
    e = this.finishNode(O, "CallExpression");
  } else if (this.type === T.backQuote) {
    var g = this.startNodeAt(t, r);
    g.tag = e, g.quasi = this.parseTemplate({ isTagged: !0 }), e = this.finishNode(g, "TaggedTemplateExpression");
  }
  return e;
};
Qe.parseExprAtom = function(e) {
  this.type === T.slash && this.readRegexp();
  var t, r = this.potentialArrowAt === this.start;
  switch (this.type) {
    case T._super:
      return this.allowSuper || this.raise(this.start, "'super' keyword outside a method"), t = this.startNode(), this.next(), this.type === T.parenL && !this.allowDirectSuper && this.raise(t.start, "super() call outside constructor of a subclass"), this.type !== T.dot && this.type !== T.bracketL && this.type !== T.parenL && this.unexpected(), this.finishNode(t, "Super");
    case T._this:
      return t = this.startNode(), this.next(), this.finishNode(t, "ThisExpression");
    case T.name:
      var i = this.start, n = this.startLoc, a = this.containsEsc, s = this.parseIdent(!1);
      if (this.options.ecmaVersion >= 8 && !a && s.name === "async" && !this.canInsertSemicolon() && this.eat(T._function))
        return this.parseFunction(this.startNodeAt(i, n), 0, !1, !0);
      if (r && !this.canInsertSemicolon()) {
        if (this.eat(T.arrow))
          return this.parseArrowExpression(this.startNodeAt(i, n), [s], !1);
        if (this.options.ecmaVersion >= 8 && s.name === "async" && this.type === T.name && !a)
          return s = this.parseIdent(!1), (this.canInsertSemicolon() || !this.eat(T.arrow)) && this.unexpected(), this.parseArrowExpression(this.startNodeAt(i, n), [s], !0);
      }
      return s;
    case T.regexp:
      var o = this.value;
      return t = this.parseLiteral(o.value), t.regex = { pattern: o.pattern, flags: o.flags }, t;
    case T.num:
    case T.string:
      return this.parseLiteral(this.value);
    case T._null:
    case T._true:
    case T._false:
      return t = this.startNode(), t.value = this.type === T._null ? null : this.type === T._true, t.raw = this.type.keyword, this.next(), this.finishNode(t, "Literal");
    case T.parenL:
      var l = this.start, c = this.parseParenAndDistinguishExpression(r);
      return e && (e.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(c) && (e.parenthesizedAssign = l), e.parenthesizedBind < 0 && (e.parenthesizedBind = l)), c;
    case T.bracketL:
      return t = this.startNode(), this.next(), t.elements = this.parseExprList(T.bracketR, !0, !0, e), this.finishNode(t, "ArrayExpression");
    case T.braceL:
      return this.parseObj(!1, e);
    case T._function:
      return t = this.startNode(), this.next(), this.parseFunction(t, 0);
    case T._class:
      return this.parseClass(this.startNode(), !1);
    case T._new:
      return this.parseNew();
    case T.backQuote:
      return this.parseTemplate();
    case T._import:
      return this.options.ecmaVersion > 10 ? this.parseDynamicImport() : this.unexpected();
    default:
      this.unexpected();
  }
};
Qe.parseDynamicImport = function() {
  var e = this.startNode();
  return this.next(), this.type !== T.parenL && this.unexpected(), this.finishNode(e, "Import");
};
Qe.parseLiteral = function(e) {
  var t = this.startNode();
  return t.value = e, t.raw = this.input.slice(this.start, this.end), t.raw.charCodeAt(t.raw.length - 1) === 110 && (t.bigint = t.raw.slice(0, -1)), this.next(), this.finishNode(t, "Literal");
};
Qe.parseParenExpression = function() {
  this.expect(T.parenL);
  var e = this.parseExpression();
  return this.expect(T.parenR), e;
};
Qe.parseParenAndDistinguishExpression = function(e) {
  var t = this.start, r = this.startLoc, i, n = this.options.ecmaVersion >= 8;
  if (this.options.ecmaVersion >= 6) {
    this.next();
    var a = this.start, s = this.startLoc, o = [], l = !0, c = !1, f = new fa(), p = this.yieldPos, O = this.awaitPos, d;
    for (this.yieldPos = 0, this.awaitPos = 0; this.type !== T.parenR; )
      if (l ? l = !1 : this.expect(T.comma), n && this.afterTrailingComma(T.parenR, !0)) {
        c = !0;
        break;
      } else if (this.type === T.ellipsis) {
        d = this.start, o.push(this.parseParenItem(this.parseRestBinding())), this.type === T.comma && this.raise(this.start, "Comma is not permitted after the rest element");
        break;
      } else
        o.push(this.parseMaybeAssign(!1, f, this.parseParenItem));
    var g = this.start, L = this.startLoc;
    if (this.expect(T.parenR), e && !this.canInsertSemicolon() && this.eat(T.arrow))
      return this.checkPatternErrors(f, !1), this.checkYieldAwaitInDefaultParams(), this.yieldPos = p, this.awaitPos = O, this.parseParenArrowList(t, r, o);
    (!o.length || c) && this.unexpected(this.lastTokStart), d && this.unexpected(d), this.checkExpressionErrors(f, !0), this.yieldPos = p || this.yieldPos, this.awaitPos = O || this.awaitPos, o.length > 1 ? (i = this.startNodeAt(a, s), i.expressions = o, this.finishNodeAt(i, "SequenceExpression", g, L)) : i = o[0];
  } else
    i = this.parseParenExpression();
  if (this.options.preserveParens) {
    var D = this.startNodeAt(t, r);
    return D.expression = i, this.finishNode(D, "ParenthesizedExpression");
  } else
    return i;
};
Qe.parseParenItem = function(e) {
  return e;
};
Qe.parseParenArrowList = function(e, t, r) {
  return this.parseArrowExpression(this.startNodeAt(e, t), r);
};
var HN = [];
Qe.parseNew = function() {
  var e = this.startNode(), t = this.parseIdent(!0);
  if (this.options.ecmaVersion >= 6 && this.eat(T.dot)) {
    e.meta = t;
    var r = this.containsEsc;
    return e.property = this.parseIdent(!0), (e.property.name !== "target" || r) && this.raiseRecoverable(e.property.start, "The only valid meta property for new is new.target"), this.inNonArrowFunction() || this.raiseRecoverable(e.start, "new.target can only be used in functions"), this.finishNode(e, "MetaProperty");
  }
  var i = this.start, n = this.startLoc;
  return e.callee = this.parseSubscripts(this.parseExprAtom(), i, n, !0), this.options.ecmaVersion > 10 && e.callee.type === "Import" && this.raise(e.callee.start, "Cannot use new with import(...)"), this.eat(T.parenL) ? e.arguments = this.parseExprList(T.parenR, this.options.ecmaVersion >= 8 && e.callee.type !== "Import", !1) : e.arguments = HN, this.finishNode(e, "NewExpression");
};
Qe.parseTemplateElement = function(e) {
  var t = e.isTagged, r = this.startNode();
  return this.type === T.invalidTemplate ? (t || this.raiseRecoverable(this.start, "Bad escape sequence in untagged template literal"), r.value = {
    raw: this.value,
    cooked: null
  }) : r.value = {
    raw: this.input.slice(this.start, this.end).replace(/\r\n?/g, `
`),
    cooked: this.value
  }, this.next(), r.tail = this.type === T.backQuote, this.finishNode(r, "TemplateElement");
};
Qe.parseTemplate = function(e) {
  e === void 0 && (e = {});
  var t = e.isTagged;
  t === void 0 && (t = !1);
  var r = this.startNode();
  this.next(), r.expressions = [];
  var i = this.parseTemplateElement({ isTagged: t });
  for (r.quasis = [i]; !i.tail; )
    this.type === T.eof && this.raise(this.pos, "Unterminated template literal"), this.expect(T.dollarBraceL), r.expressions.push(this.parseExpression()), this.expect(T.braceR), r.quasis.push(i = this.parseTemplateElement({ isTagged: t }));
  return this.next(), this.finishNode(r, "TemplateLiteral");
};
Qe.isAsyncProp = function(e) {
  return !e.computed && e.key.type === "Identifier" && e.key.name === "async" && (this.type === T.name || this.type === T.num || this.type === T.string || this.type === T.bracketL || this.type.keyword || this.options.ecmaVersion >= 9 && this.type === T.star) && !gr.test(this.input.slice(this.lastTokEnd, this.start));
};
Qe.parseObj = function(e, t) {
  var r = this.startNode(), i = !0, n = {};
  for (r.properties = [], this.next(); !this.eat(T.braceR); ) {
    if (i)
      i = !1;
    else if (this.expect(T.comma), this.afterTrailingComma(T.braceR))
      break;
    var a = this.parseProperty(e, t);
    e || this.checkPropClash(a, n, t), r.properties.push(a);
  }
  return this.finishNode(r, e ? "ObjectPattern" : "ObjectExpression");
};
Qe.parseProperty = function(e, t) {
  var r = this.startNode(), i, n, a, s;
  if (this.options.ecmaVersion >= 9 && this.eat(T.ellipsis))
    return e ? (r.argument = this.parseIdent(!1), this.type === T.comma && this.raise(this.start, "Comma is not permitted after the rest element"), this.finishNode(r, "RestElement")) : (this.type === T.parenL && t && (t.parenthesizedAssign < 0 && (t.parenthesizedAssign = this.start), t.parenthesizedBind < 0 && (t.parenthesizedBind = this.start)), r.argument = this.parseMaybeAssign(!1, t), this.type === T.comma && t && t.trailingComma < 0 && (t.trailingComma = this.start), this.finishNode(r, "SpreadElement"));
  this.options.ecmaVersion >= 6 && (r.method = !1, r.shorthand = !1, (e || t) && (a = this.start, s = this.startLoc), e || (i = this.eat(T.star)));
  var o = this.containsEsc;
  return this.parsePropertyName(r), !e && !o && this.options.ecmaVersion >= 8 && !i && this.isAsyncProp(r) ? (n = !0, i = this.options.ecmaVersion >= 9 && this.eat(T.star), this.parsePropertyName(r, t)) : n = !1, this.parsePropertyValue(r, e, i, n, a, s, t, o), this.finishNode(r, "Property");
};
Qe.parsePropertyValue = function(e, t, r, i, n, a, s, o) {
  if ((r || i) && this.type === T.colon && this.unexpected(), this.eat(T.colon))
    e.value = t ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(!1, s), e.kind = "init";
  else if (this.options.ecmaVersion >= 6 && this.type === T.parenL)
    t && this.unexpected(), e.kind = "init", e.method = !0, e.value = this.parseMethod(r, i);
  else if (!t && !o && this.options.ecmaVersion >= 5 && !e.computed && e.key.type === "Identifier" && (e.key.name === "get" || e.key.name === "set") && this.type !== T.comma && this.type !== T.braceR) {
    (r || i) && this.unexpected(), e.kind = e.key.name, this.parsePropertyName(e), e.value = this.parseMethod(!1);
    var l = e.kind === "get" ? 0 : 1;
    if (e.value.params.length !== l) {
      var c = e.value.start;
      e.kind === "get" ? this.raiseRecoverable(c, "getter should have no params") : this.raiseRecoverable(c, "setter should have exactly one param");
    } else
      e.kind === "set" && e.value.params[0].type === "RestElement" && this.raiseRecoverable(e.value.params[0].start, "Setter cannot use rest params");
  } else
    this.options.ecmaVersion >= 6 && !e.computed && e.key.type === "Identifier" ? ((r || i) && this.unexpected(), this.checkUnreserved(e.key), e.key.name === "await" && !this.awaitIdentPos && (this.awaitIdentPos = n), e.kind = "init", t ? e.value = this.parseMaybeDefault(n, a, e.key) : this.type === T.eq && s ? (s.shorthandAssign < 0 && (s.shorthandAssign = this.start), e.value = this.parseMaybeDefault(n, a, e.key)) : e.value = e.key, e.shorthand = !0) : this.unexpected();
};
Qe.parsePropertyName = function(e) {
  if (this.options.ecmaVersion >= 6) {
    if (this.eat(T.bracketL))
      return e.computed = !0, e.key = this.parseMaybeAssign(), this.expect(T.bracketR), e.key;
    e.computed = !1;
  }
  return e.key = this.type === T.num || this.type === T.string ? this.parseExprAtom() : this.parseIdent(this.options.allowReserved !== "never");
};
Qe.initFunction = function(e) {
  e.id = null, this.options.ecmaVersion >= 6 && (e.generator = e.expression = !1), this.options.ecmaVersion >= 8 && (e.async = !1);
};
Qe.parseMethod = function(e, t, r) {
  var i = this.startNode(), n = this.yieldPos, a = this.awaitPos, s = this.awaitIdentPos;
  return this.initFunction(i), this.options.ecmaVersion >= 6 && (i.generator = e), this.options.ecmaVersion >= 8 && (i.async = !!t), this.yieldPos = 0, this.awaitPos = 0, this.awaitIdentPos = 0, this.enterScope(dc(t, i.generator) | td | (r ? rd : 0)), this.expect(T.parenL), i.params = this.parseBindingList(T.parenR, !1, this.options.ecmaVersion >= 8), this.checkYieldAwaitInDefaultParams(), this.parseFunctionBody(i, !1, !0), this.yieldPos = n, this.awaitPos = a, this.awaitIdentPos = s, this.finishNode(i, "FunctionExpression");
};
Qe.parseArrowExpression = function(e, t, r) {
  var i = this.yieldPos, n = this.awaitPos, a = this.awaitIdentPos;
  return this.enterScope(dc(r, !1) | KE), this.initFunction(e), this.options.ecmaVersion >= 8 && (e.async = !!r), this.yieldPos = 0, this.awaitPos = 0, this.awaitIdentPos = 0, e.params = this.toAssignableList(t, !0), this.parseFunctionBody(e, !0, !1), this.yieldPos = i, this.awaitPos = n, this.awaitIdentPos = a, this.finishNode(e, "ArrowFunctionExpression");
};
Qe.parseFunctionBody = function(e, t, r) {
  var i = t && this.type !== T.braceL, n = this.strict, a = !1;
  if (i)
    e.body = this.parseMaybeAssign(), e.expression = !0, this.checkParams(e, !1);
  else {
    var s = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(e.params);
    (!n || s) && (a = this.strictDirective(this.end), a && s && this.raiseRecoverable(e.start, "Illegal 'use strict' directive in function with non-simple parameter list"));
    var o = this.labels;
    this.labels = [], a && (this.strict = !0), this.checkParams(e, !n && !a && !t && !r && this.isSimpleParamList(e.params)), e.body = this.parseBlock(!1), e.expression = !1, this.adaptDirectivePrologue(e.body.body), this.labels = o;
  }
  this.exitScope(), this.strict && e.id && this.checkLVal(e.id, ad), this.strict = n;
};
Qe.isSimpleParamList = function(e) {
  for (var t = 0, r = e; t < r.length; t += 1) {
    var i = r[t];
    if (i.type !== "Identifier")
      return !1;
  }
  return !0;
};
Qe.checkParams = function(e, t) {
  for (var r = {}, i = 0, n = e.params; i < n.length; i += 1) {
    var a = n[i];
    this.checkLVal(a, Tc, t ? null : r);
  }
};
Qe.parseExprList = function(e, t, r, i) {
  for (var n = [], a = !0; !this.eat(e); ) {
    if (a)
      a = !1;
    else if (this.expect(T.comma), t && this.afterTrailingComma(e))
      break;
    var s = void 0;
    r && this.type === T.comma ? s = null : this.type === T.ellipsis ? (s = this.parseSpread(i), i && this.type === T.comma && i.trailingComma < 0 && (i.trailingComma = this.start)) : s = this.parseMaybeAssign(!1, i), n.push(s);
  }
  return n;
};
Qe.checkUnreserved = function(e) {
  var t = e.start, r = e.end, i = e.name;
  if (this.inGenerator && i === "yield" && this.raiseRecoverable(t, "Cannot use 'yield' as identifier inside a generator"), this.inAsync && i === "await" && this.raiseRecoverable(t, "Cannot use 'await' as identifier inside an async function"), this.keywords.test(i) && this.raise(t, "Unexpected keyword '" + i + "'"), !(this.options.ecmaVersion < 6 && this.input.slice(t, r).indexOf("\\") !== -1)) {
    var n = this.strict ? this.reservedWordsStrict : this.reservedWords;
    n.test(i) && (!this.inAsync && i === "await" && this.raiseRecoverable(t, "Cannot use keyword 'await' outside an async function"), this.raiseRecoverable(t, "The keyword '" + i + "' is reserved"));
  }
};
Qe.parseIdent = function(e, t) {
  var r = this.startNode();
  return this.type === T.name ? r.name = this.value : this.type.keyword ? (r.name = this.type.keyword, (r.name === "class" || r.name === "function") && (this.lastTokEnd !== this.lastTokStart + 1 || this.input.charCodeAt(this.lastTokStart) !== 46) && this.context.pop()) : this.unexpected(), this.next(), this.finishNode(r, "Identifier"), e || (this.checkUnreserved(r), r.name === "await" && !this.awaitIdentPos && (this.awaitIdentPos = r.start)), r;
};
Qe.parseYield = function(e) {
  this.yieldPos || (this.yieldPos = this.start);
  var t = this.startNode();
  return this.next(), this.type === T.semi || this.canInsertSemicolon() || this.type !== T.star && !this.type.startsExpr ? (t.delegate = !1, t.argument = null) : (t.delegate = this.eat(T.star), t.argument = this.parseMaybeAssign(e)), this.finishNode(t, "YieldExpression");
};
Qe.parseAwait = function() {
  this.awaitPos || (this.awaitPos = this.start);
  var e = this.startNode();
  return this.next(), e.argument = this.parseMaybeUnary(null, !0), this.finishNode(e, "AwaitExpression");
};
var Us = _t.prototype;
Us.raise = function(e, t) {
  var r = ua(this.input, e);
  t += " (" + r.line + ":" + r.column + ")";
  var i = new SyntaxError(t);
  throw i.pos = e, i.loc = r, i.raisedAt = this.pos, i;
};
Us.raiseRecoverable = Us.raise;
Us.curPosition = function() {
  if (this.options.locations)
    return new la(this.curLine, this.pos - this.lineStart);
};
var Pi = _t.prototype, zN = function(t) {
  this.flags = t, this.var = [], this.lexical = [], this.functions = [];
};
Pi.enterScope = function(e) {
  this.scopeStack.push(new zN(e));
};
Pi.exitScope = function() {
  this.scopeStack.pop();
};
Pi.treatFunctionsAsVarInScope = function(e) {
  return e.flags & Ia || !this.inModule && e.flags & ca;
};
Pi.declareName = function(e, t, r) {
  var i = !1;
  if (t === ei) {
    var n = this.currentScope();
    i = n.lexical.indexOf(e) > -1 || n.functions.indexOf(e) > -1 || n.var.indexOf(e) > -1, n.lexical.push(e), this.inModule && n.flags & ca && delete this.undefinedExports[e];
  } else if (t === nd) {
    var a = this.currentScope();
    a.lexical.push(e);
  } else if (t === id) {
    var s = this.currentScope();
    this.treatFunctionsAsVar ? i = s.lexical.indexOf(e) > -1 : i = s.lexical.indexOf(e) > -1 || s.var.indexOf(e) > -1, s.functions.push(e);
  } else
    for (var o = this.scopeStack.length - 1; o >= 0; --o) {
      var l = this.scopeStack[o];
      if (l.lexical.indexOf(e) > -1 && !(l.flags & ed && l.lexical[0] === e) || !this.treatFunctionsAsVarInScope(l) && l.functions.indexOf(e) > -1) {
        i = !0;
        break;
      }
      if (l.var.push(e), this.inModule && l.flags & ca && delete this.undefinedExports[e], l.flags & Ec)
        break;
    }
  i && this.raiseRecoverable(r, "Identifier '" + e + "' has already been declared");
};
Pi.checkLocalExport = function(e) {
  this.scopeStack[0].lexical.indexOf(e.name) === -1 && this.scopeStack[0].var.indexOf(e.name) === -1 && (this.undefinedExports[e.name] = e);
};
Pi.currentScope = function() {
  return this.scopeStack[this.scopeStack.length - 1];
};
Pi.currentVarScope = function() {
  for (var e = this.scopeStack.length - 1; ; e--) {
    var t = this.scopeStack[e];
    if (t.flags & Ec)
      return t;
  }
};
Pi.currentThisScope = function() {
  for (var e = this.scopeStack.length - 1; ; e--) {
    var t = this.scopeStack[e];
    if (t.flags & Ec && !(t.flags & KE))
      return t;
  }
};
var Sn = function(t, r, i) {
  this.type = "", this.start = r, this.end = 0, t.options.locations && (this.loc = new bn(t, i)), t.options.directSourceFile && (this.sourceFile = t.options.directSourceFile), t.options.ranges && (this.range = [r, 0]);
}, no = _t.prototype;
no.startNode = function() {
  return new Sn(this, this.start, this.startLoc);
};
no.startNodeAt = function(e, t) {
  return new Sn(this, e, t);
};
function od(e, t, r, i) {
  return e.type = t, e.end = r, this.options.locations && (e.loc.end = i), this.options.ranges && (e.range[1] = r), e;
}
no.finishNode = function(e, t) {
  return od.call(this, e, t, this.lastTokEnd, this.lastTokEndLoc);
};
no.finishNodeAt = function(e, t, r, i) {
  return od.call(this, e, t, r, i);
};
var Pr = function(t, r, i, n, a) {
  this.token = t, this.isExpr = !!r, this.preserveSpace = !!i, this.override = n, this.generator = !!a;
}, gt = {
  b_stat: new Pr("{", !1),
  b_expr: new Pr("{", !0),
  b_tmpl: new Pr("${", !1),
  p_stat: new Pr("(", !1),
  p_expr: new Pr("(", !0),
  q_tmpl: new Pr("`", !0, !0, function(e) {
    return e.tryReadTemplateToken();
  }),
  f_stat: new Pr("function", !1),
  f_expr: new Pr("function", !0),
  f_expr_gen: new Pr("function", !0, !1, null, !0),
  f_gen: new Pr("function", !1, !1, null, !0)
}, ao = _t.prototype;
ao.initialContext = function() {
  return [gt.b_stat];
};
ao.braceIsBlock = function(e) {
  var t = this.curContext();
  return t === gt.f_expr || t === gt.f_stat ? !0 : e === T.colon && (t === gt.b_stat || t === gt.b_expr) ? !t.isExpr : e === T._return || e === T.name && this.exprAllowed ? gr.test(this.input.slice(this.lastTokEnd, this.start)) : e === T._else || e === T.semi || e === T.eof || e === T.parenR || e === T.arrow ? !0 : e === T.braceL ? t === gt.b_stat : e === T._var || e === T._const || e === T.name ? !1 : !this.exprAllowed;
};
ao.inGeneratorContext = function() {
  for (var e = this.context.length - 1; e >= 1; e--) {
    var t = this.context[e];
    if (t.token === "function")
      return t.generator;
  }
  return !1;
};
ao.updateContext = function(e) {
  var t, r = this.type;
  r.keyword && e === T.dot ? this.exprAllowed = !1 : (t = r.updateContext) ? t.call(this, e) : this.exprAllowed = r.beforeExpr;
};
T.parenR.updateContext = T.braceR.updateContext = function() {
  if (this.context.length === 1) {
    this.exprAllowed = !0;
    return;
  }
  var e = this.context.pop();
  e === gt.b_stat && this.curContext().token === "function" && (e = this.context.pop()), this.exprAllowed = !e.isExpr;
};
T.braceL.updateContext = function(e) {
  this.context.push(this.braceIsBlock(e) ? gt.b_stat : gt.b_expr), this.exprAllowed = !0;
};
T.dollarBraceL.updateContext = function() {
  this.context.push(gt.b_tmpl), this.exprAllowed = !0;
};
T.parenL.updateContext = function(e) {
  var t = e === T._if || e === T._for || e === T._with || e === T._while;
  this.context.push(t ? gt.p_stat : gt.p_expr), this.exprAllowed = !0;
};
T.incDec.updateContext = function() {
};
T._function.updateContext = T._class.updateContext = function(e) {
  e.beforeExpr && e !== T.semi && e !== T._else && !(e === T._return && gr.test(this.input.slice(this.lastTokEnd, this.start))) && !((e === T.colon || e === T.braceL) && this.curContext() === gt.b_stat) ? this.context.push(gt.f_expr) : this.context.push(gt.f_stat), this.exprAllowed = !1;
};
T.backQuote.updateContext = function() {
  this.curContext() === gt.q_tmpl ? this.context.pop() : this.context.push(gt.q_tmpl), this.exprAllowed = !1;
};
T.star.updateContext = function(e) {
  if (e === T._function) {
    var t = this.context.length - 1;
    this.context[t] === gt.f_expr ? this.context[t] = gt.f_expr_gen : this.context[t] = gt.f_gen;
  }
  this.exprAllowed = !0;
};
T.name.updateContext = function(e) {
  var t = !1;
  this.options.ecmaVersion >= 6 && e !== T.dot && (this.value === "of" && !this.exprAllowed || this.value === "yield" && this.inGeneratorContext()) && (t = !0), this.exprAllowed = t;
};
var ld = "ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS", ud = ld + " Extended_Pictographic", qN = ud, JN = {
  9: ld,
  10: ud,
  11: qN
}, dh = "Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu", cd = "Adlam Adlm Ahom Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb", fd = cd + " Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd", KN = fd + " Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho", eP = {
  9: cd,
  10: fd,
  11: KN
}, hd = {};
function mc(e) {
  var t = hd[e] = {
    binary: ki(JN[e] + " " + dh),
    nonBinary: {
      General_Category: ki(dh),
      Script: ki(eP[e])
    }
  };
  t.nonBinary.Script_Extensions = t.nonBinary.Script, t.nonBinary.gc = t.nonBinary.General_Category, t.nonBinary.sc = t.nonBinary.Script, t.nonBinary.scx = t.nonBinary.Script_Extensions;
}
mc(9);
mc(10);
mc(11);
var Te = _t.prototype, oi = function(t) {
  this.parser = t, this.validFlags = "gim" + (t.options.ecmaVersion >= 6 ? "uy" : "") + (t.options.ecmaVersion >= 9 ? "s" : ""), this.unicodeProperties = hd[t.options.ecmaVersion >= 11 ? 11 : t.options.ecmaVersion], this.source = "", this.flags = "", this.start = 0, this.switchU = !1, this.switchN = !1, this.pos = 0, this.lastIntValue = 0, this.lastStringValue = "", this.lastAssertionIsQuantifiable = !1, this.numCapturingParens = 0, this.maxBackReference = 0, this.groupNames = [], this.backReferenceNames = [];
};
oi.prototype.reset = function(t, r, i) {
  var n = i.indexOf("u") !== -1;
  this.start = t | 0, this.source = r + "", this.flags = i, this.switchU = n && this.parser.options.ecmaVersion >= 6, this.switchN = n && this.parser.options.ecmaVersion >= 9;
};
oi.prototype.raise = function(t) {
  this.parser.raiseRecoverable(this.start, "Invalid regular expression: /" + this.source + "/: " + t);
};
oi.prototype.at = function(t) {
  var r = this.source, i = r.length;
  if (t >= i)
    return -1;
  var n = r.charCodeAt(t);
  if (!this.switchU || n <= 55295 || n >= 57344 || t + 1 >= i)
    return n;
  var a = r.charCodeAt(t + 1);
  return a >= 56320 && a <= 57343 ? (n << 10) + a - 56613888 : n;
};
oi.prototype.nextIndex = function(t) {
  var r = this.source, i = r.length;
  if (t >= i)
    return i;
  var n = r.charCodeAt(t), a;
  return !this.switchU || n <= 55295 || n >= 57344 || t + 1 >= i || (a = r.charCodeAt(t + 1)) < 56320 || a > 57343 ? t + 1 : t + 2;
};
oi.prototype.current = function() {
  return this.at(this.pos);
};
oi.prototype.lookahead = function() {
  return this.at(this.nextIndex(this.pos));
};
oi.prototype.advance = function() {
  this.pos = this.nextIndex(this.pos);
};
oi.prototype.eat = function(t) {
  return this.current() === t ? (this.advance(), !0) : !1;
};
function ws(e) {
  return e <= 65535 ? String.fromCharCode(e) : (e -= 65536, String.fromCharCode((e >> 10) + 55296, (e & 1023) + 56320));
}
Te.validateRegExpFlags = function(e) {
  for (var t = e.validFlags, r = e.flags, i = 0; i < r.length; i++) {
    var n = r.charAt(i);
    t.indexOf(n) === -1 && this.raise(e.start, "Invalid regular expression flag"), r.indexOf(n, i + 1) > -1 && this.raise(e.start, "Duplicate regular expression flag");
  }
};
Te.validateRegExpPattern = function(e) {
  this.regexp_pattern(e), !e.switchN && this.options.ecmaVersion >= 9 && e.groupNames.length > 0 && (e.switchN = !0, this.regexp_pattern(e));
};
Te.regexp_pattern = function(e) {
  e.pos = 0, e.lastIntValue = 0, e.lastStringValue = "", e.lastAssertionIsQuantifiable = !1, e.numCapturingParens = 0, e.maxBackReference = 0, e.groupNames.length = 0, e.backReferenceNames.length = 0, this.regexp_disjunction(e), e.pos !== e.source.length && (e.eat(
    41
    /* ) */
  ) && e.raise("Unmatched ')'"), (e.eat(
    93
    /* [ */
  ) || e.eat(
    125
    /* } */
  )) && e.raise("Lone quantifier brackets")), e.maxBackReference > e.numCapturingParens && e.raise("Invalid escape");
  for (var t = 0, r = e.backReferenceNames; t < r.length; t += 1) {
    var i = r[t];
    e.groupNames.indexOf(i) === -1 && e.raise("Invalid named capture referenced");
  }
};
Te.regexp_disjunction = function(e) {
  for (this.regexp_alternative(e); e.eat(
    124
    /* | */
  ); )
    this.regexp_alternative(e);
  this.regexp_eatQuantifier(e, !0) && e.raise("Nothing to repeat"), e.eat(
    123
    /* { */
  ) && e.raise("Lone quantifier brackets");
};
Te.regexp_alternative = function(e) {
  for (; e.pos < e.source.length && this.regexp_eatTerm(e); )
    ;
};
Te.regexp_eatTerm = function(e) {
  return this.regexp_eatAssertion(e) ? (e.lastAssertionIsQuantifiable && this.regexp_eatQuantifier(e) && e.switchU && e.raise("Invalid quantifier"), !0) : (e.switchU ? this.regexp_eatAtom(e) : this.regexp_eatExtendedAtom(e)) ? (this.regexp_eatQuantifier(e), !0) : !1;
};
Te.regexp_eatAssertion = function(e) {
  var t = e.pos;
  if (e.lastAssertionIsQuantifiable = !1, e.eat(
    94
    /* ^ */
  ) || e.eat(
    36
    /* $ */
  ))
    return !0;
  if (e.eat(
    92
    /* \ */
  )) {
    if (e.eat(
      66
      /* B */
    ) || e.eat(
      98
      /* b */
    ))
      return !0;
    e.pos = t;
  }
  if (e.eat(
    40
    /* ( */
  ) && e.eat(
    63
    /* ? */
  )) {
    var r = !1;
    if (this.options.ecmaVersion >= 9 && (r = e.eat(
      60
      /* < */
    )), e.eat(
      61
      /* = */
    ) || e.eat(
      33
      /* ! */
    ))
      return this.regexp_disjunction(e), e.eat(
        41
        /* ) */
      ) || e.raise("Unterminated group"), e.lastAssertionIsQuantifiable = !r, !0;
  }
  return e.pos = t, !1;
};
Te.regexp_eatQuantifier = function(e, t) {
  return t === void 0 && (t = !1), this.regexp_eatQuantifierPrefix(e, t) ? (e.eat(
    63
    /* ? */
  ), !0) : !1;
};
Te.regexp_eatQuantifierPrefix = function(e, t) {
  return e.eat(
    42
    /* * */
  ) || e.eat(
    43
    /* + */
  ) || e.eat(
    63
    /* ? */
  ) || this.regexp_eatBracedQuantifier(e, t);
};
Te.regexp_eatBracedQuantifier = function(e, t) {
  var r = e.pos;
  if (e.eat(
    123
    /* { */
  )) {
    var i = 0, n = -1;
    if (this.regexp_eatDecimalDigits(e) && (i = e.lastIntValue, e.eat(
      44
      /* , */
    ) && this.regexp_eatDecimalDigits(e) && (n = e.lastIntValue), e.eat(
      125
      /* } */
    )))
      return n !== -1 && n < i && !t && e.raise("numbers out of order in {} quantifier"), !0;
    e.switchU && !t && e.raise("Incomplete quantifier"), e.pos = r;
  }
  return !1;
};
Te.regexp_eatAtom = function(e) {
  return this.regexp_eatPatternCharacters(e) || e.eat(
    46
    /* . */
  ) || this.regexp_eatReverseSolidusAtomEscape(e) || this.regexp_eatCharacterClass(e) || this.regexp_eatUncapturingGroup(e) || this.regexp_eatCapturingGroup(e);
};
Te.regexp_eatReverseSolidusAtomEscape = function(e) {
  var t = e.pos;
  if (e.eat(
    92
    /* \ */
  )) {
    if (this.regexp_eatAtomEscape(e))
      return !0;
    e.pos = t;
  }
  return !1;
};
Te.regexp_eatUncapturingGroup = function(e) {
  var t = e.pos;
  if (e.eat(
    40
    /* ( */
  )) {
    if (e.eat(
      63
      /* ? */
    ) && e.eat(
      58
      /* : */
    )) {
      if (this.regexp_disjunction(e), e.eat(
        41
        /* ) */
      ))
        return !0;
      e.raise("Unterminated group");
    }
    e.pos = t;
  }
  return !1;
};
Te.regexp_eatCapturingGroup = function(e) {
  if (e.eat(
    40
    /* ( */
  )) {
    if (this.options.ecmaVersion >= 9 ? this.regexp_groupSpecifier(e) : e.current() === 63 && e.raise("Invalid group"), this.regexp_disjunction(e), e.eat(
      41
      /* ) */
    ))
      return e.numCapturingParens += 1, !0;
    e.raise("Unterminated group");
  }
  return !1;
};
Te.regexp_eatExtendedAtom = function(e) {
  return e.eat(
    46
    /* . */
  ) || this.regexp_eatReverseSolidusAtomEscape(e) || this.regexp_eatCharacterClass(e) || this.regexp_eatUncapturingGroup(e) || this.regexp_eatCapturingGroup(e) || this.regexp_eatInvalidBracedQuantifier(e) || this.regexp_eatExtendedPatternCharacter(e);
};
Te.regexp_eatInvalidBracedQuantifier = function(e) {
  return this.regexp_eatBracedQuantifier(e, !0) && e.raise("Nothing to repeat"), !1;
};
Te.regexp_eatSyntaxCharacter = function(e) {
  var t = e.current();
  return pd(t) ? (e.lastIntValue = t, e.advance(), !0) : !1;
};
function pd(e) {
  return e === 36 || e >= 40 && e <= 43 || e === 46 || e === 63 || e >= 91 && e <= 94 || e >= 123 && e <= 125;
}
Te.regexp_eatPatternCharacters = function(e) {
  for (var t = e.pos, r = 0; (r = e.current()) !== -1 && !pd(r); )
    e.advance();
  return e.pos !== t;
};
Te.regexp_eatExtendedPatternCharacter = function(e) {
  var t = e.current();
  return t !== -1 && t !== 36 && !(t >= 40 && t <= 43) && t !== 46 && t !== 63 && t !== 91 && t !== 94 && t !== 124 ? (e.advance(), !0) : !1;
};
Te.regexp_groupSpecifier = function(e) {
  if (e.eat(
    63
    /* ? */
  )) {
    if (this.regexp_eatGroupName(e)) {
      e.groupNames.indexOf(e.lastStringValue) !== -1 && e.raise("Duplicate capture group name"), e.groupNames.push(e.lastStringValue);
      return;
    }
    e.raise("Invalid group");
  }
};
Te.regexp_eatGroupName = function(e) {
  if (e.lastStringValue = "", e.eat(
    60
    /* < */
  )) {
    if (this.regexp_eatRegExpIdentifierName(e) && e.eat(
      62
      /* > */
    ))
      return !0;
    e.raise("Invalid capture group name");
  }
  return !1;
};
Te.regexp_eatRegExpIdentifierName = function(e) {
  if (e.lastStringValue = "", this.regexp_eatRegExpIdentifierStart(e)) {
    for (e.lastStringValue += ws(e.lastIntValue); this.regexp_eatRegExpIdentifierPart(e); )
      e.lastStringValue += ws(e.lastIntValue);
    return !0;
  }
  return !1;
};
Te.regexp_eatRegExpIdentifierStart = function(e) {
  var t = e.pos, r = e.current();
  return e.advance(), r === 92 && this.regexp_eatRegExpUnicodeEscapeSequence(e) && (r = e.lastIntValue), tP(r) ? (e.lastIntValue = r, !0) : (e.pos = t, !1);
};
function tP(e) {
  return Ai(e, !0) || e === 36 || e === 95;
}
Te.regexp_eatRegExpIdentifierPart = function(e) {
  var t = e.pos, r = e.current();
  return e.advance(), r === 92 && this.regexp_eatRegExpUnicodeEscapeSequence(e) && (r = e.lastIntValue), rP(r) ? (e.lastIntValue = r, !0) : (e.pos = t, !1);
};
function rP(e) {
  return Tn(e, !0) || e === 36 || e === 95 || e === 8204 || e === 8205;
}
Te.regexp_eatAtomEscape = function(e) {
  return this.regexp_eatBackReference(e) || this.regexp_eatCharacterClassEscape(e) || this.regexp_eatCharacterEscape(e) || e.switchN && this.regexp_eatKGroupName(e) ? !0 : (e.switchU && (e.current() === 99 && e.raise("Invalid unicode escape"), e.raise("Invalid escape")), !1);
};
Te.regexp_eatBackReference = function(e) {
  var t = e.pos;
  if (this.regexp_eatDecimalEscape(e)) {
    var r = e.lastIntValue;
    if (e.switchU)
      return r > e.maxBackReference && (e.maxBackReference = r), !0;
    if (r <= e.numCapturingParens)
      return !0;
    e.pos = t;
  }
  return !1;
};
Te.regexp_eatKGroupName = function(e) {
  if (e.eat(
    107
    /* k */
  )) {
    if (this.regexp_eatGroupName(e))
      return e.backReferenceNames.push(e.lastStringValue), !0;
    e.raise("Invalid named reference");
  }
  return !1;
};
Te.regexp_eatCharacterEscape = function(e) {
  return this.regexp_eatControlEscape(e) || this.regexp_eatCControlLetter(e) || this.regexp_eatZero(e) || this.regexp_eatHexEscapeSequence(e) || this.regexp_eatRegExpUnicodeEscapeSequence(e) || !e.switchU && this.regexp_eatLegacyOctalEscapeSequence(e) || this.regexp_eatIdentityEscape(e);
};
Te.regexp_eatCControlLetter = function(e) {
  var t = e.pos;
  if (e.eat(
    99
    /* c */
  )) {
    if (this.regexp_eatControlLetter(e))
      return !0;
    e.pos = t;
  }
  return !1;
};
Te.regexp_eatZero = function(e) {
  return e.current() === 48 && !so(e.lookahead()) ? (e.lastIntValue = 0, e.advance(), !0) : !1;
};
Te.regexp_eatControlEscape = function(e) {
  var t = e.current();
  return t === 116 ? (e.lastIntValue = 9, e.advance(), !0) : t === 110 ? (e.lastIntValue = 10, e.advance(), !0) : t === 118 ? (e.lastIntValue = 11, e.advance(), !0) : t === 102 ? (e.lastIntValue = 12, e.advance(), !0) : t === 114 ? (e.lastIntValue = 13, e.advance(), !0) : !1;
};
Te.regexp_eatControlLetter = function(e) {
  var t = e.current();
  return Od(t) ? (e.lastIntValue = t % 32, e.advance(), !0) : !1;
};
function Od(e) {
  return e >= 65 && e <= 90 || e >= 97 && e <= 122;
}
Te.regexp_eatRegExpUnicodeEscapeSequence = function(e) {
  var t = e.pos;
  if (e.eat(
    117
    /* u */
  )) {
    if (this.regexp_eatFixedHexDigits(e, 4)) {
      var r = e.lastIntValue;
      if (e.switchU && r >= 55296 && r <= 56319) {
        var i = e.pos;
        if (e.eat(
          92
          /* \ */
        ) && e.eat(
          117
          /* u */
        ) && this.regexp_eatFixedHexDigits(e, 4)) {
          var n = e.lastIntValue;
          if (n >= 56320 && n <= 57343)
            return e.lastIntValue = (r - 55296) * 1024 + (n - 56320) + 65536, !0;
        }
        e.pos = i, e.lastIntValue = r;
      }
      return !0;
    }
    if (e.switchU && e.eat(
      123
      /* { */
    ) && this.regexp_eatHexDigits(e) && e.eat(
      125
      /* } */
    ) && iP(e.lastIntValue))
      return !0;
    e.switchU && e.raise("Invalid unicode escape"), e.pos = t;
  }
  return !1;
};
function iP(e) {
  return e >= 0 && e <= 1114111;
}
Te.regexp_eatIdentityEscape = function(e) {
  if (e.switchU)
    return this.regexp_eatSyntaxCharacter(e) ? !0 : e.eat(
      47
      /* / */
    ) ? (e.lastIntValue = 47, !0) : !1;
  var t = e.current();
  return t !== 99 && (!e.switchN || t !== 107) ? (e.lastIntValue = t, e.advance(), !0) : !1;
};
Te.regexp_eatDecimalEscape = function(e) {
  e.lastIntValue = 0;
  var t = e.current();
  if (t >= 49 && t <= 57) {
    do
      e.lastIntValue = 10 * e.lastIntValue + (t - 48), e.advance();
    while ((t = e.current()) >= 48 && t <= 57);
    return !0;
  }
  return !1;
};
Te.regexp_eatCharacterClassEscape = function(e) {
  var t = e.current();
  if (nP(t))
    return e.lastIntValue = -1, e.advance(), !0;
  if (e.switchU && this.options.ecmaVersion >= 9 && (t === 80 || t === 112)) {
    if (e.lastIntValue = -1, e.advance(), e.eat(
      123
      /* { */
    ) && this.regexp_eatUnicodePropertyValueExpression(e) && e.eat(
      125
      /* } */
    ))
      return !0;
    e.raise("Invalid property name");
  }
  return !1;
};
function nP(e) {
  return e === 100 || e === 68 || e === 115 || e === 83 || e === 119 || e === 87;
}
Te.regexp_eatUnicodePropertyValueExpression = function(e) {
  var t = e.pos;
  if (this.regexp_eatUnicodePropertyName(e) && e.eat(
    61
    /* = */
  )) {
    var r = e.lastStringValue;
    if (this.regexp_eatUnicodePropertyValue(e)) {
      var i = e.lastStringValue;
      return this.regexp_validateUnicodePropertyNameAndValue(e, r, i), !0;
    }
  }
  if (e.pos = t, this.regexp_eatLoneUnicodePropertyNameOrValue(e)) {
    var n = e.lastStringValue;
    return this.regexp_validateUnicodePropertyNameOrValue(e, n), !0;
  }
  return !1;
};
Te.regexp_validateUnicodePropertyNameAndValue = function(e, t, r) {
  io(e.unicodeProperties.nonBinary, t) || e.raise("Invalid property name"), e.unicodeProperties.nonBinary[t].test(r) || e.raise("Invalid property value");
};
Te.regexp_validateUnicodePropertyNameOrValue = function(e, t) {
  e.unicodeProperties.binary.test(t) || e.raise("Invalid property name");
};
Te.regexp_eatUnicodePropertyName = function(e) {
  var t = 0;
  for (e.lastStringValue = ""; Ed(t = e.current()); )
    e.lastStringValue += ws(t), e.advance();
  return e.lastStringValue !== "";
};
function Ed(e) {
  return Od(e) || e === 95;
}
Te.regexp_eatUnicodePropertyValue = function(e) {
  var t = 0;
  for (e.lastStringValue = ""; aP(t = e.current()); )
    e.lastStringValue += ws(t), e.advance();
  return e.lastStringValue !== "";
};
function aP(e) {
  return Ed(e) || so(e);
}
Te.regexp_eatLoneUnicodePropertyNameOrValue = function(e) {
  return this.regexp_eatUnicodePropertyValue(e);
};
Te.regexp_eatCharacterClass = function(e) {
  if (e.eat(
    91
    /* [ */
  )) {
    if (e.eat(
      94
      /* ^ */
    ), this.regexp_classRanges(e), e.eat(
      93
      /* [ */
    ))
      return !0;
    e.raise("Unterminated character class");
  }
  return !1;
};
Te.regexp_classRanges = function(e) {
  for (; this.regexp_eatClassAtom(e); ) {
    var t = e.lastIntValue;
    if (e.eat(
      45
      /* - */
    ) && this.regexp_eatClassAtom(e)) {
      var r = e.lastIntValue;
      e.switchU && (t === -1 || r === -1) && e.raise("Invalid character class"), t !== -1 && r !== -1 && t > r && e.raise("Range out of order in character class");
    }
  }
};
Te.regexp_eatClassAtom = function(e) {
  var t = e.pos;
  if (e.eat(
    92
    /* \ */
  )) {
    if (this.regexp_eatClassEscape(e))
      return !0;
    if (e.switchU) {
      var r = e.current();
      (r === 99 || Sd(r)) && e.raise("Invalid class escape"), e.raise("Invalid escape");
    }
    e.pos = t;
  }
  var i = e.current();
  return i !== 93 ? (e.lastIntValue = i, e.advance(), !0) : !1;
};
Te.regexp_eatClassEscape = function(e) {
  var t = e.pos;
  if (e.eat(
    98
    /* b */
  ))
    return e.lastIntValue = 8, !0;
  if (e.switchU && e.eat(
    45
    /* - */
  ))
    return e.lastIntValue = 45, !0;
  if (!e.switchU && e.eat(
    99
    /* c */
  )) {
    if (this.regexp_eatClassControlLetter(e))
      return !0;
    e.pos = t;
  }
  return this.regexp_eatCharacterClassEscape(e) || this.regexp_eatCharacterEscape(e);
};
Te.regexp_eatClassControlLetter = function(e) {
  var t = e.current();
  return so(t) || t === 95 ? (e.lastIntValue = t % 32, e.advance(), !0) : !1;
};
Te.regexp_eatHexEscapeSequence = function(e) {
  var t = e.pos;
  if (e.eat(
    120
    /* x */
  )) {
    if (this.regexp_eatFixedHexDigits(e, 2))
      return !0;
    e.switchU && e.raise("Invalid escape"), e.pos = t;
  }
  return !1;
};
Te.regexp_eatDecimalDigits = function(e) {
  var t = e.pos, r = 0;
  for (e.lastIntValue = 0; so(r = e.current()); )
    e.lastIntValue = 10 * e.lastIntValue + (r - 48), e.advance();
  return e.pos !== t;
};
function so(e) {
  return e >= 48 && e <= 57;
}
Te.regexp_eatHexDigits = function(e) {
  var t = e.pos, r = 0;
  for (e.lastIntValue = 0; dd(r = e.current()); )
    e.lastIntValue = 16 * e.lastIntValue + Td(r), e.advance();
  return e.pos !== t;
};
function dd(e) {
  return e >= 48 && e <= 57 || e >= 65 && e <= 70 || e >= 97 && e <= 102;
}
function Td(e) {
  return e >= 65 && e <= 70 ? 10 + (e - 65) : e >= 97 && e <= 102 ? 10 + (e - 97) : e - 48;
}
Te.regexp_eatLegacyOctalEscapeSequence = function(e) {
  if (this.regexp_eatOctalDigit(e)) {
    var t = e.lastIntValue;
    if (this.regexp_eatOctalDigit(e)) {
      var r = e.lastIntValue;
      t <= 3 && this.regexp_eatOctalDigit(e) ? e.lastIntValue = t * 64 + r * 8 + e.lastIntValue : e.lastIntValue = t * 8 + r;
    } else
      e.lastIntValue = t;
    return !0;
  }
  return !1;
};
Te.regexp_eatOctalDigit = function(e) {
  var t = e.current();
  return Sd(t) ? (e.lastIntValue = t - 48, e.advance(), !0) : (e.lastIntValue = 0, !1);
};
function Sd(e) {
  return e >= 48 && e <= 55;
}
Te.regexp_eatFixedHexDigits = function(e, t) {
  var r = e.pos;
  e.lastIntValue = 0;
  for (var i = 0; i < t; ++i) {
    var n = e.current();
    if (!dd(n))
      return e.pos = r, !1;
    e.lastIntValue = 16 * e.lastIntValue + Td(n), e.advance();
  }
  return !0;
};
var oo = function(t) {
  this.type = t.type, this.value = t.value, this.start = t.start, this.end = t.end, t.options.locations && (this.loc = new bn(t, t.startLoc, t.endLoc)), t.options.ranges && (this.range = [t.start, t.end]);
}, Fe = _t.prototype;
Fe.next = function() {
  this.options.onToken && this.options.onToken(new oo(this)), this.lastTokEnd = this.end, this.lastTokStart = this.start, this.lastTokEndLoc = this.endLoc, this.lastTokStartLoc = this.startLoc, this.nextToken();
};
Fe.getToken = function() {
  return this.next(), new oo(this);
};
typeof Symbol < "u" && (Fe[Symbol.iterator] = function() {
  var e = this;
  return {
    next: function() {
      var t = e.getToken();
      return {
        done: t.type === T.eof,
        value: t
      };
    }
  };
});
Fe.curContext = function() {
  return this.context[this.context.length - 1];
};
Fe.nextToken = function() {
  var e = this.curContext();
  if ((!e || !e.preserveSpace) && this.skipSpace(), this.start = this.pos, this.options.locations && (this.startLoc = this.curPosition()), this.pos >= this.input.length)
    return this.finishToken(T.eof);
  if (e.override)
    return e.override(this);
  this.readToken(this.fullCharCodeAtPos());
};
Fe.readToken = function(e) {
  return Ai(e, this.options.ecmaVersion >= 6) || e === 92 ? this.readWord() : this.getTokenFromCode(e);
};
Fe.fullCharCodeAtPos = function() {
  var e = this.input.charCodeAt(this.pos);
  if (e <= 55295 || e >= 57344)
    return e;
  var t = this.input.charCodeAt(this.pos + 1);
  return (e << 10) + t - 56613888;
};
Fe.skipBlockComment = function() {
  var e = this.options.onComment && this.curPosition(), t = this.pos, r = this.input.indexOf("*/", this.pos += 2);
  if (r === -1 && this.raise(this.pos - 2, "Unterminated comment"), this.pos = r + 2, this.options.locations) {
    Wi.lastIndex = t;
    for (var i; (i = Wi.exec(this.input)) && i.index < this.pos; )
      ++this.curLine, this.lineStart = i.index + i[0].length;
  }
  this.options.onComment && this.options.onComment(
    !0,
    this.input.slice(t + 2, r),
    t,
    this.pos,
    e,
    this.curPosition()
  );
};
Fe.skipLineComment = function(e) {
  for (var t = this.pos, r = this.options.onComment && this.curPosition(), i = this.input.charCodeAt(this.pos += e); this.pos < this.input.length && !Ni(i); )
    i = this.input.charCodeAt(++this.pos);
  this.options.onComment && this.options.onComment(
    !1,
    this.input.slice(t + e, this.pos),
    t,
    this.pos,
    r,
    this.curPosition()
  );
};
Fe.skipSpace = function() {
  e:
    for (; this.pos < this.input.length; ) {
      var e = this.input.charCodeAt(this.pos);
      switch (e) {
        case 32:
        case 160:
          ++this.pos;
          break;
        case 13:
          this.input.charCodeAt(this.pos + 1) === 10 && ++this.pos;
        case 10:
        case 8232:
        case 8233:
          ++this.pos, this.options.locations && (++this.curLine, this.lineStart = this.pos);
          break;
        case 47:
          switch (this.input.charCodeAt(this.pos + 1)) {
            case 42:
              this.skipBlockComment();
              break;
            case 47:
              this.skipLineComment(2);
              break;
            default:
              break e;
          }
          break;
        default:
          if (e > 8 && e < 14 || e >= 5760 && HE.test(String.fromCharCode(e)))
            ++this.pos;
          else
            break e;
      }
    }
};
Fe.finishToken = function(e, t) {
  this.end = this.pos, this.options.locations && (this.endLoc = this.curPosition());
  var r = this.type;
  this.type = e, this.value = t, this.updateContext(r);
};
Fe.readToken_dot = function() {
  var e = this.input.charCodeAt(this.pos + 1);
  if (e >= 48 && e <= 57)
    return this.readNumber(!0);
  var t = this.input.charCodeAt(this.pos + 2);
  return this.options.ecmaVersion >= 6 && e === 46 && t === 46 ? (this.pos += 3, this.finishToken(T.ellipsis)) : (++this.pos, this.finishToken(T.dot));
};
Fe.readToken_slash = function() {
  var e = this.input.charCodeAt(this.pos + 1);
  return this.exprAllowed ? (++this.pos, this.readRegexp()) : e === 61 ? this.finishOp(T.assign, 2) : this.finishOp(T.slash, 1);
};
Fe.readToken_mult_modulo_exp = function(e) {
  var t = this.input.charCodeAt(this.pos + 1), r = 1, i = e === 42 ? T.star : T.modulo;
  return this.options.ecmaVersion >= 7 && e === 42 && t === 42 && (++r, i = T.starstar, t = this.input.charCodeAt(this.pos + 2)), t === 61 ? this.finishOp(T.assign, r + 1) : this.finishOp(i, r);
};
Fe.readToken_pipe_amp = function(e) {
  var t = this.input.charCodeAt(this.pos + 1);
  return t === e ? this.finishOp(e === 124 ? T.logicalOR : T.logicalAND, 2) : t === 61 ? this.finishOp(T.assign, 2) : this.finishOp(e === 124 ? T.bitwiseOR : T.bitwiseAND, 1);
};
Fe.readToken_caret = function() {
  var e = this.input.charCodeAt(this.pos + 1);
  return e === 61 ? this.finishOp(T.assign, 2) : this.finishOp(T.bitwiseXOR, 1);
};
Fe.readToken_plus_min = function(e) {
  var t = this.input.charCodeAt(this.pos + 1);
  return t === e ? t === 45 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 62 && (this.lastTokEnd === 0 || gr.test(this.input.slice(this.lastTokEnd, this.pos))) ? (this.skipLineComment(3), this.skipSpace(), this.nextToken()) : this.finishOp(T.incDec, 2) : t === 61 ? this.finishOp(T.assign, 2) : this.finishOp(T.plusMin, 1);
};
Fe.readToken_lt_gt = function(e) {
  var t = this.input.charCodeAt(this.pos + 1), r = 1;
  return t === e ? (r = e === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2, this.input.charCodeAt(this.pos + r) === 61 ? this.finishOp(T.assign, r + 1) : this.finishOp(T.bitShift, r)) : t === 33 && e === 60 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 45 && this.input.charCodeAt(this.pos + 3) === 45 ? (this.skipLineComment(4), this.skipSpace(), this.nextToken()) : (t === 61 && (r = 2), this.finishOp(T.relational, r));
};
Fe.readToken_eq_excl = function(e) {
  var t = this.input.charCodeAt(this.pos + 1);
  return t === 61 ? this.finishOp(T.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2) : e === 61 && t === 62 && this.options.ecmaVersion >= 6 ? (this.pos += 2, this.finishToken(T.arrow)) : this.finishOp(e === 61 ? T.eq : T.prefix, 1);
};
Fe.getTokenFromCode = function(e) {
  switch (e) {
    case 46:
      return this.readToken_dot();
    case 40:
      return ++this.pos, this.finishToken(T.parenL);
    case 41:
      return ++this.pos, this.finishToken(T.parenR);
    case 59:
      return ++this.pos, this.finishToken(T.semi);
    case 44:
      return ++this.pos, this.finishToken(T.comma);
    case 91:
      return ++this.pos, this.finishToken(T.bracketL);
    case 93:
      return ++this.pos, this.finishToken(T.bracketR);
    case 123:
      return ++this.pos, this.finishToken(T.braceL);
    case 125:
      return ++this.pos, this.finishToken(T.braceR);
    case 58:
      return ++this.pos, this.finishToken(T.colon);
    case 63:
      return ++this.pos, this.finishToken(T.question);
    case 96:
      if (this.options.ecmaVersion < 6)
        break;
      return ++this.pos, this.finishToken(T.backQuote);
    case 48:
      var t = this.input.charCodeAt(this.pos + 1);
      if (t === 120 || t === 88)
        return this.readRadixNumber(16);
      if (this.options.ecmaVersion >= 6) {
        if (t === 111 || t === 79)
          return this.readRadixNumber(8);
        if (t === 98 || t === 66)
          return this.readRadixNumber(2);
      }
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
      return this.readNumber(!1);
    case 34:
    case 39:
      return this.readString(e);
    case 47:
      return this.readToken_slash();
    case 37:
    case 42:
      return this.readToken_mult_modulo_exp(e);
    case 124:
    case 38:
      return this.readToken_pipe_amp(e);
    case 94:
      return this.readToken_caret();
    case 43:
    case 45:
      return this.readToken_plus_min(e);
    case 60:
    case 62:
      return this.readToken_lt_gt(e);
    case 61:
    case 33:
      return this.readToken_eq_excl(e);
    case 126:
      return this.finishOp(T.prefix, 1);
  }
  this.raise(this.pos, "Unexpected character '" + Rc(e) + "'");
};
Fe.finishOp = function(e, t) {
  var r = this.input.slice(this.pos, this.pos + t);
  return this.pos += t, this.finishToken(e, r);
};
Fe.readRegexp = function() {
  for (var e, t, r = this.pos; ; ) {
    this.pos >= this.input.length && this.raise(r, "Unterminated regular expression");
    var i = this.input.charAt(this.pos);
    if (gr.test(i) && this.raise(r, "Unterminated regular expression"), e)
      e = !1;
    else {
      if (i === "[")
        t = !0;
      else if (i === "]" && t)
        t = !1;
      else if (i === "/" && !t)
        break;
      e = i === "\\";
    }
    ++this.pos;
  }
  var n = this.input.slice(r, this.pos);
  ++this.pos;
  var a = this.pos, s = this.readWord1();
  this.containsEsc && this.unexpected(a);
  var o = this.regexpState || (this.regexpState = new oi(this));
  o.reset(r, n, s), this.validateRegExpFlags(o), this.validateRegExpPattern(o);
  var l = null;
  try {
    l = new RegExp(n, s);
  } catch {
  }
  return this.finishToken(T.regexp, { pattern: n, flags: s, value: l });
};
Fe.readInt = function(e, t) {
  for (var r = this.pos, i = 0, n = 0, a = t ?? 1 / 0; n < a; ++n) {
    var s = this.input.charCodeAt(this.pos), o = void 0;
    if (s >= 97 ? o = s - 97 + 10 : s >= 65 ? o = s - 65 + 10 : s >= 48 && s <= 57 ? o = s - 48 : o = 1 / 0, o >= e)
      break;
    ++this.pos, i = i * e + o;
  }
  return this.pos === r || t != null && this.pos - r !== t ? null : i;
};
Fe.readRadixNumber = function(e) {
  var t = this.pos;
  this.pos += 2;
  var r = this.readInt(e);
  return r == null && this.raise(this.start + 2, "Expected number in radix " + e), this.options.ecmaVersion >= 11 && this.input.charCodeAt(this.pos) === 110 ? (r = typeof BigInt < "u" ? BigInt(this.input.slice(t, this.pos)) : null, ++this.pos) : Ai(this.fullCharCodeAtPos()) && this.raise(this.pos, "Identifier directly after number"), this.finishToken(T.num, r);
};
Fe.readNumber = function(e) {
  var t = this.pos;
  !e && this.readInt(10) === null && this.raise(t, "Invalid number");
  var r = this.pos - t >= 2 && this.input.charCodeAt(t) === 48;
  r && this.strict && this.raise(t, "Invalid number"), r && /[89]/.test(this.input.slice(t, this.pos)) && (r = !1);
  var i = this.input.charCodeAt(this.pos);
  if (!r && !e && this.options.ecmaVersion >= 11 && i === 110) {
    var n = this.input.slice(t, this.pos), a = typeof BigInt < "u" ? BigInt(n) : null;
    return ++this.pos, Ai(this.fullCharCodeAtPos()) && this.raise(this.pos, "Identifier directly after number"), this.finishToken(T.num, a);
  }
  i === 46 && !r && (++this.pos, this.readInt(10), i = this.input.charCodeAt(this.pos)), (i === 69 || i === 101) && !r && (i = this.input.charCodeAt(++this.pos), (i === 43 || i === 45) && ++this.pos, this.readInt(10) === null && this.raise(t, "Invalid number")), Ai(this.fullCharCodeAtPos()) && this.raise(this.pos, "Identifier directly after number");
  var s = this.input.slice(t, this.pos), o = r ? parseInt(s, 8) : parseFloat(s);
  return this.finishToken(T.num, o);
};
Fe.readCodePoint = function() {
  var e = this.input.charCodeAt(this.pos), t;
  if (e === 123) {
    this.options.ecmaVersion < 6 && this.unexpected();
    var r = ++this.pos;
    t = this.readHexChar(this.input.indexOf("}", this.pos) - this.pos), ++this.pos, t > 1114111 && this.invalidStringToken(r, "Code point out of bounds");
  } else
    t = this.readHexChar(4);
  return t;
};
function Rc(e) {
  return e <= 65535 ? String.fromCharCode(e) : (e -= 65536, String.fromCharCode((e >> 10) + 55296, (e & 1023) + 56320));
}
Fe.readString = function(e) {
  for (var t = "", r = ++this.pos; ; ) {
    this.pos >= this.input.length && this.raise(this.start, "Unterminated string constant");
    var i = this.input.charCodeAt(this.pos);
    if (i === e)
      break;
    i === 92 ? (t += this.input.slice(r, this.pos), t += this.readEscapedChar(!1), r = this.pos) : (Ni(i, this.options.ecmaVersion >= 10) && this.raise(this.start, "Unterminated string constant"), ++this.pos);
  }
  return t += this.input.slice(r, this.pos++), this.finishToken(T.string, t);
};
var md = {};
Fe.tryReadTemplateToken = function() {
  this.inTemplateElement = !0;
  try {
    this.readTmplToken();
  } catch (e) {
    if (e === md)
      this.readInvalidTemplateToken();
    else
      throw e;
  }
  this.inTemplateElement = !1;
};
Fe.invalidStringToken = function(e, t) {
  if (this.inTemplateElement && this.options.ecmaVersion >= 9)
    throw md;
  this.raise(e, t);
};
Fe.readTmplToken = function() {
  for (var e = "", t = this.pos; ; ) {
    this.pos >= this.input.length && this.raise(this.start, "Unterminated template");
    var r = this.input.charCodeAt(this.pos);
    if (r === 96 || r === 36 && this.input.charCodeAt(this.pos + 1) === 123)
      return this.pos === this.start && (this.type === T.template || this.type === T.invalidTemplate) ? r === 36 ? (this.pos += 2, this.finishToken(T.dollarBraceL)) : (++this.pos, this.finishToken(T.backQuote)) : (e += this.input.slice(t, this.pos), this.finishToken(T.template, e));
    if (r === 92)
      e += this.input.slice(t, this.pos), e += this.readEscapedChar(!0), t = this.pos;
    else if (Ni(r)) {
      switch (e += this.input.slice(t, this.pos), ++this.pos, r) {
        case 13:
          this.input.charCodeAt(this.pos) === 10 && ++this.pos;
        case 10:
          e += `
`;
          break;
        default:
          e += String.fromCharCode(r);
          break;
      }
      this.options.locations && (++this.curLine, this.lineStart = this.pos), t = this.pos;
    } else
      ++this.pos;
  }
};
Fe.readInvalidTemplateToken = function() {
  for (; this.pos < this.input.length; this.pos++)
    switch (this.input[this.pos]) {
      case "\\":
        ++this.pos;
        break;
      case "$":
        if (this.input[this.pos + 1] !== "{")
          break;
      case "`":
        return this.finishToken(T.invalidTemplate, this.input.slice(this.start, this.pos));
    }
  this.raise(this.start, "Unterminated template");
};
Fe.readEscapedChar = function(e) {
  var t = this.input.charCodeAt(++this.pos);
  switch (++this.pos, t) {
    case 110:
      return `
`;
    case 114:
      return "\r";
    case 120:
      return String.fromCharCode(this.readHexChar(2));
    case 117:
      return Rc(this.readCodePoint());
    case 116:
      return "	";
    case 98:
      return "\b";
    case 118:
      return "\v";
    case 102:
      return "\f";
    case 13:
      this.input.charCodeAt(this.pos) === 10 && ++this.pos;
    case 10:
      return this.options.locations && (this.lineStart = this.pos, ++this.curLine), "";
    default:
      if (t >= 48 && t <= 55) {
        var r = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0], i = parseInt(r, 8);
        return i > 255 && (r = r.slice(0, -1), i = parseInt(r, 8)), this.pos += r.length - 1, t = this.input.charCodeAt(this.pos), (r !== "0" || t === 56 || t === 57) && (this.strict || e) && this.invalidStringToken(
          this.pos - 1 - r.length,
          e ? "Octal literal in template string" : "Octal literal in strict mode"
        ), String.fromCharCode(i);
      }
      return Ni(t) ? "" : String.fromCharCode(t);
  }
};
Fe.readHexChar = function(e) {
  var t = this.pos, r = this.readInt(16, e);
  return r === null && this.invalidStringToken(t, "Bad character escape sequence"), r;
};
Fe.readWord1 = function() {
  this.containsEsc = !1;
  for (var e = "", t = !0, r = this.pos, i = this.options.ecmaVersion >= 6; this.pos < this.input.length; ) {
    var n = this.fullCharCodeAtPos();
    if (Tn(n, i))
      this.pos += n <= 65535 ? 1 : 2;
    else if (n === 92) {
      this.containsEsc = !0, e += this.input.slice(r, this.pos);
      var a = this.pos;
      this.input.charCodeAt(++this.pos) !== 117 && this.invalidStringToken(this.pos, "Expecting Unicode escape sequence \\uXXXX"), ++this.pos;
      var s = this.readCodePoint();
      (t ? Ai : Tn)(s, i) || this.invalidStringToken(a, "Invalid Unicode escape"), e += Rc(s), r = this.pos;
    } else
      break;
    t = !1;
  }
  return e + this.input.slice(r, this.pos);
};
Fe.readWord = function() {
  var e = this.readWord1(), t = T.name;
  return this.keywords.test(e) && (this.containsEsc && this.raiseRecoverable(this.start, "Escape sequence in keyword " + e), t = Oc[e]), this.finishToken(t, e);
};
var sP = "6.4.2";
_t.acorn = {
  Parser: _t,
  version: sP,
  defaultOptions: Ds,
  Position: la,
  SourceLocation: bn,
  getLineInfo: ua,
  Node: Sn,
  TokenType: He,
  tokTypes: T,
  keywordTypes: Oc,
  TokContext: Pr,
  tokContexts: gt,
  isIdentifierChar: Tn,
  isIdentifierStart: Ai,
  Token: oo,
  isNewLine: Ni,
  lineBreak: gr,
  lineBreakG: Wi,
  nonASCIIwhitespace: HE
};
function Th() {
}
var Ke = function(t, r) {
  if (r === void 0 && (r = {}), this.toks = this.constructor.BaseParser.tokenizer(t, r), this.options = this.toks.options, this.input = this.toks.input, this.tok = this.last = { type: T.eof, start: 0, end: 0 }, this.tok.validateRegExpFlags = Th, this.tok.validateRegExpPattern = Th, this.options.locations) {
    var i = this.toks.curPosition();
    this.tok.loc = new bn(this.toks, i, i);
  }
  this.ahead = [], this.context = [], this.curIndent = 0, this.curLineStart = 0, this.nextLineStart = this.lineEnd(this.curLineStart) + 1, this.inAsync = !1, this.inFunction = !1;
};
Ke.prototype.startNode = function() {
  return new Sn(this.toks, this.tok.start, this.options.locations ? this.tok.loc.start : null);
};
Ke.prototype.storeCurrentPos = function() {
  return this.options.locations ? [this.tok.start, this.tok.loc.start] : this.tok.start;
};
Ke.prototype.startNodeAt = function(t) {
  return this.options.locations ? new Sn(this.toks, t[0], t[1]) : new Sn(this.toks, t);
};
Ke.prototype.finishNode = function(t, r) {
  return t.type = r, t.end = this.last.end, this.options.locations && (t.loc.end = this.last.loc.end), this.options.ranges && (t.range[1] = this.last.end), t;
};
Ke.prototype.dummyNode = function(t) {
  var r = this.startNode();
  return r.type = t, r.end = r.start, this.options.locations && (r.loc.end = r.loc.start), this.options.ranges && (r.range[1] = r.start), this.last = { type: T.name, start: r.start, end: r.start, loc: r.loc }, r;
};
Ke.prototype.dummyIdent = function() {
  var t = this.dummyNode("Identifier");
  return t.name = "✖", t;
};
Ke.prototype.dummyString = function() {
  var t = this.dummyNode("Literal");
  return t.value = t.raw = "✖", t;
};
Ke.prototype.eat = function(t) {
  return this.tok.type === t ? (this.next(), !0) : !1;
};
Ke.prototype.isContextual = function(t) {
  return this.tok.type === T.name && this.tok.value === t;
};
Ke.prototype.eatContextual = function(t) {
  return this.tok.value === t && this.eat(T.name);
};
Ke.prototype.canInsertSemicolon = function() {
  return this.tok.type === T.eof || this.tok.type === T.braceR || gr.test(this.input.slice(this.last.end, this.tok.start));
};
Ke.prototype.semicolon = function() {
  return this.eat(T.semi);
};
Ke.prototype.expect = function(t) {
  if (this.eat(t))
    return !0;
  for (var r = 1; r <= 2; r++)
    if (this.lookAhead(r).type === t) {
      for (var i = 0; i < r; i++)
        this.next();
      return !0;
    }
};
Ke.prototype.pushCx = function() {
  this.context.push(this.curIndent);
};
Ke.prototype.popCx = function() {
  this.curIndent = this.context.pop();
};
Ke.prototype.lineEnd = function(t) {
  for (; t < this.input.length && !Ni(this.input.charCodeAt(t)); )
    ++t;
  return t;
};
Ke.prototype.indentationAfter = function(t) {
  for (var r = 0; ; ++t) {
    var i = this.input.charCodeAt(t);
    if (i === 32)
      ++r;
    else if (i === 9)
      r += this.options.tabSize;
    else
      return r;
  }
};
Ke.prototype.closes = function(t, r, i, n) {
  return this.tok.type === t || this.tok.type === T.eof ? !0 : i !== this.curLineStart && this.curIndent < r && this.tokenStartsLine() && (!n || this.nextLineStart >= this.input.length || this.indentationAfter(this.nextLineStart) < r);
};
Ke.prototype.tokenStartsLine = function() {
  for (var t = this.tok.start - 1; t >= this.curLineStart; --t) {
    var r = this.input.charCodeAt(t);
    if (r !== 9 && r !== 32)
      return !1;
  }
  return !0;
};
Ke.prototype.extend = function(t, r) {
  this[t] = r(this[t]);
};
Ke.prototype.parse = function() {
  return this.next(), this.parseTopLevel();
};
Ke.extend = function() {
  for (var t = [], r = arguments.length; r--; )
    t[r] = arguments[r];
  for (var i = this, n = 0; n < t.length; n++)
    i = t[n](i);
  return i;
};
Ke.parse = function(t, r) {
  return new this(t, r).parse();
};
Ke.BaseParser = _t;
var lo = Ke.prototype;
function oP(e) {
  return e < 14 && e > 8 || e === 32 || e === 160 || Ni(e);
}
lo.next = function() {
  if (this.last = this.tok, this.ahead.length ? this.tok = this.ahead.shift() : this.tok = this.readToken(), this.tok.start >= this.nextLineStart) {
    for (; this.tok.start >= this.nextLineStart; )
      this.curLineStart = this.nextLineStart, this.nextLineStart = this.lineEnd(this.curLineStart) + 1;
    this.curIndent = this.indentationAfter(this.curLineStart);
  }
};
lo.readToken = function() {
  for (; ; )
    try {
      return this.toks.next(), this.toks.type === T.dot && this.input.substr(this.toks.end, 1) === "." && this.options.ecmaVersion >= 6 && (this.toks.end++, this.toks.type = T.ellipsis), new oo(this.toks);
    } catch (a) {
      if (!(a instanceof SyntaxError))
        throw a;
      var e = a.message, t = a.raisedAt, r = !0;
      if (/unterminated/i.test(e))
        if (t = this.lineEnd(a.pos + 1), /string/.test(e))
          r = { start: a.pos, end: t, type: T.string, value: this.input.slice(a.pos + 1, t) };
        else if (/regular expr/i.test(e)) {
          var i = this.input.slice(a.pos, t);
          try {
            i = new RegExp(i);
          } catch {
          }
          r = { start: a.pos, end: t, type: T.regexp, value: i };
        } else
          /template/.test(e) ? r = {
            start: a.pos,
            end: t,
            type: T.template,
            value: this.input.slice(a.pos, t)
          } : r = !1;
      else if (/invalid (unicode|regexp|number)|expecting unicode|octal literal|is reserved|directly after number|expected number in radix/i.test(e))
        for (; t < this.input.length && !oP(this.input.charCodeAt(t)); )
          ++t;
      else if (/character escape|expected hexadecimal/i.test(e))
        for (; t < this.input.length; ) {
          var n = this.input.charCodeAt(t++);
          if (n === 34 || n === 39 || Ni(n))
            break;
        }
      else if (/unexpected character/i.test(e))
        t++, r = !1;
      else if (/regular expression/i.test(e))
        r = !0;
      else
        throw a;
      if (this.resetTo(t), r === !0 && (r = { start: t, end: t, type: T.name, value: "✖" }), r)
        return this.options.locations && (r.loc = new bn(
          this.toks,
          ua(this.input, r.start),
          ua(this.input, r.end)
        )), r;
    }
};
lo.resetTo = function(e) {
  this.toks.pos = e;
  var t = this.input.charAt(e - 1);
  if (this.toks.exprAllowed = !t || /[[{(,;:?/*=+\-~!|&%^<>]/.test(t) || /[enwfd]/.test(t) && /\b(case|else|return|throw|new|in|(instance|type)?of|delete|void)$/.test(this.input.slice(e - 10, e)), this.options.locations) {
    this.toks.curLine = 1, this.toks.lineStart = Wi.lastIndex = 0;
    for (var r; (r = Wi.exec(this.input)) && r.index < e; )
      ++this.toks.curLine, this.toks.lineStart = r.index + r[0].length;
  }
};
lo.lookAhead = function(e) {
  for (; e > this.ahead.length; )
    this.ahead.push(this.readToken());
  return this.ahead[e - 1];
};
function ri(e) {
  return e.name === "✖";
}
var yr = Ke.prototype;
yr.parseTopLevel = function() {
  var e = this.startNodeAt(this.options.locations ? [0, ua(this.input, 0)] : 0);
  for (e.body = []; this.tok.type !== T.eof; )
    e.body.push(this.parseStatement());
  return this.toks.adaptDirectivePrologue(e.body), this.last = this.tok, this.options.ecmaVersion >= 6 && (e.sourceType = this.options.sourceType), this.finishNode(e, "Program");
};
yr.parseStatement = function() {
  var e = this.tok.type, t = this.startNode(), r;
  switch (this.toks.isLet() && (e = T._var, r = "let"), e) {
    case T._break:
    case T._continue:
      this.next();
      var i = e === T._break;
      return this.semicolon() || this.canInsertSemicolon() ? t.label = null : (t.label = this.tok.type === T.name ? this.parseIdent() : null, this.semicolon()), this.finishNode(t, i ? "BreakStatement" : "ContinueStatement");
    case T._debugger:
      return this.next(), this.semicolon(), this.finishNode(t, "DebuggerStatement");
    case T._do:
      return this.next(), t.body = this.parseStatement(), t.test = this.eat(T._while) ? this.parseParenExpression() : this.dummyIdent(), this.semicolon(), this.finishNode(t, "DoWhileStatement");
    case T._for:
      this.next();
      var n = this.options.ecmaVersion >= 9 && this.inAsync && this.eatContextual("await");
      if (this.pushCx(), this.expect(T.parenL), this.tok.type === T.semi)
        return this.parseFor(t, null);
      var a = this.toks.isLet();
      if (a || this.tok.type === T._var || this.tok.type === T._const) {
        var s = this.parseVar(this.startNode(), !0, a ? "let" : this.tok.value);
        return s.declarations.length === 1 && (this.tok.type === T._in || this.isContextual("of")) ? (this.options.ecmaVersion >= 9 && this.tok.type !== T._in && (t.await = n), this.parseForIn(t, s)) : this.parseFor(t, s);
      }
      var o = this.parseExpression(!0);
      return this.tok.type === T._in || this.isContextual("of") ? (this.options.ecmaVersion >= 9 && this.tok.type !== T._in && (t.await = n), this.parseForIn(t, this.toAssignable(o))) : this.parseFor(t, o);
    case T._function:
      return this.next(), this.parseFunction(t, !0);
    case T._if:
      return this.next(), t.test = this.parseParenExpression(), t.consequent = this.parseStatement(), t.alternate = this.eat(T._else) ? this.parseStatement() : null, this.finishNode(t, "IfStatement");
    case T._return:
      return this.next(), this.eat(T.semi) || this.canInsertSemicolon() ? t.argument = null : (t.argument = this.parseExpression(), this.semicolon()), this.finishNode(t, "ReturnStatement");
    case T._switch:
      var l = this.curIndent, c = this.curLineStart;
      this.next(), t.discriminant = this.parseParenExpression(), t.cases = [], this.pushCx(), this.expect(T.braceL);
      for (var f; !this.closes(T.braceR, l, c, !0); )
        if (this.tok.type === T._case || this.tok.type === T._default) {
          var p = this.tok.type === T._case;
          f && this.finishNode(f, "SwitchCase"), t.cases.push(f = this.startNode()), f.consequent = [], this.next(), p ? f.test = this.parseExpression() : f.test = null, this.expect(T.colon);
        } else
          f || (t.cases.push(f = this.startNode()), f.consequent = [], f.test = null), f.consequent.push(this.parseStatement());
      return f && this.finishNode(f, "SwitchCase"), this.popCx(), this.eat(T.braceR), this.finishNode(t, "SwitchStatement");
    case T._throw:
      return this.next(), t.argument = this.parseExpression(), this.semicolon(), this.finishNode(t, "ThrowStatement");
    case T._try:
      if (this.next(), t.block = this.parseBlock(), t.handler = null, this.tok.type === T._catch) {
        var O = this.startNode();
        this.next(), this.eat(T.parenL) ? (O.param = this.toAssignable(this.parseExprAtom(), !0), this.expect(T.parenR)) : O.param = null, O.body = this.parseBlock(), t.handler = this.finishNode(O, "CatchClause");
      }
      return t.finalizer = this.eat(T._finally) ? this.parseBlock() : null, !t.handler && !t.finalizer ? t.block : this.finishNode(t, "TryStatement");
    case T._var:
    case T._const:
      return this.parseVar(t, !1, r || this.tok.value);
    case T._while:
      return this.next(), t.test = this.parseParenExpression(), t.body = this.parseStatement(), this.finishNode(t, "WhileStatement");
    case T._with:
      return this.next(), t.object = this.parseParenExpression(), t.body = this.parseStatement(), this.finishNode(t, "WithStatement");
    case T.braceL:
      return this.parseBlock();
    case T.semi:
      return this.next(), this.finishNode(t, "EmptyStatement");
    case T._class:
      return this.parseClass(!0);
    case T._import:
      return this.options.ecmaVersion > 10 && this.lookAhead(1).type === T.parenL ? (t.expression = this.parseExpression(), this.semicolon(), this.finishNode(t, "ExpressionStatement")) : this.parseImport();
    case T._export:
      return this.parseExport();
    default:
      if (this.toks.isAsyncFunction())
        return this.next(), this.next(), this.parseFunction(t, !0, !0);
      var d = this.parseExpression();
      return ri(d) ? (this.next(), this.tok.type === T.eof ? this.finishNode(t, "EmptyStatement") : this.parseStatement()) : e === T.name && d.type === "Identifier" && this.eat(T.colon) ? (t.body = this.parseStatement(), t.label = d, this.finishNode(t, "LabeledStatement")) : (t.expression = d, this.semicolon(), this.finishNode(t, "ExpressionStatement"));
  }
};
yr.parseBlock = function() {
  var e = this.startNode();
  this.pushCx(), this.expect(T.braceL);
  var t = this.curIndent, r = this.curLineStart;
  for (e.body = []; !this.closes(T.braceR, t, r, !0); )
    e.body.push(this.parseStatement());
  return this.popCx(), this.eat(T.braceR), this.finishNode(e, "BlockStatement");
};
yr.parseFor = function(e, t) {
  return e.init = t, e.test = e.update = null, this.eat(T.semi) && this.tok.type !== T.semi && (e.test = this.parseExpression()), this.eat(T.semi) && this.tok.type !== T.parenR && (e.update = this.parseExpression()), this.popCx(), this.expect(T.parenR), e.body = this.parseStatement(), this.finishNode(e, "ForStatement");
};
yr.parseForIn = function(e, t) {
  var r = this.tok.type === T._in ? "ForInStatement" : "ForOfStatement";
  return this.next(), e.left = t, e.right = this.parseExpression(), this.popCx(), this.expect(T.parenR), e.body = this.parseStatement(), this.finishNode(e, r);
};
yr.parseVar = function(e, t, r) {
  e.kind = r, this.next(), e.declarations = [];
  do {
    var i = this.startNode();
    i.id = this.options.ecmaVersion >= 6 ? this.toAssignable(this.parseExprAtom(), !0) : this.parseIdent(), i.init = this.eat(T.eq) ? this.parseMaybeAssign(t) : null, e.declarations.push(this.finishNode(i, "VariableDeclarator"));
  } while (this.eat(T.comma));
  if (!e.declarations.length) {
    var n = this.startNode();
    n.id = this.dummyIdent(), e.declarations.push(this.finishNode(n, "VariableDeclarator"));
  }
  return t || this.semicolon(), this.finishNode(e, "VariableDeclaration");
};
yr.parseClass = function(e) {
  var t = this.startNode();
  this.next(), this.tok.type === T.name ? t.id = this.parseIdent() : e === !0 ? t.id = this.dummyIdent() : t.id = null, t.superClass = this.eat(T._extends) ? this.parseExpression() : null, t.body = this.startNode(), t.body.body = [], this.pushCx();
  var r = this.curIndent + 1, i = this.curLineStart;
  for (this.eat(T.braceL), this.curIndent + 1 < r && (r = this.curIndent, i = this.curLineStart); !this.closes(T.braceR, r, i); )
    if (!this.semicolon()) {
      var n = this.startNode(), a = void 0, s = void 0;
      if (this.options.ecmaVersion >= 6 && (n.static = !1, a = this.eat(T.star)), this.parsePropertyName(n), ri(n.key)) {
        ri(this.parseMaybeAssign()) && this.next(), this.eat(T.comma);
        continue;
      }
      n.key.type === "Identifier" && !n.computed && n.key.name === "static" && this.tok.type !== T.parenL && this.tok.type !== T.braceL ? (n.static = !0, a = this.eat(T.star), this.parsePropertyName(n)) : n.static = !1, !n.computed && n.key.type === "Identifier" && n.key.name === "async" && this.tok.type !== T.parenL && !this.canInsertSemicolon() ? (s = !0, a = this.options.ecmaVersion >= 9 && this.eat(T.star), this.parsePropertyName(n)) : s = !1, this.options.ecmaVersion >= 5 && n.key.type === "Identifier" && !n.computed && (n.key.name === "get" || n.key.name === "set") && this.tok.type !== T.parenL && this.tok.type !== T.braceL ? (n.kind = n.key.name, this.parsePropertyName(n), n.value = this.parseMethod(!1)) : (!n.computed && !n.static && !a && !s && (n.key.type === "Identifier" && n.key.name === "constructor" || n.key.type === "Literal" && n.key.value === "constructor") ? n.kind = "constructor" : n.kind = "method", n.value = this.parseMethod(a, s)), t.body.body.push(this.finishNode(n, "MethodDefinition"));
    }
  return this.popCx(), this.eat(T.braceR) || (this.last.end = this.tok.start, this.options.locations && (this.last.loc.end = this.tok.loc.start)), this.semicolon(), this.finishNode(t.body, "ClassBody"), this.finishNode(t, e ? "ClassDeclaration" : "ClassExpression");
};
yr.parseFunction = function(e, t, r) {
  var i = this.inAsync, n = this.inFunction;
  return this.initFunction(e), this.options.ecmaVersion >= 6 && (e.generator = this.eat(T.star)), this.options.ecmaVersion >= 8 && (e.async = !!r), this.tok.type === T.name ? e.id = this.parseIdent() : t === !0 && (e.id = this.dummyIdent()), this.inAsync = e.async, this.inFunction = !0, e.params = this.parseFunctionParams(), e.body = this.parseBlock(), this.toks.adaptDirectivePrologue(e.body.body), this.inAsync = i, this.inFunction = n, this.finishNode(e, t ? "FunctionDeclaration" : "FunctionExpression");
};
yr.parseExport = function() {
  var e = this.startNode();
  if (this.next(), this.eat(T.star))
    return e.source = this.eatContextual("from") ? this.parseExprAtom() : this.dummyString(), this.finishNode(e, "ExportAllDeclaration");
  if (this.eat(T._default)) {
    var t;
    if (this.tok.type === T._function || (t = this.toks.isAsyncFunction())) {
      var r = this.startNode();
      this.next(), t && this.next(), e.declaration = this.parseFunction(r, "nullableID", t);
    } else
      this.tok.type === T._class ? e.declaration = this.parseClass("nullableID") : (e.declaration = this.parseMaybeAssign(), this.semicolon());
    return this.finishNode(e, "ExportDefaultDeclaration");
  }
  return this.tok.type.keyword || this.toks.isLet() || this.toks.isAsyncFunction() ? (e.declaration = this.parseStatement(), e.specifiers = [], e.source = null) : (e.declaration = null, e.specifiers = this.parseExportSpecifierList(), e.source = this.eatContextual("from") ? this.parseExprAtom() : null, this.semicolon()), this.finishNode(e, "ExportNamedDeclaration");
};
yr.parseImport = function() {
  var e = this.startNode();
  if (this.next(), this.tok.type === T.string)
    e.specifiers = [], e.source = this.parseExprAtom();
  else {
    var t;
    this.tok.type === T.name && this.tok.value !== "from" && (t = this.startNode(), t.local = this.parseIdent(), this.finishNode(t, "ImportDefaultSpecifier"), this.eat(T.comma)), e.specifiers = this.parseImportSpecifiers(), e.source = this.eatContextual("from") && this.tok.type === T.string ? this.parseExprAtom() : this.dummyString(), t && e.specifiers.unshift(t);
  }
  return this.semicolon(), this.finishNode(e, "ImportDeclaration");
};
yr.parseImportSpecifiers = function() {
  var e = [];
  if (this.tok.type === T.star) {
    var t = this.startNode();
    this.next(), t.local = this.eatContextual("as") ? this.parseIdent() : this.dummyIdent(), e.push(this.finishNode(t, "ImportNamespaceSpecifier"));
  } else {
    var r = this.curIndent, i = this.curLineStart, n = this.nextLineStart;
    for (this.pushCx(), this.eat(T.braceL), this.curLineStart > n && (n = this.curLineStart); !this.closes(T.braceR, r + (this.curLineStart <= n ? 1 : 0), i); ) {
      var a = this.startNode();
      if (this.eat(T.star))
        a.local = this.eatContextual("as") ? this.parseIdent() : this.dummyIdent(), this.finishNode(a, "ImportNamespaceSpecifier");
      else {
        if (this.isContextual("from") || (a.imported = this.parseIdent(), ri(a.imported)))
          break;
        a.local = this.eatContextual("as") ? this.parseIdent() : a.imported, this.finishNode(a, "ImportSpecifier");
      }
      e.push(a), this.eat(T.comma);
    }
    this.eat(T.braceR), this.popCx();
  }
  return e;
};
yr.parseExportSpecifierList = function() {
  var e = [], t = this.curIndent, r = this.curLineStart, i = this.nextLineStart;
  for (this.pushCx(), this.eat(T.braceL), this.curLineStart > i && (i = this.curLineStart); !this.closes(T.braceR, t + (this.curLineStart <= i ? 1 : 0), r) && !this.isContextual("from"); ) {
    var n = this.startNode();
    if (n.local = this.parseIdent(), ri(n.local))
      break;
    n.exported = this.eatContextual("as") ? this.parseIdent() : n.local, this.finishNode(n, "ExportSpecifier"), e.push(n), this.eat(T.comma);
  }
  return this.eat(T.braceR), this.popCx(), e;
};
var nt = Ke.prototype;
nt.checkLVal = function(e) {
  if (!e)
    return e;
  switch (e.type) {
    case "Identifier":
    case "MemberExpression":
      return e;
    case "ParenthesizedExpression":
      return e.expression = this.checkLVal(e.expression), e;
    default:
      return this.dummyIdent();
  }
};
nt.parseExpression = function(e) {
  var t = this.storeCurrentPos(), r = this.parseMaybeAssign(e);
  if (this.tok.type === T.comma) {
    var i = this.startNodeAt(t);
    for (i.expressions = [r]; this.eat(T.comma); )
      i.expressions.push(this.parseMaybeAssign(e));
    return this.finishNode(i, "SequenceExpression");
  }
  return r;
};
nt.parseParenExpression = function() {
  this.pushCx(), this.expect(T.parenL);
  var e = this.parseExpression();
  return this.popCx(), this.expect(T.parenR), e;
};
nt.parseMaybeAssign = function(e) {
  if (this.toks.isContextual("yield")) {
    var t = this.startNode();
    return this.next(), this.semicolon() || this.canInsertSemicolon() || this.tok.type !== T.star && !this.tok.type.startsExpr ? (t.delegate = !1, t.argument = null) : (t.delegate = this.eat(T.star), t.argument = this.parseMaybeAssign()), this.finishNode(t, "YieldExpression");
  }
  var r = this.storeCurrentPos(), i = this.parseMaybeConditional(e);
  if (this.tok.type.isAssign) {
    var n = this.startNodeAt(r);
    return n.operator = this.tok.value, n.left = this.tok.type === T.eq ? this.toAssignable(i) : this.checkLVal(i), this.next(), n.right = this.parseMaybeAssign(e), this.finishNode(n, "AssignmentExpression");
  }
  return i;
};
nt.parseMaybeConditional = function(e) {
  var t = this.storeCurrentPos(), r = this.parseExprOps(e);
  if (this.eat(T.question)) {
    var i = this.startNodeAt(t);
    return i.test = r, i.consequent = this.parseMaybeAssign(), i.alternate = this.expect(T.colon) ? this.parseMaybeAssign(e) : this.dummyIdent(), this.finishNode(i, "ConditionalExpression");
  }
  return r;
};
nt.parseExprOps = function(e) {
  var t = this.storeCurrentPos(), r = this.curIndent, i = this.curLineStart;
  return this.parseExprOp(this.parseMaybeUnary(!1), t, -1, e, r, i);
};
nt.parseExprOp = function(e, t, r, i, n, a) {
  if (this.curLineStart !== a && this.curIndent < n && this.tokenStartsLine())
    return e;
  var s = this.tok.type.binop;
  if (s != null && (!i || this.tok.type !== T._in) && s > r) {
    var o = this.startNodeAt(t);
    if (o.left = e, o.operator = this.tok.value, this.next(), this.curLineStart !== a && this.curIndent < n && this.tokenStartsLine())
      o.right = this.dummyIdent();
    else {
      var l = this.storeCurrentPos();
      o.right = this.parseExprOp(this.parseMaybeUnary(!1), l, s, i, n, a);
    }
    return this.finishNode(o, /&&|\|\|/.test(o.operator) ? "LogicalExpression" : "BinaryExpression"), this.parseExprOp(o, t, r, i, n, a);
  }
  return e;
};
nt.parseMaybeUnary = function(e) {
  var t = this.storeCurrentPos(), r;
  if (this.options.ecmaVersion >= 8 && this.toks.isContextual("await") && (this.inAsync || !this.inFunction && this.options.allowAwaitOutsideFunction))
    r = this.parseAwait(), e = !0;
  else if (this.tok.type.prefix) {
    var i = this.startNode(), n = this.tok.type === T.incDec;
    n || (e = !0), i.operator = this.tok.value, i.prefix = !0, this.next(), i.argument = this.parseMaybeUnary(!0), n && (i.argument = this.checkLVal(i.argument)), r = this.finishNode(i, n ? "UpdateExpression" : "UnaryExpression");
  } else if (this.tok.type === T.ellipsis) {
    var a = this.startNode();
    this.next(), a.argument = this.parseMaybeUnary(e), r = this.finishNode(a, "SpreadElement");
  } else
    for (r = this.parseExprSubscripts(); this.tok.type.postfix && !this.canInsertSemicolon(); ) {
      var s = this.startNodeAt(t);
      s.operator = this.tok.value, s.prefix = !1, s.argument = this.checkLVal(r), this.next(), r = this.finishNode(s, "UpdateExpression");
    }
  if (!e && this.eat(T.starstar)) {
    var o = this.startNodeAt(t);
    return o.operator = "**", o.left = r, o.right = this.parseMaybeUnary(!1), this.finishNode(o, "BinaryExpression");
  }
  return r;
};
nt.parseExprSubscripts = function() {
  var e = this.storeCurrentPos();
  return this.parseSubscripts(this.parseExprAtom(), e, !1, this.curIndent, this.curLineStart);
};
nt.parseSubscripts = function(e, t, r, i, n) {
  for (; ; ) {
    if (this.curLineStart !== n && this.curIndent <= i && this.tokenStartsLine())
      if (this.tok.type === T.dot && this.curIndent === i)
        --i;
      else
        return e;
    var a = e.type === "Identifier" && e.name === "async" && !this.canInsertSemicolon();
    if (this.eat(T.dot)) {
      var s = this.startNodeAt(t);
      s.object = e, this.curLineStart !== n && this.curIndent <= i && this.tokenStartsLine() ? s.property = this.dummyIdent() : s.property = this.parsePropertyAccessor() || this.dummyIdent(), s.computed = !1, e = this.finishNode(s, "MemberExpression");
    } else if (this.tok.type === T.bracketL) {
      this.pushCx(), this.next();
      var o = this.startNodeAt(t);
      o.object = e, o.property = this.parseExpression(), o.computed = !0, this.popCx(), this.expect(T.bracketR), e = this.finishNode(o, "MemberExpression");
    } else if (!r && this.tok.type === T.parenL) {
      var l = this.parseExprList(T.parenR);
      if (a && this.eat(T.arrow))
        return this.parseArrowExpression(this.startNodeAt(t), l, !0);
      var c = this.startNodeAt(t);
      c.callee = e, c.arguments = l, e = this.finishNode(c, "CallExpression");
    } else if (this.tok.type === T.backQuote) {
      var f = this.startNodeAt(t);
      f.tag = e, f.quasi = this.parseTemplate(), e = this.finishNode(f, "TaggedTemplateExpression");
    } else
      return e;
  }
};
nt.parseExprAtom = function() {
  var e;
  switch (this.tok.type) {
    case T._this:
    case T._super:
      var t = this.tok.type === T._this ? "ThisExpression" : "Super";
      return e = this.startNode(), this.next(), this.finishNode(e, t);
    case T.name:
      var r = this.storeCurrentPos(), i = this.parseIdent(), n = !1;
      if (i.name === "async" && !this.canInsertSemicolon()) {
        if (this.eat(T._function))
          return this.parseFunction(this.startNodeAt(r), !1, !0);
        this.tok.type === T.name && (i = this.parseIdent(), n = !0);
      }
      return this.eat(T.arrow) ? this.parseArrowExpression(this.startNodeAt(r), [i], n) : i;
    case T.regexp:
      e = this.startNode();
      var a = this.tok.value;
      return e.regex = { pattern: a.pattern, flags: a.flags }, e.value = a.value, e.raw = this.input.slice(this.tok.start, this.tok.end), this.next(), this.finishNode(e, "Literal");
    case T.num:
    case T.string:
      return e = this.startNode(), e.value = this.tok.value, e.raw = this.input.slice(this.tok.start, this.tok.end), this.tok.type === T.num && e.raw.charCodeAt(e.raw.length - 1) === 110 && (e.bigint = e.raw.slice(0, -1)), this.next(), this.finishNode(e, "Literal");
    case T._null:
    case T._true:
    case T._false:
      return e = this.startNode(), e.value = this.tok.type === T._null ? null : this.tok.type === T._true, e.raw = this.tok.type.keyword, this.next(), this.finishNode(e, "Literal");
    case T.parenL:
      var s = this.storeCurrentPos();
      this.next();
      var o = this.parseExpression();
      if (this.expect(T.parenR), this.eat(T.arrow)) {
        var l = o.expressions || [o];
        return l.length && ri(l[l.length - 1]) && l.pop(), this.parseArrowExpression(this.startNodeAt(s), l);
      }
      if (this.options.preserveParens) {
        var c = this.startNodeAt(s);
        c.expression = o, o = this.finishNode(c, "ParenthesizedExpression");
      }
      return o;
    case T.bracketL:
      return e = this.startNode(), e.elements = this.parseExprList(T.bracketR, !0), this.finishNode(e, "ArrayExpression");
    case T.braceL:
      return this.parseObj();
    case T._class:
      return this.parseClass(!1);
    case T._function:
      return e = this.startNode(), this.next(), this.parseFunction(e, !1);
    case T._new:
      return this.parseNew();
    case T.backQuote:
      return this.parseTemplate();
    case T._import:
      return this.options.ecmaVersion > 10 ? this.parseDynamicImport() : this.dummyIdent();
    default:
      return this.dummyIdent();
  }
};
nt.parseDynamicImport = function() {
  var e = this.startNode();
  return this.next(), this.finishNode(e, "Import");
};
nt.parseNew = function() {
  var e = this.startNode(), t = this.curIndent, r = this.curLineStart, i = this.parseIdent(!0);
  if (this.options.ecmaVersion >= 6 && this.eat(T.dot))
    return e.meta = i, e.property = this.parseIdent(!0), this.finishNode(e, "MetaProperty");
  var n = this.storeCurrentPos();
  return e.callee = this.parseSubscripts(this.parseExprAtom(), n, !0, t, r), this.tok.type === T.parenL ? e.arguments = this.parseExprList(T.parenR) : e.arguments = [], this.finishNode(e, "NewExpression");
};
nt.parseTemplateElement = function() {
  var e = this.startNode();
  return this.tok.type === T.invalidTemplate ? e.value = {
    raw: this.tok.value,
    cooked: null
  } : e.value = {
    raw: this.input.slice(this.tok.start, this.tok.end).replace(/\r\n?/g, `
`),
    cooked: this.tok.value
  }, this.next(), e.tail = this.tok.type === T.backQuote, this.finishNode(e, "TemplateElement");
};
nt.parseTemplate = function() {
  var e = this.startNode();
  this.next(), e.expressions = [];
  var t = this.parseTemplateElement();
  for (e.quasis = [t]; !t.tail; )
    this.next(), e.expressions.push(this.parseExpression()), this.expect(T.braceR) ? t = this.parseTemplateElement() : (t = this.startNode(), t.value = { cooked: "", raw: "" }, t.tail = !0, this.finishNode(t, "TemplateElement")), e.quasis.push(t);
  return this.expect(T.backQuote), this.finishNode(e, "TemplateLiteral");
};
nt.parseObj = function() {
  var e = this.startNode();
  e.properties = [], this.pushCx();
  var t = this.curIndent + 1, r = this.curLineStart;
  for (this.eat(T.braceL), this.curIndent + 1 < t && (t = this.curIndent, r = this.curLineStart); !this.closes(T.braceR, t, r); ) {
    var i = this.startNode(), n = void 0, a = void 0, s = void 0;
    if (this.options.ecmaVersion >= 9 && this.eat(T.ellipsis)) {
      i.argument = this.parseMaybeAssign(), e.properties.push(this.finishNode(i, "SpreadElement")), this.eat(T.comma);
      continue;
    }
    if (this.options.ecmaVersion >= 6 && (s = this.storeCurrentPos(), i.method = !1, i.shorthand = !1, n = this.eat(T.star)), this.parsePropertyName(i), this.toks.isAsyncProp(i) ? (a = !0, n = this.options.ecmaVersion >= 9 && this.eat(T.star), this.parsePropertyName(i)) : a = !1, ri(i.key)) {
      ri(this.parseMaybeAssign()) && this.next(), this.eat(T.comma);
      continue;
    }
    if (this.eat(T.colon))
      i.kind = "init", i.value = this.parseMaybeAssign();
    else if (this.options.ecmaVersion >= 6 && (this.tok.type === T.parenL || this.tok.type === T.braceL))
      i.kind = "init", i.method = !0, i.value = this.parseMethod(n, a);
    else if (this.options.ecmaVersion >= 5 && i.key.type === "Identifier" && !i.computed && (i.key.name === "get" || i.key.name === "set") && this.tok.type !== T.comma && this.tok.type !== T.braceR && this.tok.type !== T.eq)
      i.kind = i.key.name, this.parsePropertyName(i), i.value = this.parseMethod(!1);
    else {
      if (i.kind = "init", this.options.ecmaVersion >= 6)
        if (this.eat(T.eq)) {
          var o = this.startNodeAt(s);
          o.operator = "=", o.left = i.key, o.right = this.parseMaybeAssign(), i.value = this.finishNode(o, "AssignmentExpression");
        } else
          i.value = i.key;
      else
        i.value = this.dummyIdent();
      i.shorthand = !0;
    }
    e.properties.push(this.finishNode(i, "Property")), this.eat(T.comma);
  }
  return this.popCx(), this.eat(T.braceR) || (this.last.end = this.tok.start, this.options.locations && (this.last.loc.end = this.tok.loc.start)), this.finishNode(e, "ObjectExpression");
};
nt.parsePropertyName = function(e) {
  if (this.options.ecmaVersion >= 6)
    if (this.eat(T.bracketL)) {
      e.computed = !0, e.key = this.parseExpression(), this.expect(T.bracketR);
      return;
    } else
      e.computed = !1;
  var t = this.tok.type === T.num || this.tok.type === T.string ? this.parseExprAtom() : this.parseIdent();
  e.key = t || this.dummyIdent();
};
nt.parsePropertyAccessor = function() {
  if (this.tok.type === T.name || this.tok.type.keyword)
    return this.parseIdent();
};
nt.parseIdent = function() {
  var e = this.tok.type === T.name ? this.tok.value : this.tok.type.keyword;
  if (!e)
    return this.dummyIdent();
  var t = this.startNode();
  return this.next(), t.name = e, this.finishNode(t, "Identifier");
};
nt.initFunction = function(e) {
  e.id = null, e.params = [], this.options.ecmaVersion >= 6 && (e.generator = !1, e.expression = !1), this.options.ecmaVersion >= 8 && (e.async = !1);
};
nt.toAssignable = function(e, t) {
  if (!(!e || e.type === "Identifier" || e.type === "MemberExpression" && !t))
    if (e.type === "ParenthesizedExpression")
      this.toAssignable(e.expression, t);
    else {
      if (this.options.ecmaVersion < 6)
        return this.dummyIdent();
      if (e.type === "ObjectExpression") {
        e.type = "ObjectPattern";
        for (var r = 0, i = e.properties; r < i.length; r += 1) {
          var n = i[r];
          this.toAssignable(n, t);
        }
      } else if (e.type === "ArrayExpression")
        e.type = "ArrayPattern", this.toAssignableList(e.elements, t);
      else if (e.type === "Property")
        this.toAssignable(e.value, t);
      else if (e.type === "SpreadElement")
        e.type = "RestElement", this.toAssignable(e.argument, t);
      else if (e.type === "AssignmentExpression")
        e.type = "AssignmentPattern", delete e.operator;
      else
        return this.dummyIdent();
    }
  return e;
};
nt.toAssignableList = function(e, t) {
  for (var r = 0, i = e; r < i.length; r += 1) {
    var n = i[r];
    this.toAssignable(n, t);
  }
  return e;
};
nt.parseFunctionParams = function(e) {
  return e = this.parseExprList(T.parenR), this.toAssignableList(e, !0);
};
nt.parseMethod = function(e, t) {
  var r = this.startNode(), i = this.inAsync, n = this.inFunction;
  return this.initFunction(r), this.options.ecmaVersion >= 6 && (r.generator = !!e), this.options.ecmaVersion >= 8 && (r.async = !!t), this.inAsync = r.async, this.inFunction = !0, r.params = this.parseFunctionParams(), r.body = this.parseBlock(), this.toks.adaptDirectivePrologue(r.body.body), this.inAsync = i, this.inFunction = n, this.finishNode(r, "FunctionExpression");
};
nt.parseArrowExpression = function(e, t, r) {
  var i = this.inAsync, n = this.inFunction;
  return this.initFunction(e), this.options.ecmaVersion >= 8 && (e.async = !!r), this.inAsync = e.async, this.inFunction = !0, e.params = this.toAssignableList(t, !0), e.expression = this.tok.type !== T.braceL, e.expression ? e.body = this.parseMaybeAssign() : (e.body = this.parseBlock(), this.toks.adaptDirectivePrologue(e.body.body)), this.inAsync = i, this.inFunction = n, this.finishNode(e, "ArrowFunctionExpression");
};
nt.parseExprList = function(e, t) {
  this.pushCx();
  var r = this.curIndent, i = this.curLineStart, n = [];
  for (this.next(); !this.closes(e, r + 1, i); ) {
    if (this.eat(T.comma)) {
      n.push(t ? null : this.dummyIdent());
      continue;
    }
    var a = this.parseMaybeAssign();
    if (ri(a)) {
      if (this.closes(e, r, i))
        break;
      this.next();
    } else
      n.push(a);
    this.eat(T.comma);
  }
  return this.popCx(), this.eat(e) || (this.last.end = this.tok.start, this.options.locations && (this.last.loc.end = this.tok.loc.start)), n;
};
nt.parseAwait = function() {
  var e = this.startNode();
  return this.next(), e.argument = this.parseMaybeUnary(), this.finishNode(e, "AwaitExpression");
};
Ds.tabSize = 4;
function lP(e, t) {
  return Ke.parse(e, t);
}
const uP = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  LooseParser: Ke,
  parse: lP
}, Symbol.toStringTag, { value: "Module" })), cP = /* @__PURE__ */ du(uP);
function fP(e, t, r, i, n) {
  r || (r = le), function a(s, o, l) {
    var c = l || s.type, f = t[c];
    r[c](s, o, a), f && f(s, o);
  }(e, i, n);
}
function hP(e, t, r, i) {
  var n = [];
  r || (r = le), function a(s, o, l) {
    var c = l || s.type, f = t[c], p = s !== n[n.length - 1];
    p && n.push(s), r[c](s, o, a), f && f(s, o || n, n), p && n.pop();
  }(e, i);
}
function pP(e, t, r, i, n) {
  var a = r ? Rd(r, i || void 0) : i;
  (function s(o, l, c) {
    a[c || o.type](o, l, s);
  })(e, t, n);
}
function uo(e) {
  return typeof e == "string" ? function(t) {
    return t === e;
  } : e || function() {
    return !0;
  };
}
var Xi = function(t, r) {
  this.node = t, this.state = r;
};
function OP(e, t, r, i, n) {
  r || (r = le), function a(s, o, l) {
    var c = l || s.type;
    r[c](s, o, a), l || t(s, o, c);
  }(e, i, n);
}
function EP(e, t, r, i) {
  r || (r = le);
  var n = [];
  (function a(s, o, l) {
    var c = l || s.type, f = s !== n[n.length - 1];
    f && n.push(s), r[c](s, o, a), l || t(s, o || n, n, c), f && n.pop();
  })(e, i);
}
function dP(e, t, r, i, n, a) {
  n || (n = le), i = uo(i);
  try {
    (function s(o, l, c) {
      var f = c || o.type;
      if ((t == null || o.start <= t) && (r == null || o.end >= r) && n[f](o, l, s), (t == null || o.start === t) && (r == null || o.end === r) && i(f, o))
        throw new Xi(o, l);
    })(e, a);
  } catch (s) {
    if (s instanceof Xi)
      return s;
    throw s;
  }
}
function TP(e, t, r, i, n) {
  r = uo(r), i || (i = le);
  try {
    (function a(s, o, l) {
      var c = l || s.type;
      if (!(s.start > t || s.end < t) && (i[c](s, o, a), r(c, s)))
        throw new Xi(s, o);
    })(e, n);
  } catch (a) {
    if (a instanceof Xi)
      return a;
    throw a;
  }
}
function SP(e, t, r, i, n) {
  r = uo(r), i || (i = le);
  try {
    (function a(s, o, l) {
      if (!(s.end < t)) {
        var c = l || s.type;
        if (s.start >= t && r(c, s))
          throw new Xi(s, o);
        i[c](s, o, a);
      }
    })(e, n);
  } catch (a) {
    if (a instanceof Xi)
      return a;
    throw a;
  }
}
function mP(e, t, r, i, n) {
  r = uo(r), i || (i = le);
  var a;
  return function s(o, l, c) {
    if (!(o.start > t)) {
      var f = c || o.type;
      o.end <= t && (!a || a.node.end < o.end) && r(f, o) && (a = new Xi(o, l)), i[f](o, l, s);
    }
  }(e, n), a;
}
var RP = Object.create || function(e) {
  function t() {
  }
  return t.prototype = e, new t();
};
function Rd(e, t) {
  var r = RP(t || le);
  for (var i in e)
    r[i] = e[i];
  return r;
}
function Ac(e, t, r) {
  r(e, t);
}
function zi(e, t, r) {
}
var le = {};
le.Program = le.BlockStatement = function(e, t, r) {
  for (var i = 0, n = e.body; i < n.length; i += 1) {
    var a = n[i];
    r(a, t, "Statement");
  }
};
le.Statement = Ac;
le.EmptyStatement = zi;
le.ExpressionStatement = le.ParenthesizedExpression = function(e, t, r) {
  return r(e.expression, t, "Expression");
};
le.IfStatement = function(e, t, r) {
  r(e.test, t, "Expression"), r(e.consequent, t, "Statement"), e.alternate && r(e.alternate, t, "Statement");
};
le.LabeledStatement = function(e, t, r) {
  return r(e.body, t, "Statement");
};
le.BreakStatement = le.ContinueStatement = zi;
le.WithStatement = function(e, t, r) {
  r(e.object, t, "Expression"), r(e.body, t, "Statement");
};
le.SwitchStatement = function(e, t, r) {
  r(e.discriminant, t, "Expression");
  for (var i = 0, n = e.cases; i < n.length; i += 1) {
    var a = n[i];
    a.test && r(a.test, t, "Expression");
    for (var s = 0, o = a.consequent; s < o.length; s += 1) {
      var l = o[s];
      r(l, t, "Statement");
    }
  }
};
le.SwitchCase = function(e, t, r) {
  e.test && r(e.test, t, "Expression");
  for (var i = 0, n = e.consequent; i < n.length; i += 1) {
    var a = n[i];
    r(a, t, "Statement");
  }
};
le.ReturnStatement = le.YieldExpression = le.AwaitExpression = function(e, t, r) {
  e.argument && r(e.argument, t, "Expression");
};
le.ThrowStatement = le.SpreadElement = function(e, t, r) {
  return r(e.argument, t, "Expression");
};
le.TryStatement = function(e, t, r) {
  r(e.block, t, "Statement"), e.handler && r(e.handler, t), e.finalizer && r(e.finalizer, t, "Statement");
};
le.CatchClause = function(e, t, r) {
  e.param && r(e.param, t, "Pattern"), r(e.body, t, "Statement");
};
le.WhileStatement = le.DoWhileStatement = function(e, t, r) {
  r(e.test, t, "Expression"), r(e.body, t, "Statement");
};
le.ForStatement = function(e, t, r) {
  e.init && r(e.init, t, "ForInit"), e.test && r(e.test, t, "Expression"), e.update && r(e.update, t, "Expression"), r(e.body, t, "Statement");
};
le.ForInStatement = le.ForOfStatement = function(e, t, r) {
  r(e.left, t, "ForInit"), r(e.right, t, "Expression"), r(e.body, t, "Statement");
};
le.ForInit = function(e, t, r) {
  e.type === "VariableDeclaration" ? r(e, t) : r(e, t, "Expression");
};
le.DebuggerStatement = zi;
le.FunctionDeclaration = function(e, t, r) {
  return r(e, t, "Function");
};
le.VariableDeclaration = function(e, t, r) {
  for (var i = 0, n = e.declarations; i < n.length; i += 1) {
    var a = n[i];
    r(a, t);
  }
};
le.VariableDeclarator = function(e, t, r) {
  r(e.id, t, "Pattern"), e.init && r(e.init, t, "Expression");
};
le.Function = function(e, t, r) {
  e.id && r(e.id, t, "Pattern");
  for (var i = 0, n = e.params; i < n.length; i += 1) {
    var a = n[i];
    r(a, t, "Pattern");
  }
  r(e.body, t, e.expression ? "Expression" : "Statement");
};
le.Pattern = function(e, t, r) {
  e.type === "Identifier" ? r(e, t, "VariablePattern") : e.type === "MemberExpression" ? r(e, t, "MemberPattern") : r(e, t);
};
le.VariablePattern = zi;
le.MemberPattern = Ac;
le.RestElement = function(e, t, r) {
  return r(e.argument, t, "Pattern");
};
le.ArrayPattern = function(e, t, r) {
  for (var i = 0, n = e.elements; i < n.length; i += 1) {
    var a = n[i];
    a && r(a, t, "Pattern");
  }
};
le.ObjectPattern = function(e, t, r) {
  for (var i = 0, n = e.properties; i < n.length; i += 1) {
    var a = n[i];
    a.type === "Property" ? (a.computed && r(a.key, t, "Expression"), r(a.value, t, "Pattern")) : a.type === "RestElement" && r(a.argument, t, "Pattern");
  }
};
le.Expression = Ac;
le.ThisExpression = le.Super = le.MetaProperty = zi;
le.ArrayExpression = function(e, t, r) {
  for (var i = 0, n = e.elements; i < n.length; i += 1) {
    var a = n[i];
    a && r(a, t, "Expression");
  }
};
le.ObjectExpression = function(e, t, r) {
  for (var i = 0, n = e.properties; i < n.length; i += 1) {
    var a = n[i];
    r(a, t);
  }
};
le.FunctionExpression = le.ArrowFunctionExpression = le.FunctionDeclaration;
le.SequenceExpression = function(e, t, r) {
  for (var i = 0, n = e.expressions; i < n.length; i += 1) {
    var a = n[i];
    r(a, t, "Expression");
  }
};
le.TemplateLiteral = function(e, t, r) {
  for (var i = 0, n = e.quasis; i < n.length; i += 1) {
    var a = n[i];
    r(a, t);
  }
  for (var s = 0, o = e.expressions; s < o.length; s += 1) {
    var l = o[s];
    r(l, t, "Expression");
  }
};
le.TemplateElement = zi;
le.UnaryExpression = le.UpdateExpression = function(e, t, r) {
  r(e.argument, t, "Expression");
};
le.BinaryExpression = le.LogicalExpression = function(e, t, r) {
  r(e.left, t, "Expression"), r(e.right, t, "Expression");
};
le.AssignmentExpression = le.AssignmentPattern = function(e, t, r) {
  r(e.left, t, "Pattern"), r(e.right, t, "Expression");
};
le.ConditionalExpression = function(e, t, r) {
  r(e.test, t, "Expression"), r(e.consequent, t, "Expression"), r(e.alternate, t, "Expression");
};
le.NewExpression = le.CallExpression = function(e, t, r) {
  if (r(e.callee, t, "Expression"), e.arguments)
    for (var i = 0, n = e.arguments; i < n.length; i += 1) {
      var a = n[i];
      r(a, t, "Expression");
    }
};
le.MemberExpression = function(e, t, r) {
  r(e.object, t, "Expression"), e.computed && r(e.property, t, "Expression");
};
le.ExportNamedDeclaration = le.ExportDefaultDeclaration = function(e, t, r) {
  e.declaration && r(e.declaration, t, e.type === "ExportNamedDeclaration" || e.declaration.id ? "Statement" : "Expression"), e.source && r(e.source, t, "Expression");
};
le.ExportAllDeclaration = function(e, t, r) {
  r(e.source, t, "Expression");
};
le.ImportDeclaration = function(e, t, r) {
  for (var i = 0, n = e.specifiers; i < n.length; i += 1) {
    var a = n[i];
    r(a, t);
  }
  r(e.source, t, "Expression");
};
le.ImportSpecifier = le.ImportDefaultSpecifier = le.ImportNamespaceSpecifier = le.Identifier = le.Literal = le.Import = zi;
le.TaggedTemplateExpression = function(e, t, r) {
  r(e.tag, t, "Expression"), r(e.quasi, t, "Expression");
};
le.ClassDeclaration = le.ClassExpression = function(e, t, r) {
  return r(e, t, "Class");
};
le.Class = function(e, t, r) {
  e.id && r(e.id, t, "Pattern"), e.superClass && r(e.superClass, t, "Expression"), r(e.body, t);
};
le.ClassBody = function(e, t, r) {
  for (var i = 0, n = e.body; i < n.length; i += 1) {
    var a = n[i];
    r(a, t);
  }
};
le.MethodDefinition = le.Property = function(e, t, r) {
  e.computed && r(e.key, t, "Expression"), r(e.value, t, "Expression");
};
const AP = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  ancestor: hP,
  base: le,
  findNodeAfter: SP,
  findNodeAround: TP,
  findNodeAt: dP,
  findNodeBefore: mP,
  full: OP,
  fullAncestor: EP,
  make: Rd,
  recursive: pP,
  simple: fP
}, Symbol.toStringTag, { value: "Module" })), Ad = /* @__PURE__ */ du(AP);
var $a = { exports: {} }, Sh;
function gP() {
  return Sh || (Sh = 1, function(e, t) {
    (function(r) {
      return t.init = r;
    })(function(r, i) {
      function n(R, A) {
        return Object.prototype.hasOwnProperty.call(R, A);
      }
      var a = r.TypeParser = function(R, A, y, C) {
        this.pos = A || 0, this.spec = R, this.base = y, this.forceNew = C;
      };
      function s(R, A, y) {
        return R.call ? R(A, y) : R;
      }
      function o(R, A) {
        if (A == "!ret") {
          if (R.retval)
            return R.retval;
          var y = new i.AVal();
          return R.propagate(new i.IsCallee(i.ANull, [], null, y)), y;
        } else
          return R.getProp(A);
      }
      function l(R, A, y, C) {
        return function(j, w) {
          for (var J = [], te = 0; te < A.length; te++)
            J.push(s(A[te], j, w));
          return new i.Fn(R, i.ANull, J, s(y, j, w), C);
        };
      }
      function c(R) {
        return function(A, y) {
          for (var C = new i.AVal(), j = 0; j < R.length; j++)
            s(R[j], A, y).propagate(C);
          return C.maxWeight = 1e5, C;
        };
      }
      function f(R) {
        return function(A, y) {
          return new i.Arr(R(A, y));
        };
      }
      function p(R) {
        return function(A, y) {
          return new i.Arr(R.map(function(C) {
            return s(C, A, y);
          }));
        };
      }
      function O(R, A) {
        return function(y, C) {
          var j = new i.Obj();
          return R.forEach(function(w, J) {
            j.defProp(w).addType(s(A[J], y, C));
          }), j;
        };
      }
      a.prototype = {
        eat: function(R) {
          if (R.length == 1 ? this.spec.charAt(this.pos) == R : this.spec.indexOf(R, this.pos) == this.pos)
            return this.pos += R.length, !0;
        },
        word: function(C) {
          for (var A = "", y, C = C || /[\w$]/; (y = this.spec.charAt(this.pos)) && C.test(y); )
            A += y, ++this.pos;
          return A;
        },
        error: function() {
          throw new Error("Unrecognized type spec: " + this.spec + " (at " + this.pos + ")");
        },
        parseFnType: function(R, A, y, C) {
          var j = [], w = [], J = !1;
          if (!this.eat(")"))
            for (var te = 0; ; ++te) {
              var se = this.spec.indexOf(": ", this.pos), ge;
              se != -1 && (ge = this.spec.slice(this.pos, se), /^(\.\.\.)?[$\w?]+$/.test(ge) ? this.pos = se + 2 : ge = null), w.push(ge);
              var fe = this.parseType(R);
              if (fe.call && (J = !0), j.push(fe), !this.eat(", ")) {
                this.eat(")") || this.error();
                break;
              }
            }
          var et, yt, De, Ce;
          if (this.eat(" -> ")) {
            var Ee = this.pos;
            et = this.parseType(!0), et.call && !J && (yt = et, et = i.ANull, De = Ee);
          } else
            et = i.ANull;
          return J ? l(A, j, et, C) : (y && (Ce = this.base) ? i.Fn.call(this.base, A, i.ANull, j, w, et, C) : Ce = new i.Fn(A, i.ANull, j, w, et, C), yt && (Ce.computeRet = yt), De != null && (Ce.computeRetSource = this.spec.slice(De, this.pos)), Ce);
        },
        parseType: function(R, A, y) {
          var C = this.parseTypeMaybeProp(R, A, y);
          if (!this.eat("|"))
            return C;
          for (var j = [C], w = C.call; ; ) {
            var J = this.parseTypeMaybeProp(R, A, y);
            if (j.push(J), J.call && (w = !0), !this.eat("|"))
              break;
          }
          if (w)
            return c(j);
          for (var te = new i.AVal(), se = 0; se < j.length; se++)
            j[se].propagate(te);
          return te.maxWeight = 1e5, te;
        },
        parseTypeMaybeProp: function(R, A, y) {
          for (var C = this.parseTypeInner(R, A, y); R && this.eat("."); )
            C = this.extendWithProp(C);
          return C;
        },
        extendWithProp: function(R) {
          var A = this.word(/[\w<>$!:]/) || this.error();
          return R.apply ? function(y, C) {
            return o(R(y, C), A);
          } : o(R, A);
        },
        parseTypeInner: function(R, A, y) {
          var C;
          if (this.eat("fn(") || (C = this.eat("fn*(")))
            return this.parseFnType(R, A, y, C);
          if (this.eat("[")) {
            for (var j = this.parseType(R), w, J = j.call; this.eat(", "); ) {
              w || (w = [j]);
              var te = this.parseType(R);
              w.push(te), J = J || te.call;
            }
            return this.eat("]") || this.error(), J ? w ? p(w) : f(j) : y && this.base ? (i.Arr.call(this.base, w || j), this.base) : new i.Arr(w || j);
          } else if (this.eat("{")) {
            var w = [], se = [], J = !1;
            if (!this.eat("}"))
              for (var ge = 0; ; ++ge) {
                var fe = this.spec.indexOf(": ", this.pos), et;
                fe != -1 && (et = this.spec.slice(this.pos, fe), /^[$\w?]+$/.test(et) ? this.pos = fe + 2 : et = null);
                var yt = this.parseType(R);
                if (yt.call && (J = !0), se.push(et), w.push(yt), !this.eat(", ")) {
                  this.eat("}") || this.error();
                  break;
                }
              }
            if (J)
              return O(se, w);
            var De = new i.Obj();
            return se.forEach(function(It, tt) {
              De.defProp(It).addType(w[tt]);
            }), De;
          } else if (this.eat("+")) {
            var Ce = this.word(/[\w$<>\.:!]/), Ee = i.cx().localDefs[Ce + ".prototype"];
            if (!Ee) {
              var Ee = V(Ce);
              if (!(Ee instanceof i.Obj))
                return Ee;
              var ut = _(Ee, ["prototype"]);
              ut && (ut = ut.getObjType()) && (Ee = ut);
            }
            if (R && this.eat("["))
              return this.parsePoly(Ee);
            if (y && this.base) {
              this.base.proto = Ee;
              var A = Ee.hasCtor && Ee.hasCtor.name || Ee.name;
              return A && (this.base.name = A), this.base;
            }
            return y && this.forceNew ? new i.Obj(Ee) : i.getInstance(Ee);
          } else if (this.eat(":")) {
            var A = this.word(/[\w$\.]/);
            return i.getSymbol(A);
          } else if (R && this.eat("!")) {
            var Je = this.word(/\d/);
            if (Je)
              return Je = Number(Je), function(ot, $t) {
                return $t[Je] || i.ANull;
              };
            if (this.eat("this"))
              return function(ot) {
                return ot;
              };
            if (this.eat("custom:")) {
              var q = this.word(/[\w$]/);
              return H[q] || function() {
                return i.ANull;
              };
            } else
              return this.fromWord("!" + this.word(/[\w$<>\.!:]/));
          } else
            return this.eat("?") ? i.ANull : this.fromWord(this.word(/[\w$<>\.!:`]/));
        },
        fromWord: function(R) {
          var A = i.cx();
          switch (R) {
            case "number":
              return A.num;
            case "string":
              return A.str;
            case "bool":
              return A.bool;
            case "<top>":
              return A.topScope;
          }
          return A.localDefs && R in A.localDefs ? A.localDefs[R] : V(R);
        },
        parsePoly: function(R) {
          var A = "<i>", y;
          (y = this.spec.slice(this.pos).match(/^\s*([\w$:]+)\s*=\s*/)) && (A = y[1], this.pos += y[0].length);
          var C = this.parseType(!0);
          if (this.eat("]") || this.error(), C.call)
            return function(w, J) {
              var te = new i.Obj(R);
              return C(w, J).propagate(te.defProp(A)), te;
            };
          var j = new i.Obj(R);
          return C.propagate(j.defProp(A)), j;
        }
      };
      function d(R) {
        if (R instanceof i.Fn && R.args)
          for (var A = 0; A < R.args.length; ++A) {
            var y = R.args[A];
            y instanceof i.Fn && y.args && y.args.length && g(R, A);
          }
      }
      function g(R, A) {
        D(R, function(y, C) {
          C[A] && C[A].propagate(
            new i.IsCallee(i.cx().topScope, R.args[A].args, null, i.ANull)
          );
        });
      }
      function L(R, A, y, C) {
        var j = new a(R, null, y, C).parseType(!1, A, !0);
        return j instanceof i.AVal ? j.types.forEach(d) : d(j), j;
      }
      function D(R, A, y) {
        var C = R.computeRet, j = R.retval;
        R.computeRet = function(w, J, te) {
          var se = A(w, J, te), ge = C ? C(w, J, te) : j;
          return y ? se : ge;
        };
      }
      var W = r.parseEffect = function(R, A) {
        var y;
        if (R.indexOf("propagate ") == 0) {
          var C = new a(R, 10), j = C.parseType(!0);
          C.eat(" ") || C.error();
          var w = C.parseType(!0);
          D(A, function(De, Ce) {
            s(j, De, Ce).propagate(s(w, De, Ce));
          });
        } else if (R.indexOf("call ") == 0) {
          var J = R.indexOf("and return ", 5) == 5, C = new a(R, J ? 16 : 5), te = C.parseType(!0), se = null, ge = [];
          for (C.eat(" this=") && (se = C.parseType(!0)); C.eat(" "); )
            ge.push(C.parseType(!0));
          D(A, function(Ce, Ee) {
            for (var ut = s(te, Ce, Ee), Je = se ? s(se, Ce, Ee) : i.ANull, q = [], ot = 0; ot < ge.length; ++ot)
              q.push(s(ge[ot], Ce, Ee));
            var $t = J ? new i.AVal() : i.ANull;
            return ut.propagate(new i.IsCallee(Je, q, null, $t)), $t;
          }, J);
        } else if (y = R.match(/^custom (\S+)\s*(.*)/)) {
          var fe = H[y[1]];
          fe && D(A, y[2] ? fe(y[2]) : fe);
        } else if (R.indexOf("copy ") == 0) {
          var C = new a(R, 5), et = C.parseType(!0);
          C.eat(" ");
          var yt = C.parseType(!0);
          D(A, function(Ce, Ee) {
            var ut = s(et, Ce, Ee), Je = s(yt, Ce, Ee);
            ut.forAllProps(function(q, ot, $t) {
              $t && q != "<i>" && Je.propagate(new i.DefProp(q, ot));
            });
          });
        } else
          throw new Error("Unknown effect type: " + R);
      }, x, V = r.parsePath = function(R, A) {
        var y = i.cx(), C = y.paths[R], j = R;
        if (C != null)
          return C;
        y.paths[R] = i.ANull;
        var w = A || x || y.topScope;
        if (y.localDefs) {
          for (var J in y.localDefs)
            if (R.indexOf(J) == 0) {
              if (R == J)
                return y.paths[R] = y.localDefs[R];
              if (R.charAt(J.length) == ".") {
                w = y.localDefs[J], R = R.slice(J.length + 1);
                break;
              }
            }
        }
        var te = _(w, R.split("."));
        return y.paths[j] = te == i.ANull ? null : te, te;
      };
      function _(R, A) {
        for (var y = 0; y < A.length && R != i.ANull; ++y) {
          var C = A[y];
          if (C.charAt(0) == "!")
            if (C == "!proto")
              R = R instanceof i.Obj && R.proto || i.ANull;
            else {
              var j = R.getFunctionType();
              if (!j)
                R = i.ANull;
              else if (C == "!ret")
                R = j.retval && j.retval.getType(!1) || i.ANull;
              else {
                var w = j.args && j.args[Number(C.slice(1))];
                R = w && w.getType(!1) || i.ANull;
              }
            }
          else if (R instanceof i.Obj && (C == "prototype" && R instanceof i.Fn || R.hasProp(C))) {
            var J = R.getProp(C);
            !J || J.isEmpty() ? R = i.ANull : R = J.types[0];
          } else
            R = i.ANull;
        }
        return R;
      }
      function $(R) {
        var A = Object.create(R.prototype);
        return A.props = /* @__PURE__ */ Object.create(null), A.isShell = !0, A;
      }
      function z(R) {
        if (!R["!type"] || /^(fn\(|\[|\+)/.test(R["!type"]))
          return !1;
        for (var A in R)
          if (A != "!type" && A != "!doc" && A != "!url" && A != "!span" && A != "!data")
            return !1;
        return !0;
      }
      function F(R, A, y) {
        if (!R) {
          var C = A["!type"];
          if (C)
            if (/^fn\(/.test(C))
              R = $(i.Fn);
            else if (C.charAt(0) == "[")
              R = $(i.Arr);
            else if (C.charAt(0) == "+")
              R = $(i.Obj);
            else
              throw new Error("Invalid !type spec: " + C);
          else
            A["!stdProto"] ? R = i.cx().protos[A["!stdProto"]] : R = $(i.Obj);
          R.name = y;
        }
        for (var j in A)
          if (n(A, j) && j.charCodeAt(0) != 33) {
            var w = A[j];
            if (typeof w == "string" || z(w))
              continue;
            var J = R.defProp(j);
            F(J.getObjType(), w, y ? y + "." + j : j).propagate(J);
          }
        return R;
      }
      function ae(R, A, y) {
        if (R.isShell) {
          delete R.isShell;
          var C = A["!type"];
          if (C)
            L(C, y, R);
          else {
            var j = A["!proto"] && L(A["!proto"]);
            i.Obj.call(R, j instanceof i.Obj ? j : !0, y);
          }
        }
        var w = A["!effects"];
        if (w && R instanceof i.Fn)
          for (var J = 0; J < w.length; ++J)
            W(w[J], R);
        U(A, R);
        for (var te in A)
          if (n(A, te) && te.charCodeAt(0) != 33) {
            var se = A[te], ge = R.defProp(te), fe = y ? y + "." + te : te;
            if (typeof se == "string")
              ge.isEmpty() && L(se, fe).propagate(ge);
            else {
              if (!z(se))
                ae(ge.getObjType(), se, fe);
              else if (ge.isEmpty())
                L(se["!type"], fe, null, !0).propagate(ge);
              else
                continue;
              se["!doc"] && (ge.doc = se["!doc"]), se["!url"] && (ge.url = se["!url"]), se["!span"] && (ge.span = se["!span"]);
            }
          }
        return R;
      }
      function U(R, A) {
        R["!doc"] && (A.doc = R["!doc"]), R["!url"] && (A.url = R["!url"]), R["!span"] && (A.span = R["!span"]), R["!data"] && (A.metaData = R["!data"]);
      }
      function G(R, A) {
        var y = i.cx(), C = y.parent;
        i.addOrigin(y.curOrigin = R["!name"] || "env#" + y.origins.length), y.localDefs = y.definitions[y.curOrigin] = /* @__PURE__ */ Object.create(null), C && C.signal("preLoadDef", R), F(A, R);
        var j = R["!define"];
        if (j) {
          for (var w in j) {
            var J = j[w];
            y.localDefs[w] = typeof J == "string" ? V(J) : F(null, J, w);
          }
          for (var w in j) {
            var J = j[w];
            typeof J != "string" && ae(y.localDefs[w], j[w], w);
          }
        }
        ae(A, R), C && C.signal("postLoadDef", R), y.curOrigin = y.localDefs = null;
      }
      r.load = function(R, A) {
        A || (A = i.cx().topScope);
        var y = x;
        x = A;
        try {
          G(R, A);
        } finally {
          x = y;
        }
      }, r.parse = function(R, A, y) {
        var C = i.cx();
        A && (C.origin = A, C.localDefs = C.definitions[A]);
        try {
          return typeof R == "string" ? L(R, y) : ae(F(null, R, y), R, y);
        } finally {
          A && (C.origin = C.localDefs = null);
        }
      };
      var H = /* @__PURE__ */ Object.create(null);
      i.registerFunction = function(R, A) {
        H[R] = A;
      };
      var re = i.constraint({
        construct: function(R, A, y) {
          this.created = R, this.target = A, this.spec = y;
        },
        addType: function(R) {
          if (R instanceof i.Obj && this.created++ < 5) {
            var A = new i.Obj(R), y = this.spec;
            if (y instanceof i.AVal && (y = y.getObjType(!1)), y instanceof i.Obj)
              for (var C in y.props) {
                var j = y.props[C].types[0], w = A.defProp(C);
                if (j && j instanceof i.Obj && j.props.value) {
                  var J = j.props.value.getType(!1);
                  J && w.addType(J);
                }
              }
            this.target.addType(A);
          }
        }
      });
      i.registerFunction("Object_create", function(R, A, y) {
        if (y && y.length && y[0].type == "Literal" && y[0].value == null)
          return new i.Obj();
        var C = new i.AVal();
        return A[0] && A[0].propagate(new re(0, C, A[1])), C;
      });
      var B = i.constraint({
        construct: function(R) {
          this.target = R;
        },
        addType: function(R) {
          R instanceof i.Obj && (R.hasProp("value") ? R.getProp("value").propagate(this.target) : R.hasProp("get") && R.getProp("get").propagate(new i.IsCallee(i.ANull, [], null, this.target)));
        }
      });
      i.registerFunction("Object_defineProperty", function(R, A, y) {
        if (y && y.length >= 3 && y[1].type == "Literal" && typeof y[1].value == "string") {
          var C = A[0], j = new i.AVal();
          C.propagate(new i.DefProp(y[1].value, j, y[1])), A[2].propagate(new B(j));
        }
        return i.ANull;
      }), i.registerFunction("Object_defineProperties", function(R, A, y) {
        if (A.length >= 2) {
          var C = A[0];
          A[1].forAllProps(function(j, w, J) {
            if (J) {
              var te = new i.AVal();
              C.propagate(new i.DefProp(j, te, y && y[1])), w.propagate(new B(te));
            }
          });
        }
        return i.ANull;
      });
      var Y = i.constraint({
        construct: function(R, A, y) {
          this.self = R, this.args = A, this.target = y;
        },
        addType: function(R) {
          if (R instanceof i.Fn) {
            this.target.addType(new i.Fn(
              R.name,
              i.ANull,
              R.args.slice(this.args.length),
              R.argNames.slice(this.args.length),
              R.retval,
              R.generator
            )), this.self.propagate(R.self);
            for (var A = 0; A < Math.min(R.args.length, this.args.length); ++A)
              this.args[A].propagate(R.args[A]);
          }
        }
      });
      i.registerFunction("Function_bind", function(R, A) {
        if (!A.length)
          return i.ANull;
        var y = new i.AVal();
        return R.propagate(new Y(A[0], A.slice(1), y)), y;
      }), i.registerFunction("Array_ctor", function(R, A) {
        var y = new i.Arr();
        if (A.length != 1 || !A[0].hasType(i.cx().num))
          for (var C = y.getProp("<i>"), j = 0; j < A.length; ++j)
            A[j].propagate(C);
        return y;
      });
      function E() {
        var R = i.cx().definitions.ecmascript;
        return R && new i.Obj(R["Promise.prototype"]);
      }
      i.registerFunction("Promise_ctor", function(R, A, y) {
        var C = E();
        if (!C || A.length < 1)
          return i.ANull;
        var j = C.defProp(":t", y && y[0]), w = new i.AVal();
        w.propagate(j);
        var J = new i.Fn("execute", i.ANull, [w], ["value"], i.ANull), te = i.cx().definitions.ecmascript.Promise_reject;
        return A[0].propagate(new i.IsCallee(i.ANull, [J, te], null, i.ANull)), C;
      }), i.registerFunction("Promise_resolve", function(R, A, y) {
        var C = E();
        if (!C)
          return i.ANull;
        if (A.length) {
          var j = C.defProp(":t", y && y[0]), w = new i.AVal();
          w.propagate(j), A[0].propagate(new m(w));
        }
        return C;
      });
      var m = i.constraint({
        construct: function(R) {
          this.output = R;
        },
        addType: function(R) {
          R.constructor == i.Obj && R.name == "Promise" && R.hasProp(":t") ? R.getProp(":t").propagate(this.output) : R.propagate(this.output);
        }
      }), P = 50;
      return i.registerFunction("Promise_then", function(R, A, y) {
        var C = A.length && A[0].getFunctionType(), j = i.cx().definitions.ecmascript;
        if (!C || !j)
          return R;
        var w = new i.Obj(j["Promise.prototype"]), J = w.defProp(":t", y && y[0]), te;
        return C.retval.isEmpty() && (te = R.getType()) instanceof i.Obj && te.hasProp(":t") && te.getProp(":t").propagate(J, P), C.retval.propagate(new m(J)), w;
      }), i.registerFunction("getOwnPropertySymbols", function(R, A) {
        if (!A.length)
          return i.ANull;
        var y = new i.AVal();
        return A[0].forAllProps(function(C, j, w) {
          w && C.charAt(0) == ":" && y.addType(i.getSymbol(C.slice(1)));
        }), y;
      }), i.registerFunction("getSymbol", function(R, A, y) {
        return y && y.length && y[0].type == "Literal" && typeof y[0].value == "string" ? i.getSymbol(y[0].value) : i.ANull;
      }), r;
    });
  }($a, $a.exports)), $a.exports;
}
var Ya = { exports: {} }, mh;
function gd() {
  return mh || (mh = 1, function(e, t) {
    (function(r, i) {
      return i(t);
    })(Tu, function(r) {
      function i(f, p) {
        var O = this._handlers || (this._handlers = /* @__PURE__ */ Object.create(null));
        (O[f] || (O[f] = [])).push(p);
      }
      function n(f, p) {
        var O = this._handlers && this._handlers[f];
        if (O) {
          for (var d = 0; d < O.length; ++d)
            if (O[d] == p) {
              O.splice(d, 1);
              break;
            }
        }
      }
      var a = [];
      function s(f, p) {
        var O = f._handlers && f._handlers[p];
        return O && O.length ? O.slice() : a;
      }
      function o(f, p, O, d, g) {
        for (var L = s(this, f), D = 0; D < L.length; ++D)
          L[D].call(this, p, O, d, g);
      }
      function l(f, p, O, d, g) {
        for (var L = s(this, f), D = 0; D < L.length; ++D) {
          var W = L[D].call(this, p, O, d, g);
          if (W)
            return W;
        }
      }
      function c(f) {
        var p = this._handlers && this._handlers[f];
        return p && p.length > 0 && p;
      }
      r.mixin = function(f) {
        return f.on = i, f.off = n, f.signal = o, f.signalReturnFirst = l, f.hasHandler = c, f;
      };
    });
  }(Ya, Ya.exports)), Ya.exports;
}
var Rh;
function yP() {
  return Rh || (Rh = 1, function(e, t) {
    (function(r, i) {
      return i(
        t,
        XE,
        cP,
        Ad,
        gP(),
        gd()
      );
    })(Tu, function(r, i, n, a, s, o) {
      var l = r.toString = function(u, h, S) {
        return !u || u == S || h && h < -3 ? "?" : u.toString(h, S);
      }, c = r.ANull = o.mixin({
        addType: function() {
        },
        propagate: function() {
        },
        getProp: function() {
          return c;
        },
        forAllProps: function() {
        },
        hasType: function() {
          return !1;
        },
        isEmpty: function() {
          return !0;
        },
        getFunctionType: function() {
        },
        getObjType: function() {
        },
        getSymbolType: function() {
        },
        getType: function() {
        },
        gatherProperties: function() {
        },
        propagatesTo: function() {
        },
        typeHint: function() {
        },
        propHint: function() {
        },
        toString: function() {
          return "?";
        }
      });
      function f(u, h) {
        var S = Object.create(u);
        if (h)
          for (var I in h)
            S[I] = h[I];
        return S;
      }
      var p = 100, O = 90, d = 10, g = 6, L = 6, D = 1, W = 90, x = 2, V = 4, _ = r.AVal = function() {
        this.types = [], this.forward = null, this.maxWeight = 0;
      };
      _.prototype = f(c, {
        addType: function(u, h) {
          if (h = h || p, this.maxWeight < h) {
            if (this.maxWeight = h, this.types.length == 1 && this.types[0] == u)
              return;
            this.types.length = 0;
          } else if (this.maxWeight > h || this.types.indexOf(u) > -1)
            return;
          this.signal("addType", u), this.types.push(u);
          var S = this.forward;
          S && tt(function(I) {
            for (var k = 0; k < S.length; ++k)
              I(u, S[k], h);
          });
        },
        propagate: function(u, h) {
          if (!(u == c || u instanceof te && this.forward && this.forward.length > 2)) {
            h && h != p && (u = new J(u, h)), (this.forward || (this.forward = [])).push(u);
            var S = this.types;
            S.length && tt(function(I) {
              for (var k = 0; k < S.length; ++k)
                I(S[k], u, h);
            });
          }
        },
        getProp: function(u) {
          if (yt(u))
            return c;
          var h = (this.props || (this.props = /* @__PURE__ */ Object.create(null)))[u];
          return h || (h = this.props[u] = new _(), this.propagate(new G(u, h))), h;
        },
        forAllProps: function(u) {
          this.propagate(new re(u));
        },
        hasType: function(u) {
          return this.types.indexOf(u) > -1;
        },
        isEmpty: function() {
          return this.types.length === 0;
        },
        getFunctionType: function() {
          for (var u = this.types.length - 1; u >= 0; --u)
            if (this.types[u] instanceof De)
              return this.types[u];
        },
        getObjType: function() {
          for (var u = null, h = this.types.length - 1; h >= 0; --h) {
            var S = this.types[h];
            if (S instanceof fe) {
              if (S.name)
                return S;
              u || (u = S);
            }
          }
          return u;
        },
        getSymbolType: function() {
          for (var u = this.types.length - 1; u >= 0; --u)
            if (this.types[u] instanceof Ee)
              return this.types[u];
        },
        getType: function(u) {
          return this.types.length === 0 && u !== !1 ? this.makeupType() : this.types.length === 1 ? this.types[0] : ae(this.types);
        },
        toString: function(u, h) {
          if (this.types.length == 0)
            return l(this.makeupType(), u, h);
          if (this.types.length == 1)
            return l(this.types[0], u, h);
          var S = F(this.types);
          return S.length > 2 ? "?" : S.map(function(I) {
            return l(I, u, h);
          }).join("|");
        },
        makeupPropType: function(u) {
          var h = this.propertyName, S = u.proto && u.proto.hasProp(h);
          if (S) {
            var I = S.getType();
            if (I)
              return I;
          }
          if (h != "<i>") {
            var k = u.hasProp("<i>");
            if (k)
              return k.getType();
          } else if (u.props["<i>"] != this)
            for (var K in u.props) {
              var ie = u.props[K];
              if (!ie.isEmpty())
                return ie.getType();
            }
        },
        makeupType: function() {
          var u = this.propertyOf && this.makeupPropType(this.propertyOf);
          if (u)
            return u;
          if (!this.forward)
            return null;
          for (var h = this.forward.length - 1; h >= 0; --h) {
            var S = this.forward[h].typeHint();
            if (S && !S.isEmpty())
              return Cn = !0, S;
          }
          for (var I = /* @__PURE__ */ Object.create(null), k = null, h = 0; h < this.forward.length; ++h) {
            var K = this.forward[h].propHint();
            K && K != "length" && K != "<i>" && K != "✖" && K != q.completingProperty && (I[K] = !0, k = K);
          }
          if (!k)
            return null;
          var ie = Je(k);
          if (ie) {
            var oe = [];
            e:
              for (var h = 0; h < ie.length; ++h) {
                var he = ie[h];
                for (var K in I)
                  if (!he.hasProp(K))
                    continue e;
                he.hasCtor && (he = P(he)), oe.push(he);
              }
            var ye = ae(oe);
            if (ye)
              return Cn = !0, ye;
          }
        },
        typeHint: function() {
          return this.types.length ? this.getType() : null;
        },
        propagatesTo: function() {
          return this;
        },
        gatherProperties: function(u, h) {
          for (var S = 0; S < this.types.length; ++S)
            this.types[S].gatherProperties(u, h);
        },
        guessProperties: function(u) {
          if (this.forward)
            for (var h = 0; h < this.forward.length; ++h) {
              var S = this.forward[h].propHint();
              S && u(S, null, 0);
            }
          var I = this.makeupType();
          I && I.gatherProperties(u);
        }
      });
      function $(u, h, S) {
        var I = u.getType(!1), k = h.getType(!1);
        return !I || !k ? !0 : z(I, k, S);
      }
      function z(u, h, S) {
        if (!u || S >= 5)
          return h;
        if (!u || u == h || !h)
          return u;
        if (u.constructor != h.constructor)
          return !1;
        if (u.constructor == Ce) {
          var I = u.getProp("<i>").getType(!1);
          if (!I)
            return h;
          var k = h.getProp("<i>").getType(!1);
          if (!k || z(I, k, S + 1))
            return h;
        } else if (u.constructor == fe) {
          var K = 0, ie = 0, oe = 0;
          for (var he in u.props)
            K++, he in h.props && $(u.props[he], h.props[he], S + 1) && oe++;
          for (var he in h.props)
            ie++;
          return K && ie && oe < Math.max(K, ie) / 2 ? !1 : K > ie ? u : h;
        } else
          return u.constructor == De ? u.args.length != h.args.length || !u.args.every(function(ye, We) {
            return $(ye, h.args[We], S + 1);
          }) || !$(u.retval, h.retval, S + 1) || !$(u.self, h.self, S + 1) ? !1 : u : !1;
      }
      var F = r.simplifyTypes = function(u) {
        var h = [];
        e:
          for (var S = 0; S < u.length; ++S) {
            for (var I = u[S], k = 0; k < h.length; k++) {
              var K = z(I, h[k], 0);
              if (K) {
                h[k] = K;
                continue e;
              }
            }
            h.push(I);
          }
        return h;
      };
      function ae(u) {
        for (var h = 0, S = 0, I = 0, k = null, K = 0; K < u.length; ++K) {
          var ie = u[K];
          if (ie instanceof Ce)
            ++h;
          else if (ie instanceof De)
            ++S;
          else if (ie instanceof fe)
            ++I;
          else if (ie instanceof se) {
            if (k && ie.name != k.name)
              return null;
            k = ie;
          }
        }
        var oe = (h && 1) + (S && 1) + (I && 1) + (k && 1);
        if (oe > 1)
          return null;
        if (k)
          return k;
        for (var he = 0, ye = null, K = 0; K < u.length; ++K) {
          var ie = u[K], We = 0;
          if (h)
            We = ie.getProp("<i>").isEmpty() ? 1 : 2;
          else if (S) {
            We = 1;
            for (var Me = 0; Me < ie.args.length; ++Me)
              ie.args[Me].isEmpty() || ++We;
            ie.retval.isEmpty() || ++We;
          } else
            I && (We = ie.name ? 100 : 2);
          We >= he && (he = We, ye = ie);
        }
        return ye;
      }
      var U = r.constraint = function(u) {
        var h = function() {
          this.origin = q.curOrigin, this.construct.apply(this, arguments);
        };
        h.prototype = Object.create(c);
        for (var S in u)
          u.hasOwnProperty(S) && (h.prototype[S] = u[S]);
        return h;
      }, G = U({
        construct: function(u, h) {
          this.prop = u, this.target = h;
        },
        addType: function(u, h) {
          u.getProp && u.getProp(this.prop).propagate(this.target, h);
        },
        propHint: function() {
          return this.prop;
        },
        propagatesTo: function() {
          if (this.prop == "<i>" || !/[^\w_]/.test(this.prop))
            return { target: this.target, pathExt: "." + this.prop };
        }
      }), H = r.PropHasSubset = r.DefProp = U({
        construct: function(u, h, S) {
          this.prop = u, this.type = h, this.originNode = S;
        },
        addType: function(u, h) {
          if (u instanceof fe) {
            var S = u.defProp(this.prop, this.originNode);
            S.origin || (S.origin = this.origin), this.type.propagate(S, h);
          }
        },
        propHint: function() {
          return this.prop;
        }
      }), re = U({
        construct: function(u) {
          this.c = u;
        },
        addType: function(u) {
          u instanceof fe && u.forAllProps(this.c);
        }
      });
      function B(u, h) {
        q.disabledComputing = { fn: u, prev: q.disabledComputing };
        var S = h();
        return q.disabledComputing = q.disabledComputing.prev, S;
      }
      var Y = r.IsCallee = U({
        construct: function(u, h, S, I) {
          this.self = u, this.args = h, this.argNodes = S, this.retval = I, this.disabled = q.disabledComputing;
        },
        addType: function(u, h) {
          if (u instanceof De) {
            for (var S = 0; S < this.args.length; ++S)
              S < u.args.length && this.args[S].propagate(u.args[S], h), u.arguments && this.args[S].propagate(u.arguments, h);
            u.isArrowFn() || this.self.propagate(u.self, this.self == q.topScope ? W : h);
            var I = u.computeRet, k = u.retval;
            if (I)
              for (var K = this.disabled; K; K = K.prev)
                (K.fn == u || u.originNode && K.fn.originNode == u.originNode) && (I = null);
            if (I) {
              var ie = q.disabledComputing;
              q.disabledComputing = this.disabled, k = I(this.self, this.args, this.argNodes), q.disabledComputing = ie;
            }
            if (u.async && !u.generator) {
              var oe = k.getType();
              if (!(oe && oe.constructor == fe && oe.name == "Promise")) {
                var he = q.definitions.ecmascript, ye = he && new fe(he["Promise.prototype"]);
                ye && (ye.getType().propagate(new H(":t", k)), k = ye);
              }
            }
            wc(u, k).propagate(this.retval, h);
          }
        },
        typeHint: function() {
          for (var u = [], h = 0; h < this.args.length; ++h)
            u.push("?");
          return new De(null, this.self, this.args, u, c);
        },
        propagatesTo: function() {
          return { target: this.retval, pathExt: ".!ret" };
        }
      }), E = U({
        construct: function(u, h, S, I) {
          this.propName = u, this.args = h, this.argNodes = S, this.retval = I, this.disabled = q.disabledComputing;
        },
        addType: function(u, h) {
          var S = new Y(u, this.args, this.argNodes, this.retval);
          S.disabled = this.disabled, u.getProp(this.propName).propagate(S, h);
        },
        propHint: function() {
          return this.propName;
        }
      }), m = r.IsCtor = U({
        construct: function(u, h) {
          this.target = u, this.noReuse = h;
        },
        addType: function(u, h) {
          u instanceof De && (q.parent && !q.parent.options.reuseInstances && (this.noReuse = !0), u.getProp("prototype").propagate(new R(this.noReuse ? !1 : u, this.target), h));
        }
      }), P = r.getInstance = function(u, h) {
        if (h === !1)
          return new fe(u);
        h || (h = u.hasCtor), u.instances || (u.instances = []);
        for (var S = 0; S < u.instances.length; ++S) {
          var I = u.instances[S];
          if (I.ctor == h)
            return I.instance;
        }
        var k = new fe(u, h && h.name);
        return k.origin = u.origin, u.instances.push({ ctor: h, instance: k }), k;
      }, R = r.IsProto = U({
        construct: function(u, h) {
          this.ctor = u, this.target = h;
        },
        addType: function(u, h) {
          u instanceof fe && ((this.count = (this.count || 0) + 1) > 8 || (u == q.protos.Array ? this.target.addType(new Ce()) : this.target.addType(P(u, this.ctor))));
        }
      }), A = U({
        construct: function(u) {
          this.fn = u;
        },
        addType: function(u, h) {
          if (u instanceof fe && !u.hasCtor) {
            u.hasCtor = this.fn;
            var S = new j(u, this.fn);
            S.addType(this.fn), u.forAllProps(function(I, k, K) {
              K && k.propagate(S);
            });
          }
        }
      }), y = U({
        construct: function(u, h) {
          this.other = u, this.target = h;
        },
        addType: function(u, h) {
          u == q.str ? this.target.addType(q.str, h) : u == q.num && this.other.hasType(q.num) && this.target.addType(q.num, h);
        },
        typeHint: function() {
          return this.other;
        }
      }), C = r.IfObj = U({
        construct: function(u) {
          this.target = u;
        },
        addType: function(u, h) {
          u instanceof fe && this.target.addType(u, h);
        },
        propagatesTo: function() {
          return this.target;
        }
      }), j = U({
        construct: function(u, h) {
          this.obj = u, this.ctor = h;
        },
        addType: function(u) {
          u instanceof De && u.self && u.self.addType(P(this.obj, this.ctor), V);
        }
      }), w = U({
        construct: function(u) {
          this.obj = u;
        },
        addType: function(u) {
          u instanceof fe && this.obj.proto == q.protos.Object && this.obj.replaceProto(u);
        }
      }), J = U({
        construct: function(u, h) {
          this.inner = u, this.weight = h;
        },
        addType: function(u, h) {
          this.inner.addType(u, Math.min(h, this.weight));
        },
        propagatesTo: function() {
          return this.inner.propagatesTo();
        },
        typeHint: function() {
          return this.inner.typeHint();
        },
        propHint: function() {
          return this.inner.propHint();
        }
      }), te = r.Type = function() {
      };
      te.prototype = f(c, {
        constructor: te,
        propagate: function(u, h) {
          u.addType(this, h);
        },
        hasType: function(u) {
          return u == this;
        },
        isEmpty: function() {
          return !1;
        },
        typeHint: function() {
          return this;
        },
        getType: function() {
          return this;
        }
      });
      var se = r.Prim = function(u, h) {
        this.name = h, this.proto = u;
      };
      se.prototype = f(te.prototype, {
        constructor: se,
        toString: function() {
          return this.name;
        },
        getProp: function(u) {
          return this.proto.hasProp(u) || c;
        },
        gatherProperties: function(u, h) {
          this.proto && this.proto.gatherProperties(u, h);
        }
      });
      function ge(u) {
        var h = u.charCodeAt(0);
        return h >= 48 && h <= 57 ? !/\D/.test(u) : !1;
      }
      var fe = r.Obj = function(u, h) {
        if (this.props || (this.props = /* @__PURE__ */ Object.create(null)), this.proto = u === !0 ? q.protos.Object : u, u && u != q.protos.Object && !h && u.name && !(this instanceof De)) {
          var S = /^(.*)\.prototype$/.exec(this.proto.name);
          S && (h = S[1]);
        }
        this.name = h, this.maybeProps = null, this.origin = q.curOrigin;
      };
      fe.prototype = f(te.prototype, {
        constructor: fe,
        toString: function(u) {
          if (u == null && (u = 0), u <= 0 && this.name)
            return this.name;
          var h = [], S = !1;
          for (var I in this.props)
            if (I != "<i>") {
              if (h.length > 5) {
                S = !0;
                break;
              }
              u ? h.push(I + ": " + l(this.props[I], u - 1, this)) : h.push(I);
            }
          return h.sort(), S && h.push("..."), "{" + h.join(", ") + "}";
        },
        hasProp: function(u, h) {
          ge(u) && (u = this.normalizeIntegerProp(u));
          var S = this.props[u];
          if (h !== !1)
            for (var I = this.proto; I && !S; I = I.proto)
              S = I.props[u];
          return S;
        },
        defProp: function(u, h) {
          var S = this.hasProp(u, !1);
          if (S)
            return h && !S.originNode && (S.originNode = h), S;
          if (yt(u))
            return c;
          ge(u) && (u = this.normalizeIntegerProp(u));
          var I = this.maybeProps && this.maybeProps[u];
          return I ? (delete this.maybeProps[u], this.maybeUnregProtoPropHandler()) : (I = new _(), I.propertyOf = this, I.propertyName = u), this.props[u] = I, I.originNode = h, I.origin = q.curOrigin, this.broadcastProp(u, I, !0), I;
        },
        getProp: function(u) {
          var h = this.hasProp(u, !0) || this.maybeProps && this.maybeProps[u];
          if (h)
            return h;
          if (yt(u))
            return c;
          ge(u) && (u = this.normalizeIntegerProp(u));
          var S = this.ensureMaybeProps()[u] = new _();
          return S.propertyOf = this, S.propertyName = u, S;
        },
        normalizeIntegerProp: function(u) {
          return "<i>";
        },
        broadcastProp: function(u, h, S) {
          if (S && (this.signal("addProp", u, h), this instanceof lt || ut(u, this)), this.onNewProp)
            for (var I = 0; I < this.onNewProp.length; ++I) {
              var k = this.onNewProp[I];
              k.onProtoProp ? k.onProtoProp(u, h, S) : k(u, h, S);
            }
        },
        onProtoProp: function(u, h, S) {
          var I = this.maybeProps && this.maybeProps[u];
          I && (delete this.maybeProps[u], this.maybeUnregProtoPropHandler(), this.proto.getProp(u).propagate(I)), this.broadcastProp(u, h, !1);
        },
        replaceProto: function(u) {
          for (var h = u; h; h = h.proto)
            if (h == this)
              return;
          this.proto && this.maybeProps && this.proto.unregPropHandler(this), this.proto = u, this.maybeProps && this.proto.forAllProps(this);
        },
        ensureMaybeProps: function() {
          return this.maybeProps || (this.proto && this.proto.forAllProps(this), this.maybeProps = /* @__PURE__ */ Object.create(null)), this.maybeProps;
        },
        removeProp: function(u) {
          var h = this.props[u];
          delete this.props[u], this.ensureMaybeProps()[u] = h, h.types.length = 0;
        },
        forAllProps: function(u) {
          this.onNewProp || (this.onNewProp = [], this.proto && this.proto.forAllProps(this)), this.onNewProp.push(u);
          for (var h = this; h; h = h.proto)
            for (var S in h.props)
              u.onProtoProp ? u.onProtoProp(S, h.props[S], h == this) : u(S, h.props[S], h == this);
        },
        maybeUnregProtoPropHandler: function() {
          if (this.maybeProps) {
            for (var u in this.maybeProps)
              return;
            this.maybeProps = null;
          }
          !this.proto || this.onNewProp && this.onNewProp.length || this.proto.unregPropHandler(this);
        },
        unregPropHandler: function(u) {
          for (var h = 0; h < this.onNewProp.length; ++h)
            if (this.onNewProp[h] == u) {
              this.onNewProp.splice(h, 1);
              break;
            }
          this.maybeUnregProtoPropHandler();
        },
        gatherProperties: function(u, h) {
          for (var S in this.props)
            S != "<i>" && S.charAt(0) != ":" && u(S, this, h);
          this.proto && this.proto.gatherProperties(u, h + 1);
        },
        getObjType: function() {
          return this;
        }
      });
      var et = typeof StopIteration < "u";
      function yt(u) {
        return u == "__proto__" || u == "✖" || et && u == "__iterator__";
      }
      var De = r.Fn = function(u, h, S, I, k, K, ie) {
        fe.call(this, q.protos.Function, u), this.self = h, this.args = S, this.argNames = I, this.retval = k, this.generator = K, this.async = ie;
      };
      De.prototype = f(fe.prototype, {
        constructor: De,
        toString: function(u) {
          u == null && (u = 0);
          for (var h = this.generator ? "fn*(" : "fn(", S = 0; S < this.args.length; ++S) {
            S && (h += ", ");
            var I = this.argNames[S];
            I && I != "?" && (h += I + ": "), h += u > -3 ? l(this.args[S], u - 1, this) : "?";
          }
          return h += ")", this.retval.isEmpty() || (h += " -> " + (u > -3 ? l(this.retval, u - 1, this) : "?")), h;
        },
        getProp: function(u) {
          if (u == "prototype") {
            var h = this.hasProp(u, !1);
            if (!h) {
              h = this.defProp(u);
              var S = new fe(!0, this.name && this.name + ".prototype");
              S.origin = this.origin, h.addType(S, d);
            }
            return h;
          }
          return fe.prototype.getProp.call(this, u);
        },
        defProp: function(u, h) {
          if (u == "prototype") {
            var S = this.hasProp(u, !1);
            return S || (S = fe.prototype.defProp.call(this, u, h), S.origin = this.origin, S.propagate(new A(this)), S);
          }
          return fe.prototype.defProp.call(this, u, h);
        },
        getFunctionType: function() {
          return this;
        },
        isArrowFn: function() {
          return this.originNode && this.originNode.type == "ArrowFunctionExpression";
        }
      });
      var Ce = r.Arr = function(u) {
        fe.call(this, q.protos.Array);
        var h = this.defProp("<i>");
        if (Array.isArray(u)) {
          this.tuple = u.length;
          for (var S = 0; S < u.length; S++) {
            var I = this.defProp(String(S));
            u[S].propagate(I), I.propagate(h);
          }
        } else
          u && (this.tuple = 0, u.propagate(h));
      };
      Ce.prototype = f(fe.prototype, {
        constructor: Ce,
        toString: function(u) {
          if (u == null && (u = 0), u <= -3)
            return "[?]";
          var h = "";
          if (this.tuple) {
            for (var S, I = 0; I in this.props; I++) {
              var k = l(this.getProp(String(I)), u - 1, this);
              S == null ? S = k : S != k ? S = !1 : S = k, h += (h ? ", " : "") + k;
            }
            S && (h = S);
          } else
            h = l(this.getProp("<i>"), u - 1, this);
          return "[" + h + "]";
        },
        normalizeIntegerProp: function(u) {
          return +u < this.tuple ? u : "<i>";
        }
      });
      var Ee = r.Sym = function(u, h) {
        se.call(this, q.protos.Symbol, "Symbol"), this.symName = u, this.originNode = h;
      };
      Ee.prototype = f(se.prototype, {
        constructor: Ee,
        asPropName: function() {
          return ":" + this.symName;
        },
        getSymbolType: function() {
          return this;
        }
      }), r.getSymbol = function(u, h) {
        var S = u.replace(/[^\w$\.]/g, "_"), I = q.symbols[S];
        return I ? (h && !I.originNode && (I.originNode = h), I) : q.symbols[S] = new Ee(S, h);
      };
      function ut(u, h) {
        var S = q.props[u] || (q.props[u] = []);
        S.push(h);
      }
      function Je(u) {
        return q.props[u];
      }
      r.Context = function(u, h) {
        this.parent = h, this.props = /* @__PURE__ */ Object.create(null), this.protos = /* @__PURE__ */ Object.create(null), this.origins = [], this.curOrigin = "ecmascript", this.paths = /* @__PURE__ */ Object.create(null), this.definitions = /* @__PURE__ */ Object.create(null), this.purgeGen = 0, this.workList = null, this.disabledComputing = null, this.curSuperCtor = this.curSuper = null, this.symbols = /* @__PURE__ */ Object.create(null), r.withContext(this, function() {
          if (q.protos.Object = new fe(null, "Object.prototype"), q.topScope = new lt(), q.topScope.name = "<top>", q.protos.Array = new fe(!0, "Array.prototype"), q.protos.Function = new De("Function.prototype", c, [], [], c), q.protos.Function.proto = q.protos.Object, q.protos.RegExp = new fe(!0, "RegExp.prototype"), q.protos.String = new fe(!0, "String.prototype"), q.protos.Number = new fe(!0, "Number.prototype"), q.protos.Boolean = new fe(!0, "Boolean.prototype"), q.protos.Symbol = new fe(!0, "Symbol.prototype"), q.str = new se(q.protos.String, "string"), q.bool = new se(q.protos.Boolean, "bool"), q.num = new se(q.protos.Number, "number"), q.curOrigin = null, u)
            for (var S = 0; S < u.length; ++S)
              s.load(u[S]);
        });
      }, r.Context.prototype.startAnalysis = function() {
        this.disabledComputing = this.workList = this.curSuperCtor = this.curSuper = null;
      };
      var q = null;
      r.cx = function() {
        return q;
      }, r.withContext = function(u, h) {
        var S = q;
        q = u;
        try {
          return h();
        } finally {
          q = S;
        }
      }, r.TimedOut = function() {
        this.message = "Timed out", this.stack = new Error().stack;
      }, r.TimedOut.prototype = Object.create(Error.prototype), r.TimedOut.prototype.name = "infer.TimedOut";
      var ot;
      r.withTimeout = function(u, h) {
        var S = +/* @__PURE__ */ new Date() + u, I = ot;
        if (I && I < S)
          return h();
        ot = S;
        try {
          return h();
        } finally {
          ot = I;
        }
      }, r.addOrigin = function(u) {
        q.origins.indexOf(u) < 0 && q.origins.push(u);
      };
      var $t = 20, It = 1e-4;
      function tt(u) {
        if (q.workList)
          return u(q.workList);
        for (var h = [], S = 0, I = q.workList = function(ie, oe, he) {
          S < $t - It * h.length && h.push(ie, oe, he, S);
        }, k = u(I), K = 0; K < h.length; K += 4) {
          if (ot && +/* @__PURE__ */ new Date() >= ot)
            throw new r.TimedOut();
          S = h[K + 3] + 1, h[K + 1].addType(h[K], h[K + 2]);
        }
        return q.workList = null, k;
      }
      function St(u, h, S) {
        var I = q.curSuperCtor, k = q.curSuper;
        q.curSuperCtor = u, q.curSuper = h;
        var K = S();
        return q.curSuperCtor = I, q.curSuper = k, K;
      }
      var lt = r.Scope = function(u, h, S, I) {
        fe.call(this, u || !0), this.prev = u, this.originNode = h, this.isBlock = !!S, this.isCatch = !!I;
      };
      lt.prototype = f(fe.prototype, {
        constructor: lt,
        defVar: function(u, h) {
          for (var S = this; ; S = S.proto) {
            var I = S.props[u];
            if (I)
              return I;
            if (!S.prev)
              return S.defProp(u, h);
          }
        }
      });
      function vt(u, h) {
        for (; u.isBlock || u.isCatch || h === !1 && u.fnType && u.fnType.isArrowFn(); )
          u = u.prev;
        return u;
      }
      function xr(u, h) {
        var S = vt(u).fnType;
        S && (S.instantiateScore = (S.instantiateScore || 0) + h);
      }
      var ba = {};
      function va(u, h) {
        try {
          return a.simple(u, { Expression: function() {
            if (--h <= 0)
              throw ba;
          } }), !0;
        } catch (S) {
          if (S == ba)
            return !1;
          throw S;
        }
      }
      function qi(u, h) {
        var S = h.instantiateScore;
        if (!q.disabledComputing && S && h.args.length && va(u, S * 5))
          return xr(vt(h.originNode.scope.prev), S / 2), Oo(u, h), !0;
        h.instantiateScore = null;
      }
      function Oo(u, h) {
        for (var S = u.scope, I = 0; I < h.args.length; ++I)
          h.args[I] = new _();
        h.self = new _(), h.computeRet = function(k, K) {
          return B(h, function() {
            var ie = q.curOrigin;
            q.curOrigin = h.origin;
            var oe = u.scope ? u.scope : S, he = new lt(oe.prev, oe.originNode);
            for (var ye in oe.props)
              for (var We = he.defProp(ye, oe.props[ye].originNode), Me = 0; Me < K.length; ++Me)
                h.argNames[Me] == ye && Me < K.length && K[Me].propagate(We);
            for (var Ct = h.argNames.length != K.length ? h.argNames.slice(0, K.length) : h.argNames; Ct.length < K.length; )
              Ct.push("?");
            if (he.fnType = new De(h.name, k, K, Ct, c, h.generator, h.async), he.fnType.originNode = h.originNode, h.arguments) {
              var wt = he.fnType.arguments = new _();
              he.defProp("arguments").addType(new Ce(wt));
              for (var Me = 0; Me < K.length; ++Me)
                K[Me].propagate(wt);
            }
            return u.scope = he, a.recursive(u.body, he, null, Z), a.recursive(u.body, he, null, zt), q.curOrigin = ie, he.fnType.retval;
          });
        };
      }
      function Ca(u) {
        var h = u.retval;
        if (h == c || u.isArrowFn())
          return;
        var S, I;
        !h.isEmpty() && (S = h.getType()) instanceof Ce && (h = I = S.getProp("<i>"));
        function k(ye, We, Me) {
          if (!(Me > 3 || !ye.forward))
            for (var Ct = 0; Ct < ye.forward.length; ++Ct) {
              var wt = ye.forward[Ct].propagatesTo();
              if (wt) {
                var Mt = We, Yt;
                if (wt instanceof _)
                  Yt = wt;
                else if (wt.target instanceof _)
                  Mt += wt.pathExt, Yt = wt.target;
                else
                  continue;
                if (Yt == h)
                  return Mt;
                var Ln = k(Yt, Mt, Me + 1);
                if (Ln)
                  return Ln;
              }
            }
        }
        for (var K = k(u.self, "!this", 0), ie = 0; !K && ie < u.args.length; ++ie)
          K = k(u.args[ie], "!" + ie, 0);
        if (K) {
          I && (K = "[" + K + "]");
          var oe = new s.TypeParser(K), he = oe.parseType(!0);
          return u.computeRet = he.apply ? he : function() {
            return he;
          }, u.computeRetSource = K, !0;
        }
      }
      function li(u, h) {
        return u.defProp(h.name, h);
      }
      function N(u) {
        return u.type == "Identifier" ? u.name : u.type == "AssignmentPattern" ? N(u.left) : u.type == "ObjectPattern" ? "{" + u.properties.map(function(h) {
          return N(h.type === "RestElement" ? h : h.value);
        }).join(", ") + "}" : u.type == "ArrayPattern" ? "[" + u.elements.map(function(h) {
          return h ? N(h) : "";
        }).join(", ") + "]" : u.type == "RestElement" ? "..." + N(u.argument) : "_";
      }
      function b(u) {
        return u.type == "VariableDeclaration" && u.kind != "var" || u.type == "FunctionDeclaration" || u.type == "ClassDeclaration";
      }
      function M(u, h) {
        return { inner: u, outer: h || u };
      }
      var Z = r.scopeGatherer = a.make({
        VariablePattern: function(u, h) {
          h.inner && li(h.inner, u);
        },
        AssignmentPattern: function(u, h, S) {
          S(u.left, h, "Pattern"), S(u.right, h.outer, "Expression");
        },
        AssignmentExpression: function(u, h, S) {
          u.left.type == "MemberExpression" ? S(u.left, h, "Expression") : S(u.left, M(!1, h), "Pattern"), S(u.right, h, "Expression");
        },
        MemberPattern: function(u, h, S) {
          S(u, h.outer);
        },
        Function: function(u, h, S) {
          for (var I = u.scope = new lt(h, u), k = [], K = [], ie = 0; ie < u.params.length; ++ie) {
            var oe = u.params[ie];
            if (K.push(N(oe)), oe.type == "Identifier")
              k.push(li(I, oe));
            else {
              var he = new _();
              k.push(he), he.originNode = oe, S(oe, M(I), "Pattern");
            }
          }
          if (I.fnType = new De(u.id && u.id.name, new _(), k, K, c, u.generator, u.async), I.fnType.originNode = u, u.id) {
            var ye = u.type == "FunctionDeclaration";
            li(ye ? h : I, u.id);
          }
          S(u.body, I, u.expression ? "Expression" : "Statement");
        },
        BlockStatement: function(u, h, S) {
          !u.scope && u.body.some(b) && (h = u.scope = new lt(h, u, !0)), a.base.BlockStatement(u, h, S);
        },
        CatchClause: function(u, h, S) {
          if (u.param)
            if (h = u.scope = new lt(h, u, !1, !0), u.param.type == "Identifier") {
              var I = li(h, u.param);
              S(u.body, h, "Statement");
              var k = q.definitions.ecmascript;
              k && I.isEmpty() && P(k["Error.prototype"]).propagate(I, L);
            } else
              S(u.param, M(h), "Pattern");
        },
        VariableDeclaration: function(u, h, S) {
          for (var I = u.kind == "var" ? vt(h) : h, k = 0; k < u.declarations.length; ++k) {
            var K = u.declarations[k];
            S(K.id, M(I, h), "Pattern"), K.init && S(K.init, h, "Expression");
          }
        },
        ClassDeclaration: function(u, h, S) {
          u.id && li(h, u.id), u.superClass && S(u.superClass, h, "Expression");
          for (var I = 0; I < u.body.body.length; I++)
            S(u.body.body[I], h);
        },
        ForInStatement: function(u, h, S) {
          !u.scope && b(u.left) && (h = u.scope = new lt(h, u, !0)), a.base.ForInStatement(u, h, S);
        },
        ForStatement: function(u, h, S) {
          !u.scope && u.init && b(u.init) && (h = u.scope = new lt(h, u, !0)), a.base.ForStatement(u, h, S);
        },
        ImportDeclaration: function(u, h) {
          for (var S = 0; S < u.specifiers.length; S++)
            li(h, u.specifiers[S].local);
        }
      });
      Z.ForOfStatement = Z.ForInStatement;
      function X(u) {
        u.scope && (u.scope = null);
      }
      var ee = {
        BlockStatement: X,
        Function: X,
        CatchClause: X,
        ForInStateMent: X,
        ForStatement: X
      };
      r.clearScopes = function(u) {
        a.simple(u, ee);
      };
      var ne = r.propName = function(u, h) {
        var S = u.property || u.key;
        if (!u.computed && S.type == "Identifier")
          return S.name;
        if (S.type == "Literal") {
          if (typeof S.value == "string")
            return S.value;
          if (typeof S.value == "number")
            return String(S.value);
        }
        if (h) {
          var I = ce(pe(S, h));
          if (I)
            return u.propName = I;
        } else if (u.propName)
          return u.propName;
        return "<i>";
      };
      function ce(u) {
        var h = u.getSymbolType();
        if (h)
          return h.asPropName();
      }
      function Se(u) {
        switch (u) {
          case "+":
          case "-":
          case "~":
            return q.num;
          case "!":
            return q.bool;
          case "typeof":
            return q.str;
          case "void":
          case "delete":
            return c;
        }
      }
      function Ae(u) {
        switch (u) {
          case "==":
          case "!=":
          case "===":
          case "!==":
          case "<":
          case ">":
          case ">=":
          case "<=":
          case "in":
          case "instanceof":
            return !0;
        }
      }
      function Ie(u) {
        if (u.regex)
          return P(q.protos.RegExp);
        switch (typeof u.value) {
          case "boolean":
            return q.bool;
          case "number":
            return q.num;
          case "string":
            return q.str;
          case "object":
          case "function":
            return u.value ? P(q.protos.RegExp) : c;
        }
      }
      function je(u, h) {
        if (u == h || h == c)
          return u;
        if (u == c)
          return h;
        var S = new _();
        return u.propagate(S), h.propagate(S), S;
      }
      function Ge(u, h) {
        for (var S = 0; S < u.params.length; S++) {
          var I = u.params[S];
          I.type != "Identifier" && mt(I, h, u.scope.fnType.args[S]);
        }
      }
      function qe(u, h) {
        return h.hasProp(u.name) || q.topScope.defProp(u.name, u);
      }
      var er = r.inferPatternVisitor = {
        Identifier: function(u, h, S) {
          S.propagate(qe(u, h));
        },
        MemberExpression: function(u, h, S) {
          var I = pe(u.object, h), k = ne(u, h);
          I.propagate(new H(k, S, u.property));
        },
        RestElement: function(u, h, S) {
          mt(u.argument, h, new Ce(S));
        },
        ObjectPattern: function(u, h, S) {
          for (var I = 0; I < u.properties.length; ++I) {
            var k = u.properties[I];
            k.type != "RestElement" && mt(k.value, h, S.getProp(ne(k)));
          }
        },
        ArrayPattern: function(u, h, S) {
          for (var I = 0; I < u.elements.length; I++)
            u.elements[I] && mt(u.elements[I], h, S.getProp(String(I)));
        },
        AssignmentPattern: function(u, h, S) {
          mt(u.left, h, je(S, pe(u.right, h)));
        }
      };
      function mt(u, h, S) {
        var I = er[u.type];
        I && I(u, h, S);
      }
      function Rt(u) {
        var h = vt(u);
        return h.fnType ? h.fnType.self : h;
      }
      function Nt(u) {
        !u.isEmpty() || !u.propertyOf || (u.propertyOf.getProp(u.propertyName).addType(new fe(), D), Nt(u.propertyOf));
      }
      function ct(u, h, S) {
        !S && u.id && (S = u.id.name);
        var I = q.protos.Object, k, K;
        if (u.superClass)
          if (u.superClass.type == "Literal" && u.superClass.value == null)
            I = null;
          else {
            var ie = pe(u.superClass, h), oe;
            k = ie.getFunctionType(), k && (oe = k.getProp("prototype").getObjType()) ? I = oe : (k = ie, K = ie.getProp("prototype"));
          }
        var he = new fe(I, S && S + ".prototype");
        return K && K.propagate(new w(he)), St(k, K || I, function() {
          for (var ye, We = u.body.body, Me = 0; Me < We.length; Me++)
            We[Me].kind == "constructor" && (ye = We[Me].value);
          var Ct = u.objType = ye ? pe(ye, h) : new De(S, c, [], null, c);
          Ct.originNode = u.id || ye || u;
          var wt = P(he, Ct);
          Ct.self.addType(wt), Ct.defProp("prototype", u).addType(he);
          for (var Me = 0; Me < We.length; Me++) {
            var Mt = We[Me], Yt;
            if (Mt.kind != "constructor") {
              var Ln = ne(Mt, h);
              Ln == "<i>" || Mt.kind == "set" ? Yt = c : (Yt = (Mt.static ? Ct : he).defProp(Ln, Mt.key), Yt.initializer = !0, Mt.kind == "get" && (Yt = new Y(wt, [], null, Yt))), pe(Mt.value, h, Yt);
              var Qc = Yt.getFunctionType();
              Qc && Qc.self.addType(wt);
            }
          }
          return Ct;
        });
      }
      function hr(u, h, S) {
        var I = u.length > 1 && u.length < 6;
        if (I) {
          for (var k = !0, K, ie = 0; ie < u.length; ie++) {
            var oe = u[ie];
            oe ? oe.type != "Literal" || K && K != typeof oe.value ? k = !1 : K = typeof oe.value : I = !1;
          }
          k && (I = !1);
        }
        if (I) {
          for (var he = [], ie = 0; ie < u.length; ++ie)
            he.push(S(u[ie], h));
          return new Ce(he);
        } else {
          if (u.length < 2)
            return new Ce(u[0] && S(u[0], h));
          for (var ye = new _(), ie = 0; ie < u.length; ie++)
            u[ie] && S(u[ie], h).propagate(ye);
          return new Ce(ye);
        }
      }
      function rt(u) {
        return function(h, S, I, k) {
          var K = u(h, S, k);
          return I && K.propagate(I), K;
        };
      }
      function xt(u) {
        return function(h, S, I, k) {
          return I || (I = new _()), u(h, S, I, k), I;
        };
      }
      var ui = r.inferExprVisitor = {
        ArrayExpression: rt(function(u, h) {
          return hr(u.elements, h, pe);
        }),
        ObjectExpression: rt(function(u, h, S) {
          for (var I = q.protos.Object, k, K = 0; K < u.properties.length; ++K) {
            var ie = u.properties[K];
            if (ie.type != "SpreadElement" && ie.key.name == "__proto__")
              if (ie.value.type == "Literal" && ie.value.value == null)
                I = null;
              else {
                var oe = pe(ie.value, h), he = oe.getObjType();
                he ? I = he : k = oe;
              }
          }
          var ye = u.objType = new fe(I, S);
          return k && k.propagate(new w(ye)), ye.originNode = u, St(null, k || I, function() {
            for (var We = 0; We < u.properties.length; ++We) {
              var Me = u.properties[We], Ct = Me.key;
              if (!(Me.type == "SpreadElement" || yt(Me.key.name))) {
                var wt = ne(Me, h), Mt;
                if (wt == "<i>" || Me.kind == "set")
                  Mt = c;
                else {
                  Mt = ye.defProp(wt, Ct);
                  var Yt = Mt;
                  Yt.initializer = !0, Me.kind == "get" && (Mt = new Y(ye, [], null, Yt));
                }
                pe(Me.value, h, Mt, wt), Me.value.type == "FunctionExpression" && Me.value.scope.fnType.self.addType(ye, x);
              }
            }
          }), ye;
        }),
        FunctionExpression: rt(function(u, h, S) {
          var I = u.scope, k = I.fnType;
          return S && !k.name && (k.name = S), Ge(u, I), u.expression ? pe(u.body, I, I.fnType.retval = new _()) : a.recursive(u.body, I, null, zt, "Statement"), u.type == "ArrowFunctionExpression" && Rt(h).propagate(k.self), qi(u, k) || Ca(k), u.id && I.getProp(u.id.name).addType(k), k;
        }),
        ClassExpression: rt(ct),
        SequenceExpression: rt(function(u, h) {
          for (var S = 0, I = u.expressions.length - 1; S < I; ++S)
            pe(u.expressions[S], h, c);
          return pe(u.expressions[I], h);
        }),
        UnaryExpression: rt(function(u, h) {
          return pe(u.argument, h, c), Se(u.operator);
        }),
        UpdateExpression: rt(function(u, h) {
          return pe(u.argument, h, c), q.num;
        }),
        BinaryExpression: rt(function(u, h) {
          if (u.operator == "+") {
            var S = pe(u.left, h), I = pe(u.right, h);
            if (S.hasType(q.str) || I.hasType(q.str))
              return q.str;
            if (S.hasType(q.num) && I.hasType(q.num))
              return q.num;
            var k = new _();
            return S.propagate(new y(I, k)), I.propagate(new y(S, k)), k;
          } else
            return pe(u.left, h, c), pe(u.right, h, c), Ae(u.operator) ? q.bool : q.num;
        }),
        AssignmentExpression: rt(function(u, h, S) {
          var I, k;
          if (u.left.type == "MemberExpression" ? (k = ne(u.left, h), S || (S = u.left.object.type == "Identifier" ? u.left.object.name + "." + k : k)) : !S && u.left.type == "Identifier" && (S = u.left.name), u.operator && u.operator != "=" && u.operator != "+=" ? (pe(u.right, h, c), I = q.num) : I = pe(u.right, h, null, S), u.left.type == "MemberExpression") {
            var K = pe(u.left.object, h);
            if (k == "prototype" && xr(h, 20), k == "<i>") {
              var ie = u.left.property.name, oe = h.props[ie], he = oe && oe.iteratesOver;
              if (he) {
                xr(h, 20);
                var ye = u.right.type == "MemberExpression" && u.right.computed && u.right.property.name == ie;
                return he.forAllProps(function(We, Me, Ct) {
                  Ct && We != "prototype" && We != "<i>" && K.propagate(new H(We, ye ? Me : c));
                }), I;
              }
            }
            K.propagate(new H(k, I, u.left.property)), Nt(K), u.right.type == "FunctionExpression" && K.propagate(u.right.scope.fnType.self, x);
          } else
            mt(u.left, h, I);
          return I;
        }),
        LogicalExpression: xt(function(u, h, S) {
          pe(u.left, h, S), pe(u.right, h, S);
        }),
        ConditionalExpression: xt(function(u, h, S) {
          pe(u.test, h, c), pe(u.consequent, h, S), pe(u.alternate, h, S);
        }),
        NewExpression: xt(function(u, h, S, I) {
          u.callee.type == "Identifier" && u.callee.name in h.props && xr(h, 20);
          for (var k = 0, K = []; k < u.arguments.length; ++k)
            K.push(pe(u.arguments[k], h));
          var ie = pe(u.callee, h), oe = new _();
          ie.propagate(new m(oe, I && /\.prototype$/.test(I))), oe.propagate(S, O), ie.propagate(new Y(oe, K, u.arguments, new C(S)));
        }),
        CallExpression: xt(function(u, h, S) {
          for (var I = 0, k = []; I < u.arguments.length; ++I)
            k.push(pe(u.arguments[I], h));
          var K = vt(h).fnType;
          if (u.callee.type == "MemberExpression") {
            var ie = pe(u.callee.object, h), oe = ne(u.callee, h);
            K && (oe == "call" || oe == "apply") && K.args.indexOf(ie) > -1 && xr(h, 30), ie.propagate(new E(oe, k, u.arguments, S));
          } else if (u.callee.type == "Super" && q.curSuperCtor)
            u.callee.superType = q.curSuperCtor, q.curSuperCtor.propagate(new Y(Rt(h), k, u.arguments, S)), Rt(h).propagate(S, O);
          else {
            var he = pe(u.callee, h);
            K && K.args.indexOf(he) > -1 && xr(h, 30);
            var ye = he.getFunctionType();
            ye && ye.instantiateScore && K && xr(h, ye.instantiateScore / 5), he.propagate(new Y(q.topScope, k, u.arguments, S));
          }
        }),
        AwaitExpression: xt(function(u, h, S, I) {
          var k = pe(u.argument, h, null, I), K = k.getType();
          K && K.constructor == fe && K.name == "Promise" ? K.hasProp(":t") && K.getProp(":t").propagate(S) : k.propagate(S);
        }),
        MemberExpression: xt(function(u, h, S) {
          var I = ne(u), k;
          if (I == "<i>") {
            var K = pe(u.property, h), ie = ce(K);
            ie ? I = u.propName = ie : K.hasType(q.num) || (k = g);
          }
          pe(u.object, h).getProp(I).propagate(S, k);
        }),
        Identifier: rt(function(u, h) {
          if (u.name == "arguments") {
            var S = vt(h, !1);
            S.fnType && !(u.name in S.props) && S.defProp(u.name, S.fnType.originNode).addType(new Ce(S.fnType.arguments = new _()));
          }
          return h.getProp(u.name);
        }),
        ThisExpression: rt(function(u, h) {
          return Rt(h);
        }),
        Super: rt(function(u) {
          return u.superType = q.curSuper || c;
        }),
        Literal: rt(function(u) {
          return Ie(u);
        }),
        TemplateLiteral: rt(function(u, h) {
          for (var S = 0; S < u.expressions.length; ++S)
            pe(u.expressions[S], h, c);
          return q.str;
        }),
        TaggedTemplateExpression: xt(function(u, h, S) {
          for (var I = [new Ce(q.str)], k = 0; k < u.quasi.expressions.length; ++k)
            I.push(pe(u.quasi.expressions[k], h));
          pe(u.tag, h, new Y(q.topScope, I, u.quasi.expressions, S));
        }),
        YieldExpression: rt(function(u, h) {
          var S = c, I = vt(h).fnType;
          return I && (I.retval == c && (I.retval = new _()), I.yieldval || (I.yieldval = new _()), S = I.retval), u.argument && (u.delegate ? pe(u.argument, h, new E(
            "next",
            [],
            null,
            new G("value", S)
          )) : pe(u.argument, h, S)), I ? I.yieldval : c;
        })
      };
      ui.ArrowFunctionExpression = ui.FunctionExpression;
      function pe(u, h, S, I) {
        var k = ui[u.type];
        return k ? k(u, h, S, I) : c;
      }
      function Dt(u) {
        return u.type == "VariableDeclaration" ? u.declarations[0].id : u;
      }
      var zt = r.inferWrapper = a.make({
        Expression: function(u, h) {
          pe(u, u.scope || h, c);
        },
        ObjectExpression: function(u, h) {
          pe(u, u.scope || h, c);
        },
        FunctionDeclaration: function(u, h, S) {
          var I = u.scope, k = I.fnType;
          Ge(u, I), S(u.body, I, "Statement"), qi(u, k) || Ca(k), u.id && h.getProp(u.id.name).addType(k);
        },
        Statement: function(u, h, S) {
          S(u, u.scope || h);
        },
        ExportDefaultDeclaration: function(u, h, S) {
          S(u.declaration, u.scope || h);
        },
        VariableDeclaration: function(u, h) {
          for (var S = 0; S < u.declarations.length; ++S) {
            var I = u.declarations[S];
            if (I.id.type == "Identifier") {
              var k = h.getProp(I.id.name);
              I.init && pe(I.init, h, k, I.id.name);
            } else
              I.init && mt(I.id, h, pe(I.init, h));
          }
        },
        ClassDeclaration: function(u, h) {
          u.id ? h.getProp(u.id.name).addType(ct(u, h, u.id.name)) : ct(u, h);
        },
        ReturnStatement: function(u, h) {
          if (u.argument) {
            var S = c, I = vt(h).fnType;
            I && (I.retval == c && (I.retval = new _()), S = I.retval), pe(u.argument, h, S);
          }
        },
        ForInStatement: function(u, h, S) {
          var I = pe(u.right, h);
          if (u.right.type == "Identifier" && u.right.name in h.props || u.right.type == "MemberExpression" && u.right.property.name == "prototype") {
            xr(h, 5);
            var k = Dt(u.left);
            k.type == "Identifier" ? (k.name in h.props && (h.getProp(k.name).iteratesOver = I), I.getProp("<i>").propagate(qe(k, h))) : mt(k, h, I.getProp("<i>"));
          }
          S(u.body, h, "Statement");
        },
        ForOfStatement: function(u, h, S) {
          var I = Dt(u.left), k;
          I.type == "Identifier" ? k = qe(I, h) : mt(I, h, k = new _()), u.await ? pe(u.right, h, new E(
            ":Symbol.asyncIterator",
            [],
            null,
            new E(
              "next",
              [],
              null,
              new G(
                ":t",
                new G("value", k)
              )
            )
          )) : pe(u.right, h, new E(
            ":Symbol.iterator",
            [],
            null,
            new E(
              "next",
              [],
              null,
              new G("value", k)
            )
          )), S(u.body, h, "Statement");
        }
      }), Ji = r.parse = function(u, h, S) {
        (!h || Array.isArray(h)) && (h = S);
        var I;
        try {
          I = i.parse(u, h);
        } catch {
          I = n.parse(u, h);
        }
        return I;
      };
      r.analyze = function(u, h, S) {
        typeof u == "string" && (u = Ji(u)), h || (h = "file#" + q.origins.length), r.addOrigin(q.curOrigin = h), S || (S = q.topScope), q.startAnalysis(), a.recursive(u, S, null, Z), q.parent && q.parent.signal("preInfer", u, S), a.recursive(u, S, null, zt), q.parent && q.parent.signal("postInfer", u, S), q.curOrigin = null;
      }, r.purge = function(u, h, S) {
        var I = vn(u, h, S);
        ++q.purgeGen, q.topScope.purge(I);
        for (var k in q.props) {
          for (var K = q.props[k], ie = 0; ie < K.length; ++ie) {
            var oe = K[ie], he = oe.props[k];
            (!he || I(he, he.originNode)) && K.splice(ie--, 1);
          }
          K.length || delete q.props[k];
        }
      };
      function vn(u, h, S) {
        var I = Array.isArray(u);
        return I && u.length == 1 && (u = u[0], I = !1), I ? S == null ? function(k) {
          return u.indexOf(k.origin) > -1;
        } : function(k, K) {
          return K && K.start >= h && K.end <= S && u.indexOf(k.origin) > -1;
        } : S == null ? function(k) {
          return k.origin == u;
        } : function(k, K) {
          return K && K.start >= h && K.end <= S && k.origin == u;
        };
      }
      _.prototype.purge = function(u) {
        if (this.purgeGen != q.purgeGen) {
          this.purgeGen = q.purgeGen;
          for (var h = 0; h < this.types.length; ++h) {
            var S = this.types[h];
            u(S, S.originNode) ? this.types.splice(h--, 1) : S.purge(u);
          }
          if (this.types.length || (this.maxWeight = 0), this.forward)
            for (var h = 0; h < this.forward.length; ++h) {
              var I = this.forward[h];
              u(I) ? (this.forward.splice(h--, 1), this.props && (this.props = null)) : I.purge && I.purge(u);
            }
        }
      }, c.purge = function() {
      }, fe.prototype.purge = function(u) {
        if (this.purgeGen == q.purgeGen)
          return !0;
        this.purgeGen = q.purgeGen;
        for (var h in this.props) {
          var S = this.props[h];
          u(S, S.originNode) && this.removeProp(h), S.purge(u);
        }
      }, De.prototype.purge = function(u) {
        if (!fe.prototype.purge.call(this, u)) {
          this.self.purge(u), this.retval.purge(u);
          for (var h = 0; h < this.args.length; ++h)
            this.args[h].purge(u);
        }
      };
      function TT(u) {
        Cn = !0;
        var h = Je(u);
        if (h)
          for (var S = 0; S < h.length; ++S) {
            var I = h[S].getProp(u);
            if (!I.isEmpty())
              return I;
          }
        return c;
      }
      function Uc(u, h, S) {
        var I = q.definitions.ecmascript, k = new fe(!0);
        k.defProp("done").addType(q.bool), h.propagate(k.defProp("value"));
        var K = k;
        S && I && (K = new fe(I["Promise.prototype"]), K.getType().propagate(new H(":t", k)));
        var ie = new De(null, c, u ? [u] : [], u ? ["?"] : [], K), oe = new fe(I ? S ? I.async_generator_prototype : I.generator_prototype : !0);
        return oe.defProp("next").addType(ie), oe;
      }
      function wc(u, h) {
        return u.generator ? u.computeRet ? Uc(u.yieldval, h, u.async) : (u.generator === !0 && (u.generator = Uc(u.yieldval, h, u.async)), u.generator) : h;
      }
      function Mc(u, h, S) {
        var I = Ut(u, S).getFunctionType();
        if (!I)
          return c;
        var k = I.retval;
        if (I.computeRet) {
          for (var K = 0, ie = []; K < h.length; ++K)
            ie.push(Ut(h[K], S));
          var oe = c;
          u.type == "MemberExpression" && (oe = Ut(u.object, S)), k = I.computeRet(oe, ie, h);
        }
        return wc(I, k);
      }
      var La = r.typeFinder = {
        ArrayExpression: function(u, h) {
          return hr(u.elements, h, Ut);
        },
        ObjectExpression: function(u) {
          return u.objType;
        },
        ClassDeclaration: function(u) {
          return u.objType;
        },
        ClassExpression: function(u) {
          return u.objType;
        },
        FunctionDeclaration: function(u) {
          return u.scope.fnType;
        },
        FunctionExpression: function(u) {
          return u.scope.fnType;
        },
        ArrowFunctionExpression: function(u) {
          return u.scope.fnType;
        },
        SequenceExpression: function(u, h) {
          return Ut(u.expressions[u.expressions.length - 1], h);
        },
        UnaryExpression: function(u) {
          return Se(u.operator);
        },
        UpdateExpression: function() {
          return q.num;
        },
        BinaryExpression: function(u, h) {
          if (Ae(u.operator))
            return q.bool;
          if (u.operator == "+") {
            var S = Ut(u.left, h), I = Ut(u.right, h);
            if (S.hasType(q.str) || I.hasType(q.str))
              return q.str;
          }
          return q.num;
        },
        AssignmentExpression: function(u, h) {
          return Ut(u.right, h);
        },
        LogicalExpression: function(u, h) {
          var S = Ut(u.left, h);
          return S.isEmpty() ? Ut(u.right, h) : S;
        },
        ConditionalExpression: function(u, h) {
          var S = Ut(u.consequent, h);
          return S.isEmpty() ? Ut(u.alternate, h) : S;
        },
        NewExpression: function(u, h) {
          var S = Ut(u.callee, h).getFunctionType(), I = S && S.getProp("prototype").getObjType();
          return I ? P(I, S) : c;
        },
        CallExpression: function(u, h) {
          return Mc(u.callee, u.arguments, h);
        },
        MemberExpression: function(u, h) {
          var S = ne(u), I = Ut(u.object, h).getType();
          return I ? I.getProp(S) : S == "<i>" ? c : TT(S);
        },
        MethodDefinition: function(u) {
          var h = ne(u), S = Rt(u.value.scope).getType();
          return S ? S.getProp(h) : c;
        },
        Identifier: function(u, h) {
          return h.hasProp(u.name) || c;
        },
        ThisExpression: function(u, h) {
          return Rt(h);
        },
        Literal: function(u) {
          return Ie(u);
        },
        Super: rt(function(u) {
          return u.superType;
        }),
        TemplateLiteral: function() {
          return q.str;
        },
        TaggedTemplateExpression: function(u, h) {
          return Mc(u.tag, u.quasi.expressions, h);
        },
        YieldExpression: function(u, h) {
          var S = vt(h).fnType;
          return S ? S.yieldval : c;
        }
      };
      function Ut(u, h) {
        var S = La[u.type];
        return S ? S(u, h) : c;
      }
      var Eo = r.searchVisitor = a.make({
        Function: function(u, h, S) {
          a.base.Function(u, u.scope, S);
        },
        CatchClause: function(u, h, S) {
          a.base.CatchClause(u, u.scope, S);
        },
        Property: function(u, h, S) {
          u.computed && S(u.key, h, "Expression"), u.key != u.value && S(u.value, h, "Expression");
        },
        Statement: function(u, h, S) {
          S(u, u.scope || h);
        },
        ImportSpecifier: function(u, h, S) {
          S(u.local, h);
        },
        ImportDefaultSpecifier: function(u, h, S) {
          S(u.local, h);
        },
        ImportNamespaceSpecifier: function(u, h, S) {
          S(u.local, h);
        }
      }), kc = r.searchExprVisitor = a.make({
        MemberExpression: function(u, h, S) {
          S(u.object, h, "Expression"), u.computed && S(u.property, h, "Expression");
        },
        Property: function(u, h, S) {
          u.computed && S(u.key, h, "Expression"), S(u.value, h, "Expression");
        }
      }, Eo);
      r.fullVisitor = a.make({
        MemberExpression: function(u, h, S) {
          S(u.object, h, "Expression"), S(u.property, h, u.computed ? "Expression" : null);
        },
        Property: function(u, h, S) {
          u.computed && S(u.key, h, "Expression"), S(u.value, h, "Expression");
        }
      }, Eo), r.findExpressionAt = function(u, h, S, I, k) {
        var K = k || function(ie, oe) {
          return oe.type == "Identifier" && oe.name == "✖" ? !1 : La.hasOwnProperty(oe.type);
        };
        return a.findNodeAt(u, h, S, K, kc, I || q.topScope);
      }, r.findClosestExpression = function(u, h, S, I, k) {
        var K = k || function(ie, oe) {
          return h != null && oe.start > h || oe.type == "Identifier" && oe.name == "✖" ? !1 : La.hasOwnProperty(oe.type);
        };
        return a.findNodeAround(u, S, K, kc, I || q.topScope);
      }, r.findExpressionAround = function(u, h, S, I, k) {
        var K = k || function(ie, oe) {
          return h != null && oe.start > h || oe.type == "Identifier" && oe.name == "✖" ? !1 : La.hasOwnProperty(oe.type);
        };
        return a.findNodeAround(u, S, K, Eo, I || q.topScope);
      }, r.expressionType = function(u) {
        return Ut(u.node, u.state);
      }, r.parentNode = function(u, h) {
        var S = [];
        function I(k, K, ie) {
          if (k.start <= u.start && k.end >= u.end) {
            var oe = S[S.length - 1];
            if (k == u)
              throw { found: oe };
            oe != k && S.push(k), a.base[ie || k.type](k, K, I), oe != k && S.pop();
          }
        }
        try {
          I(h, null);
        } catch (k) {
          if (k.found)
            return k.found;
          throw k;
        }
      };
      var xa = r.findTypeFromContext = {
        ArrayExpression: function(u, h, S) {
          return S(u, !0).getProp("<i>");
        },
        ObjectExpression: function(u, h, S) {
          for (var I = 0; I < u.properties.length; ++I) {
            var k = h.properties[I];
            if (k.value == h)
              return S(u, !0).getProp(ne(k));
          }
        },
        UnaryExpression: function(u) {
          return Se(u.operator);
        },
        UpdateExpression: function() {
          return q.num;
        },
        BinaryExpression: function(u) {
          return Ae(u.operator) ? q.bool : q.num;
        },
        AssignmentExpression: function(u, h, S) {
          return S(u.left);
        },
        LogicalExpression: function(u, h, S) {
          return S(u, !0);
        },
        ConditionalExpression: function(u, h, S) {
          if (u.consequent == h || u.alternate == h)
            return S(u, !0);
        },
        CallExpression: function(u, h, S) {
          for (var I = 0; I < u.arguments.length; I++) {
            var k = u.arguments[I];
            if (k == h) {
              var K = S(u.callee).getFunctionType();
              if (K instanceof De)
                return K.args[I];
              break;
            }
          }
        },
        ReturnStatement: function(u, h, S) {
          var I = a.findNodeAround(h.sourceFile.ast, h.start - 1, "Function");
          if (I) {
            var k = I.node.type != "FunctionDeclaration" ? S(I.node, !0).getFunctionType() : I.node.scope.fnType;
            if (k)
              return k.retval.getType();
          }
        },
        VariableDeclarator: function(u, h, S) {
          if (u.init == h)
            return S(u.id);
        }
      };
      xa.NewExpression = xa.CallExpression, r.typeFromContext = function(u, h) {
        var S = r.parentNode(h.node, u), I = null;
        if (xa.hasOwnProperty(S.type)) {
          var k = xa[S.type];
          I = k && k(S, h.node, function(K, ie) {
            var oe = { node: K, state: h.state }, he = ie ? r.typeFromContext(u, oe) : r.expressionType(oe);
            return he || c;
          });
        }
        return I || r.expressionType(h);
      };
      var Cn = !1;
      r.resetGuessing = function(u) {
        Cn = u;
      }, r.didGuess = function() {
        return Cn;
      }, r.forAllPropertiesOf = function(u, h) {
        u.gatherProperties(h, 0);
      }, r.findRefs = function(u, h, S, I, k) {
        function K(ie, oe, he) {
          var ye = he[he.length - 2];
          if (!(ye.type == "MemberExpression" && !ye.computed && ie.object) && !(ie.name != S || ie == u.id && u.type == "FunctionDeclaration") && ye.property !== ie) {
            for (var We = oe; We; We = We.prev)
              if (We == I && k(ie, oe, he), S in We.props)
                return;
          }
        }
        a.ancestor(
          u,
          { Identifier: K, VariablePattern: K },
          r.fullVisitor,
          h
        );
      };
      var ST = a.make({
        Function: function(u, h, S) {
          S(u.body, u.scope, u.expression ? "Expression" : "Statement");
        },
        Statement: function(u, h, S) {
          S(u, u.scope || h);
        }
      });
      r.findPropRefs = function(u, h, S, I, k) {
        for (; S && !S.props[I] && !(S.maybeProps && S.maybeProps[I]); )
          S = S.proto;
        if (!S)
          throw new Error("Couldn't locate property in the base object type.");
        function K(ie) {
          for (; ie && ie != S; ) {
            if (ie.props[I] || ie.maybeProps && ie.maybeProps[I])
              return !1;
            ie = ie.proto;
          }
          return ie;
        }
        a.simple(u, {
          MemberExpression: function(ie, oe) {
            ie.computed || ne(ie) != I || K(Ut(ie.object, oe).getType()) && k(ie.property, oe);
          },
          ObjectExpression: function(ie, oe) {
            if (Ut(ie, oe).getType() == S)
              for (var he = 0; he < ie.properties.length; ++he)
                ne(ie.properties[he]) == I && k(ie.properties[he].key, oe);
          },
          MethodDefinition: function(ie) {
            ne(ie) == I && ie.value && K(Rt(ie.value.scope).getType()) && k(ie.key, ie.value.scope);
          }
        }, ST, h);
      };
      var mT = r.scopeAt = function(u, h, S) {
        var I = a.findNodeAround(u, h, function(k, K) {
          return K.scope;
        });
        return I ? I.node.scope : S || q.topScope;
      };
      r.forAllLocalsAt = function(u, h, S, I) {
        var k = mT(u, h, S);
        k.gatherProperties(I, 0);
      }, s = r.def = s.init({}, r);
    });
  }(Ba, Ba.exports)), Ba.exports;
}
(function(e, t) {
  (function(r, i) {
    return i(
      t,
      yP(),
      gd(),
      XE,
      Ad
    );
  })(Tu, function(r, i, n, a, s) {
    var o = /* @__PURE__ */ Object.create(null);
    r.registerPlugin = function(N, b) {
      o[N] = b;
    };
    var l = r.defaultOptions = {
      debug: !1,
      async: !1,
      getFile: function(N, b) {
        this.async && b(null, null);
      },
      normalizeFilename: function(N) {
        return N;
      },
      defs: [],
      plugins: {},
      fetchTimeout: 1e3,
      dependencyBudget: 2e4,
      reuseInstances: !0,
      stripCRs: !1,
      ecmaVersion: 9,
      projectDir: "/",
      parent: null
    }, c = {
      completions: {
        takesFile: !0,
        run: yt
      },
      properties: {
        run: De
      },
      type: {
        takesFile: !0,
        run: It
      },
      documentation: {
        takesFile: !0,
        run: St
      },
      definition: {
        takesFile: !0,
        run: ba
      },
      refs: {
        takesFile: !0,
        fullFile: !0,
        run: Oo
      },
      rename: {
        takesFile: !0,
        fullFile: !0,
        run: Ca
      },
      files: {
        run: li
      }
    };
    r.defineQueryType = function(N, b) {
      c[N] = b;
    };
    function f(N, b) {
      this.name = N, this.parent = b, this.scope = this.text = this.ast = this.lineOffsets = null;
    }
    f.prototype.asLineChar = function(N) {
      return y(this, N);
    };
    function p(N, b) {
      var M = {
        directSourceFile: b,
        allowReturnOutsideFunction: !0,
        allowImportExportEverywhere: !0,
        ecmaVersion: N.options.ecmaVersion,
        allowHashBang: !0
      }, Z = N.signalReturnFirst("preParse", b.text, M) || b.text, X = i.parse(Z, M);
      return N.signal("postParse", X, Z), X;
    }
    var O = /[\uD800-\uDBFF]/g;
    function d(N, b, M) {
      N.text = M.options.stripCRs ? b.replace(/\r\n/g, `
`) : b, N.hasAstral = O.test(N.text), i.withContext(M.cx, function() {
        N.ast = p(M, N);
      }), N.lineOffsets = null;
    }
    var g = r.Server = function(N) {
      this.cx = null, this.options = N || {};
      for (var b in l)
        N.hasOwnProperty(b) || (N[b] = l[b]);
      this.projectDir = N.projectDir.replace(/\\/g, "/"), /\/$/.test(this.projectDir) || (this.projectDir += "/"), this.parent = N.parent, this.handlers = /* @__PURE__ */ Object.create(null), this.files = [], this.fileMap = /* @__PURE__ */ Object.create(null), this.needsPurge = [], this.budgets = /* @__PURE__ */ Object.create(null), this.uses = 0, this.pending = 0, this.asyncError = null, this.mod = {}, this.defs = N.defs.slice(0), this.plugins = /* @__PURE__ */ Object.create(null);
      for (var M in N.plugins)
        N.plugins.hasOwnProperty(M) && this.loadPlugin(M, N.plugins[M]);
      this.reset();
    };
    g.prototype = n.mixin({
      addFile: function(N, b, M) {
        M && !(M in this.fileMap) && (M = null), N in this.fileMap || (N = this.normalizeFilename(N)), W(this, N, M, b);
      },
      delFile: function(N) {
        var b = this.findFile(N);
        if (b) {
          this.needsPurge.push(b.name);
          for (var M = 0; M < this.files.length; M++)
            this.files[M] == b ? this.files.splice(M--, 1) : this.files[M].parent == N && (this.files[M].parent = null);
          delete this.fileMap[b.name];
        }
      },
      reset: function() {
        this.signal("reset"), this.cx = new i.Context(this.defs, this), this.uses = 0, this.budgets = /* @__PURE__ */ Object.create(null);
        for (var N = 0; N < this.files.length; ++N) {
          var b = this.files[N];
          b.scope && (i.clearScopes(b.ast), b.scope = null);
        }
        this.signal("postReset");
      },
      request: function(N, b) {
        var M = Y(N);
        if (M)
          return b(M);
        var Z = this;
        L(this, N, function(X, ee) {
          b(X, ee), Z.uses > 40 && (Z.reset(), V(Z, null, function() {
          }));
        });
      },
      findFile: function(N) {
        return this.fileMap[this.normalizeFilename(N)];
      },
      flush: function(N) {
        var b = this.cx;
        V(this, null, function(M) {
          if (M)
            return N(M);
          i.withContext(b, N);
        });
      },
      startAsyncAction: function() {
        ++this.pending;
      },
      finishAsyncAction: function(N) {
        N && (this.asyncError = N), --this.pending === 0 && this.signal("everythingFetched");
      },
      addDefs: function(N, b) {
        b ? this.defs.unshift(N) : this.defs.push(N), this.cx && this.reset();
      },
      deleteDefs: function(N) {
        for (var b = 0; b < this.defs.length; b++)
          if (this.defs[b]["!name"] == N) {
            this.defs.splice(b, 1), this.cx && this.reset();
            return;
          }
      },
      loadPlugin: function(N, b) {
        if (arguments.length == 1 && (b = this.options.plugins[N] || !0), !(N in this.plugins || !(N in o) || !b)) {
          this.plugins[N] = !0;
          var M = o[N](this, b);
          if (M && (M.defs && this.addDefs(M.defs, M.loadFirst), M.passes))
            for (var Z in M.passes)
              M.passes.hasOwnProperty(Z) && this.on(Z, M.passes[Z]);
        }
      },
      normalizeFilename: function(N) {
        var b = this.options.normalizeFilename(N).replace(/\\/g, "/");
        return b.indexOf(this.projectDir) == 0 && (b = b.slice(this.projectDir.length)), b;
      }
    });
    function L(N, b, M) {
      if (b.query && !c.hasOwnProperty(b.query.type))
        return M("No query type '" + b.query.type + "' defined");
      var Z = b.query;
      Z || M(null, {});
      var X = b.files || [];
      X.length && ++N.uses;
      for (var ee = 0; ee < X.length; ++ee) {
        var ne = X[ee];
        ne.name = N.normalizeFilename(ne.name), ne.type == "delete" ? N.delFile(ne.name) : W(N, ne.name, null, ne.type == "full" ? ne.text : null);
      }
      var ce = typeof b.timeout == "number" ? [b.timeout] : null;
      if (!Z) {
        V(N, ce, function() {
        });
        return;
      }
      var Se = c[Z.type];
      if (Se.takesFile) {
        if (typeof Z.file != "string")
          return M(".query.file must be a string");
        /^#/.test(Z.file) || W(N, Z.file, null);
      }
      V(N, ce, function(Ae) {
        if (Ae)
          return M(Ae);
        var Ie = Se.takesFile && ae(N, X, Z.file);
        if (Se.fullFile && Ie.type == "part")
          return M("Can't run a " + Z.type + " query on a file fragment");
        i.resetGuessing(), i.withContext(N.cx, function() {
          var je, Ge = function() {
            je = Se.run(N, Z, Ie);
          };
          try {
            ce ? i.withTimeout(ce[0], Ge) : Ge();
          } catch (qe) {
            return N.options.debug && qe.name != "TernError" && console.error(qe.stack), M(qe);
          }
          M(null, je);
        });
      });
    }
    function D(N, b) {
      return i.withContext(N.cx, function() {
        b.scope = N.cx.topScope, N.signal("beforeLoad", b), i.analyze(b.ast, b.name, b.scope), N.signal("afterLoad", b);
      }), b;
    }
    function W(N, b, M, Z) {
      var X = N.findFile(b);
      if (X) {
        Z != null && (X.scope && (N.needsPurge.push(b), i.clearScopes(X.ast), X.scope = null), d(X, Z, N)), G(N, X.parent) > G(N, M) && (X.parent = M, X.excluded && (X.excluded = null));
        return;
      }
      var ee = new f(b, M);
      N.files.push(ee), N.fileMap[b] = ee, Z != null ? d(ee, Z, N) : N.options.async ? (N.startAsyncAction(), N.options.getFile(b, function(ne, ce) {
        d(ee, ce || "", N), N.finishAsyncAction(ne);
      })) : d(ee, N.options.getFile(b) || "", N);
    }
    function x(N, b, M) {
      var Z = function() {
        N.off("everythingFetched", Z), clearTimeout(X), V(N, b, M);
      };
      N.on("everythingFetched", Z);
      var X = setTimeout(Z, N.options.fetchTimeout);
    }
    function V(N, b, M) {
      if (N.pending)
        return x(N, b, M);
      var Z = N.fetchError;
      if (Z)
        return N.fetchError = null, M(Z);
      N.needsPurge.length > 0 && i.withContext(N.cx, function() {
        i.purge(N.needsPurge), N.needsPurge.length = 0;
      });
      for (var X = !0, ee = 0; ee < N.files.length; ) {
        for (var ne = []; ee < N.files.length; ++ee) {
          var ce = N.files[ee];
          ce.text == null ? X = !1 : ce.scope == null && !ce.excluded && ne.push(ce);
        }
        ne.sort(function(Ie, je) {
          return G(N, Ie.parent) - G(N, je.parent);
        });
        for (var Se = 0; Se < ne.length; Se++) {
          var ce = ne[Se];
          if (ce.parent && !re(N, ce))
            ce.excluded = !0;
          else if (b) {
            var Ae = +/* @__PURE__ */ new Date();
            try {
              i.withTimeout(b[0], function() {
                D(N, ce);
              });
            } catch (je) {
              if (je instanceof i.TimedOut)
                return M(je);
              throw je;
            }
            b[0] -= +/* @__PURE__ */ new Date() - Ae;
          } else
            D(N, ce);
        }
      }
      X ? M() : x(N, b, M);
    }
    function _(N) {
      var b = N.indexOf(`
`);
      return b < 0 ? N : N.slice(0, b);
    }
    function $(N, b, M) {
      var Z = Math.max(0, M - 500), X = null;
      if (!/^\s*$/.test(N))
        for (; ; ) {
          var ee = b.indexOf(N, Z);
          if (ee < 0 || ee > M + 500)
            break;
          (X == null || Math.abs(X - M) > Math.abs(ee - M)) && (X = ee), Z = ee + N.length;
        }
      return X;
    }
    function z(N) {
      for (var b = 0; N; ++b, N = N.prev)
        ;
      return b;
    }
    function F(N) {
      var b = new Error(N);
      return b.name = "TernError", b;
    }
    function ae(N, b, M) {
      var Z = M.match(/^#(\d+)$/);
      if (!Z)
        return N.findFile(M);
      var X = b[Z[1]];
      if (!X || X.type == "delete")
        throw F("Reference to unknown file " + M);
      if (X.type == "full")
        return N.fileMap[X.name];
      var ee = X.backing = N.fileMap[X.name], ne = R(ee, X.offsetLines == null ? X.offset : { line: X.offsetLines, ch: 0 }, !0), ce = _(X.text), Se = $(ce, ee.text, ne), Ae = Se ?? Math.max(0, ee.text.lastIndexOf(`
`, ne)), Ie, je;
      return i.withContext(N.cx, function() {
        i.purge(X.name, Ae, Ae + X.text.length);
        var Ge = X.text, qe;
        if (qe = Ge.match(/(?:"([^"]*)"|([\w$]+))\s*:\s*function\b/)) {
          var er = s.findNodeAround(X.backing.ast, Ae, "ObjectExpression");
          er && er.node.objType && (Ie = { type: er.node.objType, prop: qe[2] || qe[1] });
        }
        if (Se && (qe = ce.match(/^(.*?)\bfunction\b/))) {
          for (var mt = qe[1].length, Rt = "", Nt = 0; Nt < mt; ++Nt)
            Rt += " ";
          X.text = Rt + Ge.slice(mt), je = !0;
        }
        var ct = i.scopeAt(ee.ast, Ae, ee.scope), hr = i.scopeAt(ee.ast, Ae + Ge.length, ee.scope), rt = X.scope = z(ct) < z(hr) ? hr : ct;
        X.ast = p(N, X), i.analyze(X.ast, X.name, rt);
        e:
          if (Ie || je) {
            var xt = i.scopeAt(X.ast, ce.length, ct);
            if (!xt.fnType)
              break e;
            if (Ie) {
              var ui = Ie.type.getProp(Ie.prop);
              ui.addType(xt.fnType);
            } else if (je) {
              var pe = i.scopeAt(ee.ast, Ae + ce.length, ee.scope);
              if (pe == ct || !pe.fnType)
                break e;
              var Dt = pe.fnType, zt = xt.fnType;
              if (!zt || zt.name != Dt.name && Dt.name)
                break e;
              for (var Nt = 0, Ji = Math.min(Dt.args.length, zt.args.length); Nt < Ji; ++Nt)
                Dt.args[Nt].propagate(zt.args[Nt]);
              Dt.self.propagate(zt.self), zt.retval.propagate(Dt.retval);
            }
          }
      }), X;
    }
    function U(N) {
      var b = 0;
      return s.simple(N, { Expression: function() {
        ++b;
      } }), b;
    }
    function G(N, b) {
      for (var M = 0; b; )
        b = N.fileMap[b].parent, ++M;
      return M;
    }
    function H(N, b) {
      for (; ; ) {
        var M = N.fileMap[b.parent];
        if (!M.parent)
          break;
        b = M;
      }
      return b.name;
    }
    function re(N, b) {
      var M = H(N, b), Z = U(b.ast), X = N.budgets[M];
      return X == null && (X = N.budgets[M] = N.options.dependencyBudget), X < Z ? !1 : (N.budgets[M] = X - Z, !0);
    }
    function B(N) {
      return typeof N == "number" || typeof N == "object" && typeof N.line == "number" && typeof N.ch == "number";
    }
    function Y(N) {
      if (N.query) {
        if (typeof N.query.type != "string")
          return ".query.type must be a string";
        if (N.query.start && !B(N.query.start))
          return ".query.start must be a position";
        if (N.query.end && !B(N.query.end))
          return ".query.end must be a position";
      }
      if (N.files) {
        if (!Array.isArray(N.files))
          return "Files property must be an array";
        for (var b = 0; b < N.files.length; ++b) {
          var M = N.files[b];
          if (typeof M != "object")
            return ".files[n] must be objects";
          if (typeof M.name != "string")
            return ".files[n].name must be a string";
          if (M.type == "delete")
            continue;
          if (typeof M.text != "string")
            return ".files[n].text must be a string";
          if (M.type == "part") {
            if (!B(M.offset) && typeof M.offsetLines != "number")
              return ".files[n].offset must be a position";
          } else if (M.type != "full")
            return '.files[n].type must be "full" or "part"';
        }
      }
    }
    var E = 25;
    function m(N, b, M) {
      var Z = b + M, X;
      if (N.hasAstral)
        for (O.lastIndex = b; (X = O.exec(N.text)) && X.index < Z; )
          Z++;
      return Z;
    }
    function P(N, b) {
      for (var M = N.text, Z = N.lineOffsets || (N.lineOffsets = [0]), ee = 0, ne = 0, X = Math.min(Math.floor(b / E), Z.length - 1), ee = Z[X], ne = X * E; ne < b; ) {
        if (++ne, ee = M.indexOf(`
`, ee) + 1, ee === 0)
          return null;
        ne % E === 0 && Z.push(ee);
      }
      return ee;
    }
    var R = r.resolvePos = function(N, b, M) {
      if (typeof b != "number") {
        var Z = P(N, b.line);
        if (Z == null)
          if (M)
            b = N.text.length;
          else
            throw F("File doesn't contain a line " + b.line);
        else
          b = m(N, Z, b.ch);
      } else
        b = m(N, 0, b);
      if (b > N.text.length)
        if (M)
          b = N.text.length;
        else
          throw F("Position " + b + " is outside of file.");
      return b;
    };
    function A(N, b, M) {
      var Z = M - b, X;
      if (N.hasAstral)
        for (O.lastIndex = b; (X = O.exec(N.text)) && X.index < M; )
          Z--;
      return Z;
    }
    function y(N, b) {
      if (!N)
        return { line: 0, ch: 0 };
      for (var M = N.lineOffsets || (N.lineOffsets = [0]), Z = N.text, X, ee, ne = M.length - 1; ne >= 0; --ne)
        M[ne] <= b && (X = ne * E, ee = M[ne]);
      for (; ; ) {
        var ce = Z.indexOf(`
`, ee);
        if (ce >= b || ce < 0)
          break;
        ee = ce + 1, ++X;
      }
      return { line: X, ch: A(N, ee, b) };
    }
    var C = r.outputPos = function(N, b, M) {
      if (N.lineCharPositions) {
        var Z = y(b, M);
        return b.type == "part" && (Z.line += b.offsetLines != null ? b.offsetLines : y(b.backing, b.offset).line), Z;
      } else
        return A(b, 0, M) + (b.type == "part" ? b.offset : 0);
    };
    function j(N) {
      for (var b in N)
        N[b] == null && delete N[b];
      return N;
    }
    function w(N, b, M) {
      M != null && (N[b] = M);
    }
    function J(N, b) {
      typeof N != "string" && (N = N.name, b = b.name);
      var M = /^[A-Z]/.test(N), Z = /^[A-Z]/.test(b);
      return M == Z ? N < b ? -1 : N == b ? 0 : 1 : M ? 1 : -1;
    }
    function te(N, b, M) {
      return N.type == "Literal" && typeof N.value == "string" && N.start == b - 1 && N.end <= M + 1;
    }
    function se(N, b) {
      for (var M = 0; M < N.properties.length; M++) {
        var Z = N.properties[M];
        if (Z.key && Z.key.start <= b && Z.key.end >= b)
          return Z;
      }
    }
    var ge = "break do instanceof typeof case else new var catch finally return void continue for switch while debugger function this with default if throw delete in try".split(" "), fe = ge.concat("export class extends const super yield import let static".split(" ")), et = r.addCompletion = function(N, b, M, Z, X) {
      for (var ee = N.types || N.docs || N.urls || N.origins, ne = ee || N.depths, ce = 0; ce < b.length; ++ce) {
        var Se = b[ce];
        if ((ne ? Se.name : Se) == M)
          return;
      }
      var Ae = ne ? { name: M } : M;
      if (b.push(Ae), Z && ee) {
        i.resetGuessing();
        var Ie = Z.getType();
        Ae.guess = i.didGuess(), N.types && (Ae.type = i.toString(Z)), N.docs && w(Ae, "doc", tt(N, Z.doc || Ie && Ie.doc)), N.urls && w(Ae, "url", Z.url || Ie && Ie.url), N.origins && w(Ae, "origin", Z.origin || Ie && Ie.origin);
      }
      return N.depths && (Ae.depth = X || 0), Ae;
    };
    function yt(N, b, M) {
      if (b.end == null)
        throw F("missing .query.end field");
      var Z = N.signalReturnFirst("completion", M, b);
      if (Z)
        return Z;
      for (var X = R(M, b.end), ee = X, ne = M.text; X && a.isIdentifierChar(ne.charCodeAt(X - 1)); )
        --X;
      if (b.expandWordForward !== !1)
        for (; ee < ne.length && a.isIdentifierChar(ne.charCodeAt(ee)); )
          ++ee;
      var ce = ne.slice(X, ee), Se = [], Ae;
      b.caseInsensitive && (ce = ce.toLowerCase());
      function Ie(pe, Dt, zt, Ji) {
        if (!((Nt || b.omitObjectPrototype !== !1) && Dt == N.cx.protos.Object && !ce) && !(b.filter !== !1 && ce && (b.caseInsensitive ? pe.toLowerCase() : pe).indexOf(ce) !== 0) && !(Ae && Ae.props[pe])) {
          var vn = et(b, Se, pe, Dt && Dt.props[pe], zt);
          Ji && vn && typeof vn != "string" && Ji(vn);
        }
      }
      var je, Ge, qe, er, mt = i.findExpressionAround(M.ast, null, X, M.scope), Rt, Nt;
      if (mt) {
        var ct = mt.node;
        if (b.inLiteral === !1 && ct.type === "Literal" && (typeof ct.value == "string" || ct.regex))
          return {
            start: C(b, M, X),
            end: C(b, M, ee),
            completions: []
          };
        if (ct.type == "MemberExpression" && ct.object.end < X)
          Rt = mt;
        else if (te(ct, X, ee)) {
          var hr = i.parentNode(ct, M.ast);
          hr.type == "MemberExpression" && hr.property == ct && (Rt = { node: hr, state: mt.state });
        } else if (ct.type == "ObjectExpression") {
          var rt = se(ct, ee);
          rt ? (Nt = mt, Ge = er = rt.key.name || rt.key.value) : !ce && !/:\s*$/.test(M.text.slice(0, X)) && (Nt = mt, Ge = er = !0);
        }
      }
      if (Nt)
        qe = i.typeFromContext(M.ast, Nt), Ae = Nt.node.objType;
      else if (Rt)
        Ge = Rt.node.property, Ge = Ge.type == "Literal" ? Ge.value.slice(1) : Ge.name, Rt.node = Rt.node.object, qe = i.expressionType(Rt);
      else if (ne.charAt(X - 1) == ".") {
        for (var xt = X - 1; xt && (ne.charAt(xt - 1) == "." || a.isIdentifierChar(ne.charCodeAt(xt - 1))); )
          xt--;
        var ui = ne.slice(xt, X - 1);
        ui && (qe = i.def.parsePath(ui, M.scope).getObjType(), Ge = ce);
      }
      if (Ge != null) {
        if (N.cx.completingProperty = Ge, qe && i.forAllPropertiesOf(qe, Ie), !Se.length && b.guess !== !1 && qe && qe.guessProperties && qe.guessProperties(function(pe, Dt, zt) {
          pe != Ge && pe != "✖" && pe != "<i>" && Ie(pe, Dt, zt);
        }), !Se.length && ce.length >= 2 && b.guess !== !1)
          for (var Ge in N.cx.props)
            Ie(Ge, N.cx.props[Ge][0], 0);
        je = "memberCompletion";
      } else
        i.forAllLocalsAt(M.ast, X, M.scope, Ie), b.includeKeywords && (N.options.ecmaVersion >= 6 ? fe : ge).forEach(function(pe) {
          Ie(pe, null, 0, function(Dt) {
            Dt.isKeyword = !0;
          });
        }), je = "variableCompletion";
      return N.signal(je, M, X, ee, Ie), b.sort !== !1 && Se.sort(J), N.cx.completingProperty = null, {
        start: C(b, M, X),
        end: C(b, M, ee),
        isProperty: !!Ge,
        isObjectKey: !!er,
        completions: Se
      };
    }
    function De(N, b) {
      var M = b.prefix, Z = [];
      for (var X in N.cx.props)
        X != "<i>" && (!M || X.indexOf(M) === 0) && Z.push(X);
      return b.sort !== !1 && Z.sort(J), { completions: Z };
    }
    function Ce(N, b) {
      var M = N.body, Z, X;
      return M ? (Array.isArray(M) ? (Z = M[0].start, X = M[M.length - 1].end) : (Z = M.start, X = M.end), Z <= b && X >= b) : !1;
    }
    var Ee = r.findQueryExpr = function(N, b, M) {
      if (b.end == null)
        throw F("missing .query.end field");
      if (b.variable) {
        var Z = i.scopeAt(N.ast, R(N, b.end), N.scope);
        return {
          node: { type: "Identifier", name: b.variable, start: b.end, end: b.end + 1 },
          state: Z
        };
      } else {
        var X = b.start && R(N, b.start), ee = R(N, b.end), ne = i.findExpressionAt(N.ast, X, ee, N.scope);
        if (!ne) {
          var ce = i.findClosestExpression(N.ast, X, ee, N.scope);
          ce && !Ce(ce.node, ee) && (M || (X ?? ee) - ce.node.start < 20 || ce.node.end - ee < 20) && (ne = ce);
        }
        if (!ne) {
          var Se = i.findExpressionAround(N.ast, X, ee, N.scope);
          Se && !Ce(Se.node, ee) && (Se.node.type == "ObjectExpression" || M || (X ?? ee) - Se.node.start < 20 || Se.node.end - ee < 20) && (ne = Se);
        }
        return ne;
      }
    };
    function ut(N, b, M) {
      var Z = b.start && R(N, b.start), X = R(N, b.end), ee = null, ne = i.findExpressionAround(N.ast, Z, X, N.scope);
      return ne && !Ce(ne.node, X) && (ne.node.type == "ObjectExpression" || M || (Z ?? X) - ne.node.start < 20 || ne.node.end - X < 20) && (ee = ne), ee;
    }
    function Je(N, b, M) {
      var Z = Ee(N, b, M);
      if (Z)
        return Z;
      throw F("No expression at the given position.");
    }
    function q(N) {
      return !N || !(N = N.getType()) || !(N instanceof i.Obj) ? null : N;
    }
    function ot(N, b, M, Z) {
      var X;
      Z && (i.resetGuessing(), X = i.expressionType(Z));
      var ee = N.hasHandler("typeAt");
      if (ee)
        for (var ne = R(M, b.end), ce = 0; ce < ee.length; ce++)
          X = ee[ce](M, ne, Z, X);
      if (!X)
        throw F("No type found at the given position.");
      var Se;
      if (Z.node.type == "ObjectExpression" && b.end != null && (Se = se(Z.node, R(M, b.end)))) {
        var Ae = Se.key.name, Ie = q(i.typeFromContext(M.ast, Z));
        if (Ie && Ie.hasProp(Ae))
          X = Ie.hasProp(Ae);
        else {
          var je = q(X);
          je && je.hasProp(Ae) && (X = je.hasProp(Ae));
        }
      }
      return X;
    }
    function $t(N, b, M, Z) {
      var X, ne, ee = ot(N, b, M, Z), ne = ee;
      if (b.preferFunction ? ee = ee.getFunctionType() || ee.getType() : ee = ee.getType(), Z && (Z.node.type == "Identifier" ? X = Z.node.name : Z.node.type == "MemberExpression" && !Z.node.computed ? X = Z.node.property.name : Z.node.type == "MethodDefinition" && !Z.node.computed && (X = Z.node.key.name)), b.depth != null && typeof b.depth != "number")
        throw F(".query.depth must be a number");
      return [ee, X, ne];
    }
    function It(N, b, M) {
      var Z, X, ee, ne = Ee(M, b), ce = $t(N, b, M, ne);
      Z = ce[0], Z || (ne = ut(M, b), ce = $t(N, b, M, ne), Z = ce[0]), X = ce[1], ee = ce[2];
      var Se = {
        guess: i.didGuess(),
        type: i.toString(ee, b.depth),
        name: Z && Z.name,
        exprName: X,
        doc: ee.doc,
        url: ee.url
      };
      return Z && lt(b, Z, Se), j(Se);
    }
    function tt(N, b) {
      if (!b)
        return null;
      if (N.docFormat == "full")
        return b;
      var M = /.\n[\s@\n]/.exec(b);
      if (M && (b = b.slice(0, M.index + 1)), b = b.replace(/\n\s*/g, " "), b.length < 100)
        return b;
      var Z = /[\.!?] [A-Z]/g;
      Z.lastIndex = 80;
      var X = Z.exec(b);
      return X && (b = b.slice(0, X.index + 1)), b;
    }
    function St(N, b, M) {
      var Z = Ee(M, b), X = ot(N, b, M, Z), ee = X.getType();
      ee || (Z = ut(M, b), X = ot(N, b, M, Z), ee = X.getType());
      var ne = { url: X.url, doc: tt(b, X.doc), type: i.toString(X) };
      return ee && lt(b, ee, ne), j(ne);
    }
    function lt(N, b, M) {
      M.url || (M.url = b.url), M.doc || (M.doc = tt(N, b.doc)), M.origin || (M.origin = b.origin);
      var Z, X = i.cx().protos;
      !M.url && !M.doc && b.proto && (Z = b.proto.hasCtor) && b.proto != X.Object && b.proto != X.Function && b.proto != X.Array && (M.url = Z.url, M.doc = tt(N, Z.doc));
    }
    var vt = r.getSpan = function(N) {
      if (N.origin) {
        if (N.originNode) {
          var b = N.originNode;
          return /^Function/.test(b.type) && b.id && (b = b.id), { origin: N.origin, node: b };
        }
        if (N.span)
          return { origin: N.origin, span: N.span };
      }
    }, xr = r.storeSpan = function(N, b, M, Z) {
      if (Z.origin = M.origin, M.span) {
        var X = /^(\d+)\[(\d+):(\d+)\]-(\d+)\[(\d+):(\d+)\]$/.exec(M.span);
        Z.start = b.lineCharPositions ? { line: Number(X[2]), ch: Number(X[3]) } : Number(X[1]), Z.end = b.lineCharPositions ? { line: Number(X[5]), ch: Number(X[6]) } : Number(X[4]);
      } else {
        var ee = N.fileMap[M.origin];
        Z.start = C(b, ee, M.node.start), Z.end = C(b, ee, M.node.end);
      }
    };
    function ba(N, b, M) {
      var Z = Ee(M, b), X = ot(N, b, M, Z);
      if (i.didGuess())
        return {};
      var ee = vt(X), ne = { url: X.url, doc: tt(b, X.doc), origin: X.origin };
      if (X.types)
        for (var ce = X.types.length - 1; ce >= 0; --ce) {
          var Se = X.types[ce];
          lt(b, Se, ne), ee || (ee = vt(Se));
        }
      if (ee && ee.node) {
        var Ae = ee.node.sourceFile || N.fileMap[ee.origin], Ie = C(b, Ae, ee.node.start), je = C(b, Ae, ee.node.end);
        ne.start = Ie, ne.end = je, ne.file = ee.origin;
        var Ge = Math.max(0, ee.node.start - 50);
        ne.contextOffset = ee.node.start - Ge, ne.context = Ae.text.slice(Ge, Ge + 50);
      } else
        ee && (ne.file = ee.origin, xr(N, b, ee, ne));
      return j(ne);
    }
    function va(N, b, M, Z, X) {
      for (var ee = Z.node.name, ne = Z.state; ne && !(ee in ne.props); ne = ne.prev)
        ;
      if (!ne)
        throw F("Could not find a definition for " + ee);
      var ce, Se = [];
      function Ae(qe) {
        return function(er, mt, Rt) {
          var Nt = {
            file: qe.name,
            start: C(b, qe, er.start),
            end: C(b, qe, er.end)
          };
          if (X) {
            for (var ct = mt; ct != ne; ct = ct.prev) {
              var hr = ct.hasProp(X);
              if (hr)
                throw F("Renaming `" + ee + "` to `" + X + "` would make a variable at line " + (y(qe, er.start).line + 1) + " point to the definition at line " + (y(qe, hr.name.start).line + 1));
            }
            var rt = Rt[Rt.length - 2];
            rt && rt.type == "Property" && rt.key == rt.value && (Nt.isShorthand = !0);
          }
          Se.push(Nt);
        };
      }
      if (ne.originNode) {
        if (ce = "local", X) {
          for (var Ie = ne.prev; Ie && !(X in Ie.props); Ie = Ie.prev)
            ;
          Ie && i.findRefs(ne.originNode, ne, X, Ie, function(qe) {
            throw F("Renaming `" + ee + "` to `" + X + "` would shadow the definition used at line " + (y(M, qe.start).line + 1));
          });
        }
        i.findRefs(ne.originNode, ne, ee, ne, Ae(M));
      } else if (ce = "global", b.onlySourceFile)
        i.findRefs(M.ast, M.scope, ee, ne, Ae(M));
      else
        for (var je = 0; je < N.files.length; ++je) {
          var Ge = N.files[je];
          i.findRefs(Ge.ast, Ge.scope, ee, ne, Ae(Ge));
        }
      return { refs: Se, type: ce, name: ee };
    }
    function qi(N, b, M, Z, X) {
      var ee = i.expressionType(Z);
      Z.node.type == "MethodDefinition" && (ee = ee.propertyOf);
      var ne = ee.getObjType();
      if (!ne)
        throw F("Couldn't determine type of base object.");
      var ce = [];
      function Se(je) {
        return function(Ge) {
          ce.push({
            file: je.name,
            start: C(b, je, Ge.start),
            end: C(b, je, Ge.end)
          });
        };
      }
      if (b.onlySourceFile)
        i.findPropRefs(M.ast, M.scope, ne, X.name, Se(M));
      else
        for (var Ae = 0; Ae < N.files.length; ++Ae) {
          var Ie = N.files[Ae];
          i.findPropRefs(Ie.ast, Ie.scope, ne, X.name, Se(Ie));
        }
      return { refs: ce, name: X.name };
    }
    function Oo(N, b, M) {
      var Z = Je(M, b, !0);
      if (Z && Z.node.type == "Identifier")
        return va(N, b, M, Z);
      if (Z && Z.node.type == "MemberExpression" && !Z.node.computed) {
        var X = Z.node.property;
        return Z.node = Z.node.object, qi(N, b, M, Z, X);
      } else if (Z && Z.node.type == "ObjectExpression")
        for (var ee = R(M, b.end), ne = 0; ne < Z.node.properties.length; ++ne) {
          var ce = Z.node.properties[ne].key;
          if (ce.start <= ee && ce.end >= ee)
            return qi(N, b, M, Z, ce);
        }
      else if (Z && Z.node.type == "MethodDefinition") {
        var X = Z.node.key;
        return qi(N, b, M, Z, X);
      }
      throw F("Not at a variable or property name.");
    }
    function Ca(N, b, M) {
      if (typeof b.newName != "string")
        throw F(".query.newName should be a string");
      var Z = Je(M, b);
      if (!Z || Z.node.type != "Identifier")
        throw F("Not at a variable.");
      var X = va(N, b, M, Z, b.newName), ee = X.refs;
      delete X.refs, X.files = N.files.map(function(Ae) {
        return Ae.name;
      });
      for (var ne = X.changes = [], ce = 0; ce < ee.length; ++ce) {
        var Se = ee[ce];
        Se.isShorthand ? Se.text = Z.node.name + ": " + b.newName : Se.text = b.newName, ne.push(Se);
      }
      return X;
    }
    function li(N) {
      return { files: N.files.map(function(b) {
        return b.name;
      }) };
    }
    r.version = "0.24.3";
  });
})(gl, gl.exports);
var IP = gl.exports;
const NP = {}, PP = {}, _P = {
  "!type": "fn(number)",
  "!doc": "Numbers can be formatted to look like currency, percentages, times, or even plain old numbers with decimal places, thousands, and abbreviations.",
  "!url": "https://numbrojs.com/format.html"
}, bP = {}, vP = {
  "!name": "ecmascript",
  "!define": {
    "Error.prototype": "Error.prototype",
    propertyDescriptor: {
      enumerable: "bool",
      configurable: "bool",
      value: "?",
      writable: "bool",
      get: "fn() -> ?",
      set: "fn(value: ?)"
    },
    "Promise.prototype": {
      catch: {
        "!doc": "The catch() method returns a Promise and deals with rejected cases only. It behaves the same as calling Promise.prototype.then(undefined, onRejected).",
        "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch",
        "!type": "fn(onRejected: fn(reason: ?)) -> !this"
      },
      then: {
        "!doc": "The then() method returns a Promise. It takes two arguments, both are callback functions for the success and failure cases of the Promise.",
        "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then",
        "!type": "fn(onFulfilled: fn(value: ?), onRejected: fn(reason: ?)) -> !custom:Promise_then",
        "!effects": [
          "call !0 !this.:t"
        ]
      }
    },
    Promise_reject: {
      "!type": "fn(reason: ?) -> !this",
      "!doc": "The Promise.reject(reason) method returns a Promise object that is rejected with the given reason.",
      "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/reject"
    },
    iter_prototype: {
      ":Symbol.iterator": "fn() -> !this"
    },
    iter: {
      "!proto": "iter_prototype",
      next: {
        "!type": "fn() -> +iter_result[value=!this.:t]",
        "!doc": "Return the next item in the sequence.",
        "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators"
      },
      "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators"
    },
    iter_result: {
      done: "bool",
      value: "?"
    },
    generator_prototype: {
      "!proto": "iter_prototype",
      next: "fn(value?: ?) -> iter_result",
      return: "fn(value?: ?) -> iter_result",
      throw: "fn(exception: +Error)"
    },
    Proxy_handler: {
      "!doc": "The proxy's handler object is a placeholder object which contains traps for proxies.",
      "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler",
      getPrototypeOf: "fn(target: ?)",
      setPrototypeOf: "fn(target: ?, prototype: ?)",
      isExtensible: "fn(target: ?)",
      preventExtensions: "fn(target: ?)",
      getOwnPropertyDescriptor: "fn(target: ?, property: string) -> propertyDescriptor",
      defineProperty: "fn(target: ?, property: string, descriptor: propertyDescriptor)",
      has: "fn(target: ?, property: string)",
      get: "fn(target: ?, property: string)",
      set: "fn(target: ?, property: string, value: ?)",
      deleteProperty: "fn(target: ?, property: string)",
      enumerate: "fn(target: ?)",
      ownKeys: "fn(target: ?)",
      apply: "fn(target: ?, self: ?, arguments: [?])",
      construct: "fn(target: ?, arguments: [?])"
    },
    Proxy_revocable: {
      proxy: "+Proxy",
      revoke: "fn()"
    },
    TypedArray: {
      "!type": "fn(size: number)",
      "!doc": "A TypedArray object describes an array-like view of an underlying binary data buffer. There is no global property named TypedArray, nor is there a directly visible TypedArray constructor.  Instead, there are a number of different global properties, whose values are typed array constructors for specific element types, listed below. On the following pages you will find common properties and methods that can be used with any typed array containing elements of any type.",
      "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray",
      from: {
        "!type": "fn(arrayLike: ?, mapFn?: fn(elt: ?, i: number) -> number, thisArg?: ?) -> +TypedArray",
        "!effects": [
          "call !1 this=!2 !0.<i> number"
        ],
        "!doc": "Creates a new typed array from an array-like or iterable object.",
        "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/from"
      },
      of: {
        "!type": "fn(elements: number) -> +TypedArray",
        "!doc": "Creates a new typed array from a variable number of arguments.",
        "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/of"
      },
      BYTES_PER_ELEMENT: {
        "!type": "number",
        "!doc": "The TypedArray.BYTES_PER_ELEMENT property represents the size in bytes of each element in an typed array.",
        "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT"
      },
      name: {
        "!type": "string",
        "!doc": "The TypedArray.name property represents a string value of the typed array constructor name.",
        "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/name"
      },
      prototype: {
        "<i>": "number",
        buffer: {
          "!type": "+ArrayBuffer",
          "!doc": "The buffer accessor property represents the ArrayBuffer referenced by a TypedArray at construction time.",
          "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/buffer"
        },
        byteLength: {
          "!type": "number",
          "!doc": "The byteLength accessor property represents the length (in bytes) of a typed array from the start of its ArrayBuffer.",
          "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/byteLength"
        },
        byteOffset: {
          "!type": "number",
          "!doc": "The byteOffset accessor property represents the offset (in bytes) of a typed array from the start of its ArrayBuffer.",
          "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/byteOffset"
        },
        copyWithin: {
          "!type": "fn(target: number, start: number, end?: number) -> ?",
          "!doc": "The copyWithin() method copies the sequence of array elements within the array to the position starting at target. The copy is taken from the index positions of the second and third arguments start and end. The end argument is optional and defaults to the length of the array. This method has the same algorithm as Array.prototype.copyWithin. TypedArray is one of the typed array types here.",
          "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/copyWithin"
        },
        entries: {
          "!type": "fn() -> +iter[:t=number]",
          "!doc": "The entries() method returns a new Array Iterator object that contains the key/value pairs for each index in the array.",
          "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/entries"
        },
        every: {
          "!type": "fn(callback: fn(element: number, index: number, array: TypedArray) -> bool, thisArg?: ?) -> bool",
          "!effects": [
            "call !0 this=!1 number number !this"
          ],
          "!doc": "The every() method tests whether all elements in the typed array pass the test implemented by the provided function. This method has the same algorithm as Array.prototype.every(). TypedArray is one of the typed array types here.",
          "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/every"
        },
        fill: {
          "!type": "fn(value: number, start?: number, end?: number)",
          "!doc": "The fill() method fills all the elements of a typed array from a start index to an end index with a static value. This method has the same algorithm as Array.prototype.fill(). TypedArray is one of the typed array types here.",
          "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/fill"
        },
        filter: {
          "!type": "fn(test: fn(element: number, i: number) -> bool, context?: ?) -> !this",
          "!effects": [
            "call !0 this=!1 number number"
          ],
          "!doc": "Creates a new array with all of the elements of this array for which the provided filtering function returns true. See also Array.prototype.filter().",
          "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/filter"
        },
        find: {
          "!type": "fn(callback: fn(element: number, index: number, array: +TypedArray) -> bool, thisArg?: ?) -> number",
          "!effects": [
            "call !0 this=!1 number number !this"
          ],
          "!doc": `The find() method returns a value in the typed array, if an element satisfies the provided testing function. Otherwise undefined is returned. TypedArray is one of the typed array types here.
See also the findIndex() method, which returns the index of a found element in the typed array instead of its value.`,
          "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/find"
        },
        findIndex: {
          "!type": "fn(callback: fn(element: number, index: number, array: +TypedArray) -> bool, thisArg?: ?) -> number",
          "!effects": [
            "call !0 this=!1 number number !this"
          ],
          "!doc": `The findIndex() method returns an index in the typed array, if an element in the typed array satisfies the provided testing function. Otherwise -1 is returned.
See also the find() method, which returns the value of a found element in the typed array instead of its index.`,
          "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/findIndex"
        },
        forEach: {
          "!type": "fn(callback: fn(value: number, key: number, array: +TypedArray), thisArg?: ?)",
          "!effects": [
            "call !0 this=!1 number number !this"
          ],
          "!doc": "Executes a provided function once per array element.",
          "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/forEach"
        },
        indexOf: {
          "!type": "fn(searchElement: number, fromIndex?: number) -> number",
          "!doc": "The indexOf() method returns the first index at which a given element can be found in the typed array, or -1 if it is not present. This method has the same algorithm as Array.prototype.indexOf(). TypedArray is one of the typed array types here.",
          "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/indexOf"
        },
        join: {
          "!type": "fn(separator?: string) -> string",
          "!doc": "The join() method joins all elements of an array into a string. This method has the same algorithm as Array.prototype.join(). TypedArray is one of the typed array types here.",
          "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/join"
        },
        keys: {
          "!type": "fn() -> +iter[:t=number]",
          "!doc": "The keys() method returns a new Array Iterator object that contains the keys for each index in the array.",
          "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/keys"
        },
        lastIndexOf: {
          "!type": "fn(searchElement: number, fromIndex?: number) -> number",
          "!doc": "The lastIndexOf() method returns the last index at which a given element can be found in the typed array, or -1 if it is not present. The typed array is searched backwards, starting at fromIndex. This method has the same algorithm as Array.prototype.lastIndexOf(). TypedArray is one of the typed array types here.",
          "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/lastIndexOf"
        },
        length: {
          "!type": "number",
          "!doc": "Returns the number of elements hold in the typed array. Fixed at construction time and thus read only.",
          "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/length"
        },
        map: {
          "!type": "fn(f: fn(element: number, i: number) -> number, context?: ?) -> +TypedArray",
          "!effects": [
            "call !0 this=!1 number number"
          ],
          "!doc": "Creates a new array with the results of calling a provided function on every element in this array. See also Array.prototype.map().",
          "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/map"
        },
        reduce: {
          "!type": "fn(combine: fn(sum: ?, elt: number, i: number) -> ?, init?: ?) -> !0.!ret",
          "!effects": [
            "call !0 !1 number number"
          ],
          "!doc": "Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value. See also Array.prototype.reduce().",
          "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/reduce"
        },
        reduceRight: {
          "!type": "fn(combine: fn(sum: ?, elt: number, i: number) -> ?, init?: ?) -> !0.!ret",
          "!effects": [
            "call !0 !1 number number"
          ],
          "!doc": "Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value. See also Array.prototype.reduceRight().",
          "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/reduceRight"
        },
        reverse: {
          "!type": "fn()",
          "!doc": "The reverse() method reverses a typed array in place. The first typed array element becomes the last and the last becomes the first. This method has the same algorithm as Array.prototype.reverse(). TypedArray is one of the typed array types here.",
          "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/reverse"
        },
        set: {
          "!type": "fn(array: [number], offset?: number)",
          "!doc": "The set() method stores multiple values in the typed array, reading input values from a specified array.",
          "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/set"
        },
        slice: {
          "!type": "fn(from: number, to?: number) -> +TypedArray",
          "!doc": "Extracts a section of an array and returns a new array. See also Array.prototype.slice().",
          "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice"
        },
        some: {
          "!type": "fn(test: fn(elt: number, i: number) -> bool, context?: ?) -> bool",
          "!effects": [
            "call !0 this=!1 number number"
          ],
          "!doc": "The some() method tests whether some element in the typed array passes the test implemented by the provided function. This method has the same algorithm as Array.prototype.some(). TypedArray is one of the typed array types here.",
          "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/some"
        },
        sort: {
          "!type": "fn(compare?: fn(a: number, b: number) -> number)",
          "!effects": [
            "call !0 number number"
          ],
          "!doc": "Sorts the elements of an array in place and returns the array. See also Array.prototype.sort().",
          "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/sort"
        },
        subarray: {
          "!type": "fn(begin?: number, end?: number) -> +TypedArray",
          "!doc": "The subarray() method returns a new TypedArray on the same ArrayBuffer store and with the same element types as for this TypedArray object. The begin offset is inclusive and the end offset is exclusive. TypedArray is one of the typed array types.",
          "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/subarray"
        },
        values: {
          "!type": "fn() -> +iter[:t=number]",
          "!doc": "The values() method returns a new Array Iterator object that contains the values for each index in the array.",
          "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/values"
        },
        ":Symbol.iterator": {
          "!type": "fn() -> +iter[:t=number]",
          "!doc": "Returns a new Array Iterator object that contains the values for each index in the array.",
          "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/@@iterator"
        }
      }
    }
  },
  Infinity: {
    "!type": "number",
    "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Infinity",
    "!doc": "A numeric value representing infinity."
  },
  undefined: {
    "!type": "?",
    "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/undefined",
    "!doc": "The value undefined."
  },
  NaN: {
    "!type": "number",
    "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/NaN",
    "!doc": "A value representing Not-A-Number."
  },
  Object: {
    "!type": "fn()",
    getPrototypeOf: {
      "!type": "fn(obj: ?) -> ?",
      "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/getPrototypeOf",
      "!doc": "Returns the prototype (i.e. the internal prototype) of the specified object."
    },
    create: {
      "!type": "fn(proto: ?) -> !custom:Object_create",
      "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/create",
      "!doc": "Creates a new object with the specified prototype object and properties."
    },
    defineProperty: {
      "!type": "fn(obj: ?, prop: string, desc: propertyDescriptor) -> !custom:Object_defineProperty",
      "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/defineProperty",
      "!doc": "Defines a new property directly on an object, or modifies an existing property on an object, and returns the object. If you want to see how to use the Object.defineProperty method with a binary-flags-like syntax, see this article."
    },
    defineProperties: {
      "!type": "fn(obj: ?, props: ?) -> !custom:Object_defineProperties",
      "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/defineProperty",
      "!doc": "Defines a new property directly on an object, or modifies an existing property on an object, and returns the object. If you want to see how to use the Object.defineProperty method with a binary-flags-like syntax, see this article."
    },
    getOwnPropertyDescriptor: {
      "!type": "fn(obj: ?, prop: string) -> propertyDescriptor",
      "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor",
      "!doc": "Returns a property descriptor for an own property (that is, one directly present on an object, not present by dint of being along an object's prototype chain) of a given object."
    },
    keys: {
      "!type": "fn(obj: ?) -> [string]",
      "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/keys",
      "!doc": "Returns an array of a given object's own enumerable properties, in the same order as that provided by a for-in loop (the difference being that a for-in loop enumerates properties in the prototype chain as well)."
    },
    getOwnPropertyNames: {
      "!type": "fn(obj: ?) -> [string]",
      "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames",
      "!doc": "Returns an array of all properties (enumerable or not) found directly upon a given object."
    },
    seal: {
      "!type": "fn(obj: ?)",
      "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/seal",
      "!doc": "Seals an object, preventing new properties from being added to it and marking all existing properties as non-configurable. Values of present properties can still be changed as long as they are writable."
    },
    isSealed: {
      "!type": "fn(obj: ?) -> bool",
      "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/isSealed",
      "!doc": "Determine if an object is sealed."
    },
    freeze: {
      "!type": "fn(obj: ?) -> !0",
      "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/freeze",
      "!doc": "Freezes an object: that is, prevents new properties from being added to it; prevents existing properties from being removed; and prevents existing properties, or their enumerability, configurability, or writability, from being changed. In essence the object is made effectively immutable. The method returns the object being frozen."
    },
    isFrozen: {
      "!type": "fn(obj: ?) -> bool",
      "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/isFrozen",
      "!doc": "Determine if an object is frozen."
    },
    preventExtensions: {
      "!type": "fn(obj: ?)",
      "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions",
      "!doc": "Prevents new properties from ever being added to an object."
    },
    isExtensible: {
      "!type": "fn(obj: ?) -> bool",
      "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible",
      "!doc": "The Object.isExtensible() method determines if an object is extensible (whether it can have new properties added to it)."
    },
    assign: {
      "!type": "fn(target: ?, source: ?, source?: ?) -> !0",
      "!effects": [
        "copy !1 !0",
        "copy !2 !0",
        "copy !3 !0"
      ],
      "!doc": "The Object.assign() method is used to copy the values of all enumerable own properties from one or more source objects to a target object. It will return the target object.",
      "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign"
    },
    getOwnPropertySymbols: {
      "!type": "fn(obj: ?) -> !custom:getOwnPropertySymbols",
      "!doc": "The Object.getOwnPropertySymbols() method returns an array of all symbol properties found directly upon a given object.",
      "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols"
    },
    is: {
      "!type": "fn(value1: ?, value2: ?) -> bool",
      "!doc": "The Object.is() method determines whether two values are the same value.",
      "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is"
    },
    setPrototypeOf: {
      "!type": "fn(obj: ?, prototype: ?)",
      "!doc": "The Object.setPrototype() method sets the prototype (i.e., the internal [[Prototype]] property) of a specified object to another object or null.",
      "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf"
    },
    prototype: {
      "!stdProto": "Object",
      toString: {
        "!type": "fn() -> string",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/toString",
        "!doc": "Returns a string representing the object."
      },
      toLocaleString: {
        "!type": "fn() -> string",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/toLocaleString",
        "!doc": "Returns a string representing the object. This method is meant to be overriden by derived objects for locale-specific purposes."
      },
      valueOf: {
        "!type": "fn() -> number",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/valueOf",
        "!doc": "Returns the primitive value of the specified object"
      },
      hasOwnProperty: {
        "!type": "fn(prop: string) -> bool",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/hasOwnProperty",
        "!doc": "Returns a boolean indicating whether the object has the specified property."
      },
      propertyIsEnumerable: {
        "!type": "fn(prop: string) -> bool",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable",
        "!doc": "Returns a Boolean indicating whether the specified property is enumerable."
      },
      isPrototypeOf: {
        "!type": "fn(obj: ?) -> bool",
        "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf",
        "!doc": "Tests for an object in another object's prototype chain."
      }
    },
    "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object",
    "!doc": "Creates an object wrapper."
  },
  Function: {
    "!type": "fn(body: string) -> fn()",
    prototype: {
      "!stdProto": "Function",
      apply: {
        "!type": "fn(this: ?, args: [?])",
        "!effects": [
          "call and return !this this=!0 !1.<i> !1.<i> !1.<i>"
        ],
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Function/apply",
        "!doc": "Calls a function with a given this value and arguments provided as an array (or an array like object)."
      },
      call: {
        "!type": "fn(this: ?, args?: ?) -> !this.!ret",
        "!effects": [
          "call and return !this this=!0 !1 !2 !3 !4"
        ],
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Function/call",
        "!doc": "Calls a function with a given this value and arguments provided individually."
      },
      bind: {
        "!type": "fn(this: ?, args?: ?) -> !custom:Function_bind",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Function/bind",
        "!doc": "Creates a new function that, when called, has its this keyword set to the provided value, with a given sequence of arguments preceding any provided when the new function was called."
      },
      prototype: "?"
    },
    "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Function",
    "!doc": "Every function in JavaScript is actually a Function object."
  },
  Array: {
    "!type": "fn(size: number) -> !custom:Array_ctor",
    isArray: {
      "!type": "fn(value: ?) -> bool",
      "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/isArray",
      "!doc": "Returns true if an object is an array, false if it is not."
    },
    from: {
      "!type": "fn(arrayLike: ?, mapFn?: fn(elt: ?, i: number) -> ?, thisArg?: ?) -> [!0.<i>]",
      "!effects": [
        "call !1 this=!2 !0.<i> number"
      ],
      "!doc": "The Array.from() method creates a new Array instance from an array-like or iterable object.",
      "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from"
    },
    of: {
      "!type": "fn(elementN: ?) -> [!0]",
      "!doc": "The Array.of() method creates a new Array instance with a variable number of arguments, regardless of number or type of the arguments.",
      "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of"
    },
    prototype: {
      "!stdProto": "Array",
      length: {
        "!type": "number",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/length",
        "!doc": "An unsigned, 32-bit integer that specifies the number of elements in an array."
      },
      concat: {
        "!type": "fn(other: [?]) -> !this",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/concat",
        "!doc": "Returns a new array comprised of this array joined with other array(s) and/or value(s)."
      },
      join: {
        "!type": "fn(separator?: string) -> string",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/join",
        "!doc": "Joins all elements of an array into a string."
      },
      splice: {
        "!type": "fn(pos: number, amount: number, newelt?: ?) -> [?]",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/splice",
        "!doc": "Changes the content of an array, adding new elements while removing old elements."
      },
      pop: {
        "!type": "fn() -> !this.<i>",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/pop",
        "!doc": "Removes the last element from an array and returns that element."
      },
      push: {
        "!type": "fn(newelt: ?) -> number",
        "!effects": [
          "propagate !0 !this.<i>"
        ],
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/push",
        "!doc": "Mutates an array by appending the given elements and returning the new length of the array."
      },
      shift: {
        "!type": "fn() -> !this.<i>",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/shift",
        "!doc": "Removes the first element from an array and returns that element. This method changes the length of the array."
      },
      unshift: {
        "!type": "fn(newelt: ?) -> number",
        "!effects": [
          "propagate !0 !this.<i>"
        ],
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/unshift",
        "!doc": "Adds one or more elements to the beginning of an array and returns the new length of the array."
      },
      slice: {
        "!type": "fn(from?: number, to?: number) -> !this",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/slice",
        "!doc": "Returns a shallow copy of a portion of an array."
      },
      reverse: {
        "!type": "fn()",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/reverse",
        "!doc": "Reverses an array in place.  The first array element becomes the last and the last becomes the first."
      },
      sort: {
        "!type": "fn(compare?: fn(a: ?, b: ?) -> number)",
        "!effects": [
          "call !0 !this.<i> !this.<i>"
        ],
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/sort",
        "!doc": "Sorts the elements of an array in place and returns the array."
      },
      indexOf: {
        "!type": "fn(elt: ?, from?: number) -> number",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/indexOf",
        "!doc": "Returns the first index at which a given element can be found in the array, or -1 if it is not present."
      },
      lastIndexOf: {
        "!type": "fn(elt: ?, from?: number) -> number",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/lastIndexOf",
        "!doc": "Returns the last index at which a given element can be found in the array, or -1 if it is not present. The array is searched backwards, starting at fromIndex."
      },
      every: {
        "!type": "fn(test: fn(elt: ?, i: number, array: +Array) -> bool, context?: ?) -> bool",
        "!effects": [
          "call !0 this=!1 !this.<i> number !this"
        ],
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/every",
        "!doc": "Tests whether all elements in the array pass the test implemented by the provided function."
      },
      some: {
        "!type": "fn(test: fn(elt: ?, i: number, array: +Array) -> bool, context?: ?) -> bool",
        "!effects": [
          "call !0 this=!1 !this.<i> number !this"
        ],
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/some",
        "!doc": "Tests whether some element in the array passes the test implemented by the provided function."
      },
      filter: {
        "!type": "fn(test: fn(elt: ?, i: number, array: +Array) -> bool, context?: ?) -> !this",
        "!effects": [
          "call !0 this=!1 !this.<i> number !this"
        ],
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/filter",
        "!doc": "Creates a new array with all elements that pass the test implemented by the provided function."
      },
      forEach: {
        "!type": "fn(f: fn(elt: ?, i: number, array: +Array), context?: ?)",
        "!effects": [
          "call !0 this=!1 !this.<i> number !this"
        ],
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/forEach",
        "!doc": "Executes a provided function once per array element."
      },
      map: {
        "!type": "fn(f: fn(elt: ?, i: number, array: +Array) -> ?, context?: ?) -> [!0.!ret]",
        "!effects": [
          "call !0 this=!1 !this.<i> number !this"
        ],
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/map",
        "!doc": "Creates a new array with the results of calling a provided function on every element in this array."
      },
      reduce: {
        "!type": "fn(combine: fn(sum: ?, elt: ?, i: number, array: +Array) -> ?, init?: ?) -> !0.!ret",
        "!effects": [
          "call !0 !1 !this.<i> number !this"
        ],
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/Reduce",
        "!doc": "Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value."
      },
      reduceRight: {
        "!type": "fn(combine: fn(sum: ?, elt: ?, i: number, array: +Array) -> ?, init?: ?) -> !0.!ret",
        "!effects": [
          "call !0 !1 !this.<i> number !this"
        ],
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/ReduceRight",
        "!doc": "Apply a function simultaneously against two values of the array (from right-to-left) as to reduce it to a single value."
      },
      copyWithin: {
        "!type": "fn(target: number, start: number, end?: number) -> !this",
        "!doc": "The copyWithin() method copies the sequence of array elements within the array to the position starting at target. The copy is taken from the index positions of the second and third arguments start and end.",
        "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin"
      },
      entries: {
        "!type": "fn() -> +iter[:t=[number, !this.<i>]]",
        "!doc": "The entries() method returns a new Array Iterator object that contains the key/value pairs for each index in the array.",
        "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries"
      },
      fill: {
        "!type": "fn(value: ?, start?: number, end?: number) -> !this",
        "!doc": "The fill() method fills all the elements of an array from a start index to an end index with a static value.",
        "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill"
      },
      find: {
        "!type": "fn(callback: fn(element: ?, index: number, array: [?]) -> bool, thisArg?: ?) -> !this.<i>",
        "!effects": [
          "call !0 this=!2 !this.<i> number"
        ],
        "!doc": "The find() method returns a value in the array, if an element in the array satisfies the provided testing function. Otherwise undefined is returned.",
        "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find"
      },
      findIndex: {
        "!type": "fn(callback: fn(element: ?, index: number, array: [?]), thisArg?: ?) -> number",
        "!effects": [
          "call !0 this=!2 !this.<i> number"
        ],
        "!doc": "The findIndex() method returns an index in the array, if an element in the array satisfies the provided testing function. Otherwise -1 is returned.",
        "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex"
      },
      keys: {
        "!type": "fn() -> +iter[:t=number]",
        "!doc": "The keys() method returns a new Array Iterator that contains the keys for each index in the array.",
        "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys"
      },
      values: {
        "!type": "fn() -> +iter[:t=!this.<i>]",
        "!doc": "The values() method returns a new Array Iterator object that contains the values for each index in the array.",
        "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values"
      },
      ":Symbol.iterator": {
        "!type": "fn() -> +iter[:t=!this.<i>]",
        "!doc": "Returns a new Array Iterator object that contains the values for each index in the array.",
        "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/@@iterator"
      },
      includes: {
        "!type": "fn(value: ?) -> bool",
        "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes",
        "!doc": "Determines whether an array includes a certain element, returning true or false as appropriate."
      }
    },
    "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array",
    "!doc": "The JavaScript Array global object is a constructor for arrays, which are high-level, list-like objects."
  },
  String: {
    "!type": "fn(value: ?) -> string",
    fromCharCode: {
      "!type": "fn(code: number) -> string",
      "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/fromCharCode",
      "!doc": "Returns a string created by using the specified sequence of Unicode values."
    },
    fromCodePoint: {
      "!type": "fn(point: number, point?: number) -> string",
      "!doc": "The static String.fromCodePoint() method returns a string created by using the specified sequence of code points.",
      "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint"
    },
    raw: {
      "!type": "fn(template: [string], substitutions: ?, templateString: ?) -> string",
      "!doc": "The static String.raw() method is a tag function of template strings, used to get the raw string form of template strings.",
      "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/raw"
    },
    prototype: {
      "!stdProto": "String",
      length: {
        "!type": "number",
        "!url": "https://developer.mozilla.org/en/docs/JavaScript/Reference/Global_Objects/String/length",
        "!doc": "Represents the length of a string."
      },
      "<i>": "string",
      charAt: {
        "!type": "fn(i: number) -> string",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/charAt",
        "!doc": "Returns the specified character from a string."
      },
      charCodeAt: {
        "!type": "fn(i: number) -> number",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/charCodeAt",
        "!doc": "Returns the numeric Unicode value of the character at the given index (except for unicode codepoints > 0x10000)."
      },
      indexOf: {
        "!type": "fn(char: string, from?: number) -> number",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/indexOf",
        "!doc": `Returns the index within the calling String object of the first occurrence of the specified value, starting the search at fromIndex,
returns -1 if the value is not found.`
      },
      lastIndexOf: {
        "!type": "fn(char: string, from?: number) -> number",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/lastIndexOf",
        "!doc": "Returns the index within the calling String object of the last occurrence of the specified value, or -1 if not found. The calling string is searched backward, starting at fromIndex."
      },
      substring: {
        "!type": "fn(from: number, to?: number) -> string",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/substring",
        "!doc": "Returns a subset of a string between one index and another, or through the end of the string."
      },
      substr: {
        "!type": "fn(from: number, length?: number) -> string",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/substr",
        "!doc": "Returns the characters in a string beginning at the specified location through the specified number of characters."
      },
      slice: {
        "!type": "fn(from: number, to?: number) -> string",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/slice",
        "!doc": "Extracts a section of a string and returns a new string."
      },
      trim: {
        "!type": "fn() -> string",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/Trim",
        "!doc": "Removes whitespace from both ends of the string."
      },
      toUpperCase: {
        "!type": "fn() -> string",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/toUpperCase",
        "!doc": "Returns the calling string value converted to uppercase."
      },
      toLowerCase: {
        "!type": "fn() -> string",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/toLowerCase",
        "!doc": "Returns the calling string value converted to lowercase."
      },
      toLocaleUpperCase: {
        "!type": "fn() -> string",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/toLocaleUpperCase",
        "!doc": "Returns the calling string value converted to upper case, according to any locale-specific case mappings."
      },
      toLocaleLowerCase: {
        "!type": "fn() -> string",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/toLocaleLowerCase",
        "!doc": "Returns the calling string value converted to lower case, according to any locale-specific case mappings."
      },
      split: {
        "!type": "fn(pattern?: string|+RegExp, limit?: number) -> [string]",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/split",
        "!doc": "Splits a String object into an array of strings by separating the string into substrings."
      },
      concat: {
        "!type": "fn(other: string) -> string",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/concat",
        "!doc": "Combines the text of two or more strings and returns a new string."
      },
      localeCompare: {
        "!type": "fn(other: string) -> number",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/localeCompare",
        "!doc": "Returns a number indicating whether a reference string comes before or after or is the same as the given string in sort order."
      },
      match: {
        "!type": "fn(pattern: +RegExp) -> [string]",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/match",
        "!doc": "Used to retrieve the matches when matching a string against a regular expression."
      },
      replace: {
        "!type": "fn(pattern: string|+RegExp, replacement: string) -> string",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/replace",
        "!doc": "Returns a new string with some or all matches of a pattern replaced by a replacement.  The pattern can be a string or a RegExp, and the replacement can be a string or a function to be called for each match."
      },
      search: {
        "!type": "fn(pattern: +RegExp) -> number",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/search",
        "!doc": "Executes the search for a match between a regular expression and this String object."
      },
      codePointAt: {
        "!type": "fn(pos: number) -> number",
        "!doc": "The codePointAt() method returns a non-negative integer that is the UTF-16 encoded code point value.",
        "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt"
      },
      endsWith: {
        "!type": "fn(searchString: string, position?: number) -> bool",
        "!doc": "The endsWith() method determines whether a string ends with the characters of another string, returning true or false as appropriate.",
        "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith"
      },
      includes: {
        "!type": "fn(searchString: string, position?: number) -> bool",
        "!doc": "The includes() method determines whether one string may be found within another string, returning true or false as appropriate.",
        "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/contains"
      },
      normalize: {
        "!type": "fn(form: string) -> string",
        "!doc": "The normalize() method returns the Unicode Normalization Form of a given string (if the value isn't a string, it will be converted to one first).",
        "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize"
      },
      repeat: {
        "!type": "fn(count: number) -> string",
        "!doc": "The repeat() method constructs and returns a new string which contains the specified number of copies of the string on which it was called, concatenated together.",
        "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat"
      },
      startsWith: {
        "!type": "fn(searchString: string, position?: number) -> bool",
        "!doc": "The startsWith() method determines whether a string begins with the characters of another string, returning true or false as appropriate.",
        "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith"
      },
      ":Symbol.iterator": {
        "!type": "fn() -> +iter[:t=string]",
        "!doc": "Returns a new Iterator object that iterates over the code points of a String value, returning each code point as a String value.",
        "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/@@iterator"
      }
    },
    "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String",
    "!doc": "The String global object is a constructor for strings, or a sequence of characters."
  },
  Number: {
    "!type": "fn(value: ?) -> number",
    MAX_VALUE: {
      "!type": "number",
      "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Number/MAX_VALUE",
      "!doc": "The maximum numeric value representable in JavaScript."
    },
    MIN_VALUE: {
      "!type": "number",
      "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Number/MIN_VALUE",
      "!doc": "The smallest positive numeric value representable in JavaScript."
    },
    POSITIVE_INFINITY: {
      "!type": "number",
      "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Number/POSITIVE_INFINITY",
      "!doc": "A value representing the positive Infinity value."
    },
    NEGATIVE_INFINITY: {
      "!type": "number",
      "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Number/NEGATIVE_INFINITY",
      "!doc": "A value representing the negative Infinity value."
    },
    prototype: {
      "!stdProto": "Number",
      toString: {
        "!type": "fn(radix?: number) -> string",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Number/toString",
        "!doc": "Returns a string representing the specified Number object"
      },
      toFixed: {
        "!type": "fn(digits: number) -> string",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Number/toFixed",
        "!doc": "Formats a number using fixed-point notation"
      },
      toExponential: {
        "!type": "fn(digits: number) -> string",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Number/toExponential",
        "!doc": "Returns a string representing the Number object in exponential notation"
      },
      toPrecision: {
        "!type": "fn(digits: number) -> string",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Number/toPrecision",
        "!doc": "The toPrecision() method returns a string representing the number to the specified precision."
      }
    },
    EPSILON: {
      "!type": "number",
      "!doc": "The Number.EPSILON property represents the difference between one and the smallest value greater than one that can be represented as a Number.",
      "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/EPSILON"
    },
    MAX_SAFE_INTEGER: {
      "!type": "number",
      "!doc": "The Number.MAX_SAFE_INTEGER constant represents the maximum safe integer in JavaScript (253 - 1).",
      "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER"
    },
    MIN_SAFE_INTEGER: {
      "!type": "number",
      "!doc": "The Number.MIN_SAFE_INTEGER constant represents the minimum safe integer in JavaScript (-(253 - 1)).",
      "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_SAFE_INTEGER"
    },
    isFinite: {
      "!type": "fn(testValue: ?) -> bool",
      "!doc": "The Number.isFinite() method determines whether the passed value is finite.",
      "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite"
    },
    isInteger: {
      "!type": "fn(testValue: ?) -> bool",
      "!doc": "The Number.isInteger() method determines whether the passed value is an integer.",
      "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger"
    },
    isNaN: {
      "!type": "fn(testValue: ?) -> bool",
      "!doc": "The Number.isNaN() method determines whether the passed value is NaN. More robust version of the original global isNaN().",
      "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN"
    },
    isSafeInteger: {
      "!type": "fn(testValue: ?) -> bool",
      "!doc": "The Number.isSafeInteger() method determines whether the provided value is a number that is a safe integer. A safe integer is an integer that",
      "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isSafeInteger"
    },
    parseFloat: {
      "!type": "fn(string: string) -> number",
      "!doc": "The Number.parseFloat() method parses a string argument and returns a floating point number.",
      "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/parseFloat"
    },
    parseInt: {
      "!type": "fn(string: string, radix?: number) -> number",
      "!doc": "The Number.parseInt() method parses a string argument and returns an integer of the specified radix or base.",
      "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/parseInt"
    },
    "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Number",
    "!doc": "The Number JavaScript object is a wrapper object allowing you to work with numerical values. A Number object is created using the Number() constructor."
  },
  Boolean: {
    "!type": "fn(value: ?) -> bool",
    prototype: {
      "!stdProto": "Boolean"
    },
    "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Boolean",
    "!doc": "The Boolean object is an object wrapper for a boolean value."
  },
  RegExp: {
    "!type": "fn(source: string, flags?: string)",
    prototype: {
      "!stdProto": "RegExp",
      exec: {
        "!type": "fn(input: string) -> [string]",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/RegExp/exec",
        "!doc": "Executes a search for a match in a specified string. Returns a result array, or null."
      },
      test: {
        "!type": "fn(input: string) -> bool",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/RegExp/test",
        "!doc": "Executes the search for a match between a regular expression and a specified string. Returns true or false."
      },
      global: {
        "!type": "bool",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/RegExp",
        "!doc": "Creates a regular expression object for matching text with a pattern."
      },
      ignoreCase: {
        "!type": "bool",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/RegExp",
        "!doc": "Creates a regular expression object for matching text with a pattern."
      },
      multiline: {
        "!type": "bool",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/RegExp/multiline",
        "!doc": `Reflects whether or not to search in strings across multiple lines.
`
      },
      source: {
        "!type": "string",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/RegExp/source",
        "!doc": `A read-only property that contains the text of the pattern, excluding the forward slashes.
`
      },
      lastIndex: {
        "!type": "number",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/RegExp/lastIndex",
        "!doc": "A read/write integer property that specifies the index at which to start the next match."
      },
      flags: {
        "!type": "string",
        "!doc": "The flags property returns a string consisting of the flags of the current regular expression object.",
        "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/flags"
      },
      sticky: {
        "!type": "bool",
        "!doc": "The sticky property reflects whether or not the search is sticky (searches in strings only from the index indicated by the lastIndex property of this regular expression). sticky is a read-only property of an individual regular expression object.",
        "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/sticky"
      },
      unicode: {
        "!type": "bool",
        "!doc": "The 'u' flag enables various Unicode-related features.",
        "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode"
      }
    },
    "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/RegExp",
    "!doc": "Creates a regular expression object for matching text with a pattern."
  },
  Date: {
    "!type": "fn(ms: number)",
    parse: {
      "!type": "fn(source: string) -> +Date",
      "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/parse",
      "!doc": "Parses a string representation of a date, and returns the number of milliseconds since January 1, 1970, 00:00:00 UTC."
    },
    UTC: {
      "!type": "fn(year: number, month: number, date: number, hour?: number, min?: number, sec?: number, ms?: number) -> number",
      "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/UTC",
      "!doc": "Accepts the same parameters as the longest form of the constructor, and returns the number of milliseconds in a Date object since January 1, 1970, 00:00:00, universal time."
    },
    now: {
      "!type": "fn() -> number",
      "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/now",
      "!doc": "Returns the number of milliseconds elapsed since 1 January 1970 00:00:00 UTC."
    },
    prototype: {
      toUTCString: {
        "!type": "fn() -> string",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/toUTCString",
        "!doc": "Converts a date to a string, using the universal time convention."
      },
      toISOString: {
        "!type": "fn() -> string",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/toISOString",
        "!doc": "JavaScript provides a direct way to convert a date object into a string in ISO format, the ISO 8601 Extended Format."
      },
      toDateString: {
        "!type": "fn() -> string",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/toDateString",
        "!doc": "Returns the date portion of a Date object in human readable form in American English."
      },
      toTimeString: {
        "!type": "fn() -> string",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/toTimeString",
        "!doc": "Returns the time portion of a Date object in human readable form in American English."
      },
      toLocaleDateString: {
        "!type": "fn() -> string",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/toLocaleDateString",
        "!doc": `Converts a date to a string, returning the "date" portion using the operating system's locale's conventions.
`
      },
      toLocaleTimeString: {
        "!type": "fn() -> string",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/toLocaleTimeString",
        "!doc": `Converts a date to a string, returning the "time" portion using the current locale's conventions.`
      },
      getTime: {
        "!type": "fn() -> number",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/getTime",
        "!doc": "Returns the numeric value corresponding to the time for the specified date according to universal time."
      },
      getFullYear: {
        "!type": "fn() -> number",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/getFullYear",
        "!doc": "Returns the year of the specified date according to local time."
      },
      getYear: {
        "!type": "fn() -> number",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/getYear",
        "!doc": "Returns the year in the specified date according to local time."
      },
      getMonth: {
        "!type": "fn() -> number",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/getMonth",
        "!doc": "Returns the month in the specified date according to local time."
      },
      getUTCMonth: {
        "!type": "fn() -> number",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/getUTCMonth",
        "!doc": `Returns the month of the specified date according to universal time.
`
      },
      getDate: {
        "!type": "fn() -> number",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/getDate",
        "!doc": "Returns the day of the month for the specified date according to local time."
      },
      getUTCDate: {
        "!type": "fn() -> number",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/getUTCDate",
        "!doc": `Returns the day (date) of the month in the specified date according to universal time.
`
      },
      getDay: {
        "!type": "fn() -> number",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/getDay",
        "!doc": "Returns the day of the week for the specified date according to local time."
      },
      getUTCDay: {
        "!type": "fn() -> number",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/getUTCDay",
        "!doc": `Returns the day of the week in the specified date according to universal time.
`
      },
      getHours: {
        "!type": "fn() -> number",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/getHours",
        "!doc": "Returns the hour for the specified date according to local time."
      },
      getUTCHours: {
        "!type": "fn() -> number",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/getUTCHours",
        "!doc": `Returns the hours in the specified date according to universal time.
`
      },
      getMinutes: {
        "!type": "fn() -> number",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/getMinutes",
        "!doc": "Returns the minutes in the specified date according to local time."
      },
      getUTCMinutes: {
        "!type": "fn() -> number",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date",
        "!doc": "Creates JavaScript Date instances which let you work with dates and times."
      },
      getSeconds: {
        "!type": "fn() -> number",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/getSeconds",
        "!doc": "Returns the seconds in the specified date according to local time."
      },
      getUTCSeconds: {
        "!type": "fn() -> number",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/getUTCSeconds",
        "!doc": `Returns the seconds in the specified date according to universal time.
`
      },
      getMilliseconds: {
        "!type": "fn() -> number",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/getMilliseconds",
        "!doc": "Returns the milliseconds in the specified date according to local time."
      },
      getUTCMilliseconds: {
        "!type": "fn() -> number",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/getUTCMilliseconds",
        "!doc": `Returns the milliseconds in the specified date according to universal time.
`
      },
      getTimezoneOffset: {
        "!type": "fn() -> number",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/getTimezoneOffset",
        "!doc": "Returns the time-zone offset from UTC, in minutes, for the current locale."
      },
      setTime: {
        "!type": "fn(date: +Date) -> number",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/setTime",
        "!doc": `Sets the Date object to the time represented by a number of milliseconds since January 1, 1970, 00:00:00 UTC.
`
      },
      setFullYear: {
        "!type": "fn(year: number) -> number",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/setFullYear",
        "!doc": `Sets the full year for a specified date according to local time.
`
      },
      setUTCFullYear: {
        "!type": "fn(year: number) -> number",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/setUTCFullYear",
        "!doc": `Sets the full year for a specified date according to universal time.
`
      },
      setMonth: {
        "!type": "fn(month: number) -> number",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/setMonth",
        "!doc": "Set the month for a specified date according to local time."
      },
      setUTCMonth: {
        "!type": "fn(month: number) -> number",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/setUTCMonth",
        "!doc": `Sets the month for a specified date according to universal time.
`
      },
      setDate: {
        "!type": "fn(day: number) -> number",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/setDate",
        "!doc": "Sets the day of the month for a specified date according to local time."
      },
      setUTCDate: {
        "!type": "fn(day: number) -> number",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/setUTCDate",
        "!doc": `Sets the day of the month for a specified date according to universal time.
`
      },
      setHours: {
        "!type": "fn(hour: number) -> number",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/setHours",
        "!doc": "Sets the hours for a specified date according to local time, and returns the number of milliseconds since 1 January 1970 00:00:00 UTC until the time represented by the updated Date instance."
      },
      setUTCHours: {
        "!type": "fn(hour: number) -> number",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/setUTCHours",
        "!doc": `Sets the hour for a specified date according to universal time.
`
      },
      setMinutes: {
        "!type": "fn(min: number) -> number",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/setMinutes",
        "!doc": "Sets the minutes for a specified date according to local time."
      },
      setUTCMinutes: {
        "!type": "fn(min: number) -> number",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/setUTCMinutes",
        "!doc": `Sets the minutes for a specified date according to universal time.
`
      },
      setSeconds: {
        "!type": "fn(sec: number) -> number",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/setSeconds",
        "!doc": "Sets the seconds for a specified date according to local time."
      },
      setUTCSeconds: {
        "!type": "fn(sec: number) -> number",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/setUTCSeconds",
        "!doc": `Sets the seconds for a specified date according to universal time.
`
      },
      setMilliseconds: {
        "!type": "fn(ms: number) -> number",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/setMilliseconds",
        "!doc": `Sets the milliseconds for a specified date according to local time.
`
      },
      setUTCMilliseconds: {
        "!type": "fn(ms: number) -> number",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/setUTCMilliseconds",
        "!doc": `Sets the milliseconds for a specified date according to universal time.
`
      },
      toJSON: {
        "!type": "fn() -> string",
        "!doc": "Returns a string (using toISOString()) representing the Date object's value.",
        "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toJSON"
      }
    },
    "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date",
    "!doc": "Creates JavaScript Date instances which let you work with dates and times."
  },
  Error: {
    "!type": "fn(message: string)",
    prototype: {
      name: {
        "!type": "string",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Error/name",
        "!doc": "A name for the type of error."
      },
      message: {
        "!type": "string",
        "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Error/message",
        "!doc": "A human-readable description of the error."
      }
    },
    "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Error",
    "!doc": "Creates an error object."
  },
  SyntaxError: {
    "!type": "fn(message: string)",
    prototype: "Error.prototype",
    "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/SyntaxError",
    "!doc": "Represents an error when trying to interpret syntactically invalid code."
  },
  ReferenceError: {
    "!type": "fn(message: string)",
    prototype: "Error.prototype",
    "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/ReferenceError",
    "!doc": "Represents an error when a non-existent variable is referenced."
  },
  URIError: {
    "!type": "fn(message: string)",
    prototype: "Error.prototype",
    "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/URIError",
    "!doc": "Represents an error when a malformed URI is encountered."
  },
  EvalError: {
    "!type": "fn(message: string)",
    prototype: "Error.prototype",
    "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/EvalError",
    "!doc": "Represents an error regarding the eval function."
  },
  RangeError: {
    "!type": "fn(message: string)",
    prototype: "Error.prototype",
    "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/RangeError",
    "!doc": "Represents an error when a number is not within the correct range allowed."
  },
  TypeError: {
    "!type": "fn(message: string)",
    prototype: "Error.prototype",
    "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/TypeError",
    "!doc": "Represents an error an error when a value is not of the expected type."
  },
  parseInt: {
    "!type": "fn(string: string, radix?: number) -> number",
    "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/parseInt",
    "!doc": "Parses a string argument and returns an integer of the specified radix or base."
  },
  parseFloat: {
    "!type": "fn(string: string) -> number",
    "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/parseFloat",
    "!doc": "Parses a string argument and returns a floating point number."
  },
  isNaN: {
    "!type": "fn(value: number) -> bool",
    "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/isNaN",
    "!doc": "Determines whether a value is NaN or not. Be careful, this function is broken. You may be interested in ECMAScript 6 Number.isNaN."
  },
  isFinite: {
    "!type": "fn(value: number) -> bool",
    "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/isFinite",
    "!doc": "Determines whether the passed value is a finite number."
  },
  eval: {
    "!type": "fn(code: string) -> ?",
    "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/eval",
    "!doc": "Evaluates JavaScript code represented as a string."
  },
  encodeURI: {
    "!type": "fn(uri: string) -> string",
    "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/encodeURI",
    "!doc": 'Encodes a Uniform Resource Identifier (URI) by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two "surrogate" characters).'
  },
  encodeURIComponent: {
    "!type": "fn(uri: string) -> string",
    "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/encodeURIComponent",
    "!doc": 'Encodes a Uniform Resource Identifier (URI) component by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two "surrogate" characters).'
  },
  decodeURI: {
    "!type": "fn(uri: string) -> string",
    "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/decodeURI",
    "!doc": "Decodes a Uniform Resource Identifier (URI) previously created by encodeURI or by a similar routine."
  },
  decodeURIComponent: {
    "!type": "fn(uri: string) -> string",
    "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/decodeURIComponent",
    "!doc": "Decodes a Uniform Resource Identifier (URI) component previously created by encodeURIComponent or by a similar routine."
  },
  Math: {
    E: {
      "!type": "number",
      "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/E",
      "!doc": "The base of natural logarithms, e, approximately 2.718."
    },
    LN2: {
      "!type": "number",
      "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/LN2",
      "!doc": "The natural logarithm of 2, approximately 0.693."
    },
    LN10: {
      "!type": "number",
      "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/LN10",
      "!doc": "The natural logarithm of 10, approximately 2.302."
    },
    LOG2E: {
      "!type": "number",
      "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/LOG2E",
      "!doc": "The base 2 logarithm of E (approximately 1.442)."
    },
    LOG10E: {
      "!type": "number",
      "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/LOG10E",
      "!doc": "The base 10 logarithm of E (approximately 0.434)."
    },
    SQRT1_2: {
      "!type": "number",
      "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/SQRT1_2",
      "!doc": "The square root of 1/2; equivalently, 1 over the square root of 2, approximately 0.707."
    },
    SQRT2: {
      "!type": "number",
      "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/SQRT2",
      "!doc": "The square root of 2, approximately 1.414."
    },
    PI: {
      "!type": "number",
      "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/PI",
      "!doc": "The ratio of the circumference of a circle to its diameter, approximately 3.14159."
    },
    abs: {
      "!type": "fn(number) -> number",
      "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/abs",
      "!doc": "Returns the absolute value of a number."
    },
    cos: {
      "!type": "fn(number) -> number",
      "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/cos",
      "!doc": "Returns the cosine of a number."
    },
    sin: {
      "!type": "fn(number) -> number",
      "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/sin",
      "!doc": "Returns the sine of a number."
    },
    tan: {
      "!type": "fn(number) -> number",
      "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/tan",
      "!doc": "Returns the tangent of a number."
    },
    acos: {
      "!type": "fn(number) -> number",
      "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/acos",
      "!doc": "Returns the arccosine (in radians) of a number."
    },
    asin: {
      "!type": "fn(number) -> number",
      "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/asin",
      "!doc": "Returns the arcsine (in radians) of a number."
    },
    atan: {
      "!type": "fn(number) -> number",
      "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/atan",
      "!doc": "Returns the arctangent (in radians) of a number."
    },
    atan2: {
      "!type": "fn(y: number, x: number) -> number",
      "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/atan2",
      "!doc": "Returns the arctangent of the quotient of its arguments."
    },
    ceil: {
      "!type": "fn(number) -> number",
      "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/ceil",
      "!doc": "Returns the smallest integer greater than or equal to a number."
    },
    floor: {
      "!type": "fn(number) -> number",
      "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/floor",
      "!doc": "Returns the largest integer less than or equal to a number."
    },
    round: {
      "!type": "fn(number) -> number",
      "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/round",
      "!doc": "Returns the value of a number rounded to the nearest integer."
    },
    exp: {
      "!type": "fn(number) -> number",
      "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/exp",
      "!doc": "Returns Ex, where x is the argument, and E is Euler's constant, the base of the natural logarithms."
    },
    log: {
      "!type": "fn(number) -> number",
      "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/log",
      "!doc": "Returns the natural logarithm (base E) of a number."
    },
    sqrt: {
      "!type": "fn(number) -> number",
      "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/sqrt",
      "!doc": "Returns the square root of a number."
    },
    pow: {
      "!type": "fn(number, number) -> number",
      "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/pow",
      "!doc": "Returns base to the exponent power, that is, baseexponent."
    },
    max: {
      "!type": "fn(number, number) -> number",
      "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/max",
      "!doc": "Returns the largest of zero or more numbers."
    },
    min: {
      "!type": "fn(number, number) -> number",
      "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/min",
      "!doc": "Returns the smallest of zero or more numbers."
    },
    random: {
      "!type": "fn() -> number",
      "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/random",
      "!doc": "Returns a floating-point, pseudo-random number in the range [0, 1) that is, from 0 (inclusive) up to but not including 1 (exclusive), which you can then scale to your desired range."
    },
    acosh: {
      "!type": "fn(x: number) -> number",
      "!doc": "The Math.acosh() function returns the hyperbolic arc-cosine of a number.",
      "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/acosh"
    },
    asinh: {
      "!type": "fn(x: number) -> number",
      "!doc": "The Math.asinh() function returns the hyperbolic arcsine of a number.",
      "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/asinh"
    },
    atanh: {
      "!type": "fn(x: number) -> number",
      "!doc": "The Math.atanh() function returns the hyperbolic arctangent of a number.",
      "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atanh"
    },
    cbrt: {
      "!type": "fn(x: number) -> number",
      "!doc": "The Math.cbrt() function returns the cube root of a number.",
      "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cbrt"
    },
    clz32: {
      "!type": "fn(x: number) -> number",
      "!doc": "The Math.clz32() function returns the number of leading zero bits in the 32-bit binary representation of a number.",
      "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32"
    },
    cosh: {
      "!type": "fn(x: number) -> number",
      "!doc": "The Math.cosh() function returns the hyperbolic cosine of a number, that can be expressed using the constant e:",
      "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cosh"
    },
    expm1: {
      "!type": "fn(x: number) -> number",
      "!doc": "The Math.expm1() function returns ex - 1, where x is the argument, and e the base of the natural logarithms.",
      "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/expm1"
    },
    fround: {
      "!type": "fn(x: number) -> number",
      "!doc": "The Math.fround() function returns the nearest single precision float representation of a number.",
      "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround"
    },
    hypot: {
      "!type": "fn(value: number) -> number",
      "!doc": "The Math.hypot() function returns the square root of the sum of squares of its arguments.",
      "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/hypot"
    },
    imul: {
      "!type": "fn(a: number, b: number) -> number",
      "!doc": "The Math.imul() function returns the result of the C-like 32-bit multiplication of the two parameters.",
      "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul"
    },
    log10: {
      "!type": "fn(x: number) -> number",
      "!doc": "The Math.log10() function returns the base 10 logarithm of a number.",
      "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log10"
    },
    log1p: {
      "!type": "fn(x: number) -> number",
      "!doc": "The Math.log1p() function returns the natural logarithm (base e) of 1 + a number.",
      "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log1p"
    },
    log2: {
      "!type": "fn(x: number) -> number",
      "!doc": "The Math.log2() function returns the base 2 logarithm of a number.",
      "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log2"
    },
    sign: {
      "!type": "fn(x: number) -> number",
      "!doc": "The Math.sign() function returns the sign of a number, indicating whether the number is positive, negative or zero.",
      "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign"
    },
    sinh: {
      "!type": "fn(x: number) -> number",
      "!doc": "The Math.sinh() function returns the hyperbolic sine of a number, that can be expressed using the constant e:",
      "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sinh"
    },
    tanh: {
      "!type": "fn(x: number) -> number",
      "!doc": "The Math.tanh() function returns the hyperbolic tangent of a number.",
      "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/tanh"
    },
    trunc: {
      "!type": "fn(x: number) -> number",
      "!doc": "The Math.trunc() function returns the integral part of a number by removing any fractional digits. It does not round any numbers. The function can be expressed with the floor() and ceil() function:",
      "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc"
    },
    "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math",
    "!doc": "A built-in object that has properties and methods for mathematical constants and functions."
  },
  JSON: {
    parse: {
      "!type": "fn(json: string, reviver?: fn(key: string, value: ?) -> ?) -> ?",
      "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/JSON/parse",
      "!doc": "Parse a string as JSON, optionally transforming the value produced by parsing."
    },
    stringify: {
      "!type": "fn(value: ?, replacer?: fn(key: string, value: ?) -> ?, space?: string|number) -> string",
      "!url": "https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/JSON/stringify",
      "!doc": "Convert a value to JSON, optionally replacing values if a replacer function is specified, or optionally including only the specified properties if a replacer array is specified."
    },
    "!url": "https://developer.mozilla.org/en-US/docs/JSON",
    "!doc": "JSON (JavaScript Object Notation) is a data-interchange format.  It closely resembles a subset of JavaScript syntax, although it is not a strict subset. (See JSON in the JavaScript Reference for full details.)  It is useful when writing any kind of JavaScript-based application, including websites and browser extensions.  For example, you might store user information in JSON format in a cookie, or you might store extension preferences in JSON in a string-valued browser preference."
  },
  ArrayBuffer: {
    "!type": "fn(length: number)",
    "!doc": "The ArrayBuffer object is used to represent a generic, fixed-length raw binary data buffer.",
    "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    isView: {
      "!type": "fn(arg: +ArrayBuffer) -> bool",
      "!doc": "The ArrayBuffer.isView() method returns true if arg is one of the ArrayBuffer views, such as typed array objects or a DataView; false otherwise.",
      "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/isView"
    },
    prototype: {
      byteLength: {
        "!type": "number",
        "!doc": "The byteLength accessor property represents the length of an ArrayBuffer in bytes.",
        "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/byteLength"
      },
      slice: {
        "!type": "fn(begin: number, end?: number) -> +ArrayBuffer",
        "!doc": "The slice() method returns a new ArrayBuffer whose contents are a copy of this ArrayBuffer's bytes from begin, inclusive, up to end, exclusive.",
        "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/slice"
      }
    }
  },
  DataView: {
    "!type": "fn(buffer: +ArrayBuffer, byteOffset?: number, byteLength?: number)",
    "!doc": "The DataView view provides a low-level interface for reading data from and writing it to an ArrayBuffer.",
    "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    prototype: {
      buffer: {
        "!type": "+ArrayBuffer",
        "!doc": "The buffer accessor property represents the ArrayBuffer referenced by the DataView at construction time.",
        "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/buffer"
      },
      byteLength: {
        "!type": "number",
        "!doc": "The byteLength accessor property represents the length (in bytes) of this view from the start of its ArrayBuffer.",
        "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/byteLength"
      },
      byteOffset: {
        "!type": "number",
        "!doc": "The byteOffset accessor property represents the offset (in bytes) of this view from the start of its ArrayBuffer.",
        "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/byteOffset"
      },
      getFloat32: {
        "!type": "fn(byteOffset: number, littleEndian?: bool) -> number",
        "!doc": "The getFloat32() method gets a signed 32-bit integer (float) at the specified byte offset from the start of the DataView.",
        "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getFloat32"
      },
      getFloat64: {
        "!type": "fn(byteOffset: number, littleEndian?: bool) -> number",
        "!doc": "The getFloat64() method gets a signed 64-bit float (double) at the specified byte offset from the start of the DataView.",
        "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getFloat64"
      },
      getInt16: {
        "!type": "fn(byteOffset: number, littleEndian?: bool) -> number",
        "!doc": "The getInt16() method gets a signed 16-bit integer (short) at the specified byte offset from the start of the DataView.",
        "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getInt16"
      },
      getInt32: {
        "!type": "fn(byteOffset: number, littleEndian?: bool) -> number",
        "!doc": "The getInt32() method gets a signed 32-bit integer (long) at the specified byte offset from the start of the DataView.",
        "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getInt32"
      },
      getInt8: {
        "!type": "fn(byteOffset: number, littleEndian?: bool) -> number",
        "!doc": "The getInt8() method gets a signed 8-bit integer (byte) at the specified byte offset from the start of the DataView.",
        "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getInt8"
      },
      getUint16: {
        "!type": "fn(byteOffset: number, littleEndian?: bool) -> number",
        "!doc": "The getUint16() method gets an unsigned 16-bit integer (unsigned short) at the specified byte offset from the start of the DataView.",
        "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getUint16"
      },
      getUint32: {
        "!type": "fn(byteOffset: number, littleEndian?: bool) -> number",
        "!doc": "The getUint32() method gets an unsigned 32-bit integer (unsigned long) at the specified byte offset from the start of the DataView.",
        "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getUint32"
      },
      getUint8: {
        "!type": "fn(byteOffset: number) -> number",
        "!doc": "The getUint8() method gets an unsigned 8-bit integer (unsigned byte) at the specified byte offset from the start of the DataView.",
        "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getUint8"
      },
      setFloat32: {
        "!type": "fn(byteOffset: number, value: number, littleEndian?: bool)",
        "!doc": "The setFloat32() method stores a signed 32-bit integer (float) value at the specified byte offset from the start of the DataView.",
        "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setFloat32"
      },
      setFloat64: {
        "!type": "fn(byteOffset: number, value: number, littleEndian?: bool)",
        "!doc": "The setFloat64() method stores a signed 64-bit integer (double) value at the specified byte offset from the start of the DataView.",
        "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setFloat64"
      },
      setInt16: {
        "!type": "fn(byteOffset: number, value: number, littleEndian?: bool)",
        "!doc": "The setInt16() method stores a signed 16-bit integer (short) value at the specified byte offset from the start of the DataView.",
        "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setInt16"
      },
      setInt32: {
        "!type": "fn(byteOffset: number, value: number, littleEndian?: bool)",
        "!doc": "The setInt32() method stores a signed 32-bit integer (long) value at the specified byte offset from the start of the DataView.",
        "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setInt32"
      },
      setInt8: {
        "!type": "fn(byteOffset: number, value: number)",
        "!doc": "The setInt8() method stores a signed 8-bit integer (byte) value at the specified byte offset from the start of the DataView.",
        "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setInt8"
      },
      setUint16: {
        "!type": "fn(byteOffset: number, value: number, littleEndian?: bool)",
        "!doc": "The setUint16() method stores an unsigned 16-bit integer (unsigned short) value at the specified byte offset from the start of the DataView.",
        "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setUint16"
      },
      setUint32: {
        "!type": "fn(byteOffset: number, value: number, littleEndian?: bool)",
        "!doc": "The setUint32() method stores an unsigned 32-bit integer (unsigned long) value at the specified byte offset from the start of the DataView.",
        "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setUint32"
      },
      setUint8: {
        "!type": "fn(byteOffset: number, value: number)",
        "!doc": "The setUint8() method stores an unsigned 8-bit integer (byte) value at the specified byte offset from the start of the DataView.",
        "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setUint8"
      }
    }
  },
  Float32Array: "TypedArray",
  Float64Array: "TypedArray",
  Int16Array: "TypedArray",
  Int32Array: "TypedArray",
  Int8Array: "TypedArray",
  Map: {
    "!type": "fn(iterable?: [?])",
    "!doc": "The Map object is a simple key/value map. Any value (both objects and primitive values) may be used as either a key or a value.",
    "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    prototype: {
      clear: {
        "!type": "fn()",
        "!doc": "The clear() method removes all elements from a Map object.",
        "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/clear"
      },
      delete: {
        "!type": "fn(key: ?)",
        "!doc": "The delete() method removes the specified element from a Map object.",
        "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/delete"
      },
      entries: {
        "!type": "fn() -> +iter[:t=[!this.:key, !this.:value]]",
        "!doc": "The entries() method returns a new Iterator object that contains the [key, value] pairs for each element in the Map object in insertion order.",
        "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/entries"
      },
      forEach: {
        "!type": "fn(callback: fn(value: ?, key: ?, map: +Map), thisArg?: ?)",
        "!effects": [
          "call !0 this=!1 !this.:value !this.:key !this"
        ],
        "!doc": "The forEach() method executes a provided function once per each key/value pair in the Map object, in insertion order.",
        "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach"
      },
      get: {
        "!type": "fn(key: ?) -> !this.:value",
        "!doc": "The get() method returns a specified element from a Map object.",
        "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get"
      },
      has: {
        "!type": "fn(key: ?) -> bool",
        "!doc": "The has() method returns a boolean indicating whether an element with the specified key exists or not.",
        "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/has"
      },
      keys: {
        "!type": "fn() -> +iter[:t=!this.:key]",
        "!doc": "The keys() method returns a new Iterator object that contains the keys for each element in the Map object in insertion order.",
        "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/keys"
      },
      set: {
        "!type": "fn(key: ?, value: ?) -> !this",
        "!effects": [
          "propagate !0 !this.:key",
          "propagate !1 !this.:value"
        ],
        "!doc": "The set() method adds a new element with a specified key and value to a Map object.",
        "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/set"
      },
      size: {
        "!type": "number",
        "!doc": "The size accessor property returns the number of elements in a Map object.",
        "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/size"
      },
      values: {
        "!type": "fn() -> +iter[:t=!this.:value]",
        "!doc": "The values() method returns a new Iterator object that contains the values for each element in the Map object in insertion order.",
        "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/values"
      },
      ":Symbol.iterator": {
        "!type": "fn() -> +iter[:t=[!this.:key, !this.:value]]",
        "!doc": "Returns a new Iterator object that contains the [key, value] pairs for each element in the Map object in insertion order.",
        "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/@@iterator"
      }
    }
  },
  Promise: {
    "!type": "fn(executor: fn(resolve: fn(value: ?), reject: fn(reason: ?))) -> !custom:Promise_ctor",
    "!doc": "The Promise object is used for deferred and asynchronous computations. A Promise is in one of the three states:",
    "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    all: {
      "!type": "fn(iterable: [+Promise]) -> +Promise[:t=[!0.<i>.:t]]",
      "!doc": "The Promise.all(iterable) method returns a promise that resolves when all of the promises in the iterable argument have resolved.",
      "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all"
    },
    race: {
      "!type": "fn(iterable: [+Promise]) -> !0.<i>",
      "!doc": "The Promise.race(iterable) method returns a promise that resolves or rejects as soon as one of the promises in the iterable resolves or rejects, with the value or reason from that promise.",
      "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race"
    },
    reject: "Promise_reject",
    resolve: {
      "!type": "fn(value: ?) -> !custom:Promise_resolve",
      "!doc": "The Promise.resolve(value) method returns a Promise object that is resolved with the given value. If the value is a thenable (i.e. has a then method), the returned promise will 'follow' that thenable, adopting its eventual state; otherwise the returned promise will be fulfilled with the value.",
      "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve"
    },
    prototype: "Promise.prototype"
  },
  Proxy: {
    "!type": "fn(target: ?, handler: Proxy_handler)",
    "!doc": "The Proxy object is used to define the custom behavior in JavaScript fundamental operation (e.g. property lookup, assignment, enumeration, function invocation, etc).",
    "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    revocable: {
      "!type": "fn(target: ?, handler: Proxy_handler) -> Proxy_revocable",
      "!doc": "The Proxy.revocable() method is used to create a revocable Proxy object.",
      "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/revocable"
    }
  },
  Reflect: {
    "!doc": "Reflect is a built-in object that provides methods for interceptable JavaScript operations.",
    "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    apply: {
      "!type": "fn(target: fn(), thisArg?: ?, argumentList?: [?]) -> !0.!ret",
      "!doc": "Calls a target function with arguments as specified.",
      "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/apply"
    },
    construct: {
      "!type": "fn(target: fn(), argumentList?: [?]) -> ?",
      "!doc": "Acts like the new operator as a function. It is equivalent to calling new target(...args).",
      "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/construct"
    },
    defineProperty: {
      "!type": "fn(target: ?, property: string, descriptor: propertyDescriptor) -> bool",
      "!doc": "The static Reflect.defineProperty() method is like Object.defineProperty() but returns a Boolean.",
      "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/defineProperty"
    },
    deleteProperty: {
      "!type": "fn(target: ?, property: string) -> bool",
      "!doc": "Works like the delete operator as a function.",
      "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/deleteProperty"
    },
    enumerate: {
      "!type": "fn(target: ?) -> +iter[:t=string]",
      "!doc": "Returns an iterator with the enumerable own and inherited properties of the target object.",
      "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/enumerate"
    },
    get: {
      "!type": "fn(target: ?, property: string) -> ?",
      "!doc": "Gets a property from an object.",
      "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/get"
    },
    getOwnPropertyDescriptor: {
      "!type": "fn(target: ?, property: string) -> ?",
      "!doc": "Returns a property descriptor of the given property if it exists on the object, undefined otherwise.",
      "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/getOwnPropertyDescriptor"
    },
    getPrototypeOf: {
      "!type": "fn(target: ?) -> ?",
      "!doc": "Returns the prototype of the specified object.",
      "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/getPrototypeOf"
    },
    has: {
      "!type": "fn(target: ?, property: string) -> bool",
      "!doc": "The static Reflect.has() method works like the in operator as a function.",
      "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/has"
    },
    isExtensible: {
      "!type": "fn(target: ?) -> bool",
      "!doc": "Determines if an object is extensible (whether it can have new properties added to it).",
      "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/isExtensible"
    },
    ownKeys: {
      "!type": "fn(target: ?) -> [string]",
      "!doc": "Returns an array of the target object's own property keys.",
      "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/ownKeys"
    },
    preventExtensions: {
      "!type": "fn(target: ?) -> bool",
      "!doc": "Prevents new properties from ever being added to an object.",
      "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/preventExtensions"
    },
    set: {
      "!type": "fn(target: ?, property: string, value: ?) -> bool",
      "!doc": "Set a property on an object.",
      "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/set"
    },
    setPrototypeOf: {
      "!type": "fn(target: ?, prototype: ?) -> bool",
      "!doc": "Sets the prototype of a specified object to another object or to null.",
      "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/setPrototypeOf"
    }
  },
  Set: {
    "!type": "fn(iterable?: [?])",
    "!doc": "The Set object lets you store unique values of any type, whether primitive values or object references.",
    "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    prototype: {
      add: {
        "!type": "fn(value: ?) -> !this",
        "!effects": [
          "propagate !0 !this.:t"
        ],
        "!doc": "The add() method appends a new element with a specified value to the end of a Set object.",
        "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/add"
      },
      clear: {
        "!type": "fn()",
        "!doc": "The clear() method removes all elements from a Set object.",
        "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/clear"
      },
      delete: {
        "!type": "fn(value: ?) -> bool",
        "!doc": "The delete() method removes the specified element from a Set object.",
        "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/delete"
      },
      entries: {
        "!type": "fn() -> +iter[:t=[!this.:t]]",
        "!doc": "The entries() method returns a new Iterator object that contains an array of [value, value] for each element in the Set object, in insertion order. For Set objects there is no key like in Map objects. However, to keep the API similar to the Map object, each entry has the same value for its key and value here, so that an array [value, value] is returned.",
        "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/entries"
      },
      forEach: {
        "!type": "fn(callback: fn(value: ?, value2: ?, set: +Set), thisArg?: ?)",
        "!effects": [
          "call !0 this=!1 !this.:t number !this"
        ],
        "!doc": "The forEach() method executes a provided function once per each value in the Set object, in insertion order.",
        "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/forEach"
      },
      has: {
        "!type": "fn(value: ?) -> bool",
        "!doc": "The has() method returns a boolean indicating whether an element with the specified value exists in a Set object or not.",
        "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/has"
      },
      keys: {
        "!type": "fn() -> +iter[:t=!this.:t]",
        "!doc": "The values() method returns a new Iterator object that contains the values for each element in the Set object in insertion order.",
        "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/keys"
      },
      size: {
        "!type": "number",
        "!doc": "The size accessor property returns the number of elements in a Set object.",
        "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/size"
      },
      values: {
        "!type": "fn() -> +iter[:t=!this.:t]",
        "!doc": "The values() method returns a new Iterator object that contains the values for each element in the Set object in insertion order.",
        "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/values"
      },
      ":Symbol.iterator": {
        "!type": "fn() -> +iter[:t=!this.:t]",
        "!doc": "Returns a new Iterator object that contains the values for each element in the Set object in insertion order.",
        "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/@@iterator"
      }
    }
  },
  Symbol: {
    "!type": "fn(description?: string) -> !custom:getSymbol",
    "!doc": "A symbol is a unique and immutable data type and may be used as an identifier for object properties. The symbol object is an implicit object wrapper for the symbol primitive data type.",
    "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    for: {
      "!type": "fn(key: string) -> !custom:getSymbol",
      "!doc": "The Symbol.for(key) method searches for existing symbols in a runtime-wide symbol registry with the given key and returns it if found. Otherwise a new symbol gets created in the global symbol registry with this key.",
      "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/for"
    },
    keyFor: ":Symbol.keyFor",
    hasInstance: ":Symbol.hasInstance",
    isConcatSpreadable: ":Symbol.isConcatSpreadable",
    iterator: ":Symbol.iterator",
    match: ":Symbol.match",
    replace: ":Symbol.replace",
    search: ":Symbol.search",
    species: ":Symbol.species",
    split: ":Symbol.split",
    toStringTag: ":Symbol.toStringTag",
    unscopables: ":Symbol.unscopables",
    prototype: {
      "!stdProto": "Symbol"
    }
  },
  Uint16Array: "TypedArray",
  Uint32Array: "TypedArray",
  Uint8Array: "TypedArray",
  Uint8ClampedArray: "TypedArray",
  WeakMap: {
    "!type": "fn(iterable?: [?])",
    "!doc": "The WeakMap object is a collection of key/value pairs in which the keys are objects and the values can be arbitrary values.",
    "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    prototype: {
      delete: {
        "!type": "fn(key: ?) -> bool",
        "!doc": "The delete() method removes the specified element from a WeakMap object.",
        "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/delete"
      },
      get: {
        "!type": "fn(key: ?) -> !this.:value",
        "!doc": "The get() method returns a specified element from a WeakMap object.",
        "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/get"
      },
      has: {
        "!type": "fn(key: ?) -> bool",
        "!doc": "The has() method returns a boolean indicating whether an element with the specified key exists in the WeakMap object or not.",
        "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/has"
      },
      set: {
        "!type": "fn(key: ?, value: ?)",
        "!effects": [
          "propagate !0 !this.:key",
          "propagate !1 !this.:value"
        ],
        "!doc": "The set() method adds a new element with a specified key and value to a WeakMap object.",
        "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/set"
      }
    }
  },
  WeakSet: {
    "!type": "fn(iterable?: [?])",
    "!doc": "The WeakSet object lets you store weakly held objects in a collection.",
    "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    prototype: {
      add: {
        "!type": "fn(value: ?)",
        "!doc": "The add() method appends a new object to the end of a WeakSet object.",
        "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/add"
      },
      delete: {
        "!type": "fn(value: ?) -> bool",
        "!doc": "The delete() method removes the specified element from a WeakSet object.",
        "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/delete"
      },
      has: {
        "!type": "fn(value: ?) -> bool",
        "!doc": "The has() method returns a boolean indicating whether an object exists in a WeakSet or not.",
        "!url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/has"
      }
    }
  },
  window: NP,
  uuid: PP,
  numbro: _P,
  Papa: bP
};
class gc {
  constructor() {
    Zr(this, "isFunction");
    this.completionSource = this.completionSource.bind(this);
  }
  setIsFunction(t) {
    this.isFunction = t;
  }
}
const CP = [
  // @ts-ignore
  vP
];
var Li = /* @__PURE__ */ ((e) => (e.OBJECT = "Object", e.NUMBER = "Number", e.ARRAY = "Array", e.FUNCTION = "Function", e.BOOLEAN = "Boolean", e.STRING = "String", e.UNKNOWN = "Unknown", e))(Li || {});
function LP(e) {
  return e === "?" ? "Unknown" : e === "number" ? "Number" : e === "string" ? "String" : e === "bool" ? "Boolean" : e === "array" ? "Array" : /^fn\(/.test(e) ? "Function" : /^\[/.test(e) ? "Array" : "Object";
}
const xP = new IP.Server({
  defs: CP
});
class DP extends gc {
  completionSource(t) {
    if (!ic(t, this.isFunction) || t.matchBefore(/\w[\w\.]*/) === null && (this.isFunction || t.matchBefore(/\{\{\s*/) === null))
      return null;
    const i = t.state, a = {
      type: "completions",
      types: !0,
      docs: !0,
      urls: !0,
      origins: !0,
      caseInsensitive: !0,
      guess: !1,
      inLiteral: !1,
      includeKeywords: !0,
      end: t.pos,
      file: "#0"
    }, s = [{
      type: "full",
      name: "_temp",
      text: i.sliceDoc()
    }], o = {
      query: a,
      files: s
    };
    let l, c;
    if (xP.request(o, (O, d) => {
      l = O, c = d;
    }), l || c.completions.length === 0)
      return null;
    const f = [];
    for (const O of c.completions) {
      const d = LP(O.type), g = {
        type: d,
        // icon
        label: O.name,
        detail: d,
        // short message after label
        // apply,
        // info to add: completion.name, completion.url, completion.type, completion.doc
        info: O.doc === void 0 ? void 0 : (L) => {
          let D = document.createElement("div");
          return D.innerHTML = `
                  <div class="hintDiv" onclick='javascript:window.open("${O.url}")' >
                    <svg width="16px" height="16px" class="hintSvg" viewBox="0 0 16 16" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                      <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd" stroke-linecap="round">
                          <g transform="translate(8.000000, 8.000000) rotate(30.000000) translate(-8.000000, -8.000000) translate(5.000000, 1.500000)" stroke="#4965F2" stroke-width="1.5">
                              <path d="M0,4.5 L0,3 C0,1.34314575 1.34314575,0 3,0 C4.65685425,0 6,1.34314575 6,3 L6,4.5 L6,4.5 M6,8.5 L6,10 C6,11.6568542 4.65685425,13 3,13 C1.34314575,13 0,11.6568542 0,10 L0,8.5 L0,8.5"></path>
                              <line x1="3" y1="4" x2="3" y2="9"></line>
                          </g>
                      </g>
                    </svg>
                    <span class="hintName">${O.name}</span>
                  </div>
                  <span class="hintType">${O.type}</span>
                  <span class="hintDoc">${O.doc}</span>
                  `, D;
        },
        boost: -1
      };
      f.push(g);
    }
    return {
      from: c.start,
      validFor: /^\w*$/,
      options: f
    };
  }
}
const yd = ["value", "selectedRow", "data", "text"], UP = ["setValue", "setData"];
class wP extends gc {
  constructor() {
    super(...arguments);
    Zr(this, "data");
    Zr(this, "boostExposingData");
  }
  completionSource(r) {
    if (this.data === void 0 || !ic(r, this.isFunction))
      return null;
    const i = r.matchBefore(/(?:[A-Za-z_$][\w$]*(?:\[\s*(?:\d+|(["'])(?:[^\1\\]|\\.)*?\1)\s*\])*\.)*(?:[A-Za-z_$][\w$]*)?/);
    if (!i || i.text.length === 0 && (this.isFunction || r.matchBefore(/\{\{\s*/) === null))
      return null;
    const n = MP(this.data, i.text);
    if (!n)
      return null;
    const [a, s, o] = n, l = Object.keys(a).filter((p) => p.startsWith(o)), c = l.map((p) => {
      var L;
      const O = Id(a[p]), d = s === 0 && ((L = this.boostExposingData) == null ? void 0 : L.hasOwnProperty(p));
      return {
        type: Bi.lowerCase(O),
        label: p,
        detail: Bi.capitalize(O),
        boost: d ? 20 : yd.includes(p) ? 3 : UP.includes(p) ? 2 : 1,
        apply: s === 0 ? void 0 : (D, W, x, V) => {
          D.dispatch({
            changes: {
              from: x - 1,
              to: V,
              insert: p.match(/^[A-Za-z_$][\w$]*$/) ? `.${p}` : `['${p.replace(/[\\']/g, (_) => "\\" + _)}']`
            }
          });
        }
      };
    });
    return {
      from: i.from + s,
      validFor: /^\w*$/,
      options: kP(a, l).concat(c)
    };
  }
}
function MP(e, t) {
  const r = t.lastIndexOf(".");
  if (r < 0)
    return [e, 0, t];
  try {
    const i = UT(t.slice(0, r), e);
    if (typeof i == "object" && i && !Array.isArray(i))
      return [i, r + 1, t.slice(r + 1)];
  } catch {
    return;
  }
}
function Id(e) {
  const t = typeof e;
  return t === "number" ? Li.NUMBER : t === "string" ? Li.STRING : t === "boolean" ? Li.BOOLEAN : Bi.isArray(e) ? Li.ARRAY : Bi.isFunction(e) ? Li.FUNCTION : Li.OBJECT;
}
function kP(e, t) {
  return t.filter((r) => e[r]).flatMap((r) => yd.filter((i) => e[r].hasOwnProperty(i)).map((i) => {
    const n = Id(e[r][i]);
    return {
      type: Bi.lowerCase(n),
      label: r + "." + i,
      detail: Bi.capitalize(n),
      boost: 10
    };
  }));
}
const QP = "", GP = "add after all alter and any as asc before begin between by case cast column count create cross current_timestamp cursor declare default delete desc describe distinct drop else end except exists fetch first from full function group having if in inner insert intersect into is join key last lateral left like limit natural next not on option or order outer prepare primary right select set similar some table then to union unique update using when where with without ", VP = Bi.fromPairs([...QP.split(" ").map((e) => [
  e,
  1
  /* TYPE */
]), ...GP.split(" ").map((e) => [
  e,
  2
  /* KEYWORD */
])]), BP = /* @__PURE__ */ new Set(["select", "distinct", "from", "where", "and", "or", "not", "in", "between", "like", "group", "grouping", "order", "by", "limit", "asc", "desc", "as", "join", "inner", "outer", "intersect", "union", "using", "count", "exists", "having"]);
function $P(e, t, r) {
  var n;
  let i = Object.keys(e).map((a) => ({
    label: t ? a.toUpperCase() : a,
    detail: e[a] === 1 ? "type" : e[a] === 2 ? "keyword" : "variable",
    boost: BP.has(a) ? 2 : -1
  }));
  return r && (i = i.concat((n = Object.keys(r)) == null ? void 0 : n.map((a) => ({
    label: a,
    detail: r[a],
    boost: -1
  })))), Uu(["QuotedIdentifier", "SpecialVar", "String", "LineComment", "BlockComment", "."], Ys(i));
}
class YP extends gc {
  constructor() {
    super(...arguments);
    Zr(this, "metaData");
  }
  completionSource(r) {
    return FP(r, this.metaData, this.isFunction);
  }
}
function FP(e, t, r) {
  if (ic(e, r))
    return null;
  const i = e.matchBefore(/[\w.]*/);
  return !i || i.text.length === 0 ? null : $P(VP, !0, t)(e);
}
var Nd = {}, Yr = {}, _l = { exports: {} }, bl = { exports: {} }, Na = {};
Object.defineProperty(Na, "__esModule", {
  value: !0
});
Na.indentString = WP;
Na.isTabularStyle = XP;
function WP(e) {
  return e.indentStyle === "tabularLeft" || e.indentStyle === "tabularRight" ? " ".repeat(10) : e.useTabs ? "	" : " ".repeat(e.tabWidth);
}
function XP(e) {
  return e.indentStyle === "tabularLeft" || e.indentStyle === "tabularRight";
}
var vl = { exports: {} };
(function(e, t) {
  Object.defineProperty(t, "__esModule", {
    value: !0
  }), t.default = void 0;
  function r(o, l) {
    if (!(o instanceof l))
      throw new TypeError("Cannot call a class as a function");
  }
  function i(o, l) {
    for (var c = 0; c < l.length; c++) {
      var f = l[c];
      f.enumerable = f.enumerable || !1, f.configurable = !0, "value" in f && (f.writable = !0), Object.defineProperty(o, f.key, f);
    }
  }
  function n(o, l, c) {
    return l && i(o.prototype, l), c && i(o, c), Object.defineProperty(o, "prototype", { writable: !1 }), o;
  }
  function a(o, l, c) {
    return l in o ? Object.defineProperty(o, l, { value: c, enumerable: !0, configurable: !0, writable: !0 }) : o[l] = c, o;
  }
  var s = /* @__PURE__ */ function() {
    function o(l) {
      r(this, o), a(this, "params", void 0), a(this, "index", void 0), this.params = l, this.index = 0;
    }
    return n(o, [{
      key: "get",
      value: function(c) {
        var f = c.key, p = c.value;
        return this.params ? f ? this.params[f] : this.params[this.index++] : p;
      }
    }]), o;
  }();
  t.default = s, e.exports = t.default;
})(vl, vl.exports);
var jP = vl.exports, Cl = { exports: {} }, it = {};
Object.defineProperty(it, "__esModule", {
  value: !0
});
it.testToken = it.isToken = it.isReserved = it.isCommand = it.TokenType = it.EOF_TOKEN = void 0;
var ze;
it.TokenType = ze;
(function(e) {
  e.QUOTED_IDENTIFIER = "QUOTED_IDENTIFIER", e.IDENTIFIER = "IDENTIFIER", e.STRING = "STRING", e.VARIABLE = "VARIABLE", e.RESERVED_KEYWORD = "RESERVED_KEYWORD", e.RESERVED_LOGICAL_OPERATOR = "RESERVED_LOGICAL_OPERATOR", e.RESERVED_DEPENDENT_CLAUSE = "RESERVED_DEPENDENT_CLAUSE", e.RESERVED_BINARY_COMMAND = "RESERVED_BINARY_COMMAND", e.RESERVED_COMMAND = "RESERVED_COMMAND", e.RESERVED_JOIN = "RESERVED_JOIN", e.RESERVED_JOIN_CONDITION = "RESERVED_JOIN_CONDITION", e.RESERVED_CASE_START = "RESERVED_CASE_START", e.RESERVED_CASE_END = "RESERVED_CASE_END", e.OPERATOR = "OPERATOR", e.COMMA = "COMMA", e.OPEN_PAREN = "OPEN_PAREN", e.CLOSE_PAREN = "CLOSE_PAREN", e.LINE_COMMENT = "LINE_COMMENT", e.BLOCK_COMMENT = "BLOCK_COMMENT", e.NUMBER = "NUMBER", e.NAMED_PARAMETER = "NAMED_PARAMETER", e.QUOTED_PARAMETER = "QUOTED_PARAMETER", e.INDEXED_PARAMETER = "INDEXED_PARAMETER", e.POSITIONAL_PARAMETER = "POSITIONAL_PARAMETER", e.DELIMITER = "DELIMITER", e.EOF = "EOF";
})(ze || (it.TokenType = ze = {}));
var ZP = {
  type: ze.EOF,
  text: "«EOF»",
  value: "«EOF»"
};
it.EOF_TOKEN = ZP;
var kt = function(t) {
  return function(r) {
    return r.type === t.type && r.value === t.value;
  };
};
it.testToken = kt;
var HP = {
  AS: kt({
    value: "AS",
    type: ze.RESERVED_KEYWORD
  }),
  AND: kt({
    value: "AND",
    type: ze.RESERVED_LOGICAL_OPERATOR
  }),
  ARRAY: kt({
    value: "ARRAY",
    type: ze.RESERVED_KEYWORD
  }),
  BETWEEN: kt({
    value: "BETWEEN",
    type: ze.RESERVED_KEYWORD
  }),
  CASE: kt({
    value: "CASE",
    type: ze.RESERVED_CASE_START
  }),
  CAST: kt({
    value: "CAST",
    type: ze.RESERVED_KEYWORD
  }),
  BY: kt({
    value: "BY",
    type: ze.RESERVED_KEYWORD
  }),
  END: kt({
    value: "END",
    type: ze.RESERVED_CASE_END
  }),
  FROM: kt({
    value: "FROM",
    type: ze.RESERVED_COMMAND
  }),
  LIMIT: kt({
    value: "LIMIT",
    type: ze.RESERVED_COMMAND
  }),
  SELECT: kt({
    value: "SELECT",
    type: ze.RESERVED_COMMAND
  }),
  SET: kt({
    value: "SET",
    type: ze.RESERVED_COMMAND
  }),
  STRUCT: kt({
    value: "STRUCT",
    type: ze.RESERVED_KEYWORD
  }),
  TABLE: kt({
    value: "TABLE",
    type: ze.RESERVED_KEYWORD
  }),
  WINDOW: kt({
    value: "WINDOW",
    type: ze.RESERVED_COMMAND
  }),
  WITH: kt({
    value: "WITH",
    type: ze.RESERVED_COMMAND
  })
};
it.isToken = HP;
var zP = function(t) {
  return t.type === ze.RESERVED_COMMAND || t.type === ze.RESERVED_BINARY_COMMAND;
};
it.isCommand = zP;
var qP = function(t) {
  return t.type === ze.RESERVED_KEYWORD || t.type === ze.RESERVED_LOGICAL_OPERATOR || t.type === ze.RESERVED_DEPENDENT_CLAUSE || t.type === ze.RESERVED_JOIN_CONDITION || t.type === ze.RESERVED_COMMAND || t.type === ze.RESERVED_BINARY_COMMAND || t.type === ze.RESERVED_JOIN || t.type === ze.RESERVED_CASE_START || t.type === ze.RESERVED_CASE_END;
};
it.isReserved = qP;
var ii = {};
Object.defineProperty(ii, "__esModule", {
  value: !0
});
ii.isTokenNode = ii.NodeType = void 0;
var Ll;
ii.NodeType = Ll;
(function(e) {
  e.statement = "statement", e.clause = "clause", e.binary_clause = "binary_clause", e.function_call = "function_call", e.array_subscript = "array_subscript", e.parenthesis = "parenthesis", e.between_predicate = "between_predicate", e.limit_clause = "limit_clause", e.all_columns_asterisk = "all_columns_asterisk", e.token = "token";
})(Ll || (ii.NodeType = Ll = {}));
var JP = function(t) {
  return t.type === "token";
};
ii.isTokenNode = JP;
(function(e, t) {
  Object.defineProperty(t, "__esModule", {
    value: !0
  }), t.default = void 0;
  var r = it, i = ii;
  function n(c, f) {
    if (!(c instanceof f))
      throw new TypeError("Cannot call a class as a function");
  }
  function a(c, f) {
    for (var p = 0; p < f.length; p++) {
      var O = f[p];
      O.enumerable = O.enumerable || !1, O.configurable = !0, "value" in O && (O.writable = !0), Object.defineProperty(c, O.key, O);
    }
  }
  function s(c, f, p) {
    return f && a(c.prototype, f), p && a(c, p), Object.defineProperty(c, "prototype", { writable: !1 }), c;
  }
  function o(c, f, p) {
    return f in c ? Object.defineProperty(c, f, { value: p, enumerable: !0, configurable: !0, writable: !0 }) : c[f] = p, c;
  }
  var l = /* @__PURE__ */ function() {
    function c(f) {
      n(this, c), this.tokens = f, o(this, "index", 0);
    }
    return s(c, [{
      key: "parse",
      value: function() {
        for (var p = [], O; O = this.statement(); )
          p.push(O);
        return p;
      }
    }, {
      key: "statement",
      value: function() {
        for (var p = []; ; ) {
          if (this.look().type === r.TokenType.DELIMITER)
            return this.next(), {
              type: i.NodeType.statement,
              children: p,
              hasSemicolon: !0
            };
          if (this.look().type === r.TokenType.EOF)
            return p.length > 0 ? {
              type: i.NodeType.statement,
              children: p,
              hasSemicolon: !1
            } : void 0;
          p.push(this.expression());
        }
      }
    }, {
      key: "expression",
      value: function() {
        return this.limitClause() || this.clause() || this.binaryClause() || this.functionCall() || this.arraySubscript() || this.parenthesis() || this.betweenPredicate() || this.allColumnsAsterisk() || this.nextTokenNode();
      }
    }, {
      key: "clause",
      value: function() {
        if (this.look().type === r.TokenType.RESERVED_COMMAND) {
          var p = this.next(), O = this.expressionsUntilClauseEnd();
          return {
            type: i.NodeType.clause,
            nameToken: p,
            children: O
          };
        }
      }
    }, {
      key: "binaryClause",
      value: function() {
        if (this.look().type === r.TokenType.RESERVED_BINARY_COMMAND) {
          var p = this.next(), O = this.expressionsUntilClauseEnd();
          return {
            type: i.NodeType.binary_clause,
            nameToken: p,
            children: O
          };
        }
      }
    }, {
      key: "functionCall",
      value: function() {
        if ((this.look().type === r.TokenType.RESERVED_KEYWORD || this.look().type === r.TokenType.IDENTIFIER) && this.look(1).value === "(" && !this.look(1).whitespaceBefore)
          return {
            type: i.NodeType.function_call,
            nameToken: this.next(),
            parenthesis: this.parenthesis()
          };
      }
    }, {
      key: "arraySubscript",
      value: function() {
        if ((this.look().type === r.TokenType.RESERVED_KEYWORD || this.look().type === r.TokenType.IDENTIFIER) && this.look(1).value === "[")
          return {
            type: i.NodeType.array_subscript,
            arrayToken: this.next(),
            parenthesis: this.parenthesis()
          };
      }
    }, {
      key: "parenthesis",
      value: function() {
        if (this.look().type === r.TokenType.OPEN_PAREN) {
          for (var p = [], O = this.next(), d = O.value, g = ""; this.look().type !== r.TokenType.CLOSE_PAREN && this.look().type !== r.TokenType.EOF; )
            p.push(this.expression());
          return this.look().type === r.TokenType.CLOSE_PAREN && (g = this.next().value), {
            type: i.NodeType.parenthesis,
            children: p,
            openParen: d,
            closeParen: g
          };
        }
      }
    }, {
      key: "betweenPredicate",
      value: function() {
        if (r.isToken.BETWEEN(this.look()) && r.isToken.AND(this.look(2)))
          return {
            type: i.NodeType.between_predicate,
            betweenToken: this.next(),
            expr1: this.next(),
            andToken: this.next(),
            expr2: this.next()
          };
      }
    }, {
      key: "limitClause",
      value: function() {
        if (r.isToken.LIMIT(this.look())) {
          var p = this.next(), O = this.expressionsUntilClauseEnd(function(g) {
            return g.type === r.TokenType.COMMA;
          });
          if (this.look().type === r.TokenType.COMMA) {
            this.next();
            var d = this.expressionsUntilClauseEnd();
            return {
              type: i.NodeType.limit_clause,
              limitToken: p,
              offset: O,
              count: d
            };
          } else
            return {
              type: i.NodeType.limit_clause,
              limitToken: p,
              count: O
            };
        }
      }
    }, {
      key: "allColumnsAsterisk",
      value: function() {
        if (this.look().value === "*" && r.isToken.SELECT(this.look(-1)))
          return this.next(), {
            type: i.NodeType.all_columns_asterisk
          };
      }
    }, {
      key: "expressionsUntilClauseEnd",
      value: function() {
        for (var p = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : function() {
          return !1;
        }, O = []; this.look().type !== r.TokenType.RESERVED_COMMAND && this.look().type !== r.TokenType.RESERVED_BINARY_COMMAND && this.look().type !== r.TokenType.EOF && this.look().type !== r.TokenType.CLOSE_PAREN && this.look().type !== r.TokenType.DELIMITER && !p(this.look()); )
          O.push(this.expression());
        return O;
      }
      // Returns current token without advancing the pointer
    }, {
      key: "look",
      value: function() {
        var p = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
        return this.tokens[this.index + p] || r.EOF_TOKEN;
      }
      // Returns current token and advances the pointer to next token
    }, {
      key: "next",
      value: function() {
        return this.tokens[this.index++] || r.EOF_TOKEN;
      }
    }, {
      key: "nextTokenNode",
      value: function() {
        return {
          type: i.NodeType.token,
          token: this.next()
        };
      }
    }]), c;
  }();
  t.default = l, e.exports = t.default;
})(Cl, Cl.exports);
var KP = Cl.exports, xl = { exports: {} }, Xe = {};
Object.defineProperty(Xe, "__esModule", {
  value: !0
});
Xe.sum = Xe.sortByLengthDesc = Xe.maxLength = Xe.last = Xe.equalizeWhitespace = Xe.dedupe = void 0;
function e_(e, t) {
  var r = typeof Symbol < "u" && e[Symbol.iterator] || e["@@iterator"];
  if (!r) {
    if (Array.isArray(e) || (r = Pd(e)) || t && e && typeof e.length == "number") {
      r && (e = r);
      var i = 0, n = function() {
      };
      return { s: n, n: function() {
        return i >= e.length ? { done: !0 } : { done: !1, value: e[i++] };
      }, e: function(c) {
        throw c;
      }, f: n };
    }
    throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
  }
  var a = !0, s = !1, o;
  return { s: function() {
    r = r.call(e);
  }, n: function() {
    var c = r.next();
    return a = c.done, c;
  }, e: function(c) {
    s = !0, o = c;
  }, f: function() {
    try {
      !a && r.return != null && r.return();
    } finally {
      if (s)
        throw o;
    }
  } };
}
function t_(e) {
  return n_(e) || i_(e) || Pd(e) || r_();
}
function r_() {
  throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function Pd(e, t) {
  if (e) {
    if (typeof e == "string")
      return Dl(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return Dl(e, t);
  }
}
function i_(e) {
  if (typeof Symbol < "u" && e[Symbol.iterator] != null || e["@@iterator"] != null)
    return Array.from(e);
}
function n_(e) {
  if (Array.isArray(e))
    return Dl(e);
}
function Dl(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, i = new Array(t); r < t; r++)
    i[r] = e[r];
  return i;
}
var a_ = function(t) {
  return t_(new Set(t));
};
Xe.dedupe = a_;
var s_ = function(t) {
  return t[t.length - 1];
};
Xe.last = s_;
var o_ = function(t) {
  return t.sort(function(r, i) {
    return i.length - r.length || r.localeCompare(i);
  });
};
Xe.sortByLengthDesc = o_;
var l_ = function(t) {
  return t.reduce(function(r, i) {
    return Math.max(r, i.length);
  }, 0);
};
Xe.maxLength = l_;
var u_ = function(t) {
  return t.replace(/[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]+/g, " ");
};
Xe.equalizeWhitespace = u_;
var c_ = function(t) {
  var r = 0, i = e_(t), n;
  try {
    for (i.s(); !(n = i.n()).done; ) {
      var a = n.value;
      r += a;
    }
  } catch (s) {
    i.e(s);
  } finally {
    i.f();
  }
  return r;
};
Xe.sum = c_;
(function(e, t) {
  Object.defineProperty(t, "__esModule", {
    value: !0
  }), t.default = f;
  var r = Xe;
  function i(D, W) {
    return l(D) || o(D, W) || a(D, W) || n();
  }
  function n() {
    throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
  }
  function a(D, W) {
    if (D) {
      if (typeof D == "string")
        return s(D, W);
      var x = Object.prototype.toString.call(D).slice(8, -1);
      if (x === "Object" && D.constructor && (x = D.constructor.name), x === "Map" || x === "Set")
        return Array.from(D);
      if (x === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(x))
        return s(D, W);
    }
  }
  function s(D, W) {
    (W == null || W > D.length) && (W = D.length);
    for (var x = 0, V = new Array(W); x < W; x++)
      V[x] = D[x];
    return V;
  }
  function o(D, W) {
    var x = D == null ? null : typeof Symbol < "u" && D[Symbol.iterator] || D["@@iterator"];
    if (x != null) {
      var V = [], _ = !0, $ = !1, z, F;
      try {
        for (x = x.call(D); !(_ = (z = x.next()).done) && (V.push(z.value), !(W && V.length === W)); _ = !0)
          ;
      } catch (ae) {
        $ = !0, F = ae;
      } finally {
        try {
          !_ && x.return != null && x.return();
        } finally {
          if ($)
            throw F;
        }
      }
      return V;
    }
  }
  function l(D) {
    if (Array.isArray(D))
      return D;
  }
  var c = /^[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]+/;
  function f(D, W, x) {
    return p(D.split(`
`)).flatMap(function(V) {
      if (V.length === 1)
        return V;
      if (W === "tabular")
        return O(V);
      if (W === "before")
        return d(V, x);
      throw new Error("Unexpected commaPosition: ".concat(W));
    }).join(`
`);
  }
  function p(D) {
    for (var W = [], x = 0; x < D.length; x++) {
      for (var V = [D[x]]; D[x].match(/.*,$/); )
        x++, V.push(D[x]);
      W.push(V);
    }
    return W;
  }
  function O(D) {
    var W = (0, r.maxLength)(D);
    return L(D).map(function(x, V) {
      return V === D.length - 1 ? x : x + " ".repeat(W - x.length - 1) + ",";
    });
  }
  function d(D, W) {
    return L(D).map(function(x, V) {
      if (V === 0)
        return x;
      var _ = x.match(c) || [""], $ = i(_, 1), z = $[0];
      return g(z, W) + W.replace(/ {2}$/, ", ") + // add comma to the end of last indent
      x.trimStart();
    });
  }
  function g(D, W) {
    return D.replace(new RegExp(W + "$"), "");
  }
  function L(D) {
    return D.map(function(W) {
      return W.replace(/,$/, "");
    });
  }
  e.exports = t.default;
})(xl, xl.exports);
var f_ = xl.exports, Ul = { exports: {} };
(function(e, t) {
  Object.defineProperty(t, "__esModule", {
    value: !0
  }), t.default = c;
  var r = Xe;
  function i(f) {
    return o(f) || s(f) || a(f) || n();
  }
  function n() {
    throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
  }
  function a(f, p) {
    if (f) {
      if (typeof f == "string")
        return l(f, p);
      var O = Object.prototype.toString.call(f).slice(8, -1);
      if (O === "Object" && f.constructor && (O = f.constructor.name), O === "Map" || O === "Set")
        return Array.from(f);
      if (O === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(O))
        return l(f, p);
    }
  }
  function s(f) {
    if (typeof Symbol < "u" && f[Symbol.iterator] != null || f["@@iterator"] != null)
      return Array.from(f);
  }
  function o(f) {
    if (Array.isArray(f))
      return l(f);
  }
  function l(f, p) {
    (p == null || p > f.length) && (p = f.length);
    for (var O = 0, d = new Array(p); O < p; O++)
      d[O] = f[O];
    return d;
  }
  function c(f) {
    for (var p = f.split(`
`), O = [], d = 0; d < p.length; d++) {
      if (p[d].match(/^\s*SELECT/i)) {
        var g = function() {
          var L = [];
          if (p[d].match(/.*,$/))
            L = [p[d]];
          else {
            if (O.push(p[d]), p[d].match(/^\s*SELECT\s+.+(?!,$)/i))
              return "continue";
            L.push(p[++d]);
          }
          for (; p[d++].match(/.*,$/); )
            L.push(p[d]);
          var D = L.map(function(x) {
            return {
              line: x,
              matches: x.match(/(^.*?\S) (AS )?(\S+,?$)/i)
            };
          }).map(function(x) {
            var V = x.line, _ = x.matches;
            return _ ? {
              precedingText: _[1],
              as: _[2],
              alias: _[3]
            } : {
              precedingText: V
            };
          }), W = (0, r.maxLength)(D.map(function(x) {
            var V = x.precedingText;
            return V.replace(/\s*,\s*$/, "");
          }));
          L = D.map(function(x) {
            var V = x.precedingText, _ = x.as, $ = x.alias;
            return V + ($ ? " ".repeat(W - V.length + 1) + (_ ?? "") + $ : "");
          }), O = [].concat(i(O), i(L));
        }();
        if (g === "continue")
          continue;
      }
      O.push(p[d]);
    }
    return O.join(`
`);
  }
  e.exports = t.default;
})(Ul, Ul.exports);
var h_ = Ul.exports, wl = { exports: {} }, Ml = { exports: {} };
(function(e, t) {
  Object.defineProperty(t, "__esModule", {
    value: !0
  }), t.default = void 0;
  var r = Xe, i = it, n = ii;
  function a(O, d) {
    var g = typeof Symbol < "u" && O[Symbol.iterator] || O["@@iterator"];
    if (!g) {
      if (Array.isArray(O) || (g = s(O)) || d && O && typeof O.length == "number") {
        g && (O = g);
        var L = 0, D = function() {
        };
        return { s: D, n: function() {
          return L >= O.length ? { done: !0 } : { done: !1, value: O[L++] };
        }, e: function($) {
          throw $;
        }, f: D };
      }
      throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
    }
    var W = !0, x = !1, V;
    return { s: function() {
      g = g.call(O);
    }, n: function() {
      var $ = g.next();
      return W = $.done, $;
    }, e: function($) {
      x = !0, V = $;
    }, f: function() {
      try {
        !W && g.return != null && g.return();
      } finally {
        if (x)
          throw V;
      }
    } };
  }
  function s(O, d) {
    if (O) {
      if (typeof O == "string")
        return o(O, d);
      var g = Object.prototype.toString.call(O).slice(8, -1);
      if (g === "Object" && O.constructor && (g = O.constructor.name), g === "Map" || g === "Set")
        return Array.from(O);
      if (g === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(g))
        return o(O, d);
    }
  }
  function o(O, d) {
    (d == null || d > O.length) && (d = O.length);
    for (var g = 0, L = new Array(d); g < d; g++)
      L[g] = O[g];
    return L;
  }
  function l(O, d) {
    if (!(O instanceof d))
      throw new TypeError("Cannot call a class as a function");
  }
  function c(O, d) {
    for (var g = 0; g < d.length; g++) {
      var L = d[g];
      L.enumerable = L.enumerable || !1, L.configurable = !0, "value" in L && (L.writable = !0), Object.defineProperty(O, L.key, L);
    }
  }
  function f(O, d, g) {
    return d && c(O.prototype, d), g && c(O, g), Object.defineProperty(O, "prototype", { writable: !1 }), O;
  }
  var p = /* @__PURE__ */ function() {
    function O(d) {
      l(this, O), this.expressionWidth = d;
    }
    return f(O, [{
      key: "isInlineBlock",
      value: function(g) {
        return this.inlineWidth(g) <= this.expressionWidth;
      }
    }, {
      key: "inlineWidth",
      value: function(g) {
        var L = 2, D = a(g.children), W;
        try {
          for (D.s(); !(W = D.n()).done; ) {
            var x = W.value;
            switch (x.type) {
              case n.NodeType.function_call:
                L += x.nameToken.value.length + this.inlineWidth(x.parenthesis);
                break;
              case n.NodeType.array_subscript:
                L += x.arrayToken.value.length + this.inlineWidth(x.parenthesis);
                break;
              case n.NodeType.parenthesis:
                L += this.inlineWidth(x);
                break;
              case n.NodeType.between_predicate:
                L += this.betweenWidth(x);
                break;
              case n.NodeType.clause:
              case n.NodeType.limit_clause:
              case n.NodeType.binary_clause:
                return 1 / 0;
              case n.NodeType.all_columns_asterisk:
                L += 1;
                break;
              case n.NodeType.token:
                if (L += x.token.value.length, this.isForbiddenToken(x.token))
                  return 1 / 0;
                break;
            }
            if (L > this.expressionWidth)
              return L;
          }
        } catch (V) {
          D.e(V);
        } finally {
          D.f();
        }
        return L;
      }
    }, {
      key: "betweenWidth",
      value: function(g) {
        return (0, r.sum)([g.betweenToken, g.expr1, g.andToken, g.expr2].map(function(L) {
          return L.value.length;
        }));
      }
      // Reserved words that cause newlines, comments and semicolons
      // are not allowed inside inline parentheses block
    }, {
      key: "isForbiddenToken",
      value: function(g) {
        return g.type === i.TokenType.RESERVED_LOGICAL_OPERATOR || g.type === i.TokenType.LINE_COMMENT || g.type === i.TokenType.BLOCK_COMMENT || i.isToken.CASE(g);
      }
    }]), O;
  }();
  t.default = p, e.exports = t.default;
})(Ml, Ml.exports);
var p_ = Ml.exports, yc = {};
(function(e) {
  Object.defineProperty(e, "__esModule", {
    value: !0
  }), e.default = e.WS = void 0;
  var t = Xe;
  function r(c, f) {
    if (!(c instanceof f))
      throw new TypeError("Cannot call a class as a function");
  }
  function i(c, f) {
    for (var p = 0; p < f.length; p++) {
      var O = f[p];
      O.enumerable = O.enumerable || !1, O.configurable = !0, "value" in O && (O.writable = !0), Object.defineProperty(c, O.key, O);
    }
  }
  function n(c, f, p) {
    return f && i(c.prototype, f), p && i(c, p), Object.defineProperty(c, "prototype", { writable: !1 }), c;
  }
  function a(c, f, p) {
    return f in c ? Object.defineProperty(c, f, { value: p, enumerable: !0, configurable: !0, writable: !0 }) : c[f] = p, c;
  }
  var s;
  e.WS = s, function(c) {
    c[c.SPACE = 0] = "SPACE", c[c.NO_SPACE = 1] = "NO_SPACE", c[c.NEWLINE = 2] = "NEWLINE", c[c.INDENT = 3] = "INDENT", c[c.SINGLE_INDENT = 4] = "SINGLE_INDENT";
  }(s || (e.WS = s = {}));
  var o = /* @__PURE__ */ function() {
    function c(f) {
      r(this, c), this.indentation = f, a(this, "items", []);
    }
    return n(c, [{
      key: "add",
      value: function() {
        for (var p = arguments.length, O = new Array(p), d = 0; d < p; d++)
          O[d] = arguments[d];
        for (var g = 0, L = O; g < L.length; g++) {
          var D = L[g];
          switch (D) {
            case s.SPACE:
              this.items.push(s.SPACE);
              break;
            case s.NO_SPACE:
              this.trimHorizontalWhitespace();
              break;
            case s.NEWLINE:
              this.trimHorizontalWhitespace(), this.addNewline();
              break;
            case s.INDENT:
              this.addIndentation();
              break;
            case s.SINGLE_INDENT:
              this.items.push(s.SINGLE_INDENT);
              break;
            default:
              this.items.push(D);
          }
        }
      }
    }, {
      key: "trimHorizontalWhitespace",
      value: function() {
        for (; l((0, t.last)(this.items)); )
          this.items.pop();
      }
    }, {
      key: "addNewline",
      value: function() {
        this.items.length > 0 && (0, t.last)(this.items) !== s.NEWLINE && this.items.push(s.NEWLINE);
      }
    }, {
      key: "addIndentation",
      value: function() {
        for (var p = 0; p < this.indentation.getLevel(); p++)
          this.items.push(s.SINGLE_INDENT);
      }
      /**
       * Returns the final SQL string.
       */
    }, {
      key: "toString",
      value: function() {
        var p = this;
        return this.items.map(function(O) {
          return p.itemToString(O);
        }).join("");
      }
    }, {
      key: "itemToString",
      value: function(p) {
        switch (p) {
          case s.SPACE:
            return " ";
          case s.NEWLINE:
            return `
`;
          case s.SINGLE_INDENT:
            return this.indentation.getSingleIndent();
          default:
            return p;
        }
      }
    }]), c;
  }();
  e.default = o;
  var l = function(f) {
    return f === s.SPACE || f === s.SINGLE_INDENT;
  };
})(yc);
var _d = {};
(function(e) {
  Object.defineProperty(e, "__esModule", {
    value: !0
  }), e.default = p, e.isTabularToken = O;
  var t = it;
  function r(d) {
    return n(d) || c(d) || o(d) || i();
  }
  function i() {
    throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
  }
  function n(d) {
    if (Array.isArray(d))
      return l(d);
  }
  function a(d) {
    return f(d) || c(d) || o(d) || s();
  }
  function s() {
    throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
  }
  function o(d, g) {
    if (d) {
      if (typeof d == "string")
        return l(d, g);
      var L = Object.prototype.toString.call(d).slice(8, -1);
      if (L === "Object" && d.constructor && (L = d.constructor.name), L === "Map" || L === "Set")
        return Array.from(d);
      if (L === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(L))
        return l(d, g);
    }
  }
  function l(d, g) {
    (g == null || g > d.length) && (g = d.length);
    for (var L = 0, D = new Array(g); L < g; L++)
      D[L] = d[L];
    return D;
  }
  function c(d) {
    if (typeof Symbol < "u" && d[Symbol.iterator] != null || d["@@iterator"] != null)
      return Array.from(d);
  }
  function f(d) {
    if (Array.isArray(d))
      return d;
  }
  function p(d, g) {
    if (g === "standard")
      return d;
    var L = [];
    if (d.length >= 10 && d.includes(" ")) {
      var D = d.split(" "), W = a(D);
      d = W[0], L = W.slice(1);
    }
    return g === "tabularLeft" ? d = d.padEnd(9, " ") : d = d.padStart(9, " "), d + [""].concat(r(L)).join(" ");
  }
  function O(d) {
    return d.type === t.TokenType.RESERVED_LOGICAL_OPERATOR || d.type === t.TokenType.RESERVED_DEPENDENT_CLAUSE || d.type === t.TokenType.RESERVED_COMMAND || d.type === t.TokenType.RESERVED_BINARY_COMMAND || d.type === t.TokenType.RESERVED_JOIN;
  }
})(_d);
(function(e, t) {
  function r(x) {
    "@babel/helpers - typeof";
    return r = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(V) {
      return typeof V;
    } : function(V) {
      return V && typeof Symbol == "function" && V.constructor === Symbol && V !== Symbol.prototype ? "symbol" : typeof V;
    }, r(x);
  }
  Object.defineProperty(t, "__esModule", {
    value: !0
  }), t.default = void 0;
  var i = Xe, n = Na, a = it, s = ii, o = O(p_), l = yc, c = p(_d);
  function f(x) {
    if (typeof WeakMap != "function")
      return null;
    var V = /* @__PURE__ */ new WeakMap(), _ = /* @__PURE__ */ new WeakMap();
    return (f = function(z) {
      return z ? _ : V;
    })(x);
  }
  function p(x, V) {
    if (!V && x && x.__esModule)
      return x;
    if (x === null || r(x) !== "object" && typeof x != "function")
      return { default: x };
    var _ = f(V);
    if (_ && _.has(x))
      return _.get(x);
    var $ = {}, z = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var F in x)
      if (F !== "default" && Object.prototype.hasOwnProperty.call(x, F)) {
        var ae = z ? Object.getOwnPropertyDescriptor(x, F) : null;
        ae && (ae.get || ae.set) ? Object.defineProperty($, F, ae) : $[F] = x[F];
      }
    return $.default = x, _ && _.set(x, $), $;
  }
  function O(x) {
    return x && x.__esModule ? x : { default: x };
  }
  function d(x, V) {
    if (!(x instanceof V))
      throw new TypeError("Cannot call a class as a function");
  }
  function g(x, V) {
    for (var _ = 0; _ < V.length; _++) {
      var $ = V[_];
      $.enumerable = $.enumerable || !1, $.configurable = !0, "value" in $ && ($.writable = !0), Object.defineProperty(x, $.key, $);
    }
  }
  function L(x, V, _) {
    return V && g(x.prototype, V), _ && g(x, _), Object.defineProperty(x, "prototype", { writable: !1 }), x;
  }
  function D(x, V, _) {
    return V in x ? Object.defineProperty(x, V, { value: _, enumerable: !0, configurable: !0, writable: !0 }) : x[V] = _, x;
  }
  var W = /* @__PURE__ */ function() {
    function x(V) {
      var _ = V.cfg, $ = V.params, z = V.layout, F = V.inline, ae = F === void 0 ? !1 : F;
      d(this, x), D(this, "cfg", void 0), D(this, "inlineBlock", void 0), D(this, "params", void 0), D(this, "layout", void 0), D(this, "inline", !1), D(this, "nodes", []), D(this, "index", -1), this.cfg = _, this.inline = ae, this.inlineBlock = new o.default(this.cfg.expressionWidth), this.params = $, this.layout = z;
    }
    return L(x, [{
      key: "format",
      value: function(_) {
        for (this.nodes = _, this.index = 0; this.index < this.nodes.length; this.index++) {
          var $ = this.nodes[this.index];
          switch ($.type) {
            case s.NodeType.function_call:
              this.formatFunctionCall($);
              break;
            case s.NodeType.array_subscript:
              this.formatArraySubscript($);
              break;
            case s.NodeType.parenthesis:
              this.formatParenthesis($);
              break;
            case s.NodeType.between_predicate:
              this.formatBetweenPredicate($);
              break;
            case s.NodeType.clause:
              this.formatClause($);
              break;
            case s.NodeType.binary_clause:
              this.formatBinaryClause($);
              break;
            case s.NodeType.limit_clause:
              this.formatLimitClause($);
              break;
            case s.NodeType.all_columns_asterisk:
              this.formatAllColumnsAsterisk($);
              break;
            case s.NodeType.token:
              this.formatToken($.token);
              break;
          }
        }
        return this.layout;
      }
    }, {
      key: "formatFunctionCall",
      value: function(_) {
        this.layout.add(this.show(_.nameToken)), this.formatParenthesis(_.parenthesis);
      }
    }, {
      key: "formatArraySubscript",
      value: function(_) {
        this.layout.add(this.show(_.arrayToken)), this.formatParenthesis(_.parenthesis);
      }
    }, {
      key: "formatParenthesis",
      value: function(_) {
        var $ = this.inlineBlock.isInlineBlock(_);
        $ ? (this.layout.add(_.openParen), this.layout = this.formatSubExpression(_.children, $), this.layout.add(l.WS.NO_SPACE, _.closeParen, l.WS.SPACE)) : (this.layout.add(_.openParen, l.WS.NEWLINE), (0, n.isTabularStyle)(this.cfg) ? (this.layout.add(l.WS.INDENT), this.layout = this.formatSubExpression(_.children, $)) : (this.layout.indentation.increaseBlockLevel(), this.layout.add(l.WS.INDENT), this.layout = this.formatSubExpression(_.children, $), this.layout.indentation.decreaseBlockLevel()), this.layout.add(l.WS.NEWLINE, l.WS.INDENT, _.closeParen, l.WS.SPACE));
      }
    }, {
      key: "formatBetweenPredicate",
      value: function(_) {
        this.layout.add(this.show(_.betweenToken), l.WS.SPACE, this.show(_.expr1), l.WS.SPACE, this.show(_.andToken), l.WS.SPACE, this.show(_.expr2), l.WS.SPACE);
      }
    }, {
      key: "formatClause",
      value: function(_) {
        (0, n.isTabularStyle)(this.cfg) ? this.layout.add(l.WS.NEWLINE, l.WS.INDENT, this.show(_.nameToken), l.WS.SPACE) : this.layout.add(l.WS.NEWLINE, l.WS.INDENT, this.show(_.nameToken), l.WS.NEWLINE), this.layout.indentation.increaseTopLevel(), (0, n.isTabularStyle)(this.cfg) || this.layout.add(l.WS.INDENT), this.layout = this.formatSubExpression(_.children), this.layout.indentation.decreaseTopLevel();
      }
    }, {
      key: "formatBinaryClause",
      value: function(_) {
        this.layout.indentation.decreaseTopLevel(), this.layout.add(l.WS.NEWLINE, l.WS.INDENT, this.show(_.nameToken), l.WS.NEWLINE), this.layout.add(l.WS.INDENT), this.layout = this.formatSubExpression(_.children);
      }
    }, {
      key: "formatLimitClause",
      value: function(_) {
        this.layout.add(l.WS.NEWLINE, l.WS.INDENT, this.show(_.limitToken)), this.layout.indentation.increaseTopLevel(), _.offset ? (this.layout.add(l.WS.NEWLINE, l.WS.INDENT), this.layout = this.formatSubExpression(_.offset), this.layout.add(l.WS.NO_SPACE, ",", l.WS.SPACE), this.layout = this.formatSubExpression(_.count)) : (this.layout.add(l.WS.NEWLINE, l.WS.INDENT), this.layout = this.formatSubExpression(_.count)), this.layout.indentation.decreaseTopLevel();
      }
    }, {
      key: "formatAllColumnsAsterisk",
      value: function(_) {
        this.layout.add("*", l.WS.SPACE);
      }
    }, {
      key: "formatSubExpression",
      value: function(_) {
        var $ = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.inline;
        return new x({
          cfg: this.cfg,
          params: this.params,
          layout: this.layout,
          inline: $
        }).format(_);
      }
    }, {
      key: "formatToken",
      value: function(_) {
        switch (_.type) {
          case a.TokenType.LINE_COMMENT:
            return this.formatLineComment(_);
          case a.TokenType.BLOCK_COMMENT:
            return this.formatBlockComment(_);
          case a.TokenType.RESERVED_JOIN:
            return this.formatJoin(_);
          case a.TokenType.RESERVED_DEPENDENT_CLAUSE:
            return this.formatDependentClause(_);
          case a.TokenType.RESERVED_JOIN_CONDITION:
            return this.formatJoinCondition(_);
          case a.TokenType.RESERVED_LOGICAL_OPERATOR:
            return this.formatLogicalOperator(_);
          case a.TokenType.RESERVED_KEYWORD:
            return this.formatKeyword(_);
          case a.TokenType.RESERVED_CASE_START:
            return this.formatCaseStart(_);
          case a.TokenType.RESERVED_CASE_END:
            return this.formatCaseEnd(_);
          case a.TokenType.NAMED_PARAMETER:
          case a.TokenType.QUOTED_PARAMETER:
          case a.TokenType.INDEXED_PARAMETER:
          case a.TokenType.POSITIONAL_PARAMETER:
            return this.formatParameter(_);
          case a.TokenType.COMMA:
            return this.formatComma(_);
          case a.TokenType.OPERATOR:
            return this.formatOperator(_);
          case a.TokenType.IDENTIFIER:
          case a.TokenType.QUOTED_IDENTIFIER:
          case a.TokenType.STRING:
          case a.TokenType.NUMBER:
          case a.TokenType.VARIABLE:
            return this.formatWord(_);
          default:
            throw new Error("Unexpected token type: ".concat(_.type));
        }
      }
      /**
       * Formats ident/string/number/variable tokens
       */
    }, {
      key: "formatWord",
      value: function(_) {
        this.layout.add(this.show(_), l.WS.SPACE);
      }
      /** Formats a line comment onto query */
    }, {
      key: "formatLineComment",
      value: function(_) {
        this.layout.add(this.show(_), l.WS.NEWLINE, l.WS.INDENT);
      }
      /** Formats a block comment onto query */
    }, {
      key: "formatBlockComment",
      value: function(_) {
        var $ = this;
        this.splitBlockComment(_.value).forEach(function(z) {
          $.layout.add(l.WS.NEWLINE, l.WS.INDENT, z);
        }), this.layout.add(l.WS.NEWLINE, l.WS.INDENT);
      }
      // Breaks up block comment to multiple lines.
      // For example this comment (dots representing leading whitespace):
      //
      //   ..../**
      //   .....* Some description here
      //   .....* and here too
      //   .....*/
      //
      // gets broken to this array (note the leading single spaces):
      //
      //   [ '/**',
      //     '.* Some description here',
      //     '.* and here too',
      //     '.*/' ]
      //
    }, {
      key: "splitBlockComment",
      value: function(_) {
        return _.split(/\n/).map(function($) {
          return /^\s*\*/.test($) ? " " + $.replace(/^\s*/, "") : $.replace(/^\s*/, "");
        });
      }
    }, {
      key: "formatJoin",
      value: function(_) {
        (0, n.isTabularStyle)(this.cfg) ? (this.layout.indentation.decreaseTopLevel(), this.layout.add(l.WS.NEWLINE, l.WS.INDENT, this.show(_), l.WS.SPACE), this.layout.indentation.increaseTopLevel()) : this.layout.add(l.WS.NEWLINE, l.WS.INDENT, this.show(_), l.WS.SPACE);
      }
      /**
       * Formats a Reserved Keyword onto query
       */
    }, {
      key: "formatKeyword",
      value: function(_) {
        this.layout.add(this.show(_), l.WS.SPACE);
      }
      /**
       * Formats a Reserved Dependent Clause token onto query, supporting the keyword that precedes it
       */
    }, {
      key: "formatDependentClause",
      value: function(_) {
        this.layout.add(l.WS.NEWLINE, l.WS.INDENT, this.show(_), l.WS.SPACE);
      }
      // Formats ON and USING keywords
    }, {
      key: "formatJoinCondition",
      value: function(_) {
        this.layout.add(this.show(_), l.WS.SPACE);
      }
      /**
       * Formats an Operator onto query, following rules for specific characters
       */
    }, {
      key: "formatOperator",
      value: function(_) {
        if (_.value === ":") {
          this.layout.add(l.WS.NO_SPACE, this.show(_), l.WS.SPACE);
          return;
        } else if (_.value === "." || _.value === "::") {
          this.layout.add(l.WS.NO_SPACE, this.show(_));
          return;
        }
        this.cfg.denseOperators ? this.layout.add(l.WS.NO_SPACE, this.show(_)) : this.layout.add(this.show(_), l.WS.SPACE);
      }
      /**
       * Formats a Logical Operator onto query, joining boolean conditions
       */
    }, {
      key: "formatLogicalOperator",
      value: function(_) {
        this.cfg.logicalOperatorNewline === "before" ? (0, n.isTabularStyle)(this.cfg) ? (this.layout.indentation.decreaseTopLevel(), this.layout.add(l.WS.NEWLINE, l.WS.INDENT, this.show(_), l.WS.SPACE), this.layout.indentation.increaseTopLevel()) : this.layout.add(l.WS.NEWLINE, l.WS.INDENT, this.show(_), l.WS.SPACE) : this.layout.add(this.show(_), l.WS.NEWLINE, l.WS.INDENT);
      }
    }, {
      key: "formatCaseStart",
      value: function(_) {
        this.layout.indentation.increaseBlockLevel(), this.layout.add(this.show(_), l.WS.NEWLINE, l.WS.INDENT);
      }
    }, {
      key: "formatCaseEnd",
      value: function(_) {
        this.formatMultilineBlockEnd(_);
      }
    }, {
      key: "formatMultilineBlockEnd",
      value: function(_) {
        this.layout.indentation.decreaseBlockLevel(), this.layout.add(l.WS.NEWLINE, l.WS.INDENT, this.show(_), l.WS.SPACE);
      }
      /**
       * Formats a parameter placeholder item onto query, to be replaced with the value of the placeholder
       */
    }, {
      key: "formatParameter",
      value: function(_) {
        this.layout.add(this.params.get(_), l.WS.SPACE);
      }
      /**
       * Formats a comma Operator onto query, ending line unless in an Inline Block
       */
    }, {
      key: "formatComma",
      value: function(_) {
        this.inline ? this.layout.add(l.WS.NO_SPACE, this.show(_), l.WS.SPACE) : this.layout.add(l.WS.NO_SPACE, this.show(_), l.WS.NEWLINE, l.WS.INDENT);
      }
    }, {
      key: "show",
      value: function(_) {
        return (0, c.isTabularToken)(_) ? (0, c.default)(this.showToken(_), this.cfg.indentStyle) : this.showToken(_);
      }
      // don't call this directly, always use show() instead.
    }, {
      key: "showToken",
      value: function(_) {
        if ((0, a.isReserved)(_))
          switch (this.cfg.keywordCase) {
            case "preserve":
              return (0, i.equalizeWhitespace)(_.text);
            case "upper":
              return _.value;
            case "lower":
              return _.value.toLowerCase();
          }
        else
          return _.value;
      }
    }]), x;
  }();
  t.default = W, e.exports = t.default;
})(wl, wl.exports);
var O_ = wl.exports, kl = { exports: {} }, Ql = { exports: {} };
(function(e, t) {
  Object.defineProperty(t, "__esModule", {
    value: !0
  }), t.default = void 0;
  var r = it;
  function i(l, c) {
    if (!(l instanceof c))
      throw new TypeError("Cannot call a class as a function");
  }
  function n(l, c) {
    for (var f = 0; f < c.length; f++) {
      var p = c[f];
      p.enumerable = p.enumerable || !1, p.configurable = !0, "value" in p && (p.writable = !0), Object.defineProperty(l, p.key, p);
    }
  }
  function a(l, c, f) {
    return c && n(l.prototype, c), f && n(l, f), Object.defineProperty(l, "prototype", { writable: !1 }), l;
  }
  function s(l, c, f) {
    return c in l ? Object.defineProperty(l, c, { value: f, enumerable: !0, configurable: !0, writable: !0 }) : l[c] = f, l;
  }
  var o = /* @__PURE__ */ function() {
    function l(c) {
      var f = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
      i(this, l), this.keywordCase = c, s(this, "detectedCase", void 0), this.detectedCase = this.autoDetectCase(f);
    }
    return a(l, [{
      key: "autoDetectCase",
      value: function(f) {
        var p = f.filter(r.isToken.AS), O = p.filter(function(d) {
          var g = d.text;
          return g === "AS";
        });
        return O.length > p.length / 2 ? "upper" : "lower";
      }
      /** Returns AS token with either upper- or lowercase text */
    }, {
      key: "token",
      value: function() {
        return {
          type: r.TokenType.RESERVED_KEYWORD,
          value: this.asTokenValue(),
          text: this.asTokenValue()
        };
      }
    }, {
      key: "asTokenValue",
      value: function() {
        var f = this.keywordCase === "preserve" ? this.detectedCase : this.keywordCase;
        return f === "upper" ? "AS" : "as";
      }
    }]), l;
  }();
  t.default = o, e.exports = t.default;
})(Ql, Ql.exports);
var E_ = Ql.exports;
(function(e, t) {
  Object.defineProperty(t, "__esModule", {
    value: !0
  }), t.default = void 0;
  var r = it, i = n(E_);
  function n(f) {
    return f && f.__esModule ? f : { default: f };
  }
  function a(f, p) {
    if (!(f instanceof p))
      throw new TypeError("Cannot call a class as a function");
  }
  function s(f, p) {
    for (var O = 0; O < p.length; O++) {
      var d = p[O];
      d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), Object.defineProperty(f, d.key, d);
    }
  }
  function o(f, p, O) {
    return p && s(f.prototype, p), O && s(f, O), Object.defineProperty(f, "prototype", { writable: !1 }), f;
  }
  function l(f, p, O) {
    return p in f ? Object.defineProperty(f, p, { value: O, enumerable: !0, configurable: !0, writable: !0 }) : f[p] = O, f;
  }
  var c = /* @__PURE__ */ function() {
    function f(p, O) {
      a(this, f), l(this, "index", 0), l(this, "tokens", []), l(this, "previousReservedToken", r.EOF_TOKEN), l(this, "previousCommandToken", r.EOF_TOKEN), l(this, "asTokenFactory", void 0), l(this, "aliasAs", void 0), this.aliasAs = p.aliasAs, this.asTokenFactory = new i.default(p.keywordCase, O), this.tokens = O;
    }
    return o(f, [{
      key: "process",
      value: function() {
        var O = [];
        for (this.index = 0; this.index < this.tokens.length; this.index++) {
          var d = this.tokens[this.index];
          (0, r.isReserved)(d) && (this.previousReservedToken = d, d.type === r.TokenType.RESERVED_COMMAND && (this.previousCommandToken = d)), r.isToken.AS(d) ? this.shouldRemove() || O.push(d) : d.type === r.TokenType.IDENTIFIER || d.type === r.TokenType.NUMBER || d.type === r.TokenType.STRING || d.type === r.TokenType.VARIABLE ? (this.shouldAddBefore(d) && O.push(this.asTokenFactory.token()), O.push(d), this.shouldAddAfter() && O.push(this.asTokenFactory.token())) : O.push(d);
        }
        return O;
      }
      /** True when AS keyword should be added *before* current token */
    }, {
      key: "shouldAddBefore",
      value: function(O) {
        return this.isMissingTableAlias(O) || this.isMissingSelectColumnAlias(O);
      }
      // if table alias is missing and should be added
    }, {
      key: "isMissingTableAlias",
      value: function(O) {
        return this.aliasAs === "always" && O.type === r.TokenType.IDENTIFIER && this.lookBehind().value === ")";
      }
      // if select column alias is missing and should be added
    }, {
      key: "isMissingSelectColumnAlias",
      value: function(O) {
        var d = this.lookBehind(), g = this.lookAhead();
        return (this.aliasAs === "always" || this.aliasAs === "select") && this.isWithinSelect() && O.type === r.TokenType.IDENTIFIER && (r.isToken.END(d) || (d.type === r.TokenType.IDENTIFIER || d.type === r.TokenType.NUMBER) && (g.type === r.TokenType.COMMA || (0, r.isCommand)(g)));
      }
      /** True when AS keyword should be added *after* current token */
    }, {
      key: "shouldAddAfter",
      value: function() {
        return this.isEdgeCaseCTE() || this.isEdgeCaseCreateTable() || this.isMissingTypeCastAs();
      }
      // checks for CAST(«expression» [AS] type)
    }, {
      key: "isMissingTypeCastAs",
      value: function() {
        return this.aliasAs === "never" && this.isWithinSelect() && r.isToken.CAST(this.getPreviousReservedToken()) && r.isToken.AS(this.lookAhead()) && (this.lookAhead(2).type === r.TokenType.IDENTIFIER || this.lookAhead(2).type === r.TokenType.RESERVED_KEYWORD) && this.lookAhead(3).value === ")";
      }
      // checks for WITH `table` [AS] (
    }, {
      key: "isEdgeCaseCTE",
      value: function() {
        var O = this.lookAhead();
        return this.aliasAs === "never" && r.isToken.WITH(this.lookBehind()) && (O.value === "(" || r.isToken.AS(O) && this.lookAhead(2).value === "(");
      }
      // checks for CREATE TABLE `table` [AS] WITH (
    }, {
      key: "isEdgeCaseCreateTable",
      value: function() {
        var O = this.lookBehind(), d = this.lookAhead();
        return this.aliasAs === "never" && (r.isToken.TABLE(O) || O.value.endsWith("TABLE")) && (r.isToken.WITH(d) || r.isToken.AS(d) && r.isToken.WITH(this.lookAhead(2)));
      }
      /* True when the current AS token should be discarded */
    }, {
      key: "shouldRemove",
      value: function() {
        return this.aliasAs === "never" || this.aliasAs === "select" && this.isRemovableNonSelectAs();
      }
    }, {
      key: "isRemovableNonSelectAs",
      value: function() {
        return this.lookBehind().value === ")" && // ) [AS] alias but not SELECT (a) [AS] alpha
        !this.isWithinSelect() && this.lookAhead().value !== "(";
      }
    }, {
      key: "getPreviousReservedToken",
      value: function() {
        return this.previousReservedToken;
      }
    }, {
      key: "isWithinSelect",
      value: function() {
        return r.isToken.SELECT(this.previousCommandToken);
      }
    }, {
      key: "lookBehind",
      value: function() {
        var O = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1;
        return this.lookAhead(-O);
      }
    }, {
      key: "lookAhead",
      value: function() {
        var O = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1;
        return this.tokens[this.index + O] || r.EOF_TOKEN;
      }
    }]), f;
  }();
  t.default = c, e.exports = t.default;
})(kl, kl.exports);
var d_ = kl.exports, Gl = { exports: {} };
(function(e, t) {
  Object.defineProperty(t, "__esModule", {
    value: !0
  }), t.default = void 0;
  var r = Xe;
  function i(f, p) {
    if (!(f instanceof p))
      throw new TypeError("Cannot call a class as a function");
  }
  function n(f, p) {
    for (var O = 0; O < p.length; O++) {
      var d = p[O];
      d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), Object.defineProperty(f, d.key, d);
    }
  }
  function a(f, p, O) {
    return p && n(f.prototype, p), O && n(f, O), Object.defineProperty(f, "prototype", { writable: !1 }), f;
  }
  function s(f, p, O) {
    return p in f ? Object.defineProperty(f, p, { value: O, enumerable: !0, configurable: !0, writable: !0 }) : f[p] = O, f;
  }
  var o = "top-level", l = "block-level", c = /* @__PURE__ */ function() {
    function f(p) {
      i(this, f), this.indent = p, s(this, "indentTypes", []);
    }
    return a(f, [{
      key: "getSingleIndent",
      value: function() {
        return this.indent;
      }
      /**
       * Returns current indentation string.
       * @return {string} indentation string based on indentTypes
       */
    }, {
      key: "getIndent",
      value: function() {
        return this.indent.repeat(this.indentTypes.length);
      }
      /**
       * Returns current indentation level
       */
    }, {
      key: "getLevel",
      value: function() {
        return this.indentTypes.length;
      }
      /**
       * Increases indentation by one top-level indent.
       */
    }, {
      key: "increaseTopLevel",
      value: function() {
        this.indentTypes.push(o);
      }
      /**
       * Increases indentation by one block-level indent.
       */
    }, {
      key: "increaseBlockLevel",
      value: function() {
        this.indentTypes.push(l);
      }
      /**
       * Decreases indentation by one top-level indent.
       * Does nothing when the previous indent is not top-level.
       */
    }, {
      key: "decreaseTopLevel",
      value: function() {
        this.indentTypes.length > 0 && (0, r.last)(this.indentTypes) === o && this.indentTypes.pop();
      }
      /**
       * Decreases indentation by one block-level indent.
       * If there are top-level indents within the block-level indent,
       * throws away these as well.
       */
    }, {
      key: "decreaseBlockLevel",
      value: function() {
        for (; this.indentTypes.length > 0; ) {
          var O = this.indentTypes.pop();
          if (O !== o)
            break;
        }
      }
      /** Clears all indentation */
    }, {
      key: "resetIndentation",
      value: function() {
        this.indentTypes = [];
      }
    }]), f;
  }();
  t.default = c, e.exports = t.default;
})(Gl, Gl.exports);
var T_ = Gl.exports;
(function(e, t) {
  function r(_) {
    "@babel/helpers - typeof";
    return r = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function($) {
      return typeof $;
    } : function($) {
      return $ && typeof Symbol == "function" && $.constructor === Symbol && $ !== Symbol.prototype ? "symbol" : typeof $;
    }, r(_);
  }
  Object.defineProperty(t, "__esModule", {
    value: !0
  }), t.default = void 0;
  var i = Na, n = g(jP), a = g(KP), s = g(f_), o = g(h_), l = g(O_), c = g(d_), f = d(yc), p = g(T_);
  function O(_) {
    if (typeof WeakMap != "function")
      return null;
    var $ = /* @__PURE__ */ new WeakMap(), z = /* @__PURE__ */ new WeakMap();
    return (O = function(ae) {
      return ae ? z : $;
    })(_);
  }
  function d(_, $) {
    if (!$ && _ && _.__esModule)
      return _;
    if (_ === null || r(_) !== "object" && typeof _ != "function")
      return { default: _ };
    var z = O($);
    if (z && z.has(_))
      return z.get(_);
    var F = {}, ae = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var U in _)
      if (U !== "default" && Object.prototype.hasOwnProperty.call(_, U)) {
        var G = ae ? Object.getOwnPropertyDescriptor(_, U) : null;
        G && (G.get || G.set) ? Object.defineProperty(F, U, G) : F[U] = _[U];
      }
    return F.default = _, z && z.set(_, F), F;
  }
  function g(_) {
    return _ && _.__esModule ? _ : { default: _ };
  }
  function L(_, $) {
    if (!(_ instanceof $))
      throw new TypeError("Cannot call a class as a function");
  }
  function D(_, $) {
    for (var z = 0; z < $.length; z++) {
      var F = $[z];
      F.enumerable = F.enumerable || !1, F.configurable = !0, "value" in F && (F.writable = !0), Object.defineProperty(_, F.key, F);
    }
  }
  function W(_, $, z) {
    return $ && D(_.prototype, $), z && D(_, z), Object.defineProperty(_, "prototype", { writable: !1 }), _;
  }
  function x(_, $, z) {
    return $ in _ ? Object.defineProperty(_, $, { value: z, enumerable: !0, configurable: !0, writable: !0 }) : _[$] = z, _;
  }
  var V = /* @__PURE__ */ function() {
    function _($) {
      L(this, _), x(this, "cfg", void 0), x(this, "params", void 0), this.cfg = $, this.params = new n.default(this.cfg.params);
    }
    return W(_, [{
      key: "tokenizer",
      value: function() {
        throw new Error("tokenizer() not implemented by subclass");
      }
      // Cache the tokenizer for each class (each SQL dialect)
      // So we wouldn't need to recreate the tokenizer, which is kinda expensive,
      // for each call to format() function.
    }, {
      key: "cachedTokenizer",
      value: function() {
        var z = this.constructor;
        return z.cachedTokenizer || (z.cachedTokenizer = this.tokenizer()), z.cachedTokenizer;
      }
      /**
       * Formats an SQL query.
       * @param {string} query - The SQL query string to be formatted
       * @return {string} The formatter query
       */
    }, {
      key: "format",
      value: function(z) {
        var F = this.cachedTokenizer().tokenize(z), ae = new c.default(this.cfg, F).process(), U = new a.default(ae).parse(), G = this.formatAst(U), H = this.postFormat(G);
        return H.trimEnd();
      }
    }, {
      key: "formatAst",
      value: function(z) {
        var F = this;
        return z.map(function(ae) {
          return F.formatStatement(ae);
        }).join(`
`.repeat(this.cfg.linesBetweenQueries + 1));
      }
    }, {
      key: "formatStatement",
      value: function(z) {
        var F = new l.default({
          cfg: this.cfg,
          params: this.params,
          layout: new f.default(new p.default((0, i.indentString)(this.cfg)))
        }).format(z.children);
        return z.hasSemicolon && (this.cfg.newlineBeforeSemicolon ? F.add(f.WS.NEWLINE, ";") : F.add(f.WS.NO_SPACE, ";")), F.toString();
      }
    }, {
      key: "postFormat",
      value: function(z) {
        return this.cfg.tabulateAlias && (z = (0, o.default)(z)), (this.cfg.commaPosition === "before" || this.cfg.commaPosition === "tabular") && (z = (0, s.default)(z, this.cfg.commaPosition, (0, i.indentString)(this.cfg))), z;
      }
    }]), _;
  }();
  t.default = V, e.exports = t.default;
})(bl, bl.exports);
var ur = bl.exports, Vl = { exports: {} }, ft = {}, Pt = {};
Object.defineProperty(Pt, "__esModule", {
  value: !0
});
Pt.withDashes = Pt.toCaseInsensitivePattern = Pt.prefixesPattern = Pt.patternToRegex = Pt.escapeRegExp = Pt.escapeParen = Pt.WHITESPACE_REGEX = Pt.NULL_REGEX = void 0;
var bd = function(t) {
  return t.replace(/[\$\(-\+\.\?\[-\^\{-\}]/g, "\\$&");
};
Pt.escapeRegExp = bd;
var S_ = /^(?!)/;
Pt.NULL_REGEX = S_;
var m_ = new RegExp("([\\t-\\r \\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF]+)", "y");
Pt.WHITESPACE_REGEX = m_;
var R_ = function(t) {
  return new RegExp("(?:".concat(t, ")"), "uy");
};
Pt.patternToRegex = R_;
var vd = function(t) {
  return t.split("").map(function(r) {
    return / /g.test(r) ? "\\s+" : "[".concat(r.toUpperCase()).concat(r.toLowerCase(), "]");
  }).join("");
};
Pt.toCaseInsensitivePattern = vd;
var A_ = function(t) {
  return t.length === 1 ? bd(t) : "\\b" + t + "\\b";
};
Pt.escapeParen = A_;
var g_ = function(t) {
  return t + "(?:-" + t + ")*";
};
Pt.withDashes = g_;
var y_ = function(t) {
  var r = t.prefixes, i = t.requirePrefix;
  return "(?:".concat(r.map(vd).join("|")).concat(i ? "" : "|", ")");
};
Pt.prefixesPattern = y_;
Object.defineProperty(ft, "__esModule", {
  value: !0
});
ft.variable = ft.stringPattern = ft.string = ft.reservedWord = ft.quotePatterns = ft.parenthesis = ft.parameter = ft.operator = ft.lineComment = ft.identifierPattern = ft.identifier = void 0;
var Cd = Xe, Vt = Pt, I_ = function(t) {
  return new RegExp("(?:".concat(t.map(Vt.escapeRegExp).join("|"), `).*?(?=\r
|\r|
|$)`), "uy");
};
ft.lineComment = I_;
var N_ = function(t) {
  return (0, Vt.patternToRegex)(t.map(Vt.escapeParen).join("|"));
};
ft.parenthesis = N_;
var P_ = function(t, r) {
  return (0, Vt.patternToRegex)("".concat((0, Cd.sortByLengthDesc)(r).map(Vt.escapeRegExp).join("|"), "|") + "[".concat(t.split("").map(Vt.escapeRegExp).join(""), "]"));
};
ft.operator = P_;
var __ = function(t) {
  var r = t.rest, i = t.dashes;
  return r || i ? "(?![".concat(r || "").concat(i ? "-" : "", "])") : "";
}, b_ = function(t) {
  var r = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  if (t.length === 0)
    return /^\b$/;
  var i = __(r), n = (0, Cd.sortByLengthDesc)(t).map(Vt.toCaseInsensitivePattern).join("|").replace(/ /g, "\\s+");
  return new RegExp("(?:".concat(n, ")").concat(i, "\\b"), "iuy");
};
ft.reservedWord = b_;
var v_ = function(t, r) {
  if (t.length) {
    var i = t.map(Vt.escapeRegExp).join("|");
    return (0, Vt.patternToRegex)("(?:".concat(i, ")(?:").concat(r, ")"));
  }
};
ft.parameter = v_;
var Bl = {
  "``": "(?:`[^`]*(?:$|`))+",
  "[]": "(?:\\[[^\\]]*(?:$|\\]))(?:\\][^\\]]*(?:$|\\]))*",
  '""': '(?:"[^"\\\\]*(?:\\\\.[^"\\\\]*)*(?:"|$))+',
  "''": "(?:'[^'\\\\]*(?:\\\\.[^'\\\\]*)*(?:'|$))+",
  $$: "(?<tag>\\$\\w*\\$)[\\s\\S]*?(?:\\k<tag>|$)",
  "'''..'''": "'''[^\\\\]*?(?:\\\\.[^\\\\]*?)*?(?:'''|$)",
  '""".."""': '"""[^\\\\]*?(?:\\\\.[^\\\\]*?)*?(?:"""|$)',
  "{}": "(?:\\{[^\\}]*(?:$|\\}))"
};
ft.quotePatterns = Bl;
var Ld = function(t) {
  return typeof t == "string" ? Bl[t] : (0, Vt.prefixesPattern)(t) + Bl[t.quote];
}, C_ = function(t) {
  return (0, Vt.patternToRegex)(t.map(function(r) {
    return "regex" in r ? r.regex : Ld(r);
  }).join("|"));
};
ft.variable = C_;
var xd = function(t) {
  return t.map(Ld).join("|");
};
ft.stringPattern = xd;
var L_ = function(t) {
  return (0, Vt.patternToRegex)(xd(t));
};
ft.string = L_;
var x_ = function() {
  var t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  return (0, Vt.patternToRegex)(Dd(t));
};
ft.identifier = x_;
var Dd = function() {
  var t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, r = t.first, i = t.rest, n = t.dashes, a = "\\p{Alphabetic}\\p{Mark}_", s = "\\p{Decimal_Number}", o = (0, Vt.escapeRegExp)(r ?? ""), l = (0, Vt.escapeRegExp)(i ?? ""), c = "[".concat(a).concat(o, "][").concat(a).concat(s).concat(l, "]*");
  return n ? (0, Vt.withDashes)(c) : c;
};
ft.identifierPattern = Dd;
var $l = { exports: {} };
(function(e, t) {
  Object.defineProperty(t, "__esModule", {
    value: !0
  }), t.default = void 0;
  var r = it, i = Pt;
  function n(p, O) {
    var d = Object.keys(p);
    if (Object.getOwnPropertySymbols) {
      var g = Object.getOwnPropertySymbols(p);
      O && (g = g.filter(function(L) {
        return Object.getOwnPropertyDescriptor(p, L).enumerable;
      })), d.push.apply(d, g);
    }
    return d;
  }
  function a(p) {
    for (var O = 1; O < arguments.length; O++) {
      var d = arguments[O] != null ? arguments[O] : {};
      O % 2 ? n(Object(d), !0).forEach(function(g) {
        c(p, g, d[g]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(p, Object.getOwnPropertyDescriptors(d)) : n(Object(d)).forEach(function(g) {
        Object.defineProperty(p, g, Object.getOwnPropertyDescriptor(d, g));
      });
    }
    return p;
  }
  function s(p, O) {
    if (!(p instanceof O))
      throw new TypeError("Cannot call a class as a function");
  }
  function o(p, O) {
    for (var d = 0; d < O.length; d++) {
      var g = O[d];
      g.enumerable = g.enumerable || !1, g.configurable = !0, "value" in g && (g.writable = !0), Object.defineProperty(p, g.key, g);
    }
  }
  function l(p, O, d) {
    return O && o(p.prototype, O), d && o(p, d), Object.defineProperty(p, "prototype", { writable: !1 }), p;
  }
  function c(p, O, d) {
    return O in p ? Object.defineProperty(p, O, { value: d, enumerable: !0, configurable: !0, writable: !0 }) : p[O] = d, p;
  }
  var f = /* @__PURE__ */ function() {
    function p(O) {
      s(this, p), c(this, "rules", void 0), c(this, "input", ""), c(this, "index", 0), this.rules = O;
    }
    return l(p, [{
      key: "tokenize",
      value: function(d) {
        this.input = d, this.index = 0;
        for (var g = [], L; this.index < this.input.length; ) {
          var D = this.getWhitespace();
          if (this.index < this.input.length) {
            if (L = this.getNextToken(L), !L)
              throw new Error('Parse error: Unexpected "'.concat(d.slice(this.index, 100), '"'));
            g.push(a(a({}, L), {}, {
              whitespaceBefore: D
            }));
          }
        }
        return g;
      }
    }, {
      key: "getWhitespace",
      value: function() {
        i.WHITESPACE_REGEX.lastIndex = this.index;
        var d = i.WHITESPACE_REGEX.exec(this.input);
        return d ? (this.index += d[0].length, d[0]) : "";
      }
    }, {
      key: "getNextToken",
      value: function(d) {
        return this.matchToken(r.TokenType.BLOCK_COMMENT) || this.matchToken(r.TokenType.LINE_COMMENT) || this.matchToken(r.TokenType.COMMA) || this.matchToken(r.TokenType.OPEN_PAREN) || this.matchToken(r.TokenType.CLOSE_PAREN) || this.matchToken(r.TokenType.QUOTED_IDENTIFIER) || this.matchToken(r.TokenType.NUMBER) || this.matchReservedWordToken(d) || this.matchPlaceholderToken(r.TokenType.NAMED_PARAMETER) || this.matchPlaceholderToken(r.TokenType.QUOTED_PARAMETER) || this.matchPlaceholderToken(r.TokenType.INDEXED_PARAMETER) || this.matchPlaceholderToken(r.TokenType.POSITIONAL_PARAMETER) || this.matchToken(r.TokenType.VARIABLE) || this.matchToken(r.TokenType.STRING) || this.matchToken(r.TokenType.IDENTIFIER) || this.matchToken(r.TokenType.DELIMITER) || this.matchToken(r.TokenType.OPERATOR);
      }
    }, {
      key: "matchPlaceholderToken",
      value: function(d) {
        if (d in this.rules) {
          var g = this.matchToken(d), L = this.rules[d];
          if (g)
            return L != null && L.key ? a(a({}, g), {}, {
              key: L.key(g.value)
            }) : g;
        }
      }
    }, {
      key: "matchReservedWordToken",
      value: function(d) {
        if ((d == null ? void 0 : d.value) !== ".")
          return this.matchToken(r.TokenType.RESERVED_CASE_START) || this.matchToken(r.TokenType.RESERVED_CASE_END) || this.matchToken(r.TokenType.RESERVED_COMMAND) || this.matchToken(r.TokenType.RESERVED_BINARY_COMMAND) || this.matchToken(r.TokenType.RESERVED_DEPENDENT_CLAUSE) || this.matchToken(r.TokenType.RESERVED_JOIN) || this.matchToken(r.TokenType.RESERVED_KEYWORD) || this.matchToken(r.TokenType.RESERVED_LOGICAL_OPERATOR) || this.matchToken(r.TokenType.RESERVED_JOIN_CONDITION);
      }
      // Shorthand for `match` that looks up regex from rules
    }, {
      key: "matchToken",
      value: function(d) {
        var g = this.rules[d];
        if (!g)
          throw Error("Unknown token type found: ".concat(d));
        return this.match({
          type: d,
          regex: g.regex,
          transform: g.value
        });
      }
      // Attempts to match RegExp at current position in input
    }, {
      key: "match",
      value: function(d) {
        var g = d.type, L = d.regex, D = d.transform;
        L.lastIndex = this.index;
        var W = L.exec(this.input);
        if (W) {
          var x = W[0];
          return this.index += x.length, {
            type: g,
            text: x,
            value: D ? D(x) : x
          };
        }
      }
    }]), p;
  }();
  t.default = f, e.exports = t.default;
})($l, $l.exports);
var D_ = $l.exports;
(function(e, t) {
  function r(U) {
    "@babel/helpers - typeof";
    return r = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(G) {
      return typeof G;
    } : function(G) {
      return G && typeof Symbol == "function" && G.constructor === Symbol && G !== Symbol.prototype ? "symbol" : typeof G;
    }, r(U);
  }
  Object.defineProperty(t, "__esModule", {
    value: !0
  }), t.default = void 0;
  var i = it, n = c(ft), a = Pt, s = o(D_);
  function o(U) {
    return U && U.__esModule ? U : { default: U };
  }
  function l(U) {
    if (typeof WeakMap != "function")
      return null;
    var G = /* @__PURE__ */ new WeakMap(), H = /* @__PURE__ */ new WeakMap();
    return (l = function(B) {
      return B ? H : G;
    })(U);
  }
  function c(U, G) {
    if (!G && U && U.__esModule)
      return U;
    if (U === null || r(U) !== "object" && typeof U != "function")
      return { default: U };
    var H = l(G);
    if (H && H.has(U))
      return H.get(U);
    var re = {}, B = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var Y in U)
      if (Y !== "default" && Object.prototype.hasOwnProperty.call(U, Y)) {
        var E = B ? Object.getOwnPropertyDescriptor(U, Y) : null;
        E && (E.get || E.set) ? Object.defineProperty(re, Y, E) : re[Y] = U[Y];
      }
    return re.default = U, H && H.set(U, re), re;
  }
  function f(U, G) {
    return d(U) || O(U, G) || D(U, G) || p();
  }
  function p() {
    throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
  }
  function O(U, G) {
    var H = U == null ? null : typeof Symbol < "u" && U[Symbol.iterator] || U["@@iterator"];
    if (H != null) {
      var re = [], B = !0, Y = !1, E, m;
      try {
        for (H = H.call(U); !(B = (E = H.next()).done) && (re.push(E.value), !(G && re.length === G)); B = !0)
          ;
      } catch (P) {
        Y = !0, m = P;
      } finally {
        try {
          !B && H.return != null && H.return();
        } finally {
          if (Y)
            throw m;
        }
      }
      return re;
    }
  }
  function d(U) {
    if (Array.isArray(U))
      return U;
  }
  function g(U) {
    return x(U) || W(U) || D(U) || L();
  }
  function L() {
    throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
  }
  function D(U, G) {
    if (U) {
      if (typeof U == "string")
        return V(U, G);
      var H = Object.prototype.toString.call(U).slice(8, -1);
      if (H === "Object" && U.constructor && (H = U.constructor.name), H === "Map" || H === "Set")
        return Array.from(U);
      if (H === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(H))
        return V(U, G);
    }
  }
  function W(U) {
    if (typeof Symbol < "u" && U[Symbol.iterator] != null || U["@@iterator"] != null)
      return Array.from(U);
  }
  function x(U) {
    if (Array.isArray(U))
      return V(U);
  }
  function V(U, G) {
    (G == null || G > U.length) && (G = U.length);
    for (var H = 0, re = new Array(G); H < G; H++)
      re[H] = U[H];
    return re;
  }
  function _(U, G) {
    if (!(U instanceof G))
      throw new TypeError("Cannot call a class as a function");
  }
  function $(U, G) {
    for (var H = 0; H < G.length; H++) {
      var re = G[H];
      re.enumerable = re.enumerable || !1, re.configurable = !0, "value" in re && (re.writable = !0), Object.defineProperty(U, re.key, re);
    }
  }
  function z(U, G, H) {
    return G && $(U.prototype, G), H && $(U, H), Object.defineProperty(U, "prototype", { writable: !1 }), U;
  }
  function F(U, G, H) {
    return G in U ? Object.defineProperty(U, G, { value: H, enumerable: !0, configurable: !0, writable: !0 }) : U[G] = H, U;
  }
  var ae = /* @__PURE__ */ function() {
    function U(G) {
      var H, re, B, Y, E, m, P, R, A, y;
      _(this, U), F(this, "engine", void 0), F(this, "postProcess", void 0);
      var C = this.validRules((y = {}, F(y, i.TokenType.BLOCK_COMMENT, {
        regex: new RegExp("(\\/\\*(?:(?![])[\\s\\S])*?(?:\\*\\/|$))", "y")
      }), F(y, i.TokenType.LINE_COMMENT, {
        regex: n.lineComment((H = G.lineCommentTypes) !== null && H !== void 0 ? H : ["--"])
      }), F(y, i.TokenType.COMMA, {
        regex: new RegExp("[,]", "y")
      }), F(y, i.TokenType.OPEN_PAREN, {
        regex: n.parenthesis((re = G.openParens) !== null && re !== void 0 ? re : ["("])
      }), F(y, i.TokenType.CLOSE_PAREN, {
        regex: n.parenthesis((B = G.closeParens) !== null && B !== void 0 ? B : [")"])
      }), F(y, i.TokenType.QUOTED_IDENTIFIER, {
        regex: n.string(G.identTypes)
      }), F(y, i.TokenType.NUMBER, {
        regex: new RegExp("(?:0x[0-9A-Fa-f]+|0b[01]+|(?:\\x2D[\\t-\\r \\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF]*)?[0-9]+(?:\\.[0-9]*)?(?:[Ee][\\+\\x2D]?[0-9]+(?:\\.[0-9]+)?)?)", "y")
      }), F(y, i.TokenType.RESERVED_CASE_START, {
        regex: new RegExp("[Cc][Aa][Ss][Ee]\\b", "y"),
        value: function(w) {
          return w.toUpperCase();
        }
      }), F(y, i.TokenType.RESERVED_CASE_END, {
        regex: new RegExp("[Ee][Nn][Dd]\\b", "y"),
        value: function(w) {
          return w.toUpperCase();
        }
      }), F(y, i.TokenType.RESERVED_COMMAND, {
        regex: n.reservedWord(G.reservedCommands, G.identChars),
        value: function(w) {
          return w.toUpperCase();
        }
      }), F(y, i.TokenType.RESERVED_BINARY_COMMAND, {
        regex: n.reservedWord(G.reservedBinaryCommands, G.identChars),
        value: function(w) {
          return w.toUpperCase();
        }
      }), F(y, i.TokenType.RESERVED_DEPENDENT_CLAUSE, {
        regex: n.reservedWord(G.reservedDependentClauses, G.identChars),
        value: function(w) {
          return w.toUpperCase();
        }
      }), F(y, i.TokenType.RESERVED_JOIN, {
        regex: n.reservedWord(G.reservedJoins, G.identChars),
        value: function(w) {
          return w.toUpperCase();
        }
      }), F(y, i.TokenType.RESERVED_KEYWORD, {
        regex: n.reservedWord(G.reservedKeywords, G.identChars),
        value: function(w) {
          return w.toUpperCase();
        }
      }), F(y, i.TokenType.RESERVED_LOGICAL_OPERATOR, {
        regex: n.reservedWord((Y = G.reservedLogicalOperators) !== null && Y !== void 0 ? Y : ["AND", "OR"], G.identChars),
        value: function(w) {
          return w.toUpperCase();
        }
      }), F(y, i.TokenType.RESERVED_JOIN_CONDITION, {
        regex: n.reservedWord((E = G.reservedJoinConditions) !== null && E !== void 0 ? E : ["ON", "USING"], G.identChars),
        value: function(w) {
          return w.toUpperCase();
        }
      }), F(y, i.TokenType.NAMED_PARAMETER, {
        regex: n.parameter((m = G.namedParamTypes) !== null && m !== void 0 ? m : [], n.identifierPattern(G.paramChars || G.identChars)),
        key: function(w) {
          return w.slice(1);
        }
      }), F(y, i.TokenType.QUOTED_PARAMETER, {
        regex: n.parameter((P = G.quotedParamTypes) !== null && P !== void 0 ? P : [], n.stringPattern(G.identTypes)),
        key: function(w) {
          return function(J) {
            var te = J.tokenKey, se = J.quoteChar;
            return te.replace(new RegExp((0, a.escapeRegExp)("\\" + se), "gu"), se);
          }({
            tokenKey: w.slice(2, -1),
            quoteChar: w.slice(-1)
          });
        }
      }), F(y, i.TokenType.INDEXED_PARAMETER, {
        regex: n.parameter((R = G.numberedParamTypes) !== null && R !== void 0 ? R : [], "[0-9]+"),
        key: function(w) {
          return w.slice(1);
        }
      }), F(y, i.TokenType.POSITIONAL_PARAMETER, {
        regex: G.positionalParams ? new RegExp("[?]", "y") : void 0
      }), F(y, i.TokenType.VARIABLE, {
        regex: G.variableTypes ? n.variable(G.variableTypes) : a.NULL_REGEX
      }), F(y, i.TokenType.STRING, {
        regex: n.string(G.stringTypes)
      }), F(y, i.TokenType.IDENTIFIER, {
        regex: n.identifier(G.identChars)
      }), F(y, i.TokenType.DELIMITER, {
        regex: new RegExp(";", "y")
      }), F(y, i.TokenType.OPERATOR, {
        regex: n.operator("+-/*%&|^><=.:$@#?~![]{}", ["<>", "<=", ">=", "!="].concat(g((A = G.operators) !== null && A !== void 0 ? A : [])))
      }), y));
      this.engine = new s.default(C), this.postProcess = G.postProcess;
    }
    return z(U, [{
      key: "validRules",
      value: function(H) {
        return Object.fromEntries(Object.entries(H).filter(function(re) {
          var B = f(re, 2);
          B[0];
          var Y = B[1];
          return Y.regex;
        }));
      }
    }, {
      key: "tokenize",
      value: function(H) {
        var re = this.engine.tokenize(H);
        return this.postProcess ? this.postProcess(re) : re;
      }
    }]), U;
  }();
  t.default = ae, e.exports = t.default;
})(Vl, Vl.exports);
var cr = Vl.exports;
(function(e, t) {
  function r(w) {
    "@babel/helpers - typeof";
    return r = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(J) {
      return typeof J;
    } : function(J) {
      return J && typeof Symbol == "function" && J.constructor === Symbol && J !== Symbol.prototype ? "symbol" : typeof J;
    }, r(w);
  }
  Object.defineProperty(t, "__esModule", {
    value: !0
  }), t.default = void 0;
  var i = o(ur), n = o(cr), a = it, s = Xe;
  function o(w) {
    return w && w.__esModule ? w : { default: w };
  }
  function l(w, J) {
    var te = Object.keys(w);
    if (Object.getOwnPropertySymbols) {
      var se = Object.getOwnPropertySymbols(w);
      J && (se = se.filter(function(ge) {
        return Object.getOwnPropertyDescriptor(w, ge).enumerable;
      })), te.push.apply(te, se);
    }
    return te;
  }
  function c(w) {
    for (var J = 1; J < arguments.length; J++) {
      var te = arguments[J] != null ? arguments[J] : {};
      J % 2 ? l(Object(te), !0).forEach(function(se) {
        G(w, se, te[se]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(w, Object.getOwnPropertyDescriptors(te)) : l(Object(te)).forEach(function(se) {
        Object.defineProperty(w, se, Object.getOwnPropertyDescriptor(te, se));
      });
    }
    return w;
  }
  function f(w) {
    return g(w) || d(w) || O(w) || p();
  }
  function p() {
    throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
  }
  function O(w, J) {
    if (w) {
      if (typeof w == "string")
        return L(w, J);
      var te = Object.prototype.toString.call(w).slice(8, -1);
      if (te === "Object" && w.constructor && (te = w.constructor.name), te === "Map" || te === "Set")
        return Array.from(w);
      if (te === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(te))
        return L(w, J);
    }
  }
  function d(w) {
    if (typeof Symbol < "u" && w[Symbol.iterator] != null || w["@@iterator"] != null)
      return Array.from(w);
  }
  function g(w) {
    if (Array.isArray(w))
      return L(w);
  }
  function L(w, J) {
    (J == null || J > w.length) && (J = w.length);
    for (var te = 0, se = new Array(J); te < J; te++)
      se[te] = w[te];
    return se;
  }
  function D(w, J) {
    if (!(w instanceof J))
      throw new TypeError("Cannot call a class as a function");
  }
  function W(w, J) {
    for (var te = 0; te < J.length; te++) {
      var se = J[te];
      se.enumerable = se.enumerable || !1, se.configurable = !0, "value" in se && (se.writable = !0), Object.defineProperty(w, se.key, se);
    }
  }
  function x(w, J, te) {
    return J && W(w.prototype, J), te && W(w, te), Object.defineProperty(w, "prototype", { writable: !1 }), w;
  }
  function V(w, J) {
    if (typeof J != "function" && J !== null)
      throw new TypeError("Super expression must either be null or a function");
    w.prototype = Object.create(J && J.prototype, { constructor: { value: w, writable: !0, configurable: !0 } }), Object.defineProperty(w, "prototype", { writable: !1 }), J && _(w, J);
  }
  function _(w, J) {
    return _ = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(se, ge) {
      return se.__proto__ = ge, se;
    }, _(w, J);
  }
  function $(w) {
    var J = ae();
    return function() {
      var se = U(w), ge;
      if (J) {
        var fe = U(this).constructor;
        ge = Reflect.construct(se, arguments, fe);
      } else
        ge = se.apply(this, arguments);
      return z(this, ge);
    };
  }
  function z(w, J) {
    if (J && (r(J) === "object" || typeof J == "function"))
      return J;
    if (J !== void 0)
      throw new TypeError("Derived constructors may only return object or undefined");
    return F(w);
  }
  function F(w) {
    if (w === void 0)
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return w;
  }
  function ae() {
    if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
      return !1;
    if (typeof Proxy == "function")
      return !0;
    try {
      return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      })), !0;
    } catch {
      return !1;
    }
  }
  function U(w) {
    return U = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(te) {
      return te.__proto__ || Object.getPrototypeOf(te);
    }, U(w);
  }
  function G(w, J, te) {
    return J in w ? Object.defineProperty(w, J, { value: te, enumerable: !0, configurable: !0, writable: !0 }) : w[J] = te, w;
  }
  var H = {
    // https://cloud.google.com/bigquery/docs/reference/standard-sql/aead_encryption_functions
    aead: ["KEYS.NEW_KEYSET", "KEYS.ADD_KEY_FROM_RAW_BYTES", "AEAD.DECRYPT_BYTES", "AEAD.DECRYPT_STRING", "AEAD.ENCRYPT", "KEYS.KEYSET_CHAIN", "KEYS.KEYSET_FROM_JSON", "KEYS.KEYSET_TO_JSON", "KEYS.ROTATE_KEYSET", "KEYS.KEYSET_LENGTH"],
    // https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate_analytic_functions
    aggregateAnalytic: ["ANY_VALUE", "ARRAY_AGG", "AVG", "CORR", "COUNT", "COUNTIF", "COVAR_POP", "COVAR_SAMP", "MAX", "MIN", "ST_CLUSTERDBSCAN", "STDDEV_POP", "STDDEV_SAMP", "STRING_AGG", "SUM", "VAR_POP", "VAR_SAMP"],
    // https://cloud.google.com/bigquery/docs/reference/standard-sql/aggregate_functions
    aggregate: ["ANY_VALUE", "ARRAY_AGG", "ARRAY_CONCAT_AGG", "AVG", "BIT_AND", "BIT_OR", "BIT_XOR", "COUNT", "COUNTIF", "LOGICAL_AND", "LOGICAL_OR", "MAX", "MIN", "STRING_AGG", "SUM"],
    // https://cloud.google.com/bigquery/docs/reference/standard-sql/approximate_aggregate_functions
    approximateAggregate: ["APPROX_COUNT_DISTINCT", "APPROX_QUANTILES", "APPROX_TOP_COUNT", "APPROX_TOP_SUM"],
    // https://cloud.google.com/bigquery/docs/reference/standard-sql/array_functions
    array: ["ARRAY", "ARRAY_CONCAT", "ARRAY_LENGTH", "ARRAY_TO_STRING", "GENERATE_ARRAY", "GENERATE_DATE_ARRAY", "GENERATE_TIMESTAMP_ARRAY", "ARRAY_REVERSE", "OFFSET", "SAFE_OFFSET", "ORDINAL", "SAFE_ORDINAL"],
    // https://cloud.google.com/bigquery/docs/reference/standard-sql/bit_functions
    bitwise: ["BIT_COUNT"],
    // https://cloud.google.com/bigquery/docs/reference/standard-sql/conversion_functions
    conversion: [
      // 'CASE',
      "PARSE_BIGNUMERIC",
      "PARSE_NUMERIC",
      "SAFE_CAST"
    ],
    // https://cloud.google.com/bigquery/docs/reference/standard-sql/date_functions
    date: ["CURRENT_DATE", "EXTRACT", "DATE", "DATE_ADD", "DATE_SUB", "DATE_DIFF", "DATE_TRUNC", "DATE_FROM_UNIX_DATE", "FORMAT_DATE", "LAST_DAY", "PARSE_DATE", "UNIX_DATE"],
    // https://cloud.google.com/bigquery/docs/reference/standard-sql/datetime_functions
    datetime: ["CURRENT_DATETIME", "DATETIME", "EXTRACT", "DATETIME_ADD", "DATETIME_SUB", "DATETIME_DIFF", "DATETIME_TRUNC", "FORMAT_DATETIME", "LAST_DAY", "PARSE_DATETIME"],
    // https://cloud.google.com/bigquery/docs/reference/standard-sql/debugging_functions
    debugging: ["ERROR"],
    // https://cloud.google.com/bigquery/docs/reference/standard-sql/federated_query_functions
    federatedQuery: ["EXTERNAL_QUERY"],
    // https://cloud.google.com/bigquery/docs/reference/standard-sql/geography_functions
    geography: ["S2_CELLIDFROMPOINT", "S2_COVERINGCELLIDS", "ST_ANGLE", "ST_AREA", "ST_ASBINARY", "ST_ASGEOJSON", "ST_ASTEXT", "ST_AZIMUTH", "ST_BOUNDARY", "ST_BOUNDINGBOX", "ST_BUFFER", "ST_BUFFERWITHTOLERANCE", "ST_CENTROID", "ST_CENTROID_AGG", "ST_CLOSESTPOINT", "ST_CLUSTERDBSCAN", "ST_CONTAINS", "ST_CONVEXHULL", "ST_COVEREDBY", "ST_COVERS", "ST_DIFFERENCE", "ST_DIMENSION", "ST_DISJOINT", "ST_DISTANCE", "ST_DUMP", "ST_DWITHIN", "ST_ENDPOINT", "ST_EQUALS", "ST_EXTENT", "ST_EXTERIORRING", "ST_GEOGFROM", "ST_GEOGFROMGEOJSON", "ST_GEOGFROMTEXT", "ST_GEOGFROMWKB", "ST_GEOGPOINT", "ST_GEOGPOINTFROMGEOHASH", "ST_GEOHASH", "ST_GEOMETRYTYPE", "ST_INTERIORRINGS", "ST_INTERSECTION", "ST_INTERSECTS", "ST_INTERSECTSBOX", "ST_ISCOLLECTION", "ST_ISEMPTY", "ST_LENGTH", "ST_MAKELINE", "ST_MAKEPOLYGON", "ST_MAKEPOLYGONORIENTED", "ST_MAXDISTANCE", "ST_NPOINTS", "ST_NUMGEOMETRIES", "ST_NUMPOINTS", "ST_PERIMETER", "ST_POINTN", "ST_SIMPLIFY", "ST_SNAPTOGRID", "ST_STARTPOINT", "ST_TOUCHES", "ST_UNION", "ST_UNION_AGG", "ST_WITHIN", "ST_X", "ST_Y"],
    // https://cloud.google.com/bigquery/docs/reference/standard-sql/hash_functions
    hash: ["FARM_FINGERPRINT", "MD5", "SHA1", "SHA256", "SHA512"],
    // https://cloud.google.com/bigquery/docs/reference/standard-sql/hll_functions
    hll: ["HLL_COUNT.INIT", "HLL_COUNT.MERGE", "HLL_COUNT.MERGE_PARTIAL", "HLL_COUNT.EXTRACT"],
    // https://cloud.google.com/bigquery/docs/reference/standard-sql/interval_functions
    interval: ["MAKE_INTERVAL", "EXTRACT", "JUSTIFY_DAYS", "JUSTIFY_HOURS", "JUSTIFY_INTERVAL"],
    // https://cloud.google.com/bigquery/docs/reference/standard-sql/json_functions
    json: ["JSON_EXTRACT", "JSON_QUERY", "JSON_EXTRACT_SCALAR", "JSON_VALUE", "JSON_EXTRACT_ARRAY", "JSON_QUERY_ARRAY", "JSON_EXTRACT_STRING_ARRAY", "JSON_VALUE_ARRAY", "TO_JSON_STRING"],
    // https://cloud.google.com/bigquery/docs/reference/standard-sql/mathematical_functions
    math: ["ABS", "SIGN", "IS_INF", "IS_NAN", "IEEE_DIVIDE", "RAND", "SQRT", "POW", "POWER", "EXP", "LN", "LOG", "LOG10", "GREATEST", "LEAST", "DIV", "SAFE_DIVIDE", "SAFE_MULTIPLY", "SAFE_NEGATE", "SAFE_ADD", "SAFE_SUBTRACT", "MOD", "ROUND", "TRUNC", "CEIL", "CEILING", "FLOOR", "COS", "COSH", "ACOS", "ACOSH", "SIN", "SINH", "ASIN", "ASINH", "TAN", "TANH", "ATAN", "ATANH", "ATAN2", "RANGE_BUCKET"],
    // https://cloud.google.com/bigquery/docs/reference/standard-sql/navigation_functions
    navigation: ["FIRST_VALUE", "LAST_VALUE", "NTH_VALUE", "LEAD", "LAG", "PERCENTILE_CONT", "PERCENTILE_DISC"],
    // https://cloud.google.com/bigquery/docs/reference/standard-sql/net_functions
    net: ["NET.IP_FROM_STRING", "NET.SAFE_IP_FROM_STRING", "NET.IP_TO_STRING", "NET.IP_NET_MASK", "NET.IP_TRUNC", "NET.IPV4_FROM_INT64", "NET.IPV4_TO_INT64", "NET.HOST", "NET.PUBLIC_SUFFIX", "NET.REG_DOMAIN"],
    // https://cloud.google.com/bigquery/docs/reference/standard-sql/numbering_functions
    numbering: ["RANK", "DENSE_RANK", "PERCENT_RANK", "CUME_DIST", "NTILE", "ROW_NUMBER"],
    // https://cloud.google.com/bigquery/docs/reference/standard-sql/security_functions
    security: ["SESSION_USER"],
    // https://cloud.google.com/bigquery/docs/reference/standard-sql/statistical_aggregate_functions
    statisticalAggregate: ["CORR", "COVAR_POP", "COVAR_SAMP", "STDDEV_POP", "STDDEV_SAMP", "STDDEV", "VAR_POP", "VAR_SAMP", "VARIANCE"],
    // https://cloud.google.com/bigquery/docs/reference/standard-sql/string_functions
    string: ["ASCII", "BYTE_LENGTH", "CHAR_LENGTH", "CHARACTER_LENGTH", "CHR", "CODE_POINTS_TO_BYTES", "CODE_POINTS_TO_STRING", "CONCAT", "CONTAINS_SUBSTR", "ENDS_WITH", "FORMAT", "FROM_BASE32", "FROM_BASE64", "FROM_HEX", "INITCAP", "INSTR", "LEFT", "LENGTH", "LPAD", "LOWER", "LTRIM", "NORMALIZE", "NORMALIZE_AND_CASEFOLD", "OCTET_LENGTH", "REGEXP_CONTAINS", "REGEXP_EXTRACT", "REGEXP_EXTRACT_ALL", "REGEXP_INSTR", "REGEXP_REPLACE", "REGEXP_SUBSTR", "REPLACE", "REPEAT", "REVERSE", "RIGHT", "RPAD", "RTRIM", "SAFE_CONVERT_BYTES_TO_STRING", "SOUNDEX", "SPLIT", "STARTS_WITH", "STRPOS", "SUBSTR", "SUBSTRING", "TO_BASE32", "TO_BASE64", "TO_CODE_POINTS", "TO_HEX", "TRANSLATE", "TRIM", "UNICODE", "UPPER"],
    // https://cloud.google.com/bigquery/docs/reference/standard-sql/time_functions
    time: ["CURRENT_TIME", "TIME", "EXTRACT", "TIME_ADD", "TIME_SUB", "TIME_DIFF", "TIME_TRUNC", "FORMAT_TIME", "PARSE_TIME"],
    // https://cloud.google.com/bigquery/docs/reference/standard-sql/timestamp_functions
    timestamp: ["CURRENT_TIMESTAMP", "EXTRACT", "STRING", "TIMESTAMP", "TIMESTAMP_ADD", "TIMESTAMP_SUB", "TIMESTAMP_DIFF", "TIMESTAMP_TRUNC", "FORMAT_TIMESTAMP", "PARSE_TIMESTAMP", "TIMESTAMP_SECONDS", "TIMESTAMP_MILLIS", "TIMESTAMP_MICROS", "UNIX_SECONDS", "UNIX_MILLIS", "UNIX_MICROS"],
    // https://cloud.google.com/bigquery/docs/reference/standard-sql/uuid_functions
    uuid: ["GENERATE_UUID"],
    // https://cloud.google.com/bigquery/docs/reference/standard-sql/conditional_expressions
    conditional: ["COALESCE", "IF", "IFNULL", "NULLIF"],
    // https://cloud.google.com/bigquery/docs/reference/legacy-sql
    legacyAggregate: ["AVG", "BIT_AND", "BIT_OR", "BIT_XOR", "CORR", "COUNT", "COVAR_POP", "COVAR_SAMP", "EXACT_COUNT_DISTINCT", "FIRST", "GROUP_CONCAT", "GROUP_CONCAT_UNQUOTED", "LAST", "MAX", "MIN", "NEST", "NTH", "QUANTILES", "STDDEV", "STDDEV_POP", "STDDEV_SAMP", "SUM", "TOP", "UNIQUE", "VARIANCE", "VAR_POP", "VAR_SAMP"],
    legacyBitwise: ["BIT_COUNT"],
    legacyCasting: ["BOOLEAN", "BYTES", "CAST", "FLOAT", "HEX_STRING", "INTEGER", "STRING"],
    legacyComparison: [
      // expr 'IN',
      "COALESCE",
      "GREATEST",
      "IFNULL",
      "IS_INF",
      "IS_NAN",
      "IS_EXPLICITLY_DEFINED",
      "LEAST",
      "NVL"
    ],
    legacyDatetime: ["CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", "DATE", "DATE_ADD", "DATEDIFF", "DAY", "DAYOFWEEK", "DAYOFYEAR", "FORMAT_UTC_USEC", "HOUR", "MINUTE", "MONTH", "MSEC_TO_TIMESTAMP", "NOW", "PARSE_UTC_USEC", "QUARTER", "SEC_TO_TIMESTAMP", "SECOND", "STRFTIME_UTC_USEC", "TIME", "TIMESTAMP", "TIMESTAMP_TO_MSEC", "TIMESTAMP_TO_SEC", "TIMESTAMP_TO_USEC", "USEC_TO_TIMESTAMP", "UTC_USEC_TO_DAY", "UTC_USEC_TO_HOUR", "UTC_USEC_TO_MONTH", "UTC_USEC_TO_WEEK", "UTC_USEC_TO_YEAR", "WEEK", "YEAR"],
    legacyIp: ["FORMAT_IP", "PARSE_IP", "FORMAT_PACKED_IP", "PARSE_PACKED_IP"],
    legacyJson: ["JSON_EXTRACT", "JSON_EXTRACT_SCALAR"],
    legacyMath: ["ABS", "ACOS", "ACOSH", "ASIN", "ASINH", "ATAN", "ATANH", "ATAN2", "CEIL", "COS", "COSH", "DEGREES", "EXP", "FLOOR", "LN", "LOG", "LOG2", "LOG10", "PI", "POW", "RADIANS", "RAND", "ROUND", "SIN", "SINH", "SQRT", "TAN", "TANH"],
    legacyRegex: ["REGEXP_MATCH", "REGEXP_EXTRACT", "REGEXP_REPLACE"],
    legacyString: [
      "CONCAT",
      // expr CONTAINS 'str'
      "INSTR",
      "LEFT",
      "LENGTH",
      "LOWER",
      "LPAD",
      "LTRIM",
      "REPLACE",
      "RIGHT",
      "RPAD",
      "RTRIM",
      "SPLIT",
      "SUBSTR",
      "UPPER"
    ],
    legacyTableWildcard: ["TABLE_DATE_RANGE", "TABLE_DATE_RANGE_STRICT", "TABLE_QUERY"],
    legacyUrl: ["HOST", "DOMAIN", "TLD"],
    legacyWindow: ["AVG", "COUNT", "MAX", "MIN", "STDDEV", "SUM", "CUME_DIST", "DENSE_RANK", "FIRST_VALUE", "LAG", "LAST_VALUE", "LEAD", "NTH_VALUE", "NTILE", "PERCENT_RANK", "PERCENTILE_CONT", "PERCENTILE_DISC", "RANK", "RATIO_TO_REPORT", "ROW_NUMBER"],
    legacyMisc: ["CURRENT_USER", "EVERY", "FROM_BASE64", "HASH", "FARM_FINGERPRINT", "IF", "POSITION", "SHA1", "SOME", "TO_BASE64"],
    other: ["BQ.JOBS.CANCEL", "BQ.REFRESH_MATERIALIZED_VIEW"],
    pivot: ["PIVOT", "UNPIVOT"]
  }, re = {
    keywords: [
      "ALL",
      // 'AND',
      "ANY",
      // 'ARRAY',
      "AS",
      "ASC",
      "ASSERT_ROWS_MODIFIED",
      "AT",
      "BETWEEN",
      "BY",
      // 'CASE',
      "CAST",
      "COLLATE",
      "CONTAINS",
      // 'CREATE',
      // 'CROSS',
      "CUBE",
      "CURRENT",
      "DEFAULT",
      "DEFINE",
      "DESC",
      "DISTINCT",
      // 'ELSE',
      // 'END',
      "ENUM",
      "ESCAPE",
      // 'EXCEPT',
      // 'EXCLUDE',
      "EXISTS",
      "EXTRACT",
      "FALSE",
      // 'FETCH',
      "FOLLOWING",
      "FOR",
      // 'FROM',
      "FULL",
      // 'GROUP',
      "GROUPING",
      "GROUPS",
      "HASH",
      // 'HAVING',
      "IF",
      "IGNORE",
      "IN",
      // 'INNER',
      // 'INTERSECT',
      // 'INTERVAL',
      "INTO",
      "IS",
      // 'JOIN',
      // 'LATERAL',
      // 'LEFT',
      "LIKE",
      // 'LIMIT',
      "LOOKUP",
      // 'MERGE',
      // 'NATURAL',
      "NEW",
      "NO",
      "NOT",
      "NULL",
      "NULLS",
      "OF",
      // 'ON',
      // 'OR',
      // 'ORDER',
      // 'OUTER',
      "OVER",
      "PARTITION",
      "PRECEDING",
      "PROTO",
      "RANGE",
      "RECURSIVE",
      "RESPECT",
      // 'RIGHT',
      "ROLLUP",
      "ROWS",
      // 'SELECT',
      // 'SET',
      "SOME",
      // 'STRUCT',
      "TABLE",
      "TABLESAMPLE SYSTEM",
      "THEN",
      "TO",
      "TREAT",
      "TRUE",
      "UNBOUNDED",
      // 'UNION',
      "UNNEST",
      // 'USING',
      // 'WHEN',
      // 'WHERE',
      // 'WINDOW',
      // 'WITH',
      "WITHIN"
    ],
    datatypes: [
      "ARRAY",
      // parametric, ARRAY<T>
      "BOOL",
      "BYTES",
      // parameterised, BYTES(Length)
      "DATE",
      "DATETIME",
      "GEOGRAPHY",
      "INTERVAL",
      "INT64",
      "INT",
      "SMALLINT",
      "INTEGER",
      "BIGINT",
      "TINYINT",
      "BYTEINT",
      "NUMERIC",
      // parameterised, NUMERIC(Precision[, Scale])
      "DECIMAL",
      // parameterised, DECIMAL(Precision[, Scale])
      "BIGNUMERIC",
      // parameterised, BIGNUMERIC(Precision[, Scale])
      "BIGDECIMAL",
      // parameterised, BIGDECIMAL(Precision[, Scale])
      "FLOAT64",
      "STRING",
      // parameterised, STRING(Length)
      "STRUCT",
      // parametric, STRUCT<T>
      "TIME",
      "TIMEZONE"
    ],
    // https://cloud.google.com/bigquery/docs/reference/standard-sql/conversion_functions#formatting_syntax
    stringFormat: ["HEX", "BASEX", "BASE64M", "ASCII", "UTF-8", "UTF8"],
    misc: ["SAFE"]
  }, B = [
    // DQL, https://cloud.google.com/bigquery/docs/reference/standard-sql/query-syntax
    "SELECT",
    "FROM",
    "WHERE",
    "GROUP BY",
    "HAVING",
    "ORDER BY",
    "QUALIFY",
    "WINDOW",
    "PARTITION BY",
    "LIMIT",
    "OFFSET",
    "WITH",
    "OMIT RECORD IF",
    // legacy
    // DML, https://cloud.google.com/bigquery/docs/reference/standard-sql/dml-syntax
    "INSERT",
    "INSERT INTO",
    "VALUES",
    "DELETE",
    "DELETE FROM",
    "TRUNCATE TABLE",
    "UPDATE",
    "MERGE",
    "MERGE INTO",
    // 'USING',
    // DDL, https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language
    "SET SCHEMA",
    // added
    "CREATE SCHEMA",
    "CREATE TABLE",
    "CREATE TABLE IF NOT EXISTS",
    "CREATE TEMP TABLE",
    "CREATE TEMP TABLE IF NOT EXISTS",
    "CREATE TEMPORARY TABLE",
    "CREATE TEMPORARY TABLE IF NOT EXISTS",
    "CREATE OR REPLACE TABLE",
    "CREATE OR REPLACE TEMP TABLE",
    "CREATE OR REPLACE TEMPORARY TABLE",
    "CREATE TABLE LIKE",
    "CREATE TABLE COPY",
    "CREATE SNAPSHOT TABLE",
    "CREATE TABLE CLONE",
    "CREATE VIEW",
    "CREATE VIEW IF NOT EXISTS",
    "CREATE OR REPLACE VIEW",
    "CREATE MATERIALIZED VIEW",
    "CREATE EXTERNAL TABLE",
    "CREATE FUNCTION",
    "CREATE TABLE FUNCTION",
    "CREATE PROCEDURE",
    "CREATE ROW ACCESS POLICY",
    "ALTER SCHEMA SET OPTIONS",
    "ALTER TABLE SET OPTIONS",
    "ALTER TABLE ADD COLUMN",
    "ALTER TABLE RENAME TO",
    "ALTER TABLE DROP COLUMN",
    "ALTER COLUMN SET OPTIONS",
    "ALTER COLUMN DROP NOT NULL",
    "ALTER COLUMN SET DATA TYPE",
    "ALTER VIEW SET OPTIONS",
    "ALTER MATERIALIZED VIEW SET OPTIONS",
    "DROP SCHEMA",
    "DROP TABLE",
    "DROP SNAPSHOT TABLE",
    "DROP EXTERNAL TABLE",
    "DROP VIEW",
    "DROP MATERIALIZED VIEW",
    "DROP FUNCTION",
    "DROP TABLE FUNCTION",
    "DROP PROCEDURE",
    "DROP ROW ACCESS POLICY",
    // DCL, https://cloud.google.com/bigquery/docs/reference/standard-sql/data-control-language
    "GRANT",
    "REVOKE",
    "CREATE CAPACITY",
    "CREATE RESERVATION",
    "CREATE ASSIGNMENT",
    "DROP CAPACITY",
    "DROP RESERVATION",
    "DROP ASSIGNMENT",
    // Script, https://cloud.google.com/bigquery/docs/reference/standard-sql/scripting
    "DECLARE",
    "SET",
    "EXECUTE IMMEDIATE",
    "LOOP",
    "END LOOP",
    "REPEAT",
    "END REPEAT",
    "WHILE",
    "END WHILE",
    "BREAK",
    "LEAVE",
    "CONTINUE",
    "ITERATE",
    "FOR",
    "END FOR",
    "BEGIN",
    "BEGIN TRANSACTION",
    "COMMIT TRANSACTION",
    "ROLLBACK TRANSACTION",
    "RAISE",
    "RETURN",
    "CALL",
    // Debug, https://cloud.google.com/bigquery/docs/reference/standard-sql/debugging-statements
    "ASSERT",
    // Other, https://cloud.google.com/bigquery/docs/reference/standard-sql/other-statements
    "EXPORT DATA"
  ], Y = ["INTERSECT", "INTERSECT ALL", "INTERSECT DISTINCT", "UNION", "UNION ALL", "UNION DISTINCT", "EXCEPT", "EXCEPT ALL", "EXCEPT DISTINCT"], E = ["JOIN", "INNER JOIN", "LEFT JOIN", "LEFT OUTER JOIN", "RIGHT JOIN", "RIGHT OUTER JOIN", "FULL JOIN", "FULL OUTER JOIN", "CROSS JOIN"], m = ["WHEN", "ELSE"], P = /* @__PURE__ */ function(w) {
    V(te, w);
    var J = $(te);
    function te() {
      return D(this, te), J.apply(this, arguments);
    }
    return x(te, [{
      key: "tokenizer",
      value: (
        // TODO: handle trailing comma in select clause
        function() {
          return new n.default({
            reservedCommands: B,
            reservedBinaryCommands: Y,
            reservedJoins: E,
            reservedDependentClauses: m,
            reservedKeywords: (0, s.dedupe)([].concat(f(Object.values(H).flat()), f(Object.values(re).flat()))),
            openParens: ["(", "["],
            closeParens: [")", "]"],
            stringTypes: [
              // The triple-quoted strings are listed first, so they get matched first.
              // Otherwise the first two quotes of """ will get matched as an empty "" string.
              {
                quote: '""".."""',
                prefixes: ["R", "B", "RB", "BR"]
              },
              {
                quote: "'''..'''",
                prefixes: ["R", "B", "RB", "BR"]
              },
              {
                quote: '""',
                prefixes: ["R", "B", "RB", "BR"]
              },
              {
                quote: "''",
                prefixes: ["R", "B", "RB", "BR"]
              }
            ],
            identTypes: ["``"],
            identChars: {
              dashes: !0
            },
            positionalParams: !0,
            namedParamTypes: ["@"],
            quotedParamTypes: ["@"],
            lineCommentTypes: ["--", "#"],
            operators: te.operators,
            postProcess: R
          });
        }
      )
    }]), te;
  }(i.default);
  t.default = P, G(P, "operators", ["~", ">>", "<<", "||"]);
  function R(w) {
    return A(y(w));
  }
  function A(w) {
    var J = a.EOF_TOKEN;
    return w.map(function(te) {
      return te.value === "OFFSET" && J.value === "[" ? (J = te, c(c({}, te), {}, {
        type: a.TokenType.RESERVED_KEYWORD
      })) : (J = te, te);
    });
  }
  function y(w) {
    for (var J = [], te = 0; te < w.length; te++) {
      var se = w[te], ge = w[te + 1] || a.EOF_TOKEN;
      if ((a.isToken.ARRAY(se) || a.isToken.STRUCT(se)) && ge.value === "<") {
        var fe = j(w, te + 1), et = w.slice(te, fe + 1);
        J.push({
          type: a.TokenType.IDENTIFIER,
          value: et.map(C("value")).join(""),
          text: et.map(C("text")).join("")
        }), te = fe;
      } else
        J.push(se);
    }
    return J;
  }
  var C = function(J) {
    return function(te) {
      return te.type === a.TokenType.IDENTIFIER || te.type === a.TokenType.COMMA ? te[J] + " " : te[J];
    };
  };
  function j(w, J) {
    for (var te = 0, se = J; se < w.length; se++) {
      var ge = w[se];
      if (ge.value === "<" ? te++ : ge.value === ">" ? te-- : ge.value === ">>" && (te -= 2), te === 0)
        return se;
    }
    return w.length - 1;
  }
  e.exports = t.default;
})(_l, _l.exports);
var U_ = _l.exports, Yl = { exports: {} };
(function(e, t) {
  function r(E) {
    "@babel/helpers - typeof";
    return r = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(m) {
      return typeof m;
    } : function(m) {
      return m && typeof Symbol == "function" && m.constructor === Symbol && m !== Symbol.prototype ? "symbol" : typeof m;
    }, r(E);
  }
  Object.defineProperty(t, "__esModule", {
    value: !0
  }), t.default = void 0;
  var i = s(ur), n = s(cr), a = Xe;
  function s(E) {
    return E && E.__esModule ? E : { default: E };
  }
  function o(E) {
    return p(E) || f(E) || c(E) || l();
  }
  function l() {
    throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
  }
  function c(E, m) {
    if (E) {
      if (typeof E == "string")
        return O(E, m);
      var P = Object.prototype.toString.call(E).slice(8, -1);
      if (P === "Object" && E.constructor && (P = E.constructor.name), P === "Map" || P === "Set")
        return Array.from(E);
      if (P === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(P))
        return O(E, m);
    }
  }
  function f(E) {
    if (typeof Symbol < "u" && E[Symbol.iterator] != null || E["@@iterator"] != null)
      return Array.from(E);
  }
  function p(E) {
    if (Array.isArray(E))
      return O(E);
  }
  function O(E, m) {
    (m == null || m > E.length) && (m = E.length);
    for (var P = 0, R = new Array(m); P < m; P++)
      R[P] = E[P];
    return R;
  }
  function d(E, m) {
    if (!(E instanceof m))
      throw new TypeError("Cannot call a class as a function");
  }
  function g(E, m) {
    for (var P = 0; P < m.length; P++) {
      var R = m[P];
      R.enumerable = R.enumerable || !1, R.configurable = !0, "value" in R && (R.writable = !0), Object.defineProperty(E, R.key, R);
    }
  }
  function L(E, m, P) {
    return m && g(E.prototype, m), P && g(E, P), Object.defineProperty(E, "prototype", { writable: !1 }), E;
  }
  function D(E, m) {
    if (typeof m != "function" && m !== null)
      throw new TypeError("Super expression must either be null or a function");
    E.prototype = Object.create(m && m.prototype, { constructor: { value: E, writable: !0, configurable: !0 } }), Object.defineProperty(E, "prototype", { writable: !1 }), m && W(E, m);
  }
  function W(E, m) {
    return W = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(R, A) {
      return R.__proto__ = A, R;
    }, W(E, m);
  }
  function x(E) {
    var m = $();
    return function() {
      var R = z(E), A;
      if (m) {
        var y = z(this).constructor;
        A = Reflect.construct(R, arguments, y);
      } else
        A = R.apply(this, arguments);
      return V(this, A);
    };
  }
  function V(E, m) {
    if (m && (r(m) === "object" || typeof m == "function"))
      return m;
    if (m !== void 0)
      throw new TypeError("Derived constructors may only return object or undefined");
    return _(E);
  }
  function _(E) {
    if (E === void 0)
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return E;
  }
  function $() {
    if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
      return !1;
    if (typeof Proxy == "function")
      return !0;
    try {
      return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      })), !0;
    } catch {
      return !1;
    }
  }
  function z(E) {
    return z = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(P) {
      return P.__proto__ || Object.getPrototypeOf(P);
    }, z(E);
  }
  function F(E, m, P) {
    return m in E ? Object.defineProperty(E, m, { value: P, enumerable: !0, configurable: !0, writable: !0 }) : E[m] = P, E;
  }
  var ae = {
    // https://www.ibm.com/docs/en/db2-for-zos/11?topic=functions-aggregate
    aggregate: ["ARRAY_AGG", "AVG", "CORR", "CORRELATION", "COUNT", "COUNT_BIG", "COVAR_POP", "COVARIANCE", "COVAR", "COVAR_SAMP", "COVARIANCE_SAMP", "CUME_DIST", "GROUPING", "LISTAGG", "MAX", "MEDIAN", "MIN", "PERCENTILE_CONT", "PERCENTILE_DISC", "PERCENT_RANK", "REGR_AVGX", "REGR_AVGY", "REGR_COUNT", "REGR_INTERCEPT", "REGR_ICPT", "REGR_R2", "REGR_SLOPE", "REGR_SXX", "REGR_SXY", "REGR_SYY", "STDDEV_POP", "STDDEV", "STDDEV_SAMP", "SUM", "VAR_POP", "VARIANCE", "VAR", "VAR_SAMP", "VARIANCE_SAMP", "XMLAGG"],
    // https://www.ibm.com/docs/en/db2-for-zos/11?topic=functions-scalar
    scalar: ["ABS", "ABSVAL", "ACOS", "ADD_DAYS", "ADD_MONTHS", "ARRAY_DELETE", "ARRAY_FIRST", "ARRAY_LAST", "ARRAY_NEXT", "ARRAY_PRIOR", "ARRAY_TRIM", "ASCII", "ASCII_CHR", "ASCII_STR", "ASCIISTR", "ASIN", "ATAN", "ATANH", "ATAN2", "BIGINT", "BINARY", "BITAND", "BITANDNOT", "BITOR", "BITXOR", "BITNOT", "BLOB", "BTRIM", "CARDINALITY", "CCSID_ENCODING", "CEILING", "CEIL", "CHAR", "CHAR9", "CHARACTER_LENGTH", "CHAR_LENGTH", "CHR", "CLOB", "COALESCE", "COLLATION_KEY", "COMPARE_DECFLOAT", "CONCAT", "CONTAINS", "COS", "COSH", "DATE", "DAY", "DAYOFMONTH", "DAYOFWEEK", "DAYOFWEEK_ISO", "DAYOFYEAR", "DAYS", "DAYS_BETWEEN", "DBCLOB", "DECFLOAT", "DECFLOAT_FORMAT", "DECFLOAT_SORTKEY", "DECIMAL", "DEC", "DECODE", "DECRYPT_BINARY", "DECRYPT_BIT", "DECRYPT_CHAR", "DECRYPT_DB", "DECRYPT_DATAKEY_BIGINT", "DECRYPT_DATAKEY_BIT", "DECRYPT_DATAKEY_CLOB", "DECRYPT_DATAKEY_DBCLOB", "DECRYPT_DATAKEY_DECIMAL", "DECRYPT_DATAKEY_INTEGER", "DECRYPT_DATAKEY_VARCHAR", "DECRYPT_DATAKEY_VARGRAPHIC", "DEGREES", "DIFFERENCE", "DIGITS", "DOUBLE_PRECISION", "DOUBLE", "DSN_XMLVALIDATE", "EBCDIC_CHR", "EBCDIC_STR", "ENCRYPT_DATAKEY", "ENCRYPT_TDES", "EXP", "EXTRACT", "FLOAT", "FLOOR", "GENERATE_UNIQUE", "GENERATE_UNIQUE_BINARY", "GETHINT", "GETVARIABLE", "GRAPHIC", "GREATEST", "HASH", "HASH_CRC32", "HASH_MD5", "HASH_SHA1", "HASH_SHA256", "HEX", "HOUR", "IDENTITY_VAL_LOCAL", "IFNULL", "INSERT", "INSTR", "INTEGER", "INT", "JULIAN_DAY", "LAST_DAY", "LCASE", "LEAST", "LEFT", "LENGTH", "LN", "LOCATE", "LOCATE_IN_STRING", "LOG10", "LOWER", "LPAD", "LTRIM", "MAX", "MAX_CARDINALITY", "MICROSECOND", "MIDNIGHT_SECONDS", "MIN", "MINUTE", "MOD", "MONTH", "MONTHS_BETWEEN", "MQREAD", "MQREADCLOB", "MQRECEIVE", "MQRECEIVECLOB", "MQSEND", "MULTIPLY_ALT", "NEXT_DAY", "NEXT_MONTH", "NORMALIZE_DECFLOAT", "NORMALIZE_STRING", "NULLIF", "NVL", "OVERLAY", "PACK", "POSITION", "POSSTR", "POWER", "POW", "QUANTIZE", "QUARTER", "RADIANS", "RAISE_ERROR", "RANDOM", "RAND", "REAL", "REGEXP_COUNT", "REGEXP_INSTR", "REGEXP_LIKE", "REGEXP_REPLACE", "REGEXP_SUBSTR", "REPEAT", "REPLACE", "RID", "RIGHT", "ROUND", "ROUND_TIMESTAMP", "ROWID", "RPAD", "RTRIM", "SCORE", "SECOND", "SIGN", "SIN", "SINH", "SMALLINT", "SOUNDEX", "SOAPHTTPC", "SOAPHTTPV", "SOAPHTTPNC", "SOAPHTTPNV", "SPACE", "SQRT", "STRIP", "STRLEFT", "STRPOS", "STRRIGHT", "SUBSTR", "SUBSTRING", "TAN", "TANH", "TIME", "TIMESTAMP", "TIMESTAMPADD", "TIMESTAMPDIFF", "TIMESTAMP_FORMAT", "TIMESTAMP_ISO", "TIMESTAMP_TZ", "TO_CHAR", "TO_CLOB", "TO_DATE", "TO_NUMBER", "TOTALORDER", "TO_TIMESTAMP", "TRANSLATE", "TRIM", "TRIM_ARRAY", "TRUNCATE", "TRUNC", "TRUNC_TIMESTAMP", "UCASE", "UNICODE", "UNICODE_STR", "UNISTR", "UPPER", "VALUE", "VARBINARY", "VARCHAR", "VARCHAR9", "VARCHAR_BIT_FORMAT", "VARCHAR_FORMAT", "VARGRAPHIC", "VERIFY_GROUP_FOR_USER", "VERIFY_ROLE_FOR_USER", "VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER", "WEEK", "WEEK_ISO", "WRAP", "XMLATTRIBUTES", "XMLCOMMENT", "XMLCONCAT", "XMLDOCUMENT", "XMLELEMENT", "XMLFOREST", "XMLMODIFY", "XMLNAMESPACES", "XMLPARSE", "XMLPI", "XMLQUERY", "XMLSERIALIZE", "XMLTEXT", "XMLXSROBJECTID", "XSLTRANSFORM", "YEAR"],
    // https://www.ibm.com/docs/en/db2-for-zos/11?topic=functions-table
    table: ["ADMIN_TASK_LIST", "ADMIN_TASK_OUTPUT", "ADMIN_TASK_STATUS", "BLOCKING_THREADS", "MQREADALL", "MQREADALLCLOB", "MQRECEIVEALL", "MQRECEIVEALLCLOB", "XMLTABLE"],
    // https://www.ibm.com/docs/en/db2-for-zos/11?topic=functions-row
    row: ["UNPACK"],
    // https://www.ibm.com/docs/en/db2-for-zos/12?topic=expressions-olap-specification
    olap: ["FIRST_VALUE", "LAG", "LAST_VALUE", "LEAD", "NTH_VALUE", "NTILE", "RATIO_TO_REPORT"]
  }, U = {
    // https://www.ibm.com/docs/en/db2-for-zos/11?topic=words-reserved#db2z_reservedwords__newresword
    standard: ["ALL", "ALLOCATE", "ALLOW", "ALTERAND", "ANY", "AS", "ARRAY", "ARRAY_EXISTS", "ASENSITIVE", "ASSOCIATE", "ASUTIME", "AT", "AUDIT", "AUX", "AUXILIARY", "BEFORE", "BEGIN", "BETWEEN", "BUFFERPOOL", "BY", "CAPTURE", "CASCADED", "CAST", "CCSID", "CHARACTER", "CHECK", "CLONE", "CLUSTER", "COLLECTION", "COLLID", "COLUMN", "CONDITION", "CONNECTION", "CONSTRAINT", "CONTENT", "CONTINUE", "CREATE", "CUBE", "CURRENT", "CURRENT_DATE", "CURRENT_LC_CTYPE", "CURRENT_PATH", "CURRENT_SCHEMA", "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRVAL", "CURSOR", "DATA", "DATABASE", "DBINFO", "DECLARE", "DEFAULT", "DESCRIPTOR", "DETERMINISTIC", "DISABLE", "DISALLOW", "DISTINCT", "DO", "DOCUMENT", "DSSIZE", "DYNAMIC", "EDITPROC", "ENCODING", "ENCRYPTION", "ENDING", "END-EXEC", "ERASE", "ESCAPE", "EXCEPTION", "EXISTS", "EXIT", "EXTERNAL", "FENCED", "FIELDPROC", "FINAL", "FIRST", "FOR", "FREE", "FULL", "FUNCTION", "GENERATED", "GET", "GLOBAL", "GOTO", "GROUP", "HANDLER", "HOLD", "HOURS", "IF", "IMMEDIATE", "IN", "INCLUSIVE", "INDEX", "INHERIT", "INNER", "INOUT", "INSENSITIVE", "INTO", "IS", "ISOBID", "ITERATE", "JAR", "KEEP", "KEY", "LANGUAGE", "LAST", "LC_CTYPE", "LEAVE", "LIKE", "LOCAL", "LOCALE", "LOCATOR", "LOCATORS", "LOCK", "LOCKMAX", "LOCKSIZE", "LONG", "LOOP", "MAINTAINED", "MATERIALIZED", "MICROSECONDS", "MINUTEMINUTES", "MODIFIES", "MONTHS", "NEXT", "NEXTVAL", "NO", "NONE", "NOT", "NULL", "NULLS", "NUMPARTS", "OBID", "OF", "OLD", "ON DELETE", "ON UPDATE", "OPTIMIZATION", "OPTIMIZE", "ORDER", "ORGANIZATION", "OUT", "OUTER", "PACKAGE", "PARAMETER", "PART", "PADDED", "PARTITION", "PARTITIONED", "PARTITIONING", "PATH", "PIECESIZE", "PERIOD", "PLAN", "PRECISION", "PREVVAL", "PRIOR", "PRIQTY", "PRIVILEGES", "PROCEDURE", "PROGRAM", "PSID", "PUBLIC", "QUERY", "QUERYNO", "READS", "REFERENCES", "RESIGNAL", "RESTRICT", "RESULT", "RESULT_SET_LOCATOR", "RETURN", "RETURNS", "ROLE", "ROLLUP", "ROUND_CEILING", "ROUND_DOWN", "ROUND_FLOOR", "ROUND_HALF_DOWN", "ROUND_HALF_EVEN", "ROUND_HALF_UP", "ROUND_UP", "ROW", "ROWSET", "SCHEMA", "SCRATCHPAD", "SECONDS", "SECQTY", "SECURITY", "SEQUENCE", "SENSITIVE", "SESSION_USER", "SIMPLE", "SOME", "SOURCE", "SPECIFIC", "STANDARD", "STATIC", "STATEMENT", "STAY", "STOGROUP", "STORES", "STYLE", "SUMMARY", "SYNONYM", "SYSDATE", "SYSTEM", "SYSTIMESTAMP", "TABLE", "TABLESPACE", "THEN", "TO", "TRIGGER", "TYPE", "UNDO", "UNIQUE", "UNTIL", "USER", "VALIDPROC", "VARIABLE", "VARIANT", "VCAT", "VERSIONING", "VIEW", "VOLATILE", "VOLUMES", "WHILE", "WLM", "XMLEXISTS", "XMLCAST", "YEARS", "ZONE"],
    // https://www.ibm.com/docs/en/db2-for-zos/11?topic=utilities-db2-online
    onlineUtilies: ["BACKUP SYSTEM", "CATENFM", "CATMAINT", "CHECK DATA", "CHECK INDEX", "CHECK LOB", "COPY", "COPYTOCOPY", "DIAGNOSE", "EXEC SQL", "LISTDEF", "LOAD", "MERGECOPY", "MODIFY RECOVERY", "MODIFY STATISTICS", "OPTIONS", "QUIESCE", "REBUILD INDEX", "RECOVER", "REORG INDEX", "REORG TABLESPACE", "REPAIR", "REPORT", "RESTORE SYSTEM", "RUNSTATS", "STOSPACE", "TEMPLATE", "UNLOAD"],
    // https://www.ibm.com/docs/en/db2-for-zos/11?topic=db2-commands
    commands: ["ABEND", "ACCESS DATABASE", "ALTER BUFFERPOOL", "ALTER GROUPBUFFERPOOL", "ALTER UTILITY", "ARCHIVE LOG", "BIND PACKAGE", "BIND PLAN", "BIND QUERY", "BIND SERVICE", "BIND", "REBIND", "CANCEL THREAD", "DCLGEN", "DISPLAY ACCEL", "DISPLAY ARCHIVE", "DISPLAY BLOCKERS", "DISPLAY BUFFERPOOL", "DISPLAY DATABASE", "DISPLAY DDF", "DISPLAY FUNCTION SPECIFIC", "DISPLAY GROUP", "DISPLAY GROUPBUFFERPOOL", "DISPLAY LOCATION", "DISPLAY LOG", "DISPLAY PROCEDURE", "DISPLAY PROFILE", "DISPLAY RLIMIT", "DISPLAY RESTSVC", "DISPLAY THREAD", "DISPLAY TRACE", "DISPLAY UTILITY", "DSN", "DSNH", "FREE PACKAGE", "FREE PLAN", "FREE QUERY", "FREE SERVICE", "MODIFY admtproc,APPL=SHUTDOWN", "MODIFY admtproc,APPL=TRACE", "MODIFY DDF", "MODIFY irlmproc,ABEND", "MODIFY irlmproc,DIAG", "MODIFY irlmproc,PURGE", "MODIFY irlmproc,SET", "MODIFY irlmproc,STATUS", "MODIFY TRACE", "REBIND PACKAGE", "REBIND PLAN", "REBIND TRIGGER PACKAGE", "RECOVER BSDS", "RECOVER INDOUBT", "RECOVER POSTPONED", "REFRESH DB2,EARLY", "RESET GENERICLU", "RESET INDOUBT", "RUN", "SET ARCHIVE", "SET LOG", "SET SYSPARM", "SPUFI", "START ACCEL", "START admtproc", "START CDDS", "START DATABASE", "START DB2", "START DDF", "START FUNCTION SPECIFIC", "START irlmproc", "START PROCEDURE", "START PROFILE", "START RLIMIT", "START RESTSVC", "START TRACE", "STOP ACCEL", "STOP admtproc", "STOP CDDS", "STOP DATABASE", "STOP DB2", "STOP DDF", "STOP FUNCTION SPECIFIC", "STOP irlmproc", "STOP PROCEDURE", "STOP PROFILE", "STOP RLIMIT", "STOP RESTSVC", "STOP TRACE", "TERM UTILITY", "TRACE CT"]
  }, G = [
    "ALLOCATE CURSOR",
    "ALTER DATABASE",
    "ALTER FUNCTION",
    "ALTER INDEX",
    "ALTER MASK",
    "ALTER PERMISSION",
    "ALTER PROCEDURE",
    "ALTER SEQUENCE",
    "ALTER STOGROUP",
    "ALTER TABLE",
    "ALTER TABLESPACE",
    "ALTER TRIGGER",
    "ALTER TRUSTED CONTEXT",
    "ALTER VIEW",
    "ASSOCIATE LOCATORS",
    "BEGIN DECLARE SECTION",
    "CALL",
    "CLOSE",
    "COMMENT",
    "COMMIT",
    "CONNECT",
    "CREATE ALIAS",
    "CREATE AUXILIARY TABLE",
    "CREATE DATABASE",
    "CREATE FUNCTION",
    "CREATE GLOBAL TEMPORARY TABLE",
    "CREATE INDEX",
    "CREATE LOB TABLESPACE",
    "CREATE MASK",
    "CREATE PERMISSION",
    "CREATE PROCEDURE",
    "CREATE ROLE",
    "CREATE SEQUENCE",
    "CREATE STOGROUP",
    "CREATE SYNONYM",
    "CREATE TABLE",
    "CREATE TABLESPACE",
    "CREATE TRIGGER",
    "CREATE TRUSTED CONTEXT",
    "CREATE TYPE",
    "CREATE VARIABLE",
    "CREATE VIEW",
    "DECLARE CURSOR",
    "DECLARE GLOBAL TEMPORARY TABLE",
    "DECLARE STATEMENT",
    "DECLARE TABLE",
    "DECLARE VARIABLE",
    "DELETE",
    "DELETE FROM",
    "DESCRIBE CURSOR",
    "DESCRIBE INPUT",
    "DESCRIBE OUTPUT",
    "DESCRIBE PROCEDURE",
    "DESCRIBE TABLE",
    "DROP",
    "END DECLARE SECTION",
    "EXCHANGE",
    "EXECUTE",
    "EXECUTE IMMEDIATE",
    "EXPLAIN",
    "FETCH",
    "FREE LOCATOR",
    "GET DIAGNOSTICS",
    "GRANT",
    "HOLD LOCATOR",
    "INCLUDE",
    "INSERT",
    "LABEL",
    "LOCK TABLE",
    "MERGE",
    "OPEN",
    "PREPARE",
    "REFRESH",
    "RELEASE",
    "RELEASE SAVEPOINT",
    "RENAME",
    "REVOKE",
    "ROLLBACK",
    "SAVEPOINT",
    "SELECT",
    "SELECT INTO",
    "SET CONNECTION",
    "SET",
    "SET CURRENT ACCELERATOR",
    "SET CURRENT APPLICATION COMPATIBILITY",
    "SET CURRENT APPLICATION ENCODING SCHEME",
    "SET CURRENT DEBUG MODE",
    "SET CURRENT DECFLOAT ROUNDING MODE",
    "SET CURRENT DEGREE",
    "SET CURRENT EXPLAIN MODE",
    "SET CURRENT GET_ACCEL_ARCHIVE",
    "SET CURRENT LOCALE LC_CTYPE",
    "SET CURRENT MAINTAINED TABLE TYPES FOR OPTIMIZATION",
    "SET CURRENT OPTIMIZATION HINT",
    "SET CURRENT PACKAGE PATH",
    "SET CURRENT PACKAGESET",
    "SET CURRENT PRECISION",
    "SET CURRENT QUERY ACCELERATION",
    "SET CURRENT QUERY ACCELERATION WAITFORDATA",
    "SET CURRENT REFRESH AGE",
    "SET CURRENT ROUTINE VERSION",
    "SET CURRENT RULES",
    "SET CURRENT SQLID",
    "SET CURRENT TEMPORAL BUSINESS_TIME",
    "SET CURRENT TEMPORAL SYSTEM_TIME",
    "SET ENCRYPTION PASSWORD",
    "SET PATH",
    "SET SCHEMA",
    "SET SESSION TIME ZONE",
    "SIGNAL",
    "TRUNCATE",
    "UPDATE",
    "VALUES",
    "VALUES INTO",
    "WHENEVER",
    // other
    "ADD",
    "ALTER COLUMN",
    // verify
    "AFTER",
    "DROP TABLE",
    // verify
    "FETCH FIRST",
    "FROM",
    "GROUP BY",
    "GO",
    "HAVING",
    "INSERT INTO",
    "LIMIT",
    "OFFSET",
    "ORDER BY",
    "SELECT",
    "SET CURRENT SCHEMA",
    "WHERE",
    "WITH"
  ], H = ["INTERSECT", "INTERSECT ALL", "INTERSECT DISTINCT", "UNION", "UNION ALL", "UNION DISTINCT", "EXCEPT", "EXCEPT ALL", "EXCEPT DISTINCT"], re = ["JOIN", "INNER JOIN", "LEFT JOIN", "LEFT OUTER JOIN", "RIGHT JOIN", "RIGHT OUTER JOIN", "FULL JOIN", "FULL OUTER JOIN", "CROSS JOIN", "NATURAL JOIN"], B = ["WHEN", "ELSE", "ELSEIF"], Y = /* @__PURE__ */ function(E) {
    D(P, E);
    var m = x(P);
    function P() {
      return d(this, P), m.apply(this, arguments);
    }
    return L(P, [{
      key: "tokenizer",
      value: function() {
        return new n.default({
          reservedCommands: G,
          reservedBinaryCommands: H,
          reservedJoins: re,
          reservedDependentClauses: B,
          reservedKeywords: (0, a.dedupe)([].concat(o(Object.values(ae).flat()), o(Object.values(U).flat()))),
          stringTypes: [{
            quote: "''",
            prefixes: ["X", "G", "N", "GX", "UX", "U&"]
          }],
          identTypes: ['""'],
          positionalParams: !0,
          namedParamTypes: [":"],
          paramChars: {
            first: "@#$",
            rest: "@#$"
          },
          operators: P.operators
        });
      }
    }]), P;
  }(i.default);
  t.default = Y, F(Y, "operators", ["**", "¬=", "¬>", "¬<", "!>", "!<", "||"]), e.exports = t.default;
})(Yl, Yl.exports);
var w_ = Yl.exports, Fl = { exports: {} };
(function(e, t) {
  function r(E) {
    "@babel/helpers - typeof";
    return r = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(m) {
      return typeof m;
    } : function(m) {
      return m && typeof Symbol == "function" && m.constructor === Symbol && m !== Symbol.prototype ? "symbol" : typeof m;
    }, r(E);
  }
  Object.defineProperty(t, "__esModule", {
    value: !0
  }), t.default = void 0;
  var i = s(ur), n = s(cr), a = Xe;
  function s(E) {
    return E && E.__esModule ? E : { default: E };
  }
  function o(E) {
    return p(E) || f(E) || c(E) || l();
  }
  function l() {
    throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
  }
  function c(E, m) {
    if (E) {
      if (typeof E == "string")
        return O(E, m);
      var P = Object.prototype.toString.call(E).slice(8, -1);
      if (P === "Object" && E.constructor && (P = E.constructor.name), P === "Map" || P === "Set")
        return Array.from(E);
      if (P === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(P))
        return O(E, m);
    }
  }
  function f(E) {
    if (typeof Symbol < "u" && E[Symbol.iterator] != null || E["@@iterator"] != null)
      return Array.from(E);
  }
  function p(E) {
    if (Array.isArray(E))
      return O(E);
  }
  function O(E, m) {
    (m == null || m > E.length) && (m = E.length);
    for (var P = 0, R = new Array(m); P < m; P++)
      R[P] = E[P];
    return R;
  }
  function d(E, m) {
    if (!(E instanceof m))
      throw new TypeError("Cannot call a class as a function");
  }
  function g(E, m) {
    for (var P = 0; P < m.length; P++) {
      var R = m[P];
      R.enumerable = R.enumerable || !1, R.configurable = !0, "value" in R && (R.writable = !0), Object.defineProperty(E, R.key, R);
    }
  }
  function L(E, m, P) {
    return m && g(E.prototype, m), P && g(E, P), Object.defineProperty(E, "prototype", { writable: !1 }), E;
  }
  function D(E, m) {
    if (typeof m != "function" && m !== null)
      throw new TypeError("Super expression must either be null or a function");
    E.prototype = Object.create(m && m.prototype, { constructor: { value: E, writable: !0, configurable: !0 } }), Object.defineProperty(E, "prototype", { writable: !1 }), m && W(E, m);
  }
  function W(E, m) {
    return W = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(R, A) {
      return R.__proto__ = A, R;
    }, W(E, m);
  }
  function x(E) {
    var m = $();
    return function() {
      var R = z(E), A;
      if (m) {
        var y = z(this).constructor;
        A = Reflect.construct(R, arguments, y);
      } else
        A = R.apply(this, arguments);
      return V(this, A);
    };
  }
  function V(E, m) {
    if (m && (r(m) === "object" || typeof m == "function"))
      return m;
    if (m !== void 0)
      throw new TypeError("Derived constructors may only return object or undefined");
    return _(E);
  }
  function _(E) {
    if (E === void 0)
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return E;
  }
  function $() {
    if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
      return !1;
    if (typeof Proxy == "function")
      return !0;
    try {
      return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      })), !0;
    } catch {
      return !1;
    }
  }
  function z(E) {
    return z = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(P) {
      return P.__proto__ || Object.getPrototypeOf(P);
    }, z(E);
  }
  function F(E, m, P) {
    return m in E ? Object.defineProperty(E, m, { value: P, enumerable: !0, configurable: !0, writable: !0 }) : E[m] = P, E;
  }
  var ae = {
    math: [
      "ABS",
      "ACOS",
      "ASIN",
      "ATAN",
      "BIN",
      "BROUND",
      "CBRT",
      "CEIL",
      "CEILING",
      "CONV",
      "COS",
      "DEGREES",
      // 'E',
      "EXP",
      "FACTORIAL",
      "FLOOR",
      "GREATEST",
      "HEX",
      "LEAST",
      "LN",
      "LOG",
      "LOG10",
      "LOG2",
      "NEGATIVE",
      "PI",
      "PMOD",
      "POSITIVE",
      "POW",
      "POWER",
      "RADIANS",
      "RAND",
      "ROUND",
      "SHIFTLEFT",
      "SHIFTRIGHT",
      "SHIFTRIGHTUNSIGNED",
      "SIGN",
      "SIN",
      "SQRT",
      "TAN",
      "UNHEX",
      "WIDTH_BUCKET"
    ],
    array: ["ARRAY_CONTAINS", "MAP_KEYS", "MAP_VALUES", "SIZE", "SORT_ARRAY"],
    conversion: ["BINARY", "CAST"],
    date: ["ADD_MONTHS", "DATE", "DATE_ADD", "DATE_FORMAT", "DATE_SUB", "DATEDIFF", "DAY", "DAYNAME", "DAYOFMONTH", "DAYOFYEAR", "EXTRACT", "FROM_UNIXTIME", "FROM_UTC_TIMESTAMP", "HOUR", "LAST_DAY", "MINUTE", "MONTH", "MONTHS_BETWEEN", "NEXT_DAY", "QUARTER", "SECOND", "TIMESTAMP", "TO_DATE", "TO_UTC_TIMESTAMP", "TRUNC", "UNIX_TIMESTAMP", "WEEKOFYEAR", "YEAR"],
    conditional: ["ASSERT_TRUE", "COALESCE", "IF", "ISNOTNULL", "ISNULL", "NULLIF", "NVL"],
    string: ["ASCII", "BASE64", "CHARACTER_LENGTH", "CHR", "CONCAT", "CONCAT_WS", "CONTEXT_NGRAMS", "DECODE", "ELT", "ENCODE", "FIELD", "FIND_IN_SET", "FORMAT_NUMBER", "GET_JSON_OBJECT", "IN_FILE", "INITCAP", "INSTR", "LCASE", "LENGTH", "LEVENSHTEIN", "LOCATE", "LOWER", "LPAD", "LTRIM", "NGRAMS", "OCTET_LENGTH", "PARSE_URL", "PRINTF", "QUOTE", "REGEXP_EXTRACT", "REGEXP_REPLACE", "REPEAT", "REVERSE", "RPAD", "RTRIM", "SENTENCES", "SOUNDEX", "SPACE", "SPLIT", "STR_TO_MAP", "SUBSTR", "SUBSTRING", "TRANSLATE", "TRIM", "UCASE", "UNBASE64", "UPPER"],
    masking: ["MASK", "MASK_FIRST_N", "MASK_HASH", "MASK_LAST_N", "MASK_SHOW_FIRST_N", "MASK_SHOW_LAST_N"],
    misc: ["AES_DECRYPT", "AES_ENCRYPT", "CRC32", "CURRENT_DATABASE", "CURRENT_USER", "HASH", "JAVA_METHOD", "LOGGED_IN_USER", "MD5", "REFLECT", "SHA", "SHA1", "SHA2", "SURROGATE_KEY", "VERSION"],
    aggregate: ["AVG", "COLLECT_LIST", "COLLECT_SET", "CORR", "COUNT", "COVAR_POP", "COVAR_SAMP", "HISTOGRAM_NUMERIC", "MAX", "MIN", "NTILE", "PERCENTILE", "PERCENTILE_APPROX", "REGR_AVGX", "REGR_AVGY", "REGR_COUNT", "REGR_INTERCEPT", "REGR_R2", "REGR_SLOPE", "REGR_SXX", "REGR_SXY", "REGR_SYY", "STDDEV_POP", "STDDEV_SAMP", "SUM", "VAR_POP", "VAR_SAMP", "VARIANCE"],
    table: ["EXPLODE", "INLINE", "JSON_TUPLE", "PARSE_URL_TUPLE", "POSEXPLODE", "STACK"]
  }, U = {
    // Non-reserved keywords have proscribed meanings in. HiveQL, but can still be used as table or column names
    nonReserved: [
      "ADD",
      "ADMIN",
      "AFTER",
      "ANALYZE",
      "ARCHIVE",
      "ASC",
      "BEFORE",
      "BUCKET",
      "BUCKETS",
      "CASCADE",
      "CHANGE",
      "CLUSTER",
      "CLUSTERED",
      "CLUSTERSTATUS",
      "COLLECTION",
      "COLUMNS",
      "COMMENT",
      "COMPACT",
      "COMPACTIONS",
      "COMPUTE",
      "CONCATENATE",
      "CONTINUE",
      "DATA",
      "DATABASES",
      "DATETIME",
      "DAY",
      "DBPROPERTIES",
      "DEFERRED",
      "DEFINED",
      "DELIMITED",
      "DEPENDENCY",
      "DESC",
      "DIRECTORIES",
      "DIRECTORY",
      "DISABLE",
      "DISTRIBUTE",
      "ELEM_TYPE",
      "ENABLE",
      "ESCAPED",
      "EXCLUSIVE",
      "EXPLAIN",
      "EXPORT",
      "FIELDS",
      "FILE",
      "FILEFORMAT",
      "FIRST",
      "FORMAT",
      "FORMATTED",
      "FUNCTIONS",
      "HOLD_DDLTIME",
      "HOUR",
      "IDXPROPERTIES",
      "IGNORE",
      "INDEX",
      "INDEXES",
      "INPATH",
      "INPUTDRIVER",
      "INPUTFORMAT",
      "ITEMS",
      "JAR",
      "KEYS",
      "KEY_TYPE",
      "LIMIT",
      "LINES",
      "LOAD",
      "LOCATION",
      "LOCK",
      "LOCKS",
      "LOGICAL",
      "LONG",
      "MAPJOIN",
      "MATERIALIZED",
      "METADATA",
      "MINUS",
      "MINUTE",
      "MONTH",
      "MSCK",
      "NOSCAN",
      "NO_DROP",
      "OFFLINE",
      "OPTION",
      "OUTPUTDRIVER",
      "OUTPUTFORMAT",
      "OVERWRITE",
      "OWNER",
      "PARTITIONED",
      "PARTITIONS",
      "PLUS",
      "PRETTY",
      "PRINCIPALS",
      "PROTECTION",
      "PURGE",
      "READ",
      "READONLY",
      "REBUILD",
      "RECORDREADER",
      "RECORDWRITER",
      "RELOAD",
      "RENAME",
      "REPAIR",
      "REPLACE",
      "REPLICATION",
      "RESTRICT",
      "REWRITE",
      "ROLE",
      "ROLES",
      "SCHEMA",
      "SCHEMAS",
      "SECOND",
      "SEMI",
      "SERDE",
      "SERDEPROPERTIES",
      "SERVER",
      "SETS",
      "SHARED",
      "SHOW",
      "SHOW_DATABASE",
      "SKEWED",
      "SORT",
      "SORTED",
      "SSL",
      "STATISTICS",
      "STORED",
      "STREAMTABLE",
      "STRING",
      "STRUCT",
      "TABLES",
      "TBLPROPERTIES",
      "TEMPORARY",
      "TERMINATED",
      "TINYINT",
      "TOUCH",
      "TRANSACTIONS",
      "UNARCHIVE",
      "UNDO",
      "UNIONTYPE",
      "UNLOCK",
      "UNSET",
      "UNSIGNED",
      "URI",
      // 'USE',
      "UTC",
      "UTCTIMESTAMP",
      "VALUE_TYPE",
      "VIEW",
      "WHILE",
      "YEAR",
      "AUTOCOMMIT",
      "ISOLATION",
      "LEVEL",
      "OFFSET",
      "SNAPSHOT",
      "TRANSACTION",
      "WORK",
      "WRITE",
      "ABORT",
      "KEY",
      "LAST",
      "NORELY",
      "NOVALIDATE",
      "NULLS",
      "RELY",
      "VALIDATE",
      "DETAIL",
      "DOW",
      "EXPRESSION",
      "OPERATOR",
      "QUARTER",
      "SUMMARY",
      "VECTORIZATION",
      "WEEK",
      "YEARS",
      "MONTHS",
      "WEEKS",
      "DAYS",
      "HOURS",
      "MINUTES",
      "SECONDS",
      "TIMESTAMPTZ",
      "ZONE"
    ],
    reserved: [
      // reserved
      "ALL",
      // 'ALTER',
      // 'AND',
      "ARRAY",
      "AS",
      "AUTHORIZATION",
      "BETWEEN",
      "BIGINT",
      "BINARY",
      "BOOLEAN",
      "BOTH",
      "BY",
      // 'CASE',
      "CAST",
      "CHAR",
      "COLUMN",
      "CONF",
      // 'CREATE',
      "CROSS",
      "CUBE",
      "CURRENT",
      "CURRENT_DATE",
      "CURRENT_TIMESTAMP",
      "CURSOR",
      "DATABASE",
      "DATE",
      "DECIMAL",
      "DELETE",
      // 'DESCRIBE',
      "DISTINCT",
      "DOUBLE",
      // 'DROP',
      // 'ELSE',
      // 'END',
      "EXCHANGE",
      "EXISTS",
      "EXTENDED",
      "EXTERNAL",
      "FALSE",
      // 'FETCH',
      "FLOAT",
      "FOLLOWING",
      "FOR",
      // 'FROM',
      "FULL",
      "FUNCTION",
      "GRANT",
      // 'GROUP',
      "GROUPING",
      // 'HAVING',
      "IF",
      "IMPORT",
      "IN",
      "INNER",
      // 'INSERT',
      "INT",
      // 'INTERSECT',
      "INTERVAL",
      "INTO",
      "IS",
      // 'JOIN',
      "LATERAL",
      "LEFT",
      "LESS",
      "LIKE",
      "LOCAL",
      "MACRO",
      "MAP",
      "MORE",
      "NONE",
      "NOT",
      "NULL",
      "OF",
      // 'ON',
      // 'OR',
      "ORDER",
      "OUT",
      "OUTER",
      "OVER",
      "PARTIALSCAN",
      "PARTITION",
      "PERCENT",
      "PRECEDING",
      "PRESERVE",
      "PROCEDURE",
      "RANGE",
      "READS",
      "REDUCE",
      "REVOKE",
      "RIGHT",
      "ROLLUP",
      "ROW",
      "ROWS",
      // 'SELECT',
      "SET",
      "SMALLINT",
      "TABLE",
      "TABLESAMPLE",
      "THEN",
      "TIMESTAMP",
      "TO",
      "TRANSFORM",
      "TRIGGER",
      "TRUE",
      // 'TRUNCATE',
      "UNBOUNDED",
      // 'UNION',
      "UNIQUEJOIN",
      // 'UPDATE',
      "USER",
      "UTC_TMESTAMP",
      // 'VALUES',
      "VARCHAR",
      // 'WHEN',
      // 'WHERE',
      "WINDOW",
      // 'WITH',
      "COMMIT",
      "ONLY",
      "REGEXP",
      "RLIKE",
      "ROLLBACK",
      "START",
      "CACHE",
      "CONSTRAINT",
      "FOREIGN",
      "PRIMARY",
      "REFERENCES",
      "DAYOFWEEK",
      "EXTRACT",
      "FLOOR",
      "INTEGER",
      "PRECISION",
      "VIEWS",
      "TIME",
      "NUMERIC",
      "SYNC"
    ],
    fileTypes: ["TEXTFILE", "SEQUENCEFILE", "ORC", "CSV", "TSV", "PARQUET", "AVRO", "RCFILE", "JSONFILE", "INPUTFORMAT", "OUTPUTFORMAT"]
  }, G = [
    // commands
    "ALTER",
    "ALTER COLUMN",
    // added
    "ALTER TABLE",
    // added
    "CREATE",
    "CREATE TABLE",
    // added
    "USE",
    "DESCRIBE",
    "DROP",
    "DROP TABLE",
    // added
    "FETCH",
    "FROM",
    "GROUP BY",
    "HAVING",
    "INSERT",
    "INSERT INTO",
    // added
    "LIMIT",
    "OFFSET",
    "ORDER BY",
    "SELECT",
    "SET",
    "SET SCHEMA",
    // added
    "SHOW",
    "SORT BY",
    "TRUNCATE",
    "UPDATE",
    "VALUES",
    "WHERE",
    "WITH",
    "WINDOW",
    "PARTITION BY",
    // newline keywords
    "STORED AS",
    "STORED BY",
    "ROW FORMAT"
  ], H = ["INTERSECT", "INTERSECT ALL", "INTERSECT DISTINCT", "UNION", "UNION ALL", "UNION DISTINCT"], re = ["JOIN", "INNER JOIN", "LEFT JOIN", "LEFT OUTER JOIN", "RIGHT JOIN", "RIGHT OUTER JOIN", "FULL JOIN", "FULL OUTER JOIN", "CROSS JOIN"], B = ["WHEN", "ELSE"], Y = /* @__PURE__ */ function(E) {
    D(P, E);
    var m = x(P);
    function P() {
      return d(this, P), m.apply(this, arguments);
    }
    return L(P, [{
      key: "tokenizer",
      value: function() {
        return new n.default({
          reservedCommands: G,
          reservedBinaryCommands: H,
          reservedJoins: re,
          reservedDependentClauses: B,
          reservedKeywords: (0, a.dedupe)([].concat(o(Object.values(ae).flat()), o(Object.values(U).flat()))),
          openParens: ["(", "["],
          closeParens: [")", "]"],
          stringTypes: ['""', "''"],
          identTypes: ["``"],
          variableTypes: [{
            quote: "{}",
            prefixes: ["$"],
            requirePrefix: !0
          }],
          operators: P.operators
        });
      }
    }]), P;
  }(i.default);
  t.default = Y, F(Y, "operators", ["<=>", "==", "||"]), e.exports = t.default;
})(Fl, Fl.exports);
var M_ = Fl.exports, Wl = { exports: {} };
(function(e, t) {
  function r(B) {
    "@babel/helpers - typeof";
    return r = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(Y) {
      return typeof Y;
    } : function(Y) {
      return Y && typeof Symbol == "function" && Y.constructor === Symbol && Y !== Symbol.prototype ? "symbol" : typeof Y;
    }, r(B);
  }
  Object.defineProperty(t, "__esModule", {
    value: !0
  }), t.default = void 0;
  var i = o(ur), n = o(cr), a = it, s = Xe;
  function o(B) {
    return B && B.__esModule ? B : { default: B };
  }
  function l(B, Y) {
    var E = Object.keys(B);
    if (Object.getOwnPropertySymbols) {
      var m = Object.getOwnPropertySymbols(B);
      Y && (m = m.filter(function(P) {
        return Object.getOwnPropertyDescriptor(B, P).enumerable;
      })), E.push.apply(E, m);
    }
    return E;
  }
  function c(B) {
    for (var Y = 1; Y < arguments.length; Y++) {
      var E = arguments[Y] != null ? arguments[Y] : {};
      Y % 2 ? l(Object(E), !0).forEach(function(m) {
        _(B, m, E[m]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(B, Object.getOwnPropertyDescriptors(E)) : l(Object(E)).forEach(function(m) {
        Object.defineProperty(B, m, Object.getOwnPropertyDescriptor(E, m));
      });
    }
    return B;
  }
  function f(B, Y) {
    if (!(B instanceof Y))
      throw new TypeError("Cannot call a class as a function");
  }
  function p(B, Y) {
    for (var E = 0; E < Y.length; E++) {
      var m = Y[E];
      m.enumerable = m.enumerable || !1, m.configurable = !0, "value" in m && (m.writable = !0), Object.defineProperty(B, m.key, m);
    }
  }
  function O(B, Y, E) {
    return Y && p(B.prototype, Y), E && p(B, E), Object.defineProperty(B, "prototype", { writable: !1 }), B;
  }
  function d(B, Y) {
    if (typeof Y != "function" && Y !== null)
      throw new TypeError("Super expression must either be null or a function");
    B.prototype = Object.create(Y && Y.prototype, { constructor: { value: B, writable: !0, configurable: !0 } }), Object.defineProperty(B, "prototype", { writable: !1 }), Y && g(B, Y);
  }
  function g(B, Y) {
    return g = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(m, P) {
      return m.__proto__ = P, m;
    }, g(B, Y);
  }
  function L(B) {
    var Y = x();
    return function() {
      var m = V(B), P;
      if (Y) {
        var R = V(this).constructor;
        P = Reflect.construct(m, arguments, R);
      } else
        P = m.apply(this, arguments);
      return D(this, P);
    };
  }
  function D(B, Y) {
    if (Y && (r(Y) === "object" || typeof Y == "function"))
      return Y;
    if (Y !== void 0)
      throw new TypeError("Derived constructors may only return object or undefined");
    return W(B);
  }
  function W(B) {
    if (B === void 0)
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return B;
  }
  function x() {
    if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
      return !1;
    if (typeof Proxy == "function")
      return !0;
    try {
      return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      })), !0;
    } catch {
      return !1;
    }
  }
  function V(B) {
    return V = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(E) {
      return E.__proto__ || Object.getPrototypeOf(E);
    }, V(B);
  }
  function _(B, Y, E) {
    return Y in B ? Object.defineProperty(B, Y, { value: E, enumerable: !0, configurable: !0, writable: !0 }) : B[Y] = E, B;
  }
  var $ = ["ADDDATE", "ADD_MONTHS", "BIT_AND", "BIT_OR", "BIT_XOR", "CAST", "COUNT", "CUME_DIST", "CURDATE", "CURTIME", "DATE_ADD", "DATE_SUB", "DATE_FORMAT", "DECODE", "DENSE_RANK", "EXTRACT", "FIRST_VALUE", "GROUP_CONCAT", "JSON_ARRAYAGG", "JSON_OBJECTAGG", "LAG", "LEAD", "MAX", "MEDIAN", "MID", "MIN", "NOW", "NTH_VALUE", "NTILE", "POSITION", "PERCENT_RANK", "PERCENTILE_CONT", "PERCENTILE_DISC", "RANK", "ROW_NUMBER", "SESSION_USER", "STD", "STDDEV", "STDDEV_POP", "STDDEV_SAMP", "SUBDATE", "SUBSTR", "SUBSTRING", "SUM", "SYSTEM_USER", "TRIM", "TRIM_ORACLE", "VARIANCE", "VAR_POP", "VAR_SAMP", "ABS", "ACOS", "ADDTIME", "AES_DECRYPT", "AES_ENCRYPT", "ASIN", "ATAN", "ATAN2", "BENCHMARK", "BIN", "BINLOG_GTID_POS", "BIT_COUNT", "BIT_LENGTH", "CEIL", "CEILING", "CHARACTER_LENGTH", "CHAR_LENGTH", "CHR", "COERCIBILITY", "COLUMN_CHECK", "COLUMN_EXISTS", "COLUMN_LIST", "COLUMN_JSON", "COMPRESS", "CONCAT", "CONCAT_OPERATOR_ORACLE", "CONCAT_WS", "CONNECTION_ID", "CONV", "CONVERT_TZ", "COS", "COT", "CRC32", "DATEDIFF", "DAYNAME", "DAYOFMONTH", "DAYOFWEEK", "DAYOFYEAR", "DEGREES", "DECODE_HISTOGRAM", "DECODE_ORACLE", "DES_DECRYPT", "DES_ENCRYPT", "ELT", "ENCODE", "ENCRYPT", "EXP", "EXPORT_SET", "EXTRACTVALUE", "FIELD", "FIND_IN_SET", "FLOOR", "FORMAT", "FOUND_ROWS", "FROM_BASE64", "FROM_DAYS", "FROM_UNIXTIME", "GET_LOCK", "GREATEST", "HEX", "IFNULL", "INSTR", "ISNULL", "IS_FREE_LOCK", "IS_USED_LOCK", "JSON_ARRAY", "JSON_ARRAY_APPEND", "JSON_ARRAY_INSERT", "JSON_COMPACT", "JSON_CONTAINS", "JSON_CONTAINS_PATH", "JSON_DEPTH", "JSON_DETAILED", "JSON_EXISTS", "JSON_EXTRACT", "JSON_INSERT", "JSON_KEYS", "JSON_LENGTH", "JSON_LOOSE", "JSON_MERGE", "JSON_MERGE_PATCH", "JSON_MERGE_PRESERVE", "JSON_QUERY", "JSON_QUOTE", "JSON_OBJECT", "JSON_REMOVE", "JSON_REPLACE", "JSON_SET", "JSON_SEARCH", "JSON_TYPE", "JSON_UNQUOTE", "JSON_VALID", "JSON_VALUE", "LAST_DAY", "LAST_INSERT_ID", "LCASE", "LEAST", "LENGTH", "LENGTHB", "LN", "LOAD_FILE", "LOCATE", "LOG", "LOG10", "LOG2", "LOWER", "LPAD", "LPAD_ORACLE", "LTRIM", "LTRIM_ORACLE", "MAKEDATE", "MAKETIME", "MAKE_SET", "MASTER_GTID_WAIT", "MASTER_POS_WAIT", "MD5", "MONTHNAME", "NAME_CONST", "NVL", "NVL2", "NULLIF", "OCT", "OCTET_LENGTH", "ORD", "PERIOD_ADD", "PERIOD_DIFF", "PI", "POW", "POWER", "QUOTE", "REGEXP_INSTR", "REGEXP_REPLACE", "REGEXP_SUBSTR", "RADIANS", "RAND", "RELEASE_ALL_LOCKS", "RELEASE_LOCK", "REPLACE_ORACLE", "REVERSE", "ROUND", "RPAD", "RPAD_ORACLE", "RTRIM", "RTRIM_ORACLE", "SEC_TO_TIME", "SHA", "SHA1", "SHA2", "SIGN", "SIN", "SLEEP", "SOUNDEX", "SPACE", "SQRT", "STRCMP", "STR_TO_DATE", "SUBSTR_ORACLE", "SUBSTRING_INDEX", "SUBTIME", "SYS_GUID", "TAN", "TIMEDIFF", "TIME_FORMAT", "TIME_TO_SEC", "TO_BASE64", "TO_CHAR", "TO_DAYS", "TO_SECONDS", "UCASE", "UNCOMPRESS", "UNCOMPRESSED_LENGTH", "UNHEX", "UNIX_TIMESTAMP", "UPDATEXML", "UPPER", "UUID", "UUID_SHORT", "VERSION", "WEEKDAY", "WEEKOFYEAR", "WSREP_LAST_WRITTEN_GTID", "WSREP_LAST_SEEN_GTID", "WSREP_SYNC_WAIT_UPTO_GTID", "YEARWEEK"], z = [
    "ACCESSIBLE",
    "ACCOUNT",
    "ACTION",
    "ADMIN",
    "AFTER",
    "AGAINST",
    "AGGREGATE",
    "ALL",
    "ALGORITHM",
    "ALTER",
    "ALWAYS",
    "ANY",
    "AS",
    "ASC",
    "ASCII",
    "ASENSITIVE",
    "AT",
    "ATOMIC",
    "AUTHORS",
    "AUTO_INCREMENT",
    "AUTOEXTEND_SIZE",
    "AUTO",
    "AVG",
    "AVG_ROW_LENGTH",
    "BACKUP",
    "BEFORE",
    "BETWEEN",
    "BIGINT",
    "BINARY",
    "BIT",
    "BLOB",
    "BLOCK",
    "BODY",
    "BOOL",
    "BOOLEAN",
    "BOTH",
    "BTREE",
    "BY",
    "BYTE",
    "CACHE",
    "CASCADE",
    "CASCADED",
    "CATALOG_NAME",
    "CHAIN",
    "CHANGE",
    "CHANGED",
    "CHAR",
    "CHARACTER",
    "CHARACTER SET",
    "CHARSET",
    "CHECK",
    "CHECKPOINT",
    "CHECKSUM",
    "CIPHER",
    "CLASS_ORIGIN",
    "CLIENT",
    "CLOB",
    "CLOSE",
    "COALESCE",
    "CODE",
    "COLLATE",
    "COLLATION",
    "COLUMN",
    "COLUMN_NAME",
    "COLUMNS",
    "COLUMN_ADD",
    "COLUMN_CREATE",
    "COLUMN_DELETE",
    "COLUMN_GET",
    "COMMENT",
    "COMMITTED",
    "COMPACT",
    "COMPLETION",
    "COMPRESSED",
    "CONCURRENT",
    "CONDITION",
    "CONNECTION",
    "CONSISTENT",
    "CONSTRAINT",
    "CONSTRAINT_CATALOG",
    "CONSTRAINT_NAME",
    "CONSTRAINT_SCHEMA",
    "CONTAINS",
    "CONTEXT",
    "CONTINUE",
    "CONTRIBUTORS",
    "CONVERT",
    "CPU",
    "CREATE",
    "CROSS",
    "CUBE",
    "CURRENT",
    "CURRENT_DATE",
    "CURRENT_POS",
    "CURRENT_ROLE",
    "CURRENT_TIME",
    "CURRENT_TIMESTAMP",
    "CURRENT_USER",
    "CURSOR",
    "CURSOR_NAME",
    "CYCLE",
    "DATA",
    "DATABASE",
    "DATABASES",
    "DATAFILE",
    "DATE",
    "DATETIME",
    "DAY",
    "DAY_HOUR",
    "DAY_MICROSECOND",
    "DAY_MINUTE",
    "DAY_SECOND",
    "DEALLOCATE",
    "DEC",
    "DECIMAL",
    "DECLARE",
    "DEFAULT",
    "DEFINER",
    "DELAYED",
    "DELAY_KEY_WRITE",
    "DELETE_DOMAIN_ID",
    "DES_KEY_FILE",
    "DESC",
    "DETERMINISTIC",
    "DIAGNOSTICS",
    "DIRECTORY",
    "DISABLE",
    "DISCARD",
    "DISK",
    "DISTINCT",
    "DISTINCTROW",
    "DIV",
    "DOUBLE",
    "DO_DOMAIN_IDS",
    "DROP",
    "DUAL",
    "DUMPFILE",
    "DUPLICATE",
    "DYNAMIC",
    "EACH",
    "EMPTY",
    "ENABLE",
    "ENCLOSED",
    "ENDS",
    "ENGINE",
    "ENGINES",
    "ENUM",
    "ERROR",
    "ERRORS",
    "ESCAPE",
    "ESCAPED",
    "EVENT",
    "EVENTS",
    "EVERY",
    "EXAMINED",
    "EXCHANGE",
    "EXCLUDE",
    "EXCEPTION",
    "EXISTS",
    "EXIT",
    "EXPANSION",
    "EXPIRE",
    "EXPORT",
    "EXTENDED",
    "EXTENT_SIZE",
    "FALSE",
    "FAST",
    "FAULTS",
    "FEDERATED",
    "FETCH",
    "FIELDS",
    "FILE",
    "FIRST",
    "FIXED",
    "FLOAT",
    "FLOAT4",
    "FLOAT8",
    "FOLLOWING",
    "FOLLOWS",
    "FOR",
    "FORCE",
    "FOREIGN",
    "FOUND",
    "FULL",
    "FULLTEXT",
    "FUNCTION",
    "GENERAL",
    "GENERATED",
    "GET_FORMAT",
    "GET",
    "GLOBAL",
    "GOTO",
    "GRANTS",
    "GROUP",
    "HARD",
    "HASH",
    "HIGH_PRIORITY",
    "HISTORY",
    "HOST",
    "HOSTS",
    "HOUR",
    "HOUR_MICROSECOND",
    "HOUR_MINUTE",
    "HOUR_SECOND",
    // 'ID',
    "IDENTIFIED",
    "IF",
    "IGNORE",
    "IGNORED",
    "IGNORE_DOMAIN_IDS",
    "IGNORE_SERVER_IDS",
    "IMMEDIATE",
    "IMPORT",
    "IN",
    "INCREMENT",
    "INDEX",
    "INDEXES",
    "INFILE",
    "INITIAL_SIZE",
    "INNER",
    "INOUT",
    "INSENSITIVE",
    "INSERT_METHOD",
    "INSTALL",
    "INT",
    "INT1",
    "INT2",
    "INT3",
    "INT4",
    "INT8",
    "INTEGER",
    "INTERVAL",
    "INVISIBLE",
    "INTO",
    "IO",
    "IO_THREAD",
    "IPC",
    "IS",
    "ISOLATION",
    "ISOPEN",
    "ISSUER",
    "ITERATE",
    "INVOKER",
    "JSON",
    "JSON_TABLE",
    "KEY",
    "KEYS",
    "KEY_BLOCK_SIZE",
    "LANGUAGE",
    "LAST",
    "LAST_VALUE",
    "LASTVAL",
    "LEADING",
    "LEAVE",
    "LEAVES",
    "LEFT",
    "LESS",
    "LEVEL",
    "LIKE",
    "LINEAR",
    "LINES",
    "LIST",
    "LOAD",
    "LOCAL",
    "LOCALTIME",
    "LOCALTIMESTAMP",
    "LOCK",
    "LOCKED",
    "LOCKS",
    "LOGFILE",
    "LOGS",
    "LONG",
    "LONGBLOB",
    "LONGTEXT",
    "LOOP",
    "LOW_PRIORITY",
    "MASTER",
    "MASTER_CONNECT_RETRY",
    "MASTER_DELAY",
    "MASTER_GTID_POS",
    "MASTER_HOST",
    "MASTER_LOG_FILE",
    "MASTER_LOG_POS",
    "MASTER_PASSWORD",
    "MASTER_PORT",
    "MASTER_SERVER_ID",
    "MASTER_SSL",
    "MASTER_SSL_CA",
    "MASTER_SSL_CAPATH",
    "MASTER_SSL_CERT",
    "MASTER_SSL_CIPHER",
    "MASTER_SSL_CRL",
    "MASTER_SSL_CRLPATH",
    "MASTER_SSL_KEY",
    "MASTER_SSL_VERIFY_SERVER_CERT",
    "MASTER_USER",
    "MASTER_USE_GTID",
    "MASTER_HEARTBEAT_PERIOD",
    "MATCH",
    "MAX_CONNECTIONS_PER_HOUR",
    "MAX_QUERIES_PER_HOUR",
    "MAX_ROWS",
    "MAX_SIZE",
    "MAX_STATEMENT_TIME",
    "MAX_UPDATES_PER_HOUR",
    "MAX_USER_CONNECTIONS",
    "MAXVALUE",
    "MEDIUM",
    "MEDIUMBLOB",
    "MEDIUMINT",
    "MEDIUMTEXT",
    "MEMORY",
    "MERGE",
    "MESSAGE_TEXT",
    "MICROSECOND",
    "MIDDLEINT",
    "MIGRATE",
    "MINUS",
    "MINUTE",
    "MINUTE_MICROSECOND",
    "MINUTE_SECOND",
    "MINVALUE",
    "MIN_ROWS",
    "MOD",
    "MODE",
    "MODIFIES",
    "MODIFY",
    "MONITOR",
    "MONTH",
    "MUTEX",
    "MYSQL",
    "MYSQL_ERRNO",
    "NAME",
    "NAMES",
    "NATIONAL",
    "NATURAL",
    "NCHAR",
    "NESTED",
    "NEVER",
    "NEW",
    "NEXT",
    "NEXTVAL",
    "NO",
    "NOMAXVALUE",
    "NOMINVALUE",
    "NOCACHE",
    "NOCYCLE",
    "NO_WAIT",
    "NOWAIT",
    "NODEGROUP",
    "NONE",
    "NOT",
    "NOTFOUND",
    "NO_WRITE_TO_BINLOG",
    "NULL",
    "NUMBER",
    "NUMERIC",
    "NVARCHAR",
    "OF",
    "OFFSET",
    "OLD_PASSWORD",
    "ON DELETE",
    "ON UPDATE",
    "ONE",
    "ONLINE",
    "ONLY",
    "OPEN",
    "OPTIMIZE",
    "OPTIONS",
    "OPTION",
    "OPTIONALLY",
    "ORDER",
    "ORDINALITY",
    "OTHERS",
    "OUT",
    "OUTER",
    "OUTFILE",
    "OVER",
    "OVERLAPS",
    "OWNER",
    "PACKAGE",
    "PACK_KEYS",
    "PAGE",
    "PAGE_CHECKSUM",
    "PARSER",
    "PARSE_VCOL_EXPR",
    "PATH",
    "PERIOD",
    "PARTIAL",
    "PARTITION",
    "PARTITIONING",
    "PARTITIONS",
    "PASSWORD",
    "PERSISTENT",
    "PHASE",
    "PLUGIN",
    "PLUGINS",
    "PORT",
    "PORTION",
    "PRECEDES",
    "PRECEDING",
    "PRECISION",
    "PRESERVE",
    "PREV",
    "PREVIOUS",
    "PRIMARY",
    "PRIVILEGES",
    "PROCEDURE",
    "PROCESS",
    "PROCESSLIST",
    "PROFILE",
    "PROFILES",
    "PROXY",
    "PURGE",
    "QUARTER",
    "QUERY",
    "QUICK",
    "RAISE",
    "RANGE",
    "RAW",
    "READ",
    "READ_ONLY",
    "READ_WRITE",
    "READS",
    "REAL",
    "REBUILD",
    "RECOVER",
    "RECURSIVE",
    "REDO_BUFFER_SIZE",
    "REDOFILE",
    "REDUNDANT",
    "REFERENCES",
    "REGEXP",
    "RELAY",
    "RELAYLOG",
    "RELAY_LOG_FILE",
    "RELAY_LOG_POS",
    "RELAY_THREAD",
    "RELEASE",
    "RELOAD",
    "REMOVE",
    "RENAME",
    "REORGANIZE",
    "REPAIR",
    "REPEATABLE",
    "REPLAY",
    "REPLICA",
    "REPLICAS",
    "REPLICA_POS",
    "REPLICATION",
    "REPEAT",
    "REQUIRE",
    "RESET",
    "RESTART",
    "RESTORE",
    "RESTRICT",
    "RESUME",
    "RETURNED_SQLSTATE",
    "RETURN",
    "RETURNS",
    "REUSE",
    "RIGHT",
    "RLIKE",
    "ROLE",
    "ROLLUP",
    "ROUTINE",
    "ROW",
    "ROWCOUNT",
    "ROWNUM",
    "ROWS",
    "ROWTYPE",
    "ROW_COUNT",
    "ROW_FORMAT",
    "RTREE",
    "SCHEDULE",
    "SCHEMA",
    "SCHEMA_NAME",
    "SCHEMAS",
    "SECOND",
    "SECOND_MICROSECOND",
    "SECURITY",
    "SENSITIVE",
    "SEPARATOR",
    "SEQUENCE",
    "SERIAL",
    "SERIALIZABLE",
    "SESSION",
    "SERVER",
    "SETVAL",
    "SHARE",
    "SIGNED",
    "SIMPLE",
    "SKIP",
    "SLAVE",
    "SLAVES",
    "SLAVE_POS",
    "SLOW",
    "SNAPSHOT",
    "SMALLINT",
    "SOCKET",
    "SOFT",
    "SOME",
    "SONAME",
    "SOUNDS",
    "SOURCE",
    "STAGE",
    "STORED",
    "SPATIAL",
    "SPECIFIC",
    "REF_SYSTEM_ID",
    "SQL",
    "SQLEXCEPTION",
    "SQLSTATE",
    "SQLWARNING",
    "SQL_BIG_RESULT",
    "SQL_BUFFER_RESULT",
    "SQL_CACHE",
    "SQL_CALC_FOUND_ROWS",
    "SQL_NO_CACHE",
    "SQL_SMALL_RESULT",
    "SQL_THREAD",
    "SQL_TSI_SECOND",
    "SQL_TSI_MINUTE",
    "SQL_TSI_HOUR",
    "SQL_TSI_DAY",
    "SQL_TSI_WEEK",
    "SQL_TSI_MONTH",
    "SQL_TSI_QUARTER",
    "SQL_TSI_YEAR",
    "SSL",
    "START",
    "STARTING",
    "STARTS",
    "STATEMENT",
    "STATS_AUTO_RECALC",
    "STATS_PERSISTENT",
    "STATS_SAMPLE_PAGES",
    "STATUS",
    "STOP",
    "STORAGE",
    "STRING",
    "SUBCLASS_ORIGIN",
    "SUBJECT",
    "SUBPARTITION",
    "SUBPARTITIONS",
    "SUPER",
    "SUSPEND",
    "SWAPS",
    "SWITCHES",
    "SYSDATE",
    "SYSTEM",
    "SYSTEM_TIME",
    "TABLE",
    "TABLE_NAME",
    "TABLES",
    "TABLESPACE",
    "TABLE_CHECKSUM",
    "TEMPORARY",
    "TEMPTABLE",
    "TERMINATED",
    "TEXT",
    "THAN",
    "THEN",
    "TIES",
    "TIME",
    "TIMESTAMP",
    "TIMESTAMPADD",
    "TIMESTAMPDIFF",
    "TINYBLOB",
    "TINYINT",
    "TINYTEXT",
    "TO",
    "TRAILING",
    "TRANSACTION",
    "TRANSACTIONAL",
    "THREADS",
    "TRIGGER",
    "TRIGGERS",
    "TRUE",
    "TYPE",
    "TYPES",
    "UNBOUNDED",
    "UNCOMMITTED",
    "UNDEFINED",
    "UNDO_BUFFER_SIZE",
    "UNDOFILE",
    "UNDO",
    "UNICODE",
    "UNIQUE",
    "UNKNOWN",
    "UNLOCK",
    "UNINSTALL",
    "UNSIGNED",
    "UNTIL",
    "UPGRADE",
    "USAGE",
    "USER",
    "USER_RESOURCES",
    "USE_FRM",
    "UTC_DATE",
    "UTC_TIME",
    "UTC_TIMESTAMP",
    "VALUE",
    "VARBINARY",
    "VARCHAR",
    "VARCHARACTER",
    "VARCHAR2",
    "VARIABLES",
    "VARYING",
    "VIA",
    "VIEW",
    "VIRTUAL",
    "VISIBLE",
    "VERSIONING",
    "WAIT",
    "WARNINGS",
    "WEEK",
    "WEIGHT_STRING",
    "WHILE",
    "WINDOW",
    "WITHIN",
    "WITHOUT",
    "WORK",
    "WRAPPER",
    "WRITE",
    "X509",
    "XA",
    "XML",
    "YEAR",
    "YEAR_MONTH",
    "ZEROFILL"
  ], F = [
    "ALTER DATABASE",
    "ALTER DATABASE COMMENT",
    "ALTER EVENT",
    "ALTER FUNCTION",
    "ALTER PROCEDURE",
    "ALTER SCHEMA",
    "ALTER SCHEMA COMMENT",
    "ALTER SEQUENCE",
    "ALTER SERVER",
    "ALTER TABLE",
    "ALTER USER",
    "ALTER VIEW",
    "ANALYZE",
    "ANALYZE TABLE",
    "BACKUP LOCK",
    "BACKUP STAGE",
    "BACKUP UNLOCK",
    "BEGIN",
    "BINLOG",
    "CACHE INDEX",
    "CALL",
    "CHANGE MASTER TO",
    "CHECK TABLE",
    "CHECK VIEW",
    "CHECKSUM TABLE",
    "COMMIT",
    "CREATE AGGREGATE FUNCTION",
    "CREATE DATABASE",
    "CREATE EVENT",
    "CREATE FUNCTION",
    "CREATE INDEX",
    "CREATE PROCEDURE",
    "CREATE ROLE",
    "CREATE SEQUENCE",
    "CREATE SERVER",
    "CREATE SPATIAL INDEX",
    "CREATE TABLE",
    "CREATE TRIGGER",
    "CREATE UNIQUE INDEX",
    "CREATE USER",
    "CREATE VIEW",
    "DEALLOCATE PREPARE",
    "DELETE",
    "DELETE FROM",
    "DESCRIBE",
    "DO",
    "DROP DATABASE",
    "DROP EVENT",
    "DROP FUNCTION",
    "DROP INDEX",
    "DROP PREPARE",
    "DROP PROCEDURE",
    "DROP ROLE",
    "DROP SEQUENCE",
    "DROP SERVER",
    "DROP TABLE",
    "DROP TRIGGER",
    "DROP USER",
    "DROP VIEW",
    "EXECUTE",
    "EXPLAIN",
    "FLUSH",
    "GET DIAGNOSTICS",
    "GET DIAGNOSTICS CONDITION",
    "GRANT",
    "HANDLER",
    "HELP",
    "INSERT",
    "INSTALL PLUGIN",
    "INSTALL SONAME",
    "KILL",
    "LOAD DATA INFILE",
    "LOAD INDEX INTO CACHE",
    "LOAD XML INFILE",
    "LOCK TABLE",
    "OPTIMIZE TABLE",
    "PREPARE",
    "PURGE BINARY LOGS",
    "PURGE MASTER LOGS",
    "RELEASE SAVEPOINT",
    "RENAME TABLE",
    "RENAME USER",
    "REPAIR TABLE",
    "REPAIR VIEW",
    "REPLACE",
    "RESET MASTER",
    "RESET QUERY CACHE",
    "RESET REPLICA",
    "RESET SLAVE",
    "RESIGNAL",
    "RETURNING",
    "REVOKE",
    "ROLLBACK",
    "SAVEPOINT",
    "SELECT",
    "SET",
    "SET CHARACTER SET",
    "SET DEFAULT ROLE",
    "SET GLOBAL TRANSACTION",
    "SET NAMES",
    "SET PASSWORD",
    "SET ROLE",
    "SET STATEMENT",
    "SET TRANSACTION",
    "SHOW",
    "SHOW ALL REPLICAS STATUS",
    "SHOW ALL SLAVES STATUS",
    "SHOW AUTHORS",
    "SHOW BINARY LOGS",
    "SHOW BINLOG EVENTS",
    "SHOW BINLOG STATUS",
    "SHOW CHARACTER SET",
    "SHOW CLIENT_STATISTICS",
    "SHOW COLLATION",
    "SHOW COLUMNS",
    "SHOW CONTRIBUTORS",
    "SHOW CREATE DATABASE",
    "SHOW CREATE EVENT",
    "SHOW CREATE FUNCTION",
    "SHOW CREATE PACKAGE",
    "SHOW CREATE PACKAGE BODY",
    "SHOW CREATE PROCEDURE",
    "SHOW CREATE SEQUENCE",
    "SHOW CREATE TABLE",
    "SHOW CREATE TRIGGER",
    "SHOW CREATE USER",
    "SHOW CREATE VIEW",
    "SHOW DATABASES",
    "SHOW ENGINE",
    "SHOW ENGINE INNODB STATUS",
    "SHOW ENGINES",
    "SHOW ERRORS",
    "SHOW EVENTS",
    "SHOW EXPLAIN",
    "SHOW FUNCTION CODE",
    "SHOW FUNCTION STATUS",
    "SHOW GRANTS",
    "SHOW INDEX",
    "SHOW INDEXES",
    "SHOW INDEX_STATISTICS",
    "SHOW KEYS",
    "SHOW LOCALES",
    "SHOW MASTER LOGS",
    "SHOW MASTER STATUS",
    "SHOW OPEN TABLES",
    "SHOW PACKAGE BODY CODE",
    "SHOW PACKAGE BODY STATUS",
    "SHOW PACKAGE STATUS",
    "SHOW PLUGINS",
    "SHOW PLUGINS SONAME",
    "SHOW PRIVILEGES",
    "SHOW PROCEDURE CODE",
    "SHOW PROCEDURE STATUS",
    "SHOW PROCESSLIST",
    "SHOW PROFILE",
    "SHOW PROFILES",
    "SHOW QUERY_RESPONSE_TIME",
    "SHOW RELAYLOG EVENTS",
    "SHOW REPLICA",
    "SHOW REPLICA HOSTS",
    "SHOW REPLICA STATUS",
    "SHOW SCHEMAS",
    "SHOW SLAVE",
    "SHOW SLAVE HOSTS",
    "SHOW SLAVE STATUS",
    "SHOW STATUS",
    "SHOW STORAGE ENGINES",
    "SHOW TABLE STATUS",
    "SHOW TABLES",
    "SHOW TRIGGERS",
    "SHOW USER_STATISTICS",
    "SHOW VARIABLES",
    "SHOW WARNINGS",
    "SHOW WSREP_MEMBERSHIP",
    "SHOW WSREP_STATUS",
    "SHUTDOWN",
    "SIGNAL",
    "START ALL REPLICAS",
    "START ALL SLAVES",
    "START REPLICA",
    "START SLAVE",
    "START TRANSACTION",
    "STOP ALL REPLICAS",
    "STOP ALL SLAVES",
    "STOP REPLICA",
    "STOP SLAVE",
    "TRUNCATE",
    "TRUNCATE TABLE",
    "UNINSTALL PLUGIN",
    "UNINSTALL SONAME",
    "UNLOCK TABLE",
    "UPDATE",
    "USE",
    "WITH",
    "XA BEGIN",
    "XA COMMIT",
    "XA END",
    "XA PREPARE",
    "XA RECOVER",
    "XA ROLLBACK",
    "XA START",
    // other
    "ADD",
    "ALTER COLUMN",
    "FROM",
    "GROUP BY",
    "HAVING",
    "INSERT INTO",
    "INSERT",
    "LIMIT",
    "OFFSET",
    "ORDER BY",
    "SELECT",
    "VALUES",
    "WHERE"
  ], ae = ["INTERSECT", "INTERSECT ALL", "INTERSECT DISTINCT", "UNION", "UNION ALL", "UNION DISTINCT", "EXCEPT", "EXCEPT ALL", "EXCEPT DISTINCT", "MINUS", "MINUS ALL", "MINUS DISTINCT"], U = [
    "JOIN",
    "INNER JOIN",
    "LEFT JOIN",
    "LEFT OUTER JOIN",
    "RIGHT JOIN",
    "RIGHT OUTER JOIN",
    "CROSS JOIN",
    "NATURAL JOIN",
    // non-standard joins
    "STRAIGHT_JOIN",
    "NATURAL LEFT JOIN",
    "NATURAL LEFT OUTER JOIN",
    "NATURAL RIGHT JOIN",
    "NATURAL RIGHT OUTER JOIN"
  ], G = ["WHEN", "ELSE", "ELSEIF", "ELSIF"], H = /* @__PURE__ */ function(B) {
    d(E, B);
    var Y = L(E);
    function E() {
      return f(this, E), Y.apply(this, arguments);
    }
    return O(E, [{
      key: "tokenizer",
      value: function() {
        return new n.default({
          reservedCommands: F,
          reservedBinaryCommands: ae,
          reservedJoins: U,
          reservedDependentClauses: G,
          reservedLogicalOperators: ["AND", "OR", "XOR"],
          reservedKeywords: (0, s.dedupe)([].concat(z, $)),
          stringTypes: ['""', {
            quote: "''",
            prefixes: ["X"]
          }],
          identTypes: ["``"],
          identChars: {
            first: "$",
            rest: "$"
          },
          variableTypes: [{
            regex: "@[A-Za-z0-9_.$]+"
          }, {
            quote: '""',
            prefixes: ["@"],
            requirePrefix: !0
          }, {
            quote: "''",
            prefixes: ["@"],
            requirePrefix: !0
          }, {
            quote: "``",
            prefixes: ["@"],
            requirePrefix: !0
          }],
          positionalParams: !0,
          lineCommentTypes: ["--", "#"],
          operators: E.operators,
          postProcess: re
        });
      }
    }]), E;
  }(i.default);
  t.default = H, _(H, "operators", [":=", "<<", ">>", "<=>", "&&", "||"]);
  function re(B) {
    return B.map(function(Y, E) {
      var m = B[E + 1] || a.EOF_TOKEN;
      return a.isToken.SET(Y) && m.value === "(" ? c(c({}, Y), {}, {
        type: a.TokenType.RESERVED_KEYWORD
      }) : Y;
    });
  }
  e.exports = t.default;
})(Wl, Wl.exports);
var k_ = Wl.exports, Xl = { exports: {} };
(function(e, t) {
  function r(B) {
    "@babel/helpers - typeof";
    return r = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(Y) {
      return typeof Y;
    } : function(Y) {
      return Y && typeof Symbol == "function" && Y.constructor === Symbol && Y !== Symbol.prototype ? "symbol" : typeof Y;
    }, r(B);
  }
  Object.defineProperty(t, "__esModule", {
    value: !0
  }), t.default = void 0;
  var i = o(ur), n = o(cr), a = it, s = Xe;
  function o(B) {
    return B && B.__esModule ? B : { default: B };
  }
  function l(B, Y) {
    var E = Object.keys(B);
    if (Object.getOwnPropertySymbols) {
      var m = Object.getOwnPropertySymbols(B);
      Y && (m = m.filter(function(P) {
        return Object.getOwnPropertyDescriptor(B, P).enumerable;
      })), E.push.apply(E, m);
    }
    return E;
  }
  function c(B) {
    for (var Y = 1; Y < arguments.length; Y++) {
      var E = arguments[Y] != null ? arguments[Y] : {};
      Y % 2 ? l(Object(E), !0).forEach(function(m) {
        _(B, m, E[m]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(B, Object.getOwnPropertyDescriptors(E)) : l(Object(E)).forEach(function(m) {
        Object.defineProperty(B, m, Object.getOwnPropertyDescriptor(E, m));
      });
    }
    return B;
  }
  function f(B, Y) {
    if (!(B instanceof Y))
      throw new TypeError("Cannot call a class as a function");
  }
  function p(B, Y) {
    for (var E = 0; E < Y.length; E++) {
      var m = Y[E];
      m.enumerable = m.enumerable || !1, m.configurable = !0, "value" in m && (m.writable = !0), Object.defineProperty(B, m.key, m);
    }
  }
  function O(B, Y, E) {
    return Y && p(B.prototype, Y), E && p(B, E), Object.defineProperty(B, "prototype", { writable: !1 }), B;
  }
  function d(B, Y) {
    if (typeof Y != "function" && Y !== null)
      throw new TypeError("Super expression must either be null or a function");
    B.prototype = Object.create(Y && Y.prototype, { constructor: { value: B, writable: !0, configurable: !0 } }), Object.defineProperty(B, "prototype", { writable: !1 }), Y && g(B, Y);
  }
  function g(B, Y) {
    return g = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(m, P) {
      return m.__proto__ = P, m;
    }, g(B, Y);
  }
  function L(B) {
    var Y = x();
    return function() {
      var m = V(B), P;
      if (Y) {
        var R = V(this).constructor;
        P = Reflect.construct(m, arguments, R);
      } else
        P = m.apply(this, arguments);
      return D(this, P);
    };
  }
  function D(B, Y) {
    if (Y && (r(Y) === "object" || typeof Y == "function"))
      return Y;
    if (Y !== void 0)
      throw new TypeError("Derived constructors may only return object or undefined");
    return W(B);
  }
  function W(B) {
    if (B === void 0)
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return B;
  }
  function x() {
    if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
      return !1;
    if (typeof Proxy == "function")
      return !0;
    try {
      return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      })), !0;
    } catch {
      return !1;
    }
  }
  function V(B) {
    return V = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(E) {
      return E.__proto__ || Object.getPrototypeOf(E);
    }, V(B);
  }
  function _(B, Y, E) {
    return Y in B ? Object.defineProperty(B, Y, { value: E, enumerable: !0, configurable: !0, writable: !0 }) : B[Y] = E, B;
  }
  var $ = [
    "ABS",
    "ACOS",
    "ADDDATE",
    "ADDTIME",
    "AES_DECRYPT",
    "AES_ENCRYPT",
    // 'AND',
    "ANY_VALUE",
    "ASCII",
    "ASIN",
    "ATAN",
    "ATAN2",
    "AVG",
    "BENCHMARK",
    "BIN",
    "BIN_TO_UUID",
    "BINARY",
    "BIT_AND",
    "BIT_COUNT",
    "BIT_LENGTH",
    "BIT_OR",
    "BIT_XOR",
    "CAN_ACCESS_COLUMN",
    "CAN_ACCESS_DATABASE",
    "CAN_ACCESS_TABLE",
    "CAN_ACCESS_USER",
    "CAN_ACCESS_VIEW",
    "CAST",
    "CEIL",
    "CEILING",
    "CHAR",
    "CHAR_LENGTH",
    "CHARACTER_LENGTH",
    "CHARSET",
    "COALESCE",
    "COERCIBILITY",
    "COLLATION",
    "COMPRESS",
    "CONCAT",
    "CONCAT_WS",
    "CONNECTION_ID",
    "CONV",
    "CONVERT",
    "CONVERT_TZ",
    "COS",
    "COT",
    "COUNT",
    "CRC32",
    "CUME_DIST",
    "CURDATE",
    "CURRENT_DATE",
    "CURRENT_ROLE",
    "CURRENT_TIME",
    "CURRENT_TIMESTAMP",
    "CURRENT_USER",
    "CURTIME",
    "DATABASE",
    "DATE",
    "DATE_ADD",
    "DATE_FORMAT",
    "DATE_SUB",
    "DATEDIFF",
    "DAY",
    "DAYNAME",
    "DAYOFMONTH",
    "DAYOFWEEK",
    "DAYOFYEAR",
    "DEFAULT",
    "DEGREES",
    "DENSE_RANK",
    "DIV",
    "ELT",
    "EXP",
    "EXPORT_SET",
    "EXTRACT",
    "EXTRACTVALUE",
    "FIELD",
    "FIND_IN_SET",
    "FIRST_VALUE",
    "FLOOR",
    "FORMAT",
    "FORMAT_BYTES",
    "FORMAT_PICO_TIME",
    "FOUND_ROWS",
    "FROM_BASE64",
    "FROM_DAYS",
    "FROM_UNIXTIME",
    "GEOMCOLLECTION",
    "GEOMETRYCOLLECTION",
    "GET_DD_COLUMN_PRIVILEGES",
    "GET_DD_CREATE_OPTIONS",
    "GET_DD_INDEX_SUB_PART_LENGTH",
    "GET_FORMAT",
    "GET_LOCK",
    "GREATEST",
    "GROUP_CONCAT",
    "GROUPING",
    "GTID_SUBSET",
    "GTID_SUBTRACT",
    "HEX",
    "HOUR",
    "ICU_VERSION",
    "IF",
    "IFNULL",
    "IN",
    "INET_ATON",
    "INET_NTOA",
    "INET6_ATON",
    "INET6_NTOA",
    "INSERT",
    "INSTR",
    "INTERNAL_AUTO_INCREMENT",
    "INTERNAL_AVG_ROW_LENGTH",
    "INTERNAL_CHECK_TIME",
    "INTERNAL_CHECKSUM",
    "INTERNAL_DATA_FREE",
    "INTERNAL_DATA_LENGTH",
    "INTERNAL_DD_CHAR_LENGTH",
    "INTERNAL_GET_COMMENT_OR_ERROR",
    "INTERNAL_GET_ENABLED_ROLE_JSON",
    "INTERNAL_GET_HOSTNAME",
    "INTERNAL_GET_USERNAME",
    "INTERNAL_GET_VIEW_WARNING_OR_ERROR",
    "INTERNAL_INDEX_COLUMN_CARDINALITY",
    "INTERNAL_INDEX_LENGTH",
    "INTERNAL_IS_ENABLED_ROLE",
    "INTERNAL_IS_MANDATORY_ROLE",
    "INTERNAL_KEYS_DISABLED",
    "INTERNAL_MAX_DATA_LENGTH",
    "INTERNAL_TABLE_ROWS",
    "INTERNAL_UPDATE_TIME",
    "INTERVAL",
    "IS",
    "IS_FREE_LOCK",
    "IS_IPV4",
    "IS_IPV4_COMPAT",
    "IS_IPV4_MAPPED",
    "IS_IPV6",
    "IS NOT",
    "IS NOT NULL",
    "IS NULL",
    "IS_USED_LOCK",
    "IS_UUID",
    "ISNULL",
    "JSON_ARRAY",
    "JSON_ARRAY_APPEND",
    "JSON_ARRAY_INSERT",
    "JSON_ARRAYAGG",
    "JSON_CONTAINS",
    "JSON_CONTAINS_PATH",
    "JSON_DEPTH",
    "JSON_EXTRACT",
    "JSON_INSERT",
    "JSON_KEYS",
    "JSON_LENGTH",
    "JSON_MERGE",
    "JSON_MERGE_PATCH",
    "JSON_MERGE_PRESERVE",
    "JSON_OBJECT",
    "JSON_OBJECTAGG",
    "JSON_OVERLAPS",
    "JSON_PRETTY",
    "JSON_QUOTE",
    "JSON_REMOVE",
    "JSON_REPLACE",
    "JSON_SCHEMA_VALID",
    "JSON_SCHEMA_VALIDATION_REPORT",
    "JSON_SEARCH",
    "JSON_SET",
    "JSON_STORAGE_FREE",
    "JSON_STORAGE_SIZE",
    "JSON_TABLE",
    "JSON_TYPE",
    "JSON_UNQUOTE",
    "JSON_VALID",
    "JSON_VALUE",
    "LAG",
    "LAST_DAY",
    "LAST_INSERT_ID",
    "LAST_VALUE",
    "LCASE",
    "LEAD",
    "LEAST",
    "LEFT",
    "LENGTH",
    "LIKE",
    "LINESTRING",
    "LN",
    "LOAD_FILE",
    "LOCALTIME",
    "LOCALTIMESTAMP",
    "LOCATE",
    "LOG",
    "LOG10",
    "LOG2",
    "LOWER",
    "LPAD",
    "LTRIM",
    "MAKE_SET",
    "MAKEDATE",
    "MAKETIME",
    "MASTER_POS_WAIT",
    "MATCH",
    "MAX",
    "MBRCONTAINS",
    "MBRCOVEREDBY",
    "MBRCOVERS",
    "MBRDISJOINT",
    "MBREQUALS",
    "MBRINTERSECTS",
    "MBROVERLAPS",
    "MBRTOUCHES",
    "MBRWITHIN",
    "MD5",
    "MEMBER OF",
    "MICROSECOND",
    "MID",
    "MIN",
    "MINUTE",
    "MOD",
    "MONTH",
    "MONTHNAME",
    "MULTILINESTRING",
    "MULTIPOINT",
    "MULTIPOLYGON",
    "NAME_CONST",
    "NOT",
    "NOT IN",
    "NOT LIKE",
    "NOT REGEXP",
    "NOW",
    "NTH_VALUE",
    "NTILE",
    "NULLIF",
    "OCT",
    "OCTET_LENGTH",
    // 'OR',
    "ORD",
    "PERCENT_RANK",
    "PERIOD_ADD",
    "PERIOD_DIFF",
    "PI",
    "POINT",
    "POLYGON",
    "POSITION",
    "POW",
    "POWER",
    "PS_CURRENT_THREAD_ID",
    "PS_THREAD_ID",
    "QUARTER",
    "QUOTE",
    "RADIANS",
    "RAND",
    "RANDOM_BYTES",
    "RANK",
    "REGEXP",
    "REGEXP_INSTR",
    "REGEXP_LIKE",
    "REGEXP_REPLACE",
    "REGEXP_SUBSTR",
    "RELEASE_ALL_LOCKS",
    "RELEASE_LOCK",
    "REPEAT",
    "REPLACE",
    "REVERSE",
    "RIGHT",
    "RLIKE",
    "ROLES_GRAPHML",
    "ROUND",
    "ROW_COUNT",
    "ROW_NUMBER",
    "RPAD",
    "RTRIM",
    "SCHEMA",
    "SEC_TO_TIME",
    "SECOND",
    "SESSION_USER",
    "SHA1",
    "SHA2",
    "SIGN",
    "SIN",
    "SLEEP",
    "SOUNDEX",
    "SOUNDS LIKE",
    "SOURCE_POS_WAIT",
    "SPACE",
    "SQRT",
    "ST_AREA",
    "ST_ASBINARY",
    "ST_ASGEOJSON",
    "ST_ASTEXT",
    "ST_BUFFER",
    "ST_BUFFER_STRATEGY",
    "ST_CENTROID",
    "ST_COLLECT",
    "ST_CONTAINS",
    "ST_CONVEXHULL",
    "ST_CROSSES",
    "ST_DIFFERENCE",
    "ST_DIMENSION",
    "ST_DISJOINT",
    "ST_DISTANCE",
    "ST_DISTANCE_SPHERE",
    "ST_ENDPOINT",
    "ST_ENVELOPE",
    "ST_EQUALS",
    "ST_EXTERIORRING",
    "ST_FRECHETDISTANCE",
    "ST_GEOHASH",
    "ST_GEOMCOLLFROMTEXT",
    "ST_GEOMCOLLFROMWKB",
    "ST_GEOMETRYN",
    "ST_GEOMETRYTYPE",
    "ST_GEOMFROMGEOJSON",
    "ST_GEOMFROMTEXT",
    "ST_GEOMFROMWKB",
    "ST_HAUSDORFFDISTANCE",
    "ST_INTERIORRINGN",
    "ST_INTERSECTION",
    "ST_INTERSECTS",
    "ST_ISCLOSED",
    "ST_ISEMPTY",
    "ST_ISSIMPLE",
    "ST_ISVALID",
    "ST_LATFROMGEOHASH",
    "ST_LATITUDE",
    "ST_LENGTH",
    "ST_LINEFROMTEXT",
    "ST_LINEFROMWKB",
    "ST_LINEINTERPOLATEPOINT",
    "ST_LINEINTERPOLATEPOINTS",
    "ST_LONGFROMGEOHASH",
    "ST_LONGITUDE",
    "ST_MAKEENVELOPE",
    "ST_MLINEFROMTEXT",
    "ST_MLINEFROMWKB",
    "ST_MPOINTFROMTEXT",
    "ST_MPOINTFROMWKB",
    "ST_MPOLYFROMTEXT",
    "ST_MPOLYFROMWKB",
    "ST_NUMGEOMETRIES",
    "ST_NUMINTERIORRING",
    "ST_NUMPOINTS",
    "ST_OVERLAPS",
    "ST_POINTATDISTANCE",
    "ST_POINTFROMGEOHASH",
    "ST_POINTFROMTEXT",
    "ST_POINTFROMWKB",
    "ST_POINTN",
    "ST_POLYFROMTEXT",
    "ST_POLYFROMWKB",
    "ST_SIMPLIFY",
    "ST_SRID",
    "ST_STARTPOINT",
    "ST_SWAPXY",
    "ST_SYMDIFFERENCE",
    "ST_TOUCHES",
    "ST_TRANSFORM",
    "ST_UNION",
    "ST_VALIDATE",
    "ST_WITHIN",
    "ST_X",
    "ST_Y",
    "STATEMENT_DIGEST",
    "STATEMENT_DIGEST_TEXT",
    "STD",
    "STDDEV",
    "STDDEV_POP",
    "STDDEV_SAMP",
    "STR_TO_DATE",
    "STRCMP",
    "SUBDATE",
    "SUBSTR",
    "SUBSTRING",
    "SUBSTRING_INDEX",
    "SUBTIME",
    "SUM",
    "SYSDATE",
    "SYSTEM_USER",
    "TAN",
    "TIME",
    "TIME_FORMAT",
    "TIME_TO_SEC",
    "TIMEDIFF",
    "TIMESTAMP",
    "TIMESTAMPADD",
    "TIMESTAMPDIFF",
    "TO_BASE64",
    "TO_DAYS",
    "TO_SECONDS",
    "TRIM",
    "TRUNCATE",
    "UCASE",
    "UNCOMPRESS",
    "UNCOMPRESSED_LENGTH",
    "UNHEX",
    "UNIX_TIMESTAMP",
    "UPDATEXML",
    "UPPER",
    "USER",
    "UTC_DATE",
    "UTC_TIME",
    "UTC_TIMESTAMP",
    "UUID",
    "UUID_SHORT",
    "UUID_TO_BIN",
    "VALIDATE_PASSWORD_STRENGTH",
    "VALUES",
    "VAR_POP",
    "VAR_SAMP",
    "VARIANCE",
    "VERSION",
    "WAIT_FOR_EXECUTED_GTID_SET",
    "WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS",
    "WEEK",
    "WEEKDAY",
    "WEEKOFYEAR",
    "WEIGHT_STRING",
    // 'XOR',
    "YEAR",
    "YEARWEEK"
  ], z = ["ACCESSIBLE", "ACCOUNT", "ACTION", "ACTIVE", "ADMIN", "AFTER", "AGAINST", "AGGREGATE", "ALGORITHM", "ALL", "ALTER", "ALWAYS", "ANALYSE", "ANALYZE", "ANY", "ARRAY", "AS", "ASC", "ASENSITIVE", "AT", "ATTRIBUTE", "AUTHENTICATION", "AUTOEXTEND_SIZE", "AUTO_INCREMENT", "AVG_ROW_LENGTH", "BACKUP", "BEFORE", "BEGIN", "BETWEEN", "BIGINT", "BIT", "BLOB", "BLOCK", "BOOL", "BOOLEAN", "BOTH", "BTREE", "BUCKETS", "BY", "BYTE", "CACHE", "CASCADE", "CASCADED", "CATALOG_NAME", "CHAIN", "CHALLENGE_RESPONSE", "CHANGE", "CHANGED", "CHANNEL", "CHARACTER", "CHARACTER SET", "CHECK", "CHECKSUM", "CIPHER", "CLASS_ORIGIN", "CLIENT", "CLOSE", "CODE", "COLLATE", "COLUMN", "COLUMNS", "COLUMN_FORMAT", "COLUMN_NAME", "COMMENT", "COMMITTED", "COMPACT", "COMPLETION", "COMPONENT", "COMPRESSED", "COMPRESSION", "CONCURRENT", "CONDITION", "CONNECTION", "CONSISTENT", "CONSTRAINT", "CONSTRAINT_CATALOG", "CONSTRAINT_NAME", "CONSTRAINT_SCHEMA", "CONTAINS", "CONTEXT", "CONTINUE", "CPU", "CREATE", "CROSS", "CUBE", "CURRENT", "CURSOR", "CURSOR_NAME", "DATA", "DATABASES", "DATAFILE", "DATETIME", "DAY_HOUR", "DAY_MICROSECOND", "DAY_MINUTE", "DAY_SECOND", "DEALLOCATE", "DEC", "DECIMAL", "DECLARE", "DEFAULT_AUTH", "DEFINER", "DEFINITION", "DELAYED", "DELAY_KEY_WRITE", "DESC", "DESCRIPTION", "DES_KEY_FILE", "DETERMINISTIC", "DIAGNOSTICS", "DIRECTORY", "DISABLE", "DISCARD", "DISK", "DISTINCT", "DISTINCTROW", "DOUBLE", "DROP", "DUAL", "DUMPFILE", "DUPLICATE", "DYNAMIC", "EACH", "EMPTY", "ENABLE", "ENCLOSED", "ENCRYPTION", "ENDS", "ENFORCED", "ENGINE", "ENGINES", "ENGINE_ATTRIBUTE", "ENUM", "ERROR", "ERRORS", "ESCAPE", "ESCAPED", "EVENT", "EVENTS", "EVERY", "EXCHANGE", "EXCLUDE", "EXISTS", "EXIT", "EXPANSION", "EXPIRE", "EXPORT", "EXTENDED", "EXTENT_SIZE", "FACTOR", "FAILED_LOGIN_ATTEMPTS", "FALSE", "FAST", "FAULTS", "FETCH", "FIELDS", "FILE", "FILE_BLOCK_SIZE", "FILTER", "FINISH", "FIRST", "FIXED", "FLOAT", "FLOAT4", "FLOAT8", "FOLLOWING", "FOLLOWS", "FOR", "FORCE", "FOREIGN", "FOUND", "FULL", "FULLTEXT", "FUNCTION", "GENERAL", "GENERATED", "GEOMCOLLECTION", "GEOMETRY", "GEOMETRYCOLLECTION", "GET", "GET_MASTER_PUBLIC_KEY", "GET_SOURCE_PUBLIC_KEY", "GLOBAL", "@@GLOBAL", "GRANTS", "GROUP", "GROUPS", "GROUP_REPLICATION", "GTID_ONLY", "HASH", "HIGH_PRIORITY", "HISTOGRAM", "HISTORY", "HOST", "HOSTS", "HOUR_MICROSECOND", "HOUR_MINUTE", "HOUR_SECOND", "IDENTIFIED", "IGNORE", "IGNORE_SERVER_IDS", "IMPORT", "INACTIVE", "INDEX", "INDEXES", "INFILE", "INITIAL", "INITIAL_SIZE", "INITIATE", "INNER", "INOUT", "INSENSITIVE", "INSERT_METHOD", "INSTALL", "INSTANCE", "INT", "INT1", "INT2", "INT3", "INT4", "INT8", "INTEGER", "INTO", "INVISIBLE", "INVOKER", "IO", "IO_AFTER_GTIDS", "IO_BEFORE_GTIDS", "IO_THREAD", "IPC", "ISOLATION", "ISSUER", "ITERATE", "JSON", "KEY", "KEYRING", "KEYS", "KEY_BLOCK_SIZE", "LANGUAGE", "LAST", "LATERAL", "LEADING", "LEAVE", "LEAVES", "LESS", "LEVEL", "LINEAR", "LINES", "LINESTRING", "LIST", "LOAD", "LOCAL", "LOCK", "LOCKED", "LOCKS", "LOGFILE", "LOGS", "LONG", "LONGBLOB", "LONGTEXT", "LOOP", "LOW_PRIORITY", "MASTER", "MASTER_AUTO_POSITION", "MASTER_BIND", "MASTER_COMPRESSION_ALGORITHMS", "MASTER_CONNECT_RETRY", "MASTER_DELAY", "MASTER_HEARTBEAT_PERIOD", "MASTER_HOST", "MASTER_LOG_FILE", "MASTER_LOG_POS", "MASTER_PASSWORD", "MASTER_PORT", "MASTER_PUBLIC_KEY_PATH", "MASTER_RETRY_COUNT", "MASTER_SERVER_ID", "MASTER_SSL", "MASTER_SSL_CA", "MASTER_SSL_CAPATH", "MASTER_SSL_CERT", "MASTER_SSL_CIPHER", "MASTER_SSL_CRL", "MASTER_SSL_CRLPATH", "MASTER_SSL_KEY", "MASTER_SSL_VERIFY_SERVER_CERT", "MASTER_TLS_CIPHERSUITES", "MASTER_TLS_VERSION", "MASTER_USER", "MASTER_ZSTD_COMPRESSION_LEVEL", "MAXVALUE", "MAX_CONNECTIONS_PER_HOUR", "MAX_QUERIES_PER_HOUR", "MAX_ROWS", "MAX_SIZE", "MAX_UPDATES_PER_HOUR", "MAX_USER_CONNECTIONS", "MEDIUM", "MEDIUMBLOB", "MEDIUMINT", "MEDIUMTEXT", "MEMBER", "MEMORY", "MERGE", "MESSAGE_TEXT", "MIDDLEINT", "MIGRATE", "MINUTE_MICROSECOND", "MINUTE_SECOND", "MIN_ROWS", "MODE", "MODIFIES", "MODIFY", "MULTILINESTRING", "MULTIPOINT", "MULTIPOLYGON", "MUTEX", "MYSQL_ERRNO", "NAME", "NAMES", "NATIONAL", "NATURAL", "NCHAR", "NDB", "NDBCLUSTER", "NESTED", "NETWORK_NAMESPACE", "NEVER", "NEW", "NEXT", "NO", "NODEGROUP", "NONE", "NOWAIT", "NO_WAIT", "NO_WRITE_TO_BINLOG", "NULL", "NULLS", "NUMBER", "NUMERIC", "NVARCHAR", "OF", "OFF", "OFFSET", "OJ", "OLD", "ON DELETE", "ON UPDATE", "ONE", "ONLY", "OPEN", "OPTIMIZE", "OPTIMIZER_COSTS", "OPTION", "OPTIONAL", "OPTIONALLY", "OPTIONS", "ORDER", "ORDINALITY", "ORGANIZATION", "OTHERS", "OUT", "OUTER", "OUTFILE", "OVER", "OWNER", "PACK_KEYS", "PAGE", "PARSER", "PARSE_GCOL_EXPR", "PARTIAL", "PARTITION", "PARTITIONING", "PARTITIONS", "PASSWORD", "PASSWORD_LOCK_TIME", "PATH", "PERSIST", "@@PERSIST", "PERSIST_ONLY", "@@PERSIST_ONLY", "PHASE", "PLUGIN", "PLUGINS", "PLUGIN_DIR", "POINT", "POLYGON", "PORT", "PRECEDES", "PRECEDING", "PRECISION", "PRESERVE", "PREV", "PRIMARY", "PRIVILEGES", "PRIVILEGE_CHECKS_USER", "PROCEDURE", "PROCESS", "PROCESSLIST", "PROFILE", "PROFILES", "PROXY", "PURGE", "QUERY", "QUICK", "RANDOM", "RANGE", "READ", "READS", "READ_ONLY", "READ_WRITE", "REAL", "REBUILD", "RECOVER", "RECURSIVE", "REDOFILE", "REDO_BUFFER_SIZE", "REDUNDANT", "REFERENCE", "REFERENCES", "REGISTRATION", "RELAY", "RELAYLOG", "RELAY_LOG_FILE", "RELAY_LOG_POS", "RELAY_THREAD", "RELEASE", "RELOAD", "REMOTE", "REMOVE", "RENAME", "REORGANIZE", "REPAIR", "REPEATABLE", "REPLICA", "REPLICAS", "REPLICATE_DO_DB", "REPLICATE_DO_TABLE", "REPLICATE_IGNORE_DB", "REPLICATE_IGNORE_TABLE", "REPLICATE_REWRITE_DB", "REPLICATE_WILD_DO_TABLE", "REPLICATE_WILD_IGNORE_TABLE", "REPLICATION", "REQUIRE", "REQUIRE_ROW_FORMAT", "RESIGNAL", "RESOURCE", "RESPECT", "RESTORE", "RESTRICT", "RESUME", "RETAIN", "RETURN", "RETURNED_SQLSTATE", "RETURNING", "RETURNS", "REUSE", "ROLE", "ROLLUP", "ROTATE", "ROUTINE", "ROW", "ROWS", "ROW_FORMAT", "RTREE", "SCHEDULE", "SCHEMAS", "SCHEMA_NAME", "SECONDARY", "SECONDARY_ENGINE", "SECONDARY_ENGINE_ATTRIBUTE", "SECONDARY_LOAD", "SECONDARY_UNLOAD", "SECOND_MICROSECOND", "SECURITY", "SENSITIVE", "SEPARATOR", "SERIAL", "SERIALIZABLE", "SERVER", "SESSION", "@@SESSION", "SHARE", "SIGNAL", "SIGNED", "SIMPLE", "SKIP", "SLAVE", "SLOW", "SMALLINT", "SNAPSHOT", "SOCKET", "SOME", "SONAME", "SOUNDS", "SOURCE", "SOURCE_AUTO_POSITION", "SOURCE_BIND", "SOURCE_COMPRESSION_ALGORITHMS", "SOURCE_CONNECT_RETRY", "SOURCE_DELAY", "SOURCE_HEARTBEAT_PERIOD", "SOURCE_HOST", "SOURCE_LOG_FILE", "SOURCE_LOG_POS", "SOURCE_PASSWORD", "SOURCE_PORT", "SOURCE_PUBLIC_KEY_PATH", "SOURCE_RETRY_COUNT", "SOURCE_SSL", "SOURCE_SSL_CA", "SOURCE_SSL_CAPATH", "SOURCE_SSL_CERT", "SOURCE_SSL_CIPHER", "SOURCE_SSL_CRL", "SOURCE_SSL_CRLPATH", "SOURCE_SSL_KEY", "SOURCE_SSL_VERIFY_SERVER_CERT", "SOURCE_TLS_CIPHERSUITES", "SOURCE_TLS_VERSION", "SOURCE_USER", "SOURCE_ZSTD_COMPRESSION_LEVEL", "SPATIAL", "SPECIFIC", "SQL", "SQLEXCEPTION", "SQLSTATE", "SQLWARNING", "SQL_AFTER_GTIDS", "SQL_AFTER_MTS_GAPS", "SQL_BEFORE_GTIDS", "SQL_BIG_RESULT", "SQL_BUFFER_RESULT", "SQL_CACHE", "SQL_CALC_FOUND_ROWS", "SQL_NO_CACHE", "SQL_SMALL_RESULT", "SQL_THREAD", "SQL_TSI_DAY", "SQL_TSI_HOUR", "SQL_TSI_MINUTE", "SQL_TSI_MONTH", "SQL_TSI_QUARTER", "SQL_TSI_SECOND", "SQL_TSI_WEEK", "SQL_TSI_YEAR", "SRID", "SSL", "STACKED", "START", "STARTING", "STARTS", "STATS_AUTO_RECALC", "STATS_PERSISTENT", "STATS_SAMPLE_PAGES", "STATUS", "STOP", "STORAGE", "STORED", "STREAM", "STRING", "SUBCLASS_ORIGIN", "SUBJECT", "SUBPARTITION", "SUBPARTITIONS", "SUPER", "SUSPEND", "SWAPS", "SWITCHES", "SYSTEM", "TABLES", "TABLESPACE", "TABLE_CHECKSUM", "TABLE_NAME", "TEMPORARY", "TEMPTABLE", "TERMINATED", "TEXT", "THAN", "THEN", "THREAD_PRIORITY", "TIES", "TINYBLOB", "TINYINT", "TINYTEXT", "TLS", "TO", "TRAILING", "TRANSACTION", "TRIGGER", "TRIGGERS", "TRUE", "TYPE", "TYPES", "UNBOUNDED", "UNCOMMITTED", "UNDEFINED", "UNDO", "UNDOFILE", "UNDO_BUFFER_SIZE", "UNICODE", "UNINSTALL", "UNIQUE", "UNKNOWN", "UNLOCK", "UNREGISTER", "UNSIGNED", "UNTIL", "UPGRADE", "USAGE", "USER_RESOURCES", "USE_FRM", "VALIDATION", "VALUE", "VARBINARY", "VARCHAR", "VARCHARACTER", "VARIABLES", "VARYING", "VCPU", "VIEW", "VIRTUAL", "VISIBLE", "WAIT", "WARNINGS", "WHILE", "WINDOW", "WITHOUT", "WORK", "WRAPPER", "WRITE", "X509", "XID", "XML", "YEAR_MONTH", "ZEROFILL", "ZONE"], F = [
    "ALTER DATABASE",
    "ALTER EVENT",
    "ALTER FUNCTION",
    "ALTER INSTANCE",
    "ALTER LOGFILE GROUP",
    "ALTER PROCEDURE",
    "ALTER RESOURCE GROUP",
    "ALTER SERVER",
    "ALTER TABLE",
    "ALTER TABLESPACE",
    "ALTER USER",
    "ALTER VIEW",
    "ANALYZE TABLE",
    "BINLOG",
    "CACHE INDEX",
    "CALL",
    "CHANGE MASTER TO",
    "CHANGE REPLICATION FILTER",
    "CHANGE REPLICATION SOURCE TO",
    "CHECK TABLE",
    "CHECKSUM TABLE",
    "CLONE",
    "COMMIT",
    "CREATE DATABASE",
    "CREATE EVENT",
    "CREATE FUNCTION",
    "CREATE FUNCTION",
    "CREATE INDEX",
    "CREATE LOGFILE GROUP",
    "CREATE PROCEDURE",
    "CREATE RESOURCE GROUP",
    "CREATE ROLE",
    "CREATE SERVER",
    "CREATE SPATIAL REFERENCE SYSTEM",
    "CREATE TABLE",
    "CREATE TABLESPACE",
    "CREATE TRIGGER",
    "CREATE USER",
    "CREATE VIEW",
    "DEALLOCATE PREPARE",
    "DELETE",
    "DELETE FROM",
    "DESCRIBE",
    "DO",
    "DROP DATABASE",
    "DROP EVENT",
    "DROP FUNCTION",
    "DROP FUNCTION",
    "DROP INDEX",
    "DROP LOGFILE GROUP",
    "DROP PROCEDURE",
    "DROP RESOURCE GROUP",
    "DROP ROLE",
    "DROP SERVER",
    "DROP SPATIAL REFERENCE SYSTEM",
    "DROP TABLE",
    "DROP TABLESPACE",
    "DROP TRIGGER",
    "DROP USER",
    "DROP VIEW",
    "EXECUTE",
    "EXPLAIN",
    "FLUSH",
    "GRANT",
    "HANDLER",
    "HELP",
    "IMPORT TABLE",
    "INSERT",
    "INSTALL COMPONENT",
    "INSTALL PLUGIN",
    "KILL",
    "LOAD DATA",
    "LOAD INDEX INTO CACHE",
    "LOAD XML",
    "LOCK INSTANCE FOR BACKUP",
    "LOCK TABLES",
    "MASTER_POS_WAIT",
    "OPTIMIZE TABLE",
    "PREPARE",
    "PURGE BINARY LOGS",
    "RELEASE SAVEPOINT",
    "RENAME TABLE",
    "RENAME USER",
    "REPAIR TABLE",
    "REPLACE",
    "RESET",
    "RESET MASTER",
    "RESET PERSIST",
    "RESET REPLICA",
    "RESET SLAVE",
    "RESTART",
    "REVOKE",
    "ROLLBACK",
    "ROLLBACK TO SAVEPOINT",
    "SAVEPOINT",
    "SELECT",
    "SET",
    "SET CHARACTER SET",
    "SET DEFAULT ROLE",
    "SET NAMES",
    "SET PASSWORD",
    "SET RESOURCE GROUP",
    "SET ROLE",
    "SET TRANSACTION",
    "SHOW",
    "SHOW BINARY LOGS",
    "SHOW BINLOG EVENTS",
    "SHOW CHARACTER SET",
    "SHOW COLLATION",
    "SHOW COLUMNS",
    "SHOW CREATE DATABASE",
    "SHOW CREATE EVENT",
    "SHOW CREATE FUNCTION",
    "SHOW CREATE PROCEDURE",
    "SHOW CREATE TABLE",
    "SHOW CREATE TRIGGER",
    "SHOW CREATE USER",
    "SHOW CREATE VIEW",
    "SHOW DATABASES",
    "SHOW ENGINE",
    "SHOW ENGINES",
    "SHOW ERRORS",
    "SHOW EVENTS",
    "SHOW FUNCTION CODE",
    "SHOW FUNCTION STATUS",
    "SHOW GRANTS",
    "SHOW INDEX",
    "SHOW MASTER STATUS",
    "SHOW OPEN TABLES",
    "SHOW PLUGINS",
    "SHOW PRIVILEGES",
    "SHOW PROCEDURE CODE",
    "SHOW PROCEDURE STATUS",
    "SHOW PROCESSLIST",
    "SHOW PROFILE",
    "SHOW PROFILES",
    "SHOW RELAYLOG EVENTS",
    "SHOW REPLICA STATUS",
    "SHOW REPLICAS",
    "SHOW SLAVE",
    "SHOW SLAVE HOSTS",
    "SHOW STATUS",
    "SHOW TABLE STATUS",
    "SHOW TABLES",
    "SHOW TRIGGERS",
    "SHOW VARIABLES",
    "SHOW WARNINGS",
    "SHUTDOWN",
    "SOURCE_POS_WAIT",
    "START GROUP_REPLICATION",
    "START REPLICA",
    "START SLAVE",
    "START TRANSACTION",
    "STOP GROUP_REPLICATION",
    "STOP REPLICA",
    "STOP SLAVE",
    "TABLE",
    "TRUNCATE TABLE",
    "UNINSTALL COMPONENT",
    "UNINSTALL PLUGIN",
    "UNLOCK INSTANCE",
    "UNLOCK TABLES",
    "UPDATE",
    "USE",
    "VALUES",
    "WITH",
    "XA",
    // flow control
    // 'IF',
    "ITERATE",
    "LEAVE",
    "LOOP",
    "REPEAT",
    "RETURN",
    "WHILE",
    // other
    "ADD",
    "ALTER COLUMN",
    "FROM",
    "GROUP BY",
    "HAVING",
    "INSERT INTO",
    "LIMIT",
    "OFFSET",
    "ORDER BY",
    "WHERE",
    "WINDOW",
    "PARTITION BY"
  ], ae = ["INTERSECT", "INTERSECT ALL", "INTERSECT DISTINCT", "UNION", "UNION ALL", "UNION DISTINCT", "EXCEPT", "EXCEPT ALL", "EXCEPT DISTINCT"], U = [
    "JOIN",
    "INNER JOIN",
    "LEFT JOIN",
    "LEFT OUTER JOIN",
    "RIGHT JOIN",
    "RIGHT OUTER JOIN",
    "CROSS JOIN",
    "NATURAL JOIN",
    // non-standard joins
    "STRAIGHT_JOIN",
    "NATURAL LEFT JOIN",
    "NATURAL LEFT OUTER JOIN",
    "NATURAL RIGHT JOIN",
    "NATURAL RIGHT OUTER JOIN"
  ], G = ["WHEN", "ELSE", "ELSEIF"], H = /* @__PURE__ */ function(B) {
    d(E, B);
    var Y = L(E);
    function E() {
      return f(this, E), Y.apply(this, arguments);
    }
    return O(E, [{
      key: "tokenizer",
      value: function() {
        return new n.default({
          reservedCommands: F,
          reservedBinaryCommands: ae,
          reservedJoins: U,
          reservedDependentClauses: G,
          reservedLogicalOperators: ["AND", "OR", "XOR"],
          reservedKeywords: (0, s.dedupe)([].concat(z, $)),
          stringTypes: ['""', {
            quote: "''",
            prefixes: ["X"]
          }],
          identTypes: ["``"],
          identChars: {
            first: "$",
            rest: "$"
          },
          variableTypes: [{
            regex: "@[A-Za-z0-9_.$]+"
          }, {
            quote: '""',
            prefixes: ["@"],
            requirePrefix: !0
          }, {
            quote: "''",
            prefixes: ["@"],
            requirePrefix: !0
          }, {
            quote: "``",
            prefixes: ["@"],
            requirePrefix: !0
          }],
          positionalParams: !0,
          lineCommentTypes: ["--", "#"],
          operators: E.operators,
          postProcess: re
        });
      }
    }]), E;
  }(i.default);
  t.default = H, _(H, "operators", ["~", ":=", "<<", ">>", "<=>", "&&", "||", "->", "->>"]);
  function re(B) {
    return B.map(function(Y, E) {
      var m = B[E + 1] || a.EOF_TOKEN;
      return a.isToken.SET(Y) && m.value === "(" ? c(c({}, Y), {}, {
        type: a.TokenType.RESERVED_KEYWORD
      }) : Y;
    });
  }
  e.exports = t.default;
})(Xl, Xl.exports);
var Q_ = Xl.exports, jl = { exports: {} };
(function(e, t) {
  function r(U) {
    "@babel/helpers - typeof";
    return r = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(G) {
      return typeof G;
    } : function(G) {
      return G && typeof Symbol == "function" && G.constructor === Symbol && G !== Symbol.prototype ? "symbol" : typeof G;
    }, r(U);
  }
  Object.defineProperty(t, "__esModule", {
    value: !0
  }), t.default = void 0;
  var i = s(ur), n = s(cr), a = Xe;
  function s(U) {
    return U && U.__esModule ? U : { default: U };
  }
  function o(U, G) {
    if (!(U instanceof G))
      throw new TypeError("Cannot call a class as a function");
  }
  function l(U, G) {
    for (var H = 0; H < G.length; H++) {
      var re = G[H];
      re.enumerable = re.enumerable || !1, re.configurable = !0, "value" in re && (re.writable = !0), Object.defineProperty(U, re.key, re);
    }
  }
  function c(U, G, H) {
    return G && l(U.prototype, G), H && l(U, H), Object.defineProperty(U, "prototype", { writable: !1 }), U;
  }
  function f(U, G) {
    if (typeof G != "function" && G !== null)
      throw new TypeError("Super expression must either be null or a function");
    U.prototype = Object.create(G && G.prototype, { constructor: { value: U, writable: !0, configurable: !0 } }), Object.defineProperty(U, "prototype", { writable: !1 }), G && p(U, G);
  }
  function p(U, G) {
    return p = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(re, B) {
      return re.__proto__ = B, re;
    }, p(U, G);
  }
  function O(U) {
    var G = L();
    return function() {
      var re = D(U), B;
      if (G) {
        var Y = D(this).constructor;
        B = Reflect.construct(re, arguments, Y);
      } else
        B = re.apply(this, arguments);
      return d(this, B);
    };
  }
  function d(U, G) {
    if (G && (r(G) === "object" || typeof G == "function"))
      return G;
    if (G !== void 0)
      throw new TypeError("Derived constructors may only return object or undefined");
    return g(U);
  }
  function g(U) {
    if (U === void 0)
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return U;
  }
  function L() {
    if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
      return !1;
    if (typeof Proxy == "function")
      return !0;
    try {
      return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      })), !0;
    } catch {
      return !1;
    }
  }
  function D(U) {
    return D = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(H) {
      return H.__proto__ || Object.getPrototypeOf(H);
    }, D(U);
  }
  function W(U, G, H) {
    return G in U ? Object.defineProperty(U, G, { value: H, enumerable: !0, configurable: !0, writable: !0 }) : U[G] = H, U;
  }
  var x = [
    "ABORT",
    "ABS",
    "ACOS",
    "ADVISOR",
    "ARRAY_AGG",
    "ARRAY_AGG",
    "ARRAY_APPEND",
    "ARRAY_AVG",
    "ARRAY_BINARY_SEARCH",
    "ARRAY_CONCAT",
    "ARRAY_CONTAINS",
    "ARRAY_COUNT",
    "ARRAY_DISTINCT",
    "ARRAY_EXCEPT",
    "ARRAY_FLATTEN",
    "ARRAY_IFNULL",
    "ARRAY_INSERT",
    "ARRAY_INTERSECT",
    "ARRAY_LENGTH",
    "ARRAY_MAX",
    "ARRAY_MIN",
    "ARRAY_MOVE",
    "ARRAY_POSITION",
    "ARRAY_PREPEND",
    "ARRAY_PUT",
    "ARRAY_RANGE",
    "ARRAY_REMOVE",
    "ARRAY_REPEAT",
    "ARRAY_REPLACE",
    "ARRAY_REVERSE",
    "ARRAY_SORT",
    "ARRAY_STAR",
    "ARRAY_SUM",
    "ARRAY_SYMDIFF",
    "ARRAY_SYMDIFF1",
    "ARRAY_SYMDIFFN",
    "ARRAY_UNION",
    "ASIN",
    "ATAN",
    "ATAN2",
    "AVG",
    "BASE64",
    "BASE64_DECODE",
    "BASE64_ENCODE",
    "BITAND ",
    "BITCLEAR ",
    "BITNOT ",
    "BITOR ",
    "BITSET ",
    "BITSHIFT ",
    "BITTEST ",
    "BITXOR ",
    "CEIL",
    "CLOCK_LOCAL",
    "CLOCK_MILLIS",
    "CLOCK_STR",
    "CLOCK_TZ",
    "CLOCK_UTC",
    "COALESCE",
    "CONCAT",
    "CONCAT2",
    "CONTAINS",
    "CONTAINS_TOKEN",
    "CONTAINS_TOKEN_LIKE",
    "CONTAINS_TOKEN_REGEXP",
    "COS",
    "COUNT",
    "COUNT",
    "COUNTN",
    "CUME_DIST",
    "CURL",
    "DATE_ADD_MILLIS",
    "DATE_ADD_STR",
    "DATE_DIFF_MILLIS",
    "DATE_DIFF_STR",
    "DATE_FORMAT_STR",
    "DATE_PART_MILLIS",
    "DATE_PART_STR",
    "DATE_RANGE_MILLIS",
    "DATE_RANGE_STR",
    "DATE_TRUNC_MILLIS",
    "DATE_TRUNC_STR",
    "DECODE",
    "DECODE_JSON",
    "DEGREES",
    "DENSE_RANK",
    "DURATION_TO_STR",
    // 'E',
    "ENCODED_SIZE",
    "ENCODE_JSON",
    "EXP",
    "FIRST_VALUE",
    "FLOOR",
    "GREATEST",
    "HAS_TOKEN",
    "IFINF",
    "IFMISSING",
    "IFMISSINGORNULL",
    "IFNAN",
    "IFNANORINF",
    "IFNULL",
    "INITCAP",
    "ISARRAY",
    "ISATOM",
    "ISBITSET",
    "ISBOOLEAN",
    "ISNUMBER",
    "ISOBJECT",
    "ISSTRING",
    "LAG",
    "LAST_VALUE",
    "LEAD",
    "LEAST",
    "LENGTH",
    "LN",
    "LOG",
    "LOWER",
    "LTRIM",
    "MAX",
    "MEAN",
    "MEDIAN",
    "META",
    "MILLIS",
    "MILLIS_TO_LOCAL",
    "MILLIS_TO_STR",
    "MILLIS_TO_TZ",
    "MILLIS_TO_UTC",
    "MILLIS_TO_ZONE_NAME",
    "MIN",
    "MISSINGIF",
    "NANIF",
    "NEGINFIF",
    "NOW_LOCAL",
    "NOW_MILLIS",
    "NOW_STR",
    "NOW_TZ",
    "NOW_UTC",
    "NTH_VALUE",
    "NTILE",
    "NULLIF",
    "NVL",
    "NVL2",
    "OBJECT_ADD",
    "OBJECT_CONCAT",
    "OBJECT_INNER_PAIRS",
    "OBJECT_INNER_VALUES",
    "OBJECT_LENGTH",
    "OBJECT_NAMES",
    "OBJECT_PAIRS",
    "OBJECT_PUT",
    "OBJECT_REMOVE",
    "OBJECT_RENAME",
    "OBJECT_REPLACE",
    "OBJECT_UNWRAP",
    "OBJECT_VALUES",
    "PAIRS",
    "PERCENT_RANK",
    "PI",
    "POLY_LENGTH",
    "POSINFIF",
    "POSITION",
    "POWER",
    "RADIANS",
    "RANDOM",
    "RANK",
    "RATIO_TO_REPORT",
    "REGEXP_CONTAINS",
    "REGEXP_LIKE",
    "REGEXP_MATCHES",
    "REGEXP_POSITION",
    "REGEXP_REPLACE",
    "REGEXP_SPLIT",
    "REGEX_CONTAINS",
    "REGEX_LIKE",
    "REGEX_MATCHES",
    "REGEX_POSITION",
    "REGEX_REPLACE",
    "REGEX_SPLIT",
    "REPEAT",
    "REPLACE",
    "REVERSE",
    "ROUND",
    "ROW_NUMBER",
    "RTRIM",
    "SEARCH",
    "SEARCH_META",
    "SEARCH_SCORE",
    "SIGN",
    "SIN",
    "SPLIT",
    "SQRT",
    "STDDEV",
    "STDDEV_POP",
    "STDDEV_SAMP",
    "STR_TO_DURATION",
    "STR_TO_MILLIS",
    "STR_TO_TZ",
    "STR_TO_UTC",
    "STR_TO_ZONE_NAME",
    "SUBSTR",
    "SUFFIXES",
    "SUM",
    "TAN",
    "TITLE",
    "TOARRAY",
    "TOATOM",
    "TOBOOLEAN",
    "TOKENS",
    "TOKENS",
    "TONUMBER",
    "TOOBJECT",
    "TOSTRING",
    "TRIM",
    "TRUNC",
    // 'TYPE', // disabled
    "UPPER",
    "UUID",
    "VARIANCE",
    "VARIANCE_POP",
    "VARIANCE_SAMP",
    "VAR_POP",
    "VAR_SAMP",
    "WEEKDAY_MILLIS",
    "WEEKDAY_STR"
  ], V = [
    "ALL",
    "ALTER",
    "ANALYZE",
    "ANY",
    "ARRAY",
    "AS",
    "ASC",
    "AT",
    "BEGIN",
    "BETWEEN",
    "BINARY",
    "BOOLEAN",
    "BREAK",
    "BUCKET",
    "BUILD",
    "BY",
    "CALL",
    "CAST",
    "CHAR",
    // verify
    "CLUSTER",
    "COLLATE",
    "COLLECTION",
    "COMMIT",
    "COMMITTED",
    "CONNECT",
    "CONTINUE",
    "CORRELATE",
    "CORRELATED",
    "COVER",
    "CREATE",
    "CURRENT",
    "DATABASE",
    "DATASET",
    "DATASTORE",
    "DECLARE",
    "DECREMENT",
    "DERIVED",
    "DESC",
    "DESCRIBE",
    "DISTINCT",
    "DO",
    "DROP",
    "EACH",
    "ELEMENT",
    "EVERY",
    "EXCLUDE",
    "EXISTS",
    "FALSE",
    "FETCH",
    "FILTER",
    "FIRST",
    "FLATTEN",
    "FLUSH",
    "FOLLOWING",
    "FOR",
    "FORCE",
    "FTS",
    "FUNCTION",
    "GOLANG",
    "GROUP",
    "GROUPS",
    "GSI",
    "HASH",
    "IF",
    "IGNORE",
    "ILIKE",
    "IN",
    "INCLUDE",
    "INCREMENT",
    "INDEX",
    "INLINE",
    "INNER",
    "INTO",
    "IS",
    "ISOLATION",
    "JAVASCRIPT",
    "KEY",
    "KEYS",
    "KEYSPACE",
    "KNOWN",
    "LANGUAGE",
    "LAST",
    "LEFT",
    "LETTING",
    "LEVEL",
    "LIKE",
    "LSM",
    "MAP",
    "MAPPING",
    "MATCHED",
    "MATERIALIZED",
    "MISSING",
    "NAMESPACE",
    "NL",
    "NO",
    "NOT",
    "NULL",
    "NULLS",
    "NUMBER",
    "OBJECT",
    "OFFSET",
    "OPTION",
    "OPTIONS",
    "ORDER",
    "OTHERS",
    "OUTER",
    "OVER",
    "PARSE",
    "PARTITION",
    "PASSWORD",
    "PATH",
    "POOL",
    "PRECEDING",
    "PRIMARY",
    "PRIVATE",
    "PRIVILEGE",
    "PROBE",
    "PROCEDURE",
    "PUBLIC",
    "RANGE",
    "RAW",
    "REALM",
    "REDUCE",
    "RENAME",
    "RESPECT",
    "RETURN",
    "RIGHT",
    "ROLE",
    "ROLLBACK",
    "ROW",
    "ROWS",
    "SATISFIES",
    "SCHEMA",
    "SCOPE",
    "SELF",
    "SEMI",
    "SOME",
    "START",
    "STATISTICS",
    "STRING",
    "SYSTEM",
    "THEN",
    "TIES",
    "TO",
    "TRAN",
    "TRANSACTION",
    "TRIGGER",
    "TRUE",
    "TRUNCATE",
    "UNBOUNDED",
    "UNDER",
    "UNIQUE",
    "UNKNOWN",
    "UNSET",
    "USE",
    "USER",
    "VALIDATE",
    "VALUE",
    "VALUED",
    "VIA",
    "VIEW",
    "WHILE",
    "WINDOW",
    "WITHIN",
    "WORK"
  ], _ = [
    "ADVISE",
    "ALTER INDEX",
    "BEGIN TRANSACTION",
    "BUILD INDEX",
    "COMMIT TRANSACTION",
    "CREATE COLLECTION",
    "CREATE FUNCTION",
    "CREATE INDEX",
    "CREATE PRIMARY INDEX",
    "CREATE SCOPE",
    "CREATE TABLE",
    // verify
    "DELETE",
    "DELETE FROM",
    "DROP COLLECTION",
    "DROP FUNCTION",
    "DROP INDEX",
    "DROP PRIMARY INDEX",
    "DROP SCOPE",
    "EXECUTE",
    "EXECUTE FUNCTION",
    "EXPLAIN",
    "GRANT",
    "INFER",
    "INSERT",
    "MERGE",
    "PREPARE",
    "RETURNING",
    "REVOKE",
    "ROLLBACK TRANSACTION",
    "SAVEPOINT",
    "SELECT",
    "SET TRANSACTION",
    "UPDATE",
    "UPDATE STATISTICS",
    "UPSERT",
    // other
    "DROP TABLE",
    // verify,
    "FROM",
    "GROUP BY",
    "HAVING",
    "INSERT INTO",
    "LET",
    "LIMIT",
    "OFFSET",
    "NEST",
    "ORDER BY",
    "SET CURRENT SCHEMA",
    "SET SCHEMA",
    "SET",
    "SHOW",
    "UNNEST",
    "USE KEYS",
    "VALUES",
    "WHERE",
    "WITH",
    "WINDOW",
    "PARTITION BY"
  ], $ = ["INTERSECT", "INTERSECT ALL", "INTERSECT DISTINCT", "UNION", "UNION ALL", "UNION DISTINCT", "EXCEPT", "EXCEPT ALL", "EXCEPT DISTINCT", "MINUS", "MINUS ALL", "MINUS DISTINCT"], z = ["JOIN", "INNER JOIN", "LEFT JOIN", "LEFT OUTER JOIN", "RIGHT JOIN", "RIGHT OUTER JOIN"], F = ["WHEN", "ELSE"], ae = /* @__PURE__ */ function(U) {
    f(H, U);
    var G = O(H);
    function H() {
      return o(this, H), G.apply(this, arguments);
    }
    return c(H, [{
      key: "tokenizer",
      value: function() {
        return new n.default({
          reservedCommands: _,
          reservedBinaryCommands: $,
          reservedJoins: z,
          reservedDependentClauses: F,
          reservedLogicalOperators: ["AND", "OR", "XOR"],
          reservedKeywords: (0, a.dedupe)([].concat(V, x)),
          // NOTE: single quotes are actually not supported in N1QL,
          // but we support them anyway as all other SQL dialects do,
          // which simplifies writing tests that are shared between all dialects.
          stringTypes: ['""', "''"],
          identTypes: ["``"],
          openParens: ["(", "[", "{"],
          closeParens: [")", "]", "}"],
          positionalParams: !0,
          numberedParamTypes: ["$"],
          namedParamTypes: ["$"],
          lineCommentTypes: ["#", "--"],
          operators: H.operators
        });
      }
    }]), H;
  }(i.default);
  t.default = ae, W(ae, "operators", ["==", "||"]), e.exports = t.default;
})(jl, jl.exports);
var G_ = jl.exports, Zl = { exports: {} };
(function(e, t) {
  function r(A) {
    "@babel/helpers - typeof";
    return r = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(y) {
      return typeof y;
    } : function(y) {
      return y && typeof Symbol == "function" && y.constructor === Symbol && y !== Symbol.prototype ? "symbol" : typeof y;
    }, r(A);
  }
  Object.defineProperty(t, "__esModule", {
    value: !0
  }), t.default = void 0;
  var i = o(ur), n = o(cr), a = it, s = Xe;
  function o(A) {
    return A && A.__esModule ? A : { default: A };
  }
  function l(A, y) {
    var C = Object.keys(A);
    if (Object.getOwnPropertySymbols) {
      var j = Object.getOwnPropertySymbols(A);
      y && (j = j.filter(function(w) {
        return Object.getOwnPropertyDescriptor(A, w).enumerable;
      })), C.push.apply(C, j);
    }
    return C;
  }
  function c(A) {
    for (var y = 1; y < arguments.length; y++) {
      var C = arguments[y] != null ? arguments[y] : {};
      y % 2 ? l(Object(C), !0).forEach(function(j) {
        G(A, j, C[j]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(A, Object.getOwnPropertyDescriptors(C)) : l(Object(C)).forEach(function(j) {
        Object.defineProperty(A, j, Object.getOwnPropertyDescriptor(C, j));
      });
    }
    return A;
  }
  function f(A) {
    return g(A) || d(A) || O(A) || p();
  }
  function p() {
    throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
  }
  function O(A, y) {
    if (A) {
      if (typeof A == "string")
        return L(A, y);
      var C = Object.prototype.toString.call(A).slice(8, -1);
      if (C === "Object" && A.constructor && (C = A.constructor.name), C === "Map" || C === "Set")
        return Array.from(A);
      if (C === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(C))
        return L(A, y);
    }
  }
  function d(A) {
    if (typeof Symbol < "u" && A[Symbol.iterator] != null || A["@@iterator"] != null)
      return Array.from(A);
  }
  function g(A) {
    if (Array.isArray(A))
      return L(A);
  }
  function L(A, y) {
    (y == null || y > A.length) && (y = A.length);
    for (var C = 0, j = new Array(y); C < y; C++)
      j[C] = A[C];
    return j;
  }
  function D(A, y) {
    if (!(A instanceof y))
      throw new TypeError("Cannot call a class as a function");
  }
  function W(A, y) {
    for (var C = 0; C < y.length; C++) {
      var j = y[C];
      j.enumerable = j.enumerable || !1, j.configurable = !0, "value" in j && (j.writable = !0), Object.defineProperty(A, j.key, j);
    }
  }
  function x(A, y, C) {
    return y && W(A.prototype, y), C && W(A, C), Object.defineProperty(A, "prototype", { writable: !1 }), A;
  }
  function V(A, y) {
    if (typeof y != "function" && y !== null)
      throw new TypeError("Super expression must either be null or a function");
    A.prototype = Object.create(y && y.prototype, { constructor: { value: A, writable: !0, configurable: !0 } }), Object.defineProperty(A, "prototype", { writable: !1 }), y && _(A, y);
  }
  function _(A, y) {
    return _ = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(j, w) {
      return j.__proto__ = w, j;
    }, _(A, y);
  }
  function $(A) {
    var y = ae();
    return function() {
      var j = U(A), w;
      if (y) {
        var J = U(this).constructor;
        w = Reflect.construct(j, arguments, J);
      } else
        w = j.apply(this, arguments);
      return z(this, w);
    };
  }
  function z(A, y) {
    if (y && (r(y) === "object" || typeof y == "function"))
      return y;
    if (y !== void 0)
      throw new TypeError("Derived constructors may only return object or undefined");
    return F(A);
  }
  function F(A) {
    if (A === void 0)
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return A;
  }
  function ae() {
    if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
      return !1;
    if (typeof Proxy == "function")
      return !0;
    try {
      return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      })), !0;
    } catch {
      return !1;
    }
  }
  function U(A) {
    return U = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(C) {
      return C.__proto__ || Object.getPrototypeOf(C);
    }, U(A);
  }
  function G(A, y, C) {
    return y in A ? Object.defineProperty(A, y, { value: C, enumerable: !0, configurable: !0, writable: !0 }) : A[y] = C, A;
  }
  var H = {
    numeric: ["ABS", "ACOS", "ASIN", "ATAN", "ATAN2", "BITAND", "CEIL", "COS", "COSH", "EXP", "FLOOR", "LN", "LOG", "MOD", "NANVL", "POWER", "REMAINDER", "ROUND", "SIGN", "SIN", "SINH", "SQRT", "TAN", "TANH", "TRUNC", "WIDTH_BUCKET"],
    character: ["CHR", "CONCAT", "INITCAP", "LOWER", "LPAD", "LTRIM", "NLS_INITCAP", "NLS_LOWER", "NLSSORT", "NLS_UPPER", "REGEXP_REPLACE", "REGEXP_SUBSTR", "REPLACE", "RPAD", "RTRIM", "SOUNDEX", "SUBSTR", "TRANSLATE", "TREAT", "TRIM", "UPPER", "NLS_CHARSET_DECL_LEN", "NLS_CHARSET_ID", "NLS_CHARSET_NAME", "ASCII", "INSTR", "LENGTH", "REGEXP_INSTR"],
    datetime: ["ADD_MONTHS", "CURRENT_DATE", "CURRENT_TIMESTAMP", "DBTIMEZONE", "EXTRACT", "FROM_TZ", "LAST_DAY", "LOCALTIMESTAMP", "MONTHS_BETWEEN", "NEW_TIME", "NEXT_DAY", "NUMTODSINTERVAL", "NUMTOYMINTERVAL", "ROUND", "SESSIONTIMEZONE", "SYS_EXTRACT_UTC", "SYSDATE", "SYSTIMESTAMP", "TO_CHAR", "TO_TIMESTAMP", "TO_TIMESTAMP_TZ", "TO_DSINTERVAL", "TO_YMINTERVAL", "TRUNC", "TZ_OFFSET"],
    comparison: ["GREATEST", "LEAST"],
    conversion: ["ASCIISTR", "BIN_TO_NUM", "CAST", "CHARTOROWID", "COMPOSE", "CONVERT", "DECOMPOSE", "HEXTORAW", "NUMTODSINTERVAL", "NUMTOYMINTERVAL", "RAWTOHEX", "RAWTONHEX", "ROWIDTOCHAR", "ROWIDTONCHAR", "SCN_TO_TIMESTAMP", "TIMESTAMP_TO_SCN", "TO_BINARY_DOUBLE", "TO_BINARY_FLOAT", "TO_CHAR", "TO_CLOB", "TO_DATE", "TO_DSINTERVAL", "TO_LOB", "TO_MULTI_BYTE", "TO_NCHAR", "TO_NCLOB", "TO_NUMBER", "TO_DSINTERVAL", "TO_SINGLE_BYTE", "TO_TIMESTAMP", "TO_TIMESTAMP_TZ", "TO_YMINTERVAL", "TO_YMINTERVAL", "TRANSLATE", "UNISTR"],
    largeObject: ["BFILENAME", "EMPTY_BLOB,", "EMPTY_CLOB"],
    collection: ["CARDINALITY", "COLLECT", "POWERMULTISET", "POWERMULTISET_BY_CARDINALITY", "SET"],
    hierarchical: ["SYS_CONNECT_BY_PATH"],
    dataMining: ["CLUSTER_ID", "CLUSTER_PROBABILITY", "CLUSTER_SET", "FEATURE_ID", "FEATURE_SET", "FEATURE_VALUE", "PREDICTION", "PREDICTION_COST", "PREDICTION_DETAILS", "PREDICTION_PROBABILITY", "PREDICTION_SET"],
    xml: ["APPENDCHILDXML", "DELETEXML", "DEPTH", "EXTRACT", "EXISTSNODE", "EXTRACTVALUE", "INSERTCHILDXML", "INSERTXMLBEFORE", "PATH", "SYS_DBURIGEN", "SYS_XMLAGG", "SYS_XMLGEN", "UPDATEXML", "XMLAGG", "XMLCDATA", "XMLCOLATTVAL", "XMLCOMMENT", "XMLCONCAT", "XMLFOREST", "XMLPARSE", "XMLPI", "XMLQUERY", "XMLROOT", "XMLSEQUENCE", "XMLSERIALIZE", "XMLTABLE", "XMLTRANSFORM"],
    encoding: ["DECODE", "DUMP", "ORA_HASH", "VSIZE"],
    nullRelated: ["COALESCE", "LNNVL", "NULLIF", "NVL", "NVL2"],
    env: ["SYS_CONTEXT", "SYS_GUID", "SYS_TYPEID", "UID", "USER", "USERENV"],
    aggregate: ["AVG", "COLLECT", "CORR", "CORR_S", "CORR_K", "COUNT", "COVAR_POP", "COVAR_SAMP", "CUME_DIST", "DENSE_RANK", "FIRST", "GROUP_ID", "GROUPING", "GROUPING_ID", "LAST", "MAX", "MEDIAN", "MIN", "PERCENTILE_CONT", "PERCENTILE_DISC", "PERCENT_RANK", "RANK", "REGR_SLOPE", "REGR_INTERCEPT", "REGR_COUNT", "REGR_R2", "REGR_AVGX", "REGR_AVGY", "REGR_SXX", "REGR_SYY", "REGR_SXY", "STATS_BINOMIAL_TEST", "STATS_CROSSTAB", "STATS_F_TEST", "STATS_KS_TEST", "STATS_MODE", "STATS_MW_TEST", "STATS_ONE_WAY_ANOVA", "STATS_T_TEST_ONE", "STATS_T_TEST_PAIRED", "STATS_T_TEST_INDEP", "STATS_T_TEST_INDEPU", "STATS_WSR_TEST", "STDDEV", "STDDEV_POP", "STDDEV_SAMP", "SUM", "VAR_POP", "VAR_SAMP", "VARIANCE"],
    // Windowing functions (minus the ones already listed in aggregates)
    window: ["FIRST_VALUE", "LAG", "LAST_VALUE", "LEAD", "NTILE", "RATIO_TO_REPORT", "ROW_NUMBER"],
    objectReference: ["DEREF", "MAKE_REF", "REF", "REFTOHEX", "VALUE"],
    model: ["CV", "ITERATION_NUMBER", "PRESENTNNV", "PRESENTV", "PREVIOUS"]
  }, re = [
    // 'A',
    "ACCESSIBLE",
    "AGENT",
    "AGGREGATE",
    "ALL",
    "ALTER",
    "ANY",
    "ARRAY",
    "AS",
    "ASC",
    "AT",
    "ATTRIBUTE",
    "AUTHID",
    "AVG",
    "BETWEEN",
    "BFILE_BASE",
    "BINARY",
    "BINARY_INTEGER",
    "BLOB_BASE",
    "BLOCK",
    "BODY",
    "BOOLEAN",
    "BOTH",
    "BOUND",
    "BREADTH",
    "BULK",
    "BY",
    "BYTE",
    // 'C',
    "CALL",
    "CALLING",
    "CASCADE",
    "CAST",
    "CHAR",
    "CHARACTER",
    "CHARSET",
    "CHARSETFORM",
    "CHARSETID",
    "CHAR_BASE",
    "CHECK",
    "CLOB_BASE",
    "CLONE",
    "CLOSE",
    "CLUSTER",
    "CLUSTERS",
    "COALESCE",
    "COLAUTH",
    "COLLECT",
    "COLUMNS",
    "COMMENT",
    "COMMIT",
    "COMMITTED",
    "COMPILED",
    "COMPRESS",
    "CONNECT",
    "CONSTANT",
    "CONSTRUCTOR",
    "CONTEXT",
    "CONTINUE",
    "CONVERT",
    "COUNT",
    "CRASH",
    "CREATE",
    "CREDENTIAL",
    "CURRENT",
    "CURRVAL",
    "CURSOR",
    "CUSTOMDATUM",
    "DANGLING",
    "DATA",
    "DATE",
    "DATE_BASE",
    "DAY",
    "DECIMAL",
    "DEFAULT",
    "DEFINE",
    "DEPTH",
    "DESC",
    "DETERMINISTIC",
    "DIRECTORY",
    "DISTINCT",
    "DO",
    "DOUBLE",
    "DROP",
    "DURATION",
    "ELEMENT",
    "ELSIF",
    "EMPTY",
    "ESCAPE",
    "EXCEPTIONS",
    "EXCLUSIVE",
    "EXECUTE",
    "EXISTS",
    "EXIT",
    "EXTENDS",
    "EXTERNAL",
    "EXTRACT",
    "FALSE",
    "FETCH",
    "FINAL",
    "FIRST",
    "FIXED",
    "FLOAT",
    "FOR",
    "FORALL",
    "FORCE",
    "FUNCTION",
    "GENERAL",
    "GOTO",
    "GRANT",
    "GROUP",
    "HASH",
    "HEAP",
    "HIDDEN",
    "HOUR",
    "IDENTIFIED",
    "IF",
    "IMMEDIATE",
    "IN",
    "INCLUDING",
    "INDEX",
    "INDEXES",
    "INDICATOR",
    "INDICES",
    "INFINITE",
    "INSTANTIABLE",
    "INT",
    "INTEGER",
    "INTERFACE",
    "INTERVAL",
    "INTO",
    "INVALIDATE",
    "IS",
    "ISOLATION",
    "JAVA",
    "LANGUAGE",
    "LARGE",
    "LEADING",
    "LENGTH",
    "LEVEL",
    "LIBRARY",
    "LIKE",
    "LIKE2",
    "LIKE4",
    "LIKEC",
    "LIMITED",
    "LOCAL",
    "LOCK",
    "LONG",
    "MAP",
    "MAX",
    "MAXLEN",
    "MEMBER",
    "MERGE",
    "MIN",
    "MINUTE",
    "MLSLABEL",
    "MOD",
    "MODE",
    "MONTH",
    "MULTISET",
    "NAME",
    "NAN",
    "NATIONAL",
    "NATIVE",
    "NATURAL",
    "NATURALN",
    "NCHAR",
    "NEW",
    "NEXTVAL",
    "NOCOMPRESS",
    "NOCOPY",
    "NOT",
    "NOWAIT",
    "NULL",
    "NULLIF",
    "NUMBER",
    "NUMBER_BASE",
    "OBJECT",
    "OCICOLL",
    "OCIDATE",
    "OCIDATETIME",
    "OCIDURATION",
    "OCIINTERVAL",
    "OCILOBLOCATOR",
    "OCINUMBER",
    "OCIRAW",
    "OCIREF",
    "OCIREFCURSOR",
    "OCIROWID",
    "OCISTRING",
    "OCITYPE",
    "OF",
    "OLD",
    "ON DELETE",
    "ON UPDATE",
    "ONLY",
    "OPAQUE",
    "OPEN",
    "OPERATOR",
    "OPTION",
    "ORACLE",
    "ORADATA",
    "ORDER",
    "ORGANIZATION",
    "ORLANY",
    "ORLVARY",
    "OTHERS",
    "OUT",
    "OVERLAPS",
    "OVERRIDING",
    "PACKAGE",
    "PARALLEL_ENABLE",
    "PARAMETER",
    "PARAMETERS",
    "PARENT",
    "PARTITION",
    "PASCAL",
    "PCTFREE",
    "PIPE",
    "PIPELINED",
    "PLS_INTEGER",
    "PLUGGABLE",
    "POSITIVE",
    "POSITIVEN",
    "PRAGMA",
    "PRECISION",
    "PRIOR",
    "PRIVATE",
    "PROCEDURE",
    "PUBLIC",
    "RAISE",
    "RANGE",
    "RAW",
    "READ",
    "REAL",
    "RECORD",
    "REF",
    "REFERENCE",
    "RELEASE",
    "RELIES_ON",
    "REM",
    "REMAINDER",
    "RENAME",
    "RESOURCE",
    "RESULT",
    "RESULT_CACHE",
    "RETURN",
    "REVERSE",
    "REVOKE",
    "ROLLBACK",
    "ROW",
    "ROWID",
    "ROWNUM",
    "ROWTYPE",
    "SAMPLE",
    "SAVE",
    "SAVEPOINT",
    "SB1",
    "SB2",
    "SB4",
    "SEARCH",
    "SECOND",
    "SEGMENT",
    "SELF",
    "SEPARATE",
    "SEQUENCE",
    "SERIALIZABLE",
    "SHARE",
    "SHORT",
    "SIZE",
    "SIZE_T",
    "SMALLINT",
    "SOME",
    "SPACE",
    "SPARSE",
    "SQL",
    "SQLCODE",
    "SQLDATA",
    "SQLERRM",
    "SQLNAME",
    "SQLSTATE",
    "STANDARD",
    "START",
    "STATIC",
    "STDDEV",
    "STORED",
    "STRING",
    "STRUCT",
    "STYLE",
    "SUBMULTISET",
    "SUBPARTITION",
    "SUBSTITUTABLE",
    "SUBTYPE",
    "SUCCESSFUL",
    "SUM",
    "SYNONYM",
    "SYSDATE",
    "TABAUTH",
    "TABLE",
    "TDO",
    "THE",
    "THEN",
    "TIME",
    "TIMESTAMP",
    "TIMEZONE_ABBR",
    "TIMEZONE_HOUR",
    "TIMEZONE_MINUTE",
    "TIMEZONE_REGION",
    "TO",
    "TRAILING",
    "TRANSACTION",
    "TRANSACTIONAL",
    "TRIGGER",
    "TRUE",
    "TRUSTED",
    "TYPE",
    "UB1",
    "UB2",
    "UB4",
    "UID",
    "UNDER",
    "UNIQUE",
    "UNPLUG",
    "UNSIGNED",
    "UNTRUSTED",
    "USE",
    "USER",
    "VALIDATE",
    "VALIST",
    "VALUE",
    "VARCHAR",
    "VARCHAR2",
    "VARIABLE",
    "VARIANCE",
    "VARRAY",
    "VARYING",
    "VIEW",
    "VIEWS",
    "VOID",
    "WHENEVER",
    "WHILE",
    "WORK",
    "WRAPPED",
    "WRITE",
    "YEAR",
    "ZONE"
  ], B = [
    "ADD",
    "ALTER COLUMN",
    "ALTER TABLE",
    "BEGIN",
    "CONNECT BY",
    "CREATE TABLE",
    // verify
    "DROP TABLE",
    // verify
    "DECLARE",
    "DELETE",
    "DELETE FROM",
    "EXCEPT",
    "EXCEPTION",
    "FETCH FIRST",
    "FROM",
    "GROUP BY",
    "HAVING",
    "INSERT INTO",
    "INSERT",
    "LIMIT",
    "OFFSET",
    "LOOP",
    "MODIFY",
    "ORDER BY",
    "RETURNING",
    "SELECT",
    "SET CURRENT SCHEMA",
    "SET SCHEMA",
    "SET",
    "START WITH",
    "UPDATE",
    "VALUES",
    "WHERE",
    "WITH"
  ], Y = [
    // set booleans
    "INTERSECT",
    "INTERSECT ALL",
    "INTERSECT DISTINCT",
    "UNION",
    "UNION ALL",
    "UNION DISTINCT",
    "EXCEPT",
    "EXCEPT ALL",
    "EXCEPT DISTINCT",
    "MINUS",
    "MINUS ALL",
    "MINUS DISTINCT",
    // apply
    "CROSS APPLY",
    "OUTER APPLY"
  ], E = ["JOIN", "INNER JOIN", "LEFT JOIN", "LEFT OUTER JOIN", "RIGHT JOIN", "RIGHT OUTER JOIN", "FULL JOIN", "FULL OUTER JOIN", "CROSS JOIN", "NATURAL JOIN"], m = ["WHEN", "ELSE"], P = /* @__PURE__ */ function(A) {
    V(C, A);
    var y = $(C);
    function C() {
      return D(this, C), y.apply(this, arguments);
    }
    return x(C, [{
      key: "tokenizer",
      value: function() {
        return new n.default({
          reservedCommands: B,
          reservedBinaryCommands: Y,
          reservedJoins: E,
          reservedDependentClauses: m,
          reservedLogicalOperators: ["AND", "OR", "XOR"],
          reservedKeywords: (0, s.dedupe)([].concat(re, f(Object.values(H).flat()))),
          // TODO: support custom-delimited strings: Q'{..}' q'<..>' etc
          stringTypes: [{
            quote: "''",
            prefixes: ["N"]
          }],
          identTypes: ['""'],
          identChars: {
            rest: "$#"
          },
          variableTypes: [{
            regex: "&{1,2}[A-Za-z][A-Za-z0-9_$#]*"
          }],
          numberedParamTypes: [":"],
          namedParamTypes: [":"],
          paramChars: {},
          // Empty object used on purpose to not allow $ and # chars as specified in identChars
          operators: C.operators,
          postProcess: R
        });
      }
    }]), C;
  }(i.default);
  t.default = P, G(P, "operators", [
    "||",
    "**",
    ":=",
    "~=",
    "^=",
    ">>",
    "<<",
    "=>"
    //  '..' // breaks operator test, handled by .
  ]);
  function R(A) {
    var y = a.EOF_TOKEN;
    return A.map(function(C) {
      return a.isToken.SET(C) && a.isToken.BY(y) ? c(c({}, C), {}, {
        type: a.TokenType.RESERVED_KEYWORD
      }) : ((0, a.isReserved)(C) && (y = C), C);
    });
  }
  e.exports = t.default;
})(Zl, Zl.exports);
var V_ = Zl.exports, Hl = { exports: {} };
(function(e, t) {
  function r(m) {
    "@babel/helpers - typeof";
    return r = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(P) {
      return typeof P;
    } : function(P) {
      return P && typeof Symbol == "function" && P.constructor === Symbol && P !== Symbol.prototype ? "symbol" : typeof P;
    }, r(m);
  }
  Object.defineProperty(t, "__esModule", {
    value: !0
  }), t.default = void 0;
  var i = s(ur), n = s(cr), a = Xe;
  function s(m) {
    return m && m.__esModule ? m : { default: m };
  }
  function o(m) {
    return p(m) || f(m) || c(m) || l();
  }
  function l() {
    throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
  }
  function c(m, P) {
    if (m) {
      if (typeof m == "string")
        return O(m, P);
      var R = Object.prototype.toString.call(m).slice(8, -1);
      if (R === "Object" && m.constructor && (R = m.constructor.name), R === "Map" || R === "Set")
        return Array.from(m);
      if (R === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(R))
        return O(m, P);
    }
  }
  function f(m) {
    if (typeof Symbol < "u" && m[Symbol.iterator] != null || m["@@iterator"] != null)
      return Array.from(m);
  }
  function p(m) {
    if (Array.isArray(m))
      return O(m);
  }
  function O(m, P) {
    (P == null || P > m.length) && (P = m.length);
    for (var R = 0, A = new Array(P); R < P; R++)
      A[R] = m[R];
    return A;
  }
  function d(m, P) {
    if (!(m instanceof P))
      throw new TypeError("Cannot call a class as a function");
  }
  function g(m, P) {
    for (var R = 0; R < P.length; R++) {
      var A = P[R];
      A.enumerable = A.enumerable || !1, A.configurable = !0, "value" in A && (A.writable = !0), Object.defineProperty(m, A.key, A);
    }
  }
  function L(m, P, R) {
    return P && g(m.prototype, P), R && g(m, R), Object.defineProperty(m, "prototype", { writable: !1 }), m;
  }
  function D(m, P) {
    if (typeof P != "function" && P !== null)
      throw new TypeError("Super expression must either be null or a function");
    m.prototype = Object.create(P && P.prototype, { constructor: { value: m, writable: !0, configurable: !0 } }), Object.defineProperty(m, "prototype", { writable: !1 }), P && W(m, P);
  }
  function W(m, P) {
    return W = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(A, y) {
      return A.__proto__ = y, A;
    }, W(m, P);
  }
  function x(m) {
    var P = $();
    return function() {
      var A = z(m), y;
      if (P) {
        var C = z(this).constructor;
        y = Reflect.construct(A, arguments, C);
      } else
        y = A.apply(this, arguments);
      return V(this, y);
    };
  }
  function V(m, P) {
    if (P && (r(P) === "object" || typeof P == "function"))
      return P;
    if (P !== void 0)
      throw new TypeError("Derived constructors may only return object or undefined");
    return _(m);
  }
  function _(m) {
    if (m === void 0)
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return m;
  }
  function $() {
    if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
      return !1;
    if (typeof Proxy == "function")
      return !0;
    try {
      return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      })), !0;
    } catch {
      return !1;
    }
  }
  function z(m) {
    return z = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(R) {
      return R.__proto__ || Object.getPrototypeOf(R);
    }, z(m);
  }
  function F(m, P, R) {
    return P in m ? Object.defineProperty(m, P, { value: R, enumerable: !0, configurable: !0, writable: !0 }) : m[P] = R, m;
  }
  var ae = {
    // https://www.postgresql.org/docs/14/functions-math.html
    math: ["ABS", "ACOS", "ACOSD", "ACOSH", "ASIN", "ASIND", "ASINH", "ATAN", "ATAN2", "ATAN2D", "ATAND", "ATANH", "CBRT", "CEIL", "CEILING", "COS", "COSD", "COSH", "COT", "COTD", "DEGREES", "DIV", "EXP", "FACTORIAL", "FLOOR", "GCD", "LCM", "LN", "LOG", "LOG10", "MIN_SCALE", "MOD", "PI", "POWER", "RADIANS", "RANDOM", "ROUND", "SCALE", "SETSEED", "SIGN", "SIN", "SIND", "SINH", "SQRT", "TAN", "TAND", "TANH", "TRIM_SCALE", "TRUNC", "WIDTH_BUCKET"],
    // https://www.postgresql.org/docs/14/functions-string.html
    string: ["ABS", "ASCII", "BIT_LENGTH", "BTRIM", "CHARACTER_LENGTH", "CHAR_LENGTH", "CHR", "CONCAT", "CONCAT_WS", "FORMAT", "INITCAP", "LEFT", "LENGTH", "LOWER", "LPAD", "LTRIM", "MD5", "NORMALIZE", "OCTET_LENGTH", "OVERLAY", "PARSE_IDENT", "PG_CLIENT_ENCODING", "POSITION", "QUOTE_IDENT", "QUOTE_LITERAL", "QUOTE_NULLABLE", "REGEXP_MATCH", "REGEXP_MATCHES", "REGEXP_REPLACE", "REGEXP_SPLIT_TO_ARRAY", "REGEXP_SPLIT_TO_TABLE", "REPEAT", "REPLACE", "REVERSE", "RIGHT", "RPAD", "RTRIM", "SPLIT_PART", "SPRINTF", "STARTS_WITH", "STRING_AGG", "STRING_TO_ARRAY", "STRING_TO_TABLE", "STRPOS", "SUBSTR", "SUBSTRING", "TO_ASCII", "TO_HEX", "TRANSLATE", "TRIM", "UNISTR", "UPPER"],
    // https://www.postgresql.org/docs/14/functions-binarystring.html
    binary: ["BIT_COUNT", "BIT_LENGTH", "BTRIM", "CONVERT", "CONVERT_FROM", "CONVERT_TO", "DECODE", "ENCODE", "GET_BIT", "GET_BYTE", "LENGTH", "LTRIM", "MD5", "OCTET_LENGTH", "OVERLAY", "POSITION", "RTRIM", "SET_BIT", "SET_BYTE", "SHA224", "SHA256", "SHA384", "SHA512", "STRING_AGG", "SUBSTR", "SUBSTRING", "TRIM"],
    // https://www.postgresql.org/docs/14/functions-bitstring.html
    bitstring: ["BIT_COUNT", "BIT_LENGTH", "GET_BIT", "LENGTH", "OCTET_LENGTH", "OVERLAY", "POSITION", "SET_BIT", "SUBSTRING"],
    // https://www.postgresql.org/docs/14/functions-matching.html
    pattern: ["REGEXP_MATCH", "REGEXP_MATCHES", "REGEXP_REPLACE", "REGEXP_SPLIT_TO_ARRAY", "REGEXP_SPLIT_TO_TABLE"],
    // https://www.postgresql.org/docs/14/functions-formatting.html
    datatype: ["TO_CHAR", "TO_DATE", "TO_NUMBER", "TO_TIMESTAMP"],
    // https://www.postgresql.org/docs/14/functions-datetime.html
    datetime: [
      // 'AGE',
      "CLOCK_TIMESTAMP",
      "CURRENT_DATE",
      "CURRENT_TIME",
      "CURRENT_TIMESTAMP",
      "DATE_BIN",
      "DATE_PART",
      "DATE_TRUNC",
      "EXTRACT",
      "ISFINITE",
      "JUSTIFY_DAYS",
      "JUSTIFY_HOURS",
      "JUSTIFY_INTERVAL",
      "LOCALTIME",
      "LOCALTIMESTAMP",
      "MAKE_DATE",
      "MAKE_INTERVAL",
      "MAKE_TIME",
      "MAKE_TIMESTAMP",
      "MAKE_TIMESTAMPTZ",
      "NOW",
      "PG_SLEEP",
      "PG_SLEEP_FOR",
      "PG_SLEEP_UNTIL",
      "STATEMENT_TIMESTAMP",
      "TIMEOFDAY",
      "TO_TIMESTAMP",
      "TRANSACTION_TIMESTAMP"
    ],
    // https://www.postgresql.org/docs/14/functions-enum.html
    enum: ["ENUM_FIRST", "ENUM_LAST", "ENUM_RANGE"],
    // https://www.postgresql.org/docs/14/functions-geometry.html
    geometry: ["AREA", "BOUND_BOX", "BOX", "CENTER", "CIRCLE", "DIAGONAL", "DIAMETER", "HEIGHT", "ISCLOSED", "ISOPEN", "LENGTH", "LINE", "LSEG", "NPOINTS", "PATH", "PCLOSE", "POINT", "POLYGON", "POPEN", "RADIUS", "SLOPE", "WIDTH"],
    // https://www.postgresql.org/docs/14/functions-net.html
    network: ["ABBREV", "BROADCAST", "FAMILY", "HOST", "HOSTMASK", "INET_MERGE", "INET_SAME_FAMILY", "MACADDR8_SET7BIT", "MASKLEN", "NETMASK", "NETWORK", "SET_MASKLEN", "TEXT", "TRUNC"],
    // https://www.postgresql.org/docs/14/functions-textsearch.html
    textsearch: ["ARRAY_TO_TSVECTOR", "GET_CURRENT_TS_CONFIG", "JSONB_TO_TSVECTOR", "JSON_TO_TSVECTOR", "LENGTH", "NUMNODE", "PHRASETO_TSQUERY", "PLAINTO_TSQUERY", "QUERYTREE", "SETWEIGHT", "STRIP", "TO_TSQUERY", "TO_TSVECTOR", "TSQUERY_PHRASE", "TSVECTOR_TO_ARRAY", "TS_DEBUG", "TS_DELETE", "TS_FILTER", "TS_HEADLINE", "TS_LEXIZE", "TS_PARSE", "TS_RANK", "TS_RANK_CD", "TS_REWRITE", "TS_STAT", "TS_TOKEN_TYPE", "WEBSEARCH_TO_TSQUERY"],
    // https://www.postgresql.org/docs/14/functions-uuid.html
    uuid: ["UUID"],
    // https://www.postgresql.org/docs/14/functions-xml.html
    xml: ["CURSOR_TO_XML", "CURSOR_TO_XMLSCHEMA", "DATABASE_TO_XML", "DATABASE_TO_XMLSCHEMA", "DATABASE_TO_XML_AND_XMLSCHEMA", "NEXTVAL", "QUERY_TO_XML", "QUERY_TO_XMLSCHEMA", "QUERY_TO_XML_AND_XMLSCHEMA", "SCHEMA_TO_XML", "SCHEMA_TO_XMLSCHEMA", "SCHEMA_TO_XML_AND_XMLSCHEMA", "STRING", "TABLE_TO_XML", "TABLE_TO_XMLSCHEMA", "TABLE_TO_XML_AND_XMLSCHEMA", "XMLAGG", "XMLCOMMENT", "XMLCONCAT", "XMLELEMENT", "XMLEXISTS", "XMLFOREST", "XMLPARSE", "XMLPI", "XMLROOT", "XMLSERIALIZE", "XMLTABLE", "XML_IS_WELL_FORMED", "XML_IS_WELL_FORMED_CONTENT", "XML_IS_WELL_FORMED_DOCUMENT", "XPATH", "XPATH_EXISTS"],
    // https://www.postgresql.org/docs/14/functions-json.html
    json: ["ARRAY_TO_JSON", "JSONB_AGG", "JSONB_ARRAY_ELEMENTS", "JSONB_ARRAY_ELEMENTS_TEXT", "JSONB_ARRAY_LENGTH", "JSONB_BUILD_ARRAY", "JSONB_BUILD_OBJECT", "JSONB_EACH", "JSONB_EACH_TEXT", "JSONB_EXTRACT_PATH", "JSONB_EXTRACT_PATH_TEXT", "JSONB_INSERT", "JSONB_OBJECT", "JSONB_OBJECT_AGG", "JSONB_OBJECT_KEYS", "JSONB_PATH_EXISTS", "JSONB_PATH_EXISTS_TZ", "JSONB_PATH_MATCH", "JSONB_PATH_MATCH_TZ", "JSONB_PATH_QUERY", "JSONB_PATH_QUERY_ARRAY", "JSONB_PATH_QUERY_ARRAY_TZ", "JSONB_PATH_QUERY_FIRST", "JSONB_PATH_QUERY_FIRST_TZ", "JSONB_PATH_QUERY_TZ", "JSONB_POPULATE_RECORD", "JSONB_POPULATE_RECORDSET", "JSONB_PRETTY", "JSONB_SET", "JSONB_SET_LAX", "JSONB_STRIP_NULLS", "JSONB_TO_RECORD", "JSONB_TO_RECORDSET", "JSONB_TYPEOF", "JSON_AGG", "JSON_ARRAY_ELEMENTS", "JSON_ARRAY_ELEMENTS_TEXT", "JSON_ARRAY_LENGTH", "JSON_BUILD_ARRAY", "JSON_BUILD_OBJECT", "JSON_EACH", "JSON_EACH_TEXT", "JSON_EXTRACT_PATH", "JSON_EXTRACT_PATH_TEXT", "JSON_OBJECT", "JSON_OBJECT_AGG", "JSON_OBJECT_KEYS", "JSON_POPULATE_RECORD", "JSON_POPULATE_RECORDSET", "JSON_STRIP_NULLS", "JSON_TO_RECORD", "JSON_TO_RECORDSET", "JSON_TYPEOF", "ROW_TO_JSON", "TO_JSON", "TO_JSONB", "TO_TIMESTAMP"],
    // https://www.postgresql.org/docs/14/functions-sequence.html
    sequence: ["CURRVAL", "LASTVAL", "NEXTVAL", "SETVAL"],
    // https://www.postgresql.org/docs/14/functions-conditional.html
    conditional: [
      // 'CASE',
      "COALESCE",
      "GREATEST",
      "LEAST",
      "NULLIF"
    ],
    // https://www.postgresql.org/docs/14/functions-array.html
    array: ["ARRAY_AGG", "ARRAY_APPEND", "ARRAY_CAT", "ARRAY_DIMS", "ARRAY_FILL", "ARRAY_LENGTH", "ARRAY_LOWER", "ARRAY_NDIMS", "ARRAY_POSITION", "ARRAY_POSITIONS", "ARRAY_PREPEND", "ARRAY_REMOVE", "ARRAY_REPLACE", "ARRAY_TO_STRING", "ARRAY_UPPER", "CARDINALITY", "STRING_TO_ARRAY", "TRIM_ARRAY", "UNNEST"],
    // https://www.postgresql.org/docs/14/functions-range.html
    range: ["ISEMPTY", "LOWER", "LOWER_INC", "LOWER_INF", "MULTIRANGE", "RANGE_MERGE", "UPPER", "UPPER_INC", "UPPER_INF"],
    // https://www.postgresql.org/docs/14/functions-aggregate.html
    aggregate: ["ANY", "ARRAY_AGG", "AVG", "BIT_AND", "BIT_OR", "BIT_XOR", "BOOL_AND", "BOOL_OR", "COALESCE", "CORR", "COUNT", "COVAR_POP", "COVAR_SAMP", "CUME_DIST", "DENSE_RANK", "EVERY", "GROUPING", "JSONB_AGG", "JSONB_OBJECT_AGG", "JSON_AGG", "JSON_OBJECT_AGG", "MAX", "MIN", "MODE", "PERCENTILE_CONT", "PERCENTILE_DISC", "PERCENT_RANK", "RANGE_AGG", "RANGE_INTERSECT_AGG", "RANK", "REGR_AVGX", "REGR_AVGY", "REGR_COUNT", "REGR_INTERCEPT", "REGR_R2", "REGR_SLOPE", "REGR_SXX", "REGR_SXY", "REGR_SYY", "SOME", "STDDEV", "STDDEV_POP", "STDDEV_SAMP", "STRING_AGG", "SUM", "TO_JSON", "TO_JSONB", "VARIANCE", "VAR_POP", "VAR_SAMP", "XMLAGG"],
    // https://www.postgresql.org/docs/14/functions-window.html
    window: ["CUME_DIST", "DENSE_RANK", "FIRST_VALUE", "LAG", "LAST_VALUE", "LEAD", "NTH_VALUE", "NTILE", "PERCENT_RANK", "RANK", "ROW_NUMBER"],
    // https://www.postgresql.org/docs/14/functions-srf.html
    set: ["GENERATE_SERIES", "GENERATE_SUBSCRIPTS"],
    // https://www.postgresql.org/docs/14/functions-info.html
    sysInfo: ["ACLDEFAULT", "ACLEXPLODE", "COL_DESCRIPTION", "CURRENT_CATALOG", "CURRENT_DATABASE", "CURRENT_QUERY", "CURRENT_ROLE", "CURRENT_SCHEMA", "CURRENT_SCHEMAS", "CURRENT_USER", "FORMAT_TYPE", "HAS_ANY_COLUMN_PRIVILEGE", "HAS_COLUMN_PRIVILEGE", "HAS_DATABASE_PRIVILEGE", "HAS_FOREIGN_DATA_WRAPPER_PRIVILEGE", "HAS_FUNCTION_PRIVILEGE", "HAS_LANGUAGE_PRIVILEGE", "HAS_SCHEMA_PRIVILEGE", "HAS_SEQUENCE_PRIVILEGE", "HAS_SERVER_PRIVILEGE", "HAS_TABLESPACE_PRIVILEGE", "HAS_TABLE_PRIVILEGE", "HAS_TYPE_PRIVILEGE", "INET_CLIENT_ADDR", "INET_CLIENT_PORT", "INET_SERVER_ADDR", "INET_SERVER_PORT", "MAKEACLITEM", "OBJ_DESCRIPTION", "PG_BACKEND_PID", "PG_BLOCKING_PIDS", "PG_COLLATION_IS_VISIBLE", "PG_CONF_LOAD_TIME", "PG_CONTROL_CHECKPOINT", "PG_CONTROL_INIT", "PG_CONTROL_SYSTEM", "PG_CONVERSION_IS_VISIBLE", "PG_CURRENT_LOGFILE", "PG_CURRENT_SNAPSHOT", "PG_CURRENT_XACT_ID", "PG_CURRENT_XACT_ID_IF_ASSIGNED", "PG_DESCRIBE_OBJECT", "PG_FUNCTION_IS_VISIBLE", "PG_GET_CATALOG_FOREIGN_KEYS", "PG_GET_CONSTRAINTDEF", "PG_GET_EXPR", "PG_GET_FUNCTIONDEF", "PG_GET_FUNCTION_ARGUMENTS", "PG_GET_FUNCTION_IDENTITY_ARGUMENTS", "PG_GET_FUNCTION_RESULT", "PG_GET_INDEXDEF", "PG_GET_KEYWORDS", "PG_GET_OBJECT_ADDRESS", "PG_GET_OWNED_SEQUENCE", "PG_GET_RULEDEF", "PG_GET_SERIAL_SEQUENCE", "PG_GET_STATISTICSOBJDEF", "PG_GET_TRIGGERDEF", "PG_GET_USERBYID", "PG_GET_VIEWDEF", "PG_HAS_ROLE", "PG_IDENTIFY_OBJECT", "PG_IDENTIFY_OBJECT_AS_ADDRESS", "PG_INDEXAM_HAS_PROPERTY", "PG_INDEX_COLUMN_HAS_PROPERTY", "PG_INDEX_HAS_PROPERTY", "PG_IS_OTHER_TEMP_SCHEMA", "PG_JIT_AVAILABLE", "PG_LAST_COMMITTED_XACT", "PG_LISTENING_CHANNELS", "PG_MY_TEMP_SCHEMA", "PG_NOTIFICATION_QUEUE_USAGE", "PG_OPCLASS_IS_VISIBLE", "PG_OPERATOR_IS_VISIBLE", "PG_OPFAMILY_IS_VISIBLE", "PG_OPTIONS_TO_TABLE", "PG_POSTMASTER_START_TIME", "PG_SAFE_SNAPSHOT_BLOCKING_PIDS", "PG_SNAPSHOT_XIP", "PG_SNAPSHOT_XMAX", "PG_SNAPSHOT_XMIN", "PG_STATISTICS_OBJ_IS_VISIBLE", "PG_TABLESPACE_DATABASES", "PG_TABLESPACE_LOCATION", "PG_TABLE_IS_VISIBLE", "PG_TRIGGER_DEPTH", "PG_TS_CONFIG_IS_VISIBLE", "PG_TS_DICT_IS_VISIBLE", "PG_TS_PARSER_IS_VISIBLE", "PG_TS_TEMPLATE_IS_VISIBLE", "PG_TYPEOF", "PG_TYPE_IS_VISIBLE", "PG_VISIBLE_IN_SNAPSHOT", "PG_XACT_COMMIT_TIMESTAMP", "PG_XACT_COMMIT_TIMESTAMP_ORIGIN", "PG_XACT_STATUS", "PQSERVERVERSION", "ROW_SECURITY_ACTIVE", "SESSION_USER", "SHOBJ_DESCRIPTION", "TO_REGCLASS", "TO_REGCOLLATION", "TO_REGNAMESPACE", "TO_REGOPER", "TO_REGOPERATOR", "TO_REGPROC", "TO_REGPROCEDURE", "TO_REGROLE", "TO_REGTYPE", "TXID_CURRENT", "TXID_CURRENT_IF_ASSIGNED", "TXID_CURRENT_SNAPSHOT", "TXID_SNAPSHOT_XIP", "TXID_SNAPSHOT_XMAX", "TXID_SNAPSHOT_XMIN", "TXID_STATUS", "TXID_VISIBLE_IN_SNAPSHOT", "USER", "VERSION"],
    // https://www.postgresql.org/docs/14/functions-admin.html
    sysAdmin: ["BRIN_DESUMMARIZE_RANGE", "BRIN_SUMMARIZE_NEW_VALUES", "BRIN_SUMMARIZE_RANGE", "CONVERT_FROM", "CURRENT_SETTING", "GIN_CLEAN_PENDING_LIST", "PG_ADVISORY_LOCK", "PG_ADVISORY_LOCK_SHARED", "PG_ADVISORY_UNLOCK", "PG_ADVISORY_UNLOCK_ALL", "PG_ADVISORY_UNLOCK_SHARED", "PG_ADVISORY_XACT_LOCK", "PG_ADVISORY_XACT_LOCK_SHARED", "PG_BACKUP_START_TIME", "PG_CANCEL_BACKEND", "PG_COLLATION_ACTUAL_VERSION", "PG_COLUMN_COMPRESSION", "PG_COLUMN_SIZE", "PG_COPY_LOGICAL_REPLICATION_SLOT", "PG_COPY_PHYSICAL_REPLICATION_SLOT", "PG_CREATE_LOGICAL_REPLICATION_SLOT", "PG_CREATE_PHYSICAL_REPLICATION_SLOT", "PG_CREATE_RESTORE_POINT", "PG_CURRENT_WAL_FLUSH_LSN", "PG_CURRENT_WAL_INSERT_LSN", "PG_CURRENT_WAL_LSN", "PG_DATABASE_SIZE", "PG_DROP_REPLICATION_SLOT", "PG_EXPORT_SNAPSHOT", "PG_FILENODE_RELATION", "PG_GET_WAL_REPLAY_PAUSE_STATE", "PG_IMPORT_SYSTEM_COLLATIONS", "PG_INDEXES_SIZE", "PG_IS_IN_BACKUP", "PG_IS_IN_RECOVERY", "PG_IS_WAL_REPLAY_PAUSED", "PG_LAST_WAL_RECEIVE_LSN", "PG_LAST_WAL_REPLAY_LSN", "PG_LAST_XACT_REPLAY_TIMESTAMP", "PG_LOGICAL_EMIT_MESSAGE", "PG_LOGICAL_SLOT_GET_BINARY_CHANGES", "PG_LOGICAL_SLOT_GET_CHANGES", "PG_LOGICAL_SLOT_PEEK_BINARY_CHANGES", "PG_LOGICAL_SLOT_PEEK_CHANGES", "PG_LOG_BACKEND_MEMORY_CONTEXTS", "PG_LS_ARCHIVE_STATUSDIR", "PG_LS_DIR", "PG_LS_LOGDIR", "PG_LS_TMPDIR", "PG_LS_WALDIR", "PG_PARTITION_ANCESTORS", "PG_PARTITION_ROOT", "PG_PARTITION_TREE", "PG_PROMOTE", "PG_READ_BINARY_FILE", "PG_READ_FILE", "PG_RELATION_FILENODE", "PG_RELATION_FILEPATH", "PG_RELATION_SIZE", "PG_RELOAD_CONF", "PG_REPLICATION_ORIGIN_ADVANCE", "PG_REPLICATION_ORIGIN_CREATE", "PG_REPLICATION_ORIGIN_DROP", "PG_REPLICATION_ORIGIN_OID", "PG_REPLICATION_ORIGIN_PROGRESS", "PG_REPLICATION_ORIGIN_SESSION_IS_SETUP", "PG_REPLICATION_ORIGIN_SESSION_PROGRESS", "PG_REPLICATION_ORIGIN_SESSION_RESET", "PG_REPLICATION_ORIGIN_SESSION_SETUP", "PG_REPLICATION_ORIGIN_XACT_RESET", "PG_REPLICATION_ORIGIN_XACT_SETUP", "PG_REPLICATION_SLOT_ADVANCE", "PG_ROTATE_LOGFILE", "PG_SIZE_BYTES", "PG_SIZE_PRETTY", "PG_START_BACKUP", "PG_STAT_FILE", "PG_STOP_BACKUP", "PG_SWITCH_WAL", "PG_TABLESPACE_SIZE", "PG_TABLE_SIZE", "PG_TERMINATE_BACKEND", "PG_TOTAL_RELATION_SIZE", "PG_TRY_ADVISORY_LOCK", "PG_TRY_ADVISORY_LOCK_SHARED", "PG_TRY_ADVISORY_XACT_LOCK", "PG_TRY_ADVISORY_XACT_LOCK_SHARED", "PG_WALFILE_NAME", "PG_WALFILE_NAME_OFFSET", "PG_WAL_LSN_DIFF", "PG_WAL_REPLAY_PAUSE", "PG_WAL_REPLAY_RESUME", "SET_CONFIG"],
    // https://www.postgresql.org/docs/14/functions-trigger.html
    trigger: ["SUPPRESS_REDUNDANT_UPDATES_TRIGGER", "TSVECTOR_UPDATE_TRIGGER", "TSVECTOR_UPDATE_TRIGGER_COLUMN"],
    // https://www.postgresql.org/docs/14/functions-event-triggers.html
    eventTrigger: ["PG_EVENT_TRIGGER_DDL_COMMANDS", "PG_EVENT_TRIGGER_DROPPED_OBJECTS", "PG_EVENT_TRIGGER_TABLE_REWRITE_OID", "PG_EVENT_TRIGGER_TABLE_REWRITE_REASON", "PG_GET_OBJECT_ADDRESS"],
    // https://www.postgresql.org/docs/14/functions-statistics.html
    stats: ["PG_MCV_LIST_ITEMS"]
  }, U = [
    "ABSENT",
    "ABSOLUTE",
    "ACCESS",
    "ACCORDING",
    "ACTION",
    "ADA",
    "ADMIN",
    "AGGREGATE",
    "ALL",
    "ALLOCATE",
    "ALSO",
    "ALTER",
    "ALWAYS",
    "ANALYSE",
    "ARE",
    "ARRAY",
    "ARRAY_MAX_CARDINALITY",
    "AS",
    "ASC",
    "ASENSITIVE",
    "ASSERTION",
    "ASSIGNMENT",
    "ASYMMETRIC",
    "AT",
    "ATOMIC",
    "ATTACH",
    "ATTRIBUTE",
    "ATTRIBUTES",
    "AUTHORIZATION",
    "BACKWARD",
    "BASE64",
    "BEFORE",
    "BEGIN_FRAME",
    "BEGIN_PARTITION",
    "BERNOULLI",
    "BETWEEN",
    "BIGINT",
    "BINARY",
    "BIT",
    "BLOB",
    "BLOCKED",
    "BOM",
    "BOOLEAN",
    "BOTH",
    "BREADTH",
    "BY",
    "CACHE",
    "CALLED",
    "CASCADE",
    "CASCADED",
    "CAST",
    "CATALOG",
    "CATALOG_NAME",
    "CHAIN",
    "CHAINING",
    "CHAR",
    "CHARACTER",
    "CHARACTERISTICS",
    "CHARACTERS",
    "CHARACTER_SET_CATALOG",
    "CHARACTER_SET_NAME",
    "CHARACTER_SET_SCHEMA",
    "CHECK",
    "CLASS",
    "CLASSIFIER",
    "CLASS_ORIGIN",
    "CLOB",
    "COBOL",
    "COLLATE",
    "COLLATION",
    "COLLATION_CATALOG",
    "COLLATION_NAME",
    "COLLATION_SCHEMA",
    "COLLECT",
    "COLUMN",
    "COLUMNS",
    "COLUMN_NAME",
    "COMMAND_FUNCTION",
    "COMMAND_FUNCTION_CODE",
    "COMMENTS",
    "COMMITTED",
    "COMPRESSION",
    "CONCURRENTLY",
    "CONDITION",
    "CONDITIONAL",
    "CONDITION_NUMBER",
    "CONFIGURATION",
    "CONFLICT",
    "CONNECT",
    "CONNECTION",
    "CONNECTION_NAME",
    "CONSTRAINT",
    "CONSTRAINTS",
    "CONSTRAINT_CATALOG",
    "CONSTRAINT_NAME",
    "CONSTRAINT_SCHEMA",
    "CONSTRUCTOR",
    "CONTAINS",
    "CONTENT",
    "CONTINUE",
    "CONTROL",
    "CONVERSION",
    "CORRESPONDING",
    "COST",
    "CREATE",
    "CROSS",
    "CSV",
    "CUBE",
    "CURRENT",
    "CURRENT_DEFAULT_TRANSFORM_GROUP",
    "CURRENT_PATH",
    "CURRENT_ROW",
    "CURRENT_TRANSFORM_GROUP_FOR_TYPE",
    "CURSOR",
    "CURSOR_NAME",
    "CYCLE",
    "DATA",
    "DATABASE",
    "DATALINK",
    "DATE",
    "DATETIME_INTERVAL_CODE",
    "DATETIME_INTERVAL_PRECISION",
    "DAY",
    "DB",
    "DEC",
    "DECFLOAT",
    "DECIMAL",
    "DEFAULT",
    "DEFAULTS",
    "DEFERRABLE",
    "DEFERRED",
    "DEFINE",
    "DEFINED",
    "DEFINER",
    "DEGREE",
    "DELIMITER",
    "DELIMITERS",
    "DEPENDS",
    "DEPTH",
    "DEREF",
    "DERIVED",
    "DESC",
    "DESCRIBE",
    "DESCRIPTOR",
    "DETACH",
    "DETERMINISTIC",
    "DIAGNOSTICS",
    "DICTIONARY",
    "DISABLE",
    "DISCONNECT",
    "DISPATCH",
    "DISTINCT",
    "DLNEWCOPY",
    "DLPREVIOUSCOPY",
    "DLURLCOMPLETE",
    "DLURLCOMPLETEONLY",
    "DLURLCOMPLETEWRITE",
    "DLURLPATH",
    "DLURLPATHONLY",
    "DLURLPATHWRITE",
    "DLURLSCHEME",
    "DLURLSERVER",
    "DLVALUE",
    "DOCUMENT",
    "DOMAIN",
    "DOUBLE",
    "DROP",
    "DYNAMIC",
    "DYNAMIC_FUNCTION",
    "DYNAMIC_FUNCTION_CODE",
    "EACH",
    "ELEMENT",
    "EMPTY",
    "ENABLE",
    "ENCODING",
    "ENCRYPTED",
    "END-EXEC",
    "END_FRAME",
    "END_PARTITION",
    "ENFORCED",
    "ENUM",
    "EQUALS",
    "ERROR",
    "ESCAPE",
    "EVENT",
    "EXCEPTION",
    "EXCLUDE",
    "EXCLUDING",
    "EXCLUSIVE",
    "EXEC",
    "EXISTS",
    "EXPRESSION",
    "EXTENSION",
    "EXTERNAL",
    "FALSE",
    "FILE",
    "FILTER",
    "FINAL",
    "FINALIZE",
    "FINISH",
    "FIRST",
    "FLAG",
    "FLOAT",
    "FOLLOWING",
    "FOR",
    "FORCE",
    "FOREIGN",
    "FORTRAN",
    "FORWARD",
    "FOUND",
    "FRAME_ROW",
    "FREE",
    "FREEZE",
    "FS",
    "FULFILL",
    "FULL",
    "FUNCTION",
    "FUNCTIONS",
    "FUSION",
    "GENERAL",
    "GENERATED",
    "GET",
    "GLOBAL",
    "GO",
    "GOTO",
    "GRANTED",
    "GROUP",
    "GROUPS",
    "HANDLER",
    "HEADER",
    "HEX",
    "HIERARCHY",
    "HOLD",
    "HOUR",
    // 'ID',
    "IDENTITY",
    "IF",
    "IGNORE",
    "ILIKE",
    "IMMEDIATE",
    "IMMEDIATELY",
    "IMMUTABLE",
    "IMPLEMENTATION",
    "IMPLICIT",
    "IMPORT",
    "IN",
    "INCLUDE",
    "INCLUDING",
    "INCREMENT",
    "INDENT",
    "INDEX",
    "INDEXES",
    "INDICATOR",
    "INHERIT",
    "INHERITS",
    "INITIAL",
    "INITIALLY",
    "INLINE",
    "INNER",
    "INOUT",
    "INPUT",
    "INSENSITIVE",
    "INSTANCE",
    "INSTANTIABLE",
    "INSTEAD",
    "INT",
    "INTEGER",
    "INTEGRITY",
    "INTERSECTION",
    "INTERVAL",
    "INTO",
    "INVOKER",
    "IS",
    "ISNULL",
    "ISOLATION",
    "JSON",
    "JSON_ARRAY",
    "JSON_ARRAYAGG",
    "JSON_EXISTS",
    "JSON_OBJECTAGG",
    "JSON_QUERY",
    "JSON_TABLE",
    "JSON_TABLE_PRIMITIVE",
    "JSON_VALUE",
    "KEEP",
    "KEY",
    "KEYS",
    "KEY_MEMBER",
    "KEY_TYPE",
    "LABEL",
    "LANGUAGE",
    "LARGE",
    "LAST",
    "LATERAL",
    "LEADING",
    "LEAKPROOF",
    "LEVEL",
    "LIBRARY",
    "LIKE",
    "LIKE_REGEX",
    "LINK",
    "LISTAGG",
    "LOCAL",
    "LOCATION",
    "LOCATOR",
    "LOCKED",
    "LOGGED",
    "MAP",
    "MAPPING",
    "MATCH",
    "MATCHED",
    "MATCHES",
    "MATCH_NUMBER",
    "MATCH_RECOGNIZE",
    "MATERIALIZED",
    "MAXVALUE",
    "MEASURES",
    "MEMBER",
    "MERGE",
    "MESSAGE_LENGTH",
    "MESSAGE_OCTET_LENGTH",
    "MESSAGE_TEXT",
    "METHOD",
    "MINUTE",
    "MINVALUE",
    "MODIFIES",
    "MODULE",
    "MONTH",
    "MORE",
    "MULTISET",
    "MUMPS",
    "NAME",
    "NAMES",
    "NAMESPACE",
    "NATIONAL",
    "NATURAL",
    "NCHAR",
    "NCLOB",
    "NESTED",
    "NESTING",
    "NEW",
    "NEXT",
    "NFC",
    "NFD",
    "NFKC",
    "NFKD",
    "NIL",
    "NO",
    "NONE",
    "NORMALIZED",
    "NOT",
    "NOTHING",
    "NOTNULL",
    "NOWAIT",
    "NULL",
    "NULLABLE",
    "NULLS",
    "NUMBER",
    "NUMERIC",
    "OBJECT",
    "OCCURRENCES_REGEX",
    "OCTETS",
    "OF",
    "OFF",
    "OFFSET",
    "OIDS",
    "OLD",
    "OMIT",
    "ON COMMIT",
    "ON DELETE",
    "ON UPDATE",
    "ONE",
    "ONLY",
    "OPEN",
    "OPERATOR",
    "OPTION",
    "OPTIONS",
    "ORDER",
    "ORDERING",
    "ORDINALITY",
    "OTHERS",
    "OUT",
    "OUTER",
    "OUTPUT",
    "OVER",
    "OVERFLOW",
    "OVERLAPS",
    "OVERRIDING",
    "OWNED",
    "OWNER",
    "PAD",
    "PARALLEL",
    "PARAMETER",
    "PARAMETER_MODE",
    "PARAMETER_NAME",
    "PARAMETER_ORDINAL_POSITION",
    "PARAMETER_SPECIFIC_CATALOG",
    "PARAMETER_SPECIFIC_NAME",
    "PARAMETER_SPECIFIC_SCHEMA",
    "PARSER",
    "PARTIAL",
    "PARTITION",
    "PASCAL",
    "PASS",
    "PASSING",
    "PASSTHROUGH",
    "PASSWORD",
    "PAST",
    "PATTERN",
    "PER",
    "PERCENT",
    "PERIOD",
    "PERMISSION",
    "PERMUTE",
    "PLACING",
    "PLAN",
    "PLANS",
    "PLI",
    "POLICY",
    "PORTION",
    "POSITION_REGEX",
    "PRECEDES",
    "PRECEDING",
    "PRECISION",
    "PREPARED",
    "PRESERVE",
    "PRIMARY",
    "PRIOR",
    "PRIVATE",
    "PRIVILEGES",
    "PROCEDURAL",
    "PROCEDURE",
    "PROCEDURES",
    "PROGRAM",
    "PRUNE",
    "PTF",
    "PUBLIC",
    "PUBLICATION",
    "QUOTE",
    "QUOTES",
    "RANGE",
    "READ",
    "READS",
    "REAL",
    "REASSIGN",
    "RECHECK",
    "RECOVERY",
    "RECURSIVE",
    "REF",
    "REFERENCES",
    "REFERENCING",
    "REFRESH",
    "RELATIVE",
    "RELEASE",
    "RENAME",
    "REPEATABLE",
    "REPLICA",
    "REQUIRING",
    "RESPECT",
    "RESTART",
    "RESTORE",
    "RESTRICT",
    "RESULT",
    "RETURN",
    "RETURNED_CARDINALITY",
    "RETURNED_LENGTH",
    "RETURNED_OCTET_LENGTH",
    "RETURNED_SQLSTATE",
    "RETURNS",
    "ROLE",
    "ROLLUP",
    "ROUTINE",
    "ROUTINES",
    "ROUTINE_CATALOG",
    "ROUTINE_NAME",
    "ROUTINE_SCHEMA",
    "ROW",
    "ROWS",
    "ROW_COUNT",
    "RULE",
    "RUNNING",
    "SCALAR",
    "SCHEMA",
    "SCHEMAS",
    "SCHEMA_NAME",
    "SCOPE",
    "SCOPE_CATALOG",
    "SCOPE_NAME",
    "SCOPE_SCHEMA",
    "SCROLL",
    "SEARCH",
    "SECOND",
    "SECTION",
    "SECURITY",
    "SEEK",
    "SELECTIVE",
    "SELF",
    "SENSITIVE",
    "SEQUENCE",
    "SEQUENCES",
    "SERIALIZABLE",
    "SERVER",
    "SERVER_NAME",
    "SESSION",
    "SETOF",
    "SETS",
    "SHARE",
    "SIMILAR",
    "SIMPLE",
    "SIZE",
    "SKIP",
    "SMALLINT",
    "SNAPSHOT",
    "SOURCE",
    "SPACE",
    "SPECIFIC",
    "SPECIFICTYPE",
    "SPECIFIC_NAME",
    "SQL",
    "SQLCODE",
    "SQLERROR",
    "SQLEXCEPTION",
    "SQLSTATE",
    "SQLWARNING",
    "STABLE",
    "STANDALONE",
    "START",
    "STATE",
    "STATEMENT",
    "STATIC",
    "STATISTICS",
    "STDIN",
    "STDOUT",
    "STORAGE",
    "STORED",
    "STRICT",
    "STRUCTURE",
    "STYLE",
    "SUBCLASS_ORIGIN",
    "SUBMULTISET",
    "SUBSCRIPTION",
    "SUBSET",
    "SUBSTRING_REGEX",
    "SUCCEEDS",
    "SUPPORT",
    "SYMMETRIC",
    "SYSID",
    "SYSTEM",
    "SYSTEM_TIME",
    "SYSTEM_USER",
    "TABLE",
    "TABLES",
    "TABLESAMPLE",
    "TABLESPACE",
    "TABLE_NAME",
    "TEMP",
    "TEMPLATE",
    "TEMPORARY",
    "THEN",
    "THROUGH",
    "TIES",
    "TIME",
    "TIMESTAMP",
    "TIMEZONE_HOUR",
    "TIMEZONE_MINUTE",
    "TO",
    "TOKEN",
    "TOP_LEVEL_COUNT",
    "TRAILING",
    "TRANSACTION",
    "TRANSACTIONS_COMMITTED",
    "TRANSACTIONS_ROLLED_BACK",
    "TRANSACTION_ACTIVE",
    "TRANSFORM",
    "TRANSFORMS",
    "TRANSLATE_REGEX",
    "TRANSLATION",
    "TREAT",
    "TRIGGER",
    "TRIGGER_CATALOG",
    "TRIGGER_NAME",
    "TRIGGER_SCHEMA",
    "TRUE",
    "TRUSTED",
    "TYPE",
    "TYPES",
    "UESCAPE",
    "UNBOUNDED",
    "UNCOMMITTED",
    "UNCONDITIONAL",
    "UNDER",
    "UNENCRYPTED",
    "UNIQUE",
    "UNKNOWN",
    "UNLINK",
    "UNLOGGED",
    "UNMATCHED",
    "UNNAMED",
    "UNTIL",
    "UNTYPED",
    "URI",
    "USAGE",
    "USER_DEFINED_TYPE_CATALOG",
    "USER_DEFINED_TYPE_CODE",
    "USER_DEFINED_TYPE_NAME",
    "USER_DEFINED_TYPE_SCHEMA",
    "UTF16",
    "UTF32",
    "UTF8",
    "VALID",
    "VALIDATE",
    "VALIDATOR",
    "VALUE",
    "VALUE_OF",
    "VARBINARY",
    "VARCHAR",
    "VARIADIC",
    "VARYING",
    "VERBOSE",
    "VERSIONING",
    "VIEW",
    "VIEWS",
    "VOLATILE",
    "WHENEVER",
    "WHITESPACE",
    "WINDOW",
    "WITHIN",
    "WITHOUT",
    "WORK",
    "WRAPPER",
    "WRITE",
    "XML",
    "XMLATTRIBUTES",
    "XMLBINARY",
    "XMLCAST",
    "XMLDECLARATION",
    "XMLDOCUMENT",
    "XMLITERATE",
    "XMLNAMESPACES",
    "XMLQUERY",
    "XMLSCHEMA",
    "XMLTEXT",
    "XMLVALIDATE",
    "YEAR",
    "YES",
    "ZONE"
  ], G = [
    "ABORT",
    "ALTER AGGREGATE",
    "ALTER COLLATION",
    "ALTER CONVERSION",
    "ALTER DATABASE",
    "ALTER DEFAULT PRIVILEGES",
    "ALTER DOMAIN",
    "ALTER EVENT TRIGGER",
    "ALTER EXTENSION",
    "ALTER FOREIGN DATA WRAPPER",
    "ALTER FOREIGN TABLE",
    "ALTER FUNCTION",
    "ALTER GROUP",
    "ALTER INDEX",
    "ALTER LANGUAGE",
    "ALTER LARGE OBJECT",
    "ALTER MATERIALIZED VIEW",
    "ALTER OPERATOR",
    "ALTER OPERATOR CLASS",
    "ALTER OPERATOR FAMILY",
    "ALTER POLICY",
    "ALTER PROCEDURE",
    "ALTER PUBLICATION",
    "ALTER ROLE",
    "ALTER ROUTINE",
    "ALTER RULE",
    "ALTER SCHEMA",
    "ALTER SEQUENCE",
    "ALTER SERVER",
    "ALTER STATISTICS",
    "ALTER SUBSCRIPTION",
    "ALTER SYSTEM",
    "ALTER TABLE",
    "ALTER TABLESPACE",
    "ALTER TEXT SEARCH CONFIGURATION",
    "ALTER TEXT SEARCH DICTIONARY",
    "ALTER TEXT SEARCH PARSER",
    "ALTER TEXT SEARCH TEMPLATE",
    "ALTER TRIGGER",
    "ALTER TYPE",
    "ALTER USER",
    "ALTER USER MAPPING",
    "ALTER VIEW",
    "ANALYZE",
    "BEGIN",
    "CALL",
    "CHECKPOINT",
    "CLOSE",
    "CLUSTER",
    "COMMENT",
    "COMMIT",
    "COMMIT PREPARED",
    "COPY",
    "CREATE ACCESS METHOD",
    "CREATE AGGREGATE",
    "CREATE CAST",
    "CREATE COLLATION",
    "CREATE CONVERSION",
    "CREATE DATABASE",
    "CREATE DOMAIN",
    "CREATE EVENT TRIGGER",
    "CREATE EXTENSION",
    "CREATE FOREIGN DATA WRAPPER",
    "CREATE FOREIGN TABLE",
    "CREATE FUNCTION",
    "CREATE GROUP",
    "CREATE INDEX",
    "CREATE LANGUAGE",
    "CREATE MATERIALIZED VIEW",
    "CREATE OPERATOR",
    "CREATE OPERATOR CLASS",
    "CREATE OPERATOR FAMILY",
    "CREATE POLICY",
    "CREATE PROCEDURE",
    "CREATE PUBLICATION",
    "CREATE ROLE",
    "CREATE RULE",
    "CREATE SCHEMA",
    "CREATE SEQUENCE",
    "CREATE SERVER",
    "CREATE STATISTICS",
    "CREATE SUBSCRIPTION",
    "CREATE TABLE",
    "CREATE TABLE AS",
    "CREATE TABLESPACE",
    "CREATE TEXT SEARCH CONFIGURATION",
    "CREATE TEXT SEARCH DICTIONARY",
    "CREATE TEXT SEARCH PARSER",
    "CREATE TEXT SEARCH TEMPLATE",
    "CREATE TRANSFORM",
    "CREATE TRIGGER",
    "CREATE TYPE",
    "CREATE USER",
    "CREATE USER MAPPING",
    "CREATE VIEW",
    "DEALLOCATE",
    "DECLARE",
    "DELETE",
    "DELETE FROM",
    "DISCARD",
    "DO",
    "DROP ACCESS METHOD",
    "DROP AGGREGATE",
    "DROP CAST",
    "DROP COLLATION",
    "DROP CONVERSION",
    "DROP DATABASE",
    "DROP DOMAIN",
    "DROP EVENT TRIGGER",
    "DROP EXTENSION",
    "DROP FOREIGN DATA WRAPPER",
    "DROP FOREIGN TABLE",
    "DROP FUNCTION",
    "DROP GROUP",
    "DROP INDEX",
    "DROP LANGUAGE",
    "DROP MATERIALIZED VIEW",
    "DROP OPERATOR",
    "DROP OPERATOR CLASS",
    "DROP OPERATOR FAMILY",
    "DROP OWNED",
    "DROP POLICY",
    "DROP PROCEDURE",
    "DROP PUBLICATION",
    "DROP ROLE",
    "DROP ROUTINE",
    "DROP RULE",
    "DROP SCHEMA",
    "DROP SEQUENCE",
    "DROP SERVER",
    "DROP STATISTICS",
    "DROP SUBSCRIPTION",
    "DROP TABLE",
    "DROP TABLESPACE",
    "DROP TEXT SEARCH CONFIGURATION",
    "DROP TEXT SEARCH DICTIONARY",
    "DROP TEXT SEARCH PARSER",
    "DROP TEXT SEARCH TEMPLATE",
    "DROP TRANSFORM",
    "DROP TRIGGER",
    "DROP TYPE",
    "DROP USER",
    "DROP USER MAPPING",
    "DROP VIEW",
    "EXECUTE",
    "EXPLAIN",
    "FETCH",
    "GRANT",
    "IMPORT FOREIGN SCHEMA",
    "INSERT",
    "LISTEN",
    "LOAD",
    "LOCK",
    "MOVE",
    "NOTIFY",
    "PREPARE",
    "PREPARE TRANSACTION",
    "REASSIGN OWNED",
    "REFRESH MATERIALIZED VIEW",
    "REINDEX",
    "RELEASE SAVEPOINT",
    "RESET",
    "RETURNING",
    "REVOKE",
    "ROLLBACK",
    "ROLLBACK PREPARED",
    "ROLLBACK TO SAVEPOINT",
    "SAVEPOINT",
    "SECURITY LABEL",
    "SELECT",
    "SELECT INTO",
    "SET",
    "SET CONSTRAINTS",
    "SET ROLE",
    "SET SESSION AUTHORIZATION",
    "SET TRANSACTION",
    "SHOW",
    "START TRANSACTION",
    "TRUNCATE",
    "UNLISTEN",
    "UPDATE",
    "VACUUM",
    "VALUES",
    // other
    "ADD",
    "AFTER",
    "ALTER COLUMN",
    "INSERT INTO",
    // verify
    "SET SCHEMA",
    // verify
    "FROM",
    "GROUP BY",
    "HAVING",
    "LIMIT",
    "OFFSET",
    "ORDER BY",
    "WHERE",
    "WITH",
    "WINDOW",
    "PARTITION BY"
  ], H = ["INTERSECT", "INTERSECT ALL", "INTERSECT DISTINCT", "UNION", "UNION ALL", "UNION DISTINCT", "EXCEPT", "EXCEPT ALL", "EXCEPT DISTINCT", "MINUS", "MINUS ALL", "MINUS DISTINCT"], re = ["JOIN", "INNER JOIN", "LEFT JOIN", "LEFT OUTER JOIN", "RIGHT JOIN", "RIGHT OUTER JOIN", "FULL JOIN", "FULL OUTER JOIN", "CROSS JOIN", "NATURAL JOIN"], B = ["WHEN", "ELSE"], Y = [
    // Math Operators
    "<<",
    ">>",
    "|/",
    "||/",
    "!!",
    // String Operators
    "||",
    // Pattern Matching Operators
    "~~",
    "~~*",
    "!~~",
    "!~~*",
    // POSIX RegExp operators
    "~",
    "~*",
    "!~",
    "!~*",
    // Similarity Operators
    "<%",
    "<<%",
    "%>",
    "%>>",
    // Byte Comparison Operators
    "~>~",
    "~<~",
    "~>=~",
    "~<=~",
    // Geometric operators
    "@-@",
    "@@",
    "#",
    "##",
    "<->",
    "&&",
    "&<",
    "&>",
    "<<|",
    "&<|",
    "|>>",
    "|&>",
    "<^",
    "^>",
    "?#",
    "?-",
    "?|",
    "?-|",
    "?||",
    "@>",
    "<@",
    "~=",
    // Network Address operators
    ">>=",
    "<<=",
    // Text Search Operators
    "@@@",
    // JSON Operators
    "?",
    "@?",
    "?&",
    "->",
    "->>",
    "#>",
    "#>>",
    "#-",
    // Other Operators
    ":=",
    "::",
    "=>",
    "-|-"
  ], E = /* @__PURE__ */ function(m) {
    D(R, m);
    var P = x(R);
    function R() {
      return d(this, R), P.apply(this, arguments);
    }
    return L(R, [{
      key: "tokenizer",
      value: function() {
        return new n.default({
          reservedCommands: G,
          reservedBinaryCommands: H,
          reservedJoins: re,
          reservedDependentClauses: B,
          reservedKeywords: (0, a.dedupe)([].concat(U, o(Object.values(ae).flat()))),
          openParens: ["(", "["],
          closeParens: [")", "]"],
          stringTypes: [{
            quote: "''",
            prefixes: ["U&", "E", "X", "B"]
          }, "$$"],
          identTypes: [{
            quote: '""',
            prefixes: ["U&"]
          }],
          identChars: {
            rest: "$"
          },
          numberedParamTypes: ["$"],
          operators: R.operators
        });
      }
    }]), R;
  }(i.default);
  t.default = E, F(E, "operators", Y), e.exports = t.default;
})(Hl, Hl.exports);
var B_ = Hl.exports, zl = { exports: {} };
(function(e, t) {
  function r(E) {
    "@babel/helpers - typeof";
    return r = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(m) {
      return typeof m;
    } : function(m) {
      return m && typeof Symbol == "function" && m.constructor === Symbol && m !== Symbol.prototype ? "symbol" : typeof m;
    }, r(E);
  }
  Object.defineProperty(t, "__esModule", {
    value: !0
  }), t.default = void 0;
  var i = s(ur), n = s(cr), a = Xe;
  function s(E) {
    return E && E.__esModule ? E : { default: E };
  }
  function o(E) {
    return p(E) || f(E) || c(E) || l();
  }
  function l() {
    throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
  }
  function c(E, m) {
    if (E) {
      if (typeof E == "string")
        return O(E, m);
      var P = Object.prototype.toString.call(E).slice(8, -1);
      if (P === "Object" && E.constructor && (P = E.constructor.name), P === "Map" || P === "Set")
        return Array.from(E);
      if (P === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(P))
        return O(E, m);
    }
  }
  function f(E) {
    if (typeof Symbol < "u" && E[Symbol.iterator] != null || E["@@iterator"] != null)
      return Array.from(E);
  }
  function p(E) {
    if (Array.isArray(E))
      return O(E);
  }
  function O(E, m) {
    (m == null || m > E.length) && (m = E.length);
    for (var P = 0, R = new Array(m); P < m; P++)
      R[P] = E[P];
    return R;
  }
  function d(E, m) {
    if (!(E instanceof m))
      throw new TypeError("Cannot call a class as a function");
  }
  function g(E, m) {
    for (var P = 0; P < m.length; P++) {
      var R = m[P];
      R.enumerable = R.enumerable || !1, R.configurable = !0, "value" in R && (R.writable = !0), Object.defineProperty(E, R.key, R);
    }
  }
  function L(E, m, P) {
    return m && g(E.prototype, m), P && g(E, P), Object.defineProperty(E, "prototype", { writable: !1 }), E;
  }
  function D(E, m) {
    if (typeof m != "function" && m !== null)
      throw new TypeError("Super expression must either be null or a function");
    E.prototype = Object.create(m && m.prototype, { constructor: { value: E, writable: !0, configurable: !0 } }), Object.defineProperty(E, "prototype", { writable: !1 }), m && W(E, m);
  }
  function W(E, m) {
    return W = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(R, A) {
      return R.__proto__ = A, R;
    }, W(E, m);
  }
  function x(E) {
    var m = $();
    return function() {
      var R = z(E), A;
      if (m) {
        var y = z(this).constructor;
        A = Reflect.construct(R, arguments, y);
      } else
        A = R.apply(this, arguments);
      return V(this, A);
    };
  }
  function V(E, m) {
    if (m && (r(m) === "object" || typeof m == "function"))
      return m;
    if (m !== void 0)
      throw new TypeError("Derived constructors may only return object or undefined");
    return _(E);
  }
  function _(E) {
    if (E === void 0)
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return E;
  }
  function $() {
    if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
      return !1;
    if (typeof Proxy == "function")
      return !0;
    try {
      return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      })), !0;
    } catch {
      return !1;
    }
  }
  function z(E) {
    return z = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(P) {
      return P.__proto__ || Object.getPrototypeOf(P);
    }, z(E);
  }
  function F(E, m, P) {
    return m in E ? Object.defineProperty(E, m, { value: P, enumerable: !0, configurable: !0, writable: !0 }) : E[m] = P, E;
  }
  var ae = {
    // https://docs.aws.amazon.com/redshift/latest/dg/c_Aggregate_Functions.html
    aggregate: ["ANY_VALUE", "APPROXIMATE PERCENTILE_DISC", "AVG", "COUNT", "LISTAGG", "MAX", "MEDIAN", "MIN", "PERCENTILE_CONT", "STDDEV_SAMP", "STDDEV_POP", "SUM", "VAR_SAMP", "VAR_POP"],
    // https://docs.aws.amazon.com/redshift/latest/dg/c_Array_Functions.html
    array: ["array", "array_concat", "array_flatten", "get_array_length", "split_to_array", "subarray"],
    // https://docs.aws.amazon.com/redshift/latest/dg/c_bitwise_aggregate_functions.html
    bitwise: ["BIT_AND", "BIT_OR", "BOOL_AND", "BOOL_OR"],
    // https://docs.aws.amazon.com/redshift/latest/dg/c_conditional_expressions.html
    conditional: ["COALESCE", "DECODE", "GREATEST", "LEAST", "NVL", "NVL2", "NULLIF"],
    // https://docs.aws.amazon.com/redshift/latest/dg/Date_functions_header.html
    dateTime: ["ADD_MONTHS", "AT TIME ZONE", "CONVERT_TIMEZONE", "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", "DATE_CMP", "DATE_CMP_TIMESTAMP", "DATE_CMP_TIMESTAMPTZ", "DATE_PART_YEAR", "DATEADD", "DATEDIFF", "DATE_PART", "DATE_TRUNC", "EXTRACT", "GETDATE", "INTERVAL_CMP", "LAST_DAY", "MONTHS_BETWEEN", "NEXT_DAY", "SYSDATE", "TIMEOFDAY", "TIMESTAMP_CMP", "TIMESTAMP_CMP_DATE", "TIMESTAMP_CMP_TIMESTAMPTZ", "TIMESTAMPTZ_CMP", "TIMESTAMPTZ_CMP_DATE", "TIMESTAMPTZ_CMP_TIMESTAMP", "TIMEZONE", "TO_TIMESTAMP", "TRUNC"],
    // https://docs.aws.amazon.com/redshift/latest/dg/geospatial-functions.html
    spatial: ["AddBBox", "DropBBox", "GeometryType", "ST_AddPoint", "ST_Angle", "ST_Area", "ST_AsBinary", "ST_AsEWKB", "ST_AsEWKT", "ST_AsGeoJSON", "ST_AsText", "ST_Azimuth", "ST_Boundary", "ST_Collect", "ST_Contains", "ST_ContainsProperly", "ST_ConvexHull", "ST_CoveredBy", "ST_Covers", "ST_Crosses", "ST_Dimension", "ST_Disjoint", "ST_Distance", "ST_DistanceSphere", "ST_DWithin", "ST_EndPoint", "ST_Envelope", "ST_Equals", "ST_ExteriorRing", "ST_Force2D", "ST_Force3D", "ST_Force3DM", "ST_Force3DZ", "ST_Force4D", "ST_GeometryN", "ST_GeometryType", "ST_GeomFromEWKB", "ST_GeomFromEWKT", "ST_GeomFromText", "ST_GeomFromWKB", "ST_InteriorRingN", "ST_Intersects", "ST_IsPolygonCCW", "ST_IsPolygonCW", "ST_IsClosed", "ST_IsCollection", "ST_IsEmpty", "ST_IsSimple", "ST_IsValid", "ST_Length", "ST_LengthSphere", "ST_Length2D", "ST_LineFromMultiPoint", "ST_LineInterpolatePoint", "ST_M", "ST_MakeEnvelope", "ST_MakeLine", "ST_MakePoint", "ST_MakePolygon", "ST_MemSize", "ST_MMax", "ST_MMin", "ST_Multi", "ST_NDims", "ST_NPoints", "ST_NRings", "ST_NumGeometries", "ST_NumInteriorRings", "ST_NumPoints", "ST_Perimeter", "ST_Perimeter2D", "ST_Point", "ST_PointN", "ST_Points", "ST_Polygon", "ST_RemovePoint", "ST_Reverse", "ST_SetPoint", "ST_SetSRID", "ST_Simplify", "ST_SRID", "ST_StartPoint", "ST_Touches", "ST_Within", "ST_X", "ST_XMax", "ST_XMin", "ST_Y", "ST_YMax", "ST_YMin", "ST_Z", "ST_ZMax", "ST_ZMin", "SupportsBBox"],
    // https://docs.aws.amazon.com/redshift/latest/dg/hash-functions.html
    hash: ["CHECKSUM", "FUNC_SHA1", "FNV_HASH", "MD5", "SHA", "SHA1", "SHA2"],
    // https://docs.aws.amazon.com/redshift/latest/dg/hyperloglog-functions.html
    hyperLogLog: ["HLL", "HLL_CREATE_SKETCH", "HLL_CARDINALITY", "HLL_COMBINE"],
    // https://docs.aws.amazon.com/redshift/latest/dg/json-functions.html
    json: ["IS_VALID_JSON", "IS_VALID_JSON_ARRAY", "JSON_ARRAY_LENGTH", "JSON_EXTRACT_ARRAY_ELEMENT_TEXT", "JSON_EXTRACT_PATH_TEXT", "JSON_PARSE", "JSON_SERIALIZE"],
    // https://docs.aws.amazon.com/redshift/latest/dg/Math_functions.html
    math: ["ABS", "ACOS", "ASIN", "ATAN", "ATAN2", "CBRT", "CEILING", "CEIL", "COS", "COT", "DEGREES", "DEXP", "DLOG1", "DLOG10", "EXP", "FLOOR", "LN", "LOG", "MOD", "PI", "POWER", "RADIANS", "RANDOM", "ROUND", "SIN", "SIGN", "SQRT", "TAN", "TO_HEX", "TRUNC"],
    // https://docs.aws.amazon.com/redshift/latest/dg/ml-function.html
    machineLearning: ["EXPLAIN_MODEL"],
    // https://docs.aws.amazon.com/redshift/latest/dg/String_functions_header.html
    string: ["ASCII", "BPCHARCMP", "BTRIM", "BTTEXT_PATTERN_CMP", "CHAR_LENGTH", "CHARACTER_LENGTH", "CHARINDEX", "CHR", "COLLATE", "CONCAT", "CRC32", "DIFFERENCE", "INITCAP", "LEFT", "RIGHT", "LEN", "LENGTH", "LOWER", "LPAD", "RPAD", "LTRIM", "OCTETINDEX", "OCTET_LENGTH", "POSITION", "QUOTE_IDENT", "QUOTE_LITERAL", "REGEXP_COUNT", "REGEXP_INSTR", "REGEXP_REPLACE", "REGEXP_SUBSTR", "REPEAT", "REPLACE", "REPLICATE", "REVERSE", "RTRIM", "SOUNDEX", "SPLIT_PART", "STRPOS", "STRTOL", "SUBSTRING", "TEXTLEN", "TRANSLATE", "TRIM", "UPPER"],
    // https://docs.aws.amazon.com/redshift/latest/dg/c_Type_Info_Functions.html
    superType: ["decimal_precision", "decimal_scale", "is_array", "is_bigint", "is_boolean", "is_char", "is_decimal", "is_float", "is_integer", "is_object", "is_scalar", "is_smallint", "is_varchar", "json_typeof"],
    // https://docs.aws.amazon.com/redshift/latest/dg/c_Window_functions.html
    window: ["AVG", "COUNT", "CUME_DIST", "DENSE_RANK", "FIRST_VALUE", "LAST_VALUE", "LAG", "LEAD", "LISTAGG", "MAX", "MEDIAN", "MIN", "NTH_VALUE", "NTILE", "PERCENT_RANK", "PERCENTILE_CONT", "PERCENTILE_DISC", "RANK", "RATIO_TO_REPORT", "ROW_NUMBER", "STDDEV_SAMP", "STDDEV_POP", "SUM", "VAR_SAMP", "VAR_POP"],
    // https://docs.aws.amazon.com/redshift/latest/dg/r_Data_type_formatting.html
    dataType: ["CAST", "CONVERT", "TO_CHAR", "TO_DATE", "TO_NUMBER", "TEXT_TO_INT_ALT", "TEXT_TO_NUMERIC_ALT"],
    // https://docs.aws.amazon.com/redshift/latest/dg/r_System_administration_functions.html
    sysAdmin: ["CHANGE_QUERY_PRIORITY", "CHANGE_SESSION_PRIORITY", "CHANGE_USER_PRIORITY", "CURRENT_SETTING", "PG_CANCEL_BACKEND", "PG_TERMINATE_BACKEND", "REBOOT_CLUSTER", "SET_CONFIG"],
    // https://docs.aws.amazon.com/redshift/latest/dg/r_System_information_functions.html
    sysInfo: ["CURRENT_AWS_ACCOUNT", "CURRENT_DATABASE", "CURRENT_NAMESPACE", "CURRENT_SCHEMA", "CURRENT_SCHEMAS", "CURRENT_USER", "CURRENT_USER_ID", "HAS_ASSUMEROLE_PRIVILEGE", "HAS_DATABASE_PRIVILEGE", "HAS_SCHEMA_PRIVILEGE", "HAS_TABLE_PRIVILEGE", "PG_BACKEND_PID", "PG_GET_COLS", "PG_GET_GRANTEE_BY_IAM_ROLE", "PG_GET_IAM_ROLE_BY_USER", "PG_GET_LATE_BINDING_VIEW_COLS", "PG_LAST_COPY_COUNT", "PG_LAST_COPY_ID", "PG_LAST_UNLOAD_ID", "PG_LAST_QUERY_ID", "PG_LAST_UNLOAD_COUNT", "SESSION_USER", "SLICE_NUM", "USER", "VERSION"]
  }, U = {
    // https://docs.aws.amazon.com/redshift/latest/dg/r_pg_keywords.html
    standard: ["AES128", "AES256", "ALL", "ALLOWOVERWRITE", "ANY", "ARRAY", "AS", "ASC", "AUTHORIZATION", "BACKUP", "BETWEEN", "BINARY", "BOTH", "CHECK", "COLUMN", "CONSTRAINT", "CREATE", "CROSS", "DEFAULT", "DEFERRABLE", "DEFLATE", "DEFRAG", "DESC", "DISABLE", "DISTINCT", "DO", "ENABLE", "ENCODE", "ENCRYPT", "ENCRYPTION", "EXPLICIT", "FALSE", "FOR", "FOREIGN", "FREEZE", "FROM", "FULL", "GLOBALDICT256", "GLOBALDICT64K", "GROUP", "IDENTITY", "IGNORE", "ILIKE", "IN", "INITIALLY", "INNER", "INTO", "IS", "ISNULL", "LANGUAGE", "LEADING", "LIKE", "LIMIT", "LOCALTIME", "LOCALTIMESTAMP", "LUN", "LUNS", "MINUS", "NATURAL", "NEW", "NOT", "NOTNULL", "NULL", "NULLS", "OFF", "OFFLINE", "OFFSET", "OID", "OLD", "ONLY", "OPEN", "ORDER", "OUTER", "OVERLAPS", "PARALLEL", "PARTITION", "PERCENT", "PERMISSIONS", "PLACING", "PRIMARY", "RECOVER", "REFERENCES", "REJECTLOG", "RESORT", "RESPECT", "RESTORE", "SIMILAR", "SNAPSHOT", "SOME", "SYSTEM", "TABLE", "TAG", "TDES", "THEN", "TIMESTAMP", "TO", "TOP", "TRAILING", "TRUE", "UNIQUE", "VERBOSE", "WALLET", "WITHOUT"],
    // https://docs.aws.amazon.com/redshift/latest/dg/copy-parameters-data-conversion.html
    dataConversionParams: ["ACCEPTANYDATE", "ACCEPTINVCHARS", "BLANKSASNULL", "DATEFORMAT", "EMPTYASNULL", "ENCODING", "ESCAPE", "EXPLICIT_IDS", "FILLRECORD", "IGNOREBLANKLINES", "IGNOREHEADER", "NULL AS", "REMOVEQUOTES", "ROUNDEC", "TIMEFORMAT", "TRIMBLANKS", "TRUNCATECOLUMNS"],
    // https://docs.aws.amazon.com/redshift/latest/dg/copy-parameters-data-load.html
    dataLoadParams: ["COMPROWS", "COMPUPDATE", "MAXERROR", "NOLOAD", "STATUPDATE"],
    // https://docs.aws.amazon.com/redshift/latest/dg/copy-parameters-data-format.html
    dataFormatParams: ["FORMAT", "CSV", "DELIMITER", "FIXEDWIDTH", "SHAPEFILE", "AVRO", "JSON", "PARQUET", "ORC"],
    // https://docs.aws.amazon.com/redshift/latest/dg/copy-parameters-authorization.html
    copyAuthParams: ["ACCESS_KEY_ID", "CREDENTIALS", "ENCRYPTED", "IAM_ROLE", "MASTER_SYMMETRIC_KEY", "SECRET_ACCESS_KEY", "SESSION_TOKEN"],
    // https://docs.aws.amazon.com/redshift/latest/dg/copy-parameters-file-compression.html
    copyCompressionParams: ["BZIP2", "GZIP", "LZOP", "ZSTD"],
    // https://docs.aws.amazon.com/redshift/latest/dg/r_COPY-alphabetical-parm-list.html
    copyMiscParams: ["MANIFEST", "READRATIO", "REGION", "SSH"],
    // https://docs.aws.amazon.com/redshift/latest/dg/c_Compression_encodings.html
    compressionEncodings: ["RAW", "AZ64", "BYTEDICT", "DELTA", "DELTA32K", "LZO", "MOSTLY8", "MOSTLY16", "MOSTLY32", "RUNLENGTH", "TEXT255", "TEXT32K"],
    misc: [
      // CREATE EXTERNAL SCHEMA (https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_EXTERNAL_SCHEMA.html)
      "CATALOG_ROLE",
      "SECRET_ARN",
      "EXTERNAL",
      "HIVE METASTORE",
      // https://docs.aws.amazon.com/redshift/latest/dg/c-spectrum-external-schemas.html
      // https://docs.aws.amazon.com/redshift/latest/dg/c_choosing_dist_sort.html
      "AUTO",
      "EVEN",
      "KEY",
      "PREDICATE",
      // ANALYZE | ANALYSE (https://docs.aws.amazon.com/redshift/latest/dg/r_ANALYZE.html)
      // unknown
      "COMPRESSION",
      "DATA CATALOG"
    ],
    /**
     * Other keywords not included:
     * STL: https://docs.aws.amazon.com/redshift/latest/dg/c_intro_STL_tables.html
     * SVCS: https://docs.aws.amazon.com/redshift/latest/dg/svcs_views.html
     * SVL: https://docs.aws.amazon.com/redshift/latest/dg/svl_views.html
     * SVV: https://docs.aws.amazon.com/redshift/latest/dg/svv_views.html
     */
    dataTypes: ["CHAR", "CHARACTER", "NCHAR", "VARCHAR", "CHARACTER VARYING", "NVARCHAR", "BPCHAR", "TEXT"]
  }, G = [
    "ABORT",
    "ALTER DATABASE",
    "ALTER DATASHARE",
    "ALTER DEFAULT PRIVILEGES",
    "ALTER GROUP",
    "ALTER MATERIALIZED VIEW",
    "ALTER PROCEDURE",
    "ALTER SCHEMA",
    "ALTER TABLE",
    "ALTER TABLE APPEND",
    "ALTER USER",
    "ANALYSE",
    "ANALYZE",
    "ANALYSE COMPRESSION",
    "ANALYZE COMPRESSION",
    "BEGIN",
    "CALL",
    "CANCEL",
    "CLOSE",
    "COMMENT",
    "COMMIT",
    "COPY",
    "CREATE DATABASE",
    "CREATE DATASHARE",
    "CREATE EXTERNAL FUNCTION",
    "CREATE EXTERNAL SCHEMA",
    "CREATE EXTERNAL TABLE",
    "CREATE FUNCTION",
    "CREATE GROUP",
    "CREATE LIBRARY",
    "CREATE MATERIALIZED VIEW",
    "CREATE MODEL",
    "CREATE PROCEDURE",
    "CREATE SCHEMA",
    "CREATE TABLE",
    "CREATE TABLE AS",
    "CREATE USER",
    "CREATE VIEW",
    "DEALLOCATE",
    "DECLARE",
    "DELETE",
    "DELETE FROM",
    "DESC DATASHARE",
    "DROP DATABASE",
    "DROP DATASHARE",
    "DROP FUNCTION",
    "DROP GROUP",
    "DROP LIBRARY",
    "DROP MODEL",
    "DROP MATERIALIZED VIEW",
    "DROP PROCEDURE",
    "DROP SCHEMA",
    "DROP TABLE",
    "DROP USER",
    "DROP VIEW",
    "DROP",
    "EXECUTE",
    "EXPLAIN",
    "FETCH",
    "FROM",
    "GRANT",
    "HAVING",
    "INSERT",
    "LOCK",
    "PREPARE",
    "REFRESH MATERIALIZED VIEW",
    "RESET",
    "REVOKE",
    "ROLLBACK",
    "SELECT",
    "SELECT INTO",
    "SET",
    "SET SESSION AUTHORIZATION",
    "SET SESSION CHARACTERISTICS",
    "SHOW",
    "SHOW EXTERNAL TABLE",
    "SHOW MODEL",
    "SHOW DATASHARES",
    "SHOW PROCEDURE",
    "SHOW TABLE",
    "SHOW VIEW",
    "START TRANSACTION",
    "TRUNCATE",
    "UNLOAD",
    "UPDATE",
    "VACUUM",
    "WHERE",
    "WITH",
    // other
    "GROUP BY",
    "ORDER BY",
    "LIMIT",
    "OFFSET",
    "VALUES",
    "MODIFY",
    // verify
    "INSERT INTO",
    // verify
    "ALTER COLUMN",
    // verify
    "SET SCHEMA"
    // verify
  ], H = ["INTERSECT", "INTERSECT ALL", "INTERSECT DISTINCT", "UNION", "UNION ALL", "UNION DISTINCT", "EXCEPT", "EXCEPT ALL", "EXCEPT DISTINCT"], re = ["JOIN", "INNER JOIN", "LEFT JOIN", "LEFT OUTER JOIN", "RIGHT JOIN", "RIGHT OUTER JOIN", "FULL JOIN", "FULL OUTER JOIN", "CROSS JOIN", "NATURAL JOIN"], B = ["WHEN", "ELSE"], Y = /* @__PURE__ */ function(E) {
    D(P, E);
    var m = x(P);
    function P() {
      return d(this, P), m.apply(this, arguments);
    }
    return L(P, [{
      key: "tokenizer",
      value: function() {
        return new n.default({
          reservedCommands: G,
          reservedBinaryCommands: H,
          reservedJoins: re,
          reservedDependentClauses: B,
          reservedKeywords: (0, a.dedupe)([].concat(o(Object.values(U).flat()), o(Object.values(ae).flat()))),
          stringTypes: ["''"],
          identTypes: ['""'],
          numberedParamTypes: ["$"],
          operators: P.operators
        });
      }
    }]), P;
  }(i.default);
  t.default = Y, F(Y, "operators", ["~", "|/", "||/", "<<", ">>", "||"]), e.exports = t.default;
})(zl, zl.exports);
var $_ = zl.exports, ql = { exports: {} };
(function(e, t) {
  function r(A) {
    "@babel/helpers - typeof";
    return r = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(y) {
      return typeof y;
    } : function(y) {
      return y && typeof Symbol == "function" && y.constructor === Symbol && y !== Symbol.prototype ? "symbol" : typeof y;
    }, r(A);
  }
  Object.defineProperty(t, "__esModule", {
    value: !0
  }), t.default = void 0;
  var i = o(ur), n = o(cr), a = it, s = Xe;
  function o(A) {
    return A && A.__esModule ? A : { default: A };
  }
  function l(A, y) {
    var C = Object.keys(A);
    if (Object.getOwnPropertySymbols) {
      var j = Object.getOwnPropertySymbols(A);
      y && (j = j.filter(function(w) {
        return Object.getOwnPropertyDescriptor(A, w).enumerable;
      })), C.push.apply(C, j);
    }
    return C;
  }
  function c(A) {
    for (var y = 1; y < arguments.length; y++) {
      var C = arguments[y] != null ? arguments[y] : {};
      y % 2 ? l(Object(C), !0).forEach(function(j) {
        G(A, j, C[j]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(A, Object.getOwnPropertyDescriptors(C)) : l(Object(C)).forEach(function(j) {
        Object.defineProperty(A, j, Object.getOwnPropertyDescriptor(C, j));
      });
    }
    return A;
  }
  function f(A) {
    return g(A) || d(A) || O(A) || p();
  }
  function p() {
    throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
  }
  function O(A, y) {
    if (A) {
      if (typeof A == "string")
        return L(A, y);
      var C = Object.prototype.toString.call(A).slice(8, -1);
      if (C === "Object" && A.constructor && (C = A.constructor.name), C === "Map" || C === "Set")
        return Array.from(A);
      if (C === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(C))
        return L(A, y);
    }
  }
  function d(A) {
    if (typeof Symbol < "u" && A[Symbol.iterator] != null || A["@@iterator"] != null)
      return Array.from(A);
  }
  function g(A) {
    if (Array.isArray(A))
      return L(A);
  }
  function L(A, y) {
    (y == null || y > A.length) && (y = A.length);
    for (var C = 0, j = new Array(y); C < y; C++)
      j[C] = A[C];
    return j;
  }
  function D(A, y) {
    if (!(A instanceof y))
      throw new TypeError("Cannot call a class as a function");
  }
  function W(A, y) {
    for (var C = 0; C < y.length; C++) {
      var j = y[C];
      j.enumerable = j.enumerable || !1, j.configurable = !0, "value" in j && (j.writable = !0), Object.defineProperty(A, j.key, j);
    }
  }
  function x(A, y, C) {
    return y && W(A.prototype, y), C && W(A, C), Object.defineProperty(A, "prototype", { writable: !1 }), A;
  }
  function V(A, y) {
    if (typeof y != "function" && y !== null)
      throw new TypeError("Super expression must either be null or a function");
    A.prototype = Object.create(y && y.prototype, { constructor: { value: A, writable: !0, configurable: !0 } }), Object.defineProperty(A, "prototype", { writable: !1 }), y && _(A, y);
  }
  function _(A, y) {
    return _ = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(j, w) {
      return j.__proto__ = w, j;
    }, _(A, y);
  }
  function $(A) {
    var y = ae();
    return function() {
      var j = U(A), w;
      if (y) {
        var J = U(this).constructor;
        w = Reflect.construct(j, arguments, J);
      } else
        w = j.apply(this, arguments);
      return z(this, w);
    };
  }
  function z(A, y) {
    if (y && (r(y) === "object" || typeof y == "function"))
      return y;
    if (y !== void 0)
      throw new TypeError("Derived constructors may only return object or undefined");
    return F(A);
  }
  function F(A) {
    if (A === void 0)
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return A;
  }
  function ae() {
    if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
      return !1;
    if (typeof Proxy == "function")
      return !0;
    try {
      return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      })), !0;
    } catch {
      return !1;
    }
  }
  function U(A) {
    return U = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(C) {
      return C.__proto__ || Object.getPrototypeOf(C);
    }, U(A);
  }
  function G(A, y, C) {
    return y in A ? Object.defineProperty(A, y, { value: C, enumerable: !0, configurable: !0, writable: !0 }) : A[y] = C, A;
  }
  var H = {
    // http://spark.apache.org/docs/latest/sql-ref-functions-builtin.html#aggregate-functions
    aggregate: ["ANY", "APPROX_COUNT_DISTINCT", "APPROX_PERCENTILE", "AVG", "BIT_AND", "BIT_OR", "BIT_XOR", "BOOL_AND", "BOOL_OR", "COLLECT_LIST", "COLLECT_SET", "CORR", "COUNT", "COUNT", "COUNT", "COUNT_IF", "COUNT_MIN_SKETCH", "COVAR_POP", "COVAR_SAMP", "EVERY", "FIRST", "FIRST_VALUE", "GROUPING", "GROUPING_ID", "KURTOSIS", "LAST", "LAST_VALUE", "MAX", "MAX_BY", "MEAN", "MIN", "MIN_BY", "PERCENTILE", "PERCENTILE", "PERCENTILE_APPROX", "SKEWNESS", "SOME", "STD", "STDDEV", "STDDEV_POP", "STDDEV_SAMP", "SUM", "VAR_POP", "VAR_SAMP", "VARIANCE"],
    // http://spark.apache.org/docs/latest/sql-ref-functions-builtin.html#window-functions
    window: ["CUME_DIST", "DENSE_RANK", "LAG", "LEAD", "NTH_VALUE", "NTILE", "PERCENT_RANK", "RANK", "ROW_NUMBER"],
    // http://spark.apache.org/docs/latest/sql-ref-functions-builtin.html#array-functions
    array: ["ARRAY", "ARRAY_CONTAINS", "ARRAY_DISTINCT", "ARRAY_EXCEPT", "ARRAY_INTERSECT", "ARRAY_JOIN", "ARRAY_MAX", "ARRAY_MIN", "ARRAY_POSITION", "ARRAY_REMOVE", "ARRAY_REPEAT", "ARRAY_UNION", "ARRAYS_OVERLAP", "ARRAYS_ZIP", "FLATTEN", "SEQUENCE", "SHUFFLE", "SLICE", "SORT_ARRAY"],
    // http://spark.apache.org/docs/latest/sql-ref-functions-builtin.html#map-functions
    map: ["ELEMENT_AT", "ELEMENT_AT", "MAP", "MAP_CONCAT", "MAP_ENTRIES", "MAP_FROM_ARRAYS", "MAP_FROM_ENTRIES", "MAP_KEYS", "MAP_VALUES", "STR_TO_MAP"],
    // http://spark.apache.org/docs/latest/sql-ref-functions-builtin.html#date-and-timestamp-functions
    datetime: ["ADD_MONTHS", "CURRENT_DATE", "CURRENT_DATE", "CURRENT_TIMESTAMP", "CURRENT_TIMESTAMP", "CURRENT_TIMEZONE", "DATE_ADD", "DATE_FORMAT", "DATE_FROM_UNIX_DATE", "DATE_PART", "DATE_SUB", "DATE_TRUNC", "DATEDIFF", "DAY", "DAYOFMONTH", "DAYOFWEEK", "DAYOFYEAR", "EXTRACT", "FROM_UNIXTIME", "FROM_UTC_TIMESTAMP", "HOUR", "LAST_DAY", "MAKE_DATE", "MAKE_DT_INTERVAL", "MAKE_INTERVAL", "MAKE_TIMESTAMP", "MAKE_YM_INTERVAL", "MINUTE", "MONTH", "MONTHS_BETWEEN", "NEXT_DAY", "NOW", "QUARTER", "SECOND", "SESSION_WINDOW", "TIMESTAMP_MICROS", "TIMESTAMP_MILLIS", "TIMESTAMP_SECONDS", "TO_DATE", "TO_TIMESTAMP", "TO_UNIX_TIMESTAMP", "TO_UTC_TIMESTAMP", "TRUNC", "UNIX_DATE", "UNIX_MICROS", "UNIX_MILLIS", "UNIX_SECONDS", "UNIX_TIMESTAMP", "WEEKDAY", "WEEKOFYEAR", "WINDOW", "YEAR"],
    // http://spark.apache.org/docs/latest/sql-ref-functions-builtin.html#json-functions
    json: ["FROM_JSON", "GET_JSON_OBJECT", "JSON_ARRAY_LENGTH", "JSON_OBJECT_KEYS", "JSON_TUPLE", "SCHEMA_OF_JSON", "TO_JSON"],
    // http://spark.apache.org/docs/latest/api/sql/index.html
    misc: [
      "ABS",
      "ACOS",
      "ACOSH",
      "AGGREGATE",
      "ARRAY_SORT",
      "ASCII",
      "ASIN",
      "ASINH",
      "ASSERT_TRUE",
      "ATAN",
      "ATAN2",
      "ATANH",
      "BASE64",
      "BIGINT",
      "BIN",
      "BINARY",
      "BIT_COUNT",
      "BIT_GET",
      "BIT_LENGTH",
      "BOOLEAN",
      "BROUND",
      "BTRIM",
      "CARDINALITY",
      "CBRT",
      "CEIL",
      "CEILING",
      "CHAR",
      "CHAR_LENGTH",
      "CHARACTER_LENGTH",
      "CHR",
      "CONCAT",
      "CONCAT_WS",
      "CONV",
      "COS",
      "COSH",
      "COT",
      "CRC32",
      "CURRENT_CATALOG",
      "CURRENT_DATABASE",
      "CURRENT_USER",
      "DATE",
      "DECIMAL",
      "DEGREES",
      "DOUBLE",
      // 'E',
      "ELT",
      "EXP",
      "EXPM1",
      "FACTORIAL",
      "FIND_IN_SET",
      "FLOAT",
      "FLOOR",
      "FORALL",
      "FORMAT_NUMBER",
      "FORMAT_STRING",
      "FROM_CSV",
      "GETBIT",
      "HASH",
      "HEX",
      "HYPOT",
      "INITCAP",
      "INLINE",
      "INLINE_OUTER",
      "INPUT_FILE_BLOCK_LENGTH",
      "INPUT_FILE_BLOCK_START",
      "INPUT_FILE_NAME",
      "INSTR",
      "INT",
      "ISNAN",
      "ISNOTNULL",
      "ISNULL",
      "JAVA_METHOD",
      "LCASE",
      "LEFT",
      "LENGTH",
      "LEVENSHTEIN",
      "LN",
      "LOCATE",
      "LOG",
      "LOG10",
      "LOG1P",
      "LOG2",
      "LOWER",
      "LPAD",
      "LTRIM",
      "MAP_FILTER",
      "MAP_ZIP_WITH",
      "MD5",
      "MOD",
      "MONOTONICALLY_INCREASING_ID",
      "NAMED_STRUCT",
      "NANVL",
      "NEGATIVE",
      "NVL",
      "NVL2",
      "OCTET_LENGTH",
      "OVERLAY",
      "PARSE_URL",
      "PI",
      "PMOD",
      "POSEXPLODE",
      "POSEXPLODE_OUTER",
      "POSITION",
      "POSITIVE",
      "POW",
      "POWER",
      "PRINTF",
      "RADIANS",
      "RAISE_ERROR",
      "RAND",
      "RANDN",
      "RANDOM",
      "REFLECT",
      "REGEXP_EXTRACT",
      "REGEXP_EXTRACT_ALL",
      "REGEXP_LIKE",
      "REGEXP_REPLACE",
      "REPEAT",
      "REPLACE",
      "REVERSE",
      "RIGHT",
      "RINT",
      "ROUND",
      "RPAD",
      "RTRIM",
      "SCHEMA_OF_CSV",
      "SENTENCES",
      "SHA",
      "SHA1",
      "SHA2",
      "SHIFTLEFT",
      "SHIFTRIGHT",
      "SHIFTRIGHTUNSIGNED",
      "SIGN",
      "SIGNUM",
      "SIN",
      "SINH",
      "SMALLINT",
      "SOUNDEX",
      "SPACE",
      "SPARK_PARTITION_ID",
      "SPLIT",
      "SQRT",
      "STACK",
      "SUBSTR",
      "SUBSTRING",
      "SUBSTRING_INDEX",
      "TAN",
      "TANH",
      "TIMESTAMP",
      "TINYINT",
      "TO_CSV",
      "TRANSFORM_KEYS",
      "TRANSFORM_VALUES",
      "TRANSLATE",
      "TRIM",
      "TRY_ADD",
      "TRY_DIVIDE",
      "TYPEOF",
      "UCASE",
      "UNBASE64",
      "UNHEX",
      "UPPER",
      "UUID",
      "VERSION",
      "WIDTH_BUCKET",
      "XPATH",
      "XPATH_BOOLEAN",
      "XPATH_DOUBLE",
      "XPATH_FLOAT",
      "XPATH_INT",
      "XPATH_LONG",
      "XPATH_NUMBER",
      "XPATH_SHORT",
      "XPATH_STRING",
      "XXHASH64",
      "ZIP_WITH"
    ]
  }, re = [
    "ADD",
    "AFTER",
    "ALL",
    "ALTER",
    "ANALYZE",
    // 'AND',
    "ANTI",
    "ANY",
    "ARCHIVE",
    "ARRAY",
    "AS",
    "ASC",
    "AT",
    "AUTHORIZATION",
    "BETWEEN",
    "BOTH",
    "BUCKET",
    "BUCKETS",
    "BY",
    "CACHE",
    "CASCADE",
    "CAST",
    "CHANGE",
    "CHECK",
    "CLEAR",
    "CLUSTER",
    "CLUSTERED",
    "CODEGEN",
    "COLLATE",
    "COLLECTION",
    "COLUMN",
    "COLUMNS",
    "COMMENT",
    "COMMIT",
    "COMPACT",
    "COMPACTIONS",
    "COMPUTE",
    "CONCATENATE",
    "CONSTRAINT",
    "COST",
    "CREATE",
    "CROSS",
    "CUBE",
    "CURRENT",
    "CURRENT_DATE",
    "CURRENT_TIME",
    "CURRENT_TIMESTAMP",
    "CURRENT_USER",
    "DATA",
    "DATABASE",
    "DATABASES",
    "DAY",
    "DBPROPERTIES",
    "DEFINED",
    "DELETE",
    "DELIMITED",
    "DESC",
    "DESCRIBE",
    "DFS",
    "DIRECTORIES",
    "DIRECTORY",
    "DISTINCT",
    "DISTRIBUTE",
    "DIV",
    "DROP",
    "ESCAPE",
    "ESCAPED",
    "EXCEPT",
    "EXCHANGE",
    "EXISTS",
    "EXPORT",
    "EXTENDED",
    "EXTERNAL",
    "EXTRACT",
    "FALSE",
    "FETCH",
    "FIELDS",
    "FILTER",
    "FILEFORMAT",
    "FIRST",
    "FIRST_VALUE",
    "FOLLOWING",
    "FOR",
    "FOREIGN",
    "FORMAT",
    "FORMATTED",
    "FULL",
    "FUNCTION",
    "FUNCTIONS",
    "GLOBAL",
    "GRANT",
    "GROUP",
    "GROUPING",
    "HOUR",
    "IF",
    "IGNORE",
    "IMPORT",
    "IN",
    "INDEX",
    "INDEXES",
    "INNER",
    "INPATH",
    "INPUTFORMAT",
    "INTERSECT",
    "INTERVAL",
    "INTO",
    "IS",
    "ITEMS",
    "KEYS",
    "LAST",
    "LAST_VALUE",
    "LATERAL",
    "LAZY",
    "LEADING",
    "LEFT",
    "LIKE",
    "LINES",
    "LIST",
    "LOCAL",
    "LOCATION",
    "LOCK",
    "LOCKS",
    "LOGICAL",
    "MACRO",
    "MAP",
    "MATCHED",
    "MERGE",
    "MINUTE",
    "MONTH",
    "MSCK",
    "NAMESPACE",
    "NAMESPACES",
    "NATURAL",
    "NO",
    "NOT",
    "NULL",
    "NULLS",
    "OF",
    "ONLY",
    "OPTION",
    "OPTIONS",
    // 'OR',
    "ORDER",
    "OUT",
    "OUTER",
    "OUTPUTFORMAT",
    "OVER",
    "OVERLAPS",
    "OVERLAY",
    "OVERWRITE",
    "OWNER",
    "PARTITION",
    "PARTITIONED",
    "PARTITIONS",
    "PERCENT",
    "PLACING",
    "POSITION",
    "PRECEDING",
    "PRIMARY",
    "PRINCIPALS",
    "PROPERTIES",
    "PURGE",
    "QUERY",
    "RANGE",
    "RECORDREADER",
    "RECORDWRITER",
    "RECOVER",
    "REDUCE",
    "REFERENCES",
    "RENAME",
    "REPAIR",
    "REPLACE",
    "RESPECT",
    "RESTRICT",
    "REVOKE",
    "RIGHT",
    "RLIKE",
    "ROLE",
    "ROLES",
    "ROLLBACK",
    "ROLLUP",
    "ROW",
    "ROWS",
    "SCHEMA",
    "SECOND",
    "SELECT",
    "SEMI",
    "SEPARATED",
    "SERDE",
    "SERDEPROPERTIES",
    "SESSION_USER",
    "SETS",
    "SHOW",
    "SKEWED",
    "SOME",
    "SORT",
    "SORTED",
    "START",
    "STATISTICS",
    "STORED",
    "STRATIFY",
    "STRUCT",
    "SUBSTR",
    "SUBSTRING",
    "TABLE",
    "TABLES",
    "TBLPROPERTIES",
    "TEMPORARY",
    "TERMINATED",
    "THEN",
    "TO",
    "TOUCH",
    "TRAILING",
    "TRANSACTION",
    "TRANSACTIONS",
    "TRIM",
    "TRUE",
    "TRUNCATE",
    "UNARCHIVE",
    "UNBOUNDED",
    "UNCACHE",
    "UNIQUE",
    "UNKNOWN",
    "UNLOCK",
    "UNSET",
    "USE",
    "USER",
    "VIEW",
    "WINDOW",
    "YEAR",
    // other
    "ANALYSE",
    "ARRAY_ZIP",
    "COALESCE",
    "CONTAINS",
    "CONVERT",
    "CURRENT ROW",
    "DAYS",
    "DAY_HOUR",
    "DAY_MINUTE",
    "DAY_SECOND",
    "DECODE",
    "DEFAULT",
    "DISTINCTROW",
    "ENCODE",
    "EXPLODE",
    "EXPLODE_OUTER",
    "FIXED",
    "GREATEST",
    "GROUP_CONCAT",
    "HOURS",
    "HOUR_MINUTE",
    "HOUR_SECOND",
    "IFNULL",
    "LEAST",
    "LEVEL",
    "MINUTE_SECOND",
    "NULLIF",
    "OFFSET",
    "ON DELETE",
    "ON UPDATE",
    "OPTIMIZE",
    "REGEXP",
    "SEPARATOR",
    "SIZE",
    "STRING",
    "TYPE",
    "TYPES",
    "UNSIGNED",
    "VARIABLES",
    "YEAR_MONTH"
  ], B = [
    // DDL
    "ALTER COLUMN",
    "ALTER DATABASE",
    "ALTER TABLE",
    "ALTER VIEW",
    "CREATE DATABASE",
    "CREATE FUNCTION",
    "CREATE TABLE",
    "CREATE VIEW",
    "DROP DATABASE",
    "DROP FUNCTION",
    "DROP TABLE",
    "DROP VIEW",
    "REPAIR TABLE",
    "TRUNCATE TABLE",
    "USE DATABASE",
    // DML
    "INSERT INTO",
    "INSERT OVERWRITE",
    "INSERT OVERWRITE DIRECTORY",
    "LOAD",
    // Data Retrieval
    "SELECT",
    "WITH",
    "CLUSTER BY",
    "DISTRIBUTE BY",
    "GROUP BY",
    "HAVING",
    "VALUES",
    "LIMIT",
    "OFFSET",
    "ORDER BY",
    "SORT BY",
    "TABLESAMPLE",
    "WHERE",
    "PIVOT",
    "TRANSFORM",
    "EXPLAIN",
    // Auxiliary
    "ADD FILE",
    "ADD JAR",
    "ANALYZE TABLE",
    "CACHE TABLE",
    "CLEAR CACHE",
    "DESCRIBE DATABASE",
    "DESCRIBE FUNCTION",
    "DESCRIBE QUERY",
    "DESCRIBE TABLE",
    "LIST FILE",
    "LIST JAR",
    "REFRESH",
    "REFRESH TABLE",
    "REFRESH FUNCTION",
    "RESET",
    "SET",
    "SET SCHEMA",
    // verify
    "SHOW COLUMNS",
    "SHOW CREATE TABLE",
    "SHOW DATABASES",
    "SHOW FUNCTIONS",
    "SHOW PARTITIONS",
    "SHOW TABLE EXTENDED",
    "SHOW TABLES",
    "SHOW TBLPROPERTIES",
    "SHOW VIEWS",
    "UNCACHE TABLE",
    // other
    "FROM",
    "INSERT",
    "LATERAL VIEW",
    "UPDATE",
    "WINDOW"
  ], Y = [
    // set booleans
    "INTERSECT",
    "INTERSECT ALL",
    "INTERSECT DISTINCT",
    "UNION",
    "UNION ALL",
    "UNION DISTINCT",
    "EXCEPT",
    "EXCEPT ALL",
    "EXCEPT DISTINCT",
    "MINUS",
    "MINUS ALL",
    "MINUS DISTINCT",
    // apply
    "CROSS APPLY",
    "OUTER APPLY"
  ], E = [
    "JOIN",
    "INNER JOIN",
    "LEFT JOIN",
    "LEFT OUTER JOIN",
    "RIGHT JOIN",
    "RIGHT OUTER JOIN",
    "FULL JOIN",
    "FULL OUTER JOIN",
    "CROSS JOIN",
    "NATURAL JOIN",
    // non-standard-joins
    "ANTI JOIN",
    "SEMI JOIN",
    "LEFT ANTI JOIN",
    "LEFT SEMI JOIN",
    "RIGHT OUTER JOIN",
    "RIGHT SEMI JOIN",
    "NATURAL ANTI JOIN",
    "NATURAL FULL OUTER JOIN",
    "NATURAL INNER JOIN",
    "NATURAL LEFT ANTI JOIN",
    "NATURAL LEFT OUTER JOIN",
    "NATURAL LEFT SEMI JOIN",
    "NATURAL OUTER JOIN",
    "NATURAL RIGHT OUTER JOIN",
    "NATURAL RIGHT SEMI JOIN",
    "NATURAL SEMI JOIN"
  ], m = ["WHEN", "ELSE"], P = /* @__PURE__ */ function(A) {
    V(C, A);
    var y = $(C);
    function C() {
      return D(this, C), y.apply(this, arguments);
    }
    return x(C, [{
      key: "tokenizer",
      value: function() {
        return new n.default({
          reservedCommands: B,
          reservedBinaryCommands: Y,
          reservedJoins: E,
          reservedDependentClauses: m,
          reservedLogicalOperators: ["AND", "OR", "XOR"],
          reservedKeywords: (0, s.dedupe)([].concat(re, f(Object.values(H).flat()))),
          openParens: ["(", "["],
          closeParens: [")", "]"],
          stringTypes: [{
            quote: "''",
            prefixes: ["X"]
          }],
          identTypes: ["``"],
          variableTypes: [{
            quote: "{}",
            prefixes: ["$"],
            requirePrefix: !0
          }],
          operators: C.operators,
          postProcess: R
        });
      }
    }]), C;
  }(i.default);
  t.default = P, G(P, "operators", ["~", "<=>", "&&", "||", "==", "->"]);
  function R(A) {
    return A.map(function(y, C) {
      var j = A[C - 1] || a.EOF_TOKEN, w = A[C + 1] || a.EOF_TOKEN;
      return a.isToken.WINDOW(y) && w.type === a.TokenType.OPEN_PAREN ? c(c({}, y), {}, {
        type: a.TokenType.RESERVED_KEYWORD
      }) : y.value === "ITEMS" && y.type === a.TokenType.RESERVED_KEYWORD && !(j.value === "COLLECTION" && w.value === "TERMINATED") ? {
        type: a.TokenType.IDENTIFIER,
        text: y.text,
        value: y.text
      } : y;
    });
  }
  e.exports = t.default;
})(ql, ql.exports);
var Y_ = ql.exports, Jl = { exports: {} };
(function(e, t) {
  function r(E) {
    "@babel/helpers - typeof";
    return r = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(m) {
      return typeof m;
    } : function(m) {
      return m && typeof Symbol == "function" && m.constructor === Symbol && m !== Symbol.prototype ? "symbol" : typeof m;
    }, r(E);
  }
  Object.defineProperty(t, "__esModule", {
    value: !0
  }), t.default = void 0;
  var i = s(ur), n = s(cr), a = Xe;
  function s(E) {
    return E && E.__esModule ? E : { default: E };
  }
  function o(E) {
    return p(E) || f(E) || c(E) || l();
  }
  function l() {
    throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
  }
  function c(E, m) {
    if (E) {
      if (typeof E == "string")
        return O(E, m);
      var P = Object.prototype.toString.call(E).slice(8, -1);
      if (P === "Object" && E.constructor && (P = E.constructor.name), P === "Map" || P === "Set")
        return Array.from(E);
      if (P === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(P))
        return O(E, m);
    }
  }
  function f(E) {
    if (typeof Symbol < "u" && E[Symbol.iterator] != null || E["@@iterator"] != null)
      return Array.from(E);
  }
  function p(E) {
    if (Array.isArray(E))
      return O(E);
  }
  function O(E, m) {
    (m == null || m > E.length) && (m = E.length);
    for (var P = 0, R = new Array(m); P < m; P++)
      R[P] = E[P];
    return R;
  }
  function d(E, m) {
    if (!(E instanceof m))
      throw new TypeError("Cannot call a class as a function");
  }
  function g(E, m) {
    for (var P = 0; P < m.length; P++) {
      var R = m[P];
      R.enumerable = R.enumerable || !1, R.configurable = !0, "value" in R && (R.writable = !0), Object.defineProperty(E, R.key, R);
    }
  }
  function L(E, m, P) {
    return m && g(E.prototype, m), P && g(E, P), Object.defineProperty(E, "prototype", { writable: !1 }), E;
  }
  function D(E, m) {
    if (typeof m != "function" && m !== null)
      throw new TypeError("Super expression must either be null or a function");
    E.prototype = Object.create(m && m.prototype, { constructor: { value: E, writable: !0, configurable: !0 } }), Object.defineProperty(E, "prototype", { writable: !1 }), m && W(E, m);
  }
  function W(E, m) {
    return W = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(R, A) {
      return R.__proto__ = A, R;
    }, W(E, m);
  }
  function x(E) {
    var m = $();
    return function() {
      var R = z(E), A;
      if (m) {
        var y = z(this).constructor;
        A = Reflect.construct(R, arguments, y);
      } else
        A = R.apply(this, arguments);
      return V(this, A);
    };
  }
  function V(E, m) {
    if (m && (r(m) === "object" || typeof m == "function"))
      return m;
    if (m !== void 0)
      throw new TypeError("Derived constructors may only return object or undefined");
    return _(E);
  }
  function _(E) {
    if (E === void 0)
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return E;
  }
  function $() {
    if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
      return !1;
    if (typeof Proxy == "function")
      return !0;
    try {
      return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      })), !0;
    } catch {
      return !1;
    }
  }
  function z(E) {
    return z = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(P) {
      return P.__proto__ || Object.getPrototypeOf(P);
    }, z(E);
  }
  function F(E, m, P) {
    return m in E ? Object.defineProperty(E, m, { value: P, enumerable: !0, configurable: !0, writable: !0 }) : E[m] = P, E;
  }
  var ae = {
    // https://www.sqlite.org/lang_corefunc.html
    scalar: ["ABS", "CHANGES", "CHAR", "COALESCE", "FORMAT", "GLOB", "HEX", "IFNULL", "IIF", "INSTR", "LAST_INSERT_ROWID", "LENGTH", "LIKE", "LIKELIHOOD", "LIKELY", "LOAD_EXTENSION", "LOWER", "LTRIM", "NULLIF", "PRINTF", "QUOTE", "RANDOM", "RANDOMBLOB", "REPLACE", "ROUND", "RTRIM", "SIGN", "SOUNDEX", "SQLITE_COMPILEOPTION_GET", "SQLITE_COMPILEOPTION_USED", "SQLITE_OFFSET", "SQLITE_SOURCE_ID", "SQLITE_VERSION", "SUBSTR", "SUBSTRING", "TOTAL_CHANGES", "TRIM", "TYPEOF", "UNICODE", "UNLIKELY", "UPPER", "ZEROBLOB"],
    // https://www.sqlite.org/lang_aggfunc.html
    aggregate: ["AVG", "COUNT", "GROUP_CONCAT", "MAX", "MIN", "SUM", "TOTAL"],
    // https://www.sqlite.org/lang_datefunc.html
    datetime: ["DATE", "TIME", "DATETIME", "JULIANDAY", "UNIXEPOCH", "STRFTIME"]
  }, U = [
    "ABORT",
    "ACTION",
    "ADD",
    "AFTER",
    "ALL",
    "ALTER",
    // 'AND',
    "ANY",
    "ARE",
    "ARRAY",
    "ALWAYS",
    "ANALYZE",
    "AS",
    "ASC",
    "ATTACH",
    "AUTOINCREMENT",
    "BEFORE",
    "BEGIN",
    "BETWEEN",
    "BY",
    "CASCADE",
    "CASE",
    "CAST",
    "CHECK",
    "COLLATE",
    "COLUMN",
    "COMMIT",
    "CONFLICT",
    "CONSTRAINT",
    "CREATE",
    "CROSS",
    "CURRENT",
    "CURRENT_DATE",
    "CURRENT_TIME",
    "CURRENT_TIMESTAMP",
    "DATABASE",
    "DEFAULT",
    "DEFERRABLE",
    "DEFERRED",
    "DELETE",
    "DESC",
    "DETACH",
    "DISTINCT",
    "DO",
    "DROP",
    "EACH",
    "ELSE",
    "END",
    "ESCAPE",
    "EXCEPT",
    "EXCLUDE",
    "EXCLUSIVE",
    "EXISTS",
    "EXPLAIN",
    "FAIL",
    "FILTER",
    "FIRST",
    "FOLLOWING",
    "FOR",
    "FOREIGN",
    "FROM",
    "FULL",
    "GENERATED",
    "GLOB",
    "GROUP",
    "GROUPS",
    "HAVING",
    "IF",
    "IGNORE",
    "IMMEDIATE",
    "IN",
    "INDEX",
    "INDEXED",
    "INITIALLY",
    "INNER",
    "INSERT",
    "INSTEAD",
    "INTERSECT",
    "INTO",
    "IS",
    "ISNULL",
    "JOIN",
    "KEY",
    "LAST",
    "LEFT",
    "LIKE",
    "LIMIT",
    "MATCH",
    "MATERIALIZED",
    "NATURAL",
    "NO",
    "NOT",
    "NOTHING",
    "NOTNULL",
    "NULL",
    "NULLS",
    "OF",
    "OFFSET",
    "ON DELETE",
    "ON UPDATE",
    "ONLY",
    "OPEN",
    // 'OR',
    "ORDER",
    "OTHERS",
    "OUTER",
    "OVER",
    "PARTITION",
    "PLAN",
    "PRAGMA",
    "PRECEDING",
    "PRIMARY",
    "QUERY",
    "RAISE",
    "RANGE",
    "RECURSIVE",
    "REFERENCES",
    "REGEXP",
    "REINDEX",
    "RELEASE",
    "RENAME",
    "REPLACE",
    "RESTRICT",
    "RETURNING",
    "RIGHT",
    "ROLLBACK",
    "ROW",
    "ROWS",
    "SAVEPOINT",
    "SELECT",
    "SET",
    "TABLE",
    "TEMP",
    "TEMPORARY",
    "THEN",
    "TIES",
    "TO",
    "TRANSACTION",
    "TRIGGER",
    "UNBOUNDED",
    "UNION",
    "UNIQUE",
    "UPDATE",
    "USING",
    "VACUUM",
    "VALUES",
    "VIEW",
    "VIRTUAL",
    "WHEN",
    "WHERE",
    "WINDOW",
    "WITH",
    "WITHOUT"
  ], G = ["ADD", "ALTER COLUMN", "ALTER TABLE", "CREATE TABLE", "DROP TABLE", "DELETE", "DELETE FROM", "FETCH FIRST", "FETCH NEXT", "FETCH PRIOR", "FETCH LAST", "FETCH ABSOLUTE", "FETCH RELATIVE", "FROM", "GROUP BY", "HAVING", "INSERT INTO", "LIMIT", "OFFSET", "ORDER BY", "SELECT", "SET SCHEMA", "SET", "UPDATE", "VALUES", "WHERE", "WITH", "WINDOW", "PARTITION BY"], H = ["INTERSECT", "INTERSECT ALL", "INTERSECT DISTINCT", "UNION", "UNION ALL", "UNION DISTINCT", "EXCEPT", "EXCEPT ALL", "EXCEPT DISTINCT"], re = ["JOIN", "LEFT JOIN", "LEFT OUTER JOIN", "INNER JOIN", "CROSS JOIN", "NATURAL JOIN", "NATURAL LEFT JOIN", "NATURAL LEFT OUTER JOIN", "NATURAL INNER JOIN", "NATURAL CROSS JOIN"], B = ["WHEN", "ELSE"], Y = /* @__PURE__ */ function(E) {
    D(P, E);
    var m = x(P);
    function P() {
      return d(this, P), m.apply(this, arguments);
    }
    return L(P, [{
      key: "tokenizer",
      value: (
        // https://www.sqlite.org/lang_expr.html
        function() {
          return new n.default({
            reservedCommands: G,
            reservedBinaryCommands: H,
            reservedJoins: re,
            reservedDependentClauses: B,
            reservedKeywords: (0, a.dedupe)([].concat(U, o(Object.values(ae).flat()))),
            stringTypes: [{
              quote: "''",
              prefixes: ["X"]
            }],
            identTypes: ['""', "``", "[]"],
            // https://www.sqlite.org/lang_expr.html#parameters
            positionalParams: !0,
            numberedParamTypes: ["?"],
            namedParamTypes: [":", "@", "$"],
            operators: P.operators
          });
        }
      )
    }]), P;
  }(i.default);
  t.default = Y, F(Y, "operators", ["~", "->", "->>", "||", "<<", ">>", "=="]), e.exports = t.default;
})(Jl, Jl.exports);
var F_ = Jl.exports, Kl = { exports: {} };
(function(e, t) {
  function r(E) {
    "@babel/helpers - typeof";
    return r = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(m) {
      return typeof m;
    } : function(m) {
      return m && typeof Symbol == "function" && m.constructor === Symbol && m !== Symbol.prototype ? "symbol" : typeof m;
    }, r(E);
  }
  Object.defineProperty(t, "__esModule", {
    value: !0
  }), t.default = void 0;
  var i = s(ur), n = s(cr), a = Xe;
  function s(E) {
    return E && E.__esModule ? E : { default: E };
  }
  function o(E) {
    return p(E) || f(E) || c(E) || l();
  }
  function l() {
    throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
  }
  function c(E, m) {
    if (E) {
      if (typeof E == "string")
        return O(E, m);
      var P = Object.prototype.toString.call(E).slice(8, -1);
      if (P === "Object" && E.constructor && (P = E.constructor.name), P === "Map" || P === "Set")
        return Array.from(E);
      if (P === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(P))
        return O(E, m);
    }
  }
  function f(E) {
    if (typeof Symbol < "u" && E[Symbol.iterator] != null || E["@@iterator"] != null)
      return Array.from(E);
  }
  function p(E) {
    if (Array.isArray(E))
      return O(E);
  }
  function O(E, m) {
    (m == null || m > E.length) && (m = E.length);
    for (var P = 0, R = new Array(m); P < m; P++)
      R[P] = E[P];
    return R;
  }
  function d(E, m) {
    if (!(E instanceof m))
      throw new TypeError("Cannot call a class as a function");
  }
  function g(E, m) {
    for (var P = 0; P < m.length; P++) {
      var R = m[P];
      R.enumerable = R.enumerable || !1, R.configurable = !0, "value" in R && (R.writable = !0), Object.defineProperty(E, R.key, R);
    }
  }
  function L(E, m, P) {
    return m && g(E.prototype, m), P && g(E, P), Object.defineProperty(E, "prototype", { writable: !1 }), E;
  }
  function D(E, m) {
    if (typeof m != "function" && m !== null)
      throw new TypeError("Super expression must either be null or a function");
    E.prototype = Object.create(m && m.prototype, { constructor: { value: E, writable: !0, configurable: !0 } }), Object.defineProperty(E, "prototype", { writable: !1 }), m && W(E, m);
  }
  function W(E, m) {
    return W = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(R, A) {
      return R.__proto__ = A, R;
    }, W(E, m);
  }
  function x(E) {
    var m = $();
    return function() {
      var R = z(E), A;
      if (m) {
        var y = z(this).constructor;
        A = Reflect.construct(R, arguments, y);
      } else
        A = R.apply(this, arguments);
      return V(this, A);
    };
  }
  function V(E, m) {
    if (m && (r(m) === "object" || typeof m == "function"))
      return m;
    if (m !== void 0)
      throw new TypeError("Derived constructors may only return object or undefined");
    return _(E);
  }
  function _(E) {
    if (E === void 0)
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return E;
  }
  function $() {
    if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
      return !1;
    if (typeof Proxy == "function")
      return !0;
    try {
      return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      })), !0;
    } catch {
      return !1;
    }
  }
  function z(E) {
    return z = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(P) {
      return P.__proto__ || Object.getPrototypeOf(P);
    }, z(E);
  }
  function F(E, m, P) {
    return m in E ? Object.defineProperty(E, m, { value: P, enumerable: !0, configurable: !0, writable: !0 }) : E[m] = P, E;
  }
  var ae = {
    // https://jakewheat.github.io/sql-overview/sql-2008-foundation-grammar.html#_6_9_set_function_specification
    set: ["GROUPING"],
    // https://jakewheat.github.io/sql-overview/sql-2008-foundation-grammar.html#_6_10_window_function
    window: ["RANK", "DENSE_RANK", "PERCENT_RANK", "CUME_DIST", "ROW_NUMBER"],
    // https://jakewheat.github.io/sql-overview/sql-2008-foundation-grammar.html#_6_27_numeric_value_function
    numeric: ["POSITION", "OCCURRENCES_REGEX", "POSITION_REGEX", "EXTRACT", "CHAR_LENGTH", "CHARACTER_LENGTH", "OCTET_LENGTH", "CARDINALITY", "ABS", "MOD", "LN", "EXP", "POWER", "SQRT", "FLOOR", "CEIL", "CEILING", "WIDTH_BUCKET"],
    // https://jakewheat.github.io/sql-overview/sql-2008-foundation-grammar.html#_6_29_string_value_function
    string: ["SUBSTRING", "SUBSTRING_REGEX", "UPPER", "LOWER", "CONVERT", "TRANSLATE", "TRANSLATE_REGEX", "TRIM", "OVERLAY", "NORMALIZE", "SPECIFICTYPE"],
    // https://jakewheat.github.io/sql-overview/sql-2008-foundation-grammar.html#_6_31_datetime_value_function
    datetime: ["CURRENT_DATE", "CURRENT_TIME", "LOCALTIME", "CURRENT_TIMESTAMP", "LOCALTIMESTAMP"],
    // https://jakewheat.github.io/sql-overview/sql-2008-foundation-grammar.html#_6_38_multiset_value_function
    // SET serves multiple roles: a SET() function and a SET keyword e.g. in UPDATE table SET ...
    // multiset: ['SET'], (disabled for now)
    // https://jakewheat.github.io/sql-overview/sql-2008-foundation-grammar.html#_10_9_aggregate_function
    aggregate: ["COUNT", "AVG", "MAX", "MIN", "SUM", "EVERY", "ANY", "SOME", "STDDEV_POP", "STDDEV_SAMP", "VAR_SAMP", "VAR_POP", "COLLECT", "FUSION", "INTERSECTION", "COVAR_POP", "COVAR_SAMP", "CORR", "REGR_SLOPE", "REGR_INTERCEPT", "REGR_COUNT", "REGR_R2", "REGR_AVGX", "REGR_AVGY", "REGR_SXX", "REGR_SYY", "REGR_SXY", "PERCENTILE_CONT", "PERCENTILE_DISC"]
    // CAST is a pretty complex case, involving multiple forms:
    // - CAST(col AS int)
    // - CAST(...) WITH ...
    // - CAST FROM int
    // - CREATE CAST(mycol AS int) WITH ...
    // cast: ['CAST'], (disabled for now)
  }, U = ["ALL", "ALLOCATE", "ALTER", "ARE", "ARRAY", "AS", "ASENSITIVE", "ASYMMETRIC", "AT", "ATOMIC", "AUTHORIZATION", "BEGIN", "BETWEEN", "BIGINT", "BINARY", "BLOB", "BOOLEAN", "BOTH", "BY", "CALL", "CALLED", "CASCADED", "CAST", "CHAR", "CHARACTER", "CHECK", "CLOB", "CLOSE", "COALESCE", "COLLATE", "COLUMN", "COMMIT", "CONDITION", "CONNECT", "CONSTRAINT", "CORRESPONDING", "CREATE", "CROSS", "CUBE", "CURRENT", "CURRENT_CATALOG", "CURRENT_DEFAULT_TRANSFORM_GROUP", "CURRENT_PATH", "CURRENT_ROLE", "CURRENT_SCHEMA", "CURRENT_TRANSFORM_GROUP_FOR_TYPE", "CURRENT_USER", "CURSOR", "CYCLE", "DATE", "DAY", "DEALLOCATE", "DEC", "DECIMAL", "DECLARE", "DEFAULT", "DELETE", "DEREF", "DESCRIBE", "DETERMINISTIC", "DISCONNECT", "DISTINCT", "DOUBLE", "DROP", "DYNAMIC", "EACH", "ELEMENT", "END-EXEC", "ESCAPE", "EXCEPT", "EXEC", "EXECUTE", "EXISTS", "EXTERNAL", "FALSE", "FETCH", "FILTER", "FLOAT", "FOR", "FOREIGN", "FREE", "FROM", "FULL", "FUNCTION", "GET", "GLOBAL", "GRANT", "GROUP", "HAVING", "HOLD", "HOUR", "IDENTITY", "IN", "INDICATOR", "INNER", "INOUT", "INSENSITIVE", "INSERT", "INT", "INTEGER", "INTERSECT", "INTERVAL", "INTO", "IS", "LANGUAGE", "LARGE", "LATERAL", "LEADING", "LEFT", "LIKE", "LIKE_REGEX", "LOCAL", "MATCH", "MEMBER", "MERGE", "METHOD", "MINUTE", "MODIFIES", "MODULE", "MONTH", "MULTISET", "NATIONAL", "NATURAL", "NCHAR", "NCLOB", "NEW", "NO", "NONE", "NOT", "NULL", "NULLIF", "NUMERIC", "OF", "OLD", "ON DELETE", "ON UPDATE", "ONLY", "OPEN", "ORDER", "OUT", "OUTER", "OVER", "OVERLAPS", "PARAMETER", "PARTITION", "PRECISION", "PREPARE", "PRIMARY", "PROCEDURE", "RANGE", "READS", "REAL", "RECURSIVE", "REF", "REFERENCES", "REFERENCING", "RELEASE", "RESULT", "RETURN", "RETURNS", "REVOKE", "RIGHT", "ROLLBACK", "ROLLUP", "ROW", "ROWS", "SAVEPOINT", "SCOPE", "SCROLL", "SEARCH", "SECOND", "SELECT", "SENSITIVE", "SESSION_USER", "SET", "SIMILAR", "SMALLINT", "SPECIFIC", "SQL", "SQLEXCEPTION", "SQLSTATE", "SQLWARNING", "START", "STATIC", "SUBMULTISET", "SYMMETRIC", "SYSTEM", "SYSTEM_USER", "TABLE", "TABLESAMPLE", "THEN", "TIME", "TIMESTAMP", "TIMEZONE_HOUR", "TIMEZONE_MINUTE", "TO", "TRAILING", "TRANSLATION", "TREAT", "TRIGGER", "TRUE", "UESCAPE", "UNION", "UNIQUE", "UNKNOWN", "UNNEST", "UPDATE", "USER", "VALUE", "VALUES", "VARBINARY", "VARCHAR", "VARYING", "WHENEVER", "WINDOW", "WITHIN", "WITHOUT", "YEAR"], G = ["ADD", "ALTER COLUMN", "ALTER TABLE", "CREATE TABLE", "DROP TABLE", "DELETE FROM", "FETCH FIRST", "FETCH NEXT", "FETCH PRIOR", "FETCH LAST", "FETCH ABSOLUTE", "FETCH RELATIVE", "FROM", "GROUP BY", "HAVING", "INSERT INTO", "LIMIT", "OFFSET", "ORDER BY", "SELECT", "SET SCHEMA", "SET", "UPDATE", "VALUES", "WHERE", "WITH", "WINDOW", "PARTITION BY"], H = ["INTERSECT", "INTERSECT ALL", "INTERSECT DISTINCT", "UNION", "UNION ALL", "UNION DISTINCT", "EXCEPT", "EXCEPT ALL", "EXCEPT DISTINCT"], re = ["JOIN", "INNER JOIN", "LEFT JOIN", "LEFT OUTER JOIN", "RIGHT JOIN", "RIGHT OUTER JOIN", "FULL JOIN", "FULL OUTER JOIN", "CROSS JOIN", "NATURAL JOIN"], B = ["WHEN", "ELSE"], Y = /* @__PURE__ */ function(E) {
    D(P, E);
    var m = x(P);
    function P() {
      return d(this, P), m.apply(this, arguments);
    }
    return L(P, [{
      key: "tokenizer",
      value: function() {
        return new n.default({
          reservedCommands: G,
          reservedBinaryCommands: H,
          reservedJoins: re,
          reservedDependentClauses: B,
          reservedKeywords: (0, a.dedupe)([].concat(U, o(Object.values(ae).flat()))),
          stringTypes: [{
            quote: "''",
            prefixes: ["X"]
          }],
          identTypes: ['""', "``"],
          positionalParams: !0
        });
      }
    }]), P;
  }(i.default);
  t.default = Y, F(Y, "operators", []), e.exports = t.default;
})(Kl, Kl.exports);
var W_ = Kl.exports, eu = { exports: {} };
(function(e, t) {
  function r(E) {
    "@babel/helpers - typeof";
    return r = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(m) {
      return typeof m;
    } : function(m) {
      return m && typeof Symbol == "function" && m.constructor === Symbol && m !== Symbol.prototype ? "symbol" : typeof m;
    }, r(E);
  }
  Object.defineProperty(t, "__esModule", {
    value: !0
  }), t.default = void 0;
  var i = s(ur), n = s(cr), a = Xe;
  function s(E) {
    return E && E.__esModule ? E : { default: E };
  }
  function o(E) {
    return p(E) || f(E) || c(E) || l();
  }
  function l() {
    throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
  }
  function c(E, m) {
    if (E) {
      if (typeof E == "string")
        return O(E, m);
      var P = Object.prototype.toString.call(E).slice(8, -1);
      if (P === "Object" && E.constructor && (P = E.constructor.name), P === "Map" || P === "Set")
        return Array.from(E);
      if (P === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(P))
        return O(E, m);
    }
  }
  function f(E) {
    if (typeof Symbol < "u" && E[Symbol.iterator] != null || E["@@iterator"] != null)
      return Array.from(E);
  }
  function p(E) {
    if (Array.isArray(E))
      return O(E);
  }
  function O(E, m) {
    (m == null || m > E.length) && (m = E.length);
    for (var P = 0, R = new Array(m); P < m; P++)
      R[P] = E[P];
    return R;
  }
  function d(E, m) {
    if (!(E instanceof m))
      throw new TypeError("Cannot call a class as a function");
  }
  function g(E, m) {
    for (var P = 0; P < m.length; P++) {
      var R = m[P];
      R.enumerable = R.enumerable || !1, R.configurable = !0, "value" in R && (R.writable = !0), Object.defineProperty(E, R.key, R);
    }
  }
  function L(E, m, P) {
    return m && g(E.prototype, m), P && g(E, P), Object.defineProperty(E, "prototype", { writable: !1 }), E;
  }
  function D(E, m) {
    if (typeof m != "function" && m !== null)
      throw new TypeError("Super expression must either be null or a function");
    E.prototype = Object.create(m && m.prototype, { constructor: { value: E, writable: !0, configurable: !0 } }), Object.defineProperty(E, "prototype", { writable: !1 }), m && W(E, m);
  }
  function W(E, m) {
    return W = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(R, A) {
      return R.__proto__ = A, R;
    }, W(E, m);
  }
  function x(E) {
    var m = $();
    return function() {
      var R = z(E), A;
      if (m) {
        var y = z(this).constructor;
        A = Reflect.construct(R, arguments, y);
      } else
        A = R.apply(this, arguments);
      return V(this, A);
    };
  }
  function V(E, m) {
    if (m && (r(m) === "object" || typeof m == "function"))
      return m;
    if (m !== void 0)
      throw new TypeError("Derived constructors may only return object or undefined");
    return _(E);
  }
  function _(E) {
    if (E === void 0)
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return E;
  }
  function $() {
    if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
      return !1;
    if (typeof Proxy == "function")
      return !0;
    try {
      return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      })), !0;
    } catch {
      return !1;
    }
  }
  function z(E) {
    return z = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(P) {
      return P.__proto__ || Object.getPrototypeOf(P);
    }, z(E);
  }
  function F(E, m, P) {
    return m in E ? Object.defineProperty(E, m, { value: P, enumerable: !0, configurable: !0, writable: !0 }) : E[m] = P, E;
  }
  var ae = {
    aggregate: ["APPROX_COUNT_DISTINCT", "AVG", "CHECKSUM_AGG", "COUNT", "COUNT_BIG", "GROUPING", "GROUPING_ID", "MAX", "MIN", "STDEV", "STDEVP", "SUM", "VAR", "VARP"],
    analytic: ["CUME_DIST", "FIRST_VALUE", "LAG", "LAST_VALUE", "LEAD", "PERCENTILE_CONT", "PERCENTILE_DISC", "PERCENT_RANK", "Collation - COLLATIONPROPERTY", "Collation - TERTIARY_WEIGHTS"],
    configuration: ["@@DBTS", "@@LANGID", "@@LANGUAGE", "@@LOCK_TIMEOUT", "@@MAX_CONNECTIONS", "@@MAX_PRECISION", "@@NESTLEVEL", "@@OPTIONS", "@@REMSERVER", "@@SERVERNAME", "@@SERVICENAME", "@@SPID", "@@TEXTSIZE", "@@VERSION"],
    conversion: ["CAST", "CONVERT", "PARSE", "TRY_CAST", "TRY_CONVERT", "TRY_PARSE"],
    cryptographic: ["ASYMKEY_ID", "ASYMKEYPROPERTY", "CERTPROPERTY", "CERT_ID", "CRYPT_GEN_RANDOM", "DECRYPTBYASYMKEY", "DECRYPTBYCERT", "DECRYPTBYKEY", "DECRYPTBYKEYAUTOASYMKEY", "DECRYPTBYKEYAUTOCERT", "DECRYPTBYPASSPHRASE", "ENCRYPTBYASYMKEY", "ENCRYPTBYCERT", "ENCRYPTBYKEY", "ENCRYPTBYPASSPHRASE", "HASHBYTES", "IS_OBJECTSIGNED", "KEY_GUID", "KEY_ID", "KEY_NAME", "SIGNBYASYMKEY", "SIGNBYCERT", "SYMKEYPROPERTY", "VERIFYSIGNEDBYCERT", "VERIFYSIGNEDBYASYMKEY"],
    cursor: ["@@CURSOR_ROWS", "@@FETCH_STATUS", "CURSOR_STATUS"],
    dataType: ["DATALENGTH", "IDENT_CURRENT", "IDENT_INCR", "IDENT_SEED", "IDENTITY", "SQL_VARIANT_PROPERTY"],
    datetime: ["@@DATEFIRST", "CURRENT_TIMESTAMP", "CURRENT_TIMEZONE", "CURRENT_TIMEZONE_ID", "DATEADD", "DATEDIFF", "DATEDIFF_BIG", "DATEFROMPARTS", "DATENAME", "DATEPART", "DATETIME2FROMPARTS", "DATETIMEFROMPARTS", "DATETIMEOFFSETFROMPARTS", "DAY", "EOMONTH", "GETDATE", "GETUTCDATE", "ISDATE", "MONTH", "SMALLDATETIMEFROMPARTS", "SWITCHOFFSET", "SYSDATETIME", "SYSDATETIMEOFFSET", "SYSUTCDATETIME", "TIMEFROMPARTS", "TODATETIMEOFFSET", "YEAR", "JSON", "ISJSON", "JSON_VALUE", "JSON_QUERY", "JSON_MODIFY"],
    mathematical: ["ABS", "ACOS", "ASIN", "ATAN", "ATN2", "CEILING", "COS", "COT", "DEGREES", "EXP", "FLOOR", "LOG", "LOG10", "PI", "POWER", "RADIANS", "RAND", "ROUND", "SIGN", "SIN", "SQRT", "SQUARE", "TAN", "CHOOSE", "GREATEST", "IIF", "LEAST"],
    metadata: ["@@PROCID", "APP_NAME", "APPLOCK_MODE", "APPLOCK_TEST", "ASSEMBLYPROPERTY", "COL_LENGTH", "COL_NAME", "COLUMNPROPERTY", "DATABASEPROPERTYEX", "DB_ID", "DB_NAME", "FILE_ID", "FILE_IDEX", "FILE_NAME", "FILEGROUP_ID", "FILEGROUP_NAME", "FILEGROUPPROPERTY", "FILEPROPERTY", "FILEPROPERTYEX", "FULLTEXTCATALOGPROPERTY", "FULLTEXTSERVICEPROPERTY", "INDEX_COL", "INDEXKEY_PROPERTY", "INDEXPROPERTY", "NEXT VALUE FOR", "OBJECT_DEFINITION", "OBJECT_ID", "OBJECT_NAME", "OBJECT_SCHEMA_NAME", "OBJECTPROPERTY", "OBJECTPROPERTYEX", "ORIGINAL_DB_NAME", "PARSENAME", "SCHEMA_ID", "SCHEMA_NAME", "SCOPE_IDENTITY", "SERVERPROPERTY", "STATS_DATE", "TYPE_ID", "TYPE_NAME", "TYPEPROPERTY"],
    ranking: ["DENSE_RANK", "NTILE", "RANK", "ROW_NUMBER", "PUBLISHINGSERVERNAME"],
    security: ["CERTENCODED", "CERTPRIVATEKEY", "CURRENT_USER", "DATABASE_PRINCIPAL_ID", "HAS_DBACCESS", "HAS_PERMS_BY_NAME", "IS_MEMBER", "IS_ROLEMEMBER", "IS_SRVROLEMEMBER", "LOGINPROPERTY", "ORIGINAL_LOGIN", "PERMISSIONS", "PWDENCRYPT", "PWDCOMPARE", "SESSION_USER", "SESSIONPROPERTY", "SUSER_ID", "SUSER_NAME", "SUSER_SID", "SUSER_SNAME", "SYSTEM_USER", "USER", "USER_ID", "USER_NAME"],
    string: ["ASCII", "CHAR", "CHARINDEX", "CONCAT", "CONCAT_WS", "DIFFERENCE", "FORMAT", "LEFT", "LEN", "LOWER", "LTRIM", "NCHAR", "PATINDEX", "QUOTENAME", "REPLACE", "REPLICATE", "REVERSE", "RIGHT", "RTRIM", "SOUNDEX", "SPACE", "STR", "STRING_AGG", "STRING_ESCAPE", "STUFF", "SUBSTRING", "TRANSLATE", "TRIM", "UNICODE", "UPPER"],
    system: ["$PARTITION", "@@ERROR", "@@IDENTITY", "@@PACK_RECEIVED", "@@ROWCOUNT", "@@TRANCOUNT", "BINARY_CHECKSUM", "CHECKSUM", "COMPRESS", "CONNECTIONPROPERTY", "CONTEXT_INFO", "CURRENT_REQUEST_ID", "CURRENT_TRANSACTION_ID", "DECOMPRESS", "ERROR_LINE", "ERROR_MESSAGE", "ERROR_NUMBER", "ERROR_PROCEDURE", "ERROR_SEVERITY", "ERROR_STATE", "FORMATMESSAGE", "GET_FILESTREAM_TRANSACTION_CONTEXT", "GETANSINULL", "HOST_ID", "HOST_NAME", "ISNULL", "ISNUMERIC", "MIN_ACTIVE_ROWVERSION", "NEWID", "NEWSEQUENTIALID", "ROWCOUNT_BIG", "SESSION_CONTEXT", "XACT_STATE"],
    statistical: ["@@CONNECTIONS", "@@CPU_BUSY", "@@IDLE", "@@IO_BUSY", "@@PACK_SENT", "@@PACKET_ERRORS", "@@TIMETICKS", "@@TOTAL_ERRORS", "@@TOTAL_READ", "@@TOTAL_WRITE", "TEXTPTR", "TEXTVALID"],
    trigger: ["COLUMNS_UPDATED", "EVENTDATA", "TRIGGER_NESTLEVEL", "UPDATE"]
  }, U = {
    standard: [
      "ADD",
      "ALL",
      "ALTER",
      // 'AND',
      "ANY",
      "AS",
      "ASC",
      "AUTHORIZATION",
      "BACKUP",
      "BEGIN",
      "BETWEEN",
      "BREAK",
      "BROWSE",
      "BULK",
      "BY",
      "CASCADE",
      "CHECK",
      "CHECKPOINT",
      "CLOSE",
      "CLUSTERED",
      "COALESCE",
      "COLLATE",
      "COLUMN",
      "COMMIT",
      "COMPUTE",
      "CONSTRAINT",
      "CONTAINS",
      "CONTAINSTABLE",
      "CONTINUE",
      "CONVERT",
      "CREATE",
      "CROSS",
      "CURRENT",
      "CURRENT_DATE",
      "CURRENT_TIME",
      "CURRENT_TIMESTAMP",
      "CURRENT_USER",
      "CURSOR",
      "DATABASE",
      "DBCC",
      "DEALLOCATE",
      "DECLARE",
      "DEFAULT",
      "DELETE",
      "DENY",
      "DESC",
      "DISK",
      "DISTINCT",
      "DISTRIBUTED",
      "DOUBLE",
      "DROP",
      "DUMP",
      "ERRLVL",
      "ESCAPE",
      "EXEC",
      "EXECUTE",
      "EXISTS",
      "EXIT",
      "EXTERNAL",
      "FETCH",
      "FILE",
      "FILLFACTOR",
      "FOR",
      "FOREIGN",
      "FREETEXT",
      "FREETEXTTABLE",
      "FROM",
      "FULL",
      "FUNCTION",
      "GOTO",
      "GRANT",
      "GROUP",
      "HAVING",
      "HOLDLOCK",
      "IDENTITY",
      "IDENTITYCOL",
      "IDENTITY_INSERT",
      "IF",
      "IN",
      "INDEX",
      "INNER",
      "INSERT",
      "INTERSECT",
      "INTO",
      "IS",
      "JOIN",
      "KEY",
      "KILL",
      "LEFT",
      "LIKE",
      "LINENO",
      "LOAD",
      "MERGE",
      "NATIONAL",
      "NOCHECK",
      "NONCLUSTERED",
      "NOT",
      "NULL",
      "NULLIF",
      "OF",
      "OFF",
      "OFFSETS",
      "ON DELETE",
      "ON UPDATE",
      "OPEN",
      "OPENDATASOURCE",
      "OPENQUERY",
      "OPENROWSET",
      "OPENXML",
      "OPTION",
      // 'OR',
      "ORDER",
      "OUTER",
      "OVER",
      "PERCENT",
      "PIVOT",
      "PLAN",
      "PRECISION",
      "PRIMARY",
      "PRINT",
      "PROC",
      "PROCEDURE",
      "PUBLIC",
      "RAISERROR",
      "READ",
      "READTEXT",
      "RECONFIGURE",
      "REFERENCES",
      "REPLICATION",
      "RESTORE",
      "RESTRICT",
      "RETURN",
      "REVERT",
      "REVOKE",
      "RIGHT",
      "ROLLBACK",
      "ROWCOUNT",
      "ROWGUIDCOL",
      "RULE",
      "SAVE",
      "SCHEMA",
      "SECURITYAUDIT",
      "SELECT",
      "SEMANTICKEYPHRASETABLE",
      "SEMANTICSIMILARITYDETAILSTABLE",
      "SEMANTICSIMILARITYTABLE",
      "SESSION_USER",
      "SET",
      "SETUSER",
      "SHUTDOWN",
      "SOME",
      "STATISTICS",
      "SYSTEM_USER",
      "TABLE",
      "TABLESAMPLE",
      "TEXTSIZE",
      "THEN",
      "TO",
      "TOP",
      "TRAN",
      "TRANSACTION",
      "TRIGGER",
      "TRUNCATE",
      "TRY_CONVERT",
      "TSEQUAL",
      "UNION",
      "UNIQUE",
      "UNPIVOT",
      "UPDATE",
      "UPDATETEXT",
      "USE",
      "USER",
      "VALUES",
      "VARYING",
      "VIEW",
      "WAITFOR",
      "WHERE",
      "WHILE",
      "WITH",
      "WITHIN GROUP",
      "WRITETEXT"
    ],
    odbc: [
      "ABSOLUTE",
      "ACTION",
      "ADA",
      "ADD",
      "ALL",
      "ALLOCATE",
      "ALTER",
      // 'AND',
      "ANY",
      "ARE",
      "AS",
      "ASC",
      "ASSERTION",
      "AT",
      "AUTHORIZATION",
      "AVG",
      "BEGIN",
      "BETWEEN",
      "BIT",
      "BIT_LENGTH",
      "BOTH",
      "BY",
      "CASCADE",
      "CASCADED",
      "CAST",
      "CATALOG",
      "CHAR",
      "CHARACTER",
      "CHARACTER_LENGTH",
      "CHAR_LENGTH",
      "CHECK",
      "CLOSE",
      "COALESCE",
      "COLLATE",
      "COLLATION",
      "COLUMN",
      "COMMIT",
      "CONNECT",
      "CONNECTION",
      "CONSTRAINT",
      "CONSTRAINTS",
      "CONTINUE",
      "CONVERT",
      "CORRESPONDING",
      "COUNT",
      "CREATE",
      "CROSS",
      "CURRENT",
      "CURRENT_DATE",
      "CURRENT_TIME",
      "CURRENT_TIMESTAMP",
      "CURRENT_USER",
      "CURSOR",
      "DATE",
      "DAY",
      "DEALLOCATE",
      "DEC",
      "DECIMAL",
      "DECLARE",
      "DEFAULT",
      "DEFERRABLE",
      "DEFERRED",
      "DELETE",
      "DESC",
      "DESCRIBE",
      "DESCRIPTOR",
      "DIAGNOSTICS",
      "DISCONNECT",
      "DISTINCT",
      "DOMAIN",
      "DOUBLE",
      "DROP",
      "END-EXEC",
      "ESCAPE",
      "EXCEPTION",
      "EXEC",
      "EXECUTE",
      "EXISTS",
      "EXTERNAL",
      "EXTRACT",
      "FALSE",
      "FETCH",
      "FIRST",
      "FLOAT",
      "FOR",
      "FOREIGN",
      "FORTRAN",
      "FOUND",
      "FROM",
      "FULL",
      "GET",
      "GLOBAL",
      "GO",
      "GOTO",
      "GRANT",
      "GROUP",
      "HAVING",
      "HOUR",
      "IDENTITY",
      "IMMEDIATE",
      "IN",
      "INCLUDE",
      "INDEX",
      "INDICATOR",
      "INITIALLY",
      "INNER",
      "INPUT",
      "INSENSITIVE",
      "INSERT",
      "INT",
      "INTEGER",
      "INTERSECT",
      "INTERVAL",
      "INTO",
      "IS",
      "ISOLATION",
      "JOIN",
      "KEY",
      "LANGUAGE",
      "LAST",
      "LEADING",
      "LEFT",
      "LEVEL",
      "LIKE",
      "LOCAL",
      "LOWER",
      "MATCH",
      "MAX",
      "MIN",
      "MINUTE",
      "MODULE",
      "MONTH",
      "NAMES",
      "NATIONAL",
      "NATURAL",
      "NCHAR",
      "NEXT",
      "NO",
      "NONE",
      "NOT",
      "NULL",
      "NULLIF",
      "NUMERIC",
      "OCTET_LENGTH",
      "OF",
      "ONLY",
      "OPEN",
      "OPTION",
      // 'OR',
      "ORDER",
      "OUTER",
      "OUTPUT",
      "OVERLAPS",
      "PAD",
      "PARTIAL",
      "PASCAL",
      "POSITION",
      "PRECISION",
      "PREPARE",
      "PRESERVE",
      "PRIMARY",
      "PRIOR",
      "PRIVILEGES",
      "PROCEDURE",
      "PUBLIC",
      "READ",
      "REAL",
      "REFERENCES",
      "RELATIVE",
      "RESTRICT",
      "REVOKE",
      "RIGHT",
      "ROLLBACK",
      "ROWS",
      "SCHEMA",
      "SCROLL",
      "SECOND",
      "SECTION",
      "SELECT",
      "SESSION",
      "SESSION_USER",
      "SET",
      "SIZE",
      "SMALLINT",
      "SOME",
      "SPACE",
      "SQL",
      "SQLCA",
      "SQLCODE",
      "SQLERROR",
      "SQLSTATE",
      "SQLWARNING",
      "SUBSTRING",
      "SUM",
      "SYSTEM_USER",
      "TABLE",
      "TEMPORARY",
      "TIME",
      "TIMESTAMP",
      "TIMEZONE_HOUR",
      "TIMEZONE_MINUTE",
      "TO",
      "TRAILING",
      "TRANSACTION",
      "TRANSLATE",
      "TRANSLATION",
      "TRIM",
      "TRUE",
      "UNION",
      "UNIQUE",
      "UNKNOWN",
      "UPDATE",
      "UPPER",
      "USAGE",
      "USER",
      "VALUE",
      "VALUES",
      "VARCHAR",
      "VARYING",
      "VIEW",
      "WHENEVER",
      "WHERE",
      "WITH",
      "WORK",
      "WRITE",
      "YEAR",
      "ZONE"
    ],
    future: ["ABSOLUTE", "ACTION", "ADMIN", "AFTER", "AGGREGATE", "ALIAS", "ALLOCATE", "ARE", "ARRAY", "ASENSITIVE", "ASSERTION", "ASYMMETRIC", "AT", "ATOMIC", "BEFORE", "BINARY", "BIT", "BLOB", "BOOLEAN", "BOTH", "BREADTH", "CALL", "CALLED", "CARDINALITY", "CASCADED", "CAST", "CATALOG", "CHAR", "CHARACTER", "CLASS", "CLOB", "COLLATION", "COLLECT", "COMPLETION", "CONDITION", "CONNECT", "CONNECTION", "CONSTRAINTS", "CONSTRUCTOR", "CORR", "CORRESPONDING", "COVAR_POP", "COVAR_SAMP", "CUBE", "CUME_DIST", "CURRENT_CATALOG", "CURRENT_DEFAULT_TRANSFORM_GROUP", "CURRENT_PATH", "CURRENT_ROLE", "CURRENT_SCHEMA", "CURRENT_TRANSFORM_GROUP_FOR_TYPE", "CYCLE", "DATA", "DATE", "DAY", "DEC", "DECIMAL", "DEFERRABLE", "DEFERRED", "DEPTH", "DEREF", "DESCRIBE", "DESCRIPTOR", "DESTROY", "DESTRUCTOR", "DETERMINISTIC", "DIAGNOSTICS", "DICTIONARY", "DISCONNECT", "DOMAIN", "DYNAMIC", "EACH", "ELEMENT", "END-EXEC", "EQUALS", "EVERY", "FALSE", "FILTER", "FIRST", "FLOAT", "FOUND", "FREE", "FULLTEXTTABLE", "FUSION", "GENERAL", "GET", "GLOBAL", "GO", "GROUPING", "HOLD", "HOST", "HOUR", "IGNORE", "IMMEDIATE", "INDICATOR", "INITIALIZE", "INITIALLY", "INOUT", "INPUT", "INT", "INTEGER", "INTERSECTION", "INTERVAL", "ISOLATION", "ITERATE", "LANGUAGE", "LARGE", "LAST", "LATERAL", "LEADING", "LESS", "LEVEL", "LIKE_REGEX", "LIMIT", "LN", "LOCAL", "LOCALTIME", "LOCALTIMESTAMP", "LOCATOR", "MAP", "MATCH", "MEMBER", "METHOD", "MINUTE", "MOD", "MODIFIES", "MODIFY", "MODULE", "MONTH", "MULTISET", "NAMES", "NATURAL", "NCHAR", "NCLOB", "NEW", "NEXT", "NO", "NONE", "NORMALIZE", "NUMERIC", "OBJECT", "OCCURRENCES_REGEX", "OLD", "ONLY", "OPERATION", "ORDINALITY", "OUT", "OUTPUT", "OVERLAY", "PAD", "PARAMETER", "PARAMETERS", "PARTIAL", "PARTITION", "PATH", "PERCENTILE_CONT", "PERCENTILE_DISC", "PERCENT_RANK", "POSITION_REGEX", "POSTFIX", "PREFIX", "PREORDER", "PREPARE", "PRESERVE", "PRIOR", "PRIVILEGES", "RANGE", "READS", "REAL", "RECURSIVE", "REF", "REFERENCING", "REGR_AVGX", "REGR_AVGY", "REGR_COUNT", "REGR_INTERCEPT", "REGR_R2", "REGR_SLOPE", "REGR_SXX", "REGR_SXY", "REGR_SYY", "RELATIVE", "RELEASE", "RESULT", "RETURNS", "ROLE", "ROLLUP", "ROUTINE", "ROW", "ROWS", "SAVEPOINT", "SCOPE", "SCROLL", "SEARCH", "SECOND", "SECTION", "SENSITIVE", "SEQUENCE", "SESSION", "SETS", "SIMILAR", "SIZE", "SMALLINT", "SPACE", "SPECIFIC", "SPECIFICTYPE", "SQL", "SQLEXCEPTION", "SQLSTATE", "SQLWARNING", "START", "STATE", "STATEMENT", "STATIC", "STDDEV_POP", "STDDEV_SAMP", "STRUCTURE", "SUBMULTISET", "SUBSTRING_REGEX", "SYMMETRIC", "SYSTEM", "TEMPORARY", "TERMINATE", "THAN", "TIME", "TIMESTAMP", "TIMEZONE_HOUR", "TIMEZONE_MINUTE", "TRAILING", "TRANSLATE_REGEX", "TRANSLATION", "TREAT", "TRUE", "UESCAPE", "UNDER", "UNKNOWN", "UNNEST", "USAGE", "USING", "VALUE", "VARCHAR", "VARIABLE", "VAR_POP", "VAR_SAMP", "WHENEVER", "WIDTH_BUCKET", "WINDOW", "WITHIN", "WITHOUT", "WORK", "WRITE", "XMLAGG", "XMLATTRIBUTES", "XMLBINARY", "XMLCAST", "XMLCOMMENT", "XMLCONCAT", "XMLDOCUMENT", "XMLELEMENT", "XMLEXISTS", "XMLFOREST", "XMLITERATE", "XMLNAMESPACES", "XMLPARSE", "XMLPI", "XMLQUERY", "XMLSERIALIZE", "XMLTABLE", "XMLTEXT", "XMLVALIDATE", "YEAR", "ZONE"]
  }, G = [
    "ADD SENSITIVITY CLASSIFICATION",
    "ADD SIGNATURE",
    "AGGREGATE",
    "ANSI_DEFAULTS",
    "ANSI_NULLS",
    "ANSI_NULL_DFLT_OFF",
    "ANSI_NULL_DFLT_ON",
    "ANSI_PADDING",
    "ANSI_WARNINGS",
    "APPLICATION ROLE",
    "ARITHABORT",
    "ARITHIGNORE",
    "ASSEMBLY",
    "ASYMMETRIC KEY",
    "AUTHORIZATION",
    "AVAILABILITY GROUP",
    "BACKUP",
    "BACKUP CERTIFICATE",
    "BACKUP MASTER KEY",
    "BACKUP SERVICE MASTER KEY",
    "BEGIN CONVERSATION TIMER",
    "BEGIN DIALOG CONVERSATION",
    "BROKER PRIORITY",
    "BULK INSERT",
    "CERTIFICATE",
    "CLOSE MASTER KEY",
    "CLOSE SYMMETRIC KEY",
    "COLLATE",
    "COLUMN ENCRYPTION KEY",
    "COLUMN MASTER KEY",
    "COLUMNSTORE INDEX",
    "CONCAT_NULL_YIELDS_NULL",
    "CONTEXT_INFO",
    "CONTRACT",
    "CREDENTIAL",
    "CRYPTOGRAPHIC PROVIDER",
    "CURSOR_CLOSE_ON_COMMIT",
    "DATABASE",
    "DATABASE AUDIT SPECIFICATION",
    "DATABASE ENCRYPTION KEY",
    "DATABASE HADR",
    "DATABASE SCOPED CONFIGURATION",
    "DATABASE SCOPED CREDENTIAL",
    "DATABASE SET",
    "DATEFIRST",
    "DATEFORMAT",
    "DEADLOCK_PRIORITY",
    "DEFAULT",
    "DELETE",
    "DELETE FROM",
    "DENY",
    "DENY XML",
    "DISABLE TRIGGER",
    "ENABLE TRIGGER",
    "END CONVERSATION",
    "ENDPOINT",
    "EVENT NOTIFICATION",
    "EVENT SESSION",
    "EXECUTE AS",
    "EXTERNAL DATA SOURCE",
    "EXTERNAL FILE FORMAT",
    "EXTERNAL LANGUAGE",
    "EXTERNAL LIBRARY",
    "EXTERNAL RESOURCE POOL",
    "EXTERNAL TABLE",
    "FIPS_FLAGGER",
    "FMTONLY",
    "FORCEPLAN",
    "FULLTEXT CATALOG",
    "FULLTEXT INDEX",
    "FULLTEXT STOPLIST",
    "FUNCTION",
    "GET CONVERSATION GROUP",
    "GET_TRANSMISSION_STATUS",
    "GRANT",
    "GRANT XML",
    "IDENTITY_INSERT",
    "IMPLICIT_TRANSACTIONS",
    "INDEX",
    "INSERT",
    "LANGUAGE",
    "LOCK_TIMEOUT",
    "LOGIN",
    "MASTER KEY",
    "MERGE",
    "MESSAGE TYPE",
    "MOVE CONVERSATION",
    "NOCOUNT",
    "NOEXEC",
    "NUMERIC_ROUNDABORT",
    "OFFSETS",
    "OPEN MASTER KEY",
    "OPEN SYMMETRIC KEY",
    "PARSEONLY",
    "PARTITION FUNCTION",
    "PARTITION SCHEME",
    "PROCEDURE",
    "QUERY_GOVERNOR_COST_LIMIT",
    "QUEUE",
    "QUOTED_IDENTIFIER",
    "RECEIVE",
    "REMOTE SERVICE BINDING",
    "REMOTE_PROC_TRANSACTIONS",
    "RESOURCE GOVERNOR",
    "RESOURCE POOL",
    "RESTORE",
    "RESTORE FILELISTONLY",
    "RESTORE HEADERONLY",
    "RESTORE LABELONLY",
    "RESTORE MASTER KEY",
    "RESTORE REWINDONLY",
    "RESTORE SERVICE MASTER KEY",
    "RESTORE VERIFYONLY",
    "REVERT",
    "REVOKE",
    "REVOKE XML",
    "ROLE",
    "ROUTE",
    "ROWCOUNT",
    "RULE",
    "SCHEMA",
    "SEARCH PROPERTY LIST",
    "SECURITY POLICY",
    "SELECTIVE XML INDEX",
    "SEND",
    "SENSITIVITY CLASSIFICATION",
    "SEQUENCE",
    "SERVER AUDIT",
    "SERVER AUDIT SPECIFICATION",
    "SERVER CONFIGURATION",
    "SERVER ROLE",
    "SERVICE",
    "SERVICE MASTER KEY",
    "SET",
    "SETUSER",
    "SHOWPLAN_ALL",
    "SHOWPLAN_TEXT",
    "SHOWPLAN_XML",
    "SIGNATURE",
    "SPATIAL INDEX",
    "STATISTICS",
    "STATISTICS IO",
    "STATISTICS PROFILE",
    "STATISTICS TIME",
    "STATISTICS XML",
    "SYMMETRIC KEY",
    "SYNONYM",
    "TABLE",
    "TABLE IDENTITY",
    "TEXTSIZE",
    "TRANSACTION ISOLATION LEVEL",
    "TRIGGER",
    "TRUNCATE TABLE",
    "TYPE",
    "UPDATE",
    "UPDATE STATISTICS",
    "USER",
    "VIEW",
    "WORKLOAD GROUP",
    "XACT_ABORT",
    "XML INDEX",
    "XML SCHEMA COLLECTION",
    // other
    "ALTER COLUMN",
    "ALTER TABLE",
    "CREATE TABLE",
    "FROM",
    "GROUP BY",
    "HAVING",
    "INSERT INTO",
    // verify
    "DROP TABLE",
    // verify
    "SET SCHEMA",
    // verify
    "LIMIT",
    "OFFSET",
    "ORDER BY",
    "SELECT",
    "VALUES",
    "WHERE",
    "WITH",
    "WINDOW",
    "PARTITION BY"
  ], H = ["INTERSECT", "INTERSECT ALL", "INTERSECT DISTINCT", "UNION", "UNION ALL", "UNION DISTINCT", "EXCEPT", "EXCEPT ALL", "EXCEPT DISTINCT", "MINUS", "MINUS ALL", "MINUS DISTINCT"], re = ["JOIN", "INNER JOIN", "LEFT JOIN", "LEFT OUTER JOIN", "RIGHT JOIN", "RIGHT OUTER JOIN", "FULL JOIN", "FULL OUTER JOIN", "CROSS JOIN"], B = ["WHEN", "ELSE"], Y = /* @__PURE__ */ function(E) {
    D(P, E);
    var m = x(P);
    function P() {
      return d(this, P), m.apply(this, arguments);
    }
    return L(P, [{
      key: "tokenizer",
      value: function() {
        return new n.default({
          reservedCommands: G,
          reservedBinaryCommands: H,
          reservedJoins: re,
          reservedDependentClauses: B,
          reservedKeywords: (0, a.dedupe)([].concat(o(Object.values(U).flat()), o(Object.values(ae).flat()))),
          stringTypes: [{
            quote: "''",
            prefixes: ["N"]
          }],
          identTypes: ['""', "[]"],
          identChars: {
            first: "#@",
            rest: "#@$"
          },
          namedParamTypes: ["@"],
          quotedParamTypes: ["@"],
          operators: P.operators
          // TODO: Support for money constants
        });
      }
    }]), P;
  }(i.default);
  t.default = Y, F(Y, "operators", ["~", "!<", "!>", "+=", "-=", "*=", "/=", "%=", "|=", "&=", "^=", "::"]), e.exports = t.default;
})(eu, eu.exports);
var X_ = eu.exports;
Object.defineProperty(Yr, "__esModule", {
  value: !0
});
Yr.supportedDialects = Yr.formatters = Yr.format = Yr.ConfigError = void 0;
var j_ = fr(U_), Z_ = fr(w_), H_ = fr(M_), z_ = fr(k_), q_ = fr(Q_), J_ = fr(G_), K_ = fr(V_), eb = fr(B_), tb = fr($_), rb = fr(Y_), ib = fr(F_), nb = fr(W_), ab = fr(X_);
function fr(e) {
  return e && e.__esModule ? e : { default: e };
}
function Ah(e, t) {
  for (var r = 0; r < t.length; r++) {
    var i = t[r];
    i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i);
  }
}
function sb(e, t, r) {
  return t && Ah(e.prototype, t), r && Ah(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function ob(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function lb(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && ha(e, t);
}
function ub(e) {
  var t = Ud();
  return function() {
    var i = pa(e), n;
    if (t) {
      var a = pa(this).constructor;
      n = Reflect.construct(i, arguments, a);
    } else
      n = i.apply(this, arguments);
    return cb(this, n);
  };
}
function cb(e, t) {
  if (t && (Ms(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return fb(e);
}
function fb(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function tu(e) {
  var t = typeof Map == "function" ? /* @__PURE__ */ new Map() : void 0;
  return tu = function(i) {
    if (i === null || !hb(i))
      return i;
    if (typeof i != "function")
      throw new TypeError("Super expression must either be null or a function");
    if (typeof t < "u") {
      if (t.has(i))
        return t.get(i);
      t.set(i, n);
    }
    function n() {
      return ns(i, arguments, pa(this).constructor);
    }
    return n.prototype = Object.create(i.prototype, { constructor: { value: n, enumerable: !1, writable: !0, configurable: !0 } }), ha(n, i);
  }, tu(e);
}
function ns(e, t, r) {
  return Ud() ? ns = Reflect.construct.bind() : ns = function(n, a, s) {
    var o = [null];
    o.push.apply(o, a);
    var l = Function.bind.apply(n, o), c = new l();
    return s && ha(c, s.prototype), c;
  }, ns.apply(null, arguments);
}
function Ud() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function hb(e) {
  return Function.toString.call(e).indexOf("[native code]") !== -1;
}
function ha(e, t) {
  return ha = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(i, n) {
    return i.__proto__ = n, i;
  }, ha(e, t);
}
function pa(e) {
  return pa = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, pa(e);
}
function gh(e, t) {
  var r = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var i = Object.getOwnPropertySymbols(e);
    t && (i = i.filter(function(n) {
      return Object.getOwnPropertyDescriptor(e, n).enumerable;
    })), r.push.apply(r, i);
  }
  return r;
}
function yh(e) {
  for (var t = 1; t < arguments.length; t++) {
    var r = arguments[t] != null ? arguments[t] : {};
    t % 2 ? gh(Object(r), !0).forEach(function(i) {
      pb(e, i, r[i]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r)) : gh(Object(r)).forEach(function(i) {
      Object.defineProperty(e, i, Object.getOwnPropertyDescriptor(r, i));
    });
  }
  return e;
}
function pb(e, t, r) {
  return t in e ? Object.defineProperty(e, t, { value: r, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = r, e;
}
function Ms(e) {
  "@babel/helpers - typeof";
  return Ms = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Ms(e);
}
var Ic = {
  bigquery: j_.default,
  db2: Z_.default,
  hive: H_.default,
  mariadb: z_.default,
  mysql: q_.default,
  n1ql: J_.default,
  plsql: K_.default,
  postgresql: eb.default,
  redshift: tb.default,
  spark: rb.default,
  sql: nb.default,
  sqlite: ib.default,
  tsql: ab.default
};
Yr.formatters = Ic;
var wd = Object.keys(Ic);
Yr.supportedDialects = wd;
var Ob = {
  language: "sql",
  tabWidth: 2,
  useTabs: !1,
  keywordCase: "preserve",
  indentStyle: "standard",
  logicalOperatorNewline: "before",
  aliasAs: "preserve",
  tabulateAlias: !1,
  commaPosition: "after",
  expressionWidth: 50,
  linesBetweenQueries: 1,
  denseOperators: !1,
  newlineBeforeSemicolon: !1
}, Eb = function(t) {
  var r = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  if (typeof t != "string")
    throw new Error("Invalid query argument. Expected string, instead got " + Ms(t));
  var i = db(yh(yh({}, Ob), r)), n = Ic[i.language];
  return new n(i).format(t);
};
Yr.format = Eb;
var Hr = /* @__PURE__ */ function(e) {
  lb(r, e);
  var t = ub(r);
  function r() {
    return ob(this, r), t.apply(this, arguments);
  }
  return sb(r);
}(/* @__PURE__ */ tu(Error));
Yr.ConfigError = Hr;
function db(e) {
  if (!wd.includes(e.language))
    throw new Hr("Unsupported SQL dialect: ".concat(e.language));
  if ("multilineLists" in e)
    throw new Hr("multilineLists config is no more supported.");
  if ("newlineBeforeOpenParen" in e)
    throw new Hr("newlineBeforeOpenParen config is no more supported.");
  if ("newlineBeforeCloseParen" in e)
    throw new Hr("newlineBeforeCloseParen config is no more supported.");
  if (e.expressionWidth <= 0)
    throw new Hr("expressionWidth config must be positive number. Received ".concat(e.expressionWidth, " instead."));
  if (e.commaPosition === "before" && e.useTabs)
    throw new Hr("commaPosition: before does not work when tabs are used for indentation.");
  if (e.language === "hive" && e.params !== void 0)
    throw new Hr('Unexpected "params" option. Prepared statement placeholders not supported for Hive.');
  if (e.language === "spark" && e.params !== void 0)
    throw new Hr('Unexpected "params" option. Prepared statement placeholders not supported for Spark.');
  return e.params && !Tb(e.params) && console.warn('WARNING: All "params" option values should be strings.'), e;
}
function Tb(e) {
  var t = e instanceof Array ? e : Object.values(e);
  return t.every(function(r) {
    return typeof r == "string";
  });
}
var Md = {};
Object.defineProperty(Md, "__esModule", {
  value: !0
});
(function(e) {
  Object.defineProperty(e, "__esModule", {
    value: !0
  });
  var t = Yr;
  Object.keys(t).forEach(function(i) {
    i === "default" || i === "__esModule" || i in e && e[i] === t[i] || Object.defineProperty(e, i, {
      enumerable: !0,
      get: function() {
        return t[i];
      }
    });
  });
  var r = Md;
  Object.keys(r).forEach(function(i) {
    i === "default" || i === "__esModule" || i in e && e[i] === r[i] || Object.defineProperty(e, i, {
      enumerable: !0,
      get: function() {
        return r[i];
      }
    });
  });
})(Nd);
async function Sb(e) {
  const t = await require("prettier/standalone"), r = await require("prettier/parser-postcss");
  return (await t.format(e, {
    parser: "css",
    plugins: [r],
    semi: !1
  })).trim();
}
async function mb(e) {
  const t = await require("prettier/standalone"), r = await require("prettier/parser-html");
  return (await t.format(e, {
    parser: "html",
    plugins: [r],
    semi: !1
  })).trim();
}
async function kd() {
  const e = await require("prettier/standalone"), t = await require("prettier/parser-babel");
  return async (r) => (await e.format(r, {
    parser: "babel",
    plugins: [t],
    semi: !1
  })).trim();
}
async function Rb() {
  const e = await require("prettier/standalone"), t = await require("prettier/parser-babel");
  return async (r) => (await e.format(r, {
    parser: "json",
    plugins: [t]
  })).trim();
}
async function Ab(e, t) {
  try {
    const r = await e(t);
    return r.startsWith(";") ? r.slice(1) : r;
  } catch (r) {
    try {
      const i = await e(`return (${t}
);`);
      return i.startsWith("return ") ? i.slice(7) : i;
    } catch {
      throw r;
    }
  }
}
async function Nc() {
  const e = await kd();
  return async (t) => "{{" + Ab(e, t.slice(2, -2)) + "}}";
}
async function Qd(e) {
  const t = await Nc();
  return Ea(e).map((r) => zn(r) ? t(r) : r).join("");
}
async function gb(e) {
  if (!e)
    return "";
  const t = await Nc(), r = [];
  let i = Ea(e).map((l) => zn(l) ? (r.push(l), "{ { " + (r.length - 1) + " } }") : l).join("");
  if (i = Nd.format(i), r.length === 0)
    return i;
  const n = [], a = i.replace(/{ { \d+ } }/g, (l) => {
    const c = parseInt(l.slice(4, -4));
    if (c >= 0 && c < r.length) {
      const f = t(r[c]);
      return n.push(f), l;
    }
    return l;
  }), s = await Promise.all(n);
  let o = a;
  return s.forEach((l, c) => {
    o = o.replace(`{ { ${c} } }`, l);
  }), o;
}
async function yb(e) {
  if (!e || e.trim().length === 0)
    return "";
  const t = await Rb(), r = await Nc(), i = Ea(e), n = i.map((l, c) => zn(l) ? "\\{\\{" + c + "\\}\\}" : l).join(""), a = wT(n, !1), s = t(a.replace(/\\{\\{\d+\\}\\}/g, (l) => "\\\\{\\\\{" + l.slice(4, -4) + "\\\\}\\\\}")), o = await Promise.all(i.map(async (l) => zn(l) ? await r(l) : l));
  return (await s).replace(/("{{\d+}}")|({{\d+}})|(\\\\{\\\\{\d+\\\\}\\\\})/g, (l) => {
    const c = parseInt(l.startsWith('"{{') ? l.slice(3, -3) : l.startsWith("{{") ? l.slice(2, -2) : l.slice(6, -6));
    return c >= 0 && c < o.length ? o[c] : l;
  });
}
async function Ib(e) {
  try {
    return await yb(e);
  } catch {
    return Qd(e);
  }
}
function Nb(e, t) {
  if (t)
    switch (t) {
      case "JSON":
      case "PureJSON":
        return Ib;
      case "Function":
        return (r) => kd().then((i) => i(r));
    }
  else
    switch (e) {
      case "css":
        return Sb;
      case "html":
        return mb;
      case "sql":
        return gb;
      case "javascript":
        return Qd;
    }
}
const Pb = /* @__PURE__ */ new Set(["uuid", "numbro", "Papa"]), _b = Pe.mark({
  class: "cm-success-highlight"
}), bb = Pe.mark({
  class: "cm-error-highlight"
}), vb = {
  ".cm-success-highlight": {
    background: "#EFF9F6"
  },
  ".cm-error-highlight": {
    background: "#FFF3F1"
  }
};
function Ih(e, t) {
  if (!t || t.length === 0)
    return Pe.none;
  const r = e.state.doc.toString();
  if (!r)
    return Pe.none;
  let i = [], n = 0;
  for (const a of t) {
    const s = r.indexOf(a.value, n);
    s >= 0 && (n = s + a.value.length, i.push((a.success ? _b : bb).range(s, n)));
  }
  return Pe.set(i);
}
function Cb(e, t) {
  const r = e === "Function", i = pt(t);
  return i.current = t, Lt(() => r ? [] : gi.fromClass(class {
    constructor(n) {
      Zr(this, "decoration");
      this.decoration = Ih(n, i.current);
    }
    update(n) {
      this.decoration = Ih(n.view, i.current);
    }
  }, {
    decorations: (n) => n.decoration
  }), [r]);
}
const Gd = jt.define();
function Fo(e) {
  return e.facet(Gd);
}
function Lb(e) {
  const t = Ea(e.state.doc.toString()), r = [];
  let i = 0;
  for (const n of t)
    zn(n) && r.push({
      from: i + 2,
      to: i + n.length - 2
    }), i += n.length;
  return r;
}
function xb(e, t, r) {
  for (const i of r)
    if (e >= i.from && t <= i.to)
      return !0;
  return !1;
}
class Db {
  constructor(t, r) {
    Zr(this, "markCache");
    Zr(this, "tree");
    Zr(this, "decorations");
    this.filterJs = r, this.markCache = /* @__PURE__ */ Object.create(null), this.tree = Ot(t.state), this.decorations = this.buildDeco(t, Fo(t.state));
  }
  update(t) {
    const r = Ot(t.state), i = Fo(t.state), n = i !== Fo(t.startState);
    r.length < t.view.viewport.to && !n && r.type === this.tree.type ? this.decorations = this.decorations.map(t.changes) : (r !== this.tree || t.viewportChanged || n) && (this.tree = r, this.decorations = this.buildDeco(t.view, i));
  }
  buildDeco(t, r) {
    if (!r || !this.tree.length)
      return Pe.none;
    const i = this.filterJs ? Lb(t) : void 0;
    if (i && i.length === 0)
      return Pe.none;
    const n = new fu();
    for (const a of t.visibleRanges)
      vS(this.tree, r, (s, o, l) => {
        (!i || xb(s, o, i)) && n.add(s, o, this.markCache[l] || (this.markCache[l] = Pe.mark({
          class: l
        })));
      }, a.from, a.to);
    return n.finish();
  }
}
function Ub(e, t) {
  const r = [mn.high(gi.define((i) => new Db(i, t), {
    decorations: (i) => i.decorations
  }))];
  return e.module && r.push(we.styleModule.of(e.module)), r.push(Gd.of(e)), r;
}
function wb(e, t) {
  return Ub(am, e === "javascript" && t === void 0);
}
const Mb = [
  //lineNumbers(),
  //highlightActiveLineGutter(),
  MT(),
  gy(),
  // Undo & Redo
  //foldGutter(),
  //drawSelection(),
  kT(),
  //EditorState.allowMultipleSelections.of(true),
  FS(),
  // auto-indent
  hm(),
  Jm(),
  //autocompletion(),
  QT(),
  GT(),
  // match up rectangularSelection
  //highlightActiveLine(),
  bI(),
  we.lineWrapping,
  Rn.of([
    ...rR,
    ...gI,
    ...jI,
    ...Ly,
    // Undo & Redo
    ...KS,
    // fold code
    //...completionKeymap,
    ...aN
  ])
], Nh = {
  "word-wrap": "break-word",
  "word-break": "break-all",
  "white-space": "pre-wrap",
  "font-size": "13px",
  "line-height": "13px"
}, kb = we.theme({
  ".cm-content, .cm-gutter": {
    height: "100%"
  },
  "&.cm-editor": {
    backgroundColor: "#ffffff",
    width: "100%",
    // height: "100%",
    "font-size": "13px",
    transition: "all .4s ease",
    outline: "none",
    "min-height": "30px"
  },
  "& .cm-line": {
    "padding-left": "8px"
  },
  ".cm-scroller": {
    "line-height": "22px",
    "font-family": "RobotoMono"
  },
  ".cm-scroller::-webkit-scrollbar": {
    width: "16px"
  },
  ".cm-scroller::-webkit-scrollbar-thumb": {
    border: "5px solid transparent",
    "background-clip": "content-box",
    "border-radius": "9999px",
    "background-color": "rgba(139, 143, 163, 0.2)",
    "min-height": "30px"
  },
  ".cm-scroller::-webkit-scrollbar-thumb:hover": {
    "background-color": "rgba(139, 143, 163, 0.5)"
  },
  "&.cm-editor:hover": {
    transition: "all .4s ease",
    outline: "none"
  },
  "&.cm-editor.cm-focused": {
    outline: "none"
  },
  // matching brackets
  "&.cm-editor .cm-scroller .cm-content[contenteditable=true] .cm-line .cm-matchingBracket": {
    color: "#40A072",
    backgroundColor: "#e9f4e6"
  },
  // line number
  "& .cm-gutters": {
    "flex-shrink": 0,
    width: "40px",
    "background-color": "#f5f5f6",
    color: "#8B8FA3",
    "border-radius": "4px 0px 0px 4px",
    "border-right": "none",
    padding: "0 2px 0 4px",
    "user-select": "none"
  },
  "& .cm-lineNumbers": {
    "flex-grow": 1
  },
  "& .cm-lineNumbers .cm-gutterElement": {
    "min-width": "unset",
    width: "100%",
    "text-align": "center",
    padding: "0",
    ...Nh,
    "line-height": "22px"
  },
  "&  .cm-activeLineGutter": {
    "background-color": "unset",
    color: "#222222"
  },
  "& .cm-lineNumbers .cm-activeLineGutter": {
    ...Nh,
    "line-height": "22px",
    "font-weight": 500
  },
  ".cm-placeholder": {
    height: 0
  },
  ...vb
}), Qb = [
  VT(),
  // display line number
  BT(),
  xu({
    placeholderDOM: () => {
      const e = document.createElement("div");
      return e.innerHTML = `
                <svg width="23px" height="13px" viewBox="0 0 23 13" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                    <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                        <rect fill="#D7D9E0" x="0" y="0" width="23" height="13" rx="3"></rect>
                        <g transform="translate(4.000000, 5.000000)" fill="#FFFFFF">
                            <circle cx="1.5" cy="1.5" r="1.5"></circle>
                            <circle cx="7.5" cy="1.5" r="1.5"></circle>
                            <circle cx="13.5" cy="1.5" r="1.5"></circle>
                        </g>
                    </g>
                </svg>`, e.style.display = "inline-flex", e.style.margin = "4.5px 4px 0", e.style.verticalAlign = "top", e;
    }
  }),
  im({
    markerDOM: (e) => {
      const t = document.createElement("div");
      return t.style.cursor = "pointer", t.innerHTML = "test", e ? (t.innerHTML = `
                  <svg width="12px" height="22px" viewBox="0 0 12 12" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                      <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                          <path d="M6.78086881,5.47608601 L8.70024396,7.87530495 C9.04525351,8.30656689 8.97533214,8.93585926 8.5440702,9.28086881 C8.36675715,9.42271925 8.14644665,9.5 7.91937515,9.5 L4.08062485,9.5 C3.5283401,9.5 3.08062485,9.05228475 3.08062485,8.5 C3.08062485,8.2729285 3.1579056,8.052618 3.29975604,7.87530495 L5.21913119,5.47608601 C5.56414074,5.04482408 6.19343311,4.9749027 6.62469505,5.31991225 C6.68235975,5.36604401 6.73473705,5.41842131 6.78086881,5.47608601 Z" fill="#B8B9BF" transform="translate(6.000000, 7.000000) scale(1, -1) translate(-6.000000, -7.000000) "></path>
                      </g>
                  </svg>`, t) : (t.innerHTML = `
                  <svg width="12px" height="22px" viewBox="0 0 12 12" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                      <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                          <path d="M7.28086881,4.97608601 L9.20024396,7.37530495 C9.54525351,7.80656689 9.47533214,8.43585926 9.0440702,8.78086881 C8.86675715,8.92271925 8.64644665,9 8.41937515,9 L4.58062485,9 C4.0283401,9 3.58062485,8.55228475 3.58062485,8 C3.58062485,7.7729285 3.6579056,7.552618 3.79975604,7.37530495 L5.71913119,4.97608601 C6.06414074,4.54482408 6.69343311,4.4749027 7.12469505,4.81991225 C7.18235975,4.86604401 7.23473705,4.91842131 7.28086881,4.97608601 Z" fill="#B8B9BF" transform="translate(6.500000, 6.500000) scale(1, -1) rotate(90.000000) translate(-6.500000, -6.500000) "></path>
                      </g>
                  </svg>`, t);
    }
  })
  // highlightActiveLine(),
], Gb = {
  javascript: zp(),
  sql: jA(),
  css: sO(),
  html: fy(),
  json: sA()
}, Vb = mn.highest(Rn.of([
  // {key: "Ctrl-Space", run: startCompletion},
  {
    key: "Escape",
    run: ku
  },
  {
    key: "ArrowDown",
    run: kr(!0)
  },
  {
    key: "Ctrl-n",
    run: kr(!0)
  },
  {
    key: "ArrowUp",
    run: kr(!1)
  },
  {
    key: "Ctrl-p",
    run: kr(!1)
  },
  {
    key: "PageDown",
    run: kr(!0, "page")
  },
  {
    key: "PageUp",
    run: kr(!1, "page")
  },
  {
    key: "Tab",
    run: ol
  },
  {
    key: "Enter",
    run: ol
  }
]));
function Bb(e) {
  const [t, r] = br(!1), i = pt();
  return i.current = e, [Lt(() => we.updateListener.of((a) => {
    var s;
    if (a.focusChanged) {
      const o = a.view.hasFocus;
      r(o), (s = i.current) == null || s.call(i, o), o || ku(a.view);
    }
  }), []), t];
}
function $b(e) {
  return e ?? !0 ? Rn.of([yI]) : [];
}
function Yb(e) {
  return e ? Qb : [];
}
function Fb(e) {
  return e ? FT(e) : [];
}
function Wb(e, t) {
  const r = pt();
  return r.current = t ? (i) => {
    e == null || e(i), t(i);
  } : e, Lt(() => {
    const i = (n) => {
      var a;
      n.docChanged && ((a = r.current) == null || a.call(r, n.state));
    };
    return we.updateListener.of(i);
  }, []);
}
function Xb(e) {
  const {
    language: t,
    codeType: r,
    exposingData: i,
    boostExposingData: n,
    enableMetaCompletion: a
  } = e, s = Jo(jT), o = Lt(() => new wP(), []), l = Lt(() => s != null && s.disableJSCompletion ? void 0 : new DP(), []), c = Lt(() => new YP(), []);
  Xt(() => {
    o.data = i, o.boostExposingData = n;
  }, [o, i, n]);
  const f = Jo(ZT);
  return Xt(() => {
    c.metaData = f;
  }, [c, f]), Lt(() => {
    const O = [];
    return t === "css" || (O.push(o), l && O.push(l)), a && O.push(c), O.map((d) => (d.setIsFunction(r === "Function"), d.completionSource));
  }, [a, t, r, o, l, c]);
}
function jb(e) {
  const t = Xb(e);
  return Lt(() => [uR({
    override: t,
    defaultKeymap: !1
  }), Vb], [t]);
}
function Zb(e, t) {
  const r = e ?? "javascript", i = Rn.of([{
    key: "Mod-l",
    run: (n) => {
      const a = Nb(r, t);
      if (a) {
        const s = n.state.doc.toString();
        a(s).then((o) => {
          o !== s && n.dispatch({
            changes: {
              from: 0,
              to: s.length,
              insert: o
            }
          });
        }).catch((o) => {
          Vc.error(o instanceof Error ? o.message : o);
        });
      } else
        Vc.warning(ip("codeEditor.notSupportAutoFormat"));
      return !0;
    }
  }]);
  return [Gb[r], wb(r, t), i];
}
function Hb(e) {
  return WT({
    position: "absolute",
    parent: e || document.querySelector(`${Dc}`) || document.body
  });
}
const zb = async (e) => {
  const r = (await import("./a9ee5852.js")).default, i = new r(), n = {
    parserOptions: {
      ecmaVersion: "latest",
      sourceType: "script"
    },
    env: {
      browser: !0,
      node: !0,
      es2021: !0
    },
    rules: {
      // https://github.com/mysticatea/eslint4b/issues/17
      "no-useless-escape": "off"
    }
  };
  return i.getRules().forEach((a, s) => {
    a.meta.docs.recommended && !(s in n.rules) && (n.rules[s] = "error");
  }), KR(i, n)(e);
};
function qb(e, t) {
  return e === "PureJSON" ? [uh(iA())] : e !== "Function" ? [] : [uh(zb, {
    markerFilter: (i) => i.filter((n) => {
      if (n.message.endsWith("' is not defined.") && n.message.startsWith("'")) {
        const a = n.message.slice(1, -17);
        if (t.current.hasOwnProperty(a) || Pb.has(a))
          return !1;
      }
      return !0;
    }).map((n) => ({
      ...n,
      source: void 0,
      actions: void 0
    }))
  })];
}
const Qn = [];
function Jb(e) {
  const {
    showLineNum: t,
    placeholder: r,
    language: i,
    codeType: n,
    indentWithTab: a,
    tooltipContainer: s
  } = e, o = pt({});
  o.current = e.exposingData ?? {};
  const l = Cb(n, e.segments), c = jb(e), [f, p] = Bb(e.onFocus), O = Lt(() => Yb(t), [t]), d = Lt(() => Zb(i, n), [i, n]), g = Wb(e.onChange, e.extraOnChange), L = Lt(() => Fb(r), [r]), D = Lt(() => $b(a), [a]), W = Lt(() => Hb(s), [s]), x = Lt(() => qb(n, o), [n]), V = Lt(() => $T(e.enableIcon), [e.enableIcon]), _ = Lt(() => [Mb, kb, l, c, f, O, d, g, L, D, W, x, V], [l, c, f, O, d, g, L, D, W, x, V]), $ = Lt(() => {
    for (let F = Qn.length; F < _.length; ++F)
      Qn.push(new XT());
    return _.map((F, ae) => Qn[ae].of(F));
  }, [_]), z = ep((F) => {
    if (F) {
      const ae = [];
      _.forEach((U, G) => {
        Qn[G].get(F.state) !== U && (YT.log("reconfigure", G), ae.push(Qn[G].reconfigure(U)));
      }), ae.length > 0 && F.dispatch({
        effects: ae
      });
    }
  }, [_]);
  return {
    extensions: $,
    reconfigure: z,
    isFocus: p
  };
}
var Vd = function(t) {
  return +setTimeout(t, 16);
}, Bd = function(t) {
  return clearTimeout(t);
};
typeof window < "u" && "requestAnimationFrame" in window && (Vd = function(t) {
  return window.requestAnimationFrame(t);
}, Bd = function(t) {
  return window.cancelAnimationFrame(t);
});
var Ph = 0, co = /* @__PURE__ */ new Map();
function $d(e) {
  co.delete(e);
}
var Wr = function(t) {
  var r = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
  Ph += 1;
  var i = Ph;
  function n(a) {
    if (a === 0)
      $d(i), t();
    else {
      var s = Vd(function() {
        n(a - 1);
      });
      co.set(i, s);
    }
  }
  return n(r), i;
};
Wr.cancel = function(e) {
  var t = co.get(e);
  return $d(e), Bd(t);
};
process.env.NODE_ENV !== "production" && (Wr.ids = function() {
  return co;
});
function Wo(e, t) {
  if (!e)
    return !1;
  if (e.contains)
    return e.contains(t);
  for (var r = t; r; ) {
    if (r === e)
      return !0;
    r = r.parentNode;
  }
  return !1;
}
function Kb(e) {
  return e instanceof HTMLElement || e instanceof SVGElement;
}
function Yd(e) {
  return Kb(e) ? e : e instanceof bt.Component ? $i.findDOMNode(e) : null;
}
function Fd(e, t) {
  typeof e == "function" ? e(t) : di(e) === "object" && e && "current" in e && (e.current = t);
}
function ev() {
  for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++)
    t[r] = arguments[r];
  var i = t.filter(function(n) {
    return n;
  });
  return i.length <= 1 ? i[0] : function(n) {
    t.forEach(function(a) {
      Fd(a, n);
    });
  };
}
function Wd(e) {
  var t, r, i = To.isMemo(e) ? e.type.type : e.type;
  return !(typeof i == "function" && !((t = i.prototype) !== null && t !== void 0 && t.render) && i.$$typeof !== To.ForwardRef || typeof e == "function" && !((r = e.prototype) !== null && r !== void 0 && r.render) && e.$$typeof !== To.ForwardRef);
}
function Fa(e, t, r, i) {
  var n = $i.unstable_batchedUpdates ? function(s) {
    $i.unstable_batchedUpdates(r, s);
  } : r;
  return e != null && e.addEventListener && e.addEventListener(t, n, i), {
    remove: function() {
      e != null && e.removeEventListener && e.removeEventListener(t, n, i);
    }
  };
}
function Pa() {
  return !!(typeof window < "u" && window.document && window.document.createElement);
}
var tv = /* @__PURE__ */ gT(function(e, t) {
  var r = e.didUpdate, i = e.getContainer, n = e.children, a = pt(), s = pt();
  yT(t, function() {
    return {};
  });
  var o = pt(!1);
  return !o.current && Pa() && (s.current = i(), a.current = s.current.parentNode, o.current = !0), Xt(function() {
    r == null || r(e);
  }), Xt(function() {
    return s.current.parentNode === null && a.current !== null && a.current.appendChild(s.current), function() {
      var l;
      (l = s.current) === null || l === void 0 || (l = l.parentNode) === null || l === void 0 || l.removeChild(s.current);
    };
  }, []), s.current ? /* @__PURE__ */ $i.createPortal(n, s.current) : null;
});
function rv(e, t, r) {
  return r ? e[0] === t[0] : e[0] === t[0] && e[1] === t[1];
}
function iv(e, t, r) {
  var i = e[t] || {};
  return Ue(Ue({}, i), r);
}
function nv(e, t, r, i) {
  for (var n = r.points, a = Object.keys(e), s = 0; s < a.length; s += 1) {
    var o = a[s];
    if (rv(e[o].points, n, i))
      return "".concat(t, "-placement-").concat(o);
  }
  return "";
}
const av = function() {
  if (typeof navigator > "u" || typeof window > "u")
    return !1;
  var e = navigator.userAgent || navigator.vendor || window.opera;
  return /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(e) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw-(n|u)|c55\/|capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob|do(c|p)o|ds(12|-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(-|_)|g1 u|g560|gene|gf-5|g-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd-(m|p|t)|hei-|hi(pt|ta)|hp( i|ip)|hs-c|ht(c(-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i-(20|go|ma)|i230|iac( |-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h-|oo|p-)|sdk\/|se(c(-|0|1)|47|mc|nd|ri)|sgh-|shar|sie(-|m)|sk-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h-|v-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl-|tdg-|tel(i|m)|tim-|t-mo|to(pl|sh)|ts(70|m-|m3|m5)|tx-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto|zte-/i.test(e == null ? void 0 : e.substr(0, 4));
};
var sv = /* @__PURE__ */ _e.createContext({}), ov = /* @__PURE__ */ function(e) {
  Su(r, e);
  var t = mu(r);
  function r() {
    return Ru(this, r), t.apply(this, arguments);
  }
  return Au(r, [{
    key: "render",
    value: function() {
      return this.props.children;
    }
  }]), r;
}(_e.Component);
function jn(e) {
  var t = _e.useRef(!1), r = _e.useState(e), i = At(r, 2), n = i[0], a = i[1];
  _e.useEffect(function() {
    return t.current = !1, function() {
      t.current = !0;
    };
  }, []);
  function s(o, l) {
    l && t.current || a(o);
  }
  return [n, s];
}
var xi = "none", Wa = "appear", Xa = "enter", ja = "leave", _h = "none", _r = "prepare", nn = "start", an = "active", Pc = "end", Xd = "prepared";
function bh(e, t) {
  var r = {};
  return r[e.toLowerCase()] = t.toLowerCase(), r["Webkit".concat(e)] = "webkit".concat(t), r["Moz".concat(e)] = "moz".concat(t), r["ms".concat(e)] = "MS".concat(t), r["O".concat(e)] = "o".concat(t.toLowerCase()), r;
}
function lv(e, t) {
  var r = {
    animationend: bh("Animation", "AnimationEnd"),
    transitionend: bh("Transition", "TransitionEnd")
  };
  return e && ("AnimationEvent" in t || delete r.animationend.animation, "TransitionEvent" in t || delete r.transitionend.transition), r;
}
var uv = lv(Pa(), typeof window < "u" ? window : {}), jd = {};
if (Pa()) {
  var cv = document.createElement("div");
  jd = cv.style;
}
var Za = {};
function Zd(e) {
  if (Za[e])
    return Za[e];
  var t = uv[e];
  if (t)
    for (var r = Object.keys(t), i = r.length, n = 0; n < i; n += 1) {
      var a = r[n];
      if (Object.prototype.hasOwnProperty.call(t, a) && a in jd)
        return Za[e] = t[a], Za[e];
    }
  return "";
}
var Hd = Zd("animationend"), zd = Zd("transitionend"), qd = !!(Hd && zd), vh = Hd || "animationend", Ch = zd || "transitionend";
function Lh(e, t) {
  if (!e)
    return null;
  if (di(e) === "object") {
    var r = t.replace(/-\w/g, function(i) {
      return i[1].toUpperCase();
    });
    return e[r];
  }
  return "".concat(e, "-").concat(t);
}
const fv = function(e) {
  var t = pt(), r = pt(e);
  r.current = e;
  var i = _e.useCallback(function(s) {
    r.current(s);
  }, []);
  function n(s) {
    s && (s.removeEventListener(Ch, i), s.removeEventListener(vh, i));
  }
  function a(s) {
    t.current && t.current !== s && n(t.current), s && s !== t.current && (s.addEventListener(Ch, i), s.addEventListener(vh, i), t.current = s);
  }
  return _e.useEffect(function() {
    return function() {
      n(t.current);
    };
  }, []), [a, n];
};
var Jd = Pa() ? IT : Xt;
const hv = function() {
  var e = _e.useRef(null);
  function t() {
    Wr.cancel(e.current);
  }
  function r(i) {
    var n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 2;
    t();
    var a = Wr(function() {
      n <= 1 ? i({
        isCanceled: function() {
          return a !== e.current;
        }
      }) : r(i, n - 1);
    });
    e.current = a;
  }
  return _e.useEffect(function() {
    return function() {
      t();
    };
  }, []), [r, t];
};
var pv = [_r, nn, an, Pc], Ov = [_r, Xd], Kd = !1, Ev = !0;
function eT(e) {
  return e === an || e === Pc;
}
const dv = function(e, t, r) {
  var i = jn(_h), n = At(i, 2), a = n[0], s = n[1], o = hv(), l = At(o, 2), c = l[0], f = l[1];
  function p() {
    s(_r, !0);
  }
  var O = t ? Ov : pv;
  return Jd(function() {
    if (a !== _h && a !== Pc) {
      var d = O.indexOf(a), g = O[d + 1], L = r(a);
      L === Kd ? s(g, !0) : g && c(function(D) {
        function W() {
          D.isCanceled() || s(g, !0);
        }
        L === !0 ? W() : Promise.resolve(L).then(W);
      });
    }
  }, [e, a]), _e.useEffect(function() {
    return function() {
      f();
    };
  }, []), [p, a];
};
function Tv(e, t, r, i) {
  var n = i.motionEnter, a = n === void 0 ? !0 : n, s = i.motionAppear, o = s === void 0 ? !0 : s, l = i.motionLeave, c = l === void 0 ? !0 : l, f = i.motionDeadline, p = i.motionLeaveImmediately, O = i.onAppearPrepare, d = i.onEnterPrepare, g = i.onLeavePrepare, L = i.onAppearStart, D = i.onEnterStart, W = i.onLeaveStart, x = i.onAppearActive, V = i.onEnterActive, _ = i.onLeaveActive, $ = i.onAppearEnd, z = i.onEnterEnd, F = i.onLeaveEnd, ae = i.onVisibleChanged, U = jn(), G = At(U, 2), H = G[0], re = G[1], B = jn(xi), Y = At(B, 2), E = Y[0], m = Y[1], P = jn(null), R = At(P, 2), A = R[0], y = R[1], C = pt(!1), j = pt(null);
  function w() {
    return r();
  }
  var J = pt(!1);
  function te() {
    m(xi, !0), y(null, !0);
  }
  function se(It) {
    var tt = w();
    if (!(It && !It.deadline && It.target !== tt)) {
      var St = J.current, lt;
      E === Wa && St ? lt = $ == null ? void 0 : $(tt, It) : E === Xa && St ? lt = z == null ? void 0 : z(tt, It) : E === ja && St && (lt = F == null ? void 0 : F(tt, It)), E !== xi && St && lt !== !1 && te();
    }
  }
  var ge = fv(se), fe = At(ge, 1), et = fe[0], yt = function(tt) {
    var St, lt, vt;
    switch (tt) {
      case Wa:
        return St = {}, me(St, _r, O), me(St, nn, L), me(St, an, x), St;
      case Xa:
        return lt = {}, me(lt, _r, d), me(lt, nn, D), me(lt, an, V), lt;
      case ja:
        return vt = {}, me(vt, _r, g), me(vt, nn, W), me(vt, an, _), vt;
      default:
        return {};
    }
  }, De = _e.useMemo(function() {
    return yt(E);
  }, [E]), Ce = dv(E, !e, function(It) {
    if (It === _r) {
      var tt = De[_r];
      return tt ? tt(w()) : Kd;
    }
    if (Je in De) {
      var St;
      y(((St = De[Je]) === null || St === void 0 ? void 0 : St.call(De, w(), null)) || null);
    }
    return Je === an && (et(w()), f > 0 && (clearTimeout(j.current), j.current = setTimeout(function() {
      se({
        deadline: !0
      });
    }, f))), Je === Xd && te(), Ev;
  }), Ee = At(Ce, 2), ut = Ee[0], Je = Ee[1], q = eT(Je);
  J.current = q, Jd(function() {
    re(t);
    var It = C.current;
    C.current = !0;
    var tt;
    !It && t && o && (tt = Wa), It && t && a && (tt = Xa), (It && !t && c || !It && p && !t && c) && (tt = ja);
    var St = yt(tt);
    tt && (e || St[_r]) ? (m(tt), ut()) : m(xi);
  }, [t]), Xt(function() {
    // Cancel appear
    (E === Wa && !o || // Cancel enter
    E === Xa && !a || // Cancel leave
    E === ja && !c) && m(xi);
  }, [o, a, c]), Xt(function() {
    return function() {
      C.current = !1, clearTimeout(j.current);
    };
  }, []);
  var ot = _e.useRef(!1);
  Xt(function() {
    H && (ot.current = !0), H !== void 0 && E === xi && ((ot.current || H) && (ae == null || ae(H)), ot.current = !0);
  }, [H, E]);
  var $t = A;
  return De[_r] && Je === nn && ($t = Ue({
    transition: "none"
  }, $t)), [E, Je, $t, H ?? t];
}
function Sv(e) {
  var t = e;
  di(e) === "object" && (t = e.transitionSupport);
  function r(n, a) {
    return !!(n.motionName && t && a !== !1);
  }
  var i = /* @__PURE__ */ _e.forwardRef(function(n, a) {
    var s = n.visible, o = s === void 0 ? !0 : s, l = n.removeOnLeave, c = l === void 0 ? !0 : l, f = n.forceRender, p = n.children, O = n.motionName, d = n.leavedClassName, g = n.eventProps, L = _e.useContext(sv), D = L.motion, W = r(n, D), x = pt(), V = pt();
    function _() {
      try {
        return x.current instanceof HTMLElement ? x.current : Yd(V.current);
      } catch {
        return null;
      }
    }
    var $ = Tv(W, o, _, n), z = At($, 4), F = z[0], ae = z[1], U = z[2], G = z[3], H = _e.useRef(G);
    G && (H.current = !0);
    var re = _e.useCallback(function(y) {
      x.current = y, Fd(a, y);
    }, [a]), B, Y = Ue(Ue({}, g), {}, {
      visible: o
    });
    if (!p)
      B = null;
    else if (F === xi)
      G ? B = p(Ue({}, Y), re) : !c && H.current && d ? B = p(Ue(Ue({}, Y), {}, {
        className: d
      }), re) : f || !c && !d ? B = p(Ue(Ue({}, Y), {}, {
        style: {
          display: "none"
        }
      }), re) : B = null;
    else {
      var E, m;
      ae === _r ? m = "prepare" : eT(ae) ? m = "active" : ae === nn && (m = "start");
      var P = Lh(O, "".concat(F, "-").concat(m));
      B = p(Ue(Ue({}, Y), {}, {
        className: da(Lh(O, F), (E = {}, me(E, P, P && m), me(E, O, typeof O == "string"), E)),
        style: U
      }), re);
    }
    if (/* @__PURE__ */ _e.isValidElement(B) && Wd(B)) {
      var R = B, A = R.ref;
      A || (B = /* @__PURE__ */ _e.cloneElement(B, {
        ref: re
      }));
    }
    return /* @__PURE__ */ $e(ov, {
      ref: V,
      children: B
    });
  });
  return i.displayName = "CSSMotion", i;
}
const fo = Sv(qd);
var ru = "add", iu = "keep", nu = "remove", Xo = "removed";
function mv(e) {
  var t;
  return e && di(e) === "object" && "key" in e ? t = e : t = {
    key: e
  }, Ue(Ue({}, t), {}, {
    key: String(t.key)
  });
}
function au() {
  var e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
  return e.map(mv);
}
function Rv() {
  var e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [], t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [], r = [], i = 0, n = t.length, a = au(e), s = au(t);
  a.forEach(function(c) {
    for (var f = !1, p = i; p < n; p += 1) {
      var O = s[p];
      if (O.key === c.key) {
        i < p && (r = r.concat(s.slice(i, p).map(function(d) {
          return Ue(Ue({}, d), {}, {
            status: ru
          });
        })), i = p), r.push(Ue(Ue({}, O), {}, {
          status: iu
        })), i += 1, f = !0;
        break;
      }
    }
    f || r.push(Ue(Ue({}, c), {}, {
      status: nu
    }));
  }), i < n && (r = r.concat(s.slice(i).map(function(c) {
    return Ue(Ue({}, c), {}, {
      status: ru
    });
  })));
  var o = {};
  r.forEach(function(c) {
    var f = c.key;
    o[f] = (o[f] || 0) + 1;
  });
  var l = Object.keys(o).filter(function(c) {
    return o[c] > 1;
  });
  return l.forEach(function(c) {
    r = r.filter(function(f) {
      var p = f.key, O = f.status;
      return p !== c || O !== nu;
    }), r.forEach(function(f) {
      f.key === c && (f.status = iu);
    });
  }), r;
}
var Av = ["component", "children", "onVisibleChanged", "onAllRemoved"], gv = ["status"], yv = ["eventProps", "visible", "children", "motionName", "motionAppear", "motionEnter", "motionLeave", "motionLeaveImmediately", "motionDeadline", "removeOnLeave", "leavedClassName", "onAppearPrepare", "onAppearStart", "onAppearActive", "onAppearEnd", "onEnterStart", "onEnterActive", "onEnterEnd", "onLeaveStart", "onLeaveActive", "onLeaveEnd"];
function Iv(e) {
  var t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : fo, r = /* @__PURE__ */ function(i) {
    Su(a, i);
    var n = mu(a);
    function a() {
      var s;
      Ru(this, a);
      for (var o = arguments.length, l = new Array(o), c = 0; c < o; c++)
        l[c] = arguments[c];
      return s = n.call.apply(n, [this].concat(l)), me(xe(s), "state", {
        keyEntities: []
      }), me(xe(s), "removeKey", function(f) {
        var p = s.state.keyEntities, O = p.map(function(d) {
          return d.key !== f ? d : Ue(Ue({}, d), {}, {
            status: Xo
          });
        });
        return s.setState({
          keyEntities: O
        }), O.filter(function(d) {
          var g = d.status;
          return g !== Xo;
        }).length;
      }), s;
    }
    return Au(a, [{
      key: "render",
      value: function() {
        var o = this, l = this.state.keyEntities, c = this.props, f = c.component, p = c.children, O = c.onVisibleChanged, d = c.onAllRemoved, g = el(c, Av), L = f || _e.Fragment, D = {};
        return yv.forEach(function(W) {
          D[W] = g[W], delete g[W];
        }), delete g.keys, /* @__PURE__ */ $e(L, {
          ...g,
          children: l.map(function(W, x) {
            var V = W.status, _ = el(W, gv), $ = V === ru || V === iu;
            return /* @__PURE__ */ NT(t, {
              ...D,
              key: _.key,
              visible: $,
              eventProps: _,
              onVisibleChanged: function(F) {
                if (O == null || O(F, {
                  key: _.key
                }), !F) {
                  var ae = o.removeKey(_.key);
                  ae === 0 && d && d();
                }
              }
            }, function(z, F) {
              return p(Ue(Ue({}, z), {}, {
                index: x
              }), F);
            });
          })
        });
      }
    }], [{
      key: "getDerivedStateFromProps",
      value: function(o, l) {
        var c = o.keys, f = l.keyEntities, p = au(c), O = Rv(f, p);
        return {
          keyEntities: O.filter(function(d) {
            var g = f.find(function(L) {
              var D = L.key;
              return d.key === D;
            });
            return !(g && g.status === Xo && d.status === nu);
          })
        };
      }
    }]), a;
  }(_e.Component);
  return me(r, "defaultProps", {
    component: "div"
  }), r;
}
Iv(qd);
function tT(e) {
  var t = e.prefixCls, r = e.motion, i = e.animation, n = e.transitionName;
  return r || (i ? {
    motionName: "".concat(t, "-").concat(i)
  } : n ? {
    motionName: n
  } : null);
}
function Nv(e) {
  var t = e.prefixCls, r = e.visible, i = e.zIndex, n = e.mask, a = e.maskMotion, s = e.maskAnimation, o = e.maskTransitionName;
  if (!n)
    return null;
  var l = {};
  return (a || o || s) && (l = Ue({
    motionAppear: !0
  }, tT({
    motion: a,
    prefixCls: t,
    transitionName: o,
    animation: s
  }))), /* @__PURE__ */ $e(fo, {
    ...l,
    visible: r,
    removeOnLeave: !0,
    children: function(c) {
      var f = c.className;
      return /* @__PURE__ */ $e("div", {
        style: {
          zIndex: i
        },
        className: da("".concat(t, "-mask"), f)
      });
    }
  });
}
function xh(e, t) {
  var r = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var i = Object.getOwnPropertySymbols(e);
    t && (i = i.filter(function(n) {
      return Object.getOwnPropertyDescriptor(e, n).enumerable;
    })), r.push.apply(r, i);
  }
  return r;
}
function Dh(e) {
  for (var t = 1; t < arguments.length; t++) {
    var r = arguments[t] != null ? arguments[t] : {};
    t % 2 ? xh(Object(r), !0).forEach(function(i) {
      Pv(e, i, r[i]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r)) : xh(Object(r)).forEach(function(i) {
      Object.defineProperty(e, i, Object.getOwnPropertyDescriptor(r, i));
    });
  }
  return e;
}
function su(e) {
  "@babel/helpers - typeof";
  return su = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, su(e);
}
function Pv(e, t, r) {
  return t in e ? Object.defineProperty(e, t, {
    value: r,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : e[t] = r, e;
}
var Gn, _v = {
  Webkit: "-webkit-",
  Moz: "-moz-",
  // IE did it wrong again ...
  ms: "-ms-",
  O: "-o-"
};
function ks() {
  if (Gn !== void 0)
    return Gn;
  Gn = "";
  var e = document.createElement("p").style, t = "Transform";
  for (var r in _v)
    r + t in e && (Gn = r);
  return Gn;
}
function rT() {
  return ks() ? "".concat(ks(), "TransitionProperty") : "transitionProperty";
}
function ho() {
  return ks() ? "".concat(ks(), "Transform") : "transform";
}
function Uh(e, t) {
  var r = rT();
  r && (e.style[r] = t, r !== "transitionProperty" && (e.style.transitionProperty = t));
}
function jo(e, t) {
  var r = ho();
  r && (e.style[r] = t, r !== "transform" && (e.style.transform = t));
}
function bv(e) {
  return e.style.transitionProperty || e.style[rT()];
}
function vv(e) {
  var t = window.getComputedStyle(e, null), r = t.getPropertyValue("transform") || t.getPropertyValue(ho());
  if (r && r !== "none") {
    var i = r.replace(/[^0-9\-.,]/g, "").split(",");
    return {
      x: parseFloat(i[12] || i[4], 0),
      y: parseFloat(i[13] || i[5], 0)
    };
  }
  return {
    x: 0,
    y: 0
  };
}
var Cv = /matrix\((.*)\)/, Lv = /matrix3d\((.*)\)/;
function xv(e, t) {
  var r = window.getComputedStyle(e, null), i = r.getPropertyValue("transform") || r.getPropertyValue(ho());
  if (i && i !== "none") {
    var n, a = i.match(Cv);
    if (a)
      a = a[1], n = a.split(",").map(function(o) {
        return parseFloat(o, 10);
      }), n[4] = t.x, n[5] = t.y, jo(e, "matrix(".concat(n.join(","), ")"));
    else {
      var s = i.match(Lv)[1];
      n = s.split(",").map(function(o) {
        return parseFloat(o, 10);
      }), n[12] = t.x, n[13] = t.y, jo(e, "matrix3d(".concat(n.join(","), ")"));
    }
  } else
    jo(e, "translateX(".concat(t.x, "px) translateY(").concat(t.y, "px) translateZ(0)"));
}
var Dv = /[\-+]?(?:\d*\.|)\d+(?:[eE][\-+]?\d+|)/.source, _a;
function wh(e) {
  var t = e.style.display;
  e.style.display = "none", e.offsetHeight, e.style.display = t;
}
function un(e, t, r) {
  var i = r;
  if (su(t) === "object") {
    for (var n in t)
      t.hasOwnProperty(n) && un(e, n, t[n]);
    return;
  }
  if (typeof i < "u") {
    typeof i == "number" && (i = "".concat(i, "px")), e.style[t] = i;
    return;
  }
  return _a(e, t);
}
function Uv(e) {
  var t, r, i, n = e.ownerDocument, a = n.body, s = n && n.documentElement;
  return t = e.getBoundingClientRect(), r = Math.floor(t.left), i = Math.floor(t.top), r -= s.clientLeft || a.clientLeft || 0, i -= s.clientTop || a.clientTop || 0, {
    left: r,
    top: i
  };
}
function iT(e, t) {
  var r = e["page".concat(t ? "Y" : "X", "Offset")], i = "scroll".concat(t ? "Top" : "Left");
  if (typeof r != "number") {
    var n = e.document;
    r = n.documentElement[i], typeof r != "number" && (r = n.body[i]);
  }
  return r;
}
function nT(e) {
  return iT(e);
}
function aT(e) {
  return iT(e, !0);
}
function Oa(e) {
  var t = Uv(e), r = e.ownerDocument, i = r.defaultView || r.parentWindow;
  return t.left += nT(i), t.top += aT(i), t;
}
function _c(e) {
  return e != null && e == e.window;
}
function sT(e) {
  return _c(e) ? e.document : e.nodeType === 9 ? e : e.ownerDocument;
}
function wv(e, t, r) {
  var i = r, n = "", a = sT(e);
  return i = i || a.defaultView.getComputedStyle(e, null), i && (n = i.getPropertyValue(t) || i[t]), n;
}
var Mv = new RegExp("^(".concat(Dv, ")(?!px)[a-z%]+$"), "i"), kv = /^(top|right|bottom|left)$/, Zo = "currentStyle", Ho = "runtimeStyle", vi = "left", Qv = "px";
function Gv(e, t) {
  var r = e[Zo] && e[Zo][t];
  if (Mv.test(r) && !kv.test(t)) {
    var i = e.style, n = i[vi], a = e[Ho][vi];
    e[Ho][vi] = e[Zo][vi], i[vi] = t === "fontSize" ? "1em" : r || 0, r = i.pixelLeft + Qv, i[vi] = n, e[Ho][vi] = a;
  }
  return r === "" ? "auto" : r;
}
typeof window < "u" && (_a = window.getComputedStyle ? wv : Gv);
function Ha(e, t) {
  return e === "left" ? t.useCssRight ? "right" : e : t.useCssBottom ? "bottom" : e;
}
function Mh(e) {
  if (e === "left")
    return "right";
  if (e === "right")
    return "left";
  if (e === "top")
    return "bottom";
  if (e === "bottom")
    return "top";
}
function kh(e, t, r) {
  un(e, "position") === "static" && (e.style.position = "relative");
  var i = -999, n = -999, a = Ha("left", r), s = Ha("top", r), o = Mh(a), l = Mh(s);
  a !== "left" && (i = 999), s !== "top" && (n = 999);
  var c = "", f = Oa(e);
  ("left" in t || "top" in t) && (c = bv(e) || "", Uh(e, "none")), "left" in t && (e.style[o] = "", e.style[a] = "".concat(i, "px")), "top" in t && (e.style[l] = "", e.style[s] = "".concat(n, "px")), wh(e);
  var p = Oa(e), O = {};
  for (var d in t)
    if (t.hasOwnProperty(d)) {
      var g = Ha(d, r), L = d === "left" ? i : n, D = f[d] - p[d];
      g === d ? O[g] = L + D : O[g] = L - D;
    }
  un(e, O), wh(e), ("left" in t || "top" in t) && Uh(e, c);
  var W = {};
  for (var x in t)
    if (t.hasOwnProperty(x)) {
      var V = Ha(x, r), _ = t[x] - f[x];
      x === V ? W[V] = O[V] + _ : W[V] = O[V] - _;
    }
  un(e, W);
}
function Vv(e, t) {
  var r = Oa(e), i = vv(e), n = {
    x: i.x,
    y: i.y
  };
  "left" in t && (n.x = i.x + t.left - r.left), "top" in t && (n.y = i.y + t.top - r.top), xv(e, n);
}
function Bv(e, t, r) {
  if (r.ignoreShake) {
    var i = Oa(e), n = i.left.toFixed(0), a = i.top.toFixed(0), s = t.left.toFixed(0), o = t.top.toFixed(0);
    if (n === s && a === o)
      return;
  }
  r.useCssRight || r.useCssBottom ? kh(e, t, r) : r.useCssTransform && ho() in document.body.style ? Vv(e, t) : kh(e, t, r);
}
function bc(e, t) {
  for (var r = 0; r < e.length; r++)
    t(e[r]);
}
function oT(e) {
  return _a(e, "boxSizing") === "border-box";
}
var $v = ["margin", "border", "padding"], ou = -1, Yv = 2, lu = 1, Fv = 0;
function Wv(e, t, r) {
  var i = {}, n = e.style, a;
  for (a in t)
    t.hasOwnProperty(a) && (i[a] = n[a], n[a] = t[a]);
  r.call(e);
  for (a in t)
    t.hasOwnProperty(a) && (n[a] = i[a]);
}
function $n(e, t, r) {
  var i = 0, n, a, s;
  for (a = 0; a < t.length; a++)
    if (n = t[a], n)
      for (s = 0; s < r.length; s++) {
        var o = void 0;
        n === "border" ? o = "".concat(n).concat(r[s], "Width") : o = n + r[s], i += parseFloat(_a(e, o)) || 0;
      }
  return i;
}
var Fr = {
  getParent: function(t) {
    var r = t;
    do
      r.nodeType === 11 && r.host ? r = r.host : r = r.parentNode;
    while (r && r.nodeType !== 1 && r.nodeType !== 9);
    return r;
  }
};
bc(["Width", "Height"], function(e) {
  Fr["doc".concat(e)] = function(t) {
    var r = t.document;
    return Math.max(
      // firefox chrome documentElement.scrollHeight< body.scrollHeight
      // ie standard mode : documentElement.scrollHeight> body.scrollHeight
      r.documentElement["scroll".concat(e)],
      // quirks : documentElement.scrollHeight 最大等于可视窗口多一点？
      r.body["scroll".concat(e)],
      Fr["viewport".concat(e)](r)
    );
  }, Fr["viewport".concat(e)] = function(t) {
    var r = "client".concat(e), i = t.document, n = i.body, a = i.documentElement, s = a[r];
    return i.compatMode === "CSS1Compat" && s || n && n[r] || s;
  };
});
function Qh(e, t, r) {
  var i = r;
  if (_c(e))
    return t === "width" ? Fr.viewportWidth(e) : Fr.viewportHeight(e);
  if (e.nodeType === 9)
    return t === "width" ? Fr.docWidth(e) : Fr.docHeight(e);
  var n = t === "width" ? ["Left", "Right"] : ["Top", "Bottom"], a = Math.floor(t === "width" ? e.getBoundingClientRect().width : e.getBoundingClientRect().height), s = oT(e), o = 0;
  (a == null || a <= 0) && (a = void 0, o = _a(e, t), (o == null || Number(o) < 0) && (o = e.style[t] || 0), o = Math.floor(parseFloat(o)) || 0), i === void 0 && (i = s ? lu : ou);
  var l = a !== void 0 || s, c = a || o;
  return i === ou ? l ? c - $n(e, ["border", "padding"], n) : o : l ? i === lu ? c : c + (i === Yv ? -$n(e, ["border"], n) : $n(e, ["margin"], n)) : o + $n(e, $v.slice(i), n);
}
var Xv = {
  position: "absolute",
  visibility: "hidden",
  display: "block"
};
function Gh() {
  for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++)
    t[r] = arguments[r];
  var i, n = t[0];
  return n.offsetWidth !== 0 ? i = Qh.apply(void 0, t) : Wv(n, Xv, function() {
    i = Qh.apply(void 0, t);
  }), i;
}
bc(["width", "height"], function(e) {
  var t = e.charAt(0).toUpperCase() + e.slice(1);
  Fr["outer".concat(t)] = function(i, n) {
    return i && Gh(i, e, n ? Fv : lu);
  };
  var r = e === "width" ? ["Left", "Right"] : ["Top", "Bottom"];
  Fr[e] = function(i, n) {
    var a = n;
    if (a !== void 0) {
      if (i) {
        var s = oT(i);
        return s && (a += $n(i, ["padding", "border"], r)), un(i, e, a);
      }
      return;
    }
    return i && Gh(i, e, ou);
  };
});
function lT(e, t) {
  for (var r in t)
    t.hasOwnProperty(r) && (e[r] = t[r]);
  return e;
}
var Ne = {
  getWindow: function(t) {
    if (t && t.document && t.setTimeout)
      return t;
    var r = t.ownerDocument || t;
    return r.defaultView || r.parentWindow;
  },
  getDocument: sT,
  offset: function(t, r, i) {
    if (typeof r < "u")
      Bv(t, r, i || {});
    else
      return Oa(t);
  },
  isWindow: _c,
  each: bc,
  css: un,
  clone: function(t) {
    var r, i = {};
    for (r in t)
      t.hasOwnProperty(r) && (i[r] = t[r]);
    var n = t.overflow;
    if (n)
      for (r in t)
        t.hasOwnProperty(r) && (i.overflow[r] = t.overflow[r]);
    return i;
  },
  mix: lT,
  getWindowScrollLeft: function(t) {
    return nT(t);
  },
  getWindowScrollTop: function(t) {
    return aT(t);
  },
  merge: function() {
    for (var t = {}, r = 0; r < arguments.length; r++)
      Ne.mix(t, r < 0 || arguments.length <= r ? void 0 : arguments[r]);
    return t;
  },
  viewportWidth: 0,
  viewportHeight: 0
};
lT(Ne, Fr);
var zo = Ne.getParent;
function uu(e) {
  if (Ne.isWindow(e) || e.nodeType === 9)
    return null;
  var t = Ne.getDocument(e), r = t.body, i, n = Ne.css(e, "position"), a = n === "fixed" || n === "absolute";
  if (!a)
    return e.nodeName.toLowerCase() === "html" ? null : zo(e);
  for (i = zo(e); i && i !== r && i.nodeType !== 9; i = zo(i))
    if (n = Ne.css(i, "position"), n !== "static")
      return i;
  return null;
}
var Vh = Ne.getParent;
function jv(e) {
  if (Ne.isWindow(e) || e.nodeType === 9)
    return !1;
  var t = Ne.getDocument(e), r = t.body, i = null;
  for (
    i = Vh(e);
    // 修复元素位于 document.documentElement 下导致崩溃问题
    i && i !== r && i !== t;
    i = Vh(i)
  ) {
    var n = Ne.css(i, "position");
    if (n === "fixed")
      return !0;
  }
  return !1;
}
function vc(e, t) {
  for (var r = {
    left: 0,
    right: 1 / 0,
    top: 0,
    bottom: 1 / 0
  }, i = uu(e), n = Ne.getDocument(e), a = n.defaultView || n.parentWindow, s = n.body, o = n.documentElement; i; ) {
    if ((navigator.userAgent.indexOf("MSIE") === -1 || i.clientWidth !== 0) && // body may have overflow set on it, yet we still get the entire
    // viewport. In some browsers, el.offsetParent may be
    // document.documentElement, so check for that too.
    i !== s && i !== o && Ne.css(i, "overflow") !== "visible") {
      var l = Ne.offset(i);
      l.left += i.clientLeft, l.top += i.clientTop, r.top = Math.max(r.top, l.top), r.right = Math.min(
        r.right,
        // consider area without scrollBar
        l.left + i.clientWidth
      ), r.bottom = Math.min(r.bottom, l.top + i.clientHeight), r.left = Math.max(r.left, l.left);
    } else if (i === s || i === o)
      break;
    i = uu(i);
  }
  var c = null;
  if (!Ne.isWindow(e) && e.nodeType !== 9) {
    c = e.style.position;
    var f = Ne.css(e, "position");
    f === "absolute" && (e.style.position = "fixed");
  }
  var p = Ne.getWindowScrollLeft(a), O = Ne.getWindowScrollTop(a), d = Ne.viewportWidth(a), g = Ne.viewportHeight(a), L = o.scrollWidth, D = o.scrollHeight, W = window.getComputedStyle(s);
  if (W.overflowX === "hidden" && (L = a.innerWidth), W.overflowY === "hidden" && (D = a.innerHeight), e.style && (e.style.position = c), t || jv(e))
    r.left = Math.max(r.left, p), r.top = Math.max(r.top, O), r.right = Math.min(r.right, p + d), r.bottom = Math.min(r.bottom, O + g);
  else {
    var x = Math.max(L, p + d);
    r.right = Math.min(r.right, x);
    var V = Math.max(D, O + g);
    r.bottom = Math.min(r.bottom, V);
  }
  return r.top >= 0 && r.left >= 0 && r.bottom > r.top && r.right > r.left ? r : null;
}
function Zv(e, t, r, i) {
  var n = Ne.clone(e), a = {
    width: t.width,
    height: t.height
  };
  return i.adjustX && n.left < r.left && (n.left = r.left), i.resizeWidth && n.left >= r.left && n.left + a.width > r.right && (a.width -= n.left + a.width - r.right), i.adjustX && n.left + a.width > r.right && (n.left = Math.max(r.right - a.width, r.left)), i.adjustY && n.top < r.top && (n.top = r.top), i.resizeHeight && n.top >= r.top && n.top + a.height > r.bottom && (a.height -= n.top + a.height - r.bottom), i.adjustY && n.top + a.height > r.bottom && (n.top = Math.max(r.bottom - a.height, r.top)), Ne.mix(n, a);
}
function Cc(e) {
  var t, r, i;
  if (!Ne.isWindow(e) && e.nodeType !== 9)
    t = Ne.offset(e), r = Ne.outerWidth(e), i = Ne.outerHeight(e);
  else {
    var n = Ne.getWindow(e);
    t = {
      left: Ne.getWindowScrollLeft(n),
      top: Ne.getWindowScrollTop(n)
    }, r = Ne.viewportWidth(n), i = Ne.viewportHeight(n);
  }
  return t.width = r, t.height = i, t;
}
function Bh(e, t) {
  var r = t.charAt(0), i = t.charAt(1), n = e.width, a = e.height, s = e.left, o = e.top;
  return r === "c" ? o += a / 2 : r === "b" && (o += a), i === "c" ? s += n / 2 : i === "r" && (s += n), {
    left: s,
    top: o
  };
}
function za(e, t, r, i, n) {
  var a = Bh(t, r[1]), s = Bh(e, r[0]), o = [s.left - a.left, s.top - a.top];
  return {
    left: Math.round(e.left - o[0] + i[0] - n[0]),
    top: Math.round(e.top - o[1] + i[1] - n[1])
  };
}
function $h(e, t, r) {
  return e.left < r.left || e.left + t.width > r.right;
}
function Yh(e, t, r) {
  return e.top < r.top || e.top + t.height > r.bottom;
}
function Hv(e, t, r) {
  return e.left > r.right || e.left + t.width < r.left;
}
function zv(e, t, r) {
  return e.top > r.bottom || e.top + t.height < r.top;
}
function qa(e, t, r) {
  var i = [];
  return Ne.each(e, function(n) {
    i.push(n.replace(t, function(a) {
      return r[a];
    }));
  }), i;
}
function Ja(e, t) {
  return e[t] = -e[t], e;
}
function Fh(e, t) {
  var r;
  return /%$/.test(e) ? r = parseInt(e.substring(0, e.length - 1), 10) / 100 * t : r = parseInt(e, 10), r || 0;
}
function Wh(e, t) {
  e[0] = Fh(e[0], t.width), e[1] = Fh(e[1], t.height);
}
function uT(e, t, r, i) {
  var n = r.points, a = r.offset || [0, 0], s = r.targetOffset || [0, 0], o = r.overflow, l = r.source || e;
  a = [].concat(a), s = [].concat(s), o = o || {};
  var c = {}, f = 0, p = !!(o && o.alwaysByViewport), O = vc(l, p), d = Cc(l);
  Wh(a, d), Wh(s, t);
  var g = za(d, t, n, a, s), L = Ne.merge(d, g);
  if (O && (o.adjustX || o.adjustY) && i) {
    if (o.adjustX && $h(g, d, O)) {
      var D = qa(n, /[lr]/gi, {
        l: "r",
        r: "l"
      }), W = Ja(a, 0), x = Ja(s, 0), V = za(d, t, D, W, x);
      Hv(V, d, O) || (f = 1, n = D, a = W, s = x);
    }
    if (o.adjustY && Yh(g, d, O)) {
      var _ = qa(n, /[tb]/gi, {
        t: "b",
        b: "t"
      }), $ = Ja(a, 1), z = Ja(s, 1), F = za(d, t, _, $, z);
      zv(F, d, O) || (f = 1, n = _, a = $, s = z);
    }
    f && (g = za(d, t, n, a, s), Ne.mix(L, g));
    var ae = $h(g, d, O), U = Yh(g, d, O);
    if (ae || U) {
      var G = n;
      ae && (G = qa(n, /[lr]/gi, {
        l: "r",
        r: "l"
      })), U && (G = qa(n, /[tb]/gi, {
        t: "b",
        b: "t"
      })), n = G, a = r.offset || [0, 0], s = r.targetOffset || [0, 0];
    }
    c.adjustX = o.adjustX && ae, c.adjustY = o.adjustY && U, (c.adjustX || c.adjustY) && (L = Zv(g, d, O, c));
  }
  return L.width !== d.width && Ne.css(l, "width", Ne.width(l) + L.width - d.width), L.height !== d.height && Ne.css(l, "height", Ne.height(l) + L.height - d.height), Ne.offset(l, {
    left: L.left,
    top: L.top
  }, {
    useCssRight: r.useCssRight,
    useCssBottom: r.useCssBottom,
    useCssTransform: r.useCssTransform,
    ignoreShake: r.ignoreShake
  }), {
    points: n,
    offset: a,
    targetOffset: s,
    overflow: c
  };
}
function qv(e, t) {
  var r = vc(e, t), i = Cc(e);
  return !r || i.left + i.width <= r.left || i.top + i.height <= r.top || i.left >= r.right || i.top >= r.bottom;
}
function Lc(e, t, r) {
  var i = r.target || t, n = Cc(i), a = !qv(i, r.overflow && r.overflow.alwaysByViewport);
  return uT(e, n, r, a);
}
Lc.__getOffsetParent = uu;
Lc.__getVisibleRectForElement = vc;
function Jv(e, t, r) {
  var i, n, a = Ne.getDocument(e), s = a.defaultView || a.parentWindow, o = Ne.getWindowScrollLeft(s), l = Ne.getWindowScrollTop(s), c = Ne.viewportWidth(s), f = Ne.viewportHeight(s);
  "pageX" in t ? i = t.pageX : i = o + t.clientX, "pageY" in t ? n = t.pageY : n = l + t.clientY;
  var p = {
    left: i,
    top: n,
    width: 0,
    height: 0
  }, O = i >= 0 && i <= o + c && n >= 0 && n <= l + f, d = [r.points[0], "cc"];
  return uT(e, p, Dh(Dh({}, r), {}, {
    points: d
  }), O);
}
var cu = {}, xc = [], Kv = function(t) {
  xc.push(t);
};
function eC(e, t) {
  if (process.env.NODE_ENV !== "production" && !e && console !== void 0) {
    var r = xc.reduce(function(i, n) {
      return n(i ?? "", "warning");
    }, t);
    r && console.error("Warning: ".concat(r));
  }
}
function tC(e, t) {
  if (process.env.NODE_ENV !== "production" && !e && console !== void 0) {
    var r = xc.reduce(function(i, n) {
      return n(i ?? "", "note");
    }, t);
    r && console.warn("Note: ".concat(r));
  }
}
function rC() {
  cu = {};
}
function cT(e, t, r) {
  !t && !cu[r] && (e(!1, r), cu[r] = !0);
}
function po(e, t) {
  cT(eC, e, t);
}
function iC(e, t) {
  cT(tC, e, t);
}
po.preMessage = Kv;
po.resetWarned = rC;
po.noteOnce = iC;
function nC(e, t) {
  var r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1, i = /* @__PURE__ */ new Set();
  function n(a, s) {
    var o = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1, l = i.has(a);
    if (po(!l, "Warning: There may be circular references"), l)
      return !1;
    if (a === s)
      return !0;
    if (r && o > 1)
      return !1;
    i.add(a);
    var c = o + 1;
    if (Array.isArray(a)) {
      if (!Array.isArray(s) || a.length !== s.length)
        return !1;
      for (var f = 0; f < a.length; f++)
        if (!n(a[f], s[f], c))
          return !1;
      return !0;
    }
    if (a && s && di(a) === "object" && di(s) === "object") {
      var p = Object.keys(a);
      return p.length !== Object.keys(s).length ? !1 : p.every(function(O) {
        return n(a[O], s[O], c);
      });
    }
    return !1;
  }
  return n(e, t);
}
function aC(e, t, r, i) {
  var n = $i.unstable_batchedUpdates ? function(s) {
    $i.unstable_batchedUpdates(r, s);
  } : r;
  return e != null && e.addEventListener && e.addEventListener(t, n, i), {
    remove: function() {
      e != null && e.removeEventListener && e.removeEventListener(t, n, i);
    }
  };
}
const sC = function(e) {
  if (!e)
    return !1;
  if (e instanceof Element) {
    if (e.offsetParent)
      return !0;
    if (e.getBBox) {
      var t = e.getBBox(), r = t.width, i = t.height;
      if (r || i)
        return !0;
    }
    if (e.getBoundingClientRect) {
      var n = e.getBoundingClientRect(), a = n.width, s = n.height;
      if (a || s)
        return !0;
    }
  }
  return !1;
};
function oC() {
  return !!(typeof window < "u" && window.document && window.document.createElement);
}
var Xh = process.env.NODE_ENV !== "test" && oC() ? _e.useLayoutEffect : _e.useEffect, lC = function(t, r) {
  var i = _e.useRef(!0);
  Xh(function() {
    return t(i.current);
  }, r), Xh(function() {
    return i.current = !1, function() {
      i.current = !0;
    };
  }, []);
};
function uC(e, t) {
  typeof e == "function" ? e(t) : di(e) === "object" && e && "current" in e && (e.current = t);
}
function cC() {
  for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++)
    t[r] = arguments[r];
  var i = t.filter(function(n) {
    return n;
  });
  return i.length <= 1 ? i[0] : function(n) {
    t.forEach(function(a) {
      uC(a, n);
    });
  };
}
const fC = function(e, t) {
  var r = bt.useRef(!1), i = bt.useRef(null);
  function n() {
    window.clearTimeout(i.current);
  }
  function a(s) {
    if (n(), !r.current || s === !0) {
      if (e(s) === !1)
        return;
      r.current = !0, i.current = window.setTimeout(function() {
        r.current = !1;
      }, t);
    } else
      i.current = window.setTimeout(function() {
        r.current = !1, a();
      }, t);
  }
  return [a, function() {
    r.current = !1, n();
  }];
};
function hC(e, t) {
  if (!e)
    return !1;
  if (e.contains)
    return e.contains(t);
  for (var r = t; r; ) {
    if (r === e)
      return !0;
    r = r.parentNode;
  }
  return !1;
}
function pC(e, t) {
  return e === t ? !0 : !e || !t ? !1 : "pageX" in t && "pageY" in t ? e.pageX === t.pageX && e.pageY === t.pageY : "clientX" in t && "clientY" in t ? e.clientX === t.clientX && e.clientY === t.clientY : !1;
}
function OC(e, t) {
  e !== document.activeElement && hC(t, e) && typeof e.focus == "function" && e.focus();
}
function jh(e, t) {
  var r = null, i = null;
  function n(s) {
    var o = At(s, 1), l = o[0].target;
    if (document.documentElement.contains(l)) {
      var c = l.getBoundingClientRect(), f = c.width, p = c.height, O = Math.floor(f), d = Math.floor(p);
      (r !== O || i !== d) && Promise.resolve().then(function() {
        t({
          width: O,
          height: d
        });
      }), r = O, i = d;
    }
  }
  var a = new HT(n);
  return e && a.observe(e), function() {
    a.disconnect();
  };
}
function Zh(e) {
  return typeof e != "function" ? null : e();
}
function Hh(e) {
  return di(e) !== "object" || !e ? null : e;
}
var EC = function(t, r) {
  var i = t.children, n = t.disabled, a = t.target, s = t.align, o = t.onAlign, l = t.monitorWindowResize, c = t.monitorBufferTime, f = c === void 0 ? 0 : c, p = bt.useRef({}), O = bt.useRef(), d = bt.Children.only(i), g = bt.useRef({});
  g.current.disabled = n, g.current.target = a, g.current.align = s, g.current.onAlign = o;
  var L = fC(function() {
    var H = g.current, re = H.disabled, B = H.target, Y = H.align, E = H.onAlign, m = O.current;
    if (!re && B && m) {
      var P, R = Zh(B), A = Hh(B);
      p.current.element = R, p.current.point = A, p.current.align = Y;
      var y = document, C = y.activeElement;
      return R && sC(R) ? P = Lc(m, R, Y) : A && (P = Jv(m, A, Y)), OC(C, m), E && P && E(m, P), !0;
    }
    return !1;
  }, f), D = At(L, 2), W = D[0], x = D[1], V = bt.useState(), _ = At(V, 2), $ = _[0], z = _[1], F = bt.useState(), ae = At(F, 2), U = ae[0], G = ae[1];
  return lC(function() {
    z(Zh(a)), G(Hh(a));
  }), bt.useEffect(function() {
    (p.current.element !== $ || !pC(p.current.point, U) || !nC(p.current.align, s)) && W();
  }), bt.useEffect(function() {
    var H = jh(O.current, W);
    return H;
  }, [O.current]), bt.useEffect(function() {
    var H = jh($, W);
    return H;
  }, [$]), bt.useEffect(function() {
    n ? x() : W();
  }, [n]), bt.useEffect(function() {
    if (l) {
      var H = aC(window, "resize", W);
      return H.remove;
    }
  }, [l]), bt.useEffect(function() {
    return function() {
      x();
    };
  }, []), bt.useImperativeHandle(r, function() {
    return {
      forceAlign: function() {
        return W(!0);
      }
    };
  }), /* @__PURE__ */ bt.isValidElement(d) && (d = /* @__PURE__ */ bt.cloneElement(d, {
    ref: cC(d.ref, O)
  })), d;
}, fT = /* @__PURE__ */ bt.forwardRef(EC);
fT.displayName = "Align";
var zh = process.env.NODE_ENV !== "test" && Pa() ? _e.useLayoutEffect : _e.useEffect, qh = function(t, r) {
  var i = _e.useRef(!0);
  zh(function() {
    return t(i.current);
  }, r), zh(function() {
    return i.current = !1, function() {
      i.current = !0;
    };
  }, []);
}, Jh = ["measure", "alignPre", "align", null, "motion"];
const dC = function(e, t) {
  var r = jn(null), i = At(r, 2), n = i[0], a = i[1], s = pt();
  function o(f) {
    a(f, !0);
  }
  function l() {
    Wr.cancel(s.current);
  }
  function c(f) {
    l(), s.current = Wr(function() {
      o(function(p) {
        switch (n) {
          case "align":
            return "motion";
          case "motion":
            return "stable";
        }
        return p;
      }), f == null || f();
    });
  }
  return Xt(function() {
    o("measure");
  }, [e]), Xt(function() {
    switch (n) {
      case "measure":
        t();
        break;
    }
    n && (s.current = Wr(/* @__PURE__ */ zT(/* @__PURE__ */ Bc().mark(function f() {
      var p, O;
      return Bc().wrap(function(g) {
        for (; ; )
          switch (g.prev = g.next) {
            case 0:
              p = Jh.indexOf(n), O = Jh[p + 1], O && p !== -1 && o(O);
            case 3:
            case "end":
              return g.stop();
          }
      }, f);
    }))));
  }, [n]), Xt(function() {
    return function() {
      l();
    };
  }, []), [n, c];
}, TC = function(e) {
  var t = _e.useState({
    width: 0,
    height: 0
  }), r = At(t, 2), i = r[0], n = r[1];
  function a(o) {
    var l = o.offsetWidth, c = o.offsetHeight, f = o.getBoundingClientRect(), p = f.width, O = f.height;
    Math.abs(l - p) < 1 && Math.abs(c - O) < 1 && (l = p, c = O), n({
      width: l,
      height: c
    });
  }
  var s = _e.useMemo(function() {
    var o = {};
    if (e) {
      var l = i.width, c = i.height;
      e.indexOf("height") !== -1 && c ? o.height = c : e.indexOf("minHeight") !== -1 && c && (o.minHeight = c), e.indexOf("width") !== -1 && l ? o.width = l : e.indexOf("minWidth") !== -1 && l && (o.minWidth = l);
    }
    return o;
  }, [e, i]);
  return [s, a];
};
var hT = /* @__PURE__ */ _e.forwardRef(function(e, t) {
  var r = e.visible, i = e.prefixCls, n = e.className, a = e.style, s = e.children, o = e.zIndex, l = e.stretch, c = e.destroyPopupOnHide, f = e.forceRender, p = e.align, O = e.point, d = e.getRootDomNode, g = e.getClassNameFromAlign, L = e.onAlign, D = e.onMouseEnter, W = e.onMouseLeave, x = e.onMouseDown, V = e.onTouchStart, _ = e.onClick, $ = pt(), z = pt(), F = br(), ae = At(F, 2), U = ae[0], G = ae[1], H = TC(l), re = At(H, 2), B = re[0], Y = re[1];
  function E() {
    l && Y(d());
  }
  var m = dC(r, E), P = At(m, 2), R = P[0], A = P[1], y = br(0), C = At(y, 2), j = C[0], w = C[1], J = pt();
  qh(function() {
    R === "alignPre" && w(0);
  }, [R]);
  function te() {
    return O || d;
  }
  function se() {
    var Ee;
    (Ee = $.current) === null || Ee === void 0 || Ee.forceAlign();
  }
  function ge(Ee, ut) {
    var Je = g(ut);
    U !== Je && G(Je), w(function(q) {
      return q + 1;
    }), R === "align" && (L == null || L(Ee, ut));
  }
  qh(function() {
    R === "align" && (j < 3 ? se() : A(function() {
      var Ee;
      (Ee = J.current) === null || Ee === void 0 || Ee.call(J);
    }));
  }, [j]);
  var fe = Ue({}, tT(e));
  ["onAppearEnd", "onEnterEnd", "onLeaveEnd"].forEach(function(Ee) {
    var ut = fe[Ee];
    fe[Ee] = function(Je, q) {
      return A(), ut == null ? void 0 : ut(Je, q);
    };
  });
  function et() {
    return new Promise(function(Ee) {
      J.current = Ee;
    });
  }
  _e.useEffect(function() {
    !fe.motionName && R === "motion" && A();
  }, [fe.motionName, R]), _e.useImperativeHandle(t, function() {
    return {
      forceAlign: se,
      getElement: function() {
        return z.current;
      }
    };
  });
  var yt = Ue(Ue({}, B), {}, {
    zIndex: o,
    opacity: R === "motion" || R === "stable" || !r ? void 0 : 0,
    // Cannot interact with disappearing elements
    // https://github.com/ant-design/ant-design/issues/35051#issuecomment-1101340714
    pointerEvents: !r && R !== "stable" ? "none" : void 0
  }, a), De = !0;
  p != null && p.points && (R === "align" || R === "stable") && (De = !1);
  var Ce = s;
  return _e.Children.count(s) > 1 && (Ce = /* @__PURE__ */ $e("div", {
    className: "".concat(i, "-content"),
    children: s
  })), /* @__PURE__ */ $e(fo, {
    visible: r,
    ref: z,
    leavedClassName: "".concat(i, "-hidden"),
    ...fe,
    onAppearPrepare: et,
    onEnterPrepare: et,
    removeOnLeave: c,
    forceRender: f,
    children: function(Ee, ut) {
      var Je = Ee.className, q = Ee.style, ot = da(i, n, U, Je);
      return /* @__PURE__ */ $e(fT, {
        target: te(),
        ref: $,
        monitorWindowResize: !0,
        disabled: De,
        align: p,
        onAlign: ge,
        children: /* @__PURE__ */ $e("div", {
          ref: ut,
          className: ot,
          onMouseEnter: D,
          onMouseLeave: W,
          onMouseDownCapture: x,
          onTouchStartCapture: V,
          onClick: _,
          style: Ue(Ue({}, q), yt),
          children: Ce
        })
      }, "popup");
    }
  });
});
hT.displayName = "PopupInner";
var pT = /* @__PURE__ */ _e.forwardRef(function(e, t) {
  var r = e.prefixCls, i = e.visible, n = e.zIndex, a = e.children, s = e.mobile;
  s = s === void 0 ? {} : s;
  var o = s.popupClassName, l = s.popupStyle, c = s.popupMotion, f = c === void 0 ? {} : c, p = s.popupRender, O = e.onClick, d = _e.useRef();
  _e.useImperativeHandle(t, function() {
    return {
      forceAlign: function() {
      },
      getElement: function() {
        return d.current;
      }
    };
  });
  var g = Ue({
    zIndex: n
  }, l), L = a;
  return _e.Children.count(a) > 1 && (L = /* @__PURE__ */ $e("div", {
    className: "".concat(r, "-content"),
    children: a
  })), p && (L = p(L)), /* @__PURE__ */ $e(fo, {
    visible: i,
    ref: d,
    removeOnLeave: !0,
    ...f,
    children: function(D, W) {
      var x = D.className, V = D.style, _ = da(r, o, x);
      return /* @__PURE__ */ $e("div", {
        ref: W,
        className: _,
        onClick: O,
        style: Ue(Ue({}, V), g),
        children: L
      });
    }
  });
});
pT.displayName = "MobilePopupInner";
var SC = ["visible", "mobile"], OT = /* @__PURE__ */ _e.forwardRef(function(e, t) {
  var r = e.visible, i = e.mobile, n = el(e, SC), a = br(r), s = At(a, 2), o = s[0], l = s[1], c = br(!1), f = At(c, 2), p = f[0], O = f[1], d = Ue(Ue({}, n), {}, {
    visible: o
  });
  Xt(function() {
    l(r), r && i && O(av());
  }, [r, i]);
  var g = p ? /* @__PURE__ */ $e(pT, {
    ...d,
    mobile: i,
    ref: t
  }) : /* @__PURE__ */ $e(hT, {
    ...d,
    ref: t
  });
  return /* @__PURE__ */ pi("div", {
    children: [/* @__PURE__ */ $e(Nv, {
      ...d
    }), g]
  });
});
OT.displayName = "Popup";
var Kh = /* @__PURE__ */ _e.createContext(null);
function qo() {
}
function mC() {
  return "";
}
function RC(e) {
  return e ? e.ownerDocument : window.document;
}
var AC = ["onClick", "onMouseDown", "onTouchStart", "onMouseEnter", "onMouseLeave", "onFocus", "onBlur", "onContextMenu"];
function gC(e) {
  var t = /* @__PURE__ */ function(r) {
    Su(n, r);
    var i = mu(n);
    function n(a) {
      var s;
      Ru(this, n), s = i.call(this, a), me(xe(s), "popupRef", /* @__PURE__ */ _e.createRef()), me(xe(s), "triggerRef", /* @__PURE__ */ _e.createRef()), me(xe(s), "portalContainer", void 0), me(xe(s), "attachId", void 0), me(xe(s), "clickOutsideHandler", void 0), me(xe(s), "touchOutsideHandler", void 0), me(xe(s), "contextMenuOutsideHandler1", void 0), me(xe(s), "contextMenuOutsideHandler2", void 0), me(xe(s), "mouseDownTimeout", void 0), me(xe(s), "focusTime", void 0), me(xe(s), "preClickTime", void 0), me(xe(s), "preTouchTime", void 0), me(xe(s), "delayTimer", void 0), me(xe(s), "hasPopupMouseDown", void 0), me(xe(s), "onMouseEnter", function(l) {
        var c = s.props.mouseEnterDelay;
        s.fireEvents("onMouseEnter", l), s.delaySetPopupVisible(!0, c, c ? null : l);
      }), me(xe(s), "onMouseMove", function(l) {
        s.fireEvents("onMouseMove", l), s.setPoint(l);
      }), me(xe(s), "onMouseLeave", function(l) {
        s.fireEvents("onMouseLeave", l), s.delaySetPopupVisible(!1, s.props.mouseLeaveDelay);
      }), me(xe(s), "onPopupMouseEnter", function() {
        s.clearDelayTimer();
      }), me(xe(s), "onPopupMouseLeave", function(l) {
        var c;
        l.relatedTarget && !l.relatedTarget.setTimeout && Wo((c = s.popupRef.current) === null || c === void 0 ? void 0 : c.getElement(), l.relatedTarget) || s.delaySetPopupVisible(!1, s.props.mouseLeaveDelay);
      }), me(xe(s), "onFocus", function(l) {
        s.fireEvents("onFocus", l), s.clearDelayTimer(), s.isFocusToShow() && (s.focusTime = Date.now(), s.delaySetPopupVisible(!0, s.props.focusDelay));
      }), me(xe(s), "onMouseDown", function(l) {
        s.fireEvents("onMouseDown", l), s.preClickTime = Date.now();
      }), me(xe(s), "onTouchStart", function(l) {
        s.fireEvents("onTouchStart", l), s.preTouchTime = Date.now();
      }), me(xe(s), "onBlur", function(l) {
        s.fireEvents("onBlur", l), s.clearDelayTimer(), s.isBlurToHide() && s.delaySetPopupVisible(!1, s.props.blurDelay);
      }), me(xe(s), "onContextMenu", function(l) {
        l.preventDefault(), s.fireEvents("onContextMenu", l), s.setPopupVisible(!0, l);
      }), me(xe(s), "onContextMenuClose", function() {
        s.isContextMenuToShow() && s.close();
      }), me(xe(s), "onClick", function(l) {
        if (s.fireEvents("onClick", l), s.focusTime) {
          var c;
          if (s.preClickTime && s.preTouchTime ? c = Math.min(s.preClickTime, s.preTouchTime) : s.preClickTime ? c = s.preClickTime : s.preTouchTime && (c = s.preTouchTime), Math.abs(c - s.focusTime) < 20)
            return;
          s.focusTime = 0;
        }
        s.preClickTime = 0, s.preTouchTime = 0, s.isClickToShow() && (s.isClickToHide() || s.isBlurToHide()) && l && l.preventDefault && l.preventDefault();
        var f = !s.state.popupVisible;
        (s.isClickToHide() && !f || f && s.isClickToShow()) && s.setPopupVisible(!s.state.popupVisible, l);
      }), me(xe(s), "onPopupMouseDown", function() {
        if (s.hasPopupMouseDown = !0, clearTimeout(s.mouseDownTimeout), s.mouseDownTimeout = window.setTimeout(function() {
          s.hasPopupMouseDown = !1;
        }, 0), s.context) {
          var l;
          (l = s.context).onPopupMouseDown.apply(l, arguments);
        }
      }), me(xe(s), "onDocumentClick", function(l) {
        if (!(s.props.mask && !s.props.maskClosable)) {
          var c = l.target, f = s.getRootDomNode(), p = s.getPopupDomNode();
          // mousedown on the target should also close popup when action is contextMenu.
          // https://github.com/ant-design/ant-design/issues/29853
          (!Wo(f, c) || s.isContextMenuOnly()) && !Wo(p, c) && !s.hasPopupMouseDown && s.close();
        }
      }), me(xe(s), "getRootDomNode", function() {
        var l = s.props.getTriggerDOMNode;
        if (l)
          return l(s.triggerRef.current);
        try {
          var c = Yd(s.triggerRef.current);
          if (c)
            return c;
        } catch {
        }
        return $i.findDOMNode(xe(s));
      }), me(xe(s), "getPopupClassNameFromAlign", function(l) {
        var c = [], f = s.props, p = f.popupPlacement, O = f.builtinPlacements, d = f.prefixCls, g = f.alignPoint, L = f.getPopupClassNameFromAlign;
        return p && O && c.push(nv(O, d, l, g)), L && c.push(L(l)), c.join(" ");
      }), me(xe(s), "getComponent", function() {
        var l = s.props, c = l.prefixCls, f = l.destroyPopupOnHide, p = l.popupClassName, O = l.onPopupAlign, d = l.popupMotion, g = l.popupAnimation, L = l.popupTransitionName, D = l.popupStyle, W = l.mask, x = l.maskAnimation, V = l.maskTransitionName, _ = l.maskMotion, $ = l.zIndex, z = l.popup, F = l.stretch, ae = l.alignPoint, U = l.mobile, G = l.forceRender, H = l.onPopupClick, re = s.state, B = re.popupVisible, Y = re.point, E = s.getPopupAlign(), m = {};
        return s.isMouseEnterToShow() && (m.onMouseEnter = s.onPopupMouseEnter), s.isMouseLeaveToHide() && (m.onMouseLeave = s.onPopupMouseLeave), m.onMouseDown = s.onPopupMouseDown, m.onTouchStart = s.onPopupMouseDown, /* @__PURE__ */ $e(OT, {
          prefixCls: c,
          destroyPopupOnHide: f,
          visible: B,
          point: ae && Y,
          className: p,
          align: E,
          onAlign: O,
          animation: g,
          getClassNameFromAlign: s.getPopupClassNameFromAlign,
          ...m,
          stretch: F,
          getRootDomNode: s.getRootDomNode,
          style: D,
          mask: W,
          zIndex: $,
          transitionName: L,
          maskAnimation: x,
          maskTransitionName: V,
          maskMotion: _,
          ref: s.popupRef,
          motion: d,
          mobile: U,
          forceRender: G,
          onClick: H,
          children: typeof z == "function" ? z() : z
        });
      }), me(xe(s), "attachParent", function(l) {
        Wr.cancel(s.attachId);
        var c = s.props, f = c.getPopupContainer, p = c.getDocument, O = s.getRootDomNode(), d;
        f ? (O || f.length === 0) && (d = f(O)) : d = p(s.getRootDomNode()).body, d ? d.appendChild(l) : s.attachId = Wr(function() {
          s.attachParent(l);
        });
      }), me(xe(s), "getContainer", function() {
        if (!s.portalContainer) {
          var l = s.props.getDocument, c = l(s.getRootDomNode()).createElement("div");
          c.style.position = "absolute", c.style.top = "0", c.style.left = "0", c.style.width = "100%", s.portalContainer = c;
        }
        return s.attachParent(s.portalContainer), s.portalContainer;
      }), me(xe(s), "setPoint", function(l) {
        var c = s.props.alignPoint;
        !c || !l || s.setState({
          point: {
            pageX: l.pageX,
            pageY: l.pageY
          }
        });
      }), me(xe(s), "handlePortalUpdate", function() {
        s.state.prevPopupVisible !== s.state.popupVisible && s.props.afterPopupVisibleChange(s.state.popupVisible);
      }), me(xe(s), "triggerContextValue", {
        onPopupMouseDown: s.onPopupMouseDown
      });
      var o;
      return "popupVisible" in a ? o = !!a.popupVisible : o = !!a.defaultPopupVisible, s.state = {
        prevPopupVisible: o,
        popupVisible: o
      }, AC.forEach(function(l) {
        s["fire".concat(l)] = function(c) {
          s.fireEvents(l, c);
        };
      }), s;
    }
    return Au(n, [{
      key: "componentDidMount",
      value: function() {
        this.componentDidUpdate();
      }
    }, {
      key: "componentDidUpdate",
      value: function() {
        var s = this.props, o = this.state;
        if (o.popupVisible) {
          var l;
          !this.clickOutsideHandler && (this.isClickToHide() || this.isContextMenuToShow()) && (l = s.getDocument(this.getRootDomNode()), this.clickOutsideHandler = Fa(l, "mousedown", this.onDocumentClick)), this.touchOutsideHandler || (l = l || s.getDocument(this.getRootDomNode()), this.touchOutsideHandler = Fa(l, "touchstart", this.onDocumentClick)), !this.contextMenuOutsideHandler1 && this.isContextMenuToShow() && (l = l || s.getDocument(this.getRootDomNode()), this.contextMenuOutsideHandler1 = Fa(l, "scroll", this.onContextMenuClose)), !this.contextMenuOutsideHandler2 && this.isContextMenuToShow() && (this.contextMenuOutsideHandler2 = Fa(window, "blur", this.onContextMenuClose));
          return;
        }
        this.clearOutsideHandler();
      }
    }, {
      key: "componentWillUnmount",
      value: function() {
        this.clearDelayTimer(), this.clearOutsideHandler(), clearTimeout(this.mouseDownTimeout), Wr.cancel(this.attachId);
      }
    }, {
      key: "getPopupDomNode",
      value: function() {
        var s;
        return ((s = this.popupRef.current) === null || s === void 0 ? void 0 : s.getElement()) || null;
      }
    }, {
      key: "getPopupAlign",
      value: function() {
        var s = this.props, o = s.popupPlacement, l = s.popupAlign, c = s.builtinPlacements;
        return o && c ? iv(c, o, l) : l;
      }
    }, {
      key: "setPopupVisible",
      value: (
        /**
         * @param popupVisible    Show or not the popup element
         * @param event           SyntheticEvent, used for `pointAlign`
         */
        function(s, o) {
          var l = this.props.alignPoint, c = this.state.popupVisible;
          this.clearDelayTimer(), c !== s && ("popupVisible" in this.props || this.setState({
            popupVisible: s,
            prevPopupVisible: c
          }), this.props.onPopupVisibleChange(s)), l && o && s && this.setPoint(o);
        }
      )
    }, {
      key: "delaySetPopupVisible",
      value: function(s, o, l) {
        var c = this, f = o * 1e3;
        if (this.clearDelayTimer(), f) {
          var p = l ? {
            pageX: l.pageX,
            pageY: l.pageY
          } : null;
          this.delayTimer = window.setTimeout(function() {
            c.setPopupVisible(s, p), c.clearDelayTimer();
          }, f);
        } else
          this.setPopupVisible(s, l);
      }
    }, {
      key: "clearDelayTimer",
      value: function() {
        this.delayTimer && (clearTimeout(this.delayTimer), this.delayTimer = null);
      }
    }, {
      key: "clearOutsideHandler",
      value: function() {
        this.clickOutsideHandler && (this.clickOutsideHandler.remove(), this.clickOutsideHandler = null), this.contextMenuOutsideHandler1 && (this.contextMenuOutsideHandler1.remove(), this.contextMenuOutsideHandler1 = null), this.contextMenuOutsideHandler2 && (this.contextMenuOutsideHandler2.remove(), this.contextMenuOutsideHandler2 = null), this.touchOutsideHandler && (this.touchOutsideHandler.remove(), this.touchOutsideHandler = null);
      }
    }, {
      key: "createTwoChains",
      value: function(s) {
        var o = this.props.children.props, l = this.props;
        return o[s] && l[s] ? this["fire".concat(s)] : o[s] || l[s];
      }
    }, {
      key: "isClickToShow",
      value: function() {
        var s = this.props, o = s.action, l = s.showAction;
        return o.indexOf("click") !== -1 || l.indexOf("click") !== -1;
      }
    }, {
      key: "isContextMenuOnly",
      value: function() {
        var s = this.props.action;
        return s === "contextMenu" || s.length === 1 && s[0] === "contextMenu";
      }
    }, {
      key: "isContextMenuToShow",
      value: function() {
        var s = this.props, o = s.action, l = s.showAction;
        return o.indexOf("contextMenu") !== -1 || l.indexOf("contextMenu") !== -1;
      }
    }, {
      key: "isClickToHide",
      value: function() {
        var s = this.props, o = s.action, l = s.hideAction;
        return o.indexOf("click") !== -1 || l.indexOf("click") !== -1;
      }
    }, {
      key: "isMouseEnterToShow",
      value: function() {
        var s = this.props, o = s.action, l = s.showAction;
        return o.indexOf("hover") !== -1 || l.indexOf("mouseEnter") !== -1;
      }
    }, {
      key: "isMouseLeaveToHide",
      value: function() {
        var s = this.props, o = s.action, l = s.hideAction;
        return o.indexOf("hover") !== -1 || l.indexOf("mouseLeave") !== -1;
      }
    }, {
      key: "isFocusToShow",
      value: function() {
        var s = this.props, o = s.action, l = s.showAction;
        return o.indexOf("focus") !== -1 || l.indexOf("focus") !== -1;
      }
    }, {
      key: "isBlurToHide",
      value: function() {
        var s = this.props, o = s.action, l = s.hideAction;
        return o.indexOf("focus") !== -1 || l.indexOf("blur") !== -1;
      }
    }, {
      key: "forcePopupAlign",
      value: function() {
        if (this.state.popupVisible) {
          var s;
          (s = this.popupRef.current) === null || s === void 0 || s.forceAlign();
        }
      }
    }, {
      key: "fireEvents",
      value: function(s, o) {
        var l = this.props.children.props[s];
        l && l(o);
        var c = this.props[s];
        c && c(o);
      }
    }, {
      key: "close",
      value: function() {
        this.setPopupVisible(!1);
      }
    }, {
      key: "render",
      value: function() {
        var s = this.state.popupVisible, o = this.props, l = o.children, c = o.forceRender, f = o.alignPoint, p = o.className, O = o.autoDestroy, d = _e.Children.only(l), g = {
          key: "trigger"
        };
        this.isContextMenuToShow() ? g.onContextMenu = this.onContextMenu : g.onContextMenu = this.createTwoChains("onContextMenu"), this.isClickToHide() || this.isClickToShow() ? (g.onClick = this.onClick, g.onMouseDown = this.onMouseDown, g.onTouchStart = this.onTouchStart) : (g.onClick = this.createTwoChains("onClick"), g.onMouseDown = this.createTwoChains("onMouseDown"), g.onTouchStart = this.createTwoChains("onTouchStart")), this.isMouseEnterToShow() ? (g.onMouseEnter = this.onMouseEnter, f && (g.onMouseMove = this.onMouseMove)) : g.onMouseEnter = this.createTwoChains("onMouseEnter"), this.isMouseLeaveToHide() ? g.onMouseLeave = this.onMouseLeave : g.onMouseLeave = this.createTwoChains("onMouseLeave"), this.isFocusToShow() || this.isBlurToHide() ? (g.onFocus = this.onFocus, g.onBlur = this.onBlur) : (g.onFocus = this.createTwoChains("onFocus"), g.onBlur = this.createTwoChains("onBlur"));
        var L = da(d && d.props && d.props.className, p);
        L && (g.className = L);
        var D = Ue({}, g);
        Wd(d) && (D.ref = ev(this.triggerRef, d.ref));
        var W = /* @__PURE__ */ _e.cloneElement(d, D), x;
        return (s || this.popupRef.current || c) && (x = /* @__PURE__ */ $e(e, {
          getContainer: this.getContainer,
          didUpdate: this.handlePortalUpdate,
          children: this.getComponent()
        }, "portal")), !s && O && (x = null), /* @__PURE__ */ pi(Kh.Provider, {
          value: this.triggerContextValue,
          children: [W, x]
        });
      }
    }], [{
      key: "getDerivedStateFromProps",
      value: function(s, o) {
        var l = s.popupVisible, c = {};
        return l !== void 0 && o.popupVisible !== l && (c.popupVisible = l, c.prevPopupVisible = o.popupVisible), c;
      }
    }]), n;
  }(_e.Component);
  return me(t, "contextType", Kh), me(t, "defaultProps", {
    prefixCls: "rc-trigger-popup",
    getPopupClassNameFromAlign: mC,
    getDocument: RC,
    onPopupVisibleChange: qo,
    afterPopupVisibleChange: qo,
    onPopupAlign: qo,
    popupClassName: "",
    mouseEnterDelay: 0,
    mouseLeaveDelay: 0.1,
    focusDelay: 0,
    blurDelay: 0.15,
    popupStyle: {},
    destroyPopupOnHide: !1,
    popupAlign: {},
    defaultPopupVisible: !1,
    mask: !1,
    maskClosable: !0,
    action: [],
    showAction: [],
    hideAction: [],
    autoDestroy: !1
  }), t;
}
const yC = gC(tv), IC = lr.div`
  max-width: 60vw;
  max-height: 70vh;
  position: fixed;
  z-index: ${Fn.codeEditorPanel};
  top: 35%;
  left: 50%;
  border-radius: 8px;
  background: #ffffff;
  box-shadow: 0 0 10px 0 rgba(0, 0, 0, 0.1);
`, NC = lr.div`
  height: 40px;
  cursor: move;
  padding: 0 16px;
  display: flex;
  justify-content: space-between;
  align-items: center;
  border-bottom: 1px solid #e1e3eb;
`, PC = lr.div`
  display: flex;
  align-items: center;
  font-weight: 500;
  font-size: 16px;
  line-height: 16px;
  color: #222222;
  //margin-bottom: 16px;
`, _C = lr(oS)`
  margin-right: 8px;
`, bC = lr.div`
  height: calc(100% - 40px);
`, vC = lr.div`
  position: absolute;
  height: 16px;
  width: 16px;
  border: 1px solid #d7d9e0;
  border-radius: 4px;
  z-index: 1;
  bottom: 8px;
  right: 8px;
  cursor: pointer;
  display: none;
  background-color: #ffffff;

  svg {
    height: 100%;
    display: block;
    margin: auto;
  }

  &:hover {
    svg g g {
      stroke: #222222;
    }
  }
`, CC = lr.div`
    display: flex;
    justify-content: space-between;
    align-items: center;
`, LC = lr.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  width: 60px;
  height: 26px;
  background: #ffffff;
  border: 1px solid #d7d9e0;
  border-radius: 4px;

  font-size: 13px;
  color: #333333;
  padding: 6px 8px 5px;
  //margin-bottom: auto;
  cursor: pointer;

  &:hover {
    background: #f5f5f6;

    svg g g {
      stroke: #222222;
    }
  }
`, xC = lr.div`
    width: 32px;
    height: 26px;
    border: 1px solid #d7d9e0;
    border-radius: 4px;
    color: #333333;
    padding: 2px ;
    cursor: pointer;

    &:hover {
        background: #f5f5f6;

        svg g g {
            stroke: #222222;
        }
    }

    // fixes the icon when there's no text in the container
    svg {
        width: 100%;
        height: 100%;
        fill: currentColor; 
    }
`, DC = (e) => {
  const t = pt(null), [r, i] = br(!0), [n, a] = br(!1), [s, o] = br({
    left: 0,
    top: 0,
    bottom: 0,
    right: 0
  }), l = Lt(() => qT(), [e.editor]), [c, f] = br({
    w: l.codeEditor.w,
    h: l.codeEditor.h
  }), [p, O] = br(!1), d = Jo(JT);
  return /* @__PURE__ */ $e(yC, {
    popupVisible: p,
    action: ["click"],
    zIndex: Fn.codeEditorPanel,
    popupStyle: {
      opacity: 1,
      display: p ? "block" : "none"
    },
    maskClosable: !n,
    mask: !0,
    onPopupVisibleChange: (g) => O(g),
    afterPopupVisibleChange: (g) => e.onVisibleChange(g),
    getPopupContainer: (g) => g.parentNode.parentNode,
    popup: () => /* @__PURE__ */ $e(KT, {
      positionOffset: {
        x: "-50%",
        y: "-50%"
      },
      disabled: r,
      bounds: s,
      onStart: (g, L) => {
        var V;
        const {
          clientWidth: D,
          clientHeight: W
        } = window.document.documentElement, x = (V = t.current) == null ? void 0 : V.getBoundingClientRect();
        x && o({
          left: -x.left + L.x,
          right: D - (x.right - L.x),
          top: -x.top + L.y,
          bottom: W - (x.bottom - L.y)
        });
      },
      children: /* @__PURE__ */ $e(eS, {
        width: c.w,
        height: c.h,
        onResize: (g, {
          size: L
        }) => f({
          w: L.width,
          h: L.height
        }),
        onResizeStop: () => tS({
          ...l,
          codeEditor: {
            w: c.w,
            h: c.h
          }
        }),
        handle: rS,
        resizeHandles: ["s", "n", "w", "e", "sw", "nw", "se", "ne"],
        minConstraints: [480, 360],
        children: /* @__PURE__ */ pi(IC, {
          ref: t,
          style: {
            width: c.w + "px",
            height: c.h + "px"
          },
          children: [/* @__PURE__ */ pi(NC, {
            onMouseOver: () => i(!1),
            onMouseOut: () => i(!0),
            children: [/* @__PURE__ */ pi(PC, {
              children: [/* @__PURE__ */ $e(_C, {}), [d, ...e.breadcrumb ?? []].filter((g) => !np.isEmpty(g)).join(" / ")]
            }), /* @__PURE__ */ pi(CC, {
              children: [/* @__PURE__ */ $e(xC, {
                onClick: () => a(!n),
                children: n ? /* @__PURE__ */ $e(iS, {}) : /* @__PURE__ */ $e(nS, {})
              }), /* @__PURE__ */ pi(LC, {
                onClick: () => O(!1),
                children: [/* @__PURE__ */ $e(aS, {}), ip("codeEditor.fold")]
              })]
            })]
          }), /* @__PURE__ */ $e(bC, {
            children: e.editor
          })]
        })
      })
    }),
    children: /* @__PURE__ */ $e(vC, {
      className: "code-editor-panel-open-button",
      onClick: () => O(!0),
      children: /* @__PURE__ */ $e(sS, {})
    })
  });
}, UC = {
  medium: {
    minHeight: "90px",
    maxHeight: "440px",
    showLineNum: !0
  },
  higher: {
    minHeight: "auto",
    maxHeight: "256px"
  },
  window: {
    minHeight: "320px",
    maxHeight: "320px",
    showLineNum: !0
  }
}, Vn = gu`
  word-wrap: break-word;
  word-break: break-all;
  white-space: pre-wrap;
  font-size: 13px;
  line-height: 13px;
`, Dc = lr.div`
  // tooltip common
  .cm-tooltip {
    border: 1px solid #d7d9e0;
    padding: 5px !important;
    margin-top: 5px !important;
    height: 120px;
  }
  // make sure antd popover in the code editor available
  .ant-popover {
    z-index: ${Fn.codeEditorTooltip};
  }

  // lint tooltip style
  .cm-tooltip .cm-tooltip-lint {
    background-color: #2c2c2c;
    border-radius: 4px;
    box-shadow: 0 3px 6px -4px rgb(0 0 0 / 12%), 0 6px 16px 0 rgb(0 0 0 / 8%),
      0 9px 28px 8px rgb(0 0 0 / 5%);
    color: #ffffff;
    padding: 3px 0px;
  }
  .cm-tooltip .cm-diagnostic {
    padding: 3px 8px;
  }
  .cm-tooltip .cm-diagnostic-error {
    border: none;
  }

  // auto-completion tooltip
  // main tooltip
  .cm-tooltip.cm-tooltip-autocomplete {
    min-width: 280px;
    padding: 16px 4px 16px 8px;
    background-color: #ffffff;
    border-radius: 8px;
    box-shadow: 0 0 10px 0 rgba(0, 0, 0, 0.1);
    transform: translate(-16px, 10px);
    z-index: ${Fn.codeEditorTooltip};
  }

  // left minor tooltip
  .cm-tooltip > .cm-completionInfo {
    top: 0 !important;
    right: calc(100% + 4px);
    background-color: #ffffff;
    border-radius: 8px;
    box-shadow: 0 0 10px 0 rgba(0, 0, 0, 0.1);
    border: none;
    padding: 16px;
  }

  // the right tooltip's gap with the main tooltip
  .cm-completionInfo.cm-completionInfo-right {
    left: calc(100% + 4px);
  }

  .cm-tooltip > .cm-completionInfo .hintDiv {
    display: inline-flex;
    align-items: baseline;
    cursor: pointer;
    color: #4965f2;
    ${Vn};
    font-weight: 600;
    z-index: ${Fn.codeEditorTooltip};
  }

  .cm-tooltip > .cm-completionInfo .hintDiv:hover {
    color: #3377ff;
  }

  .cm-tooltip > .cm-completionInfo .hintDiv:hover .hintSvg g {
    stroke: #3377ff;
  }

  .cm-tooltip > .cm-completionInfo .hintName {
    display: inline-block;
    margin-bottom: 4px;
  }

  .cm-tooltip > .cm-completionInfo .hintType {
    color: #8b8fa3;
    display: block;
    margin: 8px 0;
    ${Vn};
  }

  .cm-tooltip > .cm-completionInfo .hintDoc {
    color: #333333;
    ${Vn};
  }

  .cm-tooltip > .cm-completionInfo .hintSvg {
    transform: translateY(3px);
    cursor: pointer;
  }

  // set the min-width of the dropdown
  .cm-tooltip.cm-tooltip-autocomplete > ul {
    min-width: 200px;
    scrollbar-gutter: stable;
    font-family: RobotoMono;
  }

  // each li style
  .cm-tooltip.cm-tooltip-autocomplete > ul > li {
    ${Vn};
    color: #333333;
    padding: 6px 0;
    display: flex;
    align-items: center;
  }

  // hover in each line
  .cm-tooltip.cm-tooltip-autocomplete > ul > li:hover {
    background-color: rgba(242, 247, 252, 0.7);
    border-radius: 4px;
  }

  // textStyle in each line
  .cm-tooltip.cm-tooltip-autocomplete > ul > li > span:last-child {
    margin-left: auto;
    font-style: normal;
    color: #8b8fa3;
    padding-right: 8px;
    padding-left: 6px;
    ${Vn};
  }

  // selected line
  .cm-tooltip.cm-tooltip-autocomplete > ul > li[aria-selected] {
    background-color: #f2f7fc;
    border-radius: 4px;
    font-weight: 600;
  }

  // scrollbar
  .cm-tooltip.cm-tooltip-autocomplete > ul::-webkit-scrollbar {
    width: 4px;
  }

  .cm-tooltip.cm-tooltip-autocomplete > ul::-webkit-scrollbar-thumb {
    background-clip: content-box;
    border-radius: 9999px;
    background-color: rgba(139, 143, 163, 0.12);
    height: 50px;
    min-height: 50px;
    max-height: 50px;
  }

  .cm-tooltip.cm-tooltip-autocomplete > ul::-webkit-scrollbar-thumb:hover {
    background-color: rgba(139, 143, 163, 0.36);
  }
`;
function Yn(e) {
  return e ? UC[e] : {
    minHeight: "auto",
    maxHeight: "180px"
  };
}
function wC(e, t) {
  const {
    value: r,
    onChange: i
  } = e, n = pt(), a = pt(0), s = e.showLineNum ?? Yn(e.styleName).showLineNum, o = ep(np.debounce((p) => {
    window.clearTimeout(a.current), a.current = window.setTimeout(() => a.current = 0, 100), i == null || i(p);
  }, 1e3), [i]), {
    extensions: l,
    reconfigure: c,
    isFocus: f
  } = Jb({
    ...e,
    showLineNum: s,
    onChange: o,
    tooltipContainer: t.current
  });
  return Xt(() => c(n.current), [c]), Xt(() => {
    const p = n.current;
    if (!p || !a.current && r !== p.state.doc.toString()) {
      const O = Qi.create({
        doc: r,
        extensions: l
      });
      p ? p.setState(O) : n.current = new we({
        state: O,
        parent: t.current
      });
    }
  }, [t, r, l]), uS(n.current, r, e.codeType, e.exposingData), Xt(() => () => {
    var p;
    (p = n.current) == null || p.destroy();
  }, []), {
    view: n.current,
    isFocus: f
  };
}
function ET(e) {
  if (e)
    return gu`
      .cm-click-comp-name:hover {
        cursor: pointer;
        text-decoration: underline;
      }
    `;
}
const MC = lr.div`
  height: 100%;
  max-height: 100%;
  min-height: 100%;
  overflow: auto;
  border-bottom-right-radius: 8px;
  border-bottom-left-radius: 8px;
  ::-webkit-scrollbar {
    width: 16px;
  }

  ::-webkit-scrollbar-thumb {
    border: 5px solid transparent;
    background-clip: content-box;
    border-radius: 9999px;
    background-color: rgba(139, 143, 163, 0.2);
    min-height: 30px;
  }

  ::-webkit-scrollbar-thumb:hover {
    background-color: rgba(139, 143, 163, 0.5);
  }

  .cm-content {
    padding-top: 12px;
    padding-bottom: 0;
    height: auto;
  }

  .cm-gutters {
    border-top-left-radius: 0;
    height: auto;
  }

  .cm-editor,
  .cm-scroller {
    border-bottom-left-radius: 8px;
    border-bottom-right-radius: 8px;
  }

  .cm-scroller {
    align-items: stretch !important;
    flex-grow: 1;
  }

  .cm-editor {
    min-height: 100%;
    height: fit-content;
  }

  .cm-line {
    padding-right: 16px;
  }

  ${(e) => ET(e.$enableClickCompName)}
`, kC = lr.div`
  height: 100%;
`;
function QC(e) {
  return !e.disableCard && (e.codeType !== "Function" || e.hasError);
}
function dT(e) {
  var c, f;
  const {
    editor: t,
    children: r,
    disabled: i,
    cardStyle: n,
    onClick: a,
    ...s
  } = e, {
    view: o,
    isFocus: l
  } = wC(s, t);
  return /* @__PURE__ */ pi(kC, {
    onClick: a ? (p) => o && a(p, o) : void 0,
    children: [!i && o && ((c = e.widgetPopup) == null ? void 0 : c.call(e, o)), r, /* @__PURE__ */ $e(lS, {
      cardStyle: n,
      editorFocus: !i && l && QC(e),
      title: e.cardTitle,
      content: e.cardContent,
      richContent: (f = e.cardRichContent) == null ? void 0 : f.call(e, e.cardContent ?? ""),
      tips: e.cardTips,
      hasError: e.hasError
    })]
  });
}
function GC(e) {
  const t = pt();
  return /* @__PURE__ */ $e(dT, {
    ...e,
    editor: t,
    cardStyle: {
      borderRadius: "8px"
    },
    children: /* @__PURE__ */ $e(MC, {
      $styleName: e.styleName,
      ref: t,
      $enableClickCompName: e.enableClickCompName
    })
  });
}
function VC(e) {
  const t = pt(), {
    expandable: r = !0,
    ...i
  } = e, [n, a] = br(!1);
  return /* @__PURE__ */ $e(Dc, {
    children: /* @__PURE__ */ $e(dT, {
      ...i,
      editor: t,
      disabled: n,
      children: /* @__PURE__ */ $e(BC, {
        $styleName: e.styleName,
        $bordered: e.bordered,
        disabled: n,
        $error: e.hasError,
        ref: t,
        $enableClickCompName: e.enableClickCompName,
        children: r && /* @__PURE__ */ $e(DC, {
          breadcrumb: [e.label ?? ""],
          editor: /* @__PURE__ */ $e(GC, {
            ...e,
            styleName: "window",
            showLineNum: !0
          }),
          onVisibleChange: (s) => a(s)
        })
      })
    })
  });
}
const BC = lr.div`
  position: relative;
  height: 100%;

  &:hover {
    .code-editor-panel-open-button {
      display: block;
    }
  }

  .cm-editor:hover {
    border: 1px solid ${(e) => e.$error ? "#f73131" : "#8B8FA3"};
  }

  .cm-editor.cm-focused {
    border: 1px solid ${(e) => e.$error ? "#f73131" : "#3377ff"};
    box-shadow: 0 0 0 2px ${(e) => e.$error ? "#feeaea" : "#d6e4ff"};
  }

  .cm-editor {
    border: 1px solid ${(e) => e.$error ? "#f73131" : "#d7d9e0"};
    border-radius: ${(e) => e.$bordered ? "4px" : ""};
  }

  .cm-line {
    padding-right: 8px;
  }

  .cm-editor {
    min-height: ${(e) => Yn(e.$styleName).minHeight};
  }
  .cm-content,
  .cm-gutter {
    min-height: ${(e) => Yn(e.$styleName).minHeight};
    min-height: calc(${(e) => Yn(e.$styleName).minHeight} - 2px);
  }

  .cm-editor {
    overflow: hidden;
    max-height: ${(e) => Yn(e.$styleName).maxHeight};
  }

  ${(e) => {
  if (e.disabled)
    return gu`
        pointer-events: none;

        .cm-editor {
          background-color: #f5f5f6;
          color: #b8b9bf;
        }
      `;
}}
  ${(e) => ET(e.$enableClickCompName)}
`, zC = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  CodeEditor: VC,
  CodeEditorTooltipContainer: Dc
}, Symbol.toStringTag, { value: "Module" }));
export {
  zC as c,
  Jb as u
};
