import { X as r, dy as l, F as t, dB as i, gy as u, G as s, Y as m, S as d } from "./c988e26e.js";
import { C as p } from "./5230605f.js";
import { ColumnValueTooltip as c } from "./0417d842.js";
import "react";
import "react-dom";
import "./be799735.js";
import "./975a080d.js";
const h = r.div`
  ${l};
  max-height: 32px;

  > .markdown-body {
    margin: 0;
    p {
      line-height: 21px;
    }
  }
`, g = {
  text: d
}, o = (e) => e.text, f = function() {
  return new p(g, (e, a) => {
    const n = e.changeValue ?? o(e);
    return /* @__PURE__ */ t(h, {
      children: /* @__PURE__ */ t(i, {
        children: n
      })
    });
  }, (e) => e.text.value, o).setEditViewFn((e) => /* @__PURE__ */ t(u, {
    defaultValue: e.value,
    autoFocus: !0,
    variant: "borderless",
    onChange: (a) => {
      const n = a.target.value;
      e.onChange(n);
    },
    onBlur: e.onChangeEnd,
    onPressEnter: e.onChangeEnd
  })).setPropertyViewFn((e) => /* @__PURE__ */ t(s, {
    children: e.text.propertyView({
      label: m("table.columnValue"),
      tooltip: c
    })
  })).build();
}();
export {
  f as ColumnMarkdownComp
};
