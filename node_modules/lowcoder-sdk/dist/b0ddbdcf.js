import { j as B } from "./f915fcd2.js";
import { X as g, fw as G, av as L, fx as A, Y as t, a8 as d, G as y, F as i, a9 as n, bO as H, fy as N, aa as S, ab as $, bK as W, fz as j, fA as J, fB as X, bP as T, fC as Y, fD as q, dr as Q, fE as U, fF as Z, fG as _, fH as K, d6 as P, fI as ee, eB as te, fJ as ie, e5 as I, cC as E, fK as le } from "./c988e26e.js";
import { useState as x, useMemo as re } from "react";
import { getSelectedRowKeys as oe } from "./6a2c46a1.js";
import { ColumnTypeCompMap as ne } from "./22fa10de.js";
import "./765a8ca5.js";
import "./0417d842.js";
import "./5230605f.js";
import "./be799735.js";
import "./975a080d.js";
import "react-dom";
import "./3e9c3444.js";
import "./464239f7.js";
import "./608865ad.js";
import "./8c51b61b.js";
import "./82a4bca8.js";
import "./71bdd49a.js";
import "./2088ebd5.js";
import "./d3b0afba.js";
import "./85e61f03.js";
import "./36c2248f.js";
import "./70f9cad3.js";
import "./80c67fbe.js";
import "./094988fd.js";
import "./734fbd0f.js";
import "./80229ccd.js";
import "./16b77c22.js";
import "./b25be8d9.js";
import "./0c3664e6.js";
import "./c504e788.js";
import "./ad2208e2.js";
import "./e5bcb9b0.js";
import "./51dea655.js";
import "./fcc9e192.js";
import "./325a473d.js";
import "./33706f61.js";
import "./765e17fb.js";
import "./98885dce.js";
import "./9ee13d0e.js";
import "./9f467dd0.js";
const ae = g.div`
  display: flex;
  justify-content: end;
  width: 100%;
  gap: 8px;
  align-items: center;
`, de = g.span`
  ${G};
  color: #8b8fa3;
`, se = g(j)`
  width: 16px;
  height: 16px;
  cursor: pointer;

  &:hover {
    g g {
      stroke: #4965f2;
    }
  }
`, M = L`
  height: 16px;
  width: 16px;
  display: inline-block;

  &:hover {
    cursor: pointer;
  }

  &:hover path {
    fill: #315efb;
  }
`, ce = g(J)`
  ${M}
`, he = g(X)`
  ${M}
`, pe = g(T)`
  width: 100px;

  &,
  > div {
    height: 22px;
  }

  .ant-segmented-item-label {
    height: 18px;
    min-height: 18px;
    line-height: 18px;
    padding: 0;
  }
`, ue = g.div`
  display: flex;
  align-items: center;
  color: ${A}
  line-height: 16px;
  font-size: 13px;
`, me = [{
  label: "Row 1",
  value: 0
}, {
  label: "Row 2",
  value: 1
}, {
  label: "Row 3",
  value: 2
}], be = [{
  label: "Normal",
  value: "normal"
}, {
  label: "Summary",
  value: "summary"
}], we = [{
  label: t("table.allColumn"),
  value: "all"
}, {
  label: t("table.visibleColumn"),
  value: "visible"
}], ye = [{
  label: t("prop.hide"),
  value: "hide"
}, {
  label: t("table.editable"),
  value: "editable"
}, {
  label: t("table.autoWidth"),
  value: "autoWidth"
}, {
  label: t("table.sortable"),
  value: "sortable"
}, {
  label: t("table.align"),
  value: "align"
}];
function ge(e) {
  const {
    hide: l,
    setHide: h
  } = e;
  return /* @__PURE__ */ i(l ? ce : he, {
    onClick: (a) => {
      h(!l);
    }
  });
}
function R(e, l) {
  const h = (a) => e === "autoWidth" ? a.children.autoWidth.getView() === "auto" : a.children[e].getView(), p = l ?? ((a) => a);
  return (a) => {
    const r = Array.isArray(a), f = r ? a : [a], u = f.map((c) => {
      if (e !== "editable")
        return !1;
      const w = c.children.render.getOriginalComp().children.comp.children.compType.getView();
      return !ne[w].canBeEditable();
    });
    let m = !0, b = !0;
    f.forEach((c, w) => {
      if (u[w]) {
        r || (m = !1);
        return;
      }
      h(c) ? b = !1 : m = !1;
    });
    const V = (c) => {
      f.forEach((w, C) => !u[C] && w.children[e].dispatch(I(E(p(c), !0))));
    };
    return e === "hide" ? /* @__PURE__ */ i(ge, {
      hide: m,
      setHide: (c) => V(c)
    }) : /* @__PURE__ */ i(le, {
      indeterminate: !m && !b,
      disabled: !r && u[0],
      checked: m,
      onChange: (c) => {
        V(c.target.checked);
      }
    });
  };
}
const k = {
  hide: R("hide"),
  editable: R("editable"),
  sortable: R("sortable"),
  autoWidth: R("autoWidth", (e) => e ? "auto" : "fixed"),
  align: (e) => {
    const l = Array.isArray(e) ? e : [e], h = Array.isArray(e) ? void 0 : e.children.align.getView();
    return /* @__PURE__ */ i(pe, {
      options: ie,
      value: h,
      radioButton: !0,
      onChange: (p) => {
        l.forEach((a) => a.children.align.dispatch(I(E(p, !0))));
      }
    });
  }
};
function fe(e) {
  const [l, h] = x("normal"), [p, a] = x(0), {
    comp: r
  } = e, f = oe(r.children.selection)[0] ?? "0", [u, m] = x("all"), b = r.children.columns.getView(), V = r.children.dataRowExample.getView(), c = r.children.dynamicColumn.getView(), w = r.children.data.getView(), [C, z] = x("hide"), O = re(() => b.filter((o) => u === "all" || !o.children.hide.getView()), [u, b]), D = parseInt(r.children.summaryRows.getView()), F = /* @__PURE__ */ d(ae, {
    children: [/* @__PURE__ */ d("div", {
      style: {
        display: "flex",
        alignItems: "center",
        marginRight: "auto"
      },
      children: [/* @__PURE__ */ i(Y, {
        label: e.columnLabel
      }), /* @__PURE__ */ i(de, {
        children: " (" + b.length + ")"
      })]
    }), V && /* @__PURE__ */ i(q, {
      title: t("table.refreshButtonTooltip"),
      children: /* @__PURE__ */ i(se, {
        onClick: () => {
          r.dispatch(Q("columns", r.children.columns.dataChangedAction({
            rowExample: V,
            doGeneColumn: !0,
            dynamicColumn: c,
            data: w
          })));
        }
      })
    }), /* @__PURE__ */ i(U, {
      icon: /* @__PURE__ */ i(Z, {}),
      text: t("addItem"),
      onClick: () => {
        r.children.columns.dispatch(r.children.columns.pushAction(B()));
      }
    })]
  });
  return /* @__PURE__ */ i(y, {
    children: /* @__PURE__ */ i(_, {
      headerItem: /* @__PURE__ */ i(K, {
        title: /* @__PURE__ */ i(T, {
          border: !0,
          style: {
            width: "auto",
            marginLeft: "8px"
          },
          value: u,
          options: we,
          label: "",
          onChange: (o) => {
            m(o);
          }
        }),
        config: {
          dataIndex: "header"
        },
        draggable: !1,
        optionExtra: /* @__PURE__ */ d(ue, {
          children: [/* @__PURE__ */ i(T, {
            border: !0,
            style: {
              width: "auto"
            },
            value: C,
            options: ye,
            label: "",
            onChange: (o) => {
              z(o);
            }
          }), k[C](b)]
        })
      }),
      itemExtra: (o) => /* @__PURE__ */ i("div", {
        style: {
          display: "flex",
          alignItems: "center",
          height: "100%"
        },
        onClick: (s) => s.stopPropagation(),
        children: k[C](o)
      }),
      items: O,
      optionToolbar: F,
      itemTitle: (o) => {
        const s = o.getView();
        return s.hide ? /* @__PURE__ */ i("span", {
          style: {
            color: A
          },
          children: s.title
        }) : s.title;
      },
      popoverTitle: (o) => {
        const s = o.getView();
        return s.isCustom ? t("table.customColumn") : s.dataIndex;
      },
      content: (o, s) => /* @__PURE__ */ d(y, {
        children: [/* @__PURE__ */ i(P, {
          block: !0,
          options: be,
          value: l,
          onChange: (v) => h(v)
        }), l === "summary" && /* @__PURE__ */ i(P, {
          block: !0,
          options: me.slice(0, D),
          value: p,
          onChange: (v) => a(v)
        }), o.propertyView(f, l, p), o.getView().isCustom && /* @__PURE__ */ i(ee, {
          onClick: () => {
            te.confirm({
              title: t("table.deleteColumn"),
              content: t("table.confirmDeleteColumn") + `${o.getView().title}?`,
              onConfirm: () => r.children.columns.dispatch(r.children.columns.deleteAction(s)),
              confirmBtnType: "delete",
              okText: t("delete")
            });
          },
          children: t("delete")
        })]
      }),
      onAdd: () => {
        r.children.columns.dispatch(r.children.columns.pushAction(B()));
      },
      onMove: (o, s) => {
        const v = r.children.columns.arrayMoveAction(o, s);
        r.children.columns.dispatch(v);
      },
      dataIndex: (o) => o.getView().dataIndex,
      scrollable: !0
    })
  });
}
function Ve(e) {
  const l = t("table.columnNum");
  return [
    H({
      filterText: l
    }, /* @__PURE__ */ i(fe, {
      comp: e,
      columnLabel: l
    }))
    /* comp.children.dynamicColumn.propertyView({ label: trans("table.dynamicColumn") }),
    dynamicColumn &&
      comp.children.dynamicColumnConfig.propertyView({
        label: trans("table.dynamicColumnConfig"),
        tooltip: trans("table.dynamicColumnConfigDesc"),
      }), */
  ];
}
function at(e) {
  const l = e.editorModeStatus, h = t("data");
  return /* @__PURE__ */ d(y, {
    children: [["logic", "both"].includes(l) && /* @__PURE__ */ i(n, {
      name: t("table.dataDesc"),
      children: H({
        filterText: h
      }, /* @__PURE__ */ i("div", {
        className: N,
        children: e.children.data.propertyView({
          label: h
        })
      }))
    }), ["layout", "both"].includes(l) && /* @__PURE__ */ i(n, {
      name: t("prop.columns"),
      children: Ve(e)
    }), ["logic", "both"].includes(l) && /* @__PURE__ */ d(y, {
      children: [/* @__PURE__ */ d(n, {
        name: S.interaction,
        children: [e.children.onEvent.getPropertyView(), $(e.children), W(e.children), e.children.showDataLoadSpinner.propertyView({
          label: t("table.showDataLoadSpinner")
        }), e.children.selection.getPropertyView(), e.children.editModeClicks.propertyView({
          label: t("table.editMode"),
          radioButton: !0
        }), e.children.searchText.propertyView({
          label: t("table.searchText"),
          tooltip: t("table.searchTextTooltip"),
          placeholder: "{{input1.value}}"
        })]
      }), /* @__PURE__ */ d(n, {
        name: "Summary",
        children: [e.children.showSummary.propertyView({
          label: t("table.showSummary")
        }), e.children.showSummary.getView() && e.children.summaryRows.propertyView({
          label: t("table.totalSummaryRows"),
          radioButton: !0
        })]
      }), /* @__PURE__ */ i(n, {
        name: "Insert Rows",
        children: e.children.inlineAddNewRow.propertyView({
          label: t("table.inlineAddNewRow")
        })
      }), /* @__PURE__ */ i(n, {
        name: t("prop.toolbar"),
        children: e.children.toolbar.getPropertyView()
      })]
    }), ["layout", "both"].includes(l) && /* @__PURE__ */ d(y, {
      children: [/* @__PURE__ */ d(n, {
        name: S.layout,
        children: [e.children.size.propertyView({
          label: t("table.tableSize"),
          radioButton: !0
        }), e.children.autoHeight.getPropertyView(), e.children.showHorizontalScrollbar.propertyView({
          label: t("prop.showHorizontalScrollbar")
        }), !e.children.autoHeight.getView() && e.children.showVerticalScrollbar.propertyView({
          label: t("prop.showVerticalScrollbar")
        }), e.children.fixedHeader.propertyView({
          label: t("table.fixedHeader"),
          tooltip: t("table.fixedHeaderTooltip")
        }), e.children.hideHeader.propertyView({
          label: t("table.hideHeader")
        }), e.children.viewModeResizable.propertyView({
          label: t("table.viewModeResizable"),
          tooltip: t("table.viewModeResizableTooltip")
        }), e.children.visibleResizables.propertyView({
          label: t("table.visibleResizables"),
          tooltip: t("table.visibleResizablesTooltip")
        })]
      }), /* @__PURE__ */ i(n, {
        name: t("prop.pagination"),
        children: e.children.pagination.getPropertyView()
      })]
    }), ["logic", "both"].includes(l) && /* @__PURE__ */ i(y, {
      children: /* @__PURE__ */ d(n, {
        name: S.advanced,
        children: [e.children.expansion.getPropertyView(), e.children.dynamicColumn.propertyView({
          label: t("table.dynamicColumn")
        }), e.children.dynamicColumn.getView() && e.children.dynamicColumnConfig.propertyView({
          label: t("table.dynamicColumnConfig"),
          tooltip: t("table.dynamicColumnConfigDesc")
        })]
      })
    }), ["layout", "both"].includes(l) && /* @__PURE__ */ d(y, {
      children: [/* @__PURE__ */ i(n, {
        name: "Table Style",
        children: e.children.style.getPropertyView()
      }), /* @__PURE__ */ i(n, {
        name: "Header Style",
        children: e.children.headerStyle.getPropertyView()
      }), /* @__PURE__ */ i(n, {
        name: "Toolbar Style",
        children: e.children.toolbarStyle.getPropertyView()
      }), /* @__PURE__ */ d(n, {
        name: "Row Style",
        children: [e.children.showRowGridBorder.propertyView({
          label: t("table.showVerticalRowGridBorder")
        }), e.children.showHRowGridBorder.propertyView({
          label: t("table.showHorizontalRowGridBorder")
        }), e.children.rowStyle.getPropertyView(), e.children.rowAutoHeight.getPropertyView(), e.children.rowHeight.getPropertyView(), e.children.rowColor.getPropertyView()]
      }), /* @__PURE__ */ i(n, {
        name: "Column Style",
        children: e.children.columnsStyle.getPropertyView()
      }), /* @__PURE__ */ i(n, {
        name: "Summary Row Style",
        children: e.children.summaryRowStyle.getPropertyView()
      })]
    })]
  });
}
export {
  at as compTablePropertyView
};
