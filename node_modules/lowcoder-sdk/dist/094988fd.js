import { Y as a, F as o, gx as s, gy as i, a8 as u, G as c, w as r, S as m, a2 as g } from "./c988e26e.js";
import { C } from "./5230605f.js";
import "react";
import "react-dom";
import "./be799735.js";
const p = a("table.columnValueTooltip"), d = {
  src: r(m, "{{currentCell}}"),
  size: r(g, "50")
}, l = (e) => e.src, y = function() {
  return new C(d, (e, n) => {
    const t = e.changeValue ?? l(e);
    return /* @__PURE__ */ o(s, {
      style: {
        pointerEvents: "auto"
      },
      src: t,
      width: e.size
    });
  }, (e) => e.src.value, l).setEditViewFn((e) => /* @__PURE__ */ o(i, {
    defaultValue: e.value,
    autoFocus: !0,
    variant: "borderless",
    onChange: (n) => {
      const t = n.target.value;
      e.onChange(t);
    },
    onBlur: e.onChangeEnd,
    onPressEnter: e.onChangeEnd
  })).setPropertyViewFn((e) => /* @__PURE__ */ u(c, {
    children: [e.src.propertyView({
      label: a("table.imageSrc"),
      tooltip: p
    }), e.size.propertyView({
      label: a("table.imageSize")
    })]
  })).build();
}();
export {
  p as ColumnValueTooltip,
  y as ImageComp
};
