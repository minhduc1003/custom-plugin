import { Y as l, fn as w, au as c, a4 as a, a as s } from "./c988e26e.js";
import { O as u } from "./f915fcd2.js";
import "react";
import "react-dom";
import "./22fa10de.js";
import "./8c51b61b.js";
import "./5230605f.js";
import "./be799735.js";
import "./0417d842.js";
import "./975a080d.js";
import "./82a4bca8.js";
import "./71bdd49a.js";
import "./2088ebd5.js";
import "./d3b0afba.js";
import "./85e61f03.js";
import "./36c2248f.js";
import "./70f9cad3.js";
import "./80c67fbe.js";
import "./094988fd.js";
import "./734fbd0f.js";
import "./80229ccd.js";
import "./16b77c22.js";
import "./b25be8d9.js";
import "./0c3664e6.js";
import "./c504e788.js";
import "./ad2208e2.js";
import "./e5bcb9b0.js";
import "./51dea655.js";
import "./fcc9e192.js";
import "./325a473d.js";
import "./33706f61.js";
import "./765e17fb.js";
import "./98885dce.js";
import "./9ee13d0e.js";
import "./9f467dd0.js";
import "./765a8ca5.js";
import "./3e9c3444.js";
import "./464239f7.js";
import "./608865ad.js";
const y = [{
  label: l("selectionControl.single"),
  value: "single"
}, {
  label: l("selectionControl.multiple"),
  value: "multiple"
}, {
  label: l("selectionControl.close"),
  value: "close"
}];
function i(r) {
  return r[u];
}
function te(r) {
  switch (r.children.mode.getView()) {
    case "single":
      return [r.children.selectedRowKey.getView()];
    case "multiple":
      return r.children.selectedRowKeys.getView();
  }
  return [];
}
const re = function() {
  const r = {
    mode: a(y, "single"),
    selectedRowKey: s("0"),
    selectedRowKeys: s([])
  };
  return new w(r, (e, m) => {
    const n = (t) => {
      i(t) !== e.selectedRowKey && m(c("selectedRowKey", i(t), !1));
    };
    return (t) => {
      if (e.mode === "single" || e.mode === "close")
        return {
          rowKey: i,
          rowClassName: (o, d, C) => e.mode === "close" ? "" : i(o) === e.selectedRowKey ? "ant-table-row-selected" : "",
          onRow: (o, d) => ({
            onClick: () => {
              n(o), t("rowClick"), i(o) !== e.selectedRowKey && t("rowSelectChange");
            }
          })
        };
      const p = {
        type: "checkbox",
        selectedRowKeys: e.selectedRowKeys,
        preserveSelectedRowKeys: !0,
        onChange: (o) => {
          m(c("selectedRowKeys", o, !1)), t("rowSelectChange");
        },
        // click checkbox also trigger row click event
        onSelect: (o) => {
          n(o), t("rowClick");
        }
      };
      return {
        rowKey: i,
        rowSelection: p,
        onRow: (o) => ({
          onClick: () => {
            n(o), t("rowClick");
          }
        })
      };
    };
  }).setPropertyViewFn((e) => e.mode.propertyView({
    label: l("selectionControl.mode"),
    radioButton: !0
  })).build();
}();
export {
  re as SelectionControl,
  te as getSelectedRowKeys
};
