import { ch as h, Y as i, X as b, d8 as y, P as m, a3 as S, bI as w, Z as o, c6 as g, az as C, c7 as p, N as f, bS as v, d9 as k, U as F, F as a, da as P, a8 as s, G as u, a9 as n, aa as l, ah as d, bJ as V, ab as x, cS as E, db as $, cU as M, dc as O, ac as N, ae as I, bL as L, av as R, cX as U } from "./c988e26e.js";
import { useContext as c } from "react";
import { formDataChildren as j, FormDataPropertyView as B } from "./85e61f03.js";
import "react-dom";
const T = [h, {
  label: i("switchComp.open"),
  value: "true",
  description: i("switchComp.openDesc")
}, {
  label: i("switchComp.close"),
  value: "false",
  description: i("switchComp.closeDesc")
}], W = (t) => R`
    .ant-switch-handle::before {
      background: ${t.handle};
    }
    button {
      background-image: none;
      background: ${t.unchecked};
      &.ant-switch-checked {
        background: ${t.checked};
        &:hover:not(.ant-switch-disabled) {
          background: ${U(t.checked, 0.2)}
        }
      }
    }
  `, X = b.div`
  min-height: 32px;
  display: flex;
  align-items: center;
  // Can respond to drag & select events when disabled
  ${(t) => t.disabled && `
    cursor: not-allowed;
    >button:disabled {
      pointer-events: none;
    }
  `};
  ${(t) => t.$style && W(t.$style)}
`;
function z(t) {
  return t && t.hasOwnProperty("unChecked") ? {
    label: t.label,
    handle: t.handle,
    unchecked: t.unChecked,
    checked: t.checked
  } : t;
}
let A = function() {
  const t = {
    value: y("value"),
    label: m,
    onEvent: S(T),
    disabled: w,
    style: o(g, "style"),
    animationStyle: o(C, "animationStyle"),
    labelStyle: o(p.filter((e) => ["accent", "validate"].includes(e.name) === !1), "labelStyle"),
    viewRef: f,
    inputFieldStyle: v(o(k, "inputFieldStyle"), z),
    ...j
  };
  return new F(t, (e) => e.label({
    style: e.style,
    labelStyle: e.labelStyle,
    inputFieldStyle: e.inputFieldStyle,
    animationStyle: e.animationStyle,
    children: /* @__PURE__ */ a(X, {
      disabled: e.disabled,
      $style: e.inputFieldStyle,
      children: /* @__PURE__ */ a(P, {
        checked: e.value.value,
        disabled: e.disabled,
        ref: e.viewRef,
        onChange: (r) => {
          e.value.onChange(r), e.onEvent("change"), e.onEvent(r ? "true" : "false");
        }
      })
    })
  })).setPropertyViewFn((e) => /* @__PURE__ */ s(u, {
    children: [/* @__PURE__ */ a(n, {
      name: l.basic,
      children: e.value.propertyView({
        label: i("switchComp.defaultValue")
      })
    }), /* @__PURE__ */ a(B, {
      ...e
    }), ["logic", "both"].includes(c(d).editorModeStatus) && /* @__PURE__ */ s(n, {
      name: l.interaction,
      children: [e.onEvent.getPropertyView(), V(e), x(e)]
    }), ["layout", "both"].includes(c(d).editorModeStatus) && e.label.getPropertyView(), ["layout", "both"].includes(c(d).editorModeStatus) && /* @__PURE__ */ s(u, {
      children: [/* @__PURE__ */ a(n, {
        name: l.style,
        children: e.style.getPropertyView()
      }), /* @__PURE__ */ a(n, {
        name: l.labelStyle,
        children: e.labelStyle.getPropertyView()
      }), /* @__PURE__ */ a(n, {
        name: l.inputFieldStyle,
        children: e.inputFieldStyle.getPropertyView()
      }), /* @__PURE__ */ a(n, {
        name: l.animationStyle,
        hasTooltip: !0,
        children: e.animationStyle.getPropertyView()
      })]
    })]
  })).setExposeMethodConfigs(E([$, M, O])).build();
}();
const Y = N(A, [new I("value", i("switchComp.valueDesc")), ...L]);
export {
  Y as SwitchComp
};
