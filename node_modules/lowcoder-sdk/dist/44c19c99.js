import { mK as De, mM as xe, mN as M, mO as E, mP as q, mQ as Pe, mR as Ne, mS as Ee, mT as _e, mU as Ie, mV as Oe, mW as Te, X as ze, mX as Ve, O as Me, bI as K, a3 as qe, Z as je, az as Ae, F as c, bW as Re, a8 as V, G as O, a9 as b, aa as D, Y as d, ah as S, bJ as Fe, ab as Le, bK as Be, cg as Xe, ac as Ke, bL as Ge, ae as We, cf as te, bX as re, eL as He, ai as Qe, mY as Ue, mZ as Je, z as Ye, dP as Ze, cG as ke, du as ae, mG as et, hb as tt, _ as ie, e5 as W, dr as rt, m_ as at, m$ as it, n0 as ot, n1 as nt, n2 as st } from "./c988e26e.js";
import _, { useContext as y } from "react";
import { CreateForm as lt } from "./6c369ea4.js";
import { ContainerCompBuilder as ct } from "./63085759.js";
import { TriContainer as dt } from "./44a79fed.js";
import "react-dom";
import "./f52ee168.js";
import "./de2e4e92.js";
import "./bf2ffa97.js";
import "./90e6d3f7.js";
import "./3eacf14a.js";
import "./a353f3e4.js";
import "./a6ed71f1.js";
import "./ef17c1a9.js";
import "./06b2ca8b.js";
var Q = {};
const mt = /* @__PURE__ */ De(xe);
var U = {}, J = {}, Y = {}, de = M.default, ut = E.default;
Object.defineProperty(Y, "__esModule", {
  value: !0
});
Y.default = ft;
var T = ut(_), oe = de(q), pt = de(Pe);
function ft(e) {
  let {
    percent: t,
    prefixCls: r
  } = e;
  const a = `${r}-dot`, i = `${a}-holder`, o = `${i}-hidden`, [n, s] = T.useState(!1);
  (0, pt.default)(() => {
    t !== 0 && s(!0);
  }, [t !== 0]);
  const l = Math.max(Math.min(t, 100), 0), u = 100, h = u / 5, C = u / 2 - h / 2, p = C * 2 * Math.PI, v = (N, I) => /* @__PURE__ */ T.createElement("circle", {
    className: (0, oe.default)(N, `${a}-circle`),
    r: C,
    cx: "50",
    cy: "50",
    strokeWidth: h,
    style: I
  });
  return n ? /* @__PURE__ */ T.createElement("span", {
    className: (0, oe.default)(i, `${a}-progress`, l <= 0 && o)
  }, /* @__PURE__ */ T.createElement("svg", {
    viewBox: `0 0 ${u} ${u}`,
    // biome-ignore lint/a11y/noNoninteractiveElementToInteractiveRole: progressbar could be readonly
    role: "progressbar",
    "aria-valuemin": 0,
    "aria-valuemax": 100,
    "aria-valuenow": l
  }, v(`${a}-circle-bg`), v("", {
    strokeDasharray: `${p * l / 100} ${p * (100 - l) / 100}`,
    strokeDashoffset: `${p / 4}`
  }))) : null;
}
var me = M.default, ht = E.default;
Object.defineProperty(J, "__esModule", {
  value: !0
});
J.default = vt;
var x = ht(_), ne = me(q), yt = me(Y);
function vt(e) {
  const {
    prefixCls: t,
    percent: r = 0
  } = e, a = `${t}-dot`, i = `${a}-holder`, o = `${i}-hidden`;
  return /* @__PURE__ */ x.createElement(x.Fragment, null, /* @__PURE__ */ x.createElement("span", {
    className: (0, ne.default)(i, r > 0 && o)
  }, /* @__PURE__ */ x.createElement("span", {
    className: (0, ne.default)(a, `${t}-dot-spin`)
  }, [1, 2, 3, 4].map((n) => /* @__PURE__ */ x.createElement("i", {
    className: `${t}-dot-item`,
    key: n
  })))), /* @__PURE__ */ x.createElement(yt.default, {
    prefixCls: t,
    percent: r
  }));
}
var ue = M.default, gt = E.default;
Object.defineProperty(U, "__esModule", {
  value: !0
});
U.default = wt;
var se = gt(_), bt = ue(q), St = Ne, Ct = ue(J);
function wt(e) {
  const {
    prefixCls: t,
    indicator: r,
    percent: a
  } = e, i = `${t}-dot`;
  return r && /* @__PURE__ */ se.isValidElement(r) ? (0, St.cloneElement)(r, {
    className: (0, bt.default)(r.props.className, i),
    percent: a
  }) : /* @__PURE__ */ se.createElement(Ct.default, {
    prefixCls: t,
    percent: a
  });
}
var P = {};
Object.defineProperty(P, "__esModule", {
  value: !0
});
P.prepareComponentToken = P.default = void 0;
var pe = Ee, $t = Ie, le = _e;
const Dt = new pe.Keyframes("antSpinMove", {
  to: {
    opacity: 1
  }
}), xt = new pe.Keyframes("antRotate", {
  to: {
    transform: "rotate(405deg)"
  }
}), Pt = (e) => {
  const {
    componentCls: t,
    calc: r
  } = e;
  return {
    [`${t}`]: Object.assign(Object.assign({}, (0, $t.resetComponent)(e)), {
      position: "absolute",
      display: "none",
      color: e.colorPrimary,
      fontSize: 0,
      textAlign: "center",
      verticalAlign: "middle",
      opacity: 0,
      transition: `transform ${e.motionDurationSlow} ${e.motionEaseInOutCirc}`,
      "&-spinning": {
        position: "relative",
        display: "inline-block",
        opacity: 1
      },
      [`${t}-text`]: {
        fontSize: e.fontSize,
        paddingTop: r(r(e.dotSize).sub(e.fontSize)).div(2).add(2).equal()
      },
      "&-fullscreen": {
        position: "fixed",
        width: "100vw",
        height: "100vh",
        backgroundColor: e.colorBgMask,
        zIndex: e.zIndexPopupBase,
        inset: 0,
        display: "flex",
        alignItems: "center",
        flexDirection: "column",
        justifyContent: "center",
        opacity: 0,
        visibility: "hidden",
        transition: `all ${e.motionDurationMid}`,
        "&-show": {
          opacity: 1,
          visibility: "visible"
        },
        [t]: {
          [`${t}-dot-holder`]: {
            color: e.colorWhite
          },
          [`${t}-text`]: {
            color: e.colorTextLightSolid
          }
        }
      },
      "&-nested-loading": {
        position: "relative",
        [`> div > ${t}`]: {
          position: "absolute",
          top: 0,
          insetInlineStart: 0,
          zIndex: 4,
          display: "block",
          width: "100%",
          height: "100%",
          maxHeight: e.contentHeight,
          [`${t}-dot`]: {
            position: "absolute",
            top: "50%",
            insetInlineStart: "50%",
            margin: r(e.dotSize).mul(-1).div(2).equal()
          },
          [`${t}-text`]: {
            position: "absolute",
            top: "50%",
            width: "100%",
            textShadow: `0 1px 2px ${e.colorBgContainer}`
            // FIXME: shadow
          },
          [`&${t}-show-text ${t}-dot`]: {
            marginTop: r(e.dotSize).div(2).mul(-1).sub(10).equal()
          },
          "&-sm": {
            [`${t}-dot`]: {
              margin: r(e.dotSizeSM).mul(-1).div(2).equal()
            },
            [`${t}-text`]: {
              paddingTop: r(r(e.dotSizeSM).sub(e.fontSize)).div(2).add(2).equal()
            },
            [`&${t}-show-text ${t}-dot`]: {
              marginTop: r(e.dotSizeSM).div(2).mul(-1).sub(10).equal()
            }
          },
          "&-lg": {
            [`${t}-dot`]: {
              margin: r(e.dotSizeLG).mul(-1).div(2).equal()
            },
            [`${t}-text`]: {
              paddingTop: r(r(e.dotSizeLG).sub(e.fontSize)).div(2).add(2).equal()
            },
            [`&${t}-show-text ${t}-dot`]: {
              marginTop: r(e.dotSizeLG).div(2).mul(-1).sub(10).equal()
            }
          }
        },
        [`${t}-container`]: {
          position: "relative",
          transition: `opacity ${e.motionDurationSlow}`,
          "&::after": {
            position: "absolute",
            top: 0,
            insetInlineEnd: 0,
            bottom: 0,
            insetInlineStart: 0,
            zIndex: 10,
            width: "100%",
            height: "100%",
            background: e.colorBgContainer,
            opacity: 0,
            transition: `all ${e.motionDurationSlow}`,
            content: '""',
            pointerEvents: "none"
          }
        },
        [`${t}-blur`]: {
          clear: "both",
          opacity: 0.5,
          userSelect: "none",
          pointerEvents: "none",
          "&::after": {
            opacity: 0.4,
            pointerEvents: "auto"
          }
        }
      },
      // tip
      // ------------------------------
      "&-tip": {
        color: e.spinDotDefault
      },
      // holder
      // ------------------------------
      [`${t}-dot-holder`]: {
        width: "1em",
        height: "1em",
        fontSize: e.dotSize,
        display: "inline-block",
        transition: `transform ${e.motionDurationSlow} ease, opacity ${e.motionDurationSlow} ease`,
        transformOrigin: "50% 50%",
        lineHeight: 1,
        color: e.colorPrimary,
        "&-hidden": {
          transform: "scale(0.3)",
          opacity: 0
        }
      },
      // progress
      // ------------------------------
      [`${t}-dot-progress`]: {
        position: "absolute",
        top: "50%",
        transform: "translateY(-50%)",
        insetInlineStart: 0
      },
      // dots
      // ------------------------------
      [`${t}-dot`]: {
        position: "relative",
        display: "inline-block",
        fontSize: e.dotSize,
        width: "1em",
        height: "1em",
        "&-item": {
          position: "absolute",
          display: "block",
          width: r(e.dotSize).sub(r(e.marginXXS).div(2)).div(2).equal(),
          height: r(e.dotSize).sub(r(e.marginXXS).div(2)).div(2).equal(),
          background: "currentColor",
          borderRadius: "100%",
          transform: "scale(0.75)",
          transformOrigin: "50% 50%",
          opacity: 0.3,
          animationName: Dt,
          animationDuration: "1s",
          animationIterationCount: "infinite",
          animationTimingFunction: "linear",
          animationDirection: "alternate",
          "&:nth-child(1)": {
            top: 0,
            insetInlineStart: 0,
            animationDelay: "0s"
          },
          "&:nth-child(2)": {
            top: 0,
            insetInlineEnd: 0,
            animationDelay: "0.4s"
          },
          "&:nth-child(3)": {
            insetInlineEnd: 0,
            bottom: 0,
            animationDelay: "0.8s"
          },
          "&:nth-child(4)": {
            bottom: 0,
            insetInlineStart: 0,
            animationDelay: "1.2s"
          }
        },
        "&-spin": {
          transform: "rotate(45deg)",
          animationName: xt,
          animationDuration: "1.2s",
          animationIterationCount: "infinite",
          animationTimingFunction: "linear"
        },
        "&-circle": {
          strokeLinecap: "round",
          transition: ["stroke-dashoffset", "stroke-dasharray", "stroke", "stroke-width", "opacity"].map((a) => `${a} ${e.motionDurationSlow} ease`).join(","),
          fillOpacity: 0,
          stroke: "currentcolor"
        },
        "&-circle-bg": {
          stroke: e.colorFillSecondary
        }
      },
      // small
      [`&-sm ${t}-dot`]: {
        "&, &-holder": {
          fontSize: e.dotSizeSM
        }
      },
      [`&-sm ${t}-dot-holder`]: {
        i: {
          width: r(r(e.dotSizeSM).sub(r(e.marginXXS).div(2))).div(2).equal(),
          height: r(r(e.dotSizeSM).sub(r(e.marginXXS).div(2))).div(2).equal()
        }
      },
      // large
      [`&-lg ${t}-dot`]: {
        "&, &-holder": {
          fontSize: e.dotSizeLG
        }
      },
      [`&-lg ${t}-dot-holder`]: {
        i: {
          width: r(r(e.dotSizeLG).sub(e.marginXXS)).div(2).equal(),
          height: r(r(e.dotSizeLG).sub(e.marginXXS)).div(2).equal()
        }
      },
      [`&${t}-show-text ${t}-text`]: {
        display: "block"
      }
    })
  };
}, fe = (e) => {
  const {
    controlHeightLG: t,
    controlHeight: r
  } = e;
  return {
    contentHeight: 400,
    dotSize: t / 2,
    dotSizeSM: t * 0.35,
    dotSizeLG: r
  };
};
P.prepareComponentToken = fe;
P.default = (0, le.genStyleHooks)("Spin", (e) => {
  const t = (0, le.mergeToken)(e, {
    spinDotDefault: e.colorTextDescription
  });
  return [Pt(t)];
}, fe);
var Z = {}, Nt = E.default;
Object.defineProperty(Z, "__esModule", {
  value: !0
});
Z.default = _t;
var G = Nt(_);
const Et = 200, ce = [[30, 0.05], [70, 0.03], [96, 0.01]];
function _t(e, t) {
  const [r, a] = G.useState(0), i = G.useRef(), o = t === "auto";
  return G.useEffect(() => (o && e && (a(0), i.current = setInterval(() => {
    a((n) => {
      const s = 100 - n;
      for (let l = 0; l < ce.length; l += 1) {
        const [u, h] = ce[l];
        if (n <= u)
          return n + s * h;
      }
      return n;
    });
  }, Et)), () => {
    clearInterval(i.current);
  }), [o, e]), o ? r : t;
}
var j = M.default, It = E.default;
Object.defineProperty(Q, "__esModule", {
  value: !0
});
var he = Q.default = void 0, f = It(_), z = j(q), Ot = mt, Tt = Oe, zt = Te, Vt = j(U), Mt = j(P), qt = j(Z), jt = function(e, t) {
  var r = {};
  for (var a in e)
    Object.prototype.hasOwnProperty.call(e, a) && t.indexOf(a) < 0 && (r[a] = e[a]);
  if (e != null && typeof Object.getOwnPropertySymbols == "function")
    for (var i = 0, a = Object.getOwnPropertySymbols(e); i < a.length; i++)
      t.indexOf(a[i]) < 0 && Object.prototype.propertyIsEnumerable.call(e, a[i]) && (r[a[i]] = e[a[i]]);
  return r;
};
let ye;
function At(e, t) {
  return !!e && !!t && !isNaN(Number(t));
}
const k = (e) => {
  var t;
  const {
    prefixCls: r,
    spinning: a = !0,
    delay: i = 0,
    className: o,
    rootClassName: n,
    size: s = "default",
    tip: l,
    wrapperClassName: u,
    style: h,
    children: C,
    fullscreen: p = !1,
    indicator: v,
    percent: N
  } = e, I = jt(e, ["prefixCls", "spinning", "delay", "className", "rootClassName", "size", "tip", "wrapperClassName", "style", "children", "fullscreen", "indicator", "percent"]), {
    getPrefixCls: ve,
    direction: ge,
    spin: g
  } = f.useContext(zt.ConfigContext), m = ve("spin", r), [A, R, F] = (0, Mt.default)(m), [$, ee] = f.useState(() => a && !At(a, i)), be = (0, qt.default)($, N);
  f.useEffect(() => {
    if (a) {
      const w = (0, Ot.debounce)(i, () => {
        ee(!0);
      });
      return w(), () => {
        var X;
        (X = w == null ? void 0 : w.cancel) === null || X === void 0 || X.call(w);
      };
    }
    ee(!1);
  }, [i, a]);
  const L = f.useMemo(() => typeof C < "u" && !p, [C, p]);
  if (process.env.NODE_ENV !== "production") {
    const w = (0, Tt.devUseWarning)("Spin");
    process.env.NODE_ENV !== "production" && w(!l || L || p, "usage", "`tip` only work in nest or fullscreen pattern.");
  }
  const Se = (0, z.default)(m, g == null ? void 0 : g.className, {
    [`${m}-sm`]: s === "small",
    [`${m}-lg`]: s === "large",
    [`${m}-spinning`]: $,
    [`${m}-show-text`]: !!l,
    [`${m}-rtl`]: ge === "rtl"
  }, o, !p && n, R, F), Ce = (0, z.default)(`${m}-container`, {
    [`${m}-blur`]: $
  }), we = (t = v ?? (g == null ? void 0 : g.indicator)) !== null && t !== void 0 ? t : ye, $e = Object.assign(Object.assign({}, g == null ? void 0 : g.style), h), B = /* @__PURE__ */ f.createElement("div", Object.assign({}, I, {
    style: $e,
    className: Se,
    "aria-live": "polite",
    "aria-busy": $
  }), /* @__PURE__ */ f.createElement(Vt.default, {
    prefixCls: m,
    indicator: we,
    percent: be
  }), l && (L || p) ? /* @__PURE__ */ f.createElement("div", {
    className: `${m}-text`
  }, l) : null);
  return A(L ? /* @__PURE__ */ f.createElement("div", Object.assign({}, I, {
    className: (0, z.default)(`${m}-nested-loading`, u, R, F)
  }), $ && /* @__PURE__ */ f.createElement("div", {
    key: "loading"
  }, B), /* @__PURE__ */ f.createElement("div", {
    className: Ce,
    key: "container"
  }, C)) : p ? /* @__PURE__ */ f.createElement("div", {
    className: (0, z.default)(`${m}-fullscreen`, {
      [`${m}-fullscreen-show`]: $
    }, n, R, F)
  }, B) : B);
};
k.setDefaultIndicator = (e) => {
  ye = e;
};
process.env.NODE_ENV !== "production" && (k.displayName = "Spin");
he = Q.default = k;
const Rt = ze.div`
  height: 100%;
  .ant-spin-nested-loading {
    height: 100%;
    .ant-spin-container {
      height: 100%;
    }
  }
`, Ft = [He], Lt = {
  initialData: Ve,
  resetAfterSubmit: Me,
  disabled: K,
  disableSubmit: K,
  loading: K,
  onEvent: qe(Ft),
  animationStyle: je(Ae)
};
function Bt(e, t) {
  const {
    dispatch: r,
    layout: a,
    positionParams: i
  } = e.container.body[0].children.view.getView();
  let o = 0;
  const n = t.map(({
    column: s,
    compName: l
  }) => {
    const u = {
      i: "",
      h: nt(s.comp.type).h,
      w: i.cols,
      x: 0,
      y: o
    };
    return o = o + u.h, {
      item: {
        compType: s.comp.type,
        name: l,
        comp: {
          ...s.comp.compInitData,
          formDataKey: s.name,
          label: {
            text: s.label
          },
          required: s.required
        }
      },
      layoutItem: u
    };
  });
  r(W(st(a, n)));
}
function Xt(e) {
  return {
    name: "submit",
    handler: {
      compType: "executeQuery",
      comp: {
        queryName: e
      }
    }
  };
}
function Kt(e, t, r, a) {
  const {
    dispatch: i
  } = t, o = r.getNameGenerator(), n = e.columns.map((v) => {
    const N = o.genItemName("form" + ie.upperFirst(v.comp.type));
    return {
      column: v,
      compName: N
    };
  });
  Bt(t, n);
  const s = e.tableName, l = s.substring(s.lastIndexOf(".") + 1), u = a + "SubmitTo" + l.split("_").map(ie.upperFirst).join(""), h = o.genItemName(u);
  i(W(rt("onEvent", at(Xt(h)))));
  const C = e.dataSourceTypeConfig.getQueryInitData(a, s, n), p = r.getQueriesComp();
  return p.dispatch(W(p.pushAction({
    ...C,
    id: it(),
    name: h,
    datasourceId: e.dataSourceId,
    triggerType: "manual",
    notification: {
      showSuccess: !0,
      showFail: !0
    }
  }))), r.setSelectedBottomRes(h, ot.Query), "";
}
const Gt = (e) => {
  const t = y(S), r = y(Qe);
  return /* @__PURE__ */ V(Ue, {
    children: [d("formComp.containerPlaceholder"), /* @__PURE__ */ c("br", {}), /* @__PURE__ */ c(lt, {
      onCreate: (a) => Promise.resolve(Kt(a, e, t, r))
    })]
  });
}, Wt = /* @__PURE__ */ c(Je, {
  spin: !0
}), Ht = function() {
  return new ct(Lt, (e, t) => /* @__PURE__ */ c(Re.Provider, {
    value: e.disabled,
    children: /* @__PURE__ */ c(Rt, {
      children: /* @__PURE__ */ c(he, {
        indicator: Wt,
        spinning: e.loading,
        style: {
          height: "100%"
        },
        children: /* @__PURE__ */ c(dt, {
          ...e,
          hintPlaceholder: /* @__PURE__ */ c(Gt, {
            ...e,
            dispatch: t
          })
        })
      })
    })
  })).setPropertyViewFn((e) => /* @__PURE__ */ V(O, {
    children: [/* @__PURE__ */ c(b, {
      name: D.basic,
      children: e.resetAfterSubmit.propertyView({
        label: d("formComp.resetAfterSubmit")
      })
    }), (y(S).editorModeStatus === "logic" || y(S).editorModeStatus === "both") && /* @__PURE__ */ c(O, {
      children: /* @__PURE__ */ V(b, {
        name: D.interaction,
        children: [e.onEvent.getPropertyView(), Fe(e), e.disableSubmit.propertyView({
          label: d("formComp.disableSubmit")
        }), Le(e), Be(e)]
      })
    }), (y(S).editorModeStatus === "layout" || y(S).editorModeStatus === "both") && /* @__PURE__ */ c(O, {
      children: /* @__PURE__ */ c(b, {
        name: D.layout,
        children: e.container.getPropertyView()
      })
    }), (y(S).editorModeStatus === "logic" || y(S).editorModeStatus === "both") && /* @__PURE__ */ c(b, {
      name: D.advanced,
      children: e.initialData.propertyView({
        label: d("formComp.initialData")
      })
    }), (y(S).editorModeStatus === "layout" || y(S).editorModeStatus === "both") && /* @__PURE__ */ V(O, {
      children: [/* @__PURE__ */ c(b, {
        name: D.style,
        children: e.container.stylePropertyView()
      }), /* @__PURE__ */ c(b, {
        name: D.animationStyle,
        hasTooltip: !0,
        children: e.animationStyle.getPropertyView()
      }), e.container.children.showHeader.getView() && /* @__PURE__ */ c(b, {
        name: "Header Style",
        children: e.container.headerStylePropertyView()
      }), e.container.children.showBody.getView() && /* @__PURE__ */ c(b, {
        name: "Body Style",
        children: e.container.bodyStylePropertyView()
      }), e.container.children.showFooter.getView() && /* @__PURE__ */ c(b, {
        name: "Footer Style",
        children: e.container.footerStylePropertyView()
      })]
    })]
  })).build();
}();
let H = class extends Ht {
  onEventPropertyView(e) {
    return this.children.onEvent.propertyView({
      title: e
    });
  }
  traverseFormItems(e) {
    return Ye(this.getCompTree(), (t) => t.children.comp.children.formDataKey ? e(t) : !0);
  }
  validateFormItems() {
    return this.traverseFormItems((e) => {
      var r;
      return !((r = e.children.comp.exposingValues) != null && r.invalid);
    });
  }
  runMethodOfItems(...e) {
    const t = [];
    return this.traverseFormItems((r) => {
      var o;
      const a = r.children.comp.exposingMethods();
      for (const n of e) {
        const s = (o = a[n.name]) == null ? void 0 : o.func;
        if (s) {
          const l = n.getParams ? n.getParams(r) : [];
          if (l !== void 0)
            return t.push(Promise.resolve(s(...l))), !0;
        }
      }
      const i = r.children.compType.getView();
      return Ze.warn(d("form") + i + d("formComp.notSupportMethod") + e.map((n) => n.name)), !0;
    }), Promise.all(t).then(() => {
    });
  }
  setData(e, t) {
    const r = {
      ...t ?? this.children.initialData.getView(),
      ...e
    };
    return this.runMethodOfItems({
      name: "setValue",
      getParams: (a) => {
        var n;
        const i = ((n = a.children.comp.children.formDataKey) == null ? void 0 : n.getView()) || a.children.name.getView(), o = r[i];
        return o !== void 0 ? [o] : void 0;
      }
    }, {
      name: "setRange",
      getParams: (a) => {
        var n;
        const i = ((n = a.children.comp.children.formDataKey) == null ? void 0 : n.getView()) || a.children.name.getView(), o = r[i] ? r[i] : void 0;
        return o !== void 0 ? [o] : void 0;
      }
    }, {
      name: "resetValue"
    }, {
      name: "resetAll"
    }, {
      name: "clearValue"
    }, {
      name: "clearAll"
    });
  }
  reset() {
    return this.setData({});
  }
  submit() {
    return this.disableSubmit() ? Promise.reject("disableSubmit") : this.validateFormItems() ? this.children.onEvent.getView()("submit").then(() => this.children.resetAfterSubmit.getView() ? this.reset() : Promise.resolve()) : (ke.error(d("formComp.notValidForm")), Promise.reject("formComp.notValidForm"));
  }
  disableSubmit() {
    return this.children.disabled.getView() || this.children.disableSubmit.getView();
  }
  reduce(e) {
    switch (e.type) {
      case ae.UPDATE_NODES_V2: {
        const t = super.reduce(e);
        return t.children.initialData !== this.children.initialData && setTimeout(() => {
          this.dispatch(tt({
            type: "setData",
            initialData: e.value.initialData.value || {}
          }, !1));
        }), t;
      }
      case ae.CUSTOM:
        if (et(e, "setData"))
          return this.setData({}, e.value.initialData), this;
    }
    return super.reduce(e);
  }
};
H = Xe(H, [{
  method: {
    name: "submit",
    description: d("export.submitDesc"),
    params: []
  },
  execute: (e, t) => e.submit()
}, {
  method: {
    name: "reset",
    description: d("formComp.resetDesc"),
    params: []
  },
  execute: (e, t) => e.reset()
}, {
  method: {
    name: "clear",
    description: d("formComp.clearDesc"),
    params: []
  },
  execute: (e, t) => e.runMethodOfItems({
    name: "clearValue"
  })
}, {
  method: {
    name: "setData",
    description: d("formComp.setDataDesc"),
    params: [{
      name: "data",
      type: "JSON"
    }]
  },
  execute: (e, t) => {
    if (t.length !== 1)
      return Promise.reject(d("formComp.valuesLengthError"));
    const r = t[0];
    return typeof r != "object" || r === null || Array.isArray(r) ? Promise.reject(d("formComp.valueTypeError")) : e.setData(r);
  }
}]);
const cr = Ke(H, [...Ge, new We("loading", d("formComp.loadingDesc")), te({
  name: "data",
  desc: d("formComp.dataDesc"),
  depKeys: ["container"],
  func: (e) => {
    const t = {};
    return Object.entries(e.container).forEach(([r, a]) => {
      const i = a;
      if (i != null && i.hasOwnProperty("formDataKey")) {
        let o = i.value;
        !o && (i != null && i.hasOwnProperty("start")) && (i != null && i.hasOwnProperty("end")) && (o = {
          start: i.start,
          end: i.end
        }), t[i.formDataKey || r] = o;
      }
    }), t;
  }
}), te({
  name: "invalid",
  desc: d("export.invalidDesc"),
  depKeys: ["container"],
  func: (e) => {
    for (const [, t] of Object.entries(e.container)) {
      const r = t;
      if (r != null && r.hasOwnProperty("formDataKey") && r.invalid)
        return !0;
    }
    return !1;
  }
})]);
function dr(e, t) {
  return {
    container: {
      header: re([{
        item: {
          compType: "text",
          name: t.genItemName("formTitle"),
          comp: {
            text: "### " + d("formComp.formTitle")
          }
        },
        layoutItem: {
          i: "",
          h: 5,
          w: 24,
          x: 0,
          y: 0
        }
      }]),
      footer: re([{
        item: {
          compType: "button",
          name: t.genItemName("formButton"),
          comp: {
            text: d("button.submit"),
            type: "submit",
            form: e
          }
        },
        layoutItem: {
          i: "",
          h: 5,
          w: 10,
          x: 14,
          y: 0
        }
      }]),
      showHeader: !0,
      showFooter: !0
    }
  };
}
export {
  cr as FormComp,
  dr as defaultFormData
};
