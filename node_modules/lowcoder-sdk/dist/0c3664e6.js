import { X as m, cM as d, O as h, Z as i, cP as p, az as f, U as w, F as a, a8 as r, G as l, a9 as n, aa as s, Y as o, ah as g, ab as $, ac as y, ae as c, ad as S, av as b, aw as x, ax as C, cO as v } from "./c988e26e.js";
import { useContext as u } from "react";
import "react-dom";
const P = (e) => b`
    line-height: 2;
    .ant-progress-text {
      color: ${e.text};
      font-style:${e.fontStyle};
        font-family:${e.fontFamily};
        font-weight:${e.textWeight};
        font-size:${e.textSize};
    }
    width: ${x(e.margin)};	
    height: ${C(e.margin)};	
    margin: ${e.margin};	
    padding: ${e.padding};
    .ant-progress-inner {
      background-color: ${e.track};
      .ant-progress-bg {
        background-color: ${e.fill};
      }
    }
    &.ant-progress-status-success {
      .ant-progress-bg {
        background-color: ${e.success};
      }
      .ant-progress-text {
        color: ${e.success};
      }
    }
  `, I = m(v)`
  ${(e) => e.$style && P(e.$style)}
  ${(e) => e.$animationStyle}
`, V = function() {
  const e = {
    value: d("value", 60),
    showInfo: h,
    style: i(p, "style"),
    animationStyle: i(f, "animationStyle")
  };
  return new w(e, (t) => /* @__PURE__ */ a(I, {
    percent: Math.round(t.value.value),
    showInfo: t.showInfo,
    $style: t.style,
    $animationStyle: t.animationStyle
  })).setPropertyViewFn((t) => /* @__PURE__ */ r(l, {
    children: [/* @__PURE__ */ a(n, {
      name: s.basic,
      children: t.value.propertyView({
        label: o("progress.value"),
        tooltip: o("progress.valueTooltip")
      })
    }), ["logic", "both"].includes(u(g).editorModeStatus) && /* @__PURE__ */ r(n, {
      name: s.interaction,
      children: [$(t), t.showInfo.propertyView({
        label: o("progress.showInfo")
      })]
    }), ["layout", "both"].includes(u(g).editorModeStatus) && /* @__PURE__ */ r(l, {
      children: [/* @__PURE__ */ a(n, {
        name: s.style,
        children: t.style.getPropertyView()
      }), /* @__PURE__ */ a(n, {
        name: s.animationStyle,
        hasTooltip: !0,
        children: t.animationStyle.getPropertyView()
      })]
    })]
  })).build();
}(), z = y(V, [new c("value", o("progress.valueDesc")), new c("showInfo", o("progress.showInfoDesc")), S]);
export {
  z as ProgressComp,
  I as ProgressStyled
};
