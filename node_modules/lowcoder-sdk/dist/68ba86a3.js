import { q as s, Y as n, gp as m, O as d, a8 as c, G as u, _ as g, gq as x, F as i, dr as C, dn as w, dq as b, dv as V } from "./c988e26e.js";
import { SlotControl as f } from "./608865ad.js";
import { useContext as h } from "react";
import { O as r } from "./f915fcd2.js";
import "react-dom";
import "./22fa10de.js";
import "./8c51b61b.js";
import "./5230605f.js";
import "./be799735.js";
import "./0417d842.js";
import "./975a080d.js";
import "./82a4bca8.js";
import "./71bdd49a.js";
import "./2088ebd5.js";
import "./d3b0afba.js";
import "./85e61f03.js";
import "./36c2248f.js";
import "./70f9cad3.js";
import "./80c67fbe.js";
import "./094988fd.js";
import "./734fbd0f.js";
import "./80229ccd.js";
import "./16b77c22.js";
import "./b25be8d9.js";
import "./0c3664e6.js";
import "./c504e788.js";
import "./ad2208e2.js";
import "./e5bcb9b0.js";
import "./51dea655.js";
import "./fcc9e192.js";
import "./325a473d.js";
import "./33706f61.js";
import "./765e17fb.js";
import "./98885dce.js";
import "./9ee13d0e.js";
import "./9f467dd0.js";
import "./765a8ca5.js";
import "./3e9c3444.js";
import "./464239f7.js";
const p = s(f), S = (o) => /* @__PURE__ */ i(V, {
  ...o,
  emptyRows: 15,
  autoHeight: !0
});
function I(o) {
  const {
    containerProps: t
  } = o, e = h(w);
  return /* @__PURE__ */ i(S, {
    ...t,
    isDroppable: !1,
    isDraggable: !1,
    isResizable: !1,
    isSelectable: !1,
    bgColor: e,
    items: b(t.items),
    hintPlaceholder: "",
    containerPadding: [4, 4]
  });
}
let P = function() {
  const o = n("table.expandable");
  return new m({
    expandable: d,
    slot: p
  }, () => ({
    expandableConfig: {},
    expandModalView: null
  })).setControlItemData({
    filterText: o
  }).setPropertyViewFn((t, e) => /* @__PURE__ */ c(u, {
    children: [t.expandable.propertyView({
      label: o
    }), t.expandable.getView() && t.slot.getSelectedComp().getComp().propertyView({
      buttonText: n("table.configExpandedView")
    })]
  })).build();
}();
class dt extends P {
  getView() {
    if (!this.children.expandable.getView())
      return {
        expandableConfig: {},
        expandModalView: null
      };
    const t = this.children.slot.getSelectedComp();
    return {
      expandableConfig: {
        expandedRowRender: (e, a) => {
          const l = this.children.slot.getView()({
            currentRow: g.omit(e, r),
            currentIndex: a,
            currentOriginalIndex: x(e[r])
          }, String(e[r])).children.container.getView();
          return /* @__PURE__ */ i(I, {
            containerProps: l
          }, e[r]);
        }
      },
      expandModalView: t.getView()
    };
  }
  setSelectionAction(t, e) {
    return C("slot", p.setSelectionAction(t, e));
  }
  getPasteValue(t) {
    return {
      ...this.toJsonValue(),
      slot: this.children.slot.getSelectedComp().getComp().getPasteValue(t)
    };
  }
  reduce(t) {
    return super.reduce(t);
  }
}
export {
  dt as ExpansionControl
};
