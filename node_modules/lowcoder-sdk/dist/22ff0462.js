import { X as V, Y as t, a4 as E, O as w, w as T, P as F, ej as P, Z as u, c6 as L, c7 as I, ek as B, U as M, F as a, a8 as s, G as y, a9 as r, aa as i, ah as c, ac as A, aB as D, el as $ } from "./c988e26e.js";
import { useContext as d, useState as j, useEffect as H } from "react";
import { treeCommonChildren as K, treeDataPropertyView as N, formSection as q, valuePropertyView as z, TreeNameConfigs as O, useTree as R } from "./58025b46.js";
import { SelectInputValidationSection as U, selectInputValidate as G } from "./d3b0afba.js";
import "react-dom";
import "./85e61f03.js";
import "./8cb32968.js";
const X = V.div`
  height: 100%;
  padding: 4px;
  background: ${(e) => e.background};
  border: 1px solid ${(e) => e.border};
  border-radius: ${(e) => e.radius};
  .ant-tree-show-line .ant-tree-switcher {
    background: ${(e) => e.background};
  }
  .ant-tree:hover .ant-tree-list-scrollbar-show {
    display: block !important;
  }
  .ant-tree-list-scrollbar {
    width: 6px !important;
  }
  .ant-tree-list-scrollbar-thumb {
    border-radius: 9999px !important;
    background: rgba(139, 143, 163, 0.2) !important;
  }
  .ant-tree-list-scrollbar-thumb:hover {
    background: rgba(139, 143, 163, 0.5) !important;
  }
`, Y = [{
  label: t("tree.noSelect"),
  value: "none"
}, {
  label: t("tree.singleSelect"),
  value: "single"
}, {
  label: t("tree.multiSelect"),
  value: "multi"
}, {
  label: t("tree.checkbox"),
  value: "check"
}], Z = {
  ...K,
  selectType: E(Y, "single"),
  checkStrictly: w,
  autoExpandParent: w,
  label: T(F, {
    position: "column"
  }),
  // TODO: more event
  onEvent: P,
  style: u(L, "style"),
  labelStyle: u(I.filter((e) => ["accent", "validate"].includes(e.name) === !1), "labelStyle"),
  inputFieldStyle: u(B, "inputFieldStyle")
}, J = (e) => {
  const {
    treeData: S,
    selectType: o,
    value: l,
    expanded: b,
    checkStrictly: h,
    style: f,
    labelStyle: v
  } = e, [k, x] = j(), m = o === "single" || o === "multi", g = o === "check";
  return H(() => {
    o === "none" && l.value.length > 0 ? l.onChange([]) : o === "single" && l.value.length > 1 && l.onChange(l.value.slice(0, 1));
  }, [o]), R(e), e.label({
    required: e.required,
    ...G(e),
    style: f,
    labelStyle: v,
    inputFieldStyle: e.inputFieldStyle,
    children: /* @__PURE__ */ a(D, {
      onResize: (n, C) => x(C),
      render: () => /* @__PURE__ */ a(X, {
        ...e.inputFieldStyle,
        children: /* @__PURE__ */ a($, {
          disabled: e.disabled,
          height: k,
          rootStyle: {
            background: "transparent",
            color: e.inputFieldStyle.text
          },
          fieldNames: {
            title: "label",
            key: "value"
          },
          treeData: S,
          selectable: m,
          multiple: o === "multi",
          selectedKeys: m ? l.value : [],
          checkable: g,
          checkedKeys: g ? h ? {
            checked: l.value,
            halfChecked: []
          } : l.value : void 0,
          checkStrictly: h,
          showLine: e.showLine ? {
            showLeafIcon: e.showLeafIcon
          } : !1,
          expandedKeys: b.value,
          autoExpandParent: e.autoExpandParent,
          onSelect: (n) => {
            l.onChange(n), e.onEvent("change");
          },
          onCheck: (n) => {
            l.onChange(Array.isArray(n) ? n : n.checked), e.onEvent("change");
          },
          onExpand: (n) => {
            b.onChange(n);
          },
          onFocus: () => e.onEvent("focus"),
          onBlur: () => e.onEvent("blur")
        }, o)
      })
    })
  });
};
let p = function() {
  return new M(Z, (e) => /* @__PURE__ */ a(J, {
    ...e
  })).setPropertyViewFn((e) => /* @__PURE__ */ s(y, {
    children: [/* @__PURE__ */ a(r, {
      name: i.basic,
      children: N(e)
    }), ["logic", "both"].includes(d(c).editorModeStatus) && /* @__PURE__ */ s(y, {
      children: [/* @__PURE__ */ a(U, {
        ...e
      }), q(e), /* @__PURE__ */ s(r, {
        name: i.interaction,
        children: [e.onEvent.getPropertyView(), e.hidden.propertyView({
          label: t("prop.hide")
        }), e.disabled.propertyView({
          label: t("prop.disabled")
        }), e.selectType.propertyView({
          label: t("tree.selectType")
        }), e.selectType.getView() !== "none" && z(e), e.selectType.getView() === "check" && e.checkStrictly.propertyView({
          label: t("tree.checkStrictly"),
          tooltip: t("tree.checkStrictlyTooltip")
        })]
      })]
    }), ["layout", "both"].includes(d(c).editorModeStatus) && /* @__PURE__ */ s(r, {
      name: i.layout,
      children: [e.expanded.propertyView({
        label: t("tree.expanded")
      }), e.defaultExpandAll.propertyView({
        label: t("tree.defaultExpandAll")
      }), e.showLine.propertyView({
        label: t("tree.showLine")
      }), e.showLine.getView() && e.showLeafIcon.propertyView({
        label: t("tree.showLeafIcon")
      })]
    }), ["layout", "both"].includes(d(c).editorModeStatus) && e.label.getPropertyView(), ["layout", "both"].includes(d(c).editorModeStatus) && /* @__PURE__ */ s(y, {
      children: [/* @__PURE__ */ a(r, {
        name: i.style,
        children: e.style.getPropertyView()
      }), /* @__PURE__ */ a(r, {
        name: i.labelStyle,
        children: e.labelStyle.getPropertyView()
      }), /* @__PURE__ */ a(r, {
        name: i.inputFieldStyle,
        children: e.inputFieldStyle.getPropertyView()
      })]
    })]
  })).build();
}();
p = class extends p {
  autoHeight() {
    return !1;
  }
};
const oe = A(p, O);
export {
  oe as TreeComp
};
