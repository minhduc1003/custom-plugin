import { cS as u, db as r, cU as s, fa as c, fb as i, Y as l, a8 as m, F as n, fd as t } from "./c988e26e.js";
import "react";
import "react-dom";
const h = [...u([r, s, c, i])], C = [{
  label: l("autoComplete.colorIcon"),
  value: "blue"
}, {
  label: l("autoComplete.grewIcon"),
  value: "grew"
}], D = [{
  label: l("autoComplete.selectLable"),
  value: "label"
}, {
  label: l("autoComplete.selectKey"),
  value: "value"
}], k = [{
  label: l("autoComplete.small"),
  value: "small"
}, {
  label: l("autoComplete.large"),
  value: "large"
}], M = [{
  label: l("autoComplete.antDesign"),
  value: "AntDesign"
}, {
  label: l("autoComplete.normal"),
  value: "normal"
}], y = /* @__PURE__ */ m("li", {
  children: [l("autoComplete.Introduction"), ":", /* @__PURE__ */ n("br", {}), "1. label - ", l("autoComplete.helpLabel"), /* @__PURE__ */ n("br", {}), "2. value - ", l("autoComplete.helpValue")]
}), I = [{
  value: "1-BeiJing",
  label: "北京"
}, {
  value: "2-ShangHai",
  label: "上海"
}, {
  value: "3-GuangDong",
  label: "广东"
}, {
  value: "4-ShenZhen",
  label: "深圳"
}];
function S(e) {
  return e === "" ? [] : p(e) ?? [];
}
function p(e, a) {
  return t(e, ["array", "undefined"], a, (o, b) => (t(o.value, ["string"], "value"), t(o.label, ["string"], "label"), o));
}
function L(e) {
  return t(e == null ? void 0 : e.name, ["string"], "name"), t(e == null ? void 0 : e.avatar, ["string", "undefined"], "avatar"), e;
}
function x(e) {
  if (e === "")
    return {};
  for (const a in e)
    t(e[a], ["array"], a, (o) => (t(o, ["string"]), o));
  return e;
}
export {
  I as autoCompleteDate,
  h as autoCompleteRefMethods,
  M as autoCompleteType,
  C as autocompleteIconColor,
  x as checkMentionListData,
  L as checkUserInfoData,
  k as componentSize,
  S as convertAutoCompleteData,
  y as itemsDataTooltip,
  D as valueOrLabelOption
};
