import { f0 as n, f1 as i, av as a, X as d, Z as c, f2 as s, bS as t, cS as g, db as $, cU as f, dc as h, bV as p } from "./c988e26e.js";
import "react";
import "react-dom";
function l(r) {
  const o = r.background && n(r.background), e = r.background && i(r.background);
  return a`
    &&& {
      border-radius: ${r.radius};
      border-width:${r.borderWidth};
      margin: ${r.margin};
      padding: ${r.padding};
      rotate: ${r.rotation && r.rotation};
      &:not(:disabled) {
        --antd-wave-shadow-color: ${r.border};
        border-color: ${r.border};
        color: ${r.text};
        font-size: ${r.textSize};
        font-weight: ${r.textWeight};
        font-family: ${r.fontFamily};
        font-style: ${r.fontStyle};
        text-transform:${r.textTransform};
        text-decoration:${r.textDecoration};
        background-color: ${r.background};
        border-radius: ${r.radius};
        margin: ${r.margin};
        padding: ${r.padding};

        &:hover,
        &:focus {
          color: ${r.text};
          background-color: ${o};
          border-color: ${r.border === r.background ? o : r.border} !important;
        }
        &:active {
          color: ${r.text};
          background-color: ${e};
          border-color: ${r.border === r.background ? e : r.border} !important;
        }
      }
    }
  `;
}
const u = d(p)`
  ${(r) => r.$buttonStyle && l(r.$buttonStyle)}
  width: 100%;
  height: auto;
  display: inline-flex;
  justify-content: center;
  align-items: center;
  overflow: hidden;
  gap: 6px; 
  span {
    overflow: hidden;
    text-overflow: ellipsis;
  }
  line-height:${(r) => {
  var o;
  return (o = r.$buttonStyle) == null ? void 0 : o.lineHeight;
}}; 
`, w = d.div`
  // The button component is disabled but can respond to drag & select events
  ${(r) => r.disabled && `
    cursor: not-allowed;
    button:disabled {
      pointer-events: none;
    }
  `};
`;
function m(r) {
  return r && (r.hasOwnProperty("backgroundColor") || r.hasOwnProperty("borderColor") || r.hasOwnProperty("color")) ? {
    background: r.backgroundColor,
    border: r.borderColor,
    text: r.color
  } : r;
}
const x = c(s, "style"), C = t(x, m), B = g([$, f, h]);
export {
  u as Button100,
  w as ButtonCompWrapper,
  C as ButtonStyleControl,
  B as buttonRefMethods,
  l as getButtonStyle
};
