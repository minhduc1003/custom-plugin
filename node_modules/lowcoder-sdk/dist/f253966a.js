import { C as g, O as w } from "./f915fcd2.js";
import { J as a, dW as d, _ as c } from "./c988e26e.js";
import { MockTableComp as h } from "./b416b998.js";
import { TableComp as x } from "./e830a3ab.js";
import "react";
import "./22fa10de.js";
import "./8c51b61b.js";
import "./5230605f.js";
import "./be799735.js";
import "react-dom";
import "./0417d842.js";
import "./975a080d.js";
import "./82a4bca8.js";
import "./71bdd49a.js";
import "./2088ebd5.js";
import "./d3b0afba.js";
import "./85e61f03.js";
import "./36c2248f.js";
import "./70f9cad3.js";
import "./80c67fbe.js";
import "./094988fd.js";
import "./734fbd0f.js";
import "./80229ccd.js";
import "./16b77c22.js";
import "./b25be8d9.js";
import "./0c3664e6.js";
import "./c504e788.js";
import "./ad2208e2.js";
import "./e5bcb9b0.js";
import "./51dea655.js";
import "./fcc9e192.js";
import "./325a473d.js";
import "./33706f61.js";
import "./765e17fb.js";
import "./98885dce.js";
import "./9ee13d0e.js";
import "./9f467dd0.js";
import "./765a8ca5.js";
import "./3e9c3444.js";
import "./464239f7.js";
import "./608865ad.js";
import "./911053df.js";
import "./6a2c46a1.js";
import "./b0ddbdcf.js";
import "./ada1f35c.js";
import "./68ba86a3.js";
test("test column", () => {
  const e = {
    title: "name"
    // editable: true, // TODO: change to boolean
  };
  let o = new g({
    value: e
  });
  o = a(o);
  const t = o.getView();
  expect(t.title).toEqual(e.title);
});
test("test column render", () => {
  const e = {
    render: {
      compType: "text",
      comp: {
        text: "{{currentRow.id}}"
      }
    }
    // editable: true, // TODO: change to boolean
  };
  let o = new g({
    value: e
  });
  o = a(o);
  const t = o.getView();
  expect(t.render({
    currentCell: null,
    currentIndex: null,
    currentRow: {
      id: "hello"
    },
    currentOriginalIndex: null
  }, "0").getView().view({}).props.normalView).toEqual("hello");
});
test("test table", async () => {
  const e = {
    data: JSON.stringify([{
      a: 1
    }]),
    columns: [{
      dataIndex: "a",
      hide: !0
    }, {
      title: "custom",
      dataIndex: "",
      isCustom: !0
    }]
  }, o = {
    query1: d({
      data: [{
        q: 1
      }]
    }),
    query2: d({
      data: [{
        q2: 2
      }]
    })
  };
  let t = new x({
    dispatch: (l) => {
      t = a(t.reduce(l), o);
    },
    value: e
  });
  t = a(t);
  let r = t.children.columns.getView();
  expect(r.length).toEqual(2), t = a(t.reduce(t.changeChildAction("data", '[{"a":1, "c":2, "d":3}]'))), await new Promise((l) => setTimeout(l, 20)), r = t.children.columns.getView(), expect(r.length).toEqual(4), expect(r[0].getView().dataIndex).toEqual("a"), expect(r[0].getView().hide).toBe(!0), expect(r[1].getView().title).toEqual("custom"), expect(r[2].getView().title).toEqual("c"), expect(r[3].getView().title).toEqual("d");
}, 1e3);
test("test mock table render", () => {
  let e = new h({});
  e = a(e);
});
test("test table data transform", () => {
  function e(i, m) {
    const p = m.exposingValues.displayData, {
      data: u
    } = m.getProps(), s = m.filterData;
    return expect(u.length).toEqual(3), expect(p.length).toEqual(i), expect(p.map((n) => c.omit(n, "custom"))).toEqual(c.map(s, (n) => c.omit(n, w))), {
      transformedData: s,
      data: u,
      displayData: p
    };
  }
  const o = {
    data: JSON.stringify([{
      id: 1,
      name: "gg"
    }, {
      id: 5,
      name: "gg2"
    }, {
      id: 3,
      name: "jjj"
    }]),
    columns: [{
      dataIndex: "id",
      isCustom: !1,
      sortable: !0,
      render: {
        compType: "text",
        comp: {
          text: "{{currentCell}}"
        }
      }
    }, {
      dataIndex: "name",
      isCustom: !1,
      render: {
        compType: "text",
        comp: {
          text: "{{currentCell}}"
        }
      }
    }, {
      title: "custom",
      dataIndex: "ealekfg",
      isCustom: !0,
      render: {
        compType: "image",
        comp: {
          src: "{{currentRow.id}}"
        }
      }
    }]
  };
  let t = new x({
    dispatch: (i) => {
      t = a(t.reduce(i));
    },
    value: o
  });
  t = a(t), t = a(t.reduce(t.changeChildAction("sort", [{
    column: "id",
    desc: !0
  }])));
  let {
    transformedData: r,
    data: l,
    displayData: f
  } = e(3, t);
  expect(r.map((i) => i.id)).toEqual([5, 3, 1]), t = a(t.reduce(t.changeChildAction("toolbar", {
    searchText: "gg"
  }))), e(2, t), t = a(t.reduce(t.changeChildAction("toolbar", {
    showFilter: !0,
    filter: {
      stackType: "and",
      filters: [{
        columnKey: "id",
        filterValue: "4",
        operator: "gt"
      }, {
        columnKey: "id",
        filterValue: "5",
        operator: "lte"
      }]
    }
  }))), e(1, t);
});
