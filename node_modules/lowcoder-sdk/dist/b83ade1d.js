import { av as d, X as g, Y as t, a3 as u, ch as b, a5 as p, Z as w, hL as h, hM as y, a4 as m, O as c, w as f, ed as P, U as C, F as o, _ as v, a8 as i, G as x, a9 as a, aa as l, bJ as k, ab as V, ae as n, hN as $ } from "./c988e26e.js";
import "react";
import { FormDataPropertyView as S } from "./85e61f03.js";
import { textInputChildren as E } from "./70f9cad3.js";
import { presets as O } from "./fefcc0ad.js";
import "react-dom";
function j(e) {
  return d`
    border-radius: ${e.radius};
    &:not(.ant-input-disabled, .ant-input-affix-wrapper-disabled),
    input {
      background-color: ${e.background};
      color:${e.text};
      font-weight:${e.textWeight};
      font-family:${e.fontFamily};
      border-color: ${e.border};
      &:focus,
      &.ant-input-affix-wrapper-focused {
        border-color: ${e.accent};
      }
      &:hover {
        border-color: ${e.accent};
      }
      .ant-input-clear-icon svg:hover {
        opacity: 0.65;
      }
    }
  `;
}
const A = g($)`
  width: 100%;
  display: flex;
  justify-content: flex-start;
  ${(e) => e.$style && j(e.$style)}
`, F = [{
  label: t("colorPicker.click"),
  value: "click"
}, {
  label: t("colorPicker.hover"),
  value: "hover"
}], H = u([b]), N = {
  ...E,
  value: p("value", "#3377ff"),
  style: w(h, "style"),
  color: y("color", {}),
  trigger: m(F, "click"),
  disabledAlpha: c,
  showPresets: c,
  onEvent: H,
  presets: f(P, JSON.stringify(O, null, 2))
}, T = new C(N, (e) => {
  var s;
  return e.label({
    children: /* @__PURE__ */ o(A, {
      $style: e.style,
      value: (s = e == null ? void 0 : e.value) == null ? void 0 : s.value,
      disabledAlpha: e.disabledAlpha,
      showText: (r) => r.toHexString().toUpperCase(),
      allowClear: !0,
      trigger: e.trigger,
      disabled: e.disabled,
      onChange: (r) => {
        e.value.onChange(r.toHexString().toUpperCase()), e.color.onChange({
          hex: r.toHexString().toUpperCase(),
          hsb: r.toHsb(),
          rgb: r.toRgb()
        }), e.onEvent("change");
      },
      presets: e.showPresets && !v.isEmpty(e.presets) ? [e.presets] : []
    }),
    style: e.style
  });
}).setPropertyViewFn((e) => /* @__PURE__ */ i(x, {
  children: [/* @__PURE__ */ o(a, {
    name: l.basic,
    children: e.value.propertyView({
      label: t("prop.defaultValue")
    })
  }), /* @__PURE__ */ o(S, {
    ...e
  }), e.label.getPropertyView(), /* @__PURE__ */ i(a, {
    name: l.interaction,
    children: [e.onEvent.getPropertyView(), k(e)]
  }), /* @__PURE__ */ i(a, {
    name: l.advanced,
    children: [e.trigger.propertyView({
      label: t("colorPicker.trigger"),
      radioButton: !0
    }), e.disabledAlpha.propertyView({
      label: t("colorPicker.disabledAlpha")
    }), e.showPresets.propertyView({
      label: t("colorPicker.showPresets")
    }), e.showPresets.getView() && e.presets.propertyView({
      label: t("colorPicker.recommended")
    })]
  }), /* @__PURE__ */ o(a, {
    name: l.layout,
    children: V(e)
  }), /* @__PURE__ */ o(a, {
    name: l.style,
    children: e.style.getPropertyView()
  })]
})).setExposeStateConfigs([new n("value", t("export.inputValueDesc")), new n("color", t("export.inputValueDesc")), new n("disabled", t("prop.disabled"))]).build();
export {
  T as ColorPickerComp,
  H as colorPickerEvent,
  j as getStyle
};
