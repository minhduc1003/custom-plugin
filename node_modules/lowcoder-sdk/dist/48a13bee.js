import { X as i, U as d, F as l, G as a, cS as r, cT as o, cU as c, ac as u, ae as h, Y as y, bL as s, w as S, cV as $ } from "./c988e26e.js";
import { CascaderPropertyView as F, defaultDataSource as f, CascaderChildren as m } from "./a9feb7db.js";
import "react";
import "react-dom";
import "./33706f61.js";
import "./325a473d.js";
const I = i($)`
  width: 100%;
  font-family:"Montserrat";
  ${(t) => t.$style && {
  ...t.$style,
  "border-radius": t.$style.radius
}}
`, C = i.div`
 background-color: ${(t) => {
  var e;
  return (e = t.$childrenInputFieldStyle) == null ? void 0 : e.background;
}};
    border: ${(t) => {
  var e;
  return (e = t.$childrenInputFieldStyle) == null ? void 0 : e.border;
}};
    border-style: ${(t) => {
  var e;
  return (e = t.$childrenInputFieldStyle) == null ? void 0 : e.borderStyle;
}};
    border-width: ${(t) => {
  var e;
  return (e = t.$childrenInputFieldStyle) == null ? void 0 : e.borderWidth;
}};
    border-radius: ${(t) => {
  var e;
  return (e = t.$childrenInputFieldStyle) == null ? void 0 : e.radius;
}};
    rotate: ${(t) => {
  var e;
  return (e = t.$childrenInputFieldStyle) == null ? void 0 : e.rotation;
}};
    margin: ${(t) => {
  var e;
  return (e = t.$childrenInputFieldStyle) == null ? void 0 : e.margin;
}};
    padding: ${(t) => {
  var e;
  return (e = t.$childrenInputFieldStyle) == null ? void 0 : e.padding;
}};
    .ant-cascader-menu-item-content{
    font-size: ${(t) => {
  var e;
  return (e = t.$childrenInputFieldStyle) == null ? void 0 : e.textSize;
}};
    font-style: ${(t) => {
  var e;
  return (e = t.$childrenInputFieldStyle) == null ? void 0 : e.fontStyle;
}};
    font-family: ${(t) => {
  var e;
  return (e = t.$childrenInputFieldStyle) == null ? void 0 : e.fontFamily;
}};
    font-weight: ${(t) => {
  var e;
  return (e = t.$childrenInputFieldStyle) == null ? void 0 : e.textWeight;
}};
    text-transform: ${(t) => {
  var e;
  return (e = t.$childrenInputFieldStyle) == null ? void 0 : e.textTransform;
}};
    text-decoration: ${(t) => {
  var e;
  return (e = t.$childrenInputFieldStyle) == null ? void 0 : e.textDecoration;
}};
    color: ${(t) => {
  var e;
  return (e = t.$childrenInputFieldStyle) == null ? void 0 : e.text;
}};
    }
`;
let b = function() {
  const t = m;
  return new d(t, (e) => e.label({
    style: e.style,
    labelStyle: e.labelStyle,
    inputFieldStyle: e.inputFieldStyle,
    childrenInputFieldStyle: e.childrenInputFieldStyle,
    animationStyle: e.animationStyle,
    children: /* @__PURE__ */ l(I, {
      ref: e.viewRef,
      value: e.value.value,
      disabled: e.disabled,
      defaultValue: e.value.value,
      options: e.options,
      allowClear: e.allowClear,
      placeholder: e.placeholder,
      showSearch: e.showSearch,
      $style: e.inputFieldStyle,
      $childrenInputFieldStyle: e.childrenInputFieldStyle,
      onFocus: () => e.onEvent("focus"),
      onBlur: () => e.onEvent("blur"),
      dropdownRender: (n) => /* @__PURE__ */ l(C, {
        $childrenInputFieldStyle: e.childrenInputFieldStyle,
        children: n
      }),
      onChange: (n) => {
        e.value.onChange(n), e.onEvent("change");
      }
    })
  })).setPropertyViewFn((e) => /* @__PURE__ */ l(a, {
    children: /* @__PURE__ */ l(F, {
      ...e
    })
  })).setExposeMethodConfigs(r([o, c])).build();
}();
const g = u(b, [new h("value", y("selectInput.valueDesc")), ...s]), E = S(g, {
  options: f
});
export {
  E as CascaderWithDefault
};
