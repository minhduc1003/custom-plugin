import { hO as d, R as h, hb as u, b_ as y, b$ as n, c0 as c, hP as g, hQ as x } from "./c988e26e.js";
import { loadComps as v } from "./145a13e9.js";
import "react";
import "react-dom";
import "./7c950db2.js";
import "./975a080d.js";
import "./44a7bc45.js";
import "./4c3ee702.js";
import "./5ed415ad.js";
import "./44a79fed.js";
import "./63085759.js";
import "./ef17c1a9.js";
import "./06b2ca8b.js";
import "./f4dd517e.js";
import "./30970d5d.js";
import "./62fdf1a5.js";
import "./85e61f03.js";
import "./7032c5eb.js";
import "./034fe3cf.js";
import "./89fd4803.js";
import "./8c5a44af.js";
import "./d2612a35.js";
import "./ede9fb49.js";
import "./e1e86b1c.js";
import "./2211d28b.js";
import "./82dff944.js";
import "./ab9066e0.js";
import "./14897c7e.js";
import "./182e4b4f.js";
import "./8f0aa994.js";
import "./70c18940.js";
import "./9caec5b5.js";
import "./99e2f395.js";
import "./af4bbc3e.js";
import "./d118cfee.js";
import "./45befefc.js";
import "./442c49ea.js";
import "./e27658d4.js";
import "./1daf7233.js";
import "./2ae2291e.js";
import "./75cd6c85.js";
import "./70f9cad3.js";
import "./4c8fb1cc.js";
import "./a789fa2f.js";
import "./fe51b167.js";
import "./3ad031d5.js";
import "./0c3664e6.js";
import "./637b37d8.js";
import "./91f867d0.js";
import "./48a13bee.js";
import "./a9feb7db.js";
import "./33706f61.js";
import "./325a473d.js";
import "./2088ebd5.js";
import "./d3b0afba.js";
import "./36c2248f.js";
import "./3e042f08.js";
import "./fcc9e192.js";
import "./2c7dce0f.js";
import "./317cb09e.js";
import "./719447be.js";
import "./f588d8b4.js";
import "./b416b998.js";
import "./e830a3ab.js";
import "./f915fcd2.js";
import "./22fa10de.js";
import "./8c51b61b.js";
import "./5230605f.js";
import "./be799735.js";
import "./0417d842.js";
import "./82a4bca8.js";
import "./71bdd49a.js";
import "./80c67fbe.js";
import "./094988fd.js";
import "./734fbd0f.js";
import "./80229ccd.js";
import "./16b77c22.js";
import "./b25be8d9.js";
import "./c504e788.js";
import "./ad2208e2.js";
import "./e5bcb9b0.js";
import "./51dea655.js";
import "./765e17fb.js";
import "./98885dce.js";
import "./9ee13d0e.js";
import "./9f467dd0.js";
import "./765a8ca5.js";
import "./3e9c3444.js";
import "./464239f7.js";
import "./608865ad.js";
import "./911053df.js";
import "./6a2c46a1.js";
import "./b0ddbdcf.js";
import "./ada1f35c.js";
import "./68ba86a3.js";
import "./85c8d626.js";
import "./f9495ea0.js";
import "./2d3be21e.js";
import "./0fe59fe4.js";
import "./48824b90.js";
import "./c3947343.js";
import "./f0d61f39.js";
import "./5ce38ef7.js";
import "./44c19c99.js";
import "./6c369ea4.js";
import "./f52ee168.js";
import "./de2e4e92.js";
import "./bf2ffa97.js";
import "./90e6d3f7.js";
import "./3eacf14a.js";
import "./a353f3e4.js";
import "./a6ed71f1.js";
import "./ac887e72.js";
import "./57a2ad53.js";
import "./62fe8227.js";
import "./f26c56d5.js";
import "./842a0c82.js";
import "./dca7e75f.js";
import "./5e5bb16d.js";
import "./9a75bf68.js";
import "./2d92f8b6.js";
import "./92be2a34.js";
import "./27e4a09e.js";
import "./0a417d48.js";
import "./45952886.js";
import "./66703dd9.js";
import "./16599e37.js";
import "./22ff0462.js";
import "./58025b46.js";
import "./8cb32968.js";
import "./98e6b95a.js";
import "./8dc71748.js";
import "./2856edc9.js";
import "./3e5c99b7.js";
import "./24046e7b.js";
import "./0b1ff108.js";
import "./6559ac3d.js";
import "./8a01f194.js";
import "./c2f0a2ba.js";
import "./be8baf2f.js";
import "./7d1c8402.js";
import "./20782254.js";
import "./5830a3e5.js";
import "./15a00e24.js";
import "./19b5cdb2.js";
import "./83d1a1b5.js";
import "./d3b6c877.js";
import "./252f669a.js";
import "./e7645a61.js";
import "./55bdce46.js";
import "./29d70112.js";
const T = {
  ui: {
    items: {
      "2e2d4bf2": {
        compType: "module",
        comp: {
          appId: "123",
          events: [{
            name: "event1",
            handler: {
              compType: "executeComp",
              comp: {
                name: "outerInput",
                methodName: "setValue",
                params: [{
                  compType: "string",
                  comp: "event1_triggered",
                  name: "value"
                }]
              }
            }
          }]
        },
        name: "module1"
      },
      "2bb084bf": {
        compType: "input",
        comp: {
          value: ""
        },
        name: "outerInput"
      }
    }
  },
  queries: [{
    compType: "js",
    comp: {
      script: "return 3;"
    },
    id: "dievziawwqy72gszoa42i6m8",
    name: "jsQuery3",
    triggerType: "manual"
  }, {
    compType: "js",
    comp: {
      script: "return 3 + a;"
    },
    id: "dievziawwqy72gszoa42i6m9",
    name: "jsQuery4",
    triggerType: "manual"
  }]
}, f = {
  ui: {
    compType: "module",
    comp: {
      methods: [{
        name: "method1",
        action: {
          compType: "executeComp",
          comp: {
            name: "input1",
            methodName: "setValue",
            params: [{
              compType: "string",
              comp: "hello method1",
              name: "value"
            }]
          }
        }
      }, {
        name: "method2",
        params: [{
          name: "param1",
          type: "string"
        }],
        action: {
          compType: "executeComp",
          comp: {
            name: "input1",
            methodName: "setValue",
            params: [{
              compType: "string",
              comp: "hello {{param1}}",
              name: "value"
            }]
          }
        }
      }],
      events: {
        list: [{
          name: "event1",
          description: ""
        }, {
          name: "event2",
          description: ""
        }],
        onEvent: [{
          name: "event1",
          handler: {
            compType: "executeComp",
            comp: {
              name: "input1",
              methodName: "setValue",
              params: [{
                compType: "string",
                comp: "from_event1",
                name: "value"
              }]
            }
          }
        }]
      },
      io: {
        inputs: [{
          name: "inQuery",
          description: "",
          type: "query"
        }, {
          name: "inNum",
          description: "",
          type: "number"
        }, {
          name: "inString",
          description: "",
          type: "string",
          defaultValue: {
            compType: "string",
            comp: "default_value"
          },
          test: {
            compType: "string",
            comp: "test_value"
          }
        }],
        outputs: [{
          description: "",
          value: "{{input1.value}}",
          name: "out"
        }]
      },
      containerSize: {
        height: 20,
        width: 24
      },
      container: {
        items: {
          "2010af2a": {
            compType: "input",
            comp: {
              value: "hello"
            },
            name: "input1"
          },
          e97d3df7: {
            compType: "text",
            comp: {
              text: "inNum:{{inNum.value}}"
            },
            name: "text1"
          },
          e97d3df8: {
            compType: "text",
            comp: {
              text: "inString:{{inString.value}}"
            },
            name: "text2"
          },
          e97d3df9: {
            compType: "text",
            comp: {
              text: "inQueryData:{{inQuery.data}}"
            },
            name: "text3"
          }
        }
      }
    }
  },
  queries: [{
    compType: "js",
    comp: {
      script: "return 1 + 1"
    },
    id: "dievziawwqy72gszoa42i6m7",
    name: "jsQuery",
    triggerType: "manual",
    onEvent: [{
      name: "success",
      handler: {
        compType: "executeComp",
        comp: {
          name: "input1",
          methodName: "setValue",
          params: [{
            compType: "string",
            comp: "hello success",
            name: "value"
          }]
        }
      }
    }]
  }, {
    compType: "js",
    comp: {
      script: `inQuery.run({a: 10}); 
input1.setValue('hello input query'); return 'ok'`
    },
    id: "dievziawwqy72gszoa42i6m8",
    name: "jsQuery2",
    triggerType: "manual"
  }, {
    compType: "js",
    comp: {
      script: "event1.trigger();"
    },
    id: "dievziawwqy72gszoa42i6m9",
    name: "jsQuery3",
    triggerType: "manual"
  }]
};
function r(o) {
  const e = d({
    Comp: h,
    initialValue: T,
    reduceContext: {
      readOnly: !1,
      applicationId: "123",
      moduleDSL: {
        123: f
      },
      parentApplicationPath: []
    }
  });
  if (!e)
    throw new Error();
  const t = (a, s) => a.children.ui.getAllCompItems()[s].children.comp, i = (a) => t(e.comp, a), p = () => i("2e2d4bf2"), m = (a) => {
    const l = p().moduleRootComp;
    return t(l, a);
  };
  e.init().then(() => {
    p().dispatch(u({
      type: "init"
    }, !1)), setTimeout(() => {
      o({
        root: () => e.comp,
        moduleRoot: () => p().moduleRootComp,
        module: p,
        moduleOutputNodes: () => p().getOutputNodes(),
        input: () => m("2010af2a"),
        inputValue: () => m("2010af2a").children.value.getView().value,
        text1: () => m("e97d3df7"),
        text2: () => m("e97d3df8"),
        text3: () => m("e97d3df9"),
        outerInputValue: () => i("2bb084bf").children.value.getView().value
      });
    });
  });
}
beforeAll(async () => {
  await v();
});
describe("module comp", () => {
  test("init module to ready", (o) => {
    r(({
      module: e,
      text1: t,
      text2: i
    }) => {
      expect(Object.keys(e().getOutputNodes())).toStrictEqual(["out"]), expect(e().exposingValues.out).toBe("hello"), expect(Object.keys(e().children.inputs.getInputNodes())).toStrictEqual([]), expect(t().children.text.getView().value).toBe("inNum:"), e().children.inputs.children.inNum.dispatchChangeValueAction(1), expect(t().children.text.getView().value).toBe("inNum:1"), expect(Object.keys(e().children.inputs.getInputNodes())).toStrictEqual(["inNum"]), expect(i().children.text.getView().value).toBe("inString:default_value"), e().children.inputs.children.inString.dispatchChangeValueAction("hello"), expect(i().children.text.getView().value).toBe("inString:hello"), expect(Object.keys(e().children.inputs.getInputNodes())).toStrictEqual(["inNum", "inString"]), o();
    });
  }), test("change value in module", (o) => {
    r(({
      input: e,
      inputValue: t
    }) => {
      expect(t()).toBe("hello"), e().children.value.dispatchChangeValueAction("world"), expect(t()).toBe("world"), y(e().children.value.dispatch, e().children.value.changeValueAction("hello world"), {
        autoHandleAfterReduce: !0
      }).then(() => {
        expect(t()).toBe("hello world"), o();
      });
    });
  }), test("exec query in module", (o) => {
    r(({
      moduleRoot: e,
      module: t,
      inputValue: i
    }) => {
      expect(t().exposingValues.out).toBe("hello"), e().dispatch(n("jsQuery", c({}))), setTimeout(() => {
        expect(i()).toBe("hello success"), expect(t().exposingValues.out).toBe("hello success"), o();
      }, 300);
    });
  }), test("input query data", (o) => {
    r(({
      text3: e,
      module: t,
      root: i,
      inputValue: p
    }) => {
      expect(e().children.text.getView().value).toBe("inQueryData:"), t().children.inputs.children.inQuery.dispatchChangeValueAction({
        value: "jsQuery3"
      }), expect(Object.keys(t().children.inputs.getInputNodes())).toStrictEqual(["inQuery"]), expect(e().children.text.getView().value).toBe("inQueryData:"), i().dispatch(n("jsQuery3", c({}))), setTimeout(() => {
        expect(e().children.text.getView().value).toBe("inQueryData:3"), o();
      }, 1e3);
    });
  }), test("exec input query", (o) => {
    r(({
      text3: e,
      module: t,
      moduleRoot: i,
      inputValue: p
    }) => {
      expect(e().children.text.getView().value).toBe("inQueryData:"), t().children.inputs.children.inQuery.dispatchChangeValueAction({
        value: "jsQuery4"
      }), expect(Object.keys(t().children.inputs.getInputNodes())).toStrictEqual(["inQuery"]), expect(e().children.text.getView().value).toBe("inQueryData:"), i().dispatch(n("jsQuery2", c({}))), setTimeout(() => {
        expect(p()).toBe("hello input query"), expect(e().children.text.getView().value).toBe("inQueryData:13"), o();
      }, 1e3);
    });
  }), test("exec methods", (o) => {
    r(({
      root: e,
      inputValue: t
    }) => {
      const i = e().nameAndExposingInfo();
      expect(Object.keys(i.module1.methods)).toStrictEqual(["method1", "method2"]), e().dispatch(n("module1", u({
        type: "execute",
        methodName: "method1",
        params: []
      }, !1))), setTimeout(() => {
        expect(t()).toBe("hello method1"), o();
      }, 2e3);
    });
  }), test("exec methods with params", (o) => {
    r(({
      root: e,
      inputValue: t
    }) => {
      const i = e().nameAndExposingInfo();
      expect(Object.keys(i.module1.methods)).toStrictEqual(["method1", "method2"]), e().dispatch(n("module1", u({
        type: "execute",
        methodName: "method2",
        params: ["Lucy"]
      }, !1))), setTimeout(() => {
        expect(t()).toBe("hello Lucy"), o();
      }, 2e3);
    });
  }), test("trigger events by event", (o) => {
    r(({
      root: e,
      text3: t,
      module: i,
      moduleRoot: p,
      outerInputValue: m
    }) => {
      expect(m()).toBe(""), p().dispatch(n(x, g("event1"))), setTimeout(() => {
        expect(m()).toBe("event1_triggered"), o();
      });
    });
  }), test("trigger events by js query", (o) => {
    r(({
      root: e,
      text3: t,
      module: i,
      moduleRoot: p,
      outerInputValue: m
    }) => {
      expect(m()).toBe(""), p().dispatch(n("jsQuery3", c({}))), setTimeout(() => {
        expect(m()).toBe("event1_triggered"), o();
      }, 1e3);
    });
  });
});
