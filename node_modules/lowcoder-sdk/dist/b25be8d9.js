import { X as a, F as t, gD as i, gE as u, a8 as p, G as d, Y as r, gF as m, a2 as h, O as g, g0 as c, cP as b } from "./c988e26e.js";
import { C as x } from "./5230605f.js";
import { ColumnValueTooltip as w } from "./0417d842.js";
import { ProgressStyled as f } from "./0c3664e6.js";
import "react";
import "react-dom";
import "./be799735.js";
import "./975a080d.js";
const y = a(f)`
  display: flex;
  align-items: center;
  .ant-progress-outer {
    height: 22px;
    display: flex;
    align-items: center;
  }
  .ant-progress-text {
    margin-left: 6px;
  }
`, V = a(m)`
  background: transparent !important;
  width: 100%;
  height: 100%;
  position: absolute;
  top: 0;
  .ant-input-number-input-wrap {
    height: 100%;
    display: flex;
    align-items: center;
  }
  .ant-input-number-handler-wrap {
    top: 1.5px;
    right: 1.5px;
    height: calc(100% - 3px);
    border-radius: 0;
  }
  .ant-input-number-handler-up {
    border-bottom: 1px solid #d7d9e0;
  }
  .ant-input-number-handler-up,
  .ant-input-number-handler-down {
    display: flex;
    align-items: center;
    justify-content: center;
    > span {
      width: 16px;
      height: 16px;
      margin-top: 0;
      position: unset;
      transform: none;
    }
    &:hover {
      &:not(.ant-input-number-handler-up-disabled):not(.ant-input-number-handler-down-disabled)
        path {
        fill: #315efb;
      }
    }
  }
`, C = {
  text: h,
  showValue: g
}, o = (e) => e.text, $ = function() {
  return new x(C, (e, n) => {
    const s = e.changeValue ?? o(e);
    return /* @__PURE__ */ t(() => {
      const l = c(b);
      return /* @__PURE__ */ t(y, {
        percent: Math.round(s),
        showInfo: e.showValue,
        $style: l
      });
    }, {});
  }, (e) => e.text.value, o).setEditViewFn((e) => /* @__PURE__ */ t(V, {
    min: 0,
    max: 100,
    defaultValue: e.value,
    autoFocus: !0,
    variant: "borderless",
    controls: {
      upIcon: /* @__PURE__ */ t(i, {}),
      downIcon: /* @__PURE__ */ t(u, {})
    },
    onChange: (n) => {
      e.onChange(Number(n));
    },
    onBlur: e.onChangeEnd,
    onPressEnter: e.onChangeEnd
  })).setPropertyViewFn((e) => /* @__PURE__ */ p(d, {
    children: [e.text.propertyView({
      label: r("table.columnValue"),
      tooltip: w
    }), e.showValue.propertyView({
      label: r("table.showValue")
    })]
  })).build();
}();
export {
  $ as ProgressComp
};
