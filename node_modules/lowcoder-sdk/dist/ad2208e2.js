import { Y as d, S as C, gG as S, F as n, ak as x, a8 as w, G as V, ge as m, gH as b, dp as y } from "./c988e26e.js";
import { C as B, S as F } from "./5230605f.js";
import { Wrapper as O, DropdownStyled as E } from "./e5bcb9b0.js";
import { useContext as T, useState as p } from "react";
import "react-dom";
import "./be799735.js";
import "./0417d842.js";
import "./975a080d.js";
const j = d("table.columnValueTooltip"), f = ["none", "success", "error", "default", "warning", "processing"], k = {
  text: C,
  status: S(f, "none")
}, g = (t) => ({
  value: t.text,
  status: t.status
}), v = (t) => {
  const a = T(F), [o, r] = p(a), [u, c] = p(f), [h, i] = p(!1);
  return /* @__PURE__ */ n(O, {
    children: /* @__PURE__ */ n(m, {
      autoFocus: !0,
      defaultOpen: !0,
      variant: "borderless",
      optionLabelProp: "children",
      open: h,
      defaultValue: t.value.value,
      style: {
        width: "100%"
      },
      suffixIcon: /* @__PURE__ */ n(b, {}),
      showSearch: !0,
      onSearch: (e) => {
        var s;
        a.findIndex((l) => l.text.includes(e)) < 0 ? r([...a, {
          text: e,
          status: "none"
        }]) : r(a), t.onChange({
          value: e,
          status: ((s = o.find((l) => l.text === e)) == null ? void 0 : s.status) || "none"
        });
      },
      onChange: (e) => {
        var s;
        t.onChange({
          value: e,
          status: ((s = o.find((l) => l.text === e)) == null ? void 0 : s.status) || "none"
        }), i(!1);
      },
      dropdownRender: (e) => /* @__PURE__ */ n(E, {
        children: /* @__PURE__ */ n(y, {
          style: {
            maxHeight: "256px"
          },
          children: e
        })
      }),
      dropdownStyle: {
        marginTop: "7px",
        padding: "8px 0 6px 0"
      },
      onBlur: () => {
        t.onChangeEnd(), i(!1);
      },
      onFocus: () => {
        i(!0);
      },
      onClick: () => i(!h),
      children: u.map((e, s) => /* @__PURE__ */ n(m.Option, {
        value: e,
        children: e === "none" ? e : /* @__PURE__ */ n(x, {
          status: e,
          text: e
        })
      }, s))
    })
  });
}, M = function() {
  return new B(k, (t, a) => {
    var u, c;
    const o = ((u = t.changeValue) == null ? void 0 : u.value) ?? g(t).value, r = ((c = t.changeValue) == null ? void 0 : c.status) ?? g(t).status;
    return r === "none" ? o : /* @__PURE__ */ n(x, {
      status: r,
      text: o
    });
  }, (t) => [t.status.value, t.text.value].filter((a) => a).join(" "), g).setEditViewFn((t) => /* @__PURE__ */ n(v, {
    value: t.value,
    onChange: t.onChange,
    onChangeEnd: t.onChangeEnd
  })).setPropertyViewFn((t) => /* @__PURE__ */ w(V, {
    children: [t.text.propertyView({
      label: d("table.columnValue"),
      tooltip: j
    }), t.status.propertyView({
      label: d("table.status"),
      tooltip: d("table.statusTooltip")
    })]
  })).build();
}();
export {
  M as BadgeStatusComp,
  f as BadgeStatusOptions,
  j as ColumnValueTooltip
};
