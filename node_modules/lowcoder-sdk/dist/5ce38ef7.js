import { X as o, ah as i, F as a, cs as r, dm as c, bU as s, f5 as d, fl as h } from "./c988e26e.js";
import { getStyle as f } from "./7032c5eb.js";
import { useUIView as g } from "./89fd4803.js";
import u, { useContext as m } from "react";
import { timeZoneOptions as x } from "./8c5a44af.js";
import "react-dom";
const {
  RangePicker: C
} = h, y = o((e) => /* @__PURE__ */ a(C, {
  ...e
}))`
  width: 100%;
  ${(e) => e.$style && f(e.$style)}
`, I = o(d)`
  width: 100%; 
  margin: 10px 0px;
  .ant-select-selector {
    font-size: 14px;
    line-height: 1.5;
  }
`, R = u.lazy(() => import("./4fe456d5.js").then((e) => ({
  default: e.TimeRangeMobileUIView
}))), V = (e) => {
  const n = m(i);
  let l;
  return Array.isArray(e.placeholder) ? l = e.placeholder : l = [e.placeholder || "Start Date", e.placeholder || "End Date"], g(/* @__PURE__ */ a(R, {
    ...e
  }), /* @__PURE__ */ a(y, {
    ...r.omit(e, "onChange"),
    value: [e.start, e.end],
    order: !0,
    hideDisabledOptions: !0,
    onCalendarChange: (t) => {
      e.onChange(t == null ? void 0 : t[0], t == null ? void 0 : t[1]);
    },
    inputReadOnly: c(n == null ? void 0 : n.getAppSettings().maxWidth),
    suffixIcon: s(e.suffixIcon) && e.suffixIcon,
    placeholder: l,
    renderExtraFooter: () => e.timeZone === "UserChoice" && /* @__PURE__ */ a(I, {
      placeholder: "Select Time Zone",
      options: x.filter((t) => t.value !== "UserChoice"),
      defaultValue: "Etc/UTC",
      onChange: e.handleTimeRangeZoneChange
    })
  }));
};
export {
  V as TimeRangeUIView
};
