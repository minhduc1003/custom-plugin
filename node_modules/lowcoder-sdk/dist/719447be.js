import { a5 as a, Z as t, c6 as y, c7 as f, d7 as C, d2 as p, U as h, F as i, ac as v, ae as n, Y as u, bL as I, bS as g } from "./c988e26e.js";
import { SelectChildrenMap as F, SelectUIView as b, SelectPropertyView as w, baseSelectRefMethods as V } from "./fcc9e192.js";
import { useSelectInputValidate as x, SelectInputInvalidConfig as M, SelectInputCommonConfig as D } from "./d3b0afba.js";
import { useRef as E } from "react";
import { fixOldInputCompData as R } from "./70f9cad3.js";
import "react-dom";
import "./325a473d.js";
import "./33706f61.js";
import "./85e61f03.js";
let l = function() {
  const o = {
    ...F,
    defaultValue: a("defaultValue"),
    value: a("value"),
    style: t(y, "style"),
    labelStyle: t(f, "labelStyle"),
    inputFieldStyle: t(C, "inputFieldStyle"),
    childrenInputFieldStyle: t(p, "childrenInputFieldStyle")
  };
  return new h(o, (e, d) => {
    const [s, c] = x(e), r = E(e);
    r.current = e;
    const S = new Set(e.options.map((m) => m.value));
    return e.label({
      required: e.required,
      style: e.style,
      labelStyle: e.labelStyle,
      inputFieldStyle: e.inputFieldStyle,
      childrenInputFieldStyle: e.childrenInputFieldStyle,
      children: /* @__PURE__ */ i(b, {
        ...e,
        value: S.has(e.value.value) ? e.value.value : void 0,
        onChange: c,
        dispatch: d
      }),
      ...s
    });
  }).setPropertyViewFn((e) => /* @__PURE__ */ i(w, {
    ...e
  })).setExposeMethodConfigs(V).build();
}();
l = g(l, R);
const Z = v(l, [new n("value", u("selectInput.valueDesc")), new n("inputValue", u("select.inputValueDesc")), M, ...D, ...I]);
export {
  Z as SelectComp
};
