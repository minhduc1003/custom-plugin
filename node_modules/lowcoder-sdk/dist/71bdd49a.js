import { X as r, Y as o, F as t, gr as u, a8 as C, G as m, gs as g, bI as b, a4 as y, L as n, g0 as c, c$ as d, bU as l, gt as p } from "./c988e26e.js";
import { C as x } from "./5230605f.js";
import { ColumnValueTooltip as f } from "./0417d842.js";
import { getStyle as V } from "./2088ebd5.js";
import "react";
import "react-dom";
import "./be799735.js";
import "./975a080d.js";
import "./d3b0afba.js";
import "./85e61f03.js";
import "./36c2248f.js";
import "./70f9cad3.js";
const k = r(g)`
  ${(e) => e.$style && V(e.$style)}
`, w = r.div`
  background: transparent !important;
  padding: 0 8px;
`, F = r.span`
  // pointer-events: none;
  height: 22px;
  display: inline-block;
  svg {
    width: 14px;
    height: 22px;
    g {
      stroke: ${(e) => e.$ifChecked && e.$style.checkedBackground} !important;
    }
  }
`, v = [{
  label: o("table.empty"),
  value: ""
}, {
  label: "-",
  value: "-"
}, {
  label: /* @__PURE__ */ t(u, {
    width: 10,
    height: 10
  }),
  value: "x"
}], $ = {
  text: b,
  falseValues: y(v, ""),
  iconTrue: n,
  iconFalse: n,
  iconNull: n
}, s = (e) => e.text, B = (e) => {
  const i = c(d);
  return /* @__PURE__ */ t(w, {
    onBlur: () => e.onChangeEnd(),
    onKeyDown: (a) => {
      a.key === "Enter" && e.onChangeEnd();
    },
    children: /* @__PURE__ */ t(k, {
      autoFocus: !0,
      $style: i,
      defaultChecked: e.value,
      onChange: (a) => e.onChange(a.target.checked)
    })
  });
}, O = function() {
  return new x($, (e, i) => {
    const a = e.changeValue ?? s(e);
    return /* @__PURE__ */ t(() => {
      const h = c(d);
      return /* @__PURE__ */ t(F, {
        $style: h,
        $ifChecked: a,
        children: a === !0 ? l(e.iconTrue) ? e.iconTrue : /* @__PURE__ */ t(p, {}) : a === !1 ? l(e.iconFalse) ? e.iconFalse : e.falseValues === "x" ? /* @__PURE__ */ t(u, {}) : e.falseValues : l(e.iconNull) ? e.iconNull : "No Value"
      });
    }, {});
  }, (e) => e.text.value, s).setEditViewFn((e) => /* @__PURE__ */ t(B, {
    value: e.value,
    onChange: e.onChange,
    onChangeEnd: e.onChangeEnd
  })).setPropertyViewFn((e) => /* @__PURE__ */ C(m, {
    children: [e.text.propertyView({
      label: o("table.columnValue"),
      tooltip: f
    }), e.falseValues.propertyView({
      label: o("table.falseValues"),
      radioButton: !0
    }), e.iconTrue.propertyView({
      label: o("table.iconTrue")
    }), e.iconFalse.propertyView({
      label: o("table.iconFalse")
    }), e.iconNull.propertyView({
      label: o("table.iconNull")
    })]
  })).build();
}();
export {
  O as BooleanComp
};
