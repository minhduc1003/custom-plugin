import { c1 as n, c2 as W, c3 as X, c4 as p, P as ee, w as U, Y as o, S as C, bI as te, a3 as ae, O as R, c5 as x, Z as T, c6 as oe, az as ne, c7 as ie, c8 as le, L as re, a4 as se, N as me, a5 as b, U as D, dM as d, F as f, dN as P, bU as k, a8 as u, G as h, a9 as s, aa as m, ah as l, cd as z, cq as q, cr as H, bJ as K, ab as A, ac as j, ae as ue, cf as v, bL as B, cg as de, ch as ce, ci as fe, cj as ye, ck as Se, _ as ve, cl as ge, cm as he, cn as Ve } from "./c988e26e.js";
import { formDataChildren as O, FormDataPropertyView as L } from "./85e61f03.js";
import { useState as M, useEffect as E, useContext as r } from "react";
import { disabledTime as N, handleDateChange as be, dateRefMethods as _ } from "./7032c5eb.js";
import { TimeUIView as Te } from "./f0d61f39.js";
import { TimeRangeUIView as Ce } from "./5ce38ef7.js";
import { timeZoneOptions as we } from "./8c5a44af.js";
import "react-dom";
import "./89fd4803.js";
n.extend(W);
n.extend(X);
n.extend(p);
const Ze = [ce, fe, ye], xe = {
  required: R,
  minTime: C,
  maxTime: C,
  customRule: Se
}, $ = {
  label: ee,
  placeholder: U(C, o("time.placeholder")),
  format: C,
  disabled: te,
  onEvent: ae(Ze),
  showTime: R,
  use12Hours: R,
  hourStep: x.closed(1, 24, 1),
  minuteStep: x.closed(1, 60, 1),
  secondStep: x.closed(1, 60, 1),
  style: T(oe, "style"),
  animationStyle: T(ne, "animationStyle"),
  labelStyle: T(ie.filter((e) => ["accent", "validate"].includes(e.name) === !1), "labelStyle"),
  inputFieldStyle: T(le, "inputFieldStyle"),
  suffixIcon: U(re, "/icon:regular/clock"),
  timeZone: se(we, "Etc/UTC"),
  viewRef: me,
  ...xe
}, G = (e) => ve.pick(e, "format", "use12Hours", "minuteStep", "secondStep", "placeholder"), J = (e) => [ge(e), he(e), Ve(e)];
function V(e) {
  if (e.customRule)
    return {
      validateStatus: "error",
      help: e.customRule
    };
  const t = n(e.value.value, d);
  return e.required && !t.isValid() ? {
    validateStatus: "error",
    help: o("prop.required")
  } : {
    validateStatus: "success"
  };
}
const Re = {
  value: b("value"),
  userTimeZone: b("userTimeZone", "Etc/UTC"),
  ...$,
  ...O
}, Pe = new D(Re, (e) => {
  let t = null;
  e.value.value !== "" && (t = n(e.value.value, d));
  const [a, i] = M(t);
  E(() => {
    const c = e.value.value ? n(e.value.value, d) : null;
    i(c);
  }, [e.value.value]);
  const g = (c) => {
    e.userTimeZone.onChange(c);
  };
  return e.label({
    required: e.required,
    style: e.style,
    labelStyle: e.labelStyle,
    inputFieldStyle: e.inputFieldStyle,
    animationStyle: e.animationStyle,
    onMouseDown: (c) => c.stopPropagation(),
    children: /* @__PURE__ */ f(Te, {
      handleTimeZoneChange: g,
      timeZone: e == null ? void 0 : e.timeZone,
      viewRef: e.viewRef,
      $style: e.inputFieldStyle,
      disabled: e.disabled,
      value: a != null && a.isValid() ? a : null,
      disabledTime: () => N(e.minTime, e.maxTime),
      ...G(e),
      hourStep: e.hourStep,
      minuteStep: e.minuteStep,
      secondStep: e.secondStep,
      placeholder: e.placeholder,
      onChange: (c) => {
        be(c && c.isValid() ? c.format(P) : "", e.value.onChange, e.onEvent);
      },
      onFocus: () => e.onEvent("focus"),
      onBlur: () => e.onEvent("blur"),
      suffixIcon: k(e.suffixIcon) && e.suffixIcon
    }),
    ...V(e)
  });
}).setPropertyViewFn((e) => /* @__PURE__ */ u(h, {
  children: [/* @__PURE__ */ u(s, {
    name: m.basic,
    children: [e.value.propertyView({
      label: o("prop.defaultValue"),
      tooltip: o("time.formatTip")
    }), e.timeZone.propertyView({
      label: o("prop.timeZone")
    })]
  }), /* @__PURE__ */ f(L, {
    ...e
  }), (r(l).editorModeStatus === "logic" || r(l).editorModeStatus === "both") && /* @__PURE__ */ u(h, {
    children: [/* @__PURE__ */ u(s, {
      name: m.validation,
      children: [z(e), q(e), H(e), e.customRule.propertyView({})]
    }), /* @__PURE__ */ u(s, {
      name: m.interaction,
      children: [e.onEvent.getPropertyView(), K(e), A(e)]
    })]
  }), (r(l).editorModeStatus === "layout" || r(l).editorModeStatus === "both") && e.label.getPropertyView(), (r(l).editorModeStatus === "layout" || r(l).editorModeStatus === "both") && /* @__PURE__ */ u(s, {
    name: m.layout,
    children: [e.format.propertyView({
      label: o("time.format")
    }), e.placeholder.propertyView({
      label: o("time.placeholderText")
    })]
  }), (r(l).editorModeStatus === "logic" || r(l).editorModeStatus === "both") && /* @__PURE__ */ u(s, {
    name: m.advanced,
    children: [J(e), e.use12Hours.propertyView({
      label: o("prop.use12Hours")
    }), e.suffixIcon.propertyView({
      label: o("button.suffixIcon")
    })]
  }), (r(l).editorModeStatus === "layout" || r(l).editorModeStatus === "both") && /* @__PURE__ */ u(h, {
    children: [/* @__PURE__ */ f(s, {
      name: m.style,
      children: e.style.getPropertyView()
    }), /* @__PURE__ */ f(s, {
      name: m.labelStyle,
      children: e.labelStyle.getPropertyView()
    }), /* @__PURE__ */ f(s, {
      name: m.inputFieldStyle,
      children: e.inputFieldStyle.getPropertyView()
    }), /* @__PURE__ */ f(s, {
      name: m.animationStyle,
      hasTooltip: !0,
      children: e.animationStyle.getPropertyView()
    })]
  })]
})).setExposeMethodConfigs(_).build(), Me = function() {
  const e = {
    start: b("start"),
    end: b("end"),
    userRangeTimeZone: b("userRangeTimeZone", "Etc/UTC"),
    ...O,
    ...$
  };
  return new D(e, (t) => {
    let a = null;
    t.start.value !== "" && (a = n(t.start.value, d));
    let i = null;
    t.end.value !== "" && (i = n(t.end.value, d));
    const [g, c] = M(a), [S, Y] = M(i);
    E(() => {
      const y = t.start.value ? n(t.start.value, d) : null;
      c(y);
    }, [t.start.value]), E(() => {
      const y = t.end.value ? n(t.end.value, d) : null;
      Y(y);
    }, [t.end.value]);
    const Q = /* @__PURE__ */ f(Ce, {
      handleTimeRangeZoneChange: (y) => {
        t.userRangeTimeZone.onChange(y);
      },
      timeZone: t == null ? void 0 : t.timeZone,
      viewRef: t.viewRef,
      $style: t.inputFieldStyle,
      disabled: t.disabled,
      start: g != null && g.isValid() ? g : null,
      end: S != null && S.isValid() ? S : null,
      disabledTime: () => N(t.minTime, t.maxTime),
      ...G(t),
      hourStep: t.hourStep,
      minuteStep: t.minuteStep,
      secondStep: t.secondStep,
      placeholder: [t.placeholder, t.placeholder],
      onChange: (y, Z) => {
        t.start.onChange(y && y.isValid() ? y.format(P) : ""), t.end.onChange(Z && Z.isValid() ? Z.format(P) : ""), t.onEvent("change");
      },
      onFocus: () => t.onEvent("focus"),
      onBlur: () => t.onEvent("blur"),
      suffixIcon: k(t.suffixIcon) && t.suffixIcon
    }), w = V({
      ...t,
      value: t.start
    }), F = V({
      ...t,
      value: t.end
    });
    return t.label({
      required: t.required,
      style: t.style,
      labelStyle: t.labelStyle,
      inputFieldStyle: t.inputFieldStyle,
      animationStyle: t.animationStyle,
      children: Q,
      onMouseDown: (y) => y.stopPropagation(),
      ...w.validateStatus !== "success" ? w : F.validateStatus !== "success" ? F : w
    });
  }).setPropertyViewFn((t) => /* @__PURE__ */ u(h, {
    children: [/* @__PURE__ */ u(s, {
      name: m.basic,
      children: [t.start.propertyView({
        label: o("time.start"),
        tooltip: o("time.formatTip")
      }), t.end.propertyView({
        label: o("time.end"),
        tooltip: o("time.formatTip")
      }), t.timeZone.propertyView({
        label: o("prop.timeZone")
      })]
    }), /* @__PURE__ */ f(L, {
      ...t
    }), (r(l).editorModeStatus === "logic" || r(l).editorModeStatus === "both") && /* @__PURE__ */ u(h, {
      children: [/* @__PURE__ */ u(s, {
        name: m.validation,
        children: [z(t), q(t), H(t), t.customRule.propertyView({})]
      }), /* @__PURE__ */ u(s, {
        name: m.interaction,
        children: [t.onEvent.getPropertyView(), K(t), A(t)]
      })]
    }), (r(l).editorModeStatus === "layout" || r(l).editorModeStatus === "both") && t.label.getPropertyView(), (r(l).editorModeStatus === "layout" || r(l).editorModeStatus === "both") && /* @__PURE__ */ u(s, {
      name: m.layout,
      children: [t.format.propertyView({
        label: o("time.format")
      }), t.placeholder.propertyView({
        label: o("time.placeholderText")
      })]
    }), (r(l).editorModeStatus === "logic" || r(l).editorModeStatus === "both") && /* @__PURE__ */ u(s, {
      name: m.advanced,
      children: [J(t), t.use12Hours.propertyView({
        label: o("prop.use12Hours")
      }), t.suffixIcon.propertyView({
        label: o("button.suffixIcon")
      })]
    }), (r(l).editorModeStatus === "layout" || r(l).editorModeStatus === "both") && /* @__PURE__ */ u(h, {
      children: [/* @__PURE__ */ f(s, {
        name: m.style,
        children: t.style.getPropertyView()
      }), /* @__PURE__ */ f(s, {
        name: m.labelStyle,
        children: t.labelStyle.getPropertyView()
      }), /* @__PURE__ */ f(s, {
        name: m.inputFieldStyle,
        children: t.inputFieldStyle.getPropertyView()
      }), /* @__PURE__ */ f(s, {
        name: m.animationStyle,
        hasTooltip: !0,
        children: t.animationStyle.getPropertyView()
      })]
    })]
  })).build();
}(), Ae = j(Pe, [new ue("value", o("export.timePickerValueDesc")), v({
  name: "formattedValue",
  desc: o("export.timePickerFormattedValueDesc"),
  depKeys: ["value", "format", "timeZone", "userTimeZone"],
  func: (e) => {
    let t = null;
    for (const i of d)
      if (n.utc(e.value, i).isValid()) {
        t = n.utc(e.value, i);
        break;
      }
    const a = e.timeZone === "UserChoice" ? e.userTimeZone : e.timeZone || "UTC";
    return t != null && t.isValid() ? t.tz(a).format(e.format) : "";
  }
}), v({
  name: "timeZone",
  desc: o("export.timeZoneDesc"),
  depKeys: ["timeZone", "userTimeZone"],
  func: (e) => e.timeZone === "UserChoice" ? e.userTimeZone : e.timeZone || "UTC"
}), v({
  name: "invalid",
  desc: o("export.invalidDesc"),
  depKeys: ["value", "required", "minTime", "maxTime", "customRule"],
  func: (e) => V({
    ...e,
    value: {
      value: e.value
    }
  }).validateStatus !== "success"
}), ...B]);
let I = j(Me, [
  // new NameConfig("start", trans("export.timeRangeStartDesc")),
  // new NameConfig("end", trans("export.timeRangeEndDesc")),
  v({
    name: "start",
    desc: o("export.timeRangeStartDesc"),
    depKeys: ["start", "timeZone", "userRangeTimeZone"],
    func: (e) => {
      let t = null;
      for (const i of d)
        if (n.utc(e.start, i).isValid()) {
          t = n.utc(e.start, i);
          break;
        }
      (t == null ? void 0 : t.hour()) === 0 && (t == null ? void 0 : t.minute()) === 0 && (t == null ? void 0 : t.second()) === 0 && (t = t == null ? void 0 : t.hour(12));
      const a = e.timeZone === "UserChoice" ? e.userRangeTimeZone : e.timeZone || "UTC";
      return t != null && t.isValid() ? t.tz(a).format(e.format || "HH:mm:ss") : null;
    }
  }),
  v({
    name: "end",
    desc: o("export.timeRangeEndDesc"),
    depKeys: ["end", "timeZone", "userRangeTimeZone"],
    func: (e) => {
      let t = null;
      for (const i of d)
        if (n.utc(e.end, i).isValid()) {
          t = n.utc(e.end, i);
          break;
        }
      const a = e.timeZone === "UserChoice" ? e.userRangeTimeZone : e.timeZone || "UTC";
      return t != null && t.isValid() ? t.tz(a).format(e.format || "HH:mm:ss") : null;
    }
  }),
  v({
    name: "formattedValue",
    desc: o("export.timeRangeFormattedValueDesc"),
    depKeys: ["start", "end", "format", "timeZone", "userRangeTimeZone"],
    func: (e) => {
      let t = null, a = null;
      for (const S of d)
        if (n.utc(e.start, S).isValid()) {
          t = n.utc(e.start, S);
          break;
        }
      for (const S of d)
        if (n.utc(e.end, S).isValid()) {
          a = n.utc(e.end, S);
          break;
        }
      const i = e.timeZone === "UserChoice" ? e.userRangeTimeZone : e.timeZone || "UTC", g = t != null && t.isValid() ? t.tz(i).format(e.format) : "", c = a != null && a.isValid() ? a.tz(i).format(e.format) : "";
      return [g, c].filter(Boolean).join(" - ");
    }
  }),
  v({
    name: "formattedStartValue",
    desc: o("export.timeRangeFormattedStartValueDesc"),
    depKeys: ["start", "format", "timeZone", "userRangeTimeZone"],
    func: (e) => {
      let t = null;
      for (const i of d)
        if (n.utc(e.start, i).isValid()) {
          t = n.utc(e.start, i);
          break;
        }
      const a = e.timeZone === "UserChoice" ? e.userRangeTimeZone : e.timeZone || "UTC";
      return t != null && t.isValid() ? t.tz(a).format(e.format) : "";
    }
  }),
  v({
    name: "formattedEndValue",
    desc: o("export.timeRangeFormattedEndValueDesc"),
    depKeys: ["end", "format", "timeZone", "userRangeTimeZone"],
    func: (e) => {
      let t = null;
      for (const i of d)
        if (n.utc(e.end, i).isValid()) {
          t = n.utc(e.end, i);
          break;
        }
      const a = e.timeZone === "UserChoice" ? e.userRangeTimeZone : e.timeZone || "UTC";
      return t != null && t.isValid() ? t.tz(a).format(e.format) : "";
    }
  }),
  v({
    name: "timeZone",
    desc: o("export.timeZoneDesc"),
    depKeys: ["timeZone", "userRangeTimeZone"],
    func: (e) => e.timeZone === "UserChoice" ? e.userRangeTimeZone : e.timeZone || "UTC"
  }),
  v({
    name: "invalid",
    desc: o("export.invalidDesc"),
    depKeys: ["start", "end", "required", "minTime", "maxTime", "customRule"],
    func: (e) => {
      const t = V({
        ...e,
        value: {
          value: e.start
        }
      }).validateStatus !== "success", a = V({
        ...e,
        value: {
          value: e.end
        }
      }).validateStatus !== "success";
      return t || a;
    }
  }),
  ...B
]);
I = de(I, [..._, {
  method: {
    name: "clearAll",
    description: o("date.clearAllDesc"),
    params: []
  },
  execute: (e) => {
    e.children.start.getView().onChange(""), e.children.end.getView().onChange("");
  }
}, {
  method: {
    name: "resetAll",
    description: o("date.resetAllDesc"),
    params: []
  },
  execute: (e) => {
    e.children.start.getView().reset(), e.children.end.getView().reset();
  }
}, {
  method: {
    name: "setRange",
    params: []
  },
  execute: (e, t) => {
    if (t.length !== 1)
      return Promise.reject(o("formComp.valuesLengthError"));
    const a = t[0];
    if (typeof a != "object" || a === null || Array.isArray(a) || !a.hasOwnProperty("start") || !a.hasOwnProperty("end"))
      return Promise.reject(o("formComp.valueTypeError"));
    e.children.start.getView().onChange(a.start), e.children.end.getView().onChange(a.end);
  }
}]);
export {
  Ae as TimePickerComp,
  I as TimeRangeComp,
  Pe as timePickerControl,
  Me as timeRangeControl
};
