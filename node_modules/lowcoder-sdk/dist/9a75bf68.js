import { ft as r, _ as l, a8 as o, G as d, Y as a, ab as h, fu as p, dZ as c, S as m, bI as s, w as u, a3 as v, fv as g, ag as C } from "./c988e26e.js";
import "react";
import "react-dom";
const V = [C], b = {
  label: m,
  hidden: s,
  active: s,
  onEvent: u(v(V), [{
    // name: "click",
    name: "click",
    handler: {
      compType: "openAppPage"
    }
  }])
};
class I extends r {
  getView() {
    return l.mapValues(this.children, (e) => e.getView());
  }
  getPropertyView() {
    return /* @__PURE__ */ o(d, {
      children: [this.children.label.propertyView({
        label: a("label")
      }), h(this.children), this.children.active.propertyView({
        label: a("navItemComp.active")
      }), this.children.onEvent.propertyView({
        inline: !0
      })]
    });
  }
  parseChildrenFromValue(e) {
    return p(e, {
      ...b,
      items: w()
    });
  }
  ignoreChildDefaultValue() {
    return !0;
  }
  addSubItem(e) {
    this.children.items.addItem(e);
  }
  exposingNode() {
    return c({
      label: this.children.label.exposingNode(),
      hidden: this.children.hidden.exposingNode(),
      active: this.children.active.exposingNode(),
      items: this.children.items.exposingNode()
    });
  }
}
function w() {
  const n = g(I);
  return class extends n {
    addItem(t) {
      const i = this.getView();
      this.dispatch(this.pushAction(t || {
        label: a("menuItem") + " " + (i.length + 1)
      }));
    }
    deleteItem(t) {
      this.dispatch(this.deleteAction(t));
    }
    moveItem(t, i) {
      this.dispatch(this.arrayMoveAction(t, i));
    }
  };
}
export {
  I as NavItemComp,
  w as navListComp
};
