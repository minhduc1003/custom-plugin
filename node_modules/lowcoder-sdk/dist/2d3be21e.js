import { X as p, N as c, O as S, Z as n, c6 as x, c7 as w, L as f, dC as C, az as I, U as b, F as t, bU as m, a8 as s, G as u, ah as y, a9 as a, aa as o, ab as g, Y as r, dD as h, dE as V, ae as F, dF as P, dG as $, bS as M, dH as T } from "./c988e26e.js";
import { useContext as d } from "react";
import { FormDataPropertyView as v } from "./85e61f03.js";
import { getStyle as D, textInputChildren as N, useTextInputProps as R, TextInputBasicSection as B, TextInputInteractionSection as E, TextInputValidationSection as O, inputRefMethods as q, TextInputConfigs as L, fixOldInputCompData as U } from "./70f9cad3.js";
import "react-dom";
const j = p(T)`
  box-shadow: ${(e) => {
  var l, i;
  return `${(l = e.$style) == null ? void 0 : l.boxShadow} ${(i = e.$style) == null ? void 0 : i.boxShadowColor}`;
}};
  ${(e) => e.$style && D(e.$style)}
`, G = {
  ...N,
  viewRef: c,
  showCount: S,
  allowClear: S,
  style: n(x, "style"),
  labelStyle: n(w, "labelStyle"),
  prefixIcon: f,
  suffixIcon: f,
  inputFieldStyle: n(C, "inputFieldStyle"),
  animationStyle: n(I, "animationStyle")
};
let H = new b(G, (e) => {
  const [l, i] = R(e);
  return e.label({
    required: e.required,
    children: /* @__PURE__ */ t(j, {
      ...l,
      ref: e.viewRef,
      showCount: e.showCount,
      allowClear: e.allowClear,
      $style: e.inputFieldStyle,
      prefix: m(e.prefixIcon) && e.prefixIcon,
      suffix: m(e.suffixIcon) && e.suffixIcon
    }),
    style: e.style,
    labelStyle: e.labelStyle,
    inputFieldStyle: e.inputFieldStyle,
    animationStyle: e.animationStyle,
    ...i
  });
}).setPropertyViewFn((e) => /* @__PURE__ */ s(u, {
  children: [/* @__PURE__ */ t(B, {
    ...e
  }), /* @__PURE__ */ t(v, {
    ...e
  }), ["layout", "both"].includes(d(y).editorModeStatus) && e.label.getPropertyView(), ["logic", "both"].includes(d(y).editorModeStatus) && /* @__PURE__ */ s(u, {
    children: [/* @__PURE__ */ t(E, {
      ...e
    }), /* @__PURE__ */ t(a, {
      name: o.layout,
      children: g(e)
    }), /* @__PURE__ */ s(a, {
      name: o.advanced,
      children: [e.prefixIcon.propertyView({
        label: r("button.prefixIcon")
      }), e.suffixIcon.propertyView({
        label: r("button.suffixIcon")
      }), e.showCount.propertyView({
        label: r("prop.showCount")
      }), h(e), V(e)]
    }), /* @__PURE__ */ t(O, {
      ...e
    })]
  }), ["layout", "both"].includes(d(y).editorModeStatus) && /* @__PURE__ */ s(u, {
    children: [/* @__PURE__ */ t(a, {
      name: o.style,
      children: e.style.getPropertyView()
    }), /* @__PURE__ */ t(a, {
      name: o.labelStyle,
      children: e.labelStyle.getPropertyView()
    }), /* @__PURE__ */ t(a, {
      name: o.inputFieldStyle,
      children: e.inputFieldStyle.getPropertyView()
    }), /* @__PURE__ */ t(a, {
      name: o.animationStyle,
      hasTooltip: !0,
      children: e.animationStyle.getPropertyView()
    })]
  })]
})).setExposeMethodConfigs(q).setExposeStateConfigs([new F("value", r("export.inputValueDesc")), P, $, ...L]).build();
const Z = M(H, U);
export {
  Z as InputComp
};
