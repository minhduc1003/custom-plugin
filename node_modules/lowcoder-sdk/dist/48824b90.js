import { X as g, ja as V, _ as F, F as a, jb as $, N as A, O as I, w as v, aA as E, Z as m, c6 as N, c7 as D, dC as H, az as M, U, a8 as c, G as S, ah as h, a9 as r, aa as s, ab as _, dD as j, dE as B, cg as R, cS as q, db as G, cU as L, ac as O, ae as z, Y as W, dF as k, dG as X, bS as Y } from "./c988e26e.js";
import Z, { useState as J, useRef as w, useEffect as K, useContext as x } from "react";
import { FormDataPropertyView as Q } from "./85e61f03.js";
import { getStyle as ee, textInputChildren as te, useTextInputProps as ae, TextInputBasicSection as le, TextInputInteractionSection as oe, TextInputValidationSection as ie, TextInputConfigs as ne, fixOldInputCompData as re } from "./70f9cad3.js";
import "react-dom";
const se = g(V)``;
function ue(t, e) {
  const {
    onChange: i,
    value: u,
    debounce: f = $,
    ...b
  } = t, [T, C] = J(u), y = w(0), n = w(i);
  n.current = i;
  const p = w(f > 0 ? F.debounce((l) => {
    var o;
    window.clearTimeout(y.current), y.current = window.setTimeout(() => y.current = 0, 100), (o = n.current) == null || o.call(n, l);
  }, f) : (l) => {
    var o;
    return (o = n.current) == null ? void 0 : o.call(n, l);
  }), P = (l) => {
    var o;
    C(l.target.value), (o = p.current) == null || o.call(p, l);
  };
  return K(() => {
    y.current || C(u);
  }, [u]), /* @__PURE__ */ a(se, {
    ref: e,
    value: T,
    placeholder: t.placeholder,
    onChange: (l) => P(l),
    ...b
  });
}
const ce = Z.forwardRef(ue), de = g(ce)`
  box-shadow: ${(t) => {
  var e, i;
  return `${(e = t.$style) == null ? void 0 : e.boxShadow} ${(i = t.$style) == null ? void 0 : i.boxShadowColor}`;
}};
  ${(t) => t.$style && ee(t.$style)}
`, ye = g.div`
  height: 100% !important;
  
  .ant-input { 
    height:100% !important;
  }

  .ant-input-clear-icon {
    opacity: 0.75;
    color: ${(t) => t.$style.text};
    top: 10px;

    &:hover {
      opacity: 0.9;
      color: ${(t) => t.$style.text};
    }
  }
`;
let d = function() {
  const t = {
    ...te,
    viewRef: A,
    allowClear: I,
    autoHeight: v(E, "fixed"),
    style: m(N, "style"),
    labelStyle: m(D, "labelStyle"),
    inputFieldStyle: m(H, "inputFieldStyle"),
    animationStyle: m(M, "animationStyle")
  };
  return new U(t, (e) => {
    const [i, u] = ae(e);
    return e.label({
      required: e.required,
      inputFieldStyle: e.inputFieldStyle,
      children: /* @__PURE__ */ a(ye, {
        $style: e.inputFieldStyle,
        children: /* @__PURE__ */ a(de, {
          ...i,
          ref: e.viewRef,
          allowClear: e.allowClear,
          style: {
            height: "100% !important",
            resize: "vertical"
          },
          $style: e.inputFieldStyle
        })
      }),
      style: e.style,
      labelStyle: e.labelStyle,
      animationStyle: e.animationStyle,
      ...u
    });
  }).setPropertyViewFn((e) => /* @__PURE__ */ c(S, {
    children: [/* @__PURE__ */ a(le, {
      ...e
    }), /* @__PURE__ */ a(Q, {
      ...e
    }), ["layout", "both"].includes(x(h).editorModeStatus) && e.label.getPropertyView(), ["logic", "both"].includes(x(h).editorModeStatus) && /* @__PURE__ */ c(S, {
      children: [/* @__PURE__ */ a(oe, {
        ...e
      }), /* @__PURE__ */ c(r, {
        name: s.layout,
        children: [e.autoHeight.getPropertyView(), _(e)]
      }), /* @__PURE__ */ c(r, {
        name: s.advanced,
        children: [j(e), B(e)]
      }), /* @__PURE__ */ a(ie, {
        ...e
      })]
    }), ["layout", "both"].includes(x(h).editorModeStatus) && /* @__PURE__ */ c(S, {
      children: [/* @__PURE__ */ a(r, {
        name: s.style,
        children: e.style.getPropertyView()
      }), /* @__PURE__ */ a(r, {
        name: s.labelStyle,
        children: e.labelStyle.getPropertyView()
      }), /* @__PURE__ */ a(r, {
        name: s.inputFieldStyle,
        children: e.inputFieldStyle.getPropertyView()
      }), /* @__PURE__ */ a(r, {
        name: s.animationStyle,
        hasTooltip: !0,
        children: e.animationStyle.getPropertyView()
      })]
    })]
  })).build();
}();
d = class extends d {
  autoHeight() {
    return this.children.autoHeight.getView();
  }
};
d = Y(d, re);
const me = R(d, q([G, L])), ge = O(me, [new z("value", W("export.inputValueDesc")), k, X, ...ne]);
export {
  ge as TextAreaComp
};
