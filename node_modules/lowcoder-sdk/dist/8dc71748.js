import { X as u, Y as t, w as c, cI as y, a3 as m, Z as n, eq as p, az as f, O as l, U as C, F as a, a8 as s, G as h, a9 as o, aa as i, ah as r, ab as v, ac as w, ae as S, ad as g, er as b } from "./c988e26e.js";
import { useContext as d } from "react";
import { mediaCommonChildren as P, mediaMethods as E } from "./2856edc9.js";
import "react-dom";
const x = u.div`
${(e) => e.$style};
rotate:${(e) => e.$style.rotation};
${(e) => e.$animationStyle};
  height: 100%;
  width: 100%;
  display: flex;
  align-items: center;
  justify-content: center;

  div > audio {
    object-fit: contain;
    pointer-events: auto;
    height: 100%;
    width: 100%;
    :focus-visible {
      outline: 0px;
    }
  }
`, V = [{
  label: t("audio.play"),
  value: "play",
  description: t("audio.playDesc")
}, {
  label: t("audio.pause"),
  value: "pause",
  description: t("audio.pauseDesc")
}, {
  label: t("audio.ended"),
  value: "ended",
  description: t("audio.endedDesc")
}], $ = (e) => /* @__PURE__ */ a(x, {
  ref: e.containerRef,
  $style: e.style,
  $animationStyle: e.animationStyle,
  children: /* @__PURE__ */ a(b, {
    audioRef: e.viewRef,
    url: e.src.value,
    onPlay: () => e.onEvent("play"),
    onPause: () => e.onEvent("pause"),
    onEnded: () => e.onEvent("ended"),
    autoPlay: e.autoPlay,
    loop: e.loop
  })
}), A = {
  src: c(y, t("audio.defaultSrcUrl")),
  onEvent: m(V),
  style: n(p, "style"),
  animationStyle: n(f, "animationStyle"),
  autoPlay: l,
  loop: l,
  ...P
};
let D = function() {
  return new C(A, (e) => /* @__PURE__ */ a($, {
    ...e
  })).setPropertyViewFn((e) => /* @__PURE__ */ s(h, {
    children: [/* @__PURE__ */ a(o, {
      name: i.basic,
      children: e.src.propertyView({
        label: t("audio.src"),
        tooltip: t("audio.srcDesc")
      })
    }), (d(r).editorModeStatus === "logic" || d(r).editorModeStatus === "both") && /* @__PURE__ */ s(o, {
      name: i.interaction,
      children: [e.onEvent.getPropertyView(), v(e), e.autoPlay.propertyView({
        label: t("audio.autoPlay")
      }), e.loop.propertyView({
        label: t("audio.loop")
      })]
    }), /* @__PURE__ */ a(o, {
      name: i.style,
      children: e.style.getPropertyView()
    }), /* @__PURE__ */ a(o, {
      name: i.animationStyle,
      hasTooltip: !0,
      children: e.animationStyle.getPropertyView()
    })]
  })).setExposeMethodConfigs(E()).build();
}();
const N = w(D, [new S("src", t("audio.srcDesc")), g]);
export {
  N as AudioComp
};
