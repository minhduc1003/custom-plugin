import { av as n, cW as b, cX as c, X as u, cY as d, P as k, bI as x, cZ as f, c_ as $, Z as a, c6 as m, c7 as s, a4 as g, N as v, c$ as p, az as C, U as S, F as i, ac as w, ae as B, Y as W, bL as I, d0 as F, bS as D } from "./c988e26e.js";
import { SelectInputValidationChildren as E, useSelectInputValidate as R, selectDivRefMethods as V, SelectInputInvalidConfig as z } from "./d3b0afba.js";
import { formDataChildren as L } from "./85e61f03.js";
import { RadioLayoutOptions as O, RadioPropertyView as y } from "./36c2248f.js";
import "react";
import { fixOldInputCompData as M } from "./70f9cad3.js";
import "react-dom";
const N = (e) => n`
    .ant-checkbox-wrapper:not(.ant-checkbox-wrapper-disabled) {
      color: ${e.staticText};
      max-width: calc(100% - 8px);

      span:not(.ant-checkbox) {
        ${b};
      }

      .ant-checkbox .ant-checkbox-checked > .ant-checkbox-inner {
        border-color: ${e.checkedBorder};
        border-width:${e.borderWidth ? e.borderWidth : "2px"};
      }

      .ant-checkbox:not(.ant-checkbox-checked) > .ant-checkbox-inner{
        border-color: ${e.uncheckedBorder};
        border-width:${e.borderWidth ? e.borderWidth : "2px"};
      }

      .ant-checkbox-checked:not(.ant-checkbox-disabled) {
        .ant-checkbox-inner {
          background-color: ${e.checkedBackground};
          border-color: ${e.checkedBorder};
          border-width:${e.borderWidth ? e.borderWidth : "2px"};

          &::after {
            border-color: ${e.checked};
          }
        }

        &::after {
          border-color: ${e.checkedBorder};
          border-width:${e.borderWidth ? e.borderWidth : "2px"};
          border-radius: ${e.radius};
        }
      }
      
      .ant-checkbox-inner) {
        background-color: ${e.uncheckedBackground};
        border-radius: ${e.radius};
        border-color: ${e.checkedBorder};
        border-width:${e.borderWidth ? e.borderWidth : "2px"};
      }
    
      &:hover .ant-checkbox-inner, 
      .ant-checkbox:hover .ant-checkbox-inner,
      .ant-checkbox-input + ant-checkbox-inner {
        ${e.hoverBackground && `background-color: ${e.hoverBackground}`};
        ${e.hoverBackground && `border-color: ${e.hoverBackground}`};
      }

      

      &:hover .ant-checkbox-inner,
      .ant-checkbox:hover .ant-checkbox-inner,
      .ant-checkbox-input:focus + .ant-checkbox-inner {
        border-color: ${e.checkedBorder};
        border-width:${e.borderWidth ? e.borderWidth : "2px"};
      }

      &:hover .ant-checkbox-checked:not(.ant-checkbox-disabled) .ant-checkbox-inner {
        background-color: ${e.hoverBackground || c(e.checkedBackground, 0.1)};
        border-color: ${e.hoverBackground || c(e.checkedBackground, 0.1)};
      }
    }

    

    .ant-checkbox-group-item {
      font-family:${e.fontFamily};
      font-size:${e.textSize};
      font-weight:${e.textWeight};
      font-style:${e.fontStyle};
      text-transform:${e.textTransform};
      text-decoration:${e.textDecoration};
    }
    .ant-checkbox-wrapper {
      padding: ${e.padding};
      .ant-checkbox-inner,
      .ant-checkbox-checked::after {
        border-radius: ${e.radius};
      }
    }
  `, P = u(F)`
  min-height: 32px;
  ${(e) => e.$style && N(e.$style)}
  ${(e) => {
  if (e.$layout === "horizontal")
    return n`
        display: flex;
        align-items: center;
        flex-wrap: wrap;
      `;
  if (e.$layout === "vertical")
    return n`
        display: flex;
        flex-direction: column;
      `;
  if (e.$layout === "auto_columns")
    return n`
        break-inside: avoid;
        columns: 160px;
      `;
}}
`;
let t = function() {
  const e = {
    defaultValue: d("defaultValue"),
    value: d("value"),
    label: k,
    disabled: x,
    onEvent: f,
    options: $,
    style: a(m, "style"),
    labelStyle: a(s.filter((o) => ["accent", "validate", "lineheight"].includes(o.name) === !1), "labelStyle"),
    layout: g(O, "horizontal"),
    viewRef: v,
    inputFieldStyle: a(p, "inputFieldStyle"),
    animationStyle: a(C, "animationStyle"),
    ...E,
    ...L
  };
  return new S(e, (o) => {
    const [l, h] = R(o);
    return o.label({
      required: o.required,
      style: o.style,
      labelStyle: o.labelStyle,
      inputFieldStyle: o.inputFieldStyle,
      animationStyle: o.animationStyle,
      children: /* @__PURE__ */ i(P, {
        ref: o.viewRef,
        disabled: o.disabled,
        value: o.value.value,
        $style: o.inputFieldStyle,
        $layout: o.layout,
        options: o.options.filter((r) => r.value !== void 0 && !r.hidden).map((r) => ({
          label: r.label,
          value: r.value,
          disabled: r.disabled
        })),
        onChange: (r) => {
          h(r);
        }
      }),
      ...l
    });
  }).setPropertyViewFn((o) => /* @__PURE__ */ i(y, {
    ...o
  })).setExposeMethodConfigs(V).build();
}();
t = D(t, M);
const Z = w(t, [new B("value", W("selectInput.valueDesc")), z, ...I]);
export {
  Z as CheckboxComp,
  N as getStyle
};
