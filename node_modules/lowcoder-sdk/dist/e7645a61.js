import { X as k, bI as E, eX as I, w as c, s as W, df as A, aA as j, O as P, Z as C, eY as N, eZ as U, az as _, a2 as m, U as F, F as s, a8 as p, G as L, a9 as u, aa as g, Y as a, ah as b, bJ as J, ab as X, bO as x, ac as Y, ad as Z, e_ as q, e$ as K, dk as Q, dn as ee, bW as te, dq as oe, dr as v, ds as ne, dt as ae, du as R, _ as M, cG as re, x as ie, dv as se, dw as le, dx as H } from "./c988e26e.js";
import { useContext as S } from "react";
import "react-dom";
const ce = k(q)`
  ${(e) => e.$animationStyle}
  height: 100%;
  border-radius: ${(e) => {
  var t;
  return (t = e.$style) == null ? void 0 : t.radius;
}};
  border-width: ${(e) => {
  var t;
  return (t = e.$style) == null ? void 0 : t.borderWidth;
}};
  border-color: ${(e) => {
  var t;
  return (t = e.$style) == null ? void 0 : t.border;
}};
  border-style: ${(e) => {
  var t;
  return (t = e.$style) == null ? void 0 : t.borderStyle;
}};
  padding: ${(e) => e.$style.padding};
  background-color: ${(e) => e.$style.background};
  overflow-x: auto;
  rotate: ${(e) => e.$style.rotation}
`, ue = k(K)`
  display: flex;
  flex-direction: column;
  flex-basis: ${(e) => e.$minWidth};
  max-width: ${(e) => e.$minWidth};

  > div {
    height: ${(e) => e.$matchColumnsHeight ? "100%" : "auto"};
    background-color: ${(e) => {
  var t;
  return (t = e.$style) == null ? void 0 : t.background;
}} !important;
    border-radius: ${(e) => {
  var t;
  return (t = e.$style) == null ? void 0 : t.radius;
}};
    border-width: ${(e) => {
  var t;
  return (t = e.$style) == null ? void 0 : t.borderWidth;
}}px;
    border-color: ${(e) => {
  var t;
  return (t = e.$style) == null ? void 0 : t.border;
}};
    border-style: ${(e) => {
  var t;
  return (t = e.$style) == null ? void 0 : t.borderStyle;
}};
    margin: ${(e) => {
  var t;
  return (t = e.$style) == null ? void 0 : t.margin;
}};
    padding: ${(e) => {
  var t;
  return (t = e.$style) == null ? void 0 : t.padding;
}};
  }
`, de = {
  disabled: E,
  columns: I,
  containers: c(W(Q), {
    0: {
      view: {},
      layout: {}
    },
    1: {
      view: {},
      layout: {}
    }
  }),
  horizontalGridCells: A,
  autoHeight: j,
  rowBreak: c(P, !1),
  matchColumnsHeight: c(P, !0),
  style: C(N, "style"),
  columnStyle: C(U, "columnStyle"),
  animationStyle: C(_, "animationStyle"),
  columnPerRowLG: c(m, 4),
  columnPerRowMD: c(m, 2),
  columnPerRowSM: c(m, 1),
  verticalSpacing: c(m, 8),
  horizontalSpacing: c(m, 8)
}, pe = (e) => /* @__PURE__ */ s(se, {
  ...e,
  emptyRows: 15,
  hintPlaceholder: le,
  radius: e.style.radius,
  style: e.style
}), me = (e) => {
  let {
    columns: t,
    containers: r,
    dispatch: i,
    rowBreak: n,
    matchColumnsHeight: d,
    style: o,
    columnStyle: O,
    columnPerRowLG: $,
    columnPerRowMD: V,
    columnPerRowSM: y,
    verticalSpacing: T,
    horizontalSpacing: G,
    animationStyle: z,
    horizontalGridCells: B
  } = e;
  return /* @__PURE__ */ s(ee.Provider, {
    value: e.style.background,
    children: /* @__PURE__ */ s(te.Provider, {
      value: e.disabled,
      children: /* @__PURE__ */ s("div", {
        style: {
          padding: o.margin,
          height: "100%"
        },
        children: /* @__PURE__ */ s(ce, {
          $style: o,
          $animationStyle: z,
          wrap: n,
          gutter: [G, T],
          children: t.map((f) => {
            const h = String(f.id), D = H(H(i, "containers"), h);
            if (!r[h])
              return null;
            const w = r[h].children, l = t.length;
            return /* @__PURE__ */ s(ue, {
              lg: 24 / (l < $ ? l : $),
              md: 24 / (l < V ? l : V),
              sm: 24 / (l < y ? l : y),
              xs: 24 / (l < y ? l : y),
              $style: e.columnStyle,
              $minWidth: f.minWidth,
              $matchColumnsHeight: d,
              children: /* @__PURE__ */ s(pe, {
                layout: w.layout.getView(),
                items: oe(w.items.getView()),
                positionParams: w.positionParams.getView(),
                dispatch: D,
                autoHeight: e.autoHeight,
                horizontalGridCells: B,
                style: O
              })
            }, h);
          })
        })
      })
    })
  });
}, ye = function() {
  return new F(de, (e, t) => /* @__PURE__ */ s(me, {
    ...e,
    dispatch: t
  })).setPropertyViewFn((e) => /* @__PURE__ */ p(L, {
    children: [/* @__PURE__ */ s(u, {
      name: g.basic,
      children: e.columns.propertyView({
        title: a("responsiveLayout.column"),
        newOptionLabel: "Column"
      })
    }), (S(b).editorModeStatus === "logic" || S(b).editorModeStatus === "both") && /* @__PURE__ */ p(u, {
      name: g.interaction,
      children: [J(e), X(e)]
    }), ["layout", "both"].includes(S(b).editorModeStatus) && /* @__PURE__ */ p(L, {
      children: [/* @__PURE__ */ p(u, {
        name: g.layout,
        children: [e.autoHeight.getPropertyView(), e.horizontalGridCells.propertyView({
          label: a("prop.horizontalGridCells")
        })]
      }), /* @__PURE__ */ p(u, {
        name: a("responsiveLayout.rowLayout"),
        children: [e.rowBreak.propertyView({
          label: a("responsiveLayout.rowBreak")
        }), x({}, /* @__PURE__ */ s("div", {
          style: {
            marginTop: "8px"
          },
          children: a("responsiveLayout.columnsPerRow")
        })), e.columnPerRowLG.propertyView({
          label: a("responsiveLayout.desktop")
        }), e.columnPerRowMD.propertyView({
          label: a("responsiveLayout.tablet")
        }), e.columnPerRowSM.propertyView({
          label: a("responsiveLayout.mobile")
        })]
      }), /* @__PURE__ */ p(u, {
        name: a("responsiveLayout.columnsLayout"),
        children: [e.matchColumnsHeight.propertyView({
          label: a("responsiveLayout.matchColumnsHeight")
        }), x({}, /* @__PURE__ */ s("div", {
          style: {
            marginTop: "8px"
          },
          children: a("responsiveLayout.columnsSpacing")
        })), e.horizontalSpacing.propertyView({
          label: a("responsiveLayout.horizontal")
        }), e.verticalSpacing.propertyView({
          label: a("responsiveLayout.vertical")
        })]
      }), /* @__PURE__ */ s(u, {
        name: a("responsiveLayout.rowStyle"),
        children: e.style.getPropertyView()
      }), /* @__PURE__ */ s(u, {
        name: a("responsiveLayout.columnStyle"),
        children: e.columnStyle.getPropertyView()
      }), /* @__PURE__ */ s(u, {
        name: g.animationStyle,
        hasTooltip: !0,
        children: e.animationStyle.getPropertyView()
      })]
    })]
  })).build();
}();
class he extends ye {
  syncContainers() {
    const t = this.children.columns.getView(), r = new Set(t.map((o) => String(o.id)));
    let i = this.children.containers.getView();
    const n = [];
    Object.keys(i).forEach((o) => {
      r.has(o) || n.push(v("containers", v(o, ne())));
    }), r.forEach((o) => {
      i.hasOwnProperty(o) || n.push(v("containers", ae(o, {
        layout: {},
        items: {}
      })));
    });
    let d = this;
    return n.forEach((o) => {
      d = d.reduce(o);
    }), d;
  }
  reduce(t) {
    const r = this.children.columns.getView();
    if (t.type === R.CUSTOM) {
      const n = t.value;
      if (n.type === "push") {
        const o = n.value;
        M.isEmpty(o.key) && (o.key = o.label), t = {
          ...t,
          value: {
            ...n,
            value: {
              ...o
            }
          }
        };
      }
      const {
        path: d
      } = t;
      if (n.type === "delete" && d[0] === "columns" && r.length <= 1)
        return re.warning(a("responsiveLayout.atLeastOneColumnError")), this;
    }
    let i = super.reduce(t);
    return t.type === R.UPDATE_NODES_V2 && (i = i.syncContainers()), i;
  }
  realSimpleContainer(t) {
    return Object.values(this.children.containers.children).find((r) => r.realSimpleContainer(t));
  }
  getCompTree() {
    const t = this.children.containers.getView(), r = Object.values(t).map((i) => i.getCompTree());
    return ie(r);
  }
  findContainer(t) {
    const r = this.children.containers.getView();
    for (const i of Object.values(r)) {
      const n = i.findContainer(t);
      if (n)
        return n === i ? this : n;
    }
  }
  getPasteValue(t) {
    const r = this.children.containers.getView(), i = M.mapValues(r, (n) => n.getPasteValue(t));
    return {
      ...this.toJsonValue(),
      containers: i
    };
  }
  autoHeight() {
    return this.children.autoHeight.getView();
  }
}
const be = Y(he, [Z]);
export {
  ye as ResponsiveLayoutBaseComp,
  be as ResponsiveLayoutComp
};
