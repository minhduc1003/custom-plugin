import { X as m, Y as a, M as f, v as B, S as s, w as r, a2 as S, L as h, bH as C, O as c, a8 as u, G as w, a5 as V, Z as d, hs as v, ht as x, az as $, gC as F, a4 as b, U as T, F as o, a9 as l, aa as i, ab as E, ac as P, ae as k, ad as O, hu as I } from "./c988e26e.js";
import "react";
import "react-dom";
const g = m(I)`
  ${(e) => e.$animationStyle}
`, q = m.div`
    width: 0px;
    height: 0px;
    overflow: hidden;
    .ant-float-btn-group {
        inset-block-end: 0px;
        right: -40px;
    }
    .ant-float-btn {
        right: 0px;
        inset-block-end: -8px;
    }
    .ant-float-btn-primary .ant-float-btn-body {
    background-color: ${(e) => e.$style.background};
    border: ${(e) => e.$style.border};
    border-style: ${(e) => e.$style.borderStyle};
    border-width: ${(e) => e.$style.borderWidth};
    }
`, H = [{
  label: a("floatButton.square"),
  value: "square"
}, {
  label: a("floatButton.circle"),
  value: "circle"
}], M = [{
  label: a("floatButton.primary"),
  value: "primary"
}, {
  label: a("floatButton.default"),
  value: "default"
}], N = new f({
  id: B(-1),
  label: s,
  badge: r(S, 0),
  description: r(s, ""),
  icon: r(h, "/icon:antd/questioncircleoutlined"),
  onEvent: C,
  hidden: c
}, (e) => e).setPropertyViewFn((e) => /* @__PURE__ */ u(w, {
  children: [e.label.propertyView({
    label: a("label")
  }), e.description.propertyView({
    label: a("floatButton.description")
  }), e.badge.propertyView({
    label: a("floatButton.badge")
  }), e.hidden.propertyView({
    label: a("floatButton.hidden")
  }), e.icon.propertyView({
    label: a("icon")
  }), e.onEvent.getPropertyView()]
})).build(), U = {
  value: V("value"),
  includeMargin: c.DEFAULT_TRUE,
  image: s,
  icon: r(h, "/icon:antd/questioncircleoutlined"),
  badgeStyle: d(v),
  style: d(x, "style"),
  animationStyle: d($, "animationStyle"),
  buttons: F(N, {
    initOptions: [{
      id: 0,
      label: a("optionsControl.optionI", {
        i: "1"
      }),
      icon: "/icon:antd/filetextoutlined",
      badge: "1"
    }, {
      id: 1,
      label: a("optionsControl.optionI", {
        i: "2"
      }),
      icon: "/icon:antd/filetextoutlined"
    }],
    autoIncField: "id"
  }),
  shape: b(H, "circle"),
  buttonTheme: b(M, "primary"),
  dot: c
}, D = (e) => {
  const p = (t, n) => t != null && t.hidden ? "" : /* @__PURE__ */ o(g, {
    $animationStyle: e.animationStyle,
    icon: t == null ? void 0 : t.icon,
    onClick: () => t.onEvent("click"),
    tooltip: t == null ? void 0 : t.label,
    description: t == null ? void 0 : t.description,
    badge: {
      count: t == null ? void 0 : t.badge,
      color: e.badgeStyle.badgeColor,
      dot: e == null ? void 0 : e.dot
    },
    type: n ? e.buttonTheme : "default",
    shape: e.shape
  }, t == null ? void 0 : t.id);
  return /* @__PURE__ */ o(q, {
    $badgeStyle: e.badgeStyle,
    $style: e.style,
    children: e.buttons.length === 1 ? p(e.buttons[0], !0) : /* @__PURE__ */ o(g.Group, {
      trigger: "hover",
      icon: e.icon,
      shape: e.shape,
      badge: {
        count: e.buttons.reduce((t, n) => t + (n.buttonType === "custom" && !n.hidden ? n.badge : 0), 0),
        color: e.badgeStyle.badgeColor,
        dot: e.dot
      },
      type: e.buttonTheme,
      children: e.buttons.map((t) => p(t))
    })
  });
};
let y = function() {
  return new T(U, (e) => /* @__PURE__ */ o(D, {
    ...e
  })).setPropertyViewFn((e) => /* @__PURE__ */ u(w, {
    children: [/* @__PURE__ */ u(l, {
      name: i.basic,
      children: [e.buttons.propertyView({}), e.icon.propertyView({
        label: a("icon")
      }), e.shape.propertyView({
        label: a("floatButton.buttonShape"),
        radioButton: !0
      }), e.buttonTheme.propertyView({
        label: a("floatButton.buttonTheme"),
        radioButton: !0
      }), e.dot.propertyView({
        label: a("floatButton.dot")
      })]
    }), /* @__PURE__ */ o(l, {
      name: i.layout,
      children: E(e)
    }), /* @__PURE__ */ o(l, {
      name: i.badgeStyle,
      children: e.badgeStyle.getPropertyView()
    }), /* @__PURE__ */ o(l, {
      name: i.style,
      children: e.style.getPropertyView()
    }), /* @__PURE__ */ o(l, {
      name: i.animationStyle,
      hasTooltip: !0,
      children: e.animationStyle.getPropertyView()
    })]
  })).build();
}();
y = class extends y {
  autoHeight() {
    return !0;
  }
};
const L = P(y, [new k("value", a("QRCode.valueDesc")), O]);
export {
  L as FloatButtonComp
};
