import { X as s, Y as t, Z as d, $ as S, a0 as h, a1 as m, w as p, L as P, a2 as V, a3 as z, a4 as $, a5 as c, a6 as k, O as D, a7 as E, U as B, F as a, a8 as r, G as L, a9 as l, aa as i, ab as I, ac as T, ad as A, ae as W, af as M, ag as N, ah as j, ai as F, aj as O, ak as U, al as R } from "./c988e26e.js";
import { useContext as v } from "react";
import { badgeChildren as q, BadgeBasicSection as H } from "./7a651ced.js";
import "react-dom";
const G = s(M)`
  background: ${(e) => e.$style.background};
  color: ${(e) => e.$style.fill};
  cursor: ${(e) => e.$cursorPointer ? "pointer" : ""};
`, X = s.div`
display: flex;
width: 100%;
height: 100%;
align-items: center;
flex-direction: ${(e) => e.labelPosition === "left" ? "row" : "row-reverse"};
${(e) => e.$style && {
  ...e.$style,
  borderRadius: e.$style.radius
}}
`, Y = s.div`
width: calc(100% - ${(e) => e.iconSize}px);
display: flex;
padding-left: 5px;
padding-right: 5px;
flex-direction: column;
justify-content: flex-end;
align-items: ${(e) => e.alignmentPosition === "left" ? "flex-start" : "flex-end"};
`, Z = s.span`
max-width: 100%;
overflow: hidden;
text-overflow: ellipsis;
white-space: nowrap;
font-weight: ${(e) => e.$style.textWeight};
border-radius: ${(e) => e.$style.radius};
font-size: ${(e) => e.$style.textSize};
text-transform: ${(e) => e.$style.textTransform};
color: ${(e) => e.$style.text};
border: ${(e) => e.$style.border};
border-style: ${(e) => e.$style.borderStyle};
border-width: ${(e) => e.$style.borderWidth};
font-family: ${(e) => e.$style.fontFamily};
font-style: ${(e) => e.$style.fontStyle};
margin: ${(e) => e.$style.margin};
padding: ${(e) => e.$style.padding};
background: ${(e) => e.$style.background};
text-decoration: ${(e) => e.$style.textDecoration};
`, J = s.span`
max-width: 100%;
overflow: hidden;
text-overflow: ellipsis;
white-space: nowrap;
font-weight: ${(e) => e.$style.textWeight};
border-radius: ${(e) => e.$style.radius};
font-size: ${(e) => e.$style.textSize};
text-transform: ${(e) => e.$style.textTransform};
color: ${(e) => e.$style.text};
border: ${(e) => e.$style.border};
border-style: ${(e) => e.$style.borderStyle};
border-width: ${(e) => e.$style.borderWidth};
font-family: ${(e) => e.$style.fontFamily};
font-style: ${(e) => e.$style.fontStyle};
margin: ${(e) => e.$style.margin};
padding: ${(e) => e.$style.padding};
background: ${(e) => e.$style.background};
text-decoration: ${(e) => e.$style.textDecoration};
`, K = [N], Q = [{
  label: t("avatarComp.square"),
  value: "square"
}, {
  label: t("avatarComp.circle"),
  value: "circle"
}], _ = [{
  label: t("labelProp.left"),
  value: "left"
}, {
  label: t("labelProp.right"),
  value: "right"
}], ee = {
  style: d(S, "style"),
  avatarStyle: d(h, "avatarStyle"),
  labelStyle: d(m, "labelStyle"),
  captionStyle: d(m, "captionStyle"),
  icon: p(P, "/icon:solid/user"),
  iconSize: p(V, 40),
  onEvent: z(K),
  shape: $(Q, "circle"),
  title: c("title", ""),
  src: c("src", ""),
  avatarLabel: c("avatarLabel", "{{currentUser.name}}"),
  avatarCatption: c("avatarCatption", "{{currentUser.email}}"),
  labelPosition: $(_, "left"),
  alignmentPosition: p(k, "left"),
  enableDropdownMenu: D,
  options: E,
  ...q
}, te = (e) => {
  const {
    shape: u,
    title: b,
    src: f,
    iconSize: g
  } = e;
  v(j).getUICompByName(v(F));
  const w = e.options.findIndex((o) => {
    var n;
    return (n = o.prefixIcon) == null ? void 0 : n.props.value;
  }) > -1, y = e.options.filter((o) => !o.hidden).map((o, n) => ({
    title: o.label,
    label: o.label,
    key: o.label + " - " + n,
    disabled: o.disabled,
    icon: w && /* @__PURE__ */ a("span", {
      children: o.prefixIcon
    }),
    onEvent: o.onEvent
  })), C = /* @__PURE__ */ a(R, {
    items: y,
    onClick: ({
      key: o
    }) => {
      var n;
      return (n = y.find((x) => x.key === o)) == null ? void 0 : n.onEvent("click");
    }
  });
  return /* @__PURE__ */ a(O, {
    menu: {
      items: y
    },
    placement: e.labelPosition === "left" ? "bottomLeft" : "bottomRight",
    arrow: !0,
    disabled: !e.enableDropdownMenu,
    dropdownRender: () => C,
    children: /* @__PURE__ */ r(X, {
      iconSize: e.iconSize,
      labelPosition: e.labelPosition,
      $style: e.style,
      children: [/* @__PURE__ */ a(U, {
        count: e.badgeCount.value,
        dot: e.badgeType === "dot",
        size: e.badgeSize,
        overflowCount: e.overflowCount,
        title: e.badgeTitle,
        offset: e.shape === "circle" ? [-2, 6] : [0, 0],
        children: /* @__PURE__ */ a(G, {
          size: g,
          icon: b.value !== "" ? null : e.icon,
          shape: u,
          $style: e.avatarStyle,
          src: f.value,
          onClick: () => e.onEvent("click"),
          children: b.value
        })
      }), /* @__PURE__ */ r(Y, {
        iconSize: e.iconSize,
        alignmentPosition: e.alignmentPosition,
        children: [/* @__PURE__ */ a(Z, {
          $style: e.labelStyle,
          children: e.avatarLabel.value
        }), /* @__PURE__ */ a(J, {
          $style: e.captionStyle,
          children: e.avatarCatption.value
        })]
      })]
    })
  });
};
let ae = function() {
  return new B(ee, (e) => /* @__PURE__ */ a(te, {
    ...e
  })).setPropertyViewFn((e) => /* @__PURE__ */ r(L, {
    children: [/* @__PURE__ */ r(l, {
      name: i.basic,
      children: [e.src.propertyView({
        label: t("avatarComp.src"),
        placeholder: "http://xxxx/xx.jpg",
        tooltip: t("avatarComp.avatarCompTooltip")
      }), e.title.propertyView({
        label: t("avatarComp.title"),
        tooltip: t("avatarComp.avatarCompTooltip")
      }), e.icon.propertyView({
        label: t("avatarComp.icon"),
        IconType: "All",
        tooltip: t("avatarComp.avatarCompTooltip")
      }), e.shape.propertyView({
        label: t("avatarComp.shape"),
        radioButton: !0
      }), e.iconSize.propertyView({
        label: t("avatarComp.iconSize")
      }), e.enableDropdownMenu.propertyView({
        label: t("avatarComp.enableDropDown")
      }), e.enableDropdownMenu.getView() && e.options.propertyView({})]
    }), /* @__PURE__ */ r(l, {
      name: t("avatarComp.label"),
      children: [e.avatarLabel.propertyView({
        label: t("avatarComp.label")
      }), e.avatarCatption.propertyView({
        label: t("avatarComp.caption")
      }), e.labelPosition.propertyView({
        label: t("avatarComp.labelPosition"),
        radioButton: !0
      }), e.alignmentPosition.propertyView({
        label: t("avatarComp.alignmentPosition"),
        radioButton: !0
      })]
    }), /* @__PURE__ */ a(H, {
      ...e
    }), /* @__PURE__ */ a(l, {
      name: i.interaction,
      children: e.onEvent.getPropertyView()
    }), /* @__PURE__ */ a(l, {
      name: i.layout,
      children: I(e)
    }), /* @__PURE__ */ a(l, {
      name: i.style,
      children: e.style.getPropertyView()
    }), /* @__PURE__ */ a(l, {
      name: i.avatarStyle,
      children: e.avatarStyle.getPropertyView()
    }), /* @__PURE__ */ a(l, {
      name: i.labelStyle,
      children: e.labelStyle.getPropertyView()
    }), /* @__PURE__ */ a(l, {
      name: i.captionStyle,
      children: e.captionStyle.getPropertyView()
    })]
  })).build();
}();
const re = T(ae, [A, new W("badgeCount", t("button.textDesc"))]);
export {
  re as AvatarComp
};
