import { TableComp as I } from "./e830a3ab.js";
import { l as y } from "./f915fcd2.js";
import { J as l, _ as C, dW as g, dU as E } from "./c988e26e.js";
import "./911053df.js";
import "react";
import "react-dom";
import "./6a2c46a1.js";
import "./22fa10de.js";
import "./8c51b61b.js";
import "./5230605f.js";
import "./be799735.js";
import "./0417d842.js";
import "./975a080d.js";
import "./82a4bca8.js";
import "./71bdd49a.js";
import "./2088ebd5.js";
import "./d3b0afba.js";
import "./85e61f03.js";
import "./36c2248f.js";
import "./70f9cad3.js";
import "./80c67fbe.js";
import "./094988fd.js";
import "./734fbd0f.js";
import "./80229ccd.js";
import "./16b77c22.js";
import "./b25be8d9.js";
import "./0c3664e6.js";
import "./c504e788.js";
import "./ad2208e2.js";
import "./e5bcb9b0.js";
import "./51dea655.js";
import "./fcc9e192.js";
import "./325a473d.js";
import "./33706f61.js";
import "./765e17fb.js";
import "./98885dce.js";
import "./9ee13d0e.js";
import "./9f467dd0.js";
import "./765a8ca5.js";
import "./3e9c3444.js";
import "./464239f7.js";
import "./608865ad.js";
import "./b0ddbdcf.js";
import "./ada1f35c.js";
import "./68ba86a3.js";
const c = (a, r) => {
  const t = a.children.columns.getView().map((i) => i.getView());
  expect(r.length).toEqual(t.length), r.forEach((i) => {
    const e = t.find((o) => o.dataIndex === i.dataIndex);
    if (!e)
      throw new Error(`expect column: ${JSON.stringify(i)}, but not found.`);
    Object.keys(i).forEach((o) => {
      const s = e[o], n = i[o];
      if (n !== void 0 && !C.isEqual(s, n))
        throw new Error(`ColumnKey:${o}, expect: "${n}", but found: "${s}"`);
    });
  });
  const d = a.children.dynamicColumnConfig.getView();
  if ((d == null ? void 0 : d.length) > 0) {
    const i = (o) => {
    }, e = y(t, a.children.sort.getView(), a.children.toolbar.getView().columnSetting, a.children.size.getView(), a.children.dynamicColumn.getView(), d, a.columnAggrData, a.children.editModeClicks.getView(), i);
    expect(t.length).toBeGreaterThanOrEqual(e.length), e.forEach((o) => {
      const s = o.dataIndex, n = t.find((f) => f.dataIndex === s);
      if (!n)
        throw new Error(`Error, column should not be undefined, column: ${JSON.stringify(o)}`);
      const m = n.isCustom ? n.title : n.dataIndex;
      if (!d.includes(m))
        throw new Error(`dynamic config test fail: unexpect column: ${m}`);
    });
  }
};
function q() {
  const a = {
    query1: g({
      data: [{
        q1: 1
      }]
    }),
    query2: g({
      data: [{
        q2: 2
      }]
    })
  };
  return {
    tableData: {
      data: JSON.stringify([{
        a: 1
      }]),
      columns: [{
        dataIndex: "a",
        title: "a",
        hide: !0
      }, {
        title: "custom",
        dataIndex: "custom1",
        isCustom: !0
      }]
    },
    exposingInfo: a,
    initColumns: [{
      dataIndex: "a",
      hide: !0,
      title: "a"
    }, {
      dataIndex: "custom1",
      hide: !1,
      title: "custom",
      isCustom: !0
    }]
  };
}
async function x() {
  await new Promise((a) => setTimeout(a, 20));
}
test("test table dynamic columns: Change unEvalValue", async () => {
  const {
    initColumns: a,
    tableData: r,
    exposingInfo: p
  } = q();
  let t = new I({
    dispatch: (i) => {
      t = l(t.reduce(i), p);
    },
    value: r
  });
  t = l(t), c(t, a), t = l(t.reduce(t.changeChildAction("data", JSON.stringify([{
    a: 1,
    c: 2,
    d: 3
  }])))), await x();
  const d = [...a, {
    dataIndex: "c",
    hide: !1,
    title: "c"
  }, {
    dataIndex: "d",
    title: "d"
  }];
  c(t, d), t = l(t.reduce(t.changeChildAction("data", JSON.stringify([{
    c: 2,
    d: 3
  }])))), await x(), c(t, d.filter((i) => i.dataIndex !== "a"));
}, 1e3);
async function u(a, r, p) {
  const {
    initColumns: t,
    tableData: d,
    exposingInfo: i
  } = q();
  let e = new I({
    dispatch: (h) => {
      let w;
      r ? w = E({
        readOnly: r
      }, () => e.reduce(h)) : w = e.reduce(h), e = l(w, i);
    },
    value: {
      ...d,
      dynamicColumn: a,
      ...a && p && {
        dynamicColumnConfig: JSON.stringify(p)
      }
    }
  });
  e = l(e);
  const o = async () => {
    e = l(e.reduce(e.changeChildAction("data", "{{query1.data}}")), i), await x();
  }, s = [{
    dataIndex: "q1",
    title: "q1"
  }, {
    dataIndex: "custom1",
    title: "custom",
    isCustom: !0
  }];
  await o(), !a && r ? c(e, t) : c(e, s);
  const n = [{
    q1: 1,
    a: 2
  }];
  i.query1 = g({
    data: n
  }), await o();
  const m = [...s, {
    dataIndex: "a",
    title: "a"
  }];
  expect(e.children.data.getView()).toEqual(n), !a && r ? c(e, t) : c(e, m);
  const f = [{
    a: 2
  }];
  i.query1 = g({
    data: f
  }), await o(), expect(e.children.data.getView()).toEqual(f), a ? c(e, m.filter((h) => h.dataIndex !== "q1")) : r ? c(e, t) : c(e, m);
}
test("test table dynamic columns", async () => {
  await u(!1, !1), await u(!1, !0), await u(!0, !1), await u(!0, !0), await u(!0, !1, ["custom", "q1"]), await u(!0, !0, ["custom", "q1"]);
}, 2e3);
