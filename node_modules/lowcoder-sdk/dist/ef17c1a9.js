var g = Object.defineProperty;
var C = (t, r, e) => r in t ? g(t, r, { enumerable: !0, configurable: !0, writable: !0, value: e }) : t[r] = e;
var y = (t, r, e) => (C(t, typeof r != "symbol" ? r + "" : r, e), e);
import { dk as c, w as h, s as V, O as s, aA as m, df as b, Z as n, fW as S, di as P, fX as T, fY as v, v as H, bS as x, C as D, M as B, _ as u, x as O, z as E, fZ as d, dZ as w, d_ as F, Y as a } from "./c988e26e.js";
import { ContainerBodyChildComp as N } from "./06b2ca8b.js";
import "react";
import "react-dom";
const _ = {
  header: c,
  // Support future tab or step container expansion
  body: h(V(N), {
    0: {
      view: {
        layout: {},
        items: {}
      }
    }
  }),
  footer: c,
  showHeader: s.DEFAULT_TRUE,
  showBody: s.DEFAULT_TRUE,
  showFooter: s,
  autoHeight: m,
  horizontalGridCells: b,
  scrollbars: h(s, !1),
  style: h(n(S, "style"), {
    borderWidth: "1px"
  }),
  headerStyle: n(P, "headerStyle"),
  bodyStyle: n(T, "bodyStyle"),
  footerStyle: n(v, "footerStyle"),
  appliedThemeId: H("")
  // for comp containing container, comps's appliedThemeId will always be empty so maintaining here
}, z = x(new B(_, (t, r) => ({
  ...t,
  dispatch: r
})).build(), D);
class j extends z {
  constructor() {
    super(...arguments);
    y(this, "scrollbars");
  }
  allContainers() {
    return [this.children.header, ...Object.values(this.children.body.getView()).map((e) => e.children.view), this.children.footer];
  }
  realSimpleContainer(e) {
    return u.isNil(e) ? this.children.body.getView()[0].children.view : this.allContainers().find((o) => o.realSimpleContainer(e));
  }
  getCompTree() {
    return O(this.allContainers().map((e) => e.getCompTree()));
  }
  findContainer(e) {
    for (const o of this.allContainers()) {
      const i = o.findContainer(e);
      if (i)
        return i === o ? this : i;
    }
  }
  getPasteValue(e) {
    return {
      ...this.toJsonValue(),
      header: this.children.header.getPasteValue(e),
      body: u.mapValues(this.children.body.getView(), (o) => ({
        ...o.toJsonValue(),
        view: o.children.view.getPasteValue(e)
      })),
      footer: this.children.footer.getPasteValue(e)
    };
  }
  autoHeight() {
    return this.children.autoHeight.getView();
  }
  exposingNode() {
    const e = {};
    return E(this.getCompTree(), (o) => {
      const i = o.children.comp;
      let l = i.exposingNode();
      if (d(l) && !l.children.hasOwnProperty("formDataKey")) {
        const p = i.children.formDataKey;
        p && (l = w({
          ...l.children,
          formDataKey: p.exposingNode()
        }));
      }
      return e[o.children.name.getView()] = l, !0;
    }), F(this, "exposing_node", w(e), f);
  }
  getPropertyView() {
    return [this.areaPropertyView(), this.heightPropertyView(), this.gridPropertyView()];
  }
  areaPropertyView() {
    return [this.children.showHeader.propertyView({
      label: a("prop.showHeader")
    }), this.children.showBody.propertyView({
      label: a("prop.showBody")
    }), this.children.showFooter.propertyView({
      label: a("prop.showFooter")
    })];
  }
  heightPropertyView() {
    return [this.children.autoHeight.getPropertyView(), !this.children.autoHeight.getView() && this.children.scrollbars.propertyView({
      label: a("prop.scrollbar")
    })];
  }
  gridPropertyView() {
    return [this.children.horizontalGridCells.propertyView({
      label: a("prop.horizontalGridCells")
    })];
  }
  stylePropertyView() {
    return this.children.style.getPropertyView();
  }
  headerStylePropertyView() {
    return this.children.headerStyle.getPropertyView();
  }
  bodyStylePropertyView() {
    return this.children.bodyStyle.getPropertyView();
  }
  footerStylePropertyView() {
    return this.children.footerStyle.getPropertyView();
  }
}
function f(t, r) {
  if (t === r)
    return !0;
  if (t && r && d(t) && d(r)) {
    const e = t.children, o = r.children, i = Object.keys(e);
    return i.length === Object.keys(o).length && i.every((l) => f(e[l], o[l]));
  }
  return !1;
}
export {
  j as TriContainerComp
};
