var d = Object.defineProperty;
var f = (i, u, e) => u in i ? d(i, u, { enumerable: !0, configurable: !0, writable: !0, value: e }) : i[u] = e;
var l = (i, u, e) => (f(i, typeof u != "symbol" ? u + "" : u, e), e);
import { F as m, hR as c, fu as y, hS as E, hT as p, du as a, b$ as C, c0 as Q, M as g } from "./c988e26e.js";
import { Fragment as A } from "react";
import "react-dom";
const x = new g({}, (i) => i).build();
class I extends x {
  constructor(e) {
    super(e);
    l(this, "params", {});
    l(this, "inputs", []);
    this.params = e;
  }
  getView() {
    return this.children;
  }
  getPropertyView() {
    return this.inputs.length === 0 ? null : this.inputs.map(({
      name: e,
      description: t
    }) => {
      const s = this.children[e];
      return s ? /* @__PURE__ */ m(A, {
        children: s.propertyView({
          label: e,
          tooltip: t,
          layout: "vertical"
        })
      }, e) : null;
    });
  }
  setInputs(e) {
    const t = {};
    e.forEach(({
      name: n,
      type: r
    }) => {
      c[r] && (t[n] = c[r]);
    });
    const s = y(this.params, t);
    return E(this, {
      children: s,
      inputs: e
    });
  }
  getInputNodes() {
    const e = {};
    return this.inputs.forEach(({
      name: t,
      type: s
    }) => {
      const n = this.children[t];
      if (n) {
        if (s === p.Query) {
          const r = n.children.value.getView();
          if (!r)
            return;
          e[t] = r;
          return;
        }
        if (n.unevaledValue) {
          const r = n.node();
          r && (e[t] = r);
        }
      }
    }), e;
  }
  getInputQueryExecAction(e) {
    var r;
    if (e.type !== a.ROUTE_BY_NAME || e.action.type !== a.EXECUTE_QUERY)
      return null;
    const t = e.name;
    if (!this.inputs.some(({
      name: o,
      type: h
    }) => t === o && h === p.Query))
      return null;
    const n = (r = Object.entries(this.children).find(([o]) => o === t)) == null ? void 0 : r[1];
    return n ? C(n.getView().value, Q(e.action)) : null;
  }
}
export {
  I as default
};
