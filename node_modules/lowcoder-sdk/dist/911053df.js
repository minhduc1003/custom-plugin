import { fn as h, au as r, Y as a, O as n, bS as s, v as u, a2 as S, a as p, w, fo as z } from "./c988e26e.js";
import "react";
import "react-dom";
const g = 5;
function b(t, e, i, o) {
  return t ? o || i[0] || g : e || g;
}
const C = function() {
  const t = {
    showQuickJumper: n,
    showSizeChanger: n,
    hideOnSinglePage: n,
    changeablePageSize: s(u(5), Number),
    pageSize: S,
    total: S,
    pageNo: p(1),
    pageSizeOptions: w(z, "[5, 10, 20, 50]")
  };
  return new h(t, (e, i) => ({
    showQuickJumper: e.showQuickJumper,
    showSizeChanger: e.showSizeChanger,
    total: e.total,
    hideOnSinglePage: e.hideOnSinglePage,
    pageSize: b(e.showSizeChanger, e.pageSize, e.pageSizeOptions, e.changeablePageSize),
    current: e.pageNo,
    pageSizeOptions: e.pageSizeOptions,
    onChange: (o, l) => {
      e.showSizeChanger && l !== e.changeablePageSize && i(r("changeablePageSize", l, !0)), o !== e.pageNo && i(r("pageNo", o, !1));
    }
  })).setPropertyViewFn((e) => [e.showQuickJumper.propertyView({
    label: a("table.showQuickJumper")
  }), e.hideOnSinglePage.propertyView({
    label: a("table.hideOnSinglePage")
  }), e.showSizeChanger.propertyView({
    label: a("table.showSizeChanger")
  }), e.showSizeChanger.getView() ? e.pageSizeOptions.propertyView({
    label: a("table.pageSizeOptions")
  }) : e.pageSize.propertyView({
    label: a("table.pageSize"),
    placeholder: String(g)
  }), e.total.propertyView({
    label: a("table.total"),
    tooltip: a("table.totalTooltip")
  })]).build();
}();
class P extends C {
  getOffset() {
    const e = this.getView();
    return (e.current - 1) * e.pageSize;
  }
}
export {
  P as PaginationControl,
  C as PaginationTmpControl,
  b as getPageSize
};
