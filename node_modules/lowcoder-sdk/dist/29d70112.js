import { f0 as d, f1 as c, av as a, X as n, Z as i, f2 as s, bS as t, cS as g, db as l, cU as p, dc as u, bV as b } from "./c988e26e.js";
import "react";
import "react-dom";
function $(o) {
  const r = d(o.background), e = c(o.background);
  return a`
    &&& {
      border-radius: ${o.radius};
      margin: ${o.margin};
      padding: ${o.padding};
      &:not(:disabled) {
        // click animation color
        --antd-wave-shadow-color: ${o.border};
        border-color: ${o.border};
        color: ${o.text};
        background-color: ${o.background};
        border-radius: ${o.radius};
        margin: ${o.margin};
        padding: ${o.padding};

        &:hover,
        &:focus {
          color: ${o.text};
          background-color: ${r};
          border-color: ${o.border === o.background ? r : o.border};
        }

        &:active {
          color: ${o.text};
          background-color: ${e};
          border-color: ${o.border === o.background ? e : o.border};
        }
      }
    }
  `;
}
const C = n(b)`
  ${(o) => o.$buttonStyle && $(o.$buttonStyle)}
  width: 100%;
  height: auto;
  display: inline-flex;
  justify-content: center;
  align-items: center;
  overflow: hidden;
  span {
    overflow: hidden;
    text-overflow: ellipsis;
  }
  gap: 6px;
`, w = n.div`
  // The button component is disabled but can respond to drag & select events
  ${(o) => o.disabled && `
    cursor: not-allowed;
    button:disabled {
      pointer-events: none;
    }
  `};
`;
function f(o) {
  return o && (o.hasOwnProperty("backgroundColor") || o.hasOwnProperty("borderColor") || o.hasOwnProperty("color")) ? {
    background: o.backgroundColor,
    border: o.borderColor,
    text: o.color
  } : o;
}
const h = i(s), x = t(h, f), B = g([l, p, u]);
export {
  C as Button100,
  w as ButtonCompWrapper,
  x as ButtonStyleControl,
  B as buttonRefMethods,
  $ as getButtonStyle
};
