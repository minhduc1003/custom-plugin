import { useState as y, useEffect as $, useContext as s } from "react";
import { X as D, N as F, O, aA as H, Z as x, dC as R, az as k, eG as q, a3 as I, d8 as z, U as N, F as n, eT as W, eR as j, a8 as r, G as m, a9 as o, aa as l, Y as i, ah as u, bJ as B, ab as A, dE as G, cd as U, dJ as J, dK as K, cg as X, cS as Y, db as Z, cU as _, ac as Q, ae as c, dF as p, dG as ee, ci as te, cj as ae, ch as ne, eN as ie, eL as oe, bS as le } from "./c988e26e.js";
import { FormDataPropertyView as re } from "./85e61f03.js";
import { textInputChildren as de, checkMentionListData as se, textInputValidate as ue, fixOldInputCompData as ce } from "./70f9cad3.js";
import "react-dom";
const ye = D.div`
  box-sizing:border-box;
  .rc-textarea {
    background-color:${(a) => a.$style.background};
    padding:${(a) => a.$style.padding};
    text-transform:${(a) => a.$style.textTransform};
    text-decoration:${(a) => a.$style.textDecoration};
    margin: 0px 3px 0px 3px !important;
  }

  .ant-input-clear-icon {
    opacity: 0.45;
    color: ${(a) => a.$style.text};
    top: 10px;

    &:hover {
      opacity: 0.65;
      color: ${(a) => a.$style.text};
    }
  }
`, me = [te, ae, ne, ie, oe];
let d = function() {
  const a = {
    ...de,
    viewRef: F,
    allowClear: O,
    autoHeight: H,
    style: x(R, "style"),
    animationStyle: x(k, "animationStyle"),
    mentionList: q(se, {
      "@": ["Li Lei", "Han Meimei"],
      "#": ["123", "456", "789"]
    }),
    onEvent: I(me),
    invalid: z("invalid")
  };
  return new N(a, (e) => {
    const {
      mentionList: g
    } = e, [h, v] = y({}), [b, f] = y(!1), [S, w] = y("@"), C = (t, T) => {
      w(T);
    }, V = (t) => {
      e.value.onChange(t), e.onEvent("change");
    }, E = (t) => {
      t.shiftKey && (t.preventDefault(), e.onEvent("submit"));
    }, P = (t) => {
      e.onEvent("mention");
    }, L = (t) => t.hasOwnProperty("validateStatus") && t.validateStatus === "error" ? "error" : "", M = () => ({
      value: {
        value: e.value.value
      },
      required: e.required,
      minLength: (e == null ? void 0 : e.minLength) ?? 0,
      maxLength: (e == null ? void 0 : e.maxLength) ?? 0,
      validationType: e.validationType,
      regex: e.regex,
      customRule: e.customRule
    });
    return $(() => {
      if (b) {
        const t = ue(M());
        v(t), e.invalid.onChange(t.validateStatus !== "");
      }
    }, [e.value.value, e.required, e == null ? void 0 : e.minLength, e == null ? void 0 : e.maxLength, e.validationType, e.regex, e.customRule]), e.label({
      required: e.required,
      children: /* @__PURE__ */ n(ye, {
        $style: e.style,
        children: /* @__PURE__ */ n(W, {
          theme: {
            token: {
              colorBgContainer: e.style.background,
              colorBorder: e.style.border,
              borderRadius: parseInt(e.style.radius),
              colorText: e.style.text,
              colorPrimary: e.style.accent
            }
          },
          children: /* @__PURE__ */ n(j, {
            prefix: Object.keys(g),
            onFocus: () => {
              f(!0), e.onEvent("focus");
            },
            onBlur: () => e.onEvent("blur"),
            onPressEnter: E,
            onSearch: C,
            onChange: V,
            onSelect: P,
            placeholder: e.placeholder,
            value: e.value.value,
            disabled: e.disabled,
            status: L(h),
            options: (g[S] || []).map((t) => ({
              key: t,
              value: t,
              label: t
            })),
            autoSize: e.autoHeight,
            style: {
              height: "100%",
              maxHeight: "100%",
              resize: "none",
              // padding: props.style.padding,
              fontStyle: e.style.fontStyle,
              fontFamily: e.style.fontFamily,
              borderWidth: e.style.borderWidth,
              fontWeight: e.style.textWeight,
              fontSize: e.style.textSize
            },
            readOnly: e.readOnly
          })
        })
      }),
      style: e.style,
      animationStyle: e.animationStyle,
      ...h
    });
  }).setPropertyViewFn((e) => /* @__PURE__ */ r(m, {
    children: [/* @__PURE__ */ r(o, {
      name: l.basic,
      children: [e.value.propertyView({
        label: i("prop.defaultValue")
      }), e.placeholder.propertyView({
        label: i("prop.placeholder")
      }), ["logic", "both"].includes(s(u).editorModeStatus) && e.mentionList.propertyView({
        label: i("mention.mentionList")
      })]
    }), /* @__PURE__ */ n(re, {
      ...e
    }), ["layout", "both"].includes(s(u).editorModeStatus) && e.label.getPropertyView(), ["logic", "both"].includes(s(u).editorModeStatus) && /* @__PURE__ */ r(m, {
      children: [/* @__PURE__ */ r(o, {
        name: l.interaction,
        children: [e.onEvent.getPropertyView(), B(e)]
      }), /* @__PURE__ */ n(o, {
        name: l.layout,
        children: A(e)
      }), /* @__PURE__ */ n(o, {
        name: l.advanced,
        children: G(e)
      }), /* @__PURE__ */ r(o, {
        name: l.validation,
        children: [U(e), e.validationType.propertyView({
          label: i("prop.textType")
        }), J(e), K(e), e.customRule.propertyView({})]
      })]
    }), ["layout", "both"].includes(s(u).editorModeStatus) && /* @__PURE__ */ r(m, {
      children: [/* @__PURE__ */ n(o, {
        name: l.style,
        children: e.style.getPropertyView()
      }), /* @__PURE__ */ n(o, {
        name: l.animationStyle,
        hasTooltip: !0,
        children: e.animationStyle.getPropertyView()
      })]
    })]
  })).build();
}();
d = class extends d {
  autoHeight() {
    return this.children.autoHeight.getView();
  }
};
d = le(d, ce);
const ge = X(d, Y([Z, _])), Se = Q(ge, [new c("value", i("export.inputValueDesc")), p, ee, new c("invalid", i("export.invalidDesc")), new c("hidden", i("export.hiddenDesc")), new c("disabled", i("export.disabledDesc"))]);
export {
  Se as MentionComp
};
