import { O as C, ck as I, cs as V, Y as c, cf as o, a8 as R, a9 as g, aa as x, cd as y, cS as b, db as q, cU as p } from "./c988e26e.js";
import { useState as D, useRef as f, useEffect as m } from "react";
import "react-dom";
const L = {
  required: C,
  customRule: I
}, h = (e) => {
  if (e.customRule)
    return {
      validateStatus: "error",
      help: e.customRule
    };
  const t = e.value.value;
  return e.required && V.isEmpty(t) ? {
    validateStatus: "error",
    help: c("prop.required")
  } : {
    validateStatus: "success"
  };
}, O = (e) => {
  var r;
  const [t, l] = D({}), n = f(!1), u = f(e);
  u.current = e;
  const d = e.value.value, i = (r = e.defaultValue) == null ? void 0 : r.value, S = (a) => {
    l(h({
      ...u.current,
      value: {
        value: a
      }
    }));
  };
  return m(() => {
    var a, s;
    (s = (a = e.value).onChange) == null || s.call(a, i);
  }, [i]), m(() => {
    var a;
    n.current && (S(d), (a = e.onEvent) == null || a.call(e, "change"), n.current = !1);
  }, [d]), [
    t,
    (a) => {
      var s, v;
      (v = (s = e.value).onChange) == null || v.call(s, a), n.current = !0;
    }
  ];
}, j = o({
  name: "invalid",
  desc: c("export.invalidDesc"),
  depKeys: ["value", "required", "customRule"],
  func: (e) => h({
    ...e,
    value: {
      value: e.value
    }
  }).validateStatus !== "success"
}), k = (e) => /* @__PURE__ */ R(g, {
  name: x.validation,
  children: [y(e), e.customRule.propertyView({})]
}), B = [o({
  name: "selectedIndex",
  desc: c("selectInput.selectedIndexDesc"),
  depKeys: ["value", "options"],
  func: (e) => {
    var t, l;
    return (l = (t = e.options).findIndex) == null ? void 0 : l.call(t, (n) => n.value === e.value);
  }
}), o({
  name: "selectedLabel",
  desc: c("selectInput.selectedLabelDesc"),
  depKeys: ["value", "options"],
  func: (e) => {
    var t, l, n;
    return (n = (l = (t = e.options).find) == null ? void 0 : l.call(t, (u) => u.value === e.value)) == null ? void 0 : n.label;
  }
})], N = b([q, p]);
export {
  B as SelectInputCommonConfig,
  j as SelectInputInvalidConfig,
  L as SelectInputValidationChildren,
  k as SelectInputValidationSection,
  N as selectDivRefMethods,
  h as selectInputValidate,
  O as useSelectInputValidate
};
