import { Y as a, bI as y, a5 as w, a4 as s, dz as h, w as f, S as g, Z as u, hH as C, az as b, F as o, a8 as r, G as m, a9 as t, aa as l, ah as p, ab as S, ac as x, ad as V, bX as v, B as P } from "./c988e26e.js";
import { useContext as c } from "react";
import { ContainerCompBuilder as B } from "./63085759.js";
import { TriContainer as T } from "./73ee57e8.js";
import "react-dom";
import "./ef17c1a9.js";
import "./06b2ca8b.js";
const F = [{
  label: "Markdown",
  value: "markdown"
}, {
  label: a("text"),
  value: "text"
}], H = [{
  label: "None",
  value: "none"
}, {
  label: "Right",
  value: "right"
}, {
  label: "Left",
  value: "left"
}], N = function() {
  const n = {
    disabled: y,
    text: w("text", "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi feugiat faucibus eleifend. Pellentesque eleifend, risus vel sagittis mattis, mauris ipsum tempor sapien, eu lobortis lacus libero a dui. Cras erat felis, rhoncus vestibulum consectetur et, ultrices ut purus. Sed a tortor orci. Vestibulum nec eleifend ante."),
    type: s(F, "markdown"),
    float: s(H, "left"),
    horizontalAlignment: h(),
    width: f(g, "40"),
    style: u(C),
    animationStyle: u(b)
  };
  return new B(n, (e, i) => /* @__PURE__ */ o(T, {
    ...e
  })).setPropertyViewFn((e) => /* @__PURE__ */ r(m, {
    children: [/* @__PURE__ */ r(t, {
      name: l.basic,
      children: [e.type.propertyView({
        label: a("value"),
        tooltip: a("textShow.valueTooltip"),
        radioButton: !0
      }), e.text.propertyView({})]
    }), ["logic", "both"].includes(c(p).editorModeStatus) && /* @__PURE__ */ o(t, {
      name: l.interaction,
      children: S(e)
    }), ["layout", "both"].includes(c(p).editorModeStatus) && /* @__PURE__ */ r(m, {
      children: [/* @__PURE__ */ r(t, {
        name: l.layout,
        children: [e.container.getPropertyView(), e.width.propertyView({
          label: a("container.flowWidth")
        }), e.float.propertyView({
          label: a("container.floatType"),
          radioButton: !0
        }), e.horizontalAlignment.propertyView({
          label: a("textShow.horizontalAlignment"),
          radioButton: !0
        })]
      }), /* @__PURE__ */ o(t, {
        name: "Floating Text Style",
        children: e.style.getPropertyView()
      }), /* @__PURE__ */ o(t, {
        name: l.animationStyle,
        hasTooltip: !0,
        children: e.animationStyle.getPropertyView()
      }), /* @__PURE__ */ o(t, {
        name: "Container Style",
        children: e.container.stylePropertyView()
      }), e.container.children.showHeader.getView() && /* @__PURE__ */ o(t, {
        name: "Header Style",
        children: e.container.headerStylePropertyView()
      }), e.container.children.showBody.getView() && /* @__PURE__ */ o(t, {
        name: "Body Style",
        children: e.container.bodyStylePropertyView()
      }), e.container.children.showFooter.getView() && /* @__PURE__ */ o(t, {
        name: "Footer Style",
        children: e.container.footerStylePropertyView()
      })]
    })]
  })).build();
}();
function z(n) {
  let e = P(n);
  if (e.value) {
    const i = e.value.container;
    if (i && (i.hasOwnProperty("layout") || i.hasOwnProperty("items"))) {
      const d = e.value.autoHeight;
      return {
        ...e,
        value: {
          container: {
            showHeader: !1,
            body: {
              0: {
                view: i
              }
            },
            showBody: !0,
            showFooter: !1,
            autoHeight: d
          }
        }
      };
    }
  }
  return e;
}
class M extends N {
  constructor(e) {
    super(z(e));
  }
}
const L = x(M, [V]);
function W(n, e) {
  return {
    container: {
      header: v([{
        item: {
          compType: "text",
          name: e.genItemName("containerTitle"),
          comp: {
            text: "### " + a("container.title")
          }
        },
        layoutItem: {
          i: "",
          h: 5,
          w: 24,
          x: 0,
          y: 0
        }
      }])
    }
  };
}
export {
  N as ContainerBaseComp,
  L as ContainerComp,
  W as defaultContainerData
};
