import { X as l, ah as c, F as t, c1 as o, c9 as n, dm as m, f4 as r, f5 as h } from "./c988e26e.js";
import { getStyle as s, disabledDate as D } from "./7032c5eb.js";
import { useUIView as x } from "./89fd4803.js";
import f, { useContext as u } from "react";
import { timeZoneOptions as S } from "./8c5a44af.js";
import "react-dom";
const y = l(r)`
  width: 100%;
  box-shadow: ${(e) => `${e.$style.boxShadow} ${e.$style.boxShadowColor}`};
  ${(e) => e.$style && s(e.$style)}
`, w = l.div`
  width: 100%;
  margin: 10px 0px; 
`, b = l(h)`
  width: 100%;
  .ant-select-selector {
    font-size: 14px;
    line-height: 1.5;
  }
`, C = f.lazy(() => import("./1f89a7c1.js").then((e) => ({
  default: e.DateMobileUIView
}))), V = (e) => {
  const a = u(c), d = Array.isArray(e.placeholder) ? e.placeholder[0] : e.placeholder;
  return x(/* @__PURE__ */ t(C, {
    ...e
  }), /* @__PURE__ */ t(y, {
    ...e,
    multiple: !1,
    ref: e.viewRef,
    minDate: e.minDate ? o(e.minDate, n) : void 0,
    maxDate: e.maxDate ? o(e.maxDate, n) : void 0,
    hourStep: e.hourStep,
    minuteStep: e.minuteStep,
    secondStep: e.secondStep,
    disabledDate: (i) => D(i, e.minDate, e.maxDate),
    picker: "date",
    inputReadOnly: m(a == null ? void 0 : a.getAppSettings().maxWidth),
    placeholder: d,
    renderExtraFooter: () => e.timeZone === "UserChoice" && /* @__PURE__ */ t(w, {
      children: /* @__PURE__ */ t(b, {
        options: S.filter((i) => i.value !== "UserChoice"),
        placeholder: "Select Time Zone",
        defaultValue: "Etc/UTC",
        onChange: e.onClickDateTimeZone
      })
    })
  }));
};
export {
  V as DateUIView
};
