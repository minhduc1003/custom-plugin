import { dk as h, w as s, s as V, O as i, S as d, df as C, aA as g, Z as n, fW as S, di as b, hG as f, fX as m, fY as P, v as T, bS as A, C as v, M as D, _ as c, x as H, z as R, fZ as y, dZ as w, d_ as U, Y as r } from "./c988e26e.js";
import { ContainerBodyChildComp as W } from "./a8b829c9.js";
import "react";
import "react-dom";
const x = {
  header: h,
  sider: h,
  body: s(V(W), {
    0: {
      view: {
        layout: {},
        items: {}
      }
    }
  }),
  showApp: i,
  contentApp: d,
  baseUrl: d,
  footer: h,
  showHeader: i.DEFAULT_TRUE,
  showSider: i.DEFAULT_TRUE,
  innerSider: i.DEFAULT_TRUE,
  siderCollapsible: s(i, !1),
  siderCollapsed: s(i, !1),
  siderRight: s(i, !1),
  siderWidth: s(d, "20%"),
  siderCollapsedWidth: s(d, "0"),
  showFooter: i,
  horizontalGridCells: C,
  autoHeight: g,
  siderScrollbars: s(i, !1),
  contentScrollbars: s(i, !1),
  style: n(S, "style"),
  headerStyle: n(b, "headerStyle"),
  siderStyle: n(f, "siderStyle"),
  bodyStyle: n(m, "bodyStyle"),
  footerStyle: n(P, "footerStyle"),
  appliedThemeId: T("")
}, E = A(new D(x, (a, e) => ({
  ...a,
  dispatch: e
})).build(), v);
class L extends E {
  // scrollbars: any;
  allContainers() {
    return [this.children.header, this.children.sider, ...Object.values(this.children.body.getView()).map((e) => e.children.view), this.children.footer];
  }
  realSimpleContainer(e) {
    return c.isNil(e) ? this.children.body.getView()[0].children.view : this.allContainers().find((t) => t.realSimpleContainer(e));
  }
  getCompTree() {
    return H(this.allContainers().map((e) => e.getCompTree()));
  }
  findContainer(e) {
    for (const t of this.allContainers()) {
      const o = t.findContainer(e);
      if (o)
        return o === t ? this : o;
    }
  }
  getPasteValue(e) {
    return {
      ...this.toJsonValue(),
      header: this.children.header.getPasteValue(e),
      sider: this.children.sider.getPasteValue(e),
      body: c.mapValues(this.children.body.getView(), (t) => ({
        ...t.toJsonValue(),
        view: t.children.view.getPasteValue(e)
      })),
      footer: this.children.footer.getPasteValue(e)
    };
  }
  autoHeight() {
    return this.children.autoHeight.getView();
  }
  exposingNode() {
    const e = {};
    return R(this.getCompTree(), (t) => {
      const o = t.children.comp;
      let l = o.exposingNode();
      if (y(l) && !l.children.hasOwnProperty("formDataKey")) {
        const p = o.children.formDataKey;
        p && (l = w({
          ...l.children,
          formDataKey: p.exposingNode()
        }));
      }
      return e[t.children.name.getView()] = l, !0;
    }), U(this, "exposing_node", w(e), u);
  }
  getPropertyView() {
    return [this.areaPropertyView(), this.gridPropertyView(), this.heightPropertyView()];
  }
  areaPropertyView() {
    return [this.children.showHeader.propertyView({
      label: r("prop.showHeader")
    }), this.children.showSider.propertyView({
      label: r("prop.showSider")
    }), this.children.siderRight.propertyView({
      label: r("prop.siderRight")
    }), this.children.innerSider.propertyView({
      label: r("prop.innerSider")
    }), this.children.siderCollapsible.propertyView({
      label: r("prop.siderCollapsible")
    }), this.children.siderCollapsed.propertyView({
      label: r("prop.siderCollapsed")
    }), this.children.showFooter.propertyView({
      label: r("prop.showFooter")
    }), this.children.siderWidth.propertyView({
      label: r("prop.siderWidth"),
      tooltip: r("prop.siderWidthTooltip")
    }), this.children.siderCollapsedWidth.propertyView({
      label: r("prop.siderCollapsedWidth"),
      tooltip: r("prop.siderCollapsedWidthTooltip")
    })];
  }
  heightPropertyView() {
    return [this.children.autoHeight.getPropertyView(), this.children.siderScrollbars.propertyView({
      label: r("prop.siderScrollbar")
    }), !this.children.autoHeight.getView() && this.children.contentScrollbars.propertyView({
      label: r("prop.contentScrollbar")
    })];
  }
  gridPropertyView() {
    return [this.children.horizontalGridCells.propertyView({
      label: r("prop.horizontalGridCells")
    })];
  }
  appSelectorPropertyView() {
    return [this.children.showApp.propertyView({
      label: r("prop.showApp"),
      tooltip: r("prop.showAppTooltip")
    }), this.children.showApp.getView() && this.children.contentApp.propertyView({
      label: r("prop.appID")
    }), this.children.showApp.getView() && this.children.baseUrl.propertyView({
      label: r("prop.baseURL")
    })];
  }
  stylePropertyView() {
    return this.children.style.getPropertyView();
  }
  headerStylePropertyView() {
    return this.children.headerStyle.getPropertyView();
  }
  siderStylePropertyView() {
    return this.children.siderStyle.getPropertyView();
  }
  bodyStylePropertyView() {
    return this.children.bodyStyle.getPropertyView();
  }
  footerStylePropertyView() {
    return this.children.footerStyle.getPropertyView();
  }
}
function u(a, e) {
  if (a === e)
    return !0;
  if (a && e && y(a) && y(e)) {
    const t = a.children, o = e.children, l = Object.keys(t);
    return l.length === Object.keys(o).length && l.every((p) => u(t[p], o[p]));
  }
  return !1;
}
export {
  L as PageLayoutComp
};
