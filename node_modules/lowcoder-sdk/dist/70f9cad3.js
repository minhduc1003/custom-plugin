import { f6 as C, Y as r, f7 as w, _ as L, cf as S, bL as T, a5 as f, bI as I, P as $, S as y, f8 as E, O as v, a2 as h, a4 as P, f9 as M, ck as k, a8 as l, a9 as u, aa as c, en as O, bJ as B, cd as q, dI as N, dJ as D, dK as U, av as A, cS as W, db as _, cU as z, fa as F, fb as H, dc as J, fc as K, fd as g } from "./c988e26e.js";
import { useState as j, useRef as x, useEffect as m } from "react";
import { formDataChildren as Y } from "./85e61f03.js";
import "react-dom";
const p = [{
  label: "Text",
  value: "Text",
  extra: /.*/,
  help: ""
}, {
  label: "Email",
  value: "Email",
  extra: C,
  help: r("validationDesc.email")
}, {
  label: "URL",
  value: "URL",
  extra: w,
  help: r("validationDesc.url")
}, {
  label: "Regex",
  value: "Regex",
  extra: void 0,
  help: r("validationDesc.regex")
}], i = L.fromPairs(p.map((e) => [e.value, e])), b = (e) => {
  var o;
  if (e.customRule)
    return {
      validateStatus: "error",
      help: e.customRule
    };
  const t = e.value.value;
  if (e.required && t.length === 0)
    return {
      validateStatus: "error",
      help: r("prop.required")
    };
  if (e.maxLength > 0 && t.length > e.maxLength)
    return {
      validateStatus: "error",
      help: r("validationDesc.maxLength", {
        length: t.length,
        maxLength: e.maxLength
      })
    };
  if (e.minLength > 0 && t.length < e.minLength)
    return {
      validateStatus: "error",
      help: r("validationDesc.minLength", {
        length: t.length,
        minLength: e.minLength
      })
    };
  const a = e.validationType, n = ((o = i[a]) == null ? void 0 : o.extra) ?? e.regex;
  return t && !n.test(t) ? {
    validateStatus: "error",
    help: i[a].help
  } : {
    validateStatus: ""
  };
}, G = S({
  name: "invalid",
  desc: r("export.invalidDesc"),
  depKeys: ["value", "required", "minLength", "maxLength", "validationType", "regex", "customRule"],
  func: (e) => b({
    ...e,
    value: {
      value: e.value
    }
  }).validateStatus !== ""
}), ae = [G, ...T], ne = {
  defaultValue: f("defaultValue"),
  value: f("value"),
  disabled: I,
  label: $,
  placeholder: y,
  onEvent: E,
  readOnly: v,
  // validation
  required: v,
  minLength: h,
  maxLength: h,
  validationType: P(p, "Text"),
  regex: M,
  customRule: k,
  ...Y
}, Q = (e) => ({
  disabled: e.disabled,
  readOnly: e.readOnly,
  placeholder: e.placeholder,
  defaultValue: e.defaultValue.value,
  value: e.value.value,
  onFocus: () => e.onEvent("focus"),
  onBlur: () => e.onEvent("blur"),
  onPressEnter: () => e.onEvent("submit")
}), oe = (e) => {
  const [t, a] = j({}), n = x(!1), o = x(e);
  o.current = e;
  const s = {
    ...e.defaultValue
  }.value, d = {
    ...e.value
  }.value;
  m(() => {
    e.value.onChange(s);
  }, [s]), m(() => {
    n.current && (a(b({
      ...o.current,
      value: {
        value: d
      }
    })), o.current.onEvent("change"), n.current = !1);
  }, [d]);
  const V = (R) => {
    e.value.onChange(R.target.value), n.current = !0;
  };
  return [{
    ...Q(e),
    onChange: V
  }, t];
}, re = (e) => /* @__PURE__ */ l(u, {
  name: c.basic,
  children: [e.defaultValue.propertyView({
    label: r("prop.defaultValue")
  }), O(e)]
}), ie = (e) => /* @__PURE__ */ l(u, {
  name: c.interaction,
  children: [e.onEvent.getPropertyView(), B(e)]
}), le = (e) => {
  var t;
  return /* @__PURE__ */ l(u, {
    name: c.validation,
    children: [q(e), e.validationType.propertyView({
      label: r("prop.textType")
    }), ((t = i[e.validationType.getView()]) == null ? void 0 : t.extra) === void 0 && N(e), D(e), U(e), e.customRule.propertyView({})]
  });
};
function ue(e, t) {
  return A`
    border-radius: ${e.radius};
    border-width: ${e.borderWidth};
    padding: ${e.padding};	
    // still use antd style when disabled
    &:not(.ant-input-disabled, .ant-input-affix-wrapper-disabled),
    input {
      color: ${e.text};
      font-size: ${e.textSize};
      font-weight: ${e.textWeight};
      font-family: ${e.fontFamily};
      font-style:${e.fontStyle};
      text-transform:${e.textTransform};
      text-decoration:${e.textDecoration};
      background-color: ${e.background};
      border-color: ${e.border};
      // line-height: ${e.lineHeight};

      &:focus,
      &.ant-input-affix-wrapper-focused {
        border-color: ${e.accent};
      }

      &:hover {
        border-color: ${e.accent};
      }

      &::-webkit-input-placeholder {
        color: ${e.text};
        opacity: 0.4;
      }

      .ant-input-show-count-suffix,
      .ant-input-prefix,
      .ant-input-suffix svg {
        opacity: 0.45;
        color: ${e.text};
      }

      .ant-input-clear-icon svg:hover {
        opacity: 0.65;
      }
    }
  `;
}
const ce = [...W([_, z, F, H]), {
  method: J,
  execute: (e, t) => {
    var a, n;
    return (n = (a = e.children.viewRef.viewRef) == null ? void 0 : a.input) == null ? void 0 : n.click();
  }
}, {
  method: K,
  execute: (e, t) => {
    var a, n, o;
    return (o = (n = (a = e.children.viewRef.viewRef) == null ? void 0 : a.input) == null ? void 0 : n.setRangeText) == null ? void 0 : o.call(n, ...t);
  }
}];
function se(e) {
  if (e === "")
    return {};
  for (const t in e)
    g(e[t], ["array"], t, (a) => (g(a, ["string"]), a));
  return e;
}
function de(e) {
  if (!e)
    return e;
  if (e.value && !e.defaultValue) {
    const t = e.value;
    return {
      ...e,
      defaultValue: t,
      value: ""
    };
  }
  return e;
}
export {
  re as TextInputBasicSection,
  ae as TextInputConfigs,
  ie as TextInputInteractionSection,
  p as TextInputValidationOptions,
  le as TextInputValidationSection,
  se as checkMentionListData,
  de as fixOldInputCompData,
  ue as getStyle,
  ce as inputRefMethods,
  ne as textInputChildren,
  Q as textInputProps,
  b as textInputValidate,
  oe as useTextInputProps
};
