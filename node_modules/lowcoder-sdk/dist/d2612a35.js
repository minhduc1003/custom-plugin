import { X as i, ah as d, F as a, cs as h, dm as s, bU as r, c1 as o, c9 as c, f5 as x, f4 as f } from "./c988e26e.js";
import { getStyle as m, disabledDate as D } from "./7032c5eb.js";
import { useUIView as u } from "./89fd4803.js";
import g, { useContext as S } from "react";
import { timeZoneOptions as y } from "./8c5a44af.js";
import "react-dom";
const {
  RangePicker: C
} = f, w = i(C)`
  width: 100%;
  box-shadow: ${(e) => `${e.$style.boxShadow} ${e.$style.boxShadowColor}`};
  ${(e) => e.$style && m(e.$style)}
`, b = i(x)`
  width: 400px; 
  margin: 10px 0px;
  .ant-select-selector {
    font-size: 14px;
    line-height: 1.5;
  }
`, I = i.div`
  text-align: center;
`, R = g.lazy(() => import("./1f89a7c1.js").then((e) => ({
  default: e.DateRangeMobileUIView
}))), A = (e) => {
  const n = S(d);
  let l;
  return Array.isArray(e.placeholder) ? l = e.placeholder : l = [e.placeholder || "Start Date", e.placeholder || "End Date"], u(/* @__PURE__ */ a(R, {
    ...e
  }), /* @__PURE__ */ a(w, {
    ...h.omit(e, "onChange"),
    ref: e.viewRef,
    value: [e.start, e.end],
    disabledDate: (t) => D(t, e.minDate, e.maxDate),
    onCalendarChange: (t) => {
      e.onChange(t == null ? void 0 : t[0], t == null ? void 0 : t[1]);
    },
    inputReadOnly: s(n == null ? void 0 : n.getAppSettings().maxWidth),
    suffixIcon: r(e.suffixIcon) && e.suffixIcon,
    placeholder: l,
    minDate: e.minDate ? o(e.minDate, c) : void 0,
    maxDate: e.maxDate ? o(e.maxDate, c) : void 0,
    hourStep: e.hourStep,
    minuteStep: e.minuteStep,
    secondStep: e.secondStep,
    renderExtraFooter: () => e.timeZone === "UserChoice" && /* @__PURE__ */ a(I, {
      children: /* @__PURE__ */ a(b, {
        options: y.filter((t) => t.value !== "UserChoice"),
        placeholder: "Select Time Zone",
        defaultValue: "Etc/UTC",
        onChange: e == null ? void 0 : e.onClickDateRangeTimeZone
      })
    })
  }));
};
export {
  A as DateRangeUIView
};
