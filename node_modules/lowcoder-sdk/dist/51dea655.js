import { useState as d } from "react";
import { SelectUIView as h } from "./fcc9e192.js";
import { X as u, a8 as r, G as l, F as n, Y as a, S as g, d4 as m } from "./c988e26e.js";
import { C as x } from "./5230605f.js";
import { ColumnValueTooltip as f } from "./0417d842.js";
import "./325a473d.js";
import "react-dom";
import "./33706f61.js";
import "./d3b0afba.js";
import "./85e61f03.js";
import "./be799735.js";
import "./975a080d.js";
const C = u.div`
  display: inline-flex;
  align-items: center;
  width: 100%;
  height: 100%;
  position: absolute;
  top: 0;
  background: transparent !important;
  padding: 8px;

  > div {
    width: 100%;
    height: 100%;
  }

  .ant-select {
    height: 100%;
    .ant-select-selector {
      padding: 0 7px;
      height: 100%;
      overflow: hidden;
      .ant-select-selection-item {
        display: inline-flex;
        align-items: center;
        padding-right: 24px;
      }
    }
    .ant-select-arrow {
      height: calc(100% - 3px);
      width: fit-content;
      top: 1.5px;
      margin-top: 0;
      background-color: white;
      right: 1.5px;
      border-right: 1px solid #d7d9e0;
      cursor: pointer;
      pointer-events: auto;
      svg {
        min-width: 18px;
        min-height: 18px;
      }
      &:hover svg path {
        fill: #315efb;
      }
    }
    .ant-select-selector .ant-select-selection-search {
      left: 7px;
      input {
        height: 100%;
      }
    }
    &.ant-select-open {
      .ant-select-arrow {
        border-right: none;
        border-left: 1px solid #d7d9e0;
        svg g path {
          fill: #315efb;
        }
      }
      .ant-select-selection-item {
        opacity: 0.4;
      }
    }
  }
`, w = {
  text: g,
  options: m
};
let s = [];
const c = (t) => t.text, b = {}, v = (t) => {
  const [o, i] = d(t.initialValue);
  return /* @__PURE__ */ n(h, {
    autoFocus: !0,
    allowClear: !0,
    ...b,
    value: o,
    options: t.options,
    onChange: (e) => {
      t.onChange(e), i(e);
    },
    onEvent: async (e) => (e === "blur" && t.onChangeEnd(), []),
    style: {}
  });
}, L = function() {
  return new x(w, (t, o) => {
    s = t.options;
    const i = t.changeValue ?? c(t), e = t.options.find((p) => p.value === i);
    return /* @__PURE__ */ r(l, {
      children: [/* @__PURE__ */ n("span", {
        children: e == null ? void 0 : e.prefixIcon
      }), /* @__PURE__ */ n("span", {
        children: e == null ? void 0 : e.label
      })]
    });
  }, (t) => t.text.value, c).setEditViewFn((t) => /* @__PURE__ */ n(C, {
    children: /* @__PURE__ */ n(v, {
      initialValue: t.value,
      options: s,
      onChange: t.onChange,
      onChangeEnd: t.onChangeEnd
    })
  })).setPropertyViewFn((t) => /* @__PURE__ */ r(l, {
    children: [t.text.propertyView({
      label: a("table.columnValue"),
      tooltip: f
    }), t.options.propertyView({
      title: a("optionsControl.optionList")
    })]
  })).build();
}();
export {
  L as ColumnSelectComp
};
