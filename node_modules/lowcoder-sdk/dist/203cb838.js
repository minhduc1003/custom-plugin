import { X as V, Y as a, Z as f, gP as G, az as O, gQ as A, a3 as U, a5 as Z, a4 as Q, a as b, O as R, U as X, F as i, a8 as d, G as w, ah as I, a9 as s, aa as c, ab as Y, ac as q, ae as v, ad as J, bV as K, gR as L, gS as _, gT as p, gU as tt, gV as et, au as x, gW as at } from "./c988e26e.js";
import { useContext as k, useState as m, useEffect as h, useMemo as nt } from "react";
import "react-dom";
const it = V.div`
  align-items: center;
  cursor: pointer;
  font-size: 2.9em;
  text-align: center;
  word-wrap: break-word;
  line-height: initial;
  ${(t) => t.$animationStyle}
  background-color: ${(t) => {
  var e;
  return (e = t.$style) == null ? void 0 : e.background;
}};
 font-weight: ${(t) => {
  var e;
  return (e = t == null ? void 0 : t.$style) == null ? void 0 : e.textWeight;
}};
border-radius: ${(t) => {
  var e;
  return (e = t == null ? void 0 : t.$style) == null ? void 0 : e.radius;
}};
font-size: ${(t) => {
  var e;
  return (e = t == null ? void 0 : t.$style) == null ? void 0 : e.textSize;
}};
rotate: ${(t) => {
  var e;
  return (e = t == null ? void 0 : t.$style) == null ? void 0 : e.rotation;
}};
text-transform: ${(t) => {
  var e;
  return (e = t == null ? void 0 : t.$style) == null ? void 0 : e.textTransform;
}};
color: ${(t) => {
  var e;
  return (e = t == null ? void 0 : t.$style) == null ? void 0 : e.text;
}};
border: ${(t) => {
  var e;
  return (e = t == null ? void 0 : t.$style) == null ? void 0 : e.border;
}};
border-style: ${(t) => {
  var e;
  return (e = t == null ? void 0 : t.$style) == null ? void 0 : e.borderStyle;
}};
border-width: ${(t) => {
  var e;
  return (e = t == null ? void 0 : t.$style) == null ? void 0 : e.borderWidth;
}};
font-family: ${(t) => {
  var e;
  return (e = t == null ? void 0 : t.$style) == null ? void 0 : e.fontFamily;
}};
font-style: ${(t) => {
  var e;
  return (e = t == null ? void 0 : t.$style) == null ? void 0 : e.fontStyle;
}};
margin: ${(t) => {
  var e;
  return (e = t == null ? void 0 : t.$style) == null ? void 0 : e.margin;
}};
padding: ${(t) => {
  var e;
  return (e = t == null ? void 0 : t.$style) == null ? void 0 : e.padding;
}};
background: ${(t) => {
  var e;
  return (e = t == null ? void 0 : t.$style) == null ? void 0 : e.background;
}};
text-decoration: ${(t) => {
  var e;
  return (e = t == null ? void 0 : t.$style) == null ? void 0 : e.textDecoration;
}};
`, lt = V.div`
  width: 100%;
  min-height: 35px;
  display: flex;
  justify-content: center;
  padding-right: 15px;
  padding-bottom: 10px;
  margin-top: 10px;
`, P = V(K)`
background-color: ${(t) => t.$style.background};
font-weight: ${(t) => t.$style.textWeight};
border-radius: ${(t) => t.$style.radius};
font-size: ${(t) => t.$style.textSize};
rotate: ${(t) => t.$style.rotation};
text-transform: ${(t) => t.$style.textTransform};
color: ${(t) => t.$style.text};
border: ${(t) => t.$style.border};
border-style: ${(t) => t.$style.borderStyle};
border-width: ${(t) => t.$style.borderWidth};
font-family: ${(t) => t.$style.fontFamily};
font-style: ${(t) => t.$style.fontStyle};
margin: ${(t) => t.$style.margin};
padding: ${(t) => t.$style.padding};
background: ${(t) => t.$style.background};
text-decoration: ${(t) => t.$style.textDecoration};
`;
function rt(t) {
  const e = Math.floor(t / 36e5), y = Math.floor(t % (1e3 * 60 * 60) / (1e3 * 60)), n = Math.floor(t % (1e3 * 60) / 1e3), l = t % 1e3;
  return `${g(e)}:${g(y)}:${g(n)}:${g(l, 3)}`;
}
function g(t, e = 2) {
  return String(t).padStart(e, "0");
}
const dt = [L, _, p, tt, et], ot = [{
  label: a("timer.timer"),
  value: "timer"
}, {
  label: a("timer.countdown"),
  value: "countdown"
}], st = {
  style: f(G),
  animationStyle: f(O),
  startButtonStyle: f(A),
  resetButtonStyle: f(A),
  onEvent: U(dt),
  defaultValue: Z("defaultValue", "00:00:00:000"),
  timerType: Q(ot, "timer"),
  elapsedTime: b(0),
  timerState: b("stoped"),
  actionHandler: b(""),
  hideButton: R
}, ct = (t) => {
  const [e, y] = m(0), [n, l] = m("stoped"), [$, S] = m(0), [r, D] = m(0), [z, T] = m(!0);
  h(() => {
    t.actionHandler != "" && (t.actionHandler === "start" ? B() : t.actionHandler === "pause" ? H() : t.actionHandler === "resume" ? C() : t.actionHandler === "reset" && E(), t.dispatch(x("actionHandler", "", !0)));
  }, [t.actionHandler]), h(() => {
    n === "stoped" && S(u);
  }, [t.defaultValue.value]), h(() => {
    n === "started" && N();
  }, [e]), h(() => {
    n === "stoped" && r && r && clearInterval(r), t.dispatch(x("timerState", n, !1));
  }, [n]);
  const u = nt(() => {
    const [o, W, F, j] = t.defaultValue.value && t.defaultValue.value.split(":") || [];
    let M = parseInt(o, 10) * 36e5 + parseInt(W, 10) * 6e4 + parseInt(F, 10) * 1e3 + parseInt(j, 10);
    return isNaN(M) ? 0 : M;
  }, [t.defaultValue.value]), N = () => {
    D(Number(setInterval(() => {
      let o = t.timerType === "timer" ? Date.now() - e : u - (Date.now() - e);
      o <= 0 && (l("stoped"), t.onEvent("countdown"), T(!1), o = 0), S(o), t.dispatch(x("elapsedTime", o, !1));
    }, 18)));
  }, B = () => {
    l("started"), t.onEvent("start"), y(t.timerType === "timer" ? Date.now() - u : Date.now());
  }, H = () => {
    r && clearInterval(r), l("paused"), t.onEvent("pause");
  }, C = () => {
    y(t.timerType === "timer" ? Date.now() - $ : Date.now() - (u - $)), l("started"), t.onEvent("resume");
  }, E = () => {
    r && clearInterval(r), l("stoped"), S(u), T(!0), t.onEvent("reset");
  };
  return /* @__PURE__ */ d(it, {
    $style: t.style,
    $animationStyle: t.animationStyle,
    children: [rt($), /* @__PURE__ */ i(lt, {
      hidden: t.hideButton,
      children: /* @__PURE__ */ d(at, {
        children: [/* @__PURE__ */ i(P, {
          $style: t.startButtonStyle,
          disabled: !z,
          type: n === "stoped" ? "primary" : "default",
          onClick: () => {
            n === "stoped" ? B() : n === "started" ? H() : n === "paused" && C();
          },
          children: n === "stoped" ? a("timer.start") : n === "started" ? a("timer.pause") : a("timer.resume")
        }), /* @__PURE__ */ i(P, {
          $style: t.resetButtonStyle,
          onClick: () => E(),
          children: a("timer.reset")
        })]
      })
    })]
  });
};
let ut = function() {
  return new X(st, (t, e) => /* @__PURE__ */ i(ct, {
    ...t,
    dispatch: e
  })).setPropertyViewFn((t) => /* @__PURE__ */ d(w, {
    children: [["logic", "both"].includes(k(I).editorModeStatus) && /* @__PURE__ */ d(w, {
      children: [/* @__PURE__ */ d(s, {
        name: c.basic,
        children: [t.timerType.propertyView({
          label: a("timer.timerType")
        }), t.defaultValue.propertyView({
          label: a("timer.defaultValue")
        }), t.hideButton.propertyView({
          label: a("timer.hideButton")
        })]
      }), /* @__PURE__ */ d(s, {
        name: c.interaction,
        children: [Y(t), t.onEvent.propertyView()]
      })]
    }), ["layout", "both"].includes(k(I).editorModeStatus) && /* @__PURE__ */ d(w, {
      children: [/* @__PURE__ */ i(s, {
        name: c.style,
        children: t.style.getPropertyView()
      }), /* @__PURE__ */ i(s, {
        name: c.animationStyle,
        hasTooltip: !0,
        children: t.animationStyle.getPropertyView()
      }), /* @__PURE__ */ i(s, {
        name: c.startButtonStyle,
        children: t.startButtonStyle.getPropertyView()
      }), /* @__PURE__ */ i(s, {
        name: c.resetButtonStyle,
        children: t.resetButtonStyle.getPropertyView()
      })]
    })]
  })).setExposeMethodConfigs([{
    method: {
      name: "start/pause",
      description: a("timer.startPause"),
      params: []
    },
    execute: async (t, e) => {
      t.children.timerState.value === "stoped" ? t.children.actionHandler.dispatch(t.children.actionHandler.changeValueAction("start")) : t.children.timerState.value === "paused" ? t.children.actionHandler.dispatch(t.children.actionHandler.changeValueAction("resume")) : t.children.timerState.value === "started" && t.children.actionHandler.dispatch(t.children.actionHandler.changeValueAction("pause"));
    }
  }, {
    method: {
      name: "reset",
      description: a("timer.reset"),
      params: []
    },
    execute: async (t, e) => {
      t.children.actionHandler.dispatch(t.children.actionHandler.changeValueAction("reset"));
    }
  }]).build();
}();
const ft = q(ut, [new v("defaultValue", a("timer.defaultValue")), new v("elapsedTime", a("timer.elapsedTime")), new v("timerState", a("timer.timerState")), J]);
export {
  ft as TimerComp
};
