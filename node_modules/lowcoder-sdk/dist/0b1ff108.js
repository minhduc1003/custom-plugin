import { X as h, d8 as x, w as n, O as w, Y as t, S as y, cZ as B, bI as m, L as b, a6 as C, ex as v, Z as c, ey as S, az as T, N as V, U as p, F as s, a8 as a, G as g, a9 as l, aa as i, ah as r, bJ as $, ab as I, bK as P, ac as E, ae as f, bL as D } from "./c988e26e.js";
import { useContext as u } from "react";
import { Button100 as L, buttonRefMethods as M, ButtonCompWrapper as R } from "./975a080d.js";
import "react-dom";
const A = h.div`
  display: flex;
`, N = h(R)`
  ${(o) => o.$animationStyle}
  width: 100%;
  display: flex;
  justify-content: ${(o) => o.$align};

  > button {
    width: ${(o) => o.$align !== "stretch" && "auto"};
    border: ${(o) => !o.$showBorder && "none"};
    box-shadow: ${(o) => !o.$showBorder && "none"};
  }
`, W = function() {
  const o = {
    value: x("value"),
    showText: n(w, !0),
    trueText: n(y, t("toggleButton.trueDefaultText")),
    falseText: n(y, t("toggleButton.falseDefaultText")),
    onEvent: B,
    disabled: m,
    loading: m,
    trueIcon: n(b, "/icon:solid/AngleUp"),
    falseIcon: n(b, "/icon:solid/AngleDown"),
    iconPosition: C,
    alignment: v,
    style: c(S, "style"),
    animationStyle: c(T, "animationStyle"),
    showBorder: n(w, !0),
    viewRef: V
  };
  return new p(o, (e) => {
    const d = e.showText && (e.value.value ? e.trueText : e.falseText) || void 0;
    return /* @__PURE__ */ s(N, {
      disabled: e.disabled,
      $align: e.alignment,
      $showBorder: e.showBorder,
      $animationStyle: e.animationStyle,
      children: /* @__PURE__ */ a(L, {
        ref: e.viewRef,
        $buttonStyle: e.style,
        loading: e.loading,
        disabled: e.disabled,
        onClick: () => {
          e.onEvent("change"), e.value.onChange(!e.value.value);
        },
        children: [e.iconPosition === "right" && d, /* @__PURE__ */ s(A, {
          children: e.value.value ? e.trueIcon : e.falseIcon
        }), e.iconPosition === "left" && d]
      })
    });
  }).setPropertyViewFn((e) => /* @__PURE__ */ a(g, {
    children: [/* @__PURE__ */ s(l, {
      name: i.basic,
      children: e.value.propertyView({
        label: t("prop.defaultValue"),
        tooltip: t("toggleButton.valueDesc")
      })
    }), (u(r).editorModeStatus === "logic" || u(r).editorModeStatus === "both") && /* @__PURE__ */ a(g, {
      children: [/* @__PURE__ */ a(l, {
        name: i.interaction,
        children: [e.onEvent.getPropertyView(), $(e), I(e), P(e)]
      }), /* @__PURE__ */ a(l, {
        name: i.advanced,
        children: [e.showText.propertyView({
          label: t("toggleButton.showText")
        }), e.showText.getView() && e.trueText.propertyView({
          label: t("toggleButton.trueLabel")
        }), e.showText.getView() && e.falseText.propertyView({
          label: t("toggleButton.falseLabel")
        }), e.trueIcon.propertyView({
          label: t("toggleButton.trueIconLabel")
        }), e.falseIcon.propertyView({
          label: t("toggleButton.falseIconLabel")
        }), e.showText.getView() && e.iconPosition.propertyView({
          label: t("toggleButton.iconPosition"),
          radioButton: !0
        }), e.alignment.propertyView({
          label: t("toggleButton.alignment"),
          radioButton: !0
        })]
      })]
    }), (u(r).editorModeStatus === "layout" || u(r).editorModeStatus === "both") && /* @__PURE__ */ a(g, {
      children: [/* @__PURE__ */ a(l, {
        name: i.style,
        children: [e.showBorder.propertyView({
          label: t("toggleButton.showBorder")
        }), e.style.getPropertyView()]
      }), /* @__PURE__ */ s(l, {
        name: i.animationStyle,
        hasTooltip: !0,
        children: e.animationStyle.getPropertyView()
      })]
    })]
  })).setExposeMethodConfigs(M).build();
}(), k = E(W, [new f("value", t("dropdown.textDesc")), new f("loading", t("button.loadingDesc")), ...D]);
export {
  k as ToggleButtonComp
};
