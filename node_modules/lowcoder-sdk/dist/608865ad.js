import { X as i, M as C, F as e, au as a, gg as l, Y as g, dn as h, gm as m, gn as f, go as p, dw as w, dq as b, dk as v, a as y, dv as M } from "./c988e26e.js";
import { createContext as k, useContext as r } from "react";
import "react-dom";
const x = i.div`
  .ant-modal-content {
    overflow: hidden;
    background-color: ${(o) => o.$background};

    .ant-modal-body > div {
      background-color: ${(o) => o.$background};
    }
  }
`, P = i.div`
  pointer-events: auto;

  .ant-modal-body > div {
    overflow: overlay;
  }
`, V = k({
  modalWidth: 520
}), S = (o) => /* @__PURE__ */ e(M, {
  ...o,
  emptyRows: 15,
  autoHeight: !0
});
function I(o) {
  const {
    visible: n,
    containerProps: t,
    onCancel: d
  } = o, s = r(h), {
    modalWidth: c = 520
  } = r(V);
  return n ? /* @__PURE__ */ e(P, {
    children: /* @__PURE__ */ e(m, {
      width: c,
      open: n,
      onCancel: d,
      getContainer: () => document.querySelector(`#${f}`) || document.body,
      footer: null,
      styles: {
        body: {
          padding: "0"
        }
      },
      zIndex: p.modal,
      modalRender: (u) => /* @__PURE__ */ e(x, {
        $background: s,
        onClick: () => {
        },
        children: u
      }),
      focusTriggerAfterClose: !1,
      children: /* @__PURE__ */ e(S, {
        ...t,
        hintPlaceholder: w,
        containerPadding: [36, 36],
        items: b(t.items)
      })
    })
  }) : null;
}
const $ = {
  container: v,
  showConfigModal: y(!1)
}, T = new C($, (o, n) => /* @__PURE__ */ e(I, {
  containerProps: o.container,
  visible: o.showConfigModal,
  onCancel: () => n(a("showConfigModal", !1, !1))
})).setPropertyViewFn((o, n) => /* @__PURE__ */ e(l, {
  onClick: () => n(a("showConfigModal", !0, !1)),
  children: g("slotControl.configSlotView")
})).build();
class W extends T {
  propertyView(n) {
    return /* @__PURE__ */ e(l, {
      onClick: () => this.dispatch(this.changeChildAction("showConfigModal", !0)),
      children: n.buttonText
    });
  }
  getPasteValue(n) {
    return {
      ...this.toJsonValue(),
      container: this.children.container.getPasteValue(n)
    };
  }
}
export {
  V as SlotConfigContext,
  W as SlotControl
};
