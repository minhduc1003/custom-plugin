import { c1 as o, c2 as oe, c3 as ne, c4 as ie, P as re, w as k, Y as n, S, bI as le, a3 as se, O as E, c5 as P, Z as C, c6 as de, az as ue, c7 as ce, L as me, N as fe, c8 as he, a4 as ye, a5 as b, U as A, c9 as s, F as h, ca as Z, cb as w, bU as K, cc as q, a8 as c, G as V, a9 as d, aa as u, ah as r, cd as B, bJ as j, ab as O, ce as H, ac as L, cf as f, bL as _, cg as Te, ch as ge, ci as Ve, cj as ve, ck as Se, _ as Ze, cl as we, cm as be, cn as Ce, co as xe, cp as De, cq as Re, cr as Pe, cs as M } from "./c988e26e.js";
import { formDataChildren as N, FormDataPropertyView as $ } from "./85e61f03.js";
import { useState as U, useEffect as F, useContext as l } from "react";
import { disabledTime as G, handleDateChange as x, dateRefMethods as J } from "./7032c5eb.js";
import { DateUIView as Ee } from "./034fe3cf.js";
import { DateRangeUIView as Me } from "./d2612a35.js";
import { timeZoneOptions as Ue } from "./8c5a44af.js";
import "react-dom";
import "./89fd4803.js";
o.extend(oe);
o.extend(ne);
o.extend(ie);
const Fe = [ge, Ve, ve], ze = {
  required: E,
  minDate: S,
  maxDate: S,
  minTime: S,
  maxTime: S,
  customRule: Se
}, Y = {
  label: re,
  placeholder: k(S, n("date.placeholder")),
  format: S,
  disabled: le,
  onEvent: se(Fe),
  showTime: E,
  use12Hours: E,
  hourStep: P.closed(1, 24, 1),
  minuteStep: P.closed(1, 60, 1),
  secondStep: P.closed(1, 60, 1),
  style: C(de, "style"),
  animationStyle: C(ue, "animationStyle"),
  labelStyle: C(ce.filter((t) => ["accent", "validate"].includes(t.name) === !1), "labelStyle"),
  suffixIcon: k(me, "/icon:regular/calendar"),
  ...ze,
  viewRef: fe,
  inputFieldStyle: C(he, "inputFieldStyle"),
  timeZone: ye(Ue, "Etc/UTC")
}, Q = (t) => Ze.pick(t, "format", "showTime", "use12Hours", "hourStep", "minuteStep", "secondStep", "placeholder"), W = (t, e) => [t.showTime.propertyView({
  label: n("date.showTime")
}), !e && t.use12Hours.propertyView({
  label: n("prop.use12Hours")
})], X = (t, e = !0) => {
  if (e && t.showTime.getView())
    return /* @__PURE__ */ c(d, {
      name: u.advanced,
      children: [we(t), be(t), Ce(t)]
    });
}, p = (t, e = "date") => {
  if (e === "date")
    return [xe(t), De(t)];
}, ee = (t, e = "date") => {
  if (e === "date" && t.showTime.getView())
    return [Re(t), Pe(t)];
};
function D(t) {
  if (t.customRule)
    return {
      validateStatus: "error",
      help: t.customRule
    };
  const e = o(t.value.value, s);
  return t.required && (t.value.value === "" || !e.isValid()) ? {
    validateStatus: "error",
    help: n("prop.required")
  } : {
    validateStatus: "success"
  };
}
const ke = {
  value: b("value"),
  userTimeZone: b("userTimeZone", "Etc/UTC"),
  ...Y,
  ...N
}, Ie = new A(ke, (t) => {
  let e = null;
  t.value.value !== "" && (e = o(t.value.value, s));
  const [a, i] = U(e);
  F(() => {
    const m = t.value.value ? o(t.value.value, s) : null;
    i(m);
  }, [t.value.value]);
  const g = (m) => {
    t.userTimeZone.onChange(m);
  };
  return t.label({
    required: t.required,
    style: t.style,
    labelStyle: t.labelStyle,
    inputFieldStyle: t.inputFieldStyle,
    animationStyle: t.animationStyle,
    onMouseDown: (m) => m.stopPropagation(),
    children: /* @__PURE__ */ h(Ee, {
      onClickDateTimeZone: g,
      timeZone: t.timeZone,
      viewRef: t.viewRef,
      disabledTime: () => G(t.minTime, t.maxTime),
      $style: t.inputFieldStyle,
      disabled: t.disabled,
      ...Q(t),
      hourStep: t.hourStep,
      minDate: t.minDate,
      maxDate: t.maxDate,
      placeholder: t.placeholder,
      value: a != null && a.isValid() ? a : null,
      onChange: (m) => {
        x(m && m.isValid() ? m.format(t.showTime ? Z : w) : "", t.value.onChange, t.onEvent);
      },
      onPanelChange: () => {
        x("", t.value.onChange, M.noop);
      },
      onFocus: () => t.onEvent("focus"),
      onBlur: () => t.onEvent("blur"),
      suffixIcon: K(t.suffixIcon) && t.suffixIcon
    }),
    ...D(t)
  });
}).setPropertyViewFn((t) => {
  const e = q();
  return /* @__PURE__ */ c(V, {
    children: [/* @__PURE__ */ c(d, {
      name: u.basic,
      children: [t.value.propertyView({
        label: n("prop.defaultValue"),
        placeholder: "2022-04-07 21:39:59",
        tooltip: n("date.formatTip")
      }), t.timeZone.propertyView({
        label: n("prop.timeZone")
      })]
    }), /* @__PURE__ */ h($, {
      ...t
    }), (l(r).editorModeStatus === "logic" || l(r).editorModeStatus === "both") && /* @__PURE__ */ c(V, {
      children: [/* @__PURE__ */ c(d, {
        name: u.validation,
        children: [B(t), p(t), ee(t), t.customRule.propertyView({})]
      }), /* @__PURE__ */ c(d, {
        name: u.interaction,
        children: [t.onEvent.getPropertyView(), j(t), O(t)]
      })]
    }), (l(r).editorModeStatus === "layout" || l(r).editorModeStatus === "both") && t.label.getPropertyView(), (l(r).editorModeStatus === "layout" || l(r).editorModeStatus === "both") && /* @__PURE__ */ c(d, {
      name: u.layout,
      children: [H({
        children: t
      }), t.placeholder.propertyView({
        label: n("date.placeholderText")
      })]
    }), (l(r).editorModeStatus === "logic" || l(r).editorModeStatus === "both") && /* @__PURE__ */ h(V, {
      children: /* @__PURE__ */ c(d, {
        name: u.advanced,
        children: [W(t, e), t.suffixIcon.propertyView({
          label: n("button.suffixIcon")
        })]
      })
    }), (l(r).editorModeStatus === "logic" || l(r).editorModeStatus === "both") && !e && X(t), (l(r).editorModeStatus === "layout" || l(r).editorModeStatus === "both") && /* @__PURE__ */ c(V, {
      children: [/* @__PURE__ */ h(d, {
        name: u.style,
        children: t.style.getPropertyView()
      }), /* @__PURE__ */ h(d, {
        name: u.labelStyle,
        children: t.labelStyle.getPropertyView()
      }), /* @__PURE__ */ h(d, {
        name: u.inputFieldStyle,
        children: t.inputFieldStyle.getPropertyView()
      }), /* @__PURE__ */ h(d, {
        name: u.animationStyle,
        hasTooltip: !0,
        children: t.animationStyle.getPropertyView()
      })]
    })]
  });
}).setExposeMethodConfigs(J).build(), Ae = function() {
  const t = {
    start: b("start"),
    end: b("end"),
    userRangeTimeZone: b("userRangeTimeZone", "Etc/UTC"),
    ...N,
    ...Y
  };
  return new A(t, (e) => {
    let a = null;
    e.start.value !== "" && (a = o(e.start.value, s));
    let i = null;
    e.end.value !== "" && (i = o(e.end.value, s));
    const [g, m] = U(a), [T, te] = U(i);
    F(() => {
      const y = e.start.value ? o(e.start.value, s) : null;
      m(y);
    }, [e.start.value]), F(() => {
      const y = e.end.value ? o(e.end.value, s) : null;
      te(y);
    }, [e.end.value]);
    const ae = /* @__PURE__ */ h(Me, {
      onClickDateRangeTimeZone: (y) => {
        e.userRangeTimeZone.onChange(y);
      },
      timeZone: e == null ? void 0 : e.timeZone,
      viewRef: e.viewRef,
      $style: e.inputFieldStyle,
      disabled: e.disabled,
      ...Q(e),
      start: g != null && g.isValid() ? g : null,
      end: T != null && T.isValid() ? T : null,
      minDate: e.minDate,
      maxDate: e.maxDate,
      placeholder: [e.placeholder, e.placeholder],
      disabledTime: () => G(e.minTime, e.maxTime),
      onChange: (y, v) => {
        e.start.onChange(y && y.isValid() ? y.format(e.showTime ? Z : w) : ""), e.end.onChange(v && v.isValid() ? v.format(e.showTime ? Z : w) : ""), e.onEvent("change");
      },
      onPanelChange: (y, v) => {
        v[0] !== "date" && x("", e.start.onChange, M.noop), v[1] !== "date" && x("", e.end.onChange, M.noop);
      },
      onFocus: () => e.onEvent("focus"),
      onBlur: () => e.onEvent("blur"),
      suffixIcon: K(e.suffixIcon) && e.suffixIcon
    }), R = D({
      ...e,
      value: e.start
    }), z = D({
      ...e,
      value: e.end
    });
    return e.label({
      required: e.required,
      style: e.style,
      labelStyle: e.labelStyle,
      children: ae,
      inputFieldStyle: e.inputFieldStyle,
      onMouseDown: (y) => y.stopPropagation(),
      ...R.validateStatus !== "success" ? R : z.validateStatus !== "success" ? z : R
    });
  }).setPropertyViewFn((e) => {
    const a = q();
    return /* @__PURE__ */ c(V, {
      children: [/* @__PURE__ */ c(d, {
        name: u.basic,
        children: [e.start.propertyView({
          label: n("date.start"),
          placeholder: "2022-04-07 21:39:59",
          tooltip: n("date.formatTip")
        }), e.end.propertyView({
          label: n("date.end"),
          placeholder: "2022-04-07 21:39:59",
          tooltip: n("date.formatTip")
        }), e.timeZone.propertyView({
          label: n("prop.timeZone")
        })]
      }), /* @__PURE__ */ h($, {
        ...e
      }), (l(r).editorModeStatus === "logic" || l(r).editorModeStatus === "both") && /* @__PURE__ */ c(V, {
        children: [/* @__PURE__ */ c(d, {
          name: u.validation,
          children: [B(e), p(e), ee(e), e.customRule.propertyView({})]
        }), /* @__PURE__ */ c(d, {
          name: u.interaction,
          children: [e.onEvent.getPropertyView(), j(e), O(e)]
        })]
      }), (l(r).editorModeStatus === "layout" || l(r).editorModeStatus === "both") && e.label.getPropertyView(), (l(r).editorModeStatus === "layout" || l(r).editorModeStatus === "both") && /* @__PURE__ */ c(d, {
        name: u.layout,
        children: [H({
          children: e
        }), e.placeholder.propertyView({
          label: n("date.placeholderText")
        })]
      }), (l(r).editorModeStatus === "logic" || l(r).editorModeStatus === "both") && /* @__PURE__ */ h(V, {
        children: /* @__PURE__ */ c(d, {
          name: u.advanced,
          children: [W(e, a), e.suffixIcon.propertyView({
            label: n("button.suffixIcon")
          })]
        })
      }), (l(r).editorModeStatus === "logic" || l(r).editorModeStatus === "both") && X(e), (l(r).editorModeStatus === "layout" || l(r).editorModeStatus === "both") && /* @__PURE__ */ c(V, {
        children: [/* @__PURE__ */ h(d, {
          name: u.style,
          children: e.style.getPropertyView()
        }), /* @__PURE__ */ h(d, {
          name: u.labelStyle,
          children: e.labelStyle.getPropertyView()
        }), /* @__PURE__ */ h(d, {
          name: u.inputFieldStyle,
          children: e.inputFieldStyle.getPropertyView()
        })]
      })]
    });
  }).build();
}(), Ge = L(Ie, [f({
  name: "value",
  desc: n("export.datePickerValueDesc"),
  depKeys: ["value", "showTime", "timeZone", "userTimeZone"],
  func: (t) => {
    let e = null;
    for (const a of s)
      if (o.utc(t.value, a).isValid()) {
        e = o.utc(t.value, a);
        break;
      }
    if (!t.showTime && (e == null ? void 0 : e.hour()) === 0 && (e == null ? void 0 : e.minute()) === 0 && (e == null ? void 0 : e.second()) === 0 && (e = e == null ? void 0 : e.hour(12)), e != null && e.isValid()) {
      const a = t.timeZone === "UserChoice" ? t.userTimeZone : t.timeZone || "UTC";
      return e.tz(a).format(t.showTime ? Z : w);
    }
    return null;
  }
}), f({
  name: "formattedValue",
  desc: n("export.datePickerFormattedValueDesc"),
  depKeys: ["value", "format", "timeZone", "userTimeZone"],
  func: (t) => {
    let e = null;
    for (const a of s)
      if (o.utc(t.value, a).isValid()) {
        e = o.utc(t.value, a);
        break;
      }
    if (!t.showTime && (e == null ? void 0 : e.hour()) === 0 && (e == null ? void 0 : e.minute()) === 0 && (e == null ? void 0 : e.second()) === 0 && (e = e == null ? void 0 : e.hour(12)), e != null && e.isValid()) {
      const a = t.timeZone === "UserChoice" ? t.userTimeZone : t.timeZone || "UTC";
      return e.tz(a).format(t.format);
    }
    return "";
  }
}), f({
  name: "timestamp",
  desc: n("export.datePickerTimestampDesc"),
  depKeys: ["value"],
  func: (t) => {
    const e = t.value ? o(t.value, s) : null;
    return e != null && e.isValid() ? e.unix() : "";
  }
}), f({
  name: "invalid",
  desc: n("export.invalidDesc"),
  depKeys: ["value", "required", "minTime", "maxTime", "minDate", "maxDate", "customRule"],
  func: (t) => D({
    ...t,
    value: {
      value: t.value
    }
  }).validateStatus !== "success"
}), f({
  name: "timeZone",
  desc: n("export.timeZoneDesc"),
  depKeys: ["timeZone", "userTimeZone"],
  func: (t) => (console.log("input.timeZone", t.timeZone), t.timeZone === "UserChoice" ? t.userTimeZone : t.timeZone || "UTC")
}), ..._]);
let I = L(Ae, [f({
  name: "start",
  desc: n("export.dateRangeStartDesc"),
  depKeys: ["start", "showTime", "timeZone", "userRangeTimeZone"],
  func: (t) => {
    let e = null;
    for (const a of s)
      if (o.utc(t.start, a).isValid()) {
        e = o.utc(t.start, a);
        break;
      }
    if (!t.showTime && (e == null ? void 0 : e.hour()) === 0 && (e == null ? void 0 : e.minute()) === 0 && (e == null ? void 0 : e.second()) === 0 && (e = e == null ? void 0 : e.hour(12)), e != null && e.isValid()) {
      const a = t.timeZone === "UserChoice" ? t.userRangeTimeZone : t.timeZone || "UTC";
      return e.tz(a).format(t.showTime ? Z : w);
    }
    return null;
  }
}), f({
  name: "end",
  desc: n("export.dateRangeEndDesc"),
  depKeys: ["end", "showTime", "timeZone", "userRangeTimeZone"],
  func: (t) => {
    let e = null;
    for (const a of s)
      if (o.utc(t.end, a).isValid()) {
        e = o.utc(t.end, a);
        break;
      }
    if (!t.showTime && (e == null ? void 0 : e.hour()) === 0 && (e == null ? void 0 : e.minute()) === 0 && (e == null ? void 0 : e.second()) === 0 && (e = e == null ? void 0 : e.hour(12)), e != null && e.isValid()) {
      const a = t.timeZone === "UserChoice" ? t.userRangeTimeZone : t.timeZone || "UTC";
      return e.tz(a).format(t.showTime ? Z : w);
    }
    return null;
  }
}), f({
  name: "startTimestamp",
  desc: n("export.dateRangeStartTimestampDesc"),
  depKeys: ["start", "timeZone", "userRangeTimeZone"],
  func: (t) => {
    let e = null;
    for (const a of s)
      if (o.utc(t.start, a).isValid()) {
        e = o.utc(t.start, a);
        break;
      }
    if (e != null && e.isValid()) {
      const a = t.timeZone === "UserChoice" ? t.userRangeTimeZone : t.timeZone || "UTC";
      return e.tz(a).unix();
    }
    return "";
  }
}), f({
  name: "endTimestamp",
  desc: n("export.dateRangeEndTimestampDesc"),
  depKeys: ["end", "timeZone", "userRangeTimeZone"],
  func: (t) => {
    let e = null;
    for (const a of s)
      if (o.utc(t.end, a).isValid()) {
        e = o.utc(t.end, a);
        break;
      }
    if (e != null && e.isValid()) {
      const a = t.timeZone === "UserChoice" ? t.userRangeTimeZone : t.timeZone || "UTC";
      return e.tz(a).unix();
    }
    return "";
  }
}), f({
  name: "formattedValue",
  desc: n("export.dateRangeFormattedValueDesc"),
  depKeys: ["start", "end", "format", "timeZone", "userRangeTimeZone"],
  func: (t) => {
    let e = null, a = null;
    for (const i of s)
      if (o.utc(t.start, i).isValid()) {
        e = o.utc(t.start, i);
        break;
      }
    for (const i of s)
      if (o.utc(t.end, i).isValid()) {
        a = o.utc(t.end, i);
        break;
      }
    if (!t.showTime && (e == null ? void 0 : e.hour()) === 0 && (e == null ? void 0 : e.minute()) === 0 && (e == null ? void 0 : e.second()) === 0 && (e = e == null ? void 0 : e.hour(12)), !t.showTime && (a == null ? void 0 : a.hour()) === 0 && (a == null ? void 0 : a.minute()) === 0 && (a == null ? void 0 : a.second()) === 0 && (a = a == null ? void 0 : a.hour(12)), e != null && e.isValid() || a != null && a.isValid()) {
      const i = t.timeZone === "UserChoice" ? t.userRangeTimeZone : t.timeZone || "UTC", g = e != null && e.isValid() ? e.tz(i).format(t.format) : "", m = a != null && a.isValid() ? a.tz(i).format(t.format) : "";
      return [g, m].filter(Boolean).join(" - ");
    }
    return "";
  }
}), f({
  name: "formattedStartValue",
  desc: n("export.dateRangeFormattedStartValueDesc"),
  depKeys: ["start", "format", "timeZone", "userRangeTimeZone"],
  func: (t) => {
    let e = null;
    for (const a of s)
      if (o.utc(t.start, a).isValid()) {
        e = o.utc(t.start, a);
        break;
      }
    if (!t.showTime && (e == null ? void 0 : e.hour()) === 0 && (e == null ? void 0 : e.minute()) === 0 && (e == null ? void 0 : e.second()) === 0 && (e = e == null ? void 0 : e.hour(12)), e != null && e.isValid()) {
      const a = t.timeZone === "UserChoice" ? t.userRangeTimeZone : t.timeZone || "UTC";
      return e.tz(a).format(t.format);
    }
    return "";
  }
}), f({
  name: "formattedEndValue",
  desc: n("export.dateRangeFormattedEndValueDesc"),
  depKeys: ["end", "format", "timeZone", "userRangeTimeZone"],
  func: (t) => {
    let e = null;
    for (const a of s)
      if (o.utc(t.end, a).isValid()) {
        e = o.utc(t.end, a);
        break;
      }
    if (!t.showTime && (e == null ? void 0 : e.hour()) === 0 && (e == null ? void 0 : e.minute()) === 0 && (e == null ? void 0 : e.second()) === 0 && (e = e == null ? void 0 : e.hour(12)), e != null && e.isValid()) {
      const a = t.timeZone === "UserChoice" ? t.userRangeTimeZone : t.timeZone || "UTC";
      return e.tz(a).format(t.format);
    }
    return "";
  }
}), f({
  name: "invalid",
  desc: n("export.invalidDesc"),
  depKeys: ["start", "end", "required", "minTime", "maxTime", "minDate", "maxDate", "customRule", "timeZone", "userRangeTimeZone"],
  func: (t) => {
    const e = t.timeZone === "UserChoice" ? t.userRangeTimeZone : t.timeZone || "UTC";
    let a = null, i = null;
    for (const T of s)
      if (o.utc(t.start, T).isValid()) {
        a = o.utc(t.start, T).tz(e);
        break;
      }
    for (const T of s)
      if (o.utc(t.end, T).isValid()) {
        i = o.utc(t.end, T).tz(e);
        break;
      }
    const g = a && (!a.isValid() || t.minDate && a.isBefore(o(t.minDate).tz(e)) || t.maxDate && a.isAfter(o(t.maxDate).tz(e))), m = i && (!i.isValid() || t.minDate && i.isBefore(o(t.minDate).tz(e)) || t.maxDate && i.isAfter(o(t.maxDate).tz(e)));
    return g || m;
  }
}), f({
  name: "timeZone",
  desc: n("export.timeZoneDesc"),
  depKeys: ["timeZone", "userRangeTimeZone"],
  func: (t) => t.timeZone === "UserChoice" ? t.userRangeTimeZone : t.timeZone || "UTC"
}), ..._]);
I = Te(I, [...J, {
  method: {
    name: "clearAll",
    description: n("date.clearAllDesc"),
    params: []
  },
  execute: (t) => {
    t.children.start.getView().onChange(""), t.children.end.getView().onChange("");
  }
}, {
  method: {
    name: "resetAll",
    description: n("date.resetAllDesc"),
    params: []
  },
  execute: (t) => {
    t.children.start.getView().reset(), t.children.end.getView().reset();
  }
}, {
  method: {
    name: "setRange",
    params: []
  },
  execute: (t, e) => {
    if (e.length !== 1)
      return Promise.reject(n("formComp.valuesLengthError"));
    const a = e[0];
    if (typeof a != "object" || a === null || Array.isArray(a) || !a.hasOwnProperty("start") || !a.hasOwnProperty("end"))
      return Promise.reject(n("formComp.valueTypeError"));
    t.children.start.getView().onChange(a.start), t.children.end.getView().onChange(a.end);
  }
}]);
export {
  Ge as DatePickerComp,
  I as DateRangeComp,
  Ie as datePickerControl,
  Ae as dateRangeControl
};
