import { X as m, cM as u, Z as s, cN as d, az as h, U as $, F as a, a8 as l, G as c, a9 as r, aa as i, Y as n, ah as g, ab as y, ac as S, ae as C, ad as f, av as w, aw as x, ax as v, cO as P } from "./c988e26e.js";
import { useContext as p } from "react";
import "react-dom";
const b = (t) => w`
    width: ${x(t.margin)};	
    height: ${v(t.margin)};	
    margin: ${t.margin};	
    padding: ${t.padding};
    border-radius:${t.radius};
    .ant-progress-text {
      color: ${t.text} !important;
      font-family:${t.fontFamily};
      font-style:${t.fontStyle};
      font-size:${t.textSize} !important;
      font-weight:${t.textWeight};
    }
    .ant-progress-circle-trail {
      stroke: ${t.track};
    }
    .ant-progress-inner .ant-progress-circle-path {
      stroke: ${t.fill} !important;
    }
    &.ant-progress-status-success {
      .ant-progress-inner .ant-progress-circle-path {
        stroke: ${t.success} !important;
      }
      .ant-progress-text {
        color: ${t.success} !important;
      }
    }
  `, M = m(P)`
  ${(t) => t.$animationStyle}
  width: 100%;
  height: 100%;
  padding: 2px;
  .ant-progress-inner {
    width: 100% !important;
    height: 100% !important;
  }

  .ant-progress-circle {
    width: 100%;
    height: 100%;
  }
  ${(t) => t.$style && b(t.$style)}
`;
let o = function() {
  const t = {
    value: u("value", 60),
    // borderRadius property hidden as it's not valid for progress circle
    style: s(d, "style"),
    animationStyle: s(h, "animationStyle")
  };
  return new $(t, (e) => /* @__PURE__ */ a(M, {
    $style: e.style,
    $animationStyle: e.animationStyle,
    percent: Math.round(e.value.value),
    type: "circle"
  })).setPropertyViewFn((e) => /* @__PURE__ */ l(c, {
    children: [/* @__PURE__ */ a(r, {
      name: i.basic,
      children: e.value.propertyView({
        label: n("progress.value"),
        tooltip: n("progress.valueTooltip")
      })
    }), ["logic", "both"].includes(p(g).editorModeStatus) && /* @__PURE__ */ a(r, {
      name: i.interaction,
      children: y(e)
    }), ["layout", "both"].includes(p(g).editorModeStatus) && /* @__PURE__ */ l(c, {
      children: [/* @__PURE__ */ a(r, {
        name: i.style,
        children: e.style.getPropertyView()
      }), /* @__PURE__ */ a(r, {
        name: i.animationStyle,
        hasTooltip: !0,
        children: e.animationStyle.getPropertyView()
      })]
    })]
  })).build();
}();
o = class extends o {
  autoHeight() {
    return !1;
  }
};
const N = S(o, [new C("value", n("progress.valueDesc")), f]);
export {
  N as ProgressCircleComp,
  M as StyledProgressCircle
};
