import { cY as u, Z as t, c6 as p, c7 as C, d1 as f, d2 as g, U as h, F as o, ac as I, ae as r, Y as d, bL as v, bS as F } from "./c988e26e.js";
import { SelectChildrenMap as b, SelectUIView as M, SelectPropertyView as w, baseSelectRefMethods as V } from "./fcc9e192.js";
import { useSelectInputValidate as x, SelectInputInvalidConfig as D } from "./d3b0afba.js";
import { PaddingControl as E } from "./325a473d.js";
import { MarginControl as P } from "./33706f61.js";
import { fixOldInputCompData as U } from "./70f9cad3.js";
import "react";
import "react-dom";
import "./85e61f03.js";
let a = function() {
  const s = {
    ...b,
    defaultValue: u("defaultValue", ["1", "2"]),
    value: u("value"),
    style: t(p, "style"),
    labelStyle: t(C, "labelStyle"),
    inputFieldStyle: t(f, "inputFieldStyle"),
    childrenInputFieldStyle: t(g, "childrenInputFieldStyle"),
    margin: P,
    padding: E
  };
  return new h(s, (e, S) => {
    var i, n;
    const c = new Set(e.options.map((l) => l.value)), [m, y] = x(e);
    return e.label({
      required: e.required,
      style: e.style,
      labelStyle: e.labelStyle,
      inputFieldStyle: e.inputFieldStyle,
      childrenInputFieldStyle: e.childrenInputFieldStyle,
      children: /* @__PURE__ */ o(M, {
        ...e,
        mode: "multiple",
        value: (n = (i = e.value.value).filter) == null ? void 0 : n.call(i, (l) => c.has(l)),
        onChange: y,
        dispatch: S
      }),
      ...m
    });
  }).setPropertyViewFn((e) => /* @__PURE__ */ o(w, {
    ...e
  })).setExposeMethodConfigs(V).build();
}();
a = F(a, U);
const k = I(a, [new r("value", d("selectInput.valueDesc")), new r("inputValue", d("select.inputValueDesc")), D, ...v]);
export {
  k as MultiSelectComp
};
