import { k as h } from "./f915fcd2.js";
import { TableToolbarComp as g } from "./464239f7.js";
import { Y as e, g as b, M as d, fL as y, bO as C, fM as S, O as o, w as l, aA as r, dQ as v, fh as f, a as i, cy as s, a4 as n, v as H, Z as a, fN as T, fO as R, fP as x, fQ as k, fR as E, S as O, fS as B, bI as P, cw as V, U as M, F as p, G as m, fT as A, a3 as L } from "./c988e26e.js";
import "react";
import { ExpansionControl as z } from "./68ba86a3.js";
import { PaginationControl as D } from "./911053df.js";
import { SelectionControl as F } from "./6a2c46a1.js";
import "./22fa10de.js";
import "./8c51b61b.js";
import "./5230605f.js";
import "./be799735.js";
import "./0417d842.js";
import "./975a080d.js";
import "react-dom";
import "./82a4bca8.js";
import "./71bdd49a.js";
import "./2088ebd5.js";
import "./d3b0afba.js";
import "./85e61f03.js";
import "./36c2248f.js";
import "./70f9cad3.js";
import "./80c67fbe.js";
import "./094988fd.js";
import "./734fbd0f.js";
import "./80229ccd.js";
import "./16b77c22.js";
import "./b25be8d9.js";
import "./0c3664e6.js";
import "./c504e788.js";
import "./ad2208e2.js";
import "./e5bcb9b0.js";
import "./51dea655.js";
import "./fcc9e192.js";
import "./325a473d.js";
import "./33706f61.js";
import "./765e17fb.js";
import "./98885dce.js";
import "./9ee13d0e.js";
import "./9f467dd0.js";
import "./765a8ca5.js";
import "./3e9c3444.js";
import "./608865ad.js";
const I = [{
  label: e("table.singleClick"),
  value: "single"
}, {
  label: e("table.doubleClick"),
  value: "double"
}], G = [{
  label: "1",
  value: "1"
}, {
  label: "2",
  value: "2"
}, {
  label: "3",
  value: "3"
}], N = [{
  label: e("table.small"),
  value: "small"
}, {
  label: e("table.middle"),
  value: "middle"
}, {
  label: e("table.large"),
  value: "large"
}], j = [{
  label: e("table.saveChanges"),
  value: "saveChanges",
  description: e("table.saveChanges")
}, {
  label: e("table.cancelChanges"),
  value: "cancelChanges",
  description: e("table.cancelChanges")
}, {
  label: e("table.rowSelectChange"),
  value: "rowSelectChange",
  description: e("table.rowSelectChange")
}, {
  label: e("table.rowClick"),
  value: "rowClick",
  description: e("table.rowClick")
}, {
  label: e("table.rowExpand"),
  value: "rowExpand",
  description: e("table.rowExpand")
}, {
  label: e("table.rowShrink"),
  value: "rowShrink",
  description: e("table.rowShrink")
}, {
  label: e("table.columnEdited"),
  value: "columnEdited",
  description: e("table.columnEdited")
}, {
  label: e("table.search"),
  value: "dataSearch",
  description: e("table.search")
}, {
  label: e("table.download"),
  value: "download",
  description: e("table.download")
}, {
  label: e("table.filterChange"),
  value: "filterChange",
  description: e("table.filterChange")
}, {
  label: e("table.sortChange"),
  value: "sortChange",
  description: e("table.sortChange")
}, {
  label: e("table.pageChange"),
  value: "pageChange",
  description: e("table.pageChange")
}, {
  label: e("table.refresh"),
  value: "refresh",
  description: e("table.refresh")
}], Q = L(j), c = e("table.rowColor"), U = b(new d({
  color: y
}, (t) => t.color).setPropertyViewFn((t) => t.color.propertyView({
  label: c,
  tooltip: e("table.rowColorDesc")
})).build());
class J extends U {
  getPropertyView() {
    return C({
      filterText: c
    }, super.getPropertyView());
  }
}
const w = e("table.rowHeight"), Y = b(new d({
  height: S
}, (t) => t.height).setPropertyViewFn((t) => t.height.propertyView({
  label: w,
  tooltip: e("table.rowHeightDesc")
})).build());
class Z extends Y {
  getPropertyView() {
    return C({
      filterText: w
    }, super.getPropertyView());
  }
}
const u = {
  // hideBordered: BoolControl,
  showHeaderGridBorder: o,
  showRowGridBorder: l(o, !0),
  showHRowGridBorder: l(o, !0),
  hideHeader: o,
  fixedHeader: o,
  autoHeight: l(r, "auto"),
  showVerticalScrollbar: o,
  showHorizontalScrollbar: o,
  data: v(f),
  newData: i([]),
  showDataLoadSpinner: l(s, !0),
  columns: h,
  size: n(N, "middle"),
  selection: F,
  pagination: D,
  sort: H([]),
  toolbar: g,
  showSummary: o,
  summaryRows: n(G, "1"),
  style: a(T, "style"),
  rowStyle: a(R, "rowStyle"),
  summaryRowStyle: a(x, "summaryRowStyle"),
  toolbarStyle: a(k, "toolbarStyle"),
  headerStyle: a(E, "headerStyle"),
  searchText: O,
  columnsStyle: a(B, "columnsStyle"),
  viewModeResizable: o,
  visibleResizables: o,
  // sample data for regenerating columns
  dataRowExample: i(null),
  onEvent: Q,
  loading: P,
  rowColor: J,
  rowAutoHeight: l(r, "auto"),
  tableAutoHeight: l(r, "auto"),
  rowHeight: Z,
  dynamicColumn: s,
  // todo: support object config
  dynamicColumnConfig: V,
  expansion: z,
  selectedCell: i({}),
  inlineAddNewRow: o,
  editModeClicks: n(I, "single")
}, ze = function() {
  return new M(u, () => /* @__PURE__ */ p(m, {})).setPropertyViewFn(() => /* @__PURE__ */ p(m, {})).build();
}();
A(u);
export {
  J as RowColorComp,
  Z as RowHeightComp,
  j as TableEventOptions,
  ze as TableInitComp
};
