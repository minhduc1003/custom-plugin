import { X as l, dy as f, Y as o, a5 as w, a3 as $, aA as x, a4 as m, dz as y, Z as s, dA as C, az as p, U as b, F as n, dB as v, a8 as a, G as h, a9 as i, aa as r, ah as c, ab as S, ac as k, ae as A, ad as V, ag as z, av as H, aw as T, ax as E, an as F, ap as P, ao as B } from "./c988e26e.js";
import { useContext as u } from "react";
import { MarginControl as M } from "./33706f61.js";
import { PaddingControl as W } from "./325a473d.js";
import "react-dom";
const j = [z], D = (t) => H`
    border-radius: ${t.radius ? t.radius : "4px"};
    border: ${t.borderWidth ? t.borderWidth : "0px"} ${t.borderStyle ? t.borderStyle : "solid"} ${t.border};
    color: ${t.text};
    text-transform:${t.textTransform} !important;
    text-decoration:${t.textDecoration} !important;
    background-color: ${t.background};
    .markdown-body a {
      color: ${t.links};
    }
    .markdown-body {
      margin: ${t.margin} !important;	
      padding: ${t.padding};	
      width: ${T(t.margin)};	
      font-family: ${t.fontFamily} !important;
      font-style:${t.fontStyle} !important;
      font-size: ${t.textSize} !important;
      // height: ${E(t.margin)};
      h1 {
        line-height: 1.5;
      }
      h5 {
        line-height: 2.2;
      }
    }

    .markdown-body {
      &,
      p,
      div,
      h1,
      h2,
      h3,
      h4,
      h5,
      h6 {
        color: ${t.text};
        font-weight: ${t.textWeight} !important;
        line-height:${t.lineHeight};
      }
      img,
      pre {
        background-color: ${t.background};
        code {
          color: #000000;
        }
      }
    }
  `, N = l.div`
  height: 100%;
  overflow: auto;
  margin: 0;
  ${(t) => t.$animationStyle}
  ${(t) => t.$type === "text" && `
    white-space:break-spaces;
    line-height: 1.9;
    font-size: ${t.$styleConfig.textSize};
    font-weight: ${t.$styleConfig.textWeight};
    font-style: ${t.$styleConfig.fontStyle};
    font-family: ${t.$styleConfig.fontFamily};
    margin: ${t.$styleConfig.margin};
    padding: ${t.$styleConfig.padding};
  `};
  ${(t) => t.$styleConfig && D(t.$styleConfig)}
  display: flex;
  ${f};
  overflow-wrap: anywhere;
  .markdown-body {
    overflow-wrap: anywhere;
  }
`, O = l(F)`
  transform: rotate(90deg);
`, R = l(P)`
  transform: rotate(90deg);
`, U = l(B)`
  transform: rotate(90deg);
`, I = [{
  label: "Markdown",
  value: "markdown"
}, {
  label: o("text"),
  value: "text"
}], G = [{
  label: /* @__PURE__ */ n(O, {}),
  value: "flex-start"
}, {
  label: /* @__PURE__ */ n(U, {}),
  value: "center"
}, {
  label: /* @__PURE__ */ n(R, {}),
  value: "flex-end"
}];
let d = function() {
  const t = {
    text: w("text", o("textShow.text", {
      name: "{{currentUser.name}}"
    })),
    onEvent: $(j),
    autoHeight: x,
    type: m(I, "markdown"),
    horizontalAlignment: y(),
    verticalAlignment: m(G, "center"),
    style: s(C, "style"),
    animationStyle: s(p, "animationStyle"),
    margin: M,
    padding: W
  };
  return new b(t, (e, J) => {
    const g = e.text.value;
    return /* @__PURE__ */ n(N, {
      $animationStyle: e.animationStyle,
      $type: e.type,
      $styleConfig: e.style,
      style: {
        justifyContent: e.horizontalAlignment,
        alignItems: e.autoHeight ? "center" : e.verticalAlignment,
        textAlign: e.horizontalAlignment,
        rotate: e.style.rotation
      },
      onClick: () => e.onEvent("click"),
      children: e.type === "markdown" ? /* @__PURE__ */ n(v, {
        children: g
      }) : g
    });
  }).setPropertyViewFn((e) => /* @__PURE__ */ a(h, {
    children: [/* @__PURE__ */ a(i, {
      name: r.basic,
      children: [e.type.propertyView({
        label: o("value"),
        tooltip: o("textShow.valueTooltip"),
        radioButton: !0
      }), e.text.propertyView({})]
    }), ["logic", "both"].includes(u(c).editorModeStatus) && /* @__PURE__ */ a(i, {
      name: r.interaction,
      children: [S(e), e.onEvent.getPropertyView()]
    }), ["layout", "both"].includes(u(c).editorModeStatus) && /* @__PURE__ */ a(h, {
      children: [/* @__PURE__ */ a(i, {
        name: r.layout,
        children: [e.autoHeight.getPropertyView(), !e.autoHeight.getView() && e.verticalAlignment.propertyView({
          label: o("textShow.verticalAlignment"),
          radioButton: !0
        }), e.horizontalAlignment.propertyView({
          label: o("textShow.horizontalAlignment"),
          radioButton: !0
        })]
      }), /* @__PURE__ */ n(i, {
        name: r.style,
        children: e.style.getPropertyView()
      }), /* @__PURE__ */ n(i, {
        name: r.animationStyle,
        hasTooltip: !0,
        children: e.animationStyle.getPropertyView()
      })]
    })]
  })).build();
}();
d = class extends d {
  autoHeight() {
    return this.children.autoHeight.getView();
  }
};
const L = k(d, [new A("text", o("textShow.textDesc")), V]);
export {
  L as TextComp
};
