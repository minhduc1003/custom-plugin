import { _ as y, gq as qe, au as Ge, a8 as L, F as c, at as Ke, mz as zt, X as v, hZ as ne, G as j, g7 as ge, gA as It, cE as _t, ah as Et, mA as At, mB as Ue, ai as Wt, e6 as Ht, cG as Ot, Y as h, mC as Ft, dn as Mt, dp as Dt, av as Pt, mD as Bt, mE as Nt, mF as Lt, q as jt, g as Ye, M as be, fL as qt, bO as oe, S as N, w as C, O as ee, v as Ae, a2 as Gt, a4 as We, g1 as Kt, a as Ut, am as B, dT as te, fv as Xe, cB as Yt, cC as He, du as Oe, dX as Xt, dZ as he, bP as Jt, cv as Fe, l1 as Je, g2 as Ze, g3 as Qe, g4 as et, g5 as pe, e5 as Zt, dr as ce, gc as Qt, an as eo, gl as to, ap as oo, bq as ro, mG as no, hb as io, d_ as Me, mH as De, mI as lo } from "./c988e26e.js";
import { useState as M, useContext as me, useMemo as f, useCallback as Pe, useEffect as tt, useRef as ao } from "react";
import { ColumnTypeCompMap as Be, ColumnTypeComp as so } from "./22fa10de.js";
import { TextOverflowControl as co } from "./765a8ca5.js";
import { ColumnValueTooltip as uo } from "./0417d842.js";
import { SummaryColumnComp as ho } from "./3e9c3444.js";
import { TableRowContext as ot, TableCellContext as po } from "./be799735.js";
import { tableFilterOperatorMap as mo, TableToolbar as go } from "./464239f7.js";
import { _ as bo } from "./5230605f.js";
import { SlotConfigContext as fo } from "./608865ad.js";
const S = "children", w = "__ob_origin_index", wo = "__ob_origin_record", K = 55, rt = 500;
function yo(e, t, o, n) {
  let i = e;
  return t && (i = i.filter((l) => {
    let a = t == null ? void 0 : t.toLowerCase();
    return a ? Object.values(l).find((s) => s == null ? void 0 : s.toString().toLowerCase().includes(a)) : !0;
  })), n && o.filters.length > 0 && (i = i.filter((l) => {
    for (let a of o.filters) {
      const s = l[a.columnKey], d = mo[a.operator].filter(a.filterValue, s);
      if (o.stackType === "or" && d)
        return !0;
      if (o.stackType === "and" && !d)
        return !1;
    }
    return o.filters.length === 0 || o.stackType === "and" ? !0 : o.stackType !== "or";
  })), i;
}
function xo(e, t, o) {
  let n = e.map((i, l) => ({
    ...i,
    [w]: l + ""
  }));
  if (o.length > 0) {
    const [i, l] = y(o).filter((a) => {
      var s;
      return !!a.column && ((s = t[a.column]) == null ? void 0 : s.sortable);
    }).map((a) => [a.column, a.desc ? "desc" : "asc"]).unzip().value();
    n = y.orderBy(n, i.map((a) => (s) => {
      const d = s[a];
      return typeof d == "string" ? d.toLowerCase() : d;
    }), l);
  }
  return n;
}
function nt({
  hide: e,
  tempHide: t,
  enableColumnSetting: o
}) {
  return o && t || e;
}
function it(e, t) {
  return e + "-" + t;
}
function lt(e, t) {
  const o = t + "";
  return Array.isArray(e[S]) ? {
    ...e,
    [w]: o,
    children: e[S].map((n, i) => lt(n, it(o, i + "")))
  } : {
    ...e,
    [w]: o
  };
}
function at(e, t, o) {
  return e.map((n, i) => {
    const l = {
      [w]: n[w]
    };
    return o.forEach((a) => {
      const s = a.render.wrap({
        currentCell: n[a.dataIndex],
        currentRow: y.omit(n, w),
        currentIndex: i % t,
        currentOriginalIndex: n[w]
      });
      Array.isArray(n[S]) && (l[S] = at(n[S], t, o));
      const d = s.comp[bo](s.comp);
      d !== null && (l[a.dataIndex] = d);
    }), l;
  });
}
function st(e, t) {
  return e.map((o) => {
    const n = y(o).omit(w).mapKeys((i, l) => t[l] || l).value();
    return Array.isArray(o[S]) ? {
      ...n,
      [S]: st(o[S], t)
    } : n;
  });
}
function $o(e, t) {
  return y.mapValues(t, (o, n) => {
    const i = o.wrap().compType, l = {
      compType: i
    };
    return i === "tag" ? l.uniqueTags = y(e).map((a) => a[n]).filter((a) => !!a).uniq().value() : i === "badgeStatus" && (l.uniqueStatus = y(e).map((a) => {
      const s = a[n];
      return s.split(" ")[1] ? {
        status: s.slice(0, s.indexOf(" ")),
        text: s.slice(s.indexOf(" ") + 1)
      } : {
        status: s,
        text: ""
      };
    }).uniqBy("text").value()), l;
  });
}
function Co(e) {
  const {
    title: t,
    tooltip: o,
    editable: n
  } = e;
  return /* @__PURE__ */ L("div", {
    children: [/* @__PURE__ */ c(Ke, {
      title: o,
      children: /* @__PURE__ */ c("span", {
        style: {
          borderBottom: o ? "1px dotted" : ""
        },
        children: t
      })
    }), n && /* @__PURE__ */ c(zt, {
      style: {
        verticalAlign: "baseline",
        marginLeft: "4px"
      }
    })]
  });
}
function So(e, t) {
  let o = [];
  return Object.keys(e).forEach((n) => {
    t.includes(n) || o.push({
      label: n,
      value: `{{currentRow.${n}}}`
    });
  }), o.push({
    label: "Select with handlebars",
    value: "{{currentCell}}"
  }), o;
}
function dt(e, t, o, n, i, l, a, s, d) {
  const p = e.filter((r) => r.isCustom).map((r) => r.dataIndex), m = So(a, p), x = new Map(t.map((r) => [r.column, r.desc ? "descend" : "ascend"]));
  return y.sortBy(e, (r) => {
    if (r.fixed === "left")
      return -1;
    if (r.fixed === "right")
      return Number.MAX_SAFE_INTEGER;
    if (l.length > 0) {
      const g = l.indexOf(r.isCustom ? r.title : r.dataIndex);
      if (g >= 0)
        return g;
    }
    return 0;
  }).flatMap((r, g) => {
    if (nt({
      hide: r.hide,
      tempHide: r.tempHide,
      enableColumnSetting: o
    }))
      return [];
    if (i && l.length > 0 && !l.includes(r.isCustom ? r.title : r.dataIndex))
      return [];
    const I = (a[r.dataIndex] ?? {}).uniqueTags ?? [], D = (a[r.dataIndex] ?? {}).uniqueStatus ?? [], A = Co({
      title: r.title,
      tooltip: r.titleTooltip,
      editable: r.editable
    });
    return {
      key: `${r.dataIndex}-${g}`,
      title: r.showTitle ? A : "",
      titleText: r.title,
      dataIndex: r.dataIndex,
      align: r.align,
      width: r.autoWidth === "auto" ? 0 : r.width,
      fixed: r.fixed === "close" ? !1 : r.fixed,
      style: {
        background: r.background,
        margin: r.margin,
        text: r.text,
        border: r.border,
        radius: r.radius,
        textSize: r.textSize,
        textWeight: r.textWeight,
        fontStyle: r.fontStyle,
        fontFamily: r.fontFamily,
        borderWidth: r.borderWidth
      },
      linkStyle: {
        text: r.linkColor,
        hoverText: r.linkHoverColor,
        activeText: r.linkActiveColor
      },
      cellColorFn: r.cellColor,
      onWidthResize: r.onWidthResize,
      render: (P, V, R) => {
        const W = y.omit(V, w);
        return r.render({
          currentCell: P,
          currentRow: W,
          currentIndex: R,
          currentOriginalIndex: qe(V[w]),
          initialColumns: m
        }, String(V[w])).getView().view({
          editable: V[w].startsWith(z) || r.editable,
          size: n,
          candidateTags: I,
          candidateStatus: D,
          textOverflow: r.textOverflow,
          cellTooltip: r.cellTooltip({
            currentCell: P,
            currentRow: W,
            currentIndex: R
          }),
          editMode: s,
          onTableEvent: d
        });
      },
      ...r.sortable ? {
        sorter: !0,
        sortOrder: x.get(r.dataIndex),
        showSorterTooltip: !1
      } : {}
    };
  });
}
function Ne(e) {
  var t;
  return (t = e.column) != null && t.dataIndex ? {
    column: e.column.dataIndex.toString(),
    desc: e.order === "descend"
  } : null;
}
function ct(e, t, o, n, i, l) {
  if (n.action === "sort") {
    let a = [];
    if (Array.isArray(o))
      o.forEach((s) => {
        const d = Ne(s);
        d && a.push(d);
      });
    else {
      const s = Ne(o);
      s && a.push(s);
    }
    i(Ge("sort", a, !0)), l("sortChange");
  }
}
function ut(e, t) {
  const o = (l) => {
    const a = new Blob([l]).size;
    return l.length === a ? l.length * 10 : l.length * 20;
  }, n = y.max(t.map((l) => {
    const a = l[e];
    return a ? o(a.toString()) : K;
  })) || 0, i = o(e);
  return Math.max(Math.min(rt, Math.max(i, n) + 10), K);
}
function vo(e, t) {
  const o = e.findIndex((i) => i[w] === t);
  if (o < 0)
    return;
  const n = e[o];
  return {
    currentRow: y.omit(n, w),
    currentIndex: o,
    currentOriginalIndex: qe(n[w])
  };
}
function fe(e) {
  const t = wt(e);
  return t && Array.isArray(t[S]);
}
const sr = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  COLUMN_CHILDREN_KEY: S,
  COL_MAX_WIDTH: rt,
  COL_MIN_WIDTH: K,
  OB_ROW_ORI_INDEX: w,
  OB_ROW_RECORD: wo,
  buildOriginIndex: it,
  calcColumnWidth: ut,
  columnHide: nt,
  columnsToAntdFormat: dt,
  filterData: yo,
  genSelectionParams: vo,
  getColumnsAggr: $o,
  getOriDisplayData: at,
  onTableChange: ct,
  sortData: xo,
  supportChildrenTree: fe,
  tranToTableRecord: lt,
  transformDispalyData: st
}, Symbol.toStringTag, { value: "Module" })), Vo = (e) => e.length === 1 ? `(${e[0]} + ${e[0]})` : e.length === 2 ? `(${e[0]} + ${e[0]})` : e.length === 3 || e.length === 4 ? `(${e[0]} + ${e[2]})` : "0px", To = v(ne.Summary.Row)`
  td:last-child {
    border-right: unset !important;
  }

  ${(e) => !e.$istoolbarPositionBelow && `
    &:last-child td {
      border-bottom: none !important;
    }
  `}
  
`, Ro = v(ne.Summary.Cell)`
  background: ${(e) => e.$style.background} !important;
  border-color: ${(e) => e.$style.border} !important;
  // border-width: ${(e) => e.$style.borderWidth} !important;
  // border-style: ${(e) => e.$style.borderStyle} !important;
  border-radius: ${(e) => e.$style.radius};
  padding: 0 !important;

  > div {
    margin: ${(e) => e.$style.margin};
    color: ${(e) => e.$style.text};
    font-weight: ${(e) => e.$style.textWeight};
    font-family: ${(e) => e.$style.fontFamily};
    overflow: hidden; 
    ${(e) => e.$tableSize === "small" && `
      padding: 1px 8px;
      font-size: ${e.$defaultThemeDetail.textSize == e.$style.textSize ? "14px !important" : e.$style.textSize + " !important"};
      font-style:${e.$style.fontStyle} !important;
      min-height: 14px;
      line-height: 20px;
      ${!e.$autoHeight && `
        overflow-y: auto;
        max-height: 28px;
      `};
    `};
    ${(e) => e.$tableSize === "middle" && `
      padding: 8px 8px;
      font-size: ${e.$defaultThemeDetail.textSize == e.$style.textSize ? "16px !important" : e.$style.textSize + " !important"};
      font-style:${e.$style.fontStyle} !important;
      min-height: 24px;
      line-height: 24px;
      ${!e.$autoHeight && `
        overflow-y: auto;
        max-height: 48px;
      `};
    `};
    ${(e) => e.$tableSize === "large" && `
      padding: 16px 16px;
      font-size: ${e.$defaultThemeDetail.textSize == e.$style.textSize ? "18px !important" : e.$style.textSize + " !important"};
      font-style:${e.$style.fontStyle} !important;
      min-height: 48px;
      ${!e.$autoHeight && `
        overflow-y: auto;
        max-height: 96px;
      `};
    `};
    
    > .ant-badge > .ant-badge-status-text,
    > div > .markdown-body {
      color: ${(e) => e.$style.text};
    }

    > div > svg g {
      stroke: ${(e) => e.$style.text};
    }

    > a,
    > div  a {
      color: ${(e) => {
  var t;
  return (t = e.$linkStyle) == null ? void 0 : t.text;
}};

      &:hover {
        color: ${(e) => {
  var t;
  return (t = e.$linkStyle) == null ? void 0 : t.hoverText;
}};
      }

      &:active {
        color: ${(e) => {
  var t;
  return (t = e.$linkStyle) == null ? void 0 : t.activeText;
}}};
      }
    }
  }
`, ko = ({
  children: e,
  tooltipTitle: t
}) => t ? /* @__PURE__ */ c(Ke, {
  title: t,
  placement: "topLeft",
  children: e
}) : /* @__PURE__ */ c(j, {
  children: e
});
function zo(e) {
  const {
    children: t,
    rowStyle: o,
    columnStyle: n,
    tableSize: i,
    autoHeight: l,
    cellColor: a,
    cellTooltip: s,
    ...d
  } = e, p = {
    background: a || n.background || o.background,
    margin: n.margin || o.margin,
    text: n.text || o.text,
    border: n.border || o.border,
    borderWidth: o.borderWidth,
    borderStyle: o.borderStyle,
    radius: n.radius || o.radius,
    textSize: n.textSize || o.textSize,
    textWeight: o.textWeight || n.textWeight,
    fontFamily: o.fontFamily || n.fontFamily,
    fontStyle: o.fontStyle || n.fontStyle
  };
  return /* @__PURE__ */ c(Ro, {
    ...d,
    $style: p,
    $defaultThemeDetail: ge,
    $tableSize: i,
    $autoHeight: l,
    children: /* @__PURE__ */ c(ko, {
      tooltipTitle: s,
      children: /* @__PURE__ */ c("div", {
        children: t
      })
    })
  });
}
function ht(e) {
  const {
    columns: t,
    summaryRows: o,
    summaryRowStyle: n,
    tableSize: i,
    expandableRows: l,
    istoolbarPositionBelow: a
  } = e;
  let s = t.filter((d) => !d.getView().hide);
  return l && s.unshift(new ie({})), s.length ? /* @__PURE__ */ c(ne.Summary, {
    children: Array.from(Array(o)).map((d, p) => /* @__PURE__ */ c(To, {
      $istoolbarPositionBelow: a,
      children: s.map((m, x) => {
        const u = m.children.summaryColumns.getView()[p].getView();
        return /* @__PURE__ */ c(zo, {
          index: x,
          tableSize: i,
          rowStyle: n,
          align: u.align,
          cellColor: u.cellColor,
          cellTooltip: u.cellTooltip,
          columnStyle: {
            background: u.background,
            margin: u.margin,
            text: u.text,
            border: u.border,
            radius: u.radius,
            textSize: u.textSize,
            textWeight: u.textWeight,
            fontStyle: u.fontStyle,
            fontFamily: u.fontFamily
          },
          linkStyle: {
            text: u.linkColor,
            hoverText: u.linkHoverColor,
            activeText: u.linkActiveColor
          },
          children: u.render({}, "").getView().view({})
        }, `summary-${p}-${m.getView().dataIndex}-${x}`);
      })
    }, p))
  }) : /* @__PURE__ */ c(j, {});
}
const dr = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  TableSummary: ht
}, Symbol.toStringTag, { value: "Module" })), z = "empty_row";
function O(e) {
  return `linear-gradient(${e}, ${e})`;
}
const Io = (e, t, o, n) => {
  const i = O(e.background), l = O(t.selectedRowBackground), a = O(t.hoverRowBackground), s = O(t.alternateBackground);
  return Pt`
    .ant-table-body {
      background: ${O(e.background)};
    }
    .ant-table-tbody {
      > tr:nth-of-type(2n + 1) {
        &,
        > td {
          background: ${O(t.background)};
          // border-bottom:${t.borderWidth} ${t.borderStyle} ${t.border} !important;
          // border-right:${t.borderWidth} ${t.borderStyle} ${t.border} !important;
        }
      }

      > tr:nth-of-type(2n) {
        &,
        > td {
          background: ${s};
          // border-bottom:${t.borderWidth} ${t.borderStyle} ${t.border} !important;
          // border-right:${t.borderWidth} ${t.borderStyle} ${t.border} !important;
        }
      }

      // selected row
      > tr:nth-of-type(2n + 1).ant-table-row-selected {
        > td {
          background: ${l}, ${t.background} !important;
        }

        > td.ant-table-cell-row-hover,
        &:hover > td {
          background: ${a}, ${l}, ${t.background} !important;
        }
      }

      > tr:nth-of-type(2n).ant-table-row-selected {
        > td {
          background: ${l}, ${s} !important;
        }

        > td.ant-table-cell-row-hover,
        &:hover > td {
          background: ${a}, ${l}, ${s} !important;
        }
      }

      // hover row
      > tr:nth-of-type(2n + 1) > td.ant-table-cell-row-hover {
        &,
        > div:nth-of-type(2) {
          background: ${a}, ${t.background} !important;
        }
      }

      > tr:nth-of-type(2n) > td.ant-table-cell-row-hover {
        &,
        > div:nth-of-type(2) {
          background: ${a}, ${s} !important;
        }
      }

      > tr.ant-table-expanded-row > td {
        background: ${i};
      }
    }
  `;
}, _o = v.span`
  position: absolute;
  top: 0;
  right: -5px;
  width: 10px;
  height: 100%;
  cursor: col-resize;
  z-index: 1;
`, Eo = v.div`
  display: flex;
  flex-direction: column;
  background: ${(e) => e.$style.background} !important;
  border-radius: ${(e) => e.$style.radius} !important;
  padding: ${(e) => e.$style.padding} !important;
  margin: ${(e) => e.$style.margin} !important;
  border-style: ${(e) => e.$style.borderStyle} !important;
  border-width: ${(e) => `${e.$style.borderWidth} !important`};
  border-color: ${(e) => `${e.$style.border} !important`};
  height: calc(100% - ${(e) => Vo(e.$style.margin.split(" "))});
  overflow: hidden;

  > div.table-scrollbar-wrapper {
    overflow: auto;
    ${(e) => e.$fixedToolbar && "height: auto"};

    ${(e) => (e.$showHorizontalScrollbar || e.$showVerticalScrollbar) && `
      .simplebar-content-wrapper {
        overflow: auto !important;
      }  
    `}

    ${(e) => !e.$showHorizontalScrollbar && `
      div.simplebar-horizontal {
        visibility: hidden !important;
      }  
    `}
    ${(e) => !e.$showVerticalScrollbar && `
      div.simplebar-vertical {
        visibility: hidden !important;
      }  
    `}
  }
`, Ao = v.div`
  .ant-table-wrapper {
    border-top: unset;
    border-color: inherit;
  }

  .ant-table-row-expand-icon {
    color: ${It};
  }

  .ant-table .ant-table-cell-with-append .ant-table-row-expand-icon {
    margin: 0;
    top: 18px;
    left: 4px;
  }

  .ant-table.ant-table-small .ant-table-cell-with-append .ant-table-row-expand-icon {
    top: 10px;
  }

  .ant-table.ant-table-middle .ant-table-cell-with-append .ant-table-row-expand-icon {
    top: 14px;
    margin-right:5px;
  }

  .ant-table {
    background: ${(e) => e.$style.background};
    .ant-table-container {
      border-left: unset;
      border-top: none !important;
      border-inline-start: none !important;

      &::after {
        box-shadow: none !important;
      }

      .ant-table-content {
        overflow: unset !important
      }

      // A table expand row contains table
      .ant-table-tbody .ant-table-wrapper:only-child .ant-table {
        margin: 0;
      }

      table {
        border-top: unset;

        > .ant-table-thead {
          ${(e) => e.$fixedHeader && `
              position: sticky;
              position: -webkit-sticky;
              // top: ${e.$fixedToolbar ? "47px" : "0"};
              top: 0;
              z-index: 99;
            `}
          > tr > th {
            background-color: ${(e) => e.$headerStyle.headerBackground};
           
            border-color: ${(e) => e.$headerStyle.border};
            border-width: ${(e) => e.$headerStyle.borderWidth};
            color: ${(e) => e.$headerStyle.headerText};
            // border-inline-end: ${(e) => `${e.$headerStyle.borderWidth} solid ${e.$headerStyle.border}`} !important;
            

            > div {
              margin: ${(e) => e.$headerStyle.margin};

              &, .ant-table-column-title > div {
                font-size: ${(e) => e.$headerStyle.textSize};
                font-weight: ${(e) => e.$headerStyle.textWeight};
                font-family: ${(e) => e.$headerStyle.fontFamily};
                font-style: ${(e) => e.$headerStyle.fontStyle};
                color:${(e) => e.$headerStyle.text}
              }
            }

            &:last-child {
              border-inline-end: none !important;
            }
            &.ant-table-column-has-sorters:hover {
              background-color: ${(e) => _t(e.$headerStyle.headerBackground, 0.05)};
            }
  
            > .ant-table-column-sorters > .ant-table-column-sorter {
              color: ${(e) => e.$headerStyle.headerText === ge.textDark ? "#bfbfbf" : e.$headerStyle.headerText};
            }

            &::before {
              background-color: ${(e) => e.$headerStyle.border};
              width: ${(e) => e.$visibleResizables ? "1px" : "0px"} !important;
            }
          }
        }

        > thead > tr > th,
        > tbody > tr > td {
          border-color: ${(e) => e.$headerStyle.border};
          ${(e) => !e.$showHRowGridBorder && "border-bottom: 0px;"}
        }

        td {
          padding: 0px 0px;
          // ${(e) => e.$showHRowGridBorder ? "border-bottom: 1px solid #D7D9E0 !important;" : "border-bottom: 0px;"}
        }

        thead > tr:first-child {
          th:last-child {
            border-right: unset;
          }
        }

        tbody > tr > td:last-child {
          border-right: unset !important;
        }

        .ant-empty-img-simple-g {
          fill: #fff;
        }

        > thead > tr:first-child {
          th:first-child {
            border-top-left-radius: 0px;
          }

          th:last-child {
            border-top-right-radius: 0px;
          }
        }
      }

      .ant-table-expanded-row-fixed:after {
        border-right: unset !important;
      }
    }
  }
  
  ${(e) => e.$style && Io(e.$style, e.$rowStyle, e.$headerStyle, e.$toolbarStyle)}
`, Le = v.th`
  overflow: hidden;

  > div {
    overflow: hidden;
    white-space: pre;
    text-overflow: ellipsis;
  }

  ${(e) => e.width && `width: ${e.width}px`};
`, Wo = v.td`
  .ant-table-row-expand-icon,
  .ant-table-row-indent {
    display: ${(e) => e.$isEditing ? "none" : "initial"};
  }
  &.ant-table-row-expand-icon-cell {
    background: ${(e) => e.$background};
    border-color: ${(e) => e.$style.border};
  }
  background: ${(e) => e.$background} !important;
  border-color: ${(e) => e.$style.border} !important;
  border-radius: ${(e) => e.$style.radius};
  padding: 0 !important;

  > div:not(.editing-border, .editing-wrapper),
  .editing-wrapper .ant-input,
  .editing-wrapper .ant-input-number,
  .editing-wrapper .ant-picker {
    margin: ${(e) => e.$isEditing ? "0px" : e.$style.margin};
    color: ${(e) => e.$style.text};
    font-weight: ${(e) => e.$style.textWeight};
    font-family: ${(e) => e.$style.fontFamily};
    overflow: hidden; 
    ${(e) => e.$tableSize === "small" && `
      padding: 1px 8px;
      font-size: ${e.$defaultThemeDetail.textSize == e.$style.textSize ? "14px !important" : e.$style.textSize + " !important"};
      font-style:${e.$style.fontStyle} !important;
      min-height: ${e.$style.rowHeight || "14px"};
      line-height: 20px;
      ${!e.$autoHeight && `
        overflow-y: auto;
        max-height: ${e.$style.rowHeight || "28px"};
      `};
    `};
    ${(e) => e.$tableSize === "middle" && `
      padding: 8px 8px;
      font-size: ${e.$defaultThemeDetail.textSize == e.$style.textSize ? "16px !important" : e.$style.textSize + " !important"};
      font-style:${e.$style.fontStyle} !important;
      min-height: ${e.$style.rowHeight || "24px"};
      line-height: 24px;
      ${!e.$autoHeight && `
        overflow-y: auto;
        max-height: ${e.$style.rowHeight || "48px"};
      `};
    `};
    ${(e) => e.$tableSize === "large" && `
      padding: 16px 16px;
      font-size: ${e.$defaultThemeDetail.textSize == e.$style.textSize ? "18px !important" : e.$style.textSize + " !important"};
      font-style:${e.$style.fontStyle} !important;
      min-height: ${e.$style.rowHeight || "48px"};
      ${!e.$autoHeight && `
        overflow-y: auto;
        max-height: ${e.$style.rowHeight || "96px"};
      `};
    `};
    
    > .ant-badge > .ant-badge-status-text,
    > div > .markdown-body {
      color: ${(e) => e.$style.text};
    }

    > div > svg g {
      stroke: ${(e) => e.$style.text};
    }

    // dark link|links color
    > a,
    > div  a {
      color: ${(e) => {
  var t;
  return (t = e.$linkStyle) == null ? void 0 : t.text;
}};

      &:hover {
        color: ${(e) => {
  var t;
  return (t = e.$linkStyle) == null ? void 0 : t.hoverText;
}};
      }

      &:active {
        color: ${(e) => {
  var t;
  return (t = e.$linkStyle) == null ? void 0 : t.activeText;
}}};
      }
    }
  }
`, Ho = (e) => {
  const {
    onResize: t,
    onResizeStop: o,
    width: n,
    viewModeResizable: i,
    ...l
  } = e, [a, s] = M(0), d = ao(null), p = Ue(), m = () => {
    n && n > 0 || s(d.current.getBoundingClientRect().width);
  };
  tt(() => {
    d.current && m();
  }, []);
  const x = y.isNil(l.title);
  return p && !i || x ? /* @__PURE__ */ c(Le, {
    ref: d,
    ...l,
    width: n
  }) : /* @__PURE__ */ c(Bt, {
    width: n > 0 ? n : a,
    height: 0,
    onResize: (u, {
      size: r
    }) => t(r.width),
    onResizeStart: (u) => {
      m(), u.stopPropagation(), u.preventDefault();
    },
    onResizeStop: o,
    draggableOpts: {
      enableUserSelectHack: !1
    },
    handle: (u, r) => /* @__PURE__ */ c(_o, {
      ref: r,
      onClick: (g) => {
        g.preventDefault(), g.stopPropagation();
      }
    }),
    children: /* @__PURE__ */ c(Le, {
      ref: d,
      ...l,
      title: ""
    })
  });
};
function Oo(e) {
  const {
    record: t,
    title: o,
    rowIndex: n,
    rowColorFn: i,
    rowHeightFn: l,
    cellColorFn: a,
    children: s,
    columnsStyle: d,
    columnStyle: p,
    linkStyle: m,
    tableSize: x,
    autoHeight: u,
    ...r
  } = e, [g, I] = M(!1), D = me(ot);
  let A;
  if (!t)
    A = /* @__PURE__ */ c("td", {
      ...r,
      children: s
    });
  else {
    const P = i({
      currentRow: t,
      currentIndex: n,
      currentOriginalIndex: t[w],
      columnTitle: o
    }), V = l({
      currentRow: t,
      currentIndex: n,
      currentOriginalIndex: t[w],
      columnTitle: o
    }), W = {
      background: a({
        currentCell: t[o],
        currentRow: t
      }) || P || p.background || d.background,
      margin: p.margin || d.margin,
      text: p.text || d.text,
      border: p.border || d.border,
      radius: p.radius || d.radius,
      // borderWidth: columnStyle.borderWidth || columnsStyle.borderWidth,
      textSize: p.textSize || d.textSize,
      textWeight: d.textWeight || p.textWeight,
      fontFamily: d.fontFamily || p.fontFamily,
      fontStyle: d.fontStyle || p.fontStyle,
      rowHeight: V
    };
    let {
      background: _
    } = W;
    D.selected && (_ = O(Nt(_)) + "," + _), D.hover && (_ = O(Lt(_)) + "," + _), A = /* @__PURE__ */ c(Wo, {
      ...r,
      $background: _,
      $style: W,
      $defaultThemeDetail: ge,
      $linkStyle: m,
      $isEditing: g,
      $tableSize: x,
      $autoHeight: u,
      children: s
    });
  }
  return /* @__PURE__ */ c(po.Provider, {
    value: {
      isEditing: g,
      setIsEditing: I
    },
    children: A
  });
}
function Fo(e) {
  const [t, o] = M(!1), [n, i] = M(!1);
  return /* @__PURE__ */ c(ot.Provider, {
    value: {
      hover: t,
      selected: n
    },
    children: /* @__PURE__ */ c("tr", {
      ...e,
      tabIndex: -1,
      onMouseEnter: () => o(!0),
      onMouseLeave: () => o(!1),
      onFocus: () => i(!0),
      onBlur: () => i(!1)
    })
  });
}
function pt(e) {
  const [t, o] = M({
    index: -1,
    width: -1
  }), n = e.columns.map((i, l) => {
    const {
      width: a,
      style: s,
      linkStyle: d,
      cellColorFn: p,
      ...m
    } = i, x = (t.index === l ? t.width : i.width) ?? 0;
    let u = "auto", r = K;
    return typeof x == "number" && x > 0 && (r = "unset", u = x), {
      ...m,
      RC_TABLE_INTERNAL_COL_DEFINE: {
        style: {
          minWidth: r,
          width: u
        }
      },
      onCell: (g, I) => ({
        record: g,
        title: String(i.dataIndex),
        rowColorFn: e.rowColorFn,
        rowHeightFn: e.rowHeightFn,
        cellColorFn: p,
        rowIndex: I,
        columnsStyle: e.columnsStyle,
        columnStyle: s,
        linkStyle: d,
        tableSize: e.size,
        autoHeight: e.rowAutoHeight,
        onClick: () => {
          e.onCellClick(i.titleText, String(i.dataIndex));
        }
      }),
      onHeaderCell: () => ({
        width: x,
        title: i.titleText,
        viewModeResizable: e.viewModeResizable,
        onResize: (g) => {
          g && o({
            index: l,
            width: g
          });
        },
        onResizeStop: (g, {
          size: I
        }) => {
          o({
            index: -1,
            width: -1
          }), i.onWidthResize && i.onWidthResize(I.width);
        }
      })
    };
  });
  return /* @__PURE__ */ c(ne, {
    components: {
      header: {
        cell: Ho
      },
      body: {
        cell: Oo,
        row: Fo
      }
    },
    ...e,
    pagination: !1,
    columns: n,
    scroll: {
      x: K * n.length,
      y: void 0
    }
  });
}
pt.whyDidYouRender = !0;
const ue = (e, t) => {
  const o = {
    [w]: `${z}_${e}`
  };
  return Object.keys(t).forEach((n) => {
    o[n] = "";
  }), o;
};
function Mo(e) {
  const [t, o] = M({}), n = me(Et), {
    width: i,
    ref: l
  } = At({
    refreshMode: "debounce",
    refreshRate: 600,
    handleHeight: !1
  }), a = Ue(), s = me(Wt), [d, p] = M(!1), {
    comp: m,
    onDownload: x,
    onRefresh: u
  } = e, r = m.children, g = r.style.getView(), I = r.rowStyle.getView(), D = r.headerStyle.getView(), A = r.toolbarStyle.getView(), P = r.rowAutoHeight.getView(), V = m.getTableAutoHeight(), R = r.showHorizontalScrollbar.getView(), W = r.showVerticalScrollbar.getView(), _ = r.visibleResizables.getView(), yt = r.showHRowGridBorder.getView(), xt = r.columnsStyle.getView(), $t = r.summaryRowStyle.getView(), xe = f(() => r.columns.getChangeSet(), [r.columns]), U = f(() => r.columns.getChangeSet(!0), [r.columns]), Ct = f(() => !y.isEmpty(xe) || !y.isEmpty(U), [xe, U]), Y = f(() => r.columns.getView(), [r.columns]), $e = f(() => Y.map((b) => b.getView()), [Y]), X = m.filterData, Ce = f(() => r.sort.getView(), [r.sort]), $ = f(() => r.toolbar.getView(), [r.toolbar]), St = f(() => r.showSummary.getView(), [r.showSummary]), vt = f(() => r.summaryRows.getView(), [r.summaryRows]), le = f(() => r.inlineAddNewRow.getView(), [r.inlineAddNewRow]), F = f(() => r.pagination.getView(), [r.pagination]), ae = f(() => r.size.getView(), [r.size]), Se = f(() => r.editModeClicks.getView(), [r.editModeClicks]), J = f(() => r.onEvent.getView(), [r.onEvent]), ve = r.dynamicColumn.getView(), Ve = f(() => r.dynamicColumnConfig.getView(), [r.dynamicColumnConfig]), Z = m.columnAggrData, se = f(() => r.expansion.getView(), [r.expansion]), Te = f(() => dt($e, Ce, $.columnSetting, ae, ve, Ve, Z, Se, J), [$e, Ce, $.columnSetting, ae, ve, Ve, Z, Se]), Vt = f(() => fe(r.data.getView()), [r.data]), Re = Pe(() => {
    if (!le) {
      o({}), setTimeout(() => r.columns.dispatchClearInsertSet());
      return;
    }
    let b = {
      ...t
    };
    const T = Object.keys(b), H = T.length, k = Object.keys(U).filter((E) => E.startsWith(z)), ke = k.length, ze = T.filter((E) => !k.includes(E));
    if (ze.length === H) {
      const G = `${z}_0`;
      o({
        [G]: ue(0, Z)
      });
      const Ee = document.querySelector(`[data-row-key=${G}]`);
      Ee && (Ee.style.display = "");
      return;
    }
    ze.forEach((E) => {
      if (E === T[H - 1] || E === T[H - 2])
        delete b[E];
      else {
        const G = document.querySelector(`[data-row-key=${E}]`);
        G && (G.style.display = "none");
      }
    });
    const Ie = ke ? k[ke - 1] : "", _e = (Ie ? parseInt(Ie.replace(`${z}_`, "")) : -1) + 1, kt = `${z}_${_e}`;
    b[kt] = ue(_e, Z), o(b);
  }, [le, JSON.stringify(U), o, ue]);
  tt(() => {
    Re();
  }, [Re]);
  const de = f(() => {
    let b = X, T = F.current;
    const H = F.total || X.length;
    if (X.length > F.pageSize) {
      let k = (T - 1) * F.pageSize;
      k >= H && (T = 1, k = 0), b = b.slice(k, k + F.pageSize);
    }
    return {
      total: H,
      current: T,
      data: b
    };
  }, [F, X]);
  Ht(m.children);
  const q = Pe((b) => {
    if (b === "saveChanges" && !r.onEvent.isBind(b)) {
      !a && Ot.warning(h("table.saveChangesNotBind"));
      return;
    }
    r.onEvent.getView()(b), setTimeout(() => r.columns.dispatchClearChangeSet());
  }, [a, r.onEvent, r.columns]), Q = /* @__PURE__ */ c(go, {
    toolbar: $,
    $style: A,
    pagination: {
      ...F,
      total: de.total,
      current: de.current
    },
    columns: Y,
    onRefresh: () => u(n.queryCompInfoList().map((b) => b.name), p),
    onDownload: () => {
      q("download"), x(`${s}-data`);
    },
    hasChange: Ct,
    onSaveChanges: () => q("saveChanges"),
    onCancelChanges: () => {
      q("cancelChanges"), le && o({});
    },
    onEvent: J
  }), Tt = () => {
    if (St)
      return /* @__PURE__ */ c(ht, {
        tableSize: ae,
        istoolbarPositionBelow: $.position === "below",
        expandableRows: !!se.expandModalView,
        summaryRows: parseInt(vt),
        columns: Y,
        summaryRowStyle: $t
      });
  };
  if (Te.length === 0)
    return /* @__PURE__ */ c(Ft, {
      text: h("table.emptyColumns")
    });
  const Rt = !R && !W;
  return /* @__PURE__ */ c(Mt.Provider, {
    value: g.background,
    children: /* @__PURE__ */ L(Eo, {
      ref: l,
      $style: g,
      $tableAutoHeight: V,
      $showHorizontalScrollbar: R,
      $showVerticalScrollbar: W,
      $fixedToolbar: $.fixedToolbar,
      children: [$.position === "above" && ($.fixedToolbar || V && R) && Q, /* @__PURE__ */ c(Dt, {
        className: "table-scrollbar-wrapper",
        style: {
          height: "100%",
          margin: "0px",
          padding: "0px"
        },
        hideScrollbar: Rt,
        prefixNode: $.position === "above" && !$.fixedToolbar && !(V && R) && Q,
        suffixNode: $.position === "below" && !$.fixedToolbar && !(V && R) && Q,
        children: /* @__PURE__ */ L(Ao, {
          $style: g,
          $rowStyle: I,
          $headerStyle: D,
          $toolbarStyle: A,
          $toolbarPosition: $.position,
          $fixedHeader: r.fixedHeader.getView(),
          $fixedToolbar: $.fixedToolbar && $.position === "above",
          $visibleResizables: _,
          $showHRowGridBorder: yt,
          children: [/* @__PURE__ */ c(pt, {
            expandable: {
              ...se.expandableConfig,
              childrenColumnName: Vt ? S : "OB_CHILDREN_KEY_PLACEHOLDER",
              fixed: "left",
              onExpand: (b) => {
                q(b ? "rowExpand" : "rowShrink");
              }
            },
            rowColorFn: r.rowColor.getView(),
            rowHeightFn: r.rowHeight.getView(),
            ...r.selection.getView()(J),
            bordered: r.showRowGridBorder.getView(),
            onChange: (b, T, H, k) => {
              ct(b, T, H, k, m.dispatch, J);
            },
            showHeader: !r.hideHeader.getView(),
            columns: Te,
            columnsStyle: xt,
            viewModeResizable: r.viewModeResizable.getView(),
            visibleResizables: r.visibleResizables.getView(),
            dataSource: de.data.concat(Object.values(t)),
            size: r.size.getView(),
            rowAutoHeight: P,
            tableLayout: "fixed",
            loading: d || // fixme isLoading type
            r.showDataLoadSpinner.getView() && r.data.isLoading() || r.loading.getView(),
            onCellClick: (b, T) => {
              m.children.selectedCell.dispatchChangeValueAction({
                name: b,
                dataIndex: T
              });
            },
            summary: Tt
          }), /* @__PURE__ */ c(fo.Provider, {
            value: {
              modalWidth: i && Math.max(i, 300)
            },
            children: se.expandModalView
          })]
        })
      }), $.position === "below" && ($.fixedToolbar || V && R) && Q]
    })
  });
}
const cr = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  EMPTY_ROW_KEY: z,
  TableCompView: Mo
}, Symbol.toStringTag, { value: "Module" })), re = jt(so), Do = [{
  label: h("table.auto"),
  value: "auto"
}, {
  label: h("table.fixed"),
  value: "fixed"
}], Po = [{
  label: /* @__PURE__ */ c(eo, {}),
  value: "left"
}, {
  label: /* @__PURE__ */ c(to, {}),
  value: "close"
}, {
  label: /* @__PURE__ */ c(oo, {}),
  value: "right"
}], mt = h("table.cellColor"), Bo = Ye(new be({
  color: qt
}, (e) => e.color).setPropertyViewFn((e) => e.color.propertyView({
  label: mt,
  tooltip: h("table.cellColorDesc")
})).build());
class we extends Bo {
  getPropertyView() {
    return oe({
      filterText: mt
    }, super.getPropertyView());
  }
}
const gt = h("table.columnTooltip"), No = Ye(new be({
  tooltip: N
}, (e) => e.tooltip).setPropertyViewFn((e) => e.tooltip.propertyView({
  label: gt,
  tooltip: uo
})).build());
class ye extends No {
  getPropertyView() {
    return oe({
      filterText: gt
    }, super.getPropertyView());
  }
}
const bt = {
  // column title
  title: N,
  titleTooltip: N,
  showTitle: C(ee, !0),
  cellTooltip: ye,
  // a custom column or a data column
  isCustom: Ae(!1),
  // If it is a data column, it must be the name of the column and cannot be duplicated as a react key
  dataIndex: Ae(""),
  hide: ee,
  sortable: ee,
  width: Gt,
  autoWidth: We(Do, "auto"),
  render: re,
  align: Kt,
  tempHide: Ut(!1),
  fixed: We(Po, "close"),
  editable: ee,
  background: C(B, ""),
  margin: C(te, ""),
  text: C(B, ""),
  border: C(B, ""),
  borderWidth: C(te, ""),
  radius: C(te, ""),
  textSize: C(te, ""),
  textWeight: C(N, "normal"),
  fontFamily: C(N, "sans-serif"),
  fontStyle: C(N, "normal"),
  cellColor: we,
  textOverflow: C(co, "ellipsis"),
  linkColor: C(B, "#3377ff"),
  linkHoverColor: C(B, ""),
  linkActiveColor: C(B, ""),
  summaryColumns: C(Xe(ho), [{}, {}, {}])
}, Lo = v(Ze)` width: 24px; margin: 0 8px 0 -3px; padding: 3px;`, jo = v(Je)` width: 24px; margin: 0 8px 0 -3px; padding: 3px;`, qo = v(Qe)` width: 24px; margin: 0 8px 0 -3px; padding: 3px;`, je = v(pe)` width: 24px; margin: 0 8px 0 -3px; padding: 3px;`, Go = v(et)` width: 24px; margin: 0 8px 0 -3px; padding: 3px;`;
v(ro)` width: 24px; margin: 0 0px 0 -12px;`;
const Ko = new be(bt, (e, t) => ({
  ...e,
  onWidthResize: (o) => {
    t(Yt({
      width: He(o, !0),
      autoWidth: He("fixed", !0)
    }));
  }
})).setPropertyViewFn(() => /* @__PURE__ */ c(j, {})).build();
class ie extends Ko {
  reduce(t) {
    let o = super.reduce(t);
    if (t.type === Oe.UPDATE_NODES_V2 && (o = o.setChild("cellColor", o.children.cellColor.reduce(we.changeContextDataAction({
      currentCell: void 0,
      currentRow: {}
    }))), o = o.setChild("cellTooltip", o.children.cellTooltip.reduce(ye.changeContextDataAction({
      currentCell: void 0,
      currentRow: {},
      currentIndex: 0
    })))), t.type === Oe.CHANGE_VALUE) {
      const n = o.children.title.unevaledValue, i = o.children.dataIndex.getView();
      n || o.children.title.dispatchChangeValueAction(i);
    }
    return o;
  }
  getView() {
    const t = super.getView(), o = this.children.render.getSelectedComp().getComp().children.compType.getView();
    return {
      ...t,
      editable: Be[o].canBeEditable() && t.editable
    };
  }
  exposingNode() {
    const t = this.children.dataIndex.exposingNode(), o = Xt(this.children.render.node(), (n) => ({
      wrap: n.__comp__.wrap,
      map: y.mapValues(n.__map__, (i) => i.comp)
    }));
    return he({
      dataIndex: t,
      render: o
    });
  }
  propertyView(t, o, n) {
    var p, m, x;
    const i = this.children.render.getSelectedComp().getComp().children.compType.getView(), l = ((p = this.children.render.getSelectedComp().getParams()) == null ? void 0 : p.initialColumns) || [], a = this.children.render.getSelectedComp().getComp().toJsonValue();
    let s = "{{currentCell}}";
    (m = a.comp) != null && m.hasOwnProperty("src") ? s = a.comp.src : (x = a.comp) != null && x.hasOwnProperty("text") && (s = a.comp.text);
    const d = this.children.summaryColumns.getView();
    return /* @__PURE__ */ L(j, {
      children: [o === "summary" && d[n].propertyView(""), o === "normal" && /* @__PURE__ */ L(j, {
        children: [this.children.title.propertyView({
          label: h("table.columnTitle"),
          placeholder: this.children.dataIndex.getView()
        }), this.children.titleTooltip.propertyView({
          label: h("table.columnTitleTooltip")
        }), this.children.cellTooltip.getPropertyView(), /* @__PURE__ */ c(Jt, {
          showSearch: !0,
          defaultValue: s,
          options: l,
          label: h("table.dataMapping"),
          onChange: (u) => {
            const r = i;
            let g = {
              text: u
            };
            i === "image" && (g = {
              src: u
            }), this.children.render.dispatchChangeValueAction({
              compType: r,
              comp: g
            });
          }
        }), this.children.render.getPropertyView(), this.children.showTitle.propertyView({
          label: h("table.showTitle"),
          tooltip: h("table.showTitleTooltip")
        }), Be[i].canBeEditable() && this.children.editable.propertyView({
          label: h("table.editable")
        }), this.children.sortable.propertyView({
          label: h("table.sortable")
        }), this.children.hide.propertyView({
          label: h("prop.hide")
        }), this.children.align.propertyView({
          label: h("table.align"),
          radioButton: !0
        }), this.children.fixed.propertyView({
          label: h("table.fixedColumn"),
          radioButton: !0
        }), this.children.autoWidth.propertyView({
          label: h("table.autoWidth"),
          radioButton: !0
        }), this.children.autoWidth.getView() === "fixed" && this.children.width.propertyView({
          label: h("prop.width")
        }), (i === "link" || i === "links") && /* @__PURE__ */ L(j, {
          children: [/* @__PURE__ */ c(Fe, {
            style: {
              margin: "12px 0"
            }
          }), oe({}, /* @__PURE__ */ c("div", {
            children: /* @__PURE__ */ c("b", {
              children: "Link Style"
            })
          })), this.children.linkColor.propertyView({
            label: h("text")
            // trans('style.background'),
          }), this.children.linkHoverColor.propertyView({
            label: "Hover text"
            // trans('style.background'),
          }), this.children.linkActiveColor.propertyView({
            label: "Active text"
            // trans('style.background'),
          })]
        }), /* @__PURE__ */ c(Fe, {
          style: {
            margin: "12px 0"
          }
        }), oe({}, /* @__PURE__ */ c("div", {
          children: /* @__PURE__ */ c("b", {
            children: "Column Style"
          })
        })), this.children.background.propertyView({
          label: h("style.background")
        }), i !== "link" && this.children.text.propertyView({
          label: h("text")
        }), this.children.border.propertyView({
          label: h("style.border")
        }), this.children.borderWidth.propertyView({
          label: h("style.borderWidth"),
          preInputNode: /* @__PURE__ */ c(jo, {
            as: Je,
            title: ""
          }),
          placeholder: "1px"
        }), this.children.radius.propertyView({
          label: h("style.borderRadius"),
          preInputNode: /* @__PURE__ */ c(Lo, {
            as: Ze,
            title: ""
          }),
          placeholder: "3px"
        }), this.children.textSize.propertyView({
          label: h("style.textSize"),
          preInputNode: /* @__PURE__ */ c(qo, {
            as: Qe,
            title: ""
          }),
          placeholder: "14px"
        }), this.children.textWeight.propertyView({
          label: h("style.textWeight"),
          preInputNode: /* @__PURE__ */ c(Go, {
            as: et,
            title: ""
          }),
          placeholder: "normal"
        }), this.children.fontFamily.propertyView({
          label: h("style.fontFamily"),
          preInputNode: /* @__PURE__ */ c(je, {
            as: pe,
            title: ""
          }),
          placeholder: "sans-serif"
        }), this.children.fontStyle.propertyView({
          label: h("style.fontStyle"),
          preInputNode: /* @__PURE__ */ c(je, {
            as: pe,
            title: ""
          }),
          placeholder: "normal"
        }), this.children.textOverflow.getPropertyView(), this.children.cellColor.getPropertyView()]
      })]
    });
  }
  getChangeSet() {
    const t = this.children.dataIndex.getView(), o = y.mapValues(this.children.render.getMap(), (n) => n.getComp().children.comp.children.changeValue.getView());
    return {
      [t]: o
    };
  }
  dispatchClearChangeSet() {
    this.children.render.dispatch(Zt(re.forEachAction(ce("comp", ce("comp", Ge("changeValue", null, !1))))));
  }
  dispatchClearInsertSet() {
    const t = this.children.render.getMap();
    Object.keys(t).filter((n) => n.startsWith(z)).forEach((n) => {
      t[n].getComp().children.comp.children.changeValue.dispatchChangeValueAction(null);
    });
  }
  static setSelectionAction(t) {
    return ce("render", re.setSelectionAction(t));
  }
}
function Uo() {
  return {
    title: h("table.customColumn"),
    dataIndex: Qt(),
    isCustom: !0
  };
}
function ft(e, t, o, n) {
  return {
    title: o ?? e,
    dataIndex: e,
    isCustom: !1,
    autoWidth: "fixed",
    width: t + "",
    render: {
      compType: n ? "tag" : "text",
      comp: {
        text: "{{currentCell}}"
      }
    }
  };
}
const ur = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  CellColorComp: we,
  CellTooltipComp: ye,
  ColumnComp: ie,
  RenderComp: re,
  columnChildrenMap: bt,
  newCustomColumn: Uo,
  newPrimaryColumn: ft
}, Symbol.toStringTag, { value: "Module" })), Yo = Xe(ie);
function wt(e) {
  if (e.length <= 0 || typeof e[0] == "string")
    return;
  const t = {};
  return e.slice(0, 50).forEach((o) => {
    Object.keys(o).forEach((n) => {
      t.hasOwnProperty(n) || (t[n] = o[n]);
    });
  }), t;
}
class Xo extends Yo {
  reduce(t) {
    if (no(t, "dataChanged")) {
      const o = t.value.rowExample, {
        readOnly: n
      } = lo();
      let i = this;
      if (t.value.doGeneColumn && (t.value.dynamicColumn || !n)) {
        const l = this.geneColumnsAction(o, t.value.data);
        i = this.reduce(this.multiAction(l));
      }
      return i;
    }
    return super.reduce(t);
  }
  getChangeSet(t) {
    const o = {};
    return this.getView().forEach((i) => {
      const l = i.getChangeSet();
      Object.keys(l).forEach((a) => {
        Object.keys(l[a]).forEach((s) => {
          const d = t ? s.startsWith(z) : !s.startsWith(z);
          !y.isNil(l[a][s]) && d && (o[s] || (o[s] = {}), o[s][a] = l[a][s]);
        });
      });
    }), o;
  }
  dispatchClearChangeSet() {
    this.getView().forEach((o) => o.dispatchClearChangeSet());
  }
  dispatchClearInsertSet() {
    this.getView().forEach((o) => o.dispatchClearInsertSet());
  }
  /**
   * If the table data changes, call this method to trigger the action
   */
  dataChangedAction(t) {
    return io({
      type: "dataChanged",
      ...t
    }, !0);
  }
  /**
   * According to the data, adjust the column
   */
  geneColumnsAction(t, o) {
    if (t == null)
      return [];
    const n = Object.keys(t);
    if (n.length === 0)
      return [];
    const i = this.getView(), l = [];
    let a = 0;
    return i.forEach((s, d) => {
      if (s.getView().isCustom)
        return;
      const p = s.getView().dataIndex;
      (p === S || !n.find((m) => p === m)) && (l.push(this.deleteAction(d - a)), a += 1);
    }), n.forEach((s) => {
      s === S && fe(o) || i.find((d) => d.getView().dataIndex === s) || l.push(this.pushAction(ft(s, ut(s, o))));
    }), l.length === 0 ? [] : l;
  }
  withParamsNode() {
    const t = this.getView(), o = y(t).map((i) => i.children.render.getOriginalComp().node()).toPairs().fromPairs().value();
    return Me(this, "withParamsNode", [he(o), o], (i, l) => De(i[1], l[1]))[0];
  }
  getColumnsNode(t) {
    const o = this.getView(), n = y(o).map((l) => l.children[t].node()).toPairs().fromPairs().value();
    return Me(this, "col_nodes_" + t, [he(n), n], (l, a) => De(l[1], a[1]))[0];
  }
  setSelectionAction(t) {
    return this.forEachAction(ie.setSelectionAction(t));
  }
}
const hr = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  ColumnListComp: Xo,
  tableDataRowExample: wt
}, Symbol.toStringTag, { value: "Module" }));
export {
  ie as C,
  z as E,
  w as O,
  re as R,
  Mo as T,
  lt as a,
  at as b,
  ut as c,
  $o as d,
  nt as e,
  yo as f,
  vo as g,
  st as h,
  S as i,
  Uo as j,
  Xo as k,
  dt as l,
  sr as m,
  ft as n,
  dr as o,
  cr as p,
  ur as q,
  hr as r,
  xo as s,
  wt as t
};
