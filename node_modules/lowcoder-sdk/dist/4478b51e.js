import { m as i, _ as t, v as o } from "./c988e26e.js";
import "react";
import "react-dom";
const p = o(""), c = i(p, !0);
describe("mapComp", () => {
  it("map actions", () => {
    let e = new c({
      value: {}
    });
    expect(t.size(e.getView())).toEqual(0), e = e.reduce(c.batchSetAction({
      a: "a"
    })), expect(t.size(e.getView())).toEqual(1), expect(e.getView().a.getView()).toEqual("a"), e = e.reduce(c.batchSetAction({
      a: "a0",
      b: "b"
    })), expect(t.size(e.getView())).toEqual(2), expect(e.getView().a.getView()).toEqual("a0"), expect(e.getView().b.getView()).toEqual("b"), e = e.reduce(c.batchSetAction({
      a: "a",
      c: "c"
    })), expect(t.size(e.getView())).toEqual(3), expect(e.getView().a.getView()).toEqual("a"), expect(e.getView().b.getView()).toEqual("b"), expect(e.getView().c.getView()).toEqual("c");
    let a = e.reduce(c.filterAction(["a", "c"]));
    expect(t.size(a.getView())).toEqual(2), expect(a.getView().a.getView()).toEqual("a"), expect(a.getView().c.getView()).toEqual("c"), e = e.reduce(c.batchDeleteAction(["a", "c"])), expect(t.size(e.getView())).toEqual(1), expect(e.getView().b.getView()).toEqual("b"), e = e.reduce(c.clearAction()), expect(t.size(e.getView())).toEqual(0);
  });
});
