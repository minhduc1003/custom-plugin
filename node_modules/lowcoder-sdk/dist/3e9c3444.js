import { q as v, S as p, v as y, g1 as F, w as e, am as n, dT as s, X as d, M as T, F as r, G as m, dX as A, _ as w, dZ as N, a8 as C, Y as t, cv as V, bO as b, g2 as S, g3 as I, g4 as k, g5 as h, e5 as R, dr as c, au as _ } from "./c988e26e.js";
import "react";
import { ColumnTypeComp as z } from "./22fa10de.js";
import { TextOverflowControl as M } from "./765a8ca5.js";
import "react-dom";
import "./8c51b61b.js";
import "./5230605f.js";
import "./be799735.js";
import "./0417d842.js";
import "./975a080d.js";
import "./82a4bca8.js";
import "./71bdd49a.js";
import "./2088ebd5.js";
import "./d3b0afba.js";
import "./85e61f03.js";
import "./36c2248f.js";
import "./70f9cad3.js";
import "./80c67fbe.js";
import "./094988fd.js";
import "./734fbd0f.js";
import "./80229ccd.js";
import "./16b77c22.js";
import "./b25be8d9.js";
import "./0c3664e6.js";
import "./c504e788.js";
import "./ad2208e2.js";
import "./e5bcb9b0.js";
import "./51dea655.js";
import "./fcc9e192.js";
import "./325a473d.js";
import "./33706f61.js";
import "./765e17fb.js";
import "./98885dce.js";
import "./9ee13d0e.js";
import "./9f467dd0.js";
const g = v(z), O = {
  cellTooltip: p,
  // a custom column or a data column
  isCustom: y(!1),
  // If it is a data column, it must be the name of the column and cannot be duplicated as a react key
  dataIndex: y(""),
  render: g,
  align: F,
  background: e(n, ""),
  margin: e(s, ""),
  text: e(n, ""),
  border: e(n, ""),
  radius: e(s, ""),
  textSize: e(s, ""),
  textWeight: e(p, "normal"),
  fontFamily: e(p, "sans-serif"),
  fontStyle: e(p, "normal"),
  cellColor: p,
  textOverflow: e(M, "ellipsis"),
  linkColor: e(n, "#3377ff"),
  linkHoverColor: e(n, ""),
  linkActiveColor: e(n, "")
}, H = d(S)` width: 24px; margin: 0 8px 0 -3px; padding: 3px;`, P = d(I)` width: 24px; margin: 0 8px 0 -3px; padding: 3px;`, f = d(h)` width: 24px; margin: 0 8px 0 -3px; padding: 3px;`, W = d(k)` width: 24px; margin: 0 8px 0 -3px; padding: 3px;`, B = new T(O, (u, o) => ({
  ...u
})).setPropertyViewFn(() => /* @__PURE__ */ r(m, {})).build();
class be extends B {
  reduce(o) {
    return super.reduce(o);
  }
  getView() {
    const o = super.getView(), i = this.children.render.getSelectedComp().getComp().children.compType.getView();
    return {
      ...o,
      columnType: i
    };
  }
  exposingNode() {
    const o = this.children.dataIndex.exposingNode(), i = A(this.children.render.node(), (l) => ({
      wrap: l.__comp__.wrap,
      map: w.mapValues(l.__map__, (a) => a.comp)
    }));
    return N({
      dataIndex: o,
      render: i
    });
  }
  propertyView(o) {
    var a, x;
    const i = this.children.render.getSelectedComp().getComp().children.compType.getView(), l = this.children.render.getSelectedComp().getComp().toJsonValue();
    return (a = l.comp) != null && a.hasOwnProperty("src") ? l.comp.src : (x = l.comp) != null && x.hasOwnProperty("text") && l.comp.text, /* @__PURE__ */ C(m, {
      children: [this.children.cellTooltip.propertyView({
        label: t("table.columnTooltip")
      }), this.children.render.getPropertyView(), this.children.align.propertyView({
        label: t("table.align"),
        radioButton: !0
      }), (i === "link" || i === "links") && /* @__PURE__ */ C(m, {
        children: [/* @__PURE__ */ r(V, {
          style: {
            margin: "12px 0"
          }
        }), b({}, /* @__PURE__ */ r("div", {
          children: /* @__PURE__ */ r("b", {
            children: "Link Style"
          })
        })), this.children.linkColor.propertyView({
          label: t("text")
        }), this.children.linkHoverColor.propertyView({
          label: "Hover text"
        }), this.children.linkActiveColor.propertyView({
          label: "Active text"
        })]
      }), /* @__PURE__ */ r(V, {
        style: {
          margin: "12px 0"
        }
      }), b({}, /* @__PURE__ */ r("div", {
        children: /* @__PURE__ */ r("b", {
          children: "Column Style"
        })
      })), this.children.background.propertyView({
        label: t("style.background")
      }), i !== "link" && this.children.text.propertyView({
        label: t("text")
      }), this.children.border.propertyView({
        label: t("style.border")
      }), this.children.radius.propertyView({
        label: t("style.borderRadius"),
        preInputNode: /* @__PURE__ */ r(H, {
          as: S,
          title: ""
        }),
        placeholder: "3px"
      }), this.children.textSize.propertyView({
        label: t("style.textSize"),
        preInputNode: /* @__PURE__ */ r(P, {
          as: I,
          title: ""
        }),
        placeholder: "14px"
      }), this.children.textWeight.propertyView({
        label: t("style.textWeight"),
        preInputNode: /* @__PURE__ */ r(W, {
          as: k,
          title: ""
        }),
        placeholder: "normal"
      }), this.children.fontFamily.propertyView({
        label: t("style.fontFamily"),
        preInputNode: /* @__PURE__ */ r(f, {
          as: h,
          title: ""
        }),
        placeholder: "sans-serif"
      }), this.children.fontStyle.propertyView({
        label: t("style.fontStyle"),
        preInputNode: /* @__PURE__ */ r(f, {
          as: h,
          title: ""
        }),
        placeholder: "normal"
      }), this.children.cellColor.propertyView({
        label: t("table.cellColor")
      })]
    });
  }
  getChangeSet() {
    const o = this.children.dataIndex.getView(), i = w.mapValues(this.children.render.getMap(), (l) => l.getComp().children.comp.children.changeValue.getView());
    return {
      [o]: i
    };
  }
  dispatchClearChangeSet() {
    this.children.render.dispatch(R(g.forEachAction(c("comp", c("comp", _("changeValue", null, !1))))));
  }
  static setSelectionAction(o) {
    return c("render", g.setSelectionAction(o));
  }
}
export {
  g as RenderComp,
  be as SummaryColumnComp,
  O as columnChildrenMap
};
