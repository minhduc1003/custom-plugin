import { a8 as r, G as i, bU as l, F as n, gy as c, Y as o, gI as f, L as u } from "./c988e26e.js";
import { C as m } from "./5230605f.js";
import { ColumnValueTooltip as x } from "./0417d842.js";
import "react";
import "react-dom";
import "./be799735.js";
import "./975a080d.js";
const p = {
  text: f,
  prefixIcon: u,
  suffixIcon: u
}, s = (e) => e.text + "", v = function() {
  return new m(p, (e, a) => {
    const t = e.changeValue ?? s(e);
    return /* @__PURE__ */ r(i, {
      children: [l(e.prefixIcon) && /* @__PURE__ */ n("span", {
        children: e.prefixIcon
      }), /* @__PURE__ */ n("span", {
        children: t
      }), l(e.suffixIcon) && /* @__PURE__ */ n("span", {
        children: e.suffixIcon
      })]
    });
  }, (e) => e.text.value, s).setEditViewFn((e) => /* @__PURE__ */ n(c, {
    defaultValue: e.value,
    autoFocus: !0,
    variant: "borderless",
    onChange: (a) => {
      const t = a.target.value;
      e.onChange(t);
    },
    onBlur: e.onChangeEnd,
    onPressEnter: e.onChangeEnd
  })).setPropertyViewFn((e) => /* @__PURE__ */ r(i, {
    children: [e.text.propertyView({
      label: o("table.columnValue"),
      tooltip: x
    }), e.prefixIcon.propertyView({
      label: o("button.prefixIcon")
    }), e.suffixIcon.propertyView({
      label: o("button.suffixIcon")
    })]
  })).build();
}();
export {
  v as SimpleTextComp
};
