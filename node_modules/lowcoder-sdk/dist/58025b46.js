import { eG as b, fU as d, fV as m, O as l, bI as h, Y as r, F as c, a8 as x, a9 as C, G as D, ae as i, bL as v, fd as n } from "./c988e26e.js";
import { useEffect as V } from "react";
import { formDataChildren as w, FormDataPropertyView as g } from "./85e61f03.js";
import { SelectInputValidationChildren as y, SelectInputInvalidConfig as k } from "./d3b0afba.js";
import { defaultTreeData as S, treeDataTooltip as j } from "./8cb32968.js";
import "react-dom";
function u(e, t) {
  return n(e, ["string", "number"], t);
}
function f(e, t) {
  return n(e, ["array", "undefined"], t, (a, o) => (n(a, ["object"], o), n(a.label, ["string"], "label"), u(a.value, "value"), n(a.disabled, ["boolean", "undefined"], "disabled"), n(a.selectable, ["boolean", "undefined"], "selectable"), n(a.checkable, ["boolean", "undefined"], "checkable"), n(a.disableCheckbox, ["boolean", "undefined"], "disableCheckbox"), n(a.isLeaf, ["boolean", "undefined"], "isLeaf"), f(a.children, "children"), a));
}
function E(e) {
  return e === "" ? [] : f(e) ?? [];
}
function s(e) {
  return e === "" ? [] : n(e, ["array"], void 0, u);
}
function p(e, t) {
  if (e) {
    for (const a of e)
      if (t(a) === !1 || !p(a.children, t))
        return !1;
  }
  return !0;
}
function N(e) {
  const t = [];
  return p(e, (a) => {
    a.children && a.children.length > 0 && t.push(a.value);
  }), t;
}
const B = {
  // TODO: support loading mode
  treeData: b(E, S),
  defaultValue: d("value", s, []),
  value: d("value", s, []),
  expanded: m(s, []),
  defaultExpandAll: l,
  showLine: l,
  showLeafIcon: l,
  disabled: h,
  ...y,
  ...w
};
function G(e) {
  const {
    treeData: t,
    expanded: a,
    defaultExpandAll: o
  } = e;
  V(() => {
    o ? a.onChange(N(t)) : a.reset();
  }, [o, t]);
}
const O = (e) => e.treeData.propertyView({
  label: r("tree.treeData"),
  tooltip: j
}), U = (e) => e.defaultValue.propertyView({
  label: r("tree.value")
}), Y = (e) => /* @__PURE__ */ c(g, {
  ...e
}), q = (e, t) => /* @__PURE__ */ x(C, {
  name: r("prop.expand"),
  children: [e.expanded.propertyView({
    label: r("tree.expanded")
  }), e.defaultExpandAll.propertyView({
    label: r("tree.defaultExpandAll")
  }), t]
}), z = (e, t) => /* @__PURE__ */ c(D, {}), H = [
  // TODO: more data
  new i("value", r("tree.valueDesc")),
  new i("treeData", r("tree.treeDataDesc")),
  new i("expanded", r("tree.expandedDesc")),
  k,
  ...v
];
export {
  H as TreeNameConfigs,
  z as advancedSection,
  q as expandSection,
  Y as formSection,
  B as treeCommonChildren,
  O as treeDataPropertyView,
  G as useTree,
  U as valuePropertyView
};
